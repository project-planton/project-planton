---
apiVersion: aws.project-planton.org/v1
kind: AwsVpc
metadata:
  name: "{{ values.env }}-vpc"
spec:
  availabilityZones:
    - "{{ values.availability_zone_1 }}"
    - "{{ values.availability_zone_2 }}"
  subnetSize: 24
  subnetsPerAvailabilityZone: 1
  vpcCidr: 10.0.0.0/16
  isDnsHostnamesEnabled: true
  isDnsSupportEnabled: true
  isNatGatewayEnabled: true
---
apiVersion: aws.project-planton.org/v1
kind: AwsSecurityGroup
metadata:
  name: "{{ values.env }}-http-ingress-and-all-egress"
spec:
  description: allow ingress on http/s ports and egress on all ports
  vpcId:
    valueFrom:
      kind: AwsVpc
      name: "{{ values.env }}-vpc"
      fieldPath: status.outputs.vpcId
  ingress:
    - description: http from anywhere
      fromPort: 80
      ipv4Cidrs:
        - 0.0.0.0/0
      protocol: TCP
      toPort: 80
    - description: https from anywhere
      fromPort: 443
      ipv4Cidrs:
        - 0.0.0.0/0
      protocol: TCP
      toPort: 443
    # ── Optional service‑specific port (skip if 80/443) ───────
    {% if values.service_port|trim not in ["80", "443"] %}
    - description: Allow on {{ values.service_port }}
      fromPort: {{ values.service_port }}
      toPort: {{ values.service_port }}
      protocol: TCP
      ipv4Cidrs:
        - 0.0.0.0/0
    {% endif %}
  egress:
    - description: allow all
      ipv4Cidrs:
        - 0.0.0.0/0
      protocol: "-1"
---
apiVersion: aws.project-planton.org/v1
kind: AwsRoute53Zone
metadata:
  name: "{{ values.domain_name }}"
spec: {}
  {% if values.httpsEnabled | bool %}
---
apiVersion: aws.project-planton.org/v1
kind: AwsCertManagerCert
metadata:
  name: "{{ values.env }}-alb-cert"
spec:
  primaryDomainName: "{{ values.load_balancer_domain_name }}"
  alternateDomainNames:
    - "*.{{ values.load_balancer_domain_name }}"
  route53HostedZoneId:
    valueFrom:
      kind: AwsRoute53Zone
      name: "{{ values.domain_name }}"
      fieldPath: status.outputs.zoneId
  validationMethod: DNS
  {% endif %}
---
apiVersion: aws.project-planton.org/v1
kind: AwsAlb
metadata:
  name: "{{ values.env }}-alb"
spec:
  subnets:
    - valueFrom:
        kind: AwsVpc
        name: "{{ values.env }}-vpc"
        fieldPath: status.outputs.publicSubnets.[0].id
    - valueFrom:
        kind: AwsVpc
        name: "{{ values.env }}-vpc"
        fieldPath: status.outputs.publicSubnets.[1].id
  securityGroups:
    - valueFrom:
        kind: AwsSecurityGroup
        name: "{{ values.env }}-http-ingress-and-all-egress"
        fieldPath: status.outputs.securityGroupId
  idleTimeoutSeconds: {{ values.alb_idle_timeout_seconds }}
  dns:
    enabled: true
    hostnames:
      - "{{ values.load_balancer_domain_name }}"
      - "*.{{ values.load_balancer_domain_name }}"
    route53ZoneId:
      valueFrom:
        kind: AwsRoute53Zone
        name: "{{ values.domain_name }}"
        fieldPath: status.outputs.zoneId
  {% if values.httpsEnabled | bool %}
  ssl:
    enabled: true
    certificateArn:
      valueFrom:
        kind: AwsCertManagerCert
        name: "{{ values.env }}-alb-cert"
        fieldPath: status.outputs.certArn
  {% endif %}
