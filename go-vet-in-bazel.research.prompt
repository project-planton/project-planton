# Research Request: Comprehensive Go Vet Integration with Bazel Nogo

## Problem Statement

We have a Bazel monorepo using bzlmod (not legacy WORKSPACE) with rules_go v0.56.1 and Go 1.24.0. Our `make build` process runs Bazel build successfully, but then fails at a separate `go vet ./...` step. We want Bazel builds to fail on the same errors that `go vet` catches, ensuring quality issues are detected during compilation, not after.

**Specific Issue**: 
- Bazel build with nogo configured succeeds ‚úÖ
- Standalone `go vet` fails with: `non-constant format string in call to fmt.Sprintf` ‚ùå

**Code That Should Fail**:
```go
// File: internal/manifest/load_manifest.go:163-164
msg.WriteString(fmt.Sprintf(bold("üí° TIP: ") + "If you're developing a new cloud resource, ensure the proto files\n"))
msg.WriteString(fmt.Sprintf("   are compiled and the CLI binary is rebuilt.\n\n"))
```

Where `bold()` is a function that returns `color.New(color.Bold).Sprint()` - a non-constant string.

## What We've Tried

### Attempt 1: Manual Analyzer List
```python
# BUILD.bazel
nogo(
    name = "project_planton_nogo",
    visibility = ["//visibility:public"],
    deps = [
        "@org_golang_x_tools//go/analysis/passes/printf:go_default_library",
        # ... 21 other standard analyzers
    ],
)
```

**Result**: Nogo runs but doesn't catch the format string error.

### Attempt 2: Using vet = True
```python
# BUILD.bazel
nogo(
    name = "project_planton_nogo",
    visibility = ["//visibility:public"],
    vet = True,
)
```

**Result**: Still doesn't catch the format string error.

### Current MODULE.bazel Configuration
```python
go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = "1.24.0")
go_sdk.nogo(nogo = "//:project_planton_nogo")

go_deps.module(
    path = "golang.org/x/tools",
    sum = "h1:zdAyfUGbYmuVokhzVmghFl2ZJh5QhcfebBgmVPFYA+8=",
    version = "v0.15.0",
)
use_repo(go_deps, "org_golang_x_tools")
```

**Build Output**:
```
[669 / 705] Running nogo on //apis/project/planton/provider/kubernetes/workload/cronjobkubernetes/v1:cronjobkubernetes
INFO: Build completed successfully, 705 total actions
```

Nogo is clearly running, but not catching the error.

## Research Questions

### 1. Non-Constant Format String Detection

**Primary Question**: Why doesn't the standard `printf` analyzer catch non-constant format strings?

**Sub-questions**:
- Is "non-constant format string" a separate check from the printf analyzer?
- Is this check part of `go vet` command-line but not the printf analysis pass?
- Are there additional flags or configuration needed for the printf analyzer?
- Is this check only available in certain Go versions or golang.org/x/tools versions?

**What to research**:
- golang.org/x/tools/go/analysis/passes/printf source code
- Difference between `go vet` command and analysis passes
- List of ALL checks that `go vet` performs
- Which analyzers correspond to which `go vet` checks

### 2. Go Vet vs Analysis Passes Mapping

**Question**: What is the complete mapping between `go vet` checks and analysis passes?

**Context**: `go vet` might perform additional checks beyond what individual analysis passes provide.

**What to research**:
- Complete list of checks performed by `go tool vet`
- Source code: `cmd/vet/main.go` in Go toolchain
- How `go vet` invokes analyzers vs how nogo invokes them
- Any additional checks `go vet` performs that aren't in analysis passes

### 3. Nogo Configuration Best Practices

**Question**: What is the correct way to configure nogo to be 100% equivalent to `go vet`?

**What to research**:
- Official rules_go nogo documentation and examples
- Production examples from large Go projects using Bazel (Kubernetes, etcd, Istio, etc.)
- Configuration files from well-known projects
- nogo `config` parameter vs `deps` parameter vs `vet` parameter
- JSON configuration options for analyzers

### 4. Format String Specific Configuration

**Question**: How to configure nogo to catch all printf/format string issues?

**What to research**:
- printf analyzer configuration options
- `funcs` parameter for custom printf-like functions
- How to enable strict non-constant format string checking
- Examples of nogo catching non-constant format strings
- GitHub issues related to printf analyzer and format strings

### 5. Debugging Nogo Failures

**Question**: How can we debug why nogo isn't catching specific issues?

**What to research**:
- How to see nogo's detailed output
- How to run nogo in verbose/debug mode
- How to test if an analyzer would catch an issue independently
- Bazel flags for nogo debugging
- Log files or artifacts that show nogo analysis results

### 6. Alternative Approaches

**Question**: If standard nogo can't match `go vet` exactly, what are the alternatives?

**What to research**:
- Custom nogo analyzers that wrap `go vet`
- Using actual `go vet` as a Bazel test target
- Pre-compilation hooks that run `go vet`
- Integration with golangci-lint in Bazel
- Other static analysis tools used with Bazel

## Current Project Context

### Build System
- **Bazel**: bzlmod (MODULE.bazel, not WORKSPACE)
- **rules_go**: v0.56.1
- **Go version**: 1.24.0
- **Gazelle**: v0.45.0
- **Remote cache**: BuildBuddy
- **OS**: macOS (darwin_arm64)

### Repository Structure
- Monorepo with multiple Go packages
- Protobuf code generation (buf)
- Auto-generated BUILD.bazel files (via Gazelle)
- Pulumi and Terraform modules written in Go

### Makefile Build Flow
```makefile
build: protos generate-cloud-resource-kind-map bazel-mod-tidy bazel-gazelle bazel-build-cli fmt build-cli

bazel-build-cli:
	${BAZEL} build ${BAZEL_REMOTE_FLAGS} //:project-planton

vet:
	go vet ./...

build-cli: deps vet
	# ... go build commands
```

### File Locations
- Root BUILD.bazel: `/Users/swarup/scm/github.com/project-planton/project-planton/BUILD.bazel`
- MODULE.bazel: `/Users/swarup/scm/github.com/project-planton/project-planton/MODULE.bazel`
- .bazelrc: `/Users/swarup/scm/github.com/project-planton/project-planton/.bazelrc`

## Expected Deliverables

### 1. Root Cause Analysis

Clearly explain:
- Why the current nogo configuration doesn't catch non-constant format strings
- The technical difference between `go vet` and nogo analyzers
- What specific check/analyzer is missing or misconfigured

### 2. Working Solution

Provide:
- **Exact** BUILD.bazel nogo configuration that matches `go vet` behavior
- **Exact** MODULE.bazel configuration (if changes needed)
- Any additional files needed (nogo config JSON, custom analyzers, etc.)
- Step-by-step implementation instructions

### 3. Verification Steps

Document how to:
- Test that the configuration works
- Verify nogo catches the specific error
- Confirm it catches all errors that `go vet` catches
- Validate the configuration is correct

### 4. Production Examples

Find and document:
- Real-world projects successfully using nogo to replicate `go vet`
- Links to their BUILD.bazel and MODULE.bazel files
- Any custom analyzers they've written
- Configuration patterns that work at scale

### 5. Limitations and Trade-offs

Document:
- If 100% `go vet` equivalence is impossible, explain why
- What checks might not be possible in nogo
- Performance implications
- Maintenance burden of the solution
- Alternative approaches if nogo can't do it

## Test Case

The solution MUST make this build fail:

```bash
# File has intentional format string error
./bazelw build //internal/manifest:manifest
# Expected: ERROR with message about non-constant format string
# Actual: Builds successfully
```

And this should also fail:

```bash
./bazelw build --config=bb --remote_header=x-buildbuddy-api-key=$BUILDBUDDY_API_KEY //:project-planton
# Expected: ERROR with message about non-constant format string
# Actual: Builds successfully
```

## Output Format

Please provide a comprehensive research report with:

### Section 1: Technical Analysis
- Root cause of why current configuration doesn't work
- How `go vet` performs non-constant format string checks
- How nogo should be configured to match

### Section 2: Implementation Guide
- Complete, copy-pasteable configuration
- Annotated with explanations
- Multiple approaches if there are alternatives

### Section 3: References
- Links to official documentation
- Links to source code
- Links to relevant GitHub issues
- Examples from production projects

### Section 4: Testing Protocol
- Commands to verify it works
- Expected output showing the error is caught
- How to test other `go vet` checks

### Section 5: Recommendations
- Which approach is best for our setup
- Long-term maintainability considerations
- Whether we should keep standalone `go vet` or rely only on nogo

## Priority

This is HIGH PRIORITY because:
1. Format string vulnerabilities are security issues
2. Build inconsistency creates poor developer experience
3. We waste time on builds that should fail earlier
4. Team needs confidence that Bazel catches what `go vet` catches

## Additional Context

### Why We Care About This Specific Error

The non-constant format string check catches security vulnerabilities:

```go
// Vulnerable pattern
userInput := getInput()
fmt.Printf(userInput)  // Format string attack possible

// Also vulnerable
prefix := getPrefix()
fmt.Printf(prefix + " %s", value)  // Still vulnerable
```

Our specific case (`bold("üí° TIP: ") + "..."`) isn't a security risk because `bold()` is internal, but the check is important for preventing future vulnerabilities.

### What Success Looks Like

After implementing your recommendations:

1. Developer introduces code with format string error
2. Runs `make build`
3. Bazel build fails IMMEDIATELY with clear error message
4. Error message points to exact file, line, and issue
5. Developer fixes issue
6. Build succeeds
7. Standalone `go vet` also passes (redundantly)

No wasted time, no confusion, no security vulnerabilities.

## Research Scope

**In Scope**:
- rules_go nogo configuration
- Standard Go analyzers from golang.org/x/tools
- Configuration options (JSON, flags, parameters)
- Custom analyzers if needed
- Integration with bzlmod
- BuildBuddy remote caching compatibility

**Out of Scope**:
- Third-party linters (golangci-lint, staticcheck, etc.)
- Legacy WORKSPACE configuration
- Non-Go static analysis
- IDE integration (separate concern)

## Timeline

Please prioritize finding a working solution over perfect documentation. We need:
1. **Quick answer**: Does nogo support non-constant format string checking? (Yes/No)
2. **If Yes**: Exact configuration to enable it
3. **If No**: Best alternative approach that runs during Bazel build

Thank you for the thorough research!

