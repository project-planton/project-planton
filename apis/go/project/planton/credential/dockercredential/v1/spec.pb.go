// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/credential/dockercredential/v1/spec.proto

package dockercredentialv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DockerRepoProvider enum represents the various Docker repository providers.
// This enumeration allows specifying the type of Docker repository being used, such as GCP Artifact Registry, AWS CodeArtifact, Azure Artifacts, or JFrog Artifactory etc.
type DockerRepoProvider int32

const (
	DockerRepoProvider_docker_repo_provider_unspecified DockerRepoProvider = 0
	DockerRepoProvider_gcp_artifact_registry            DockerRepoProvider = 1
	DockerRepoProvider_aws_elastic_container_registry   DockerRepoProvider = 2
	DockerRepoProvider_azure_container_registry         DockerRepoProvider = 3
	DockerRepoProvider_jfrog_artifactory                DockerRepoProvider = 4
)

// Enum value maps for DockerRepoProvider.
var (
	DockerRepoProvider_name = map[int32]string{
		0: "docker_repo_provider_unspecified",
		1: "gcp_artifact_registry",
		2: "aws_elastic_container_registry",
		3: "azure_container_registry",
		4: "jfrog_artifactory",
	}
	DockerRepoProvider_value = map[string]int32{
		"docker_repo_provider_unspecified": 0,
		"gcp_artifact_registry":            1,
		"aws_elastic_container_registry":   2,
		"azure_container_registry":         3,
		"jfrog_artifactory":                4,
	}
)

func (x DockerRepoProvider) Enum() *DockerRepoProvider {
	p := new(DockerRepoProvider)
	*p = x
	return p
}

func (x DockerRepoProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DockerRepoProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_credential_dockercredential_v1_spec_proto_enumTypes[0].Descriptor()
}

func (DockerRepoProvider) Type() protoreflect.EnumType {
	return &file_project_planton_credential_dockercredential_v1_spec_proto_enumTypes[0]
}

func (x DockerRepoProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DockerRepoProvider.Descriptor instead.
func (DockerRepoProvider) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_credential_dockercredential_v1_spec_proto_rawDescGZIP(), []int{0}
}

// DockerCredentialSpec message represents the specification required to connect to a Docker repository.
// This message consolidates all necessary input parameters to establish a connection with a Docker repository,
// ensuring accurate configuration and validation of credentials.
// Fields include environment information, Docker repository provider, and credentials for GCP Artifact Registry.
type DockerCredentialSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Docker repository provider, specifying the type of Docker repository (e.g., GCP Artifact Registry, AWS CodeArtifact, Azure Artifacts, JFrog Artifactory).
	Provider DockerRepoProvider `protobuf:"varint,1,opt,name=provider,proto3,enum=project.planton.credential.dockercredential.v1.DockerRepoProvider" json:"provider,omitempty"`
	// Credential specification for GCP Artifact Registry provider.
	// This field contains detailed information for connecting to a Docker repository hosted on GCP Artifact Registry.
	GcpArtifactRegistry *DockerCredentialGcpArtifactRegistry `protobuf:"bytes,2,opt,name=gcp_artifact_registry,json=gcpArtifactRegistry,proto3" json:"gcp_artifact_registry,omitempty"`
	// Credential specification for AWS Elastic Container Registry.
	// This field contains detailed information for connecting to a Docker repository hosted on AWS.
	AwsElasticContainerRegistry *DockerCredentialAwsElasticContainerRegistry `protobuf:"bytes,3,opt,name=aws_elastic_container_registry,json=awsElasticContainerRegistry,proto3" json:"aws_elastic_container_registry,omitempty"`
	// Credential specification for GCP Artifact Registry provider.
	// This field contains detailed information for connecting to a Docker repository hosted on Azure.
	AzureContainerRegistry *DockerCredentialAzureContainerRegistry `protobuf:"bytes,4,opt,name=azure_container_registry,json=azureContainerRegistry,proto3" json:"azure_container_registry,omitempty"`
	// Credential specification for GCP Artifact Registry provider.
	// This field contains detailed information for connecting to a Docker repository hosted on Jfrog Artifactory.
	JfrogArtifactory *DockerCredentialJfrogArtifactory `protobuf:"bytes,5,opt,name=jfrog_artifactory,json=jfrogArtifactory,proto3" json:"jfrog_artifactory,omitempty"`
}

func (x *DockerCredentialSpec) Reset() {
	*x = DockerCredentialSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_credential_dockercredential_v1_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerCredentialSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerCredentialSpec) ProtoMessage() {}

func (x *DockerCredentialSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_credential_dockercredential_v1_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerCredentialSpec.ProtoReflect.Descriptor instead.
func (*DockerCredentialSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_credential_dockercredential_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *DockerCredentialSpec) GetProvider() DockerRepoProvider {
	if x != nil {
		return x.Provider
	}
	return DockerRepoProvider_docker_repo_provider_unspecified
}

func (x *DockerCredentialSpec) GetGcpArtifactRegistry() *DockerCredentialGcpArtifactRegistry {
	if x != nil {
		return x.GcpArtifactRegistry
	}
	return nil
}

func (x *DockerCredentialSpec) GetAwsElasticContainerRegistry() *DockerCredentialAwsElasticContainerRegistry {
	if x != nil {
		return x.AwsElasticContainerRegistry
	}
	return nil
}

func (x *DockerCredentialSpec) GetAzureContainerRegistry() *DockerCredentialAzureContainerRegistry {
	if x != nil {
		return x.AzureContainerRegistry
	}
	return nil
}

func (x *DockerCredentialSpec) GetJfrogArtifactory() *DockerCredentialJfrogArtifactory {
	if x != nil {
		return x.JfrogArtifactory
	}
	return nil
}

// DockerCredentialGcpArtifactRegistry message represents the specification required to connect to a Docker repository hosted on GCP Artifact Registry.
// This message consolidates the necessary input parameters for establishing a secure connection with a GCP Artifact Registry.
type DockerCredentialGcpArtifactRegistry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the GCP project in which the Docker repository is created.
	// This field is used to identify the specific GCP project hosting the Docker repository.
	GcpProjectId string `protobuf:"bytes,1,opt,name=gcp_project_id,json=gcpProjectId,proto3" json:"gcp_project_id,omitempty"`
	// The GCP region in which the Docker repository is created.
	// This field is required for constructing the registry hostname.
	GcpRegion string `protobuf:"bytes,2,opt,name=gcp_region,json=gcpRegion,proto3" json:"gcp_region,omitempty"`
	// The Google Service Account Base64 key that has the required permissions for downloading Docker images from the repository.
	// This field must contain a valid base64 encoded service account key.
	ServiceAccountKeyBase64 string `protobuf:"bytes,3,opt,name=service_account_key_base64,json=serviceAccountKeyBase64,proto3" json:"service_account_key_base64,omitempty"`
}

func (x *DockerCredentialGcpArtifactRegistry) Reset() {
	*x = DockerCredentialGcpArtifactRegistry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_credential_dockercredential_v1_spec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerCredentialGcpArtifactRegistry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerCredentialGcpArtifactRegistry) ProtoMessage() {}

func (x *DockerCredentialGcpArtifactRegistry) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_credential_dockercredential_v1_spec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerCredentialGcpArtifactRegistry.ProtoReflect.Descriptor instead.
func (*DockerCredentialGcpArtifactRegistry) Descriptor() ([]byte, []int) {
	return file_project_planton_credential_dockercredential_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *DockerCredentialGcpArtifactRegistry) GetGcpProjectId() string {
	if x != nil {
		return x.GcpProjectId
	}
	return ""
}

func (x *DockerCredentialGcpArtifactRegistry) GetGcpRegion() string {
	if x != nil {
		return x.GcpRegion
	}
	return ""
}

func (x *DockerCredentialGcpArtifactRegistry) GetServiceAccountKeyBase64() string {
	if x != nil {
		return x.ServiceAccountKeyBase64
	}
	return ""
}

// DockerCredentialAwsElasticContainerRegistry message represents the specification required to connect to a Docker repository hosted on AWS.
// This message consolidates the necessary input parameters for establishing a secure connection with a AWS Elastic Container Registry.
type DockerCredentialAwsElasticContainerRegistry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DockerCredentialAwsElasticContainerRegistry) Reset() {
	*x = DockerCredentialAwsElasticContainerRegistry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_credential_dockercredential_v1_spec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerCredentialAwsElasticContainerRegistry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerCredentialAwsElasticContainerRegistry) ProtoMessage() {}

func (x *DockerCredentialAwsElasticContainerRegistry) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_credential_dockercredential_v1_spec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerCredentialAwsElasticContainerRegistry.ProtoReflect.Descriptor instead.
func (*DockerCredentialAwsElasticContainerRegistry) Descriptor() ([]byte, []int) {
	return file_project_planton_credential_dockercredential_v1_spec_proto_rawDescGZIP(), []int{2}
}

// DockerCredentialAzureContainerRegistry message represents the specification required to connect to a Docker repository hosted on Azure.
// This message consolidates the necessary input parameters for establishing a secure connection with a Azure Container Registry.
type DockerCredentialAzureContainerRegistry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DockerCredentialAzureContainerRegistry) Reset() {
	*x = DockerCredentialAzureContainerRegistry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_credential_dockercredential_v1_spec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerCredentialAzureContainerRegistry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerCredentialAzureContainerRegistry) ProtoMessage() {}

func (x *DockerCredentialAzureContainerRegistry) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_credential_dockercredential_v1_spec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerCredentialAzureContainerRegistry.ProtoReflect.Descriptor instead.
func (*DockerCredentialAzureContainerRegistry) Descriptor() ([]byte, []int) {
	return file_project_planton_credential_dockercredential_v1_spec_proto_rawDescGZIP(), []int{3}
}

// DockerCredentialJfrogArtifactory message represents the specification required to connect to a Docker repository hosted on JFrog Artifactory.
// This message consolidates the necessary input parameters for establishing a secure connection with a JFrog Artifactory.
type DockerCredentialJfrogArtifactory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DockerCredentialJfrogArtifactory) Reset() {
	*x = DockerCredentialJfrogArtifactory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_credential_dockercredential_v1_spec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerCredentialJfrogArtifactory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerCredentialJfrogArtifactory) ProtoMessage() {}

func (x *DockerCredentialJfrogArtifactory) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_credential_dockercredential_v1_spec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerCredentialJfrogArtifactory.ProtoReflect.Descriptor instead.
func (*DockerCredentialJfrogArtifactory) Descriptor() ([]byte, []int) {
	return file_project_planton_credential_dockercredential_v1_spec_proto_rawDescGZIP(), []int{4}
}

var File_project_planton_credential_dockercredential_v1_spec_proto protoreflect.FileDescriptor

var file_project_planton_credential_dockercredential_v1_spec_proto_rawDesc = []byte{
	0x0a, 0x39, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x64, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x05, 0x0a, 0x14, 0x44, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x66, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x2e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x87, 0x01, 0x0a, 0x15, 0x67, 0x63,
	0x70, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x47, 0x63, 0x70, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x13,
	0x67, 0x63, 0x70, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x12, 0xa0, 0x01, 0x0a, 0x1e, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x6c, 0x61, 0x73,
	0x74, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x77,
	0x73, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x1b, 0x61, 0x77, 0x73, 0x45, 0x6c,
	0x61, 0x73, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x90, 0x01, 0x0a, 0x18, 0x61, 0x7a, 0x75, 0x72, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x7a, 0x75, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x52, 0x16, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x7d, 0x0a, 0x11, 0x6a, 0x66, 0x72,
	0x6f, 0x67, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x2e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4a, 0x66, 0x72, 0x6f, 0x67, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x10, 0x6a, 0x66, 0x72, 0x6f, 0x67, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xbf, 0x01, 0x0a, 0x23, 0x44, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x47, 0x63, 0x70,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x12, 0x2c, 0x0a, 0x0e, 0x67, 0x63, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x0c, 0x67, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0a, 0x67, 0x63, 0x70, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x67, 0x63, 0x70, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x1a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x22, 0x2d, 0x0a, 0x2b, 0x44, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x77,
	0x73, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x22, 0x28, 0x0a, 0x26, 0x44, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x7a, 0x75,
	0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x22, 0x22, 0x0a, 0x20, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4a, 0x66, 0x72, 0x6f, 0x67, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2a, 0xae, 0x01, 0x0a, 0x12, 0x44, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x24,
	0x0a, 0x20, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x67, 0x63, 0x70, 0x5f, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x10, 0x01, 0x12,
	0x22, 0x0a, 0x1e, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x10,
	0x03, 0x12, 0x15, 0x0a, 0x11, 0x6a, 0x66, 0x72, 0x6f, 0x67, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x04, 0x42, 0x92, 0x03, 0x0a, 0x32, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x64, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x42,
	0x09, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x74, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x64, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x3b,
	0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x76, 0x31, 0xa2, 0x02, 0x04, 0x50, 0x50, 0x43, 0x44, 0xaa, 0x02, 0x2e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5c, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x3a, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5c, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x32, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x3a, 0x3a, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_project_planton_credential_dockercredential_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_credential_dockercredential_v1_spec_proto_rawDescData = file_project_planton_credential_dockercredential_v1_spec_proto_rawDesc
)

func file_project_planton_credential_dockercredential_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_credential_dockercredential_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_credential_dockercredential_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_credential_dockercredential_v1_spec_proto_rawDescData)
	})
	return file_project_planton_credential_dockercredential_v1_spec_proto_rawDescData
}

var file_project_planton_credential_dockercredential_v1_spec_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_project_planton_credential_dockercredential_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_project_planton_credential_dockercredential_v1_spec_proto_goTypes = []any{
	(DockerRepoProvider)(0),                             // 0: project.planton.credential.dockercredential.v1.DockerRepoProvider
	(*DockerCredentialSpec)(nil),                        // 1: project.planton.credential.dockercredential.v1.DockerCredentialSpec
	(*DockerCredentialGcpArtifactRegistry)(nil),         // 2: project.planton.credential.dockercredential.v1.DockerCredentialGcpArtifactRegistry
	(*DockerCredentialAwsElasticContainerRegistry)(nil), // 3: project.planton.credential.dockercredential.v1.DockerCredentialAwsElasticContainerRegistry
	(*DockerCredentialAzureContainerRegistry)(nil),      // 4: project.planton.credential.dockercredential.v1.DockerCredentialAzureContainerRegistry
	(*DockerCredentialJfrogArtifactory)(nil),            // 5: project.planton.credential.dockercredential.v1.DockerCredentialJfrogArtifactory
}
var file_project_planton_credential_dockercredential_v1_spec_proto_depIdxs = []int32{
	0, // 0: project.planton.credential.dockercredential.v1.DockerCredentialSpec.provider:type_name -> project.planton.credential.dockercredential.v1.DockerRepoProvider
	2, // 1: project.planton.credential.dockercredential.v1.DockerCredentialSpec.gcp_artifact_registry:type_name -> project.planton.credential.dockercredential.v1.DockerCredentialGcpArtifactRegistry
	3, // 2: project.planton.credential.dockercredential.v1.DockerCredentialSpec.aws_elastic_container_registry:type_name -> project.planton.credential.dockercredential.v1.DockerCredentialAwsElasticContainerRegistry
	4, // 3: project.planton.credential.dockercredential.v1.DockerCredentialSpec.azure_container_registry:type_name -> project.planton.credential.dockercredential.v1.DockerCredentialAzureContainerRegistry
	5, // 4: project.planton.credential.dockercredential.v1.DockerCredentialSpec.jfrog_artifactory:type_name -> project.planton.credential.dockercredential.v1.DockerCredentialJfrogArtifactory
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_project_planton_credential_dockercredential_v1_spec_proto_init() }
func file_project_planton_credential_dockercredential_v1_spec_proto_init() {
	if File_project_planton_credential_dockercredential_v1_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_credential_dockercredential_v1_spec_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*DockerCredentialSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_credential_dockercredential_v1_spec_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*DockerCredentialGcpArtifactRegistry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_credential_dockercredential_v1_spec_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*DockerCredentialAwsElasticContainerRegistry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_credential_dockercredential_v1_spec_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*DockerCredentialAzureContainerRegistry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_credential_dockercredential_v1_spec_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DockerCredentialJfrogArtifactory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_credential_dockercredential_v1_spec_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_credential_dockercredential_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_credential_dockercredential_v1_spec_proto_depIdxs,
		EnumInfos:         file_project_planton_credential_dockercredential_v1_spec_proto_enumTypes,
		MessageInfos:      file_project_planton_credential_dockercredential_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_credential_dockercredential_v1_spec_proto = out.File
	file_project_planton_credential_dockercredential_v1_spec_proto_rawDesc = nil
	file_project_planton_credential_dockercredential_v1_spec_proto_goTypes = nil
	file_project_planton_credential_dockercredential_v1_spec_proto_depIdxs = nil
}
