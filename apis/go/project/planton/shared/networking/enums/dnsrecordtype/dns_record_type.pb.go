// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/shared/networking/enums/dnsrecordtype/dns_record_type.proto

package dnsrecordtype

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// dns record type
// the recommended best practice to prefix the entry with enum name has been intentionally ignored to ensure that the enum's value matches the dns record type.
type DnsRecordType int32

const (
	DnsRecordType_unspecified DnsRecordType = 0
	// host address
	DnsRecordType_A DnsRecordType = 1
	// ipv6 host address
	DnsRecordType_AAAA DnsRecordType = 2
	// auto resolved alias
	DnsRecordType_ALIAS DnsRecordType = 3
	// canonical name for an alias
	DnsRecordType_CNAME DnsRecordType = 4
	// mail exchange
	DnsRecordType_MX DnsRecordType = 5
	// name server
	DnsRecordType_NS DnsRecordType = 6
	// pointer
	DnsRecordType_PTR DnsRecordType = 7
	// start of authority
	DnsRecordType_SOA DnsRecordType = 8
	// location of service
	DnsRecordType_SRV DnsRecordType = 9
	// descriptive text
	DnsRecordType_TXT DnsRecordType = 10
)

// Enum value maps for DnsRecordType.
var (
	DnsRecordType_name = map[int32]string{
		0:  "unspecified",
		1:  "A",
		2:  "AAAA",
		3:  "ALIAS",
		4:  "CNAME",
		5:  "MX",
		6:  "NS",
		7:  "PTR",
		8:  "SOA",
		9:  "SRV",
		10: "TXT",
	}
	DnsRecordType_value = map[string]int32{
		"unspecified": 0,
		"A":           1,
		"AAAA":        2,
		"ALIAS":       3,
		"CNAME":       4,
		"MX":          5,
		"NS":          6,
		"PTR":         7,
		"SOA":         8,
		"SRV":         9,
		"TXT":         10,
	}
)

func (x DnsRecordType) Enum() *DnsRecordType {
	p := new(DnsRecordType)
	*p = x
	return p
}

func (x DnsRecordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DnsRecordType) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_shared_networking_enums_dnsrecordtype_dns_record_type_proto_enumTypes[0].Descriptor()
}

func (DnsRecordType) Type() protoreflect.EnumType {
	return &file_project_planton_shared_networking_enums_dnsrecordtype_dns_record_type_proto_enumTypes[0]
}

func (x DnsRecordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DnsRecordType.Descriptor instead.
func (DnsRecordType) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_shared_networking_enums_dnsrecordtype_dns_record_type_proto_rawDescGZIP(), []int{0}
}

var File_project_planton_shared_networking_enums_dnsrecordtype_dns_record_type_proto protoreflect.FileDescriptor

var file_project_planton_shared_networking_enums_dnsrecordtype_dns_record_type_proto_rawDesc = []byte{
	0x0a, 0x4b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x64, 0x6e, 0x73, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x35, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x64, 0x6e, 0x73, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x74, 0x79, 0x70, 0x65, 0x2a, 0x7b, 0x0a, 0x0d, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x41, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x41, 0x41, 0x41, 0x41, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4c, 0x49, 0x41, 0x53,
	0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x06, 0x0a,
	0x02, 0x4d, 0x58, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x53, 0x10, 0x06, 0x12, 0x07, 0x0a,
	0x03, 0x50, 0x54, 0x52, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x4f, 0x41, 0x10, 0x08, 0x12,
	0x07, 0x0a, 0x03, 0x53, 0x52, 0x56, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x58, 0x54, 0x10,
	0x0a, 0x42, 0xb5, 0x03, 0x0a, 0x39, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x64, 0x6e, 0x73, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x12, 0x44, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x68, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2f, 0x64, 0x6e, 0x73, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x74, 0x79, 0x70, 0x65, 0xa2,
	0x02, 0x06, 0x50, 0x50, 0x53, 0x4e, 0x45, 0x44, 0xaa, 0x02, 0x35, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x44, 0x6e, 0x73, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x74, 0x79, 0x70, 0x65,
	0xca, 0x02, 0x35, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x5c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x5c, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x5c, 0x44, 0x6e, 0x73, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x74, 0x79, 0x70, 0x65, 0xe2, 0x02, 0x41, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x5c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5c, 0x45, 0x6e, 0x75,
	0x6d, 0x73, 0x5c, 0x44, 0x6e, 0x73, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x74, 0x79, 0x70, 0x65,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x3a, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a,
	0x3a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x3a, 0x3a, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x3a, 0x3a, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x3a, 0x3a, 0x44, 0x6e, 0x73, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x74, 0x79, 0x70, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_project_planton_shared_networking_enums_dnsrecordtype_dns_record_type_proto_rawDescOnce sync.Once
	file_project_planton_shared_networking_enums_dnsrecordtype_dns_record_type_proto_rawDescData = file_project_planton_shared_networking_enums_dnsrecordtype_dns_record_type_proto_rawDesc
)

func file_project_planton_shared_networking_enums_dnsrecordtype_dns_record_type_proto_rawDescGZIP() []byte {
	file_project_planton_shared_networking_enums_dnsrecordtype_dns_record_type_proto_rawDescOnce.Do(func() {
		file_project_planton_shared_networking_enums_dnsrecordtype_dns_record_type_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_shared_networking_enums_dnsrecordtype_dns_record_type_proto_rawDescData)
	})
	return file_project_planton_shared_networking_enums_dnsrecordtype_dns_record_type_proto_rawDescData
}

var file_project_planton_shared_networking_enums_dnsrecordtype_dns_record_type_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_project_planton_shared_networking_enums_dnsrecordtype_dns_record_type_proto_goTypes = []any{
	(DnsRecordType)(0), // 0: project.planton.shared.networking.enums.dnsrecordtype.DnsRecordType
}
var file_project_planton_shared_networking_enums_dnsrecordtype_dns_record_type_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_project_planton_shared_networking_enums_dnsrecordtype_dns_record_type_proto_init() }
func file_project_planton_shared_networking_enums_dnsrecordtype_dns_record_type_proto_init() {
	if File_project_planton_shared_networking_enums_dnsrecordtype_dns_record_type_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_shared_networking_enums_dnsrecordtype_dns_record_type_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_shared_networking_enums_dnsrecordtype_dns_record_type_proto_goTypes,
		DependencyIndexes: file_project_planton_shared_networking_enums_dnsrecordtype_dns_record_type_proto_depIdxs,
		EnumInfos:         file_project_planton_shared_networking_enums_dnsrecordtype_dns_record_type_proto_enumTypes,
	}.Build()
	File_project_planton_shared_networking_enums_dnsrecordtype_dns_record_type_proto = out.File
	file_project_planton_shared_networking_enums_dnsrecordtype_dns_record_type_proto_rawDesc = nil
	file_project_planton_shared_networking_enums_dnsrecordtype_dns_record_type_proto_goTypes = nil
	file_project_planton_shared_networking_enums_dnsrecordtype_dns_record_type_proto_depIdxs = nil
}
