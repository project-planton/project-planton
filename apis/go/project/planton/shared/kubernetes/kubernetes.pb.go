// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/shared/kubernetes/kubernetes.proto

package kubernetes

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// **Container** defines the specifications for a container within a microservice deployment configuration.
// This message mirrors the Kubernetes container spec (https://pkg.go.dev/k8s.io/api/core/v1#Container),
// allowing you to specify container attributes such as the image, ports, resources, and environment variables.
// **Warning:** The sidecar feature currently does not support all features of a Kubernetes container spec.
type Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the container.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The container image to be used.
	Image string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	// A list of ports exposed by the container.
	Ports []*ContainerPort `protobuf:"bytes,3,rep,name=ports,proto3" json:"ports,omitempty"`
	// Resource specifications for the container, including CPU and memory limits and requests.
	Resources *ContainerResources `protobuf:"bytes,4,opt,name=resources,proto3" json:"resources,omitempty"`
	// A list of environment variables to be set in the container.
	Env []*ContainerEnvVar `protobuf:"bytes,5,rep,name=env,proto3" json:"env,omitempty"`
}

func (x *Container) Reset() {
	*x = Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container) ProtoMessage() {}

func (x *Container) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container.ProtoReflect.Descriptor instead.
func (*Container) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_kubernetes_kubernetes_proto_rawDescGZIP(), []int{0}
}

func (x *Container) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Container) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Container) GetPorts() []*ContainerPort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Container) GetResources() *ContainerResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *Container) GetEnv() []*ContainerEnvVar {
	if x != nil {
		return x.Env
	}
	return nil
}

// **ContainerResources** specifies the CPU and memory resources for a container.
// It allows you to define resource limits and requests to manage resource allocation and ensure optimal performance.
type ContainerResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource limits for the container.
	// Specify the maximum amount of CPU and memory that the container can use.
	Limits *CpuMemory `protobuf:"bytes,1,opt,name=limits,proto3" json:"limits,omitempty"`
	// The resource requests for the container.
	// Specify the minimum amount of CPU and memory that the container is guaranteed.
	Requests *CpuMemory `protobuf:"bytes,2,opt,name=requests,proto3" json:"requests,omitempty"`
}

func (x *ContainerResources) Reset() {
	*x = ContainerResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerResources) ProtoMessage() {}

func (x *ContainerResources) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerResources.ProtoReflect.Descriptor instead.
func (*ContainerResources) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_kubernetes_kubernetes_proto_rawDescGZIP(), []int{1}
}

func (x *ContainerResources) GetLimits() *CpuMemory {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *ContainerResources) GetRequests() *CpuMemory {
	if x != nil {
		return x.Requests
	}
	return nil
}

// **ContainerEnvVar** represents an environment variable to be set in the container.
// It allows you to pass configuration or sensitive information to the container at runtime.
type ContainerEnvVar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the environment variable.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The value of the environment variable.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ContainerEnvVar) Reset() {
	*x = ContainerEnvVar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerEnvVar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerEnvVar) ProtoMessage() {}

func (x *ContainerEnvVar) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerEnvVar.ProtoReflect.Descriptor instead.
func (*ContainerEnvVar) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_kubernetes_kubernetes_proto_rawDescGZIP(), []int{2}
}

func (x *ContainerEnvVar) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContainerEnvVar) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// **ContainerPort** specifies a network port in a single container.
// It allows you to expose ports for communication with other services or the external network.
type ContainerPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the port.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The port number on the container.
	// **Note:** The attribute names must use camel case to marshal into the Kubernetes Container spec.
	ContainerPort int32 `protobuf:"varint,2,opt,name=containerPort,proto3" json:"containerPort,omitempty"`
	// The protocol used by the port (e.g., "TCP" or "UDP").
	Protocol string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (x *ContainerPort) Reset() {
	*x = ContainerPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerPort) ProtoMessage() {}

func (x *ContainerPort) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerPort.ProtoReflect.Descriptor instead.
func (*ContainerPort) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_kubernetes_kubernetes_proto_rawDescGZIP(), []int{3}
}

func (x *ContainerPort) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContainerPort) GetContainerPort() int32 {
	if x != nil {
		return x.ContainerPort
	}
	return 0
}

func (x *ContainerPort) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

// **CpuMemory** defines CPU and memory resource quantities for a container.
// It is used to specify the limits and requests for CPU and memory resources.
type CpuMemory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The amount of CPU allocated (e.g., "500m" for 0.5 CPU cores).
	Cpu string `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// The amount of memory allocated (e.g., "256Mi" for 256 mebibytes).
	Memory string `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
}

func (x *CpuMemory) Reset() {
	*x = CpuMemory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpuMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuMemory) ProtoMessage() {}

func (x *CpuMemory) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuMemory.ProtoReflect.Descriptor instead.
func (*CpuMemory) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_kubernetes_kubernetes_proto_rawDescGZIP(), []int{4}
}

func (x *CpuMemory) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *CpuMemory) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

// **ContainerImage** represents the container image information.
// It includes the repository, tag, and optional image pull secret for private registries.
type ContainerImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The repository of the image (e.g., "gcr.io/project/image").
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	// The tag of the image (e.g., "latest" or "1.0.0").
	Tag string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	// The name of the image pull secret for private image repositories.
	PullSecretName string `protobuf:"bytes,3,opt,name=pull_secret_name,json=pullSecretName,proto3" json:"pull_secret_name,omitempty"`
}

func (x *ContainerImage) Reset() {
	*x = ContainerImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerImage) ProtoMessage() {}

func (x *ContainerImage) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerImage.ProtoReflect.Descriptor instead.
func (*ContainerImage) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_kubernetes_kubernetes_proto_rawDescGZIP(), []int{5}
}

func (x *ContainerImage) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *ContainerImage) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *ContainerImage) GetPullSecretName() string {
	if x != nil {
		return x.PullSecretName
	}
	return ""
}

// **IngressSpec** defines the ingress configuration for an API resource to be deployed in Kubernetes.
// It allows you to enable or disable ingress and specify the endpoint domain name for internal and external access.
type IngressSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A flag to enable or disable ingress.
	IsEnabled bool `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	// The dns domain.
	DnsDomain string `protobuf:"bytes,2,opt,name=dns_domain,json=dnsDomain,proto3" json:"dns_domain,omitempty"`
}

func (x *IngressSpec) Reset() {
	*x = IngressSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngressSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressSpec) ProtoMessage() {}

func (x *IngressSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressSpec.ProtoReflect.Descriptor instead.
func (*IngressSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_kubernetes_kubernetes_proto_rawDescGZIP(), []int{6}
}

func (x *IngressSpec) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *IngressSpec) GetDnsDomain() string {
	if x != nil {
		return x.DnsDomain
	}
	return ""
}

// **KubernetesSecretKey** is a wrapper for referencing a specific key within a Kubernetes Secret.
// It is used to access sensitive data stored in secrets, such as passwords or API keys.
type KubernetesSecretKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the Kubernetes Secret.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The key within the Kubernetes Secret.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *KubernetesSecretKey) Reset() {
	*x = KubernetesSecretKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesSecretKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesSecretKey) ProtoMessage() {}

func (x *KubernetesSecretKey) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesSecretKey.ProtoReflect.Descriptor instead.
func (*KubernetesSecretKey) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_kubernetes_kubernetes_proto_rawDescGZIP(), []int{7}
}

func (x *KubernetesSecretKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubernetesSecretKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

var File_project_planton_shared_kubernetes_kubernetes_proto protoreflect.FileDescriptor

var file_project_planton_shared_kubernetes_kubernetes_proto_rawDesc = []byte{
	0x0a, 0x32, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x02, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x05,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x53, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x03, 0x65, 0x6e, 0x76,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x22,
	0xa4, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x3b, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x65, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x35, 0x0a, 0x09, 0x43, 0x70,
	0x75, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x22, 0x60, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x75, 0x6c,
	0x6c, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6e, 0x73, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x3a, 0x8d, 0x01, 0xba, 0x48, 0x89, 0x01, 0x1a, 0x86, 0x01, 0x0a, 0x24, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x2e, 0x64, 0x6e, 0x73,
	0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x1a, 0x5e, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x20, 0x26, 0x26, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x64, 0x6e, 0x73, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x29, 0x20, 0x3d, 0x3d, 0x20, 0x30,
	0x3f, 0x20, 0x27, 0x44, 0x4e, 0x53, 0x20, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x69, 0x73,
	0x20, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x27, 0x3a, 0x20, 0x27,
	0x27, 0x22, 0x3b, 0x0a, 0x13, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x42, 0xb6,
	0x02, 0x0a, 0x25, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x42, 0x0f, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x54, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0xa2, 0x02, 0x04, 0x50, 0x50, 0x53, 0x4b, 0xaa, 0x02, 0x21, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0xca, 0x02, 0x21, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x5c, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0xe2, 0x02, 0x2d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x5c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5c, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x24, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x3a, 0x3a, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_project_planton_shared_kubernetes_kubernetes_proto_rawDescOnce sync.Once
	file_project_planton_shared_kubernetes_kubernetes_proto_rawDescData = file_project_planton_shared_kubernetes_kubernetes_proto_rawDesc
)

func file_project_planton_shared_kubernetes_kubernetes_proto_rawDescGZIP() []byte {
	file_project_planton_shared_kubernetes_kubernetes_proto_rawDescOnce.Do(func() {
		file_project_planton_shared_kubernetes_kubernetes_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_shared_kubernetes_kubernetes_proto_rawDescData)
	})
	return file_project_planton_shared_kubernetes_kubernetes_proto_rawDescData
}

var file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_project_planton_shared_kubernetes_kubernetes_proto_goTypes = []any{
	(*Container)(nil),           // 0: project.planton.shared.kubernetes.Container
	(*ContainerResources)(nil),  // 1: project.planton.shared.kubernetes.ContainerResources
	(*ContainerEnvVar)(nil),     // 2: project.planton.shared.kubernetes.ContainerEnvVar
	(*ContainerPort)(nil),       // 3: project.planton.shared.kubernetes.ContainerPort
	(*CpuMemory)(nil),           // 4: project.planton.shared.kubernetes.CpuMemory
	(*ContainerImage)(nil),      // 5: project.planton.shared.kubernetes.ContainerImage
	(*IngressSpec)(nil),         // 6: project.planton.shared.kubernetes.IngressSpec
	(*KubernetesSecretKey)(nil), // 7: project.planton.shared.kubernetes.KubernetesSecretKey
}
var file_project_planton_shared_kubernetes_kubernetes_proto_depIdxs = []int32{
	3, // 0: project.planton.shared.kubernetes.Container.ports:type_name -> project.planton.shared.kubernetes.ContainerPort
	1, // 1: project.planton.shared.kubernetes.Container.resources:type_name -> project.planton.shared.kubernetes.ContainerResources
	2, // 2: project.planton.shared.kubernetes.Container.env:type_name -> project.planton.shared.kubernetes.ContainerEnvVar
	4, // 3: project.planton.shared.kubernetes.ContainerResources.limits:type_name -> project.planton.shared.kubernetes.CpuMemory
	4, // 4: project.planton.shared.kubernetes.ContainerResources.requests:type_name -> project.planton.shared.kubernetes.CpuMemory
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_project_planton_shared_kubernetes_kubernetes_proto_init() }
func file_project_planton_shared_kubernetes_kubernetes_proto_init() {
	if File_project_planton_shared_kubernetes_kubernetes_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ContainerResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ContainerEnvVar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ContainerPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CpuMemory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ContainerImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*IngressSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*KubernetesSecretKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_shared_kubernetes_kubernetes_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_shared_kubernetes_kubernetes_proto_goTypes,
		DependencyIndexes: file_project_planton_shared_kubernetes_kubernetes_proto_depIdxs,
		MessageInfos:      file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes,
	}.Build()
	File_project_planton_shared_kubernetes_kubernetes_proto = out.File
	file_project_planton_shared_kubernetes_kubernetes_proto_rawDesc = nil
	file_project_planton_shared_kubernetes_kubernetes_proto_goTypes = nil
	file_project_planton_shared_kubernetes_kubernetes_proto_depIdxs = nil
}
