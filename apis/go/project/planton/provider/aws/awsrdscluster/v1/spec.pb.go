// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/provider/aws/awsrdscluster/v1/spec.proto

package awsrdsclusterv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/project-planton/project-planton/apis/go/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AwsRdsClusterSpec defines the specification required to deploy an AWS RDS (Relational Database Service) Cluster.
// This message encapsulates all configurations necessary for setting up an RDS cluster, including engine settings,
// instance configurations, networking, security, backup and maintenance options, and scaling configurations.
type AwsRdsClusterSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the database engine to be used for this DB cluster. Valid Values: `aurora-mysql`,
	// `aurora-postgresql`, `mysql`, `postgres`. (Note that `mysql` and `postgres` are Multi-AZ RDS clusters).
	Engine string `protobuf:"bytes,1,opt,name=engine,proto3" json:"engine,omitempty"`
	// Database engine version. Updating this argument results in an outage.
	// See the [Aurora MySQL](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Updates.html) and
	// [Aurora Postgres](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraPostgreSQL.Updates.html)
	// documentation for your configured engine to determine this value, or by running
	// `aws rds describe-db-engine-versions`. For example with Aurora MySQL 2, a potential value for this
	// argument is `5.7.mysql_aurora.2.03.2`. The value can contain a partial version where supported by the API.
	// The actual engine version used is returned in the attribute `engineVersionActual`
	EngineVersion string `protobuf:"bytes,2,opt,name=engine_version,json=engineVersion,proto3" json:"engine_version,omitempty"`
	// Database engine mode. Valid values: `global` (only valid for Aurora MySQL 1.21 and earlier),
	// `parallelquery`, `provisioned`, `serverless`. Defaults to: `provisioned`.
	// See the [RDS User Guide](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html)
	// for limitations when using `serverless`.
	EngineMode string `protobuf:"bytes,3,opt,name=engine_mode,json=engineMode,proto3" json:"engine_mode,omitempty"`
	// Family of the DB parameter group.
	ClusterFamily string `protobuf:"bytes,4,opt,name=cluster_family,json=clusterFamily,proto3" json:"cluster_family,omitempty"`
	// Instance class to use. For details on CPU and memory, see [Scaling Aurora DB Instances](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Aurora.Managing.html).
	// Aurora uses `db.*` instance classes/types. Please see [AWS Documentation](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html)
	// for currently available instance classes and complete details. For Aurora Serverless v2 use `db.serverless`.
	// EC2 instance type for aws rds cluster
	// https://aws.amazon.com/rds/aurora/pricing
	InstanceType string `protobuf:"bytes,5,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	// aws rds cluster size
	ClusterSize int32 `protobuf:"varint,6,opt,name=cluster_size,json=clusterSize,proto3" json:"cluster_size,omitempty"`
	// Set to true to allow RDS to manage the master user password in Secrets Manager. Cannot be set if master_password is provided
	ManageMasterUserPassword bool `protobuf:"varint,7,opt,name=manage_master_user_password,json=manageMasterUserPassword,proto3" json:"manage_master_user_password,omitempty"`
	// Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.
	// To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.
	// If not specified, the default KMS key for your Amazon Web Services account is used.
	MasterUserSecretKmsKeyId string `protobuf:"bytes,8,opt,name=master_user_secret_kms_key_id,json=masterUserSecretKmsKeyId,proto3" json:"master_user_secret_kms_key_id,omitempty"`
	// Username for the master DB user. Ignored if snapshot_identifier or replication_source_identifier is provided
	MasterUser string `protobuf:"bytes,9,opt,name=master_user,json=masterUser,proto3" json:"master_user,omitempty"`
	// Password for the master DB user. Ignored if snapshot_identifier or replication_source_identifier is provided
	MasterPassword string `protobuf:"bytes,10,opt,name=master_password,json=masterPassword,proto3" json:"master_password,omitempty"`
	// Database name (default is not to create a database)
	DatabaseName string `protobuf:"bytes,11,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	// Set true to make this database accessible from the public internet
	IsPubliclyAccessible bool `protobuf:"varint,12,opt,name=is_publicly_accessible,json=isPubliclyAccessible,proto3" json:"is_publicly_accessible,omitempty"`
	// database port
	DatabasePort int32 `protobuf:"varint,13,opt,name=database_port,json=databasePort,proto3" json:"database_port,omitempty"`
	// VPC ID to create the cluster in (e.g. `vpc-a22222ee`). Defaults to the region's default VPC.
	VpcId string `protobuf:"bytes,14,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	// List of subnet IDs for the DB. DB instance will be created in the VPC associated with the DB subnet group
	// provisioned using the subnet IDs. Specify one of `subnet_ids`, `db_subnet_group_name`
	SubnetIds []string `protobuf:"bytes,15,rep,name=subnet_ids,json=subnetIds,proto3" json:"subnet_ids,omitempty"`
	// Name of DB subnet group. DB instance will be created in the VPC associated with the DB subnet group.
	// Specify one of `subnet_ids`, `db_subnet_group_name`
	DbSubnetGroupName string `protobuf:"bytes,16,opt,name=db_subnet_group_name,json=dbSubnetGroupName,proto3" json:"db_subnet_group_name,omitempty"`
	// The IDs of the security groups from which to allow `ingress` traffic to the DB instance
	SecurityGroupIds []string `protobuf:"bytes,17,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	// Whether to allow traffic between resources inside the database's security group.
	IntraSecurityGroupTrafficEnabled bool `protobuf:"varint,18,opt,name=intra_security_group_traffic_enabled,json=intraSecurityGroupTrafficEnabled,proto3" json:"intra_security_group_traffic_enabled,omitempty"`
	// List of CIDRs allowed to access the database (in addition to security groups and subnets)
	AllowedCidrBlocks []string `protobuf:"bytes,19,rep,name=allowed_cidr_blocks,json=allowedCidrBlocks,proto3" json:"allowed_cidr_blocks,omitempty"`
	// The IDs of the existing security groups to associate with the DB instance
	AssociateSecurityGroupIds []string `protobuf:"bytes,20,rep,name=associate_security_group_ids,json=associateSecurityGroupIds,proto3" json:"associate_security_group_ids,omitempty"`
	// Specifies whether or mappings of AWS Identity and Access Management (IAM) accounts to database accounts is enabled
	IamDatabaseAuthenticationEnabled bool `protobuf:"varint,21,opt,name=iam_database_authentication_enabled,json=iamDatabaseAuthenticationEnabled,proto3" json:"iam_database_authentication_enabled,omitempty"`
	// Specifies whether the DB cluster is encrypted
	StorageEncrypted bool `protobuf:"varint,22,opt,name=storage_encrypted,json=storageEncrypted,proto3" json:"storage_encrypted,omitempty"`
	// The ARN for the KMS encryption key. When specifying `kms_key_arn`, `storage_encrypted` needs to be set to `true`
	StorageKmsKeyArn string `protobuf:"bytes,23,opt,name=storage_kms_key_arn,json=storageKmsKeyArn,proto3" json:"storage_kms_key_arn,omitempty"`
	// Whether to enable Performance Insights
	IsPerformanceInsightsEnabled bool `protobuf:"varint,24,opt,name=is_performance_insights_enabled,json=isPerformanceInsightsEnabled,proto3" json:"is_performance_insights_enabled,omitempty"`
	// The ARN for the KMS encryption key. When specifying `kms_key_arn`, `is_performance_insights_enabled` needs to be set to `true`
	PerformanceInsightsKmsKeyId string `protobuf:"bytes,25,opt,name=performance_insights_kms_key_id,json=performanceInsightsKmsKeyId,proto3" json:"performance_insights_kms_key_id,omitempty"`
	// Weekly time range during which system maintenance can occur, in UTC
	MaintenanceWindow string `protobuf:"bytes,26,opt,name=maintenance_window,json=maintenanceWindow,proto3" json:"maintenance_window,omitempty"`
	// List of log types to enable for exporting to CloudWatch logs. If omitted, no logs will be exported.
	// Valid values (depending on engine): alert, audit, error, general, listener, slowquery, trace, postgresql (PostgreSQL),
	// upgrade (PostgreSQL).
	EnabledCloudwatchLogsExports []string `protobuf:"bytes,27,rep,name=enabled_cloudwatch_logs_exports,json=enabledCloudwatchLogsExports,proto3" json:"enabled_cloudwatch_logs_exports,omitempty"`
	// A boolean flag to enable/disable the creation of the enhanced monitoring IAM role.
	EnhancedMonitoringRoleEnabled bool `protobuf:"varint,28,opt,name=enhanced_monitoring_role_enabled,json=enhancedMonitoringRoleEnabled,proto3" json:"enhanced_monitoring_role_enabled,omitempty"`
	// Attributes used to format the Enhanced Monitoring IAM role.
	// If this role hits IAM role length restrictions (max 64 characters),
	// consider shortening these strings.
	EnhancedMonitoringAttributes []string `protobuf:"bytes,29,rep,name=enhanced_monitoring_attributes,json=enhancedMonitoringAttributes,proto3" json:"enhanced_monitoring_attributes,omitempty"`
	RdsMonitoringInterval        int32    `protobuf:"varint,30,opt,name=rds_monitoring_interval,json=rdsMonitoringInterval,proto3" json:"rds_monitoring_interval,omitempty"`
	// Normally AWS makes a snapshot of the database before deleting it. Set this to `true` in order to skip this.
	// NOTE: The final snapshot has a name derived from the cluster name. If you delete a cluster, get a final snapshot,
	// then create a cluster of the same name, its final snapshot will fail with a name collision unless you delete
	// the previous final snapshot first.
	SkipFinalSnapshot bool `protobuf:"varint,31,opt,name=skip_final_snapshot,json=skipFinalSnapshot,proto3" json:"skip_final_snapshot,omitempty"`
	// Specifies whether the Cluster should have deletion protection enabled. The database can't be deleted when this value is set to `true`
	DeletionProtection bool `protobuf:"varint,32,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// Specifies whether or not to create this cluster from a snapshot
	SnapshotIdentifier string `protobuf:"bytes,33,opt,name=snapshot_identifier,json=snapshotIdentifier,proto3" json:"snapshot_identifier,omitempty"`
	// Enable to allow major engine version upgrades when changing engine versions. Defaults to false.
	AllowMajorVersionUpgrade bool `protobuf:"varint,34,opt,name=allow_major_version_upgrade,json=allowMajorVersionUpgrade,proto3" json:"allow_major_version_upgrade,omitempty"`
	// The identifier of the CA certificate for the DB instance
	CaCertIdentifier string `protobuf:"bytes,35,opt,name=ca_cert_identifier,json=caCertIdentifier,proto3" json:"ca_cert_identifier,omitempty"`
	// Number of days to retain backups for
	RetentionPeriod int32 `protobuf:"varint,36,opt,name=retention_period,json=retentionPeriod,proto3" json:"retention_period,omitempty"`
	// Daily time range during which the backups happen, UTC
	BackupWindow string                    `protobuf:"bytes,37,opt,name=backup_window,json=backupWindow,proto3" json:"backup_window,omitempty"`
	AutoScaling  *AwsRdsClusterAutoScaling `protobuf:"bytes,38,opt,name=auto_scaling,json=autoScaling,proto3" json:"auto_scaling,omitempty"`
	// List of nested attributes with scaling properties. Only valid when `engine_mode` is set to `serverless`. This is required for Serverless v1
	ScalingConfiguration *AwsRdsClusterScalingConfiguration `protobuf:"bytes,39,opt,name=scaling_configuration,json=scalingConfiguration,proto3" json:"scaling_configuration,omitempty"`
	// Nested attribute with scaling properties for ServerlessV2. Only valid when `engine_mode` is set to `provisioned.` This is required for Serverless v2
	Serverlessv2ScalingConfiguration *AwsRdsClusterServerless2ScalingConfiguration `protobuf:"bytes,40,opt,name=serverlessv2_scaling_configuration,json=serverlessv2ScalingConfiguration,proto3" json:"serverlessv2_scaling_configuration,omitempty"`
	// Name of the DB cluster parameter group to associate.
	ClusterParameterGroupName string `protobuf:"bytes,41,opt,name=cluster_parameter_group_name,json=clusterParameterGroupName,proto3" json:"cluster_parameter_group_name,omitempty"`
	// List of DB cluster parameters to apply
	ClusterParameters []*AwsRdsClusterParameterGroupParameter `protobuf:"bytes,42,rep,name=cluster_parameters,json=clusterParameters,proto3" json:"cluster_parameters,omitempty"`
}

func (x *AwsRdsClusterSpec) Reset() {
	*x = AwsRdsClusterSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsRdsClusterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsRdsClusterSpec) ProtoMessage() {}

func (x *AwsRdsClusterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsRdsClusterSpec.ProtoReflect.Descriptor instead.
func (*AwsRdsClusterSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AwsRdsClusterSpec) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *AwsRdsClusterSpec) GetEngineVersion() string {
	if x != nil {
		return x.EngineVersion
	}
	return ""
}

func (x *AwsRdsClusterSpec) GetEngineMode() string {
	if x != nil {
		return x.EngineMode
	}
	return ""
}

func (x *AwsRdsClusterSpec) GetClusterFamily() string {
	if x != nil {
		return x.ClusterFamily
	}
	return ""
}

func (x *AwsRdsClusterSpec) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *AwsRdsClusterSpec) GetClusterSize() int32 {
	if x != nil {
		return x.ClusterSize
	}
	return 0
}

func (x *AwsRdsClusterSpec) GetManageMasterUserPassword() bool {
	if x != nil {
		return x.ManageMasterUserPassword
	}
	return false
}

func (x *AwsRdsClusterSpec) GetMasterUserSecretKmsKeyId() string {
	if x != nil {
		return x.MasterUserSecretKmsKeyId
	}
	return ""
}

func (x *AwsRdsClusterSpec) GetMasterUser() string {
	if x != nil {
		return x.MasterUser
	}
	return ""
}

func (x *AwsRdsClusterSpec) GetMasterPassword() string {
	if x != nil {
		return x.MasterPassword
	}
	return ""
}

func (x *AwsRdsClusterSpec) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *AwsRdsClusterSpec) GetIsPubliclyAccessible() bool {
	if x != nil {
		return x.IsPubliclyAccessible
	}
	return false
}

func (x *AwsRdsClusterSpec) GetDatabasePort() int32 {
	if x != nil {
		return x.DatabasePort
	}
	return 0
}

func (x *AwsRdsClusterSpec) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *AwsRdsClusterSpec) GetSubnetIds() []string {
	if x != nil {
		return x.SubnetIds
	}
	return nil
}

func (x *AwsRdsClusterSpec) GetDbSubnetGroupName() string {
	if x != nil {
		return x.DbSubnetGroupName
	}
	return ""
}

func (x *AwsRdsClusterSpec) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *AwsRdsClusterSpec) GetIntraSecurityGroupTrafficEnabled() bool {
	if x != nil {
		return x.IntraSecurityGroupTrafficEnabled
	}
	return false
}

func (x *AwsRdsClusterSpec) GetAllowedCidrBlocks() []string {
	if x != nil {
		return x.AllowedCidrBlocks
	}
	return nil
}

func (x *AwsRdsClusterSpec) GetAssociateSecurityGroupIds() []string {
	if x != nil {
		return x.AssociateSecurityGroupIds
	}
	return nil
}

func (x *AwsRdsClusterSpec) GetIamDatabaseAuthenticationEnabled() bool {
	if x != nil {
		return x.IamDatabaseAuthenticationEnabled
	}
	return false
}

func (x *AwsRdsClusterSpec) GetStorageEncrypted() bool {
	if x != nil {
		return x.StorageEncrypted
	}
	return false
}

func (x *AwsRdsClusterSpec) GetStorageKmsKeyArn() string {
	if x != nil {
		return x.StorageKmsKeyArn
	}
	return ""
}

func (x *AwsRdsClusterSpec) GetIsPerformanceInsightsEnabled() bool {
	if x != nil {
		return x.IsPerformanceInsightsEnabled
	}
	return false
}

func (x *AwsRdsClusterSpec) GetPerformanceInsightsKmsKeyId() string {
	if x != nil {
		return x.PerformanceInsightsKmsKeyId
	}
	return ""
}

func (x *AwsRdsClusterSpec) GetMaintenanceWindow() string {
	if x != nil {
		return x.MaintenanceWindow
	}
	return ""
}

func (x *AwsRdsClusterSpec) GetEnabledCloudwatchLogsExports() []string {
	if x != nil {
		return x.EnabledCloudwatchLogsExports
	}
	return nil
}

func (x *AwsRdsClusterSpec) GetEnhancedMonitoringRoleEnabled() bool {
	if x != nil {
		return x.EnhancedMonitoringRoleEnabled
	}
	return false
}

func (x *AwsRdsClusterSpec) GetEnhancedMonitoringAttributes() []string {
	if x != nil {
		return x.EnhancedMonitoringAttributes
	}
	return nil
}

func (x *AwsRdsClusterSpec) GetRdsMonitoringInterval() int32 {
	if x != nil {
		return x.RdsMonitoringInterval
	}
	return 0
}

func (x *AwsRdsClusterSpec) GetSkipFinalSnapshot() bool {
	if x != nil {
		return x.SkipFinalSnapshot
	}
	return false
}

func (x *AwsRdsClusterSpec) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *AwsRdsClusterSpec) GetSnapshotIdentifier() string {
	if x != nil {
		return x.SnapshotIdentifier
	}
	return ""
}

func (x *AwsRdsClusterSpec) GetAllowMajorVersionUpgrade() bool {
	if x != nil {
		return x.AllowMajorVersionUpgrade
	}
	return false
}

func (x *AwsRdsClusterSpec) GetCaCertIdentifier() string {
	if x != nil {
		return x.CaCertIdentifier
	}
	return ""
}

func (x *AwsRdsClusterSpec) GetRetentionPeriod() int32 {
	if x != nil {
		return x.RetentionPeriod
	}
	return 0
}

func (x *AwsRdsClusterSpec) GetBackupWindow() string {
	if x != nil {
		return x.BackupWindow
	}
	return ""
}

func (x *AwsRdsClusterSpec) GetAutoScaling() *AwsRdsClusterAutoScaling {
	if x != nil {
		return x.AutoScaling
	}
	return nil
}

func (x *AwsRdsClusterSpec) GetScalingConfiguration() *AwsRdsClusterScalingConfiguration {
	if x != nil {
		return x.ScalingConfiguration
	}
	return nil
}

func (x *AwsRdsClusterSpec) GetServerlessv2ScalingConfiguration() *AwsRdsClusterServerless2ScalingConfiguration {
	if x != nil {
		return x.Serverlessv2ScalingConfiguration
	}
	return nil
}

func (x *AwsRdsClusterSpec) GetClusterParameterGroupName() string {
	if x != nil {
		return x.ClusterParameterGroupName
	}
	return ""
}

func (x *AwsRdsClusterSpec) GetClusterParameters() []*AwsRdsClusterParameterGroupParameter {
	if x != nil {
		return x.ClusterParameters
	}
	return nil
}

// AwsRdsClusterAutoScaling defines the auto-scaling settings for the RDS cluster, allowing dynamic scaling of instances
// based on specified metrics and policies.
type AwsRdsClusterAutoScaling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to enable cluster autoscaling
	IsEnabled bool `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	// Autoscaling policy type. `TargetTrackingScaling` and `StepScaling` are supported
	PolicyType string `protobuf:"bytes,2,opt,name=policy_type,json=policyType,proto3" json:"policy_type,omitempty"`
	// The metrics type to use. If this value isn't provided the default is CPU utilization
	TargetMetrics string `protobuf:"bytes,3,opt,name=target_metrics,json=targetMetrics,proto3" json:"target_metrics,omitempty"`
	// The target value to scale with respect to target metrics
	TargetValue float64 `protobuf:"fixed64,4,opt,name=target_value,json=targetValue,proto3" json:"target_value,omitempty"`
	// The amount of time, in seconds, after a scaling activity completes and before the next scaling down activity can start. Default is 300s
	ScaleInCooldown int32 `protobuf:"varint,5,opt,name=scale_in_cooldown,json=scaleInCooldown,proto3" json:"scale_in_cooldown,omitempty"`
	// The amount of time, in seconds, after a scaling activity completes and before the next scaling up activity can start. Default is 300s
	ScaleOutCooldown int32 `protobuf:"varint,6,opt,name=scale_out_cooldown,json=scaleOutCooldown,proto3" json:"scale_out_cooldown,omitempty"`
	// Minimum number of instances to be maintained by the autoscaler
	MinCapacity int32 `protobuf:"varint,7,opt,name=min_capacity,json=minCapacity,proto3" json:"min_capacity,omitempty"`
	// Maximum number of instances to be maintained by the autoscaler
	MaxCapacity int32 `protobuf:"varint,8,opt,name=max_capacity,json=maxCapacity,proto3" json:"max_capacity,omitempty"`
}

func (x *AwsRdsClusterAutoScaling) Reset() {
	*x = AwsRdsClusterAutoScaling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsRdsClusterAutoScaling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsRdsClusterAutoScaling) ProtoMessage() {}

func (x *AwsRdsClusterAutoScaling) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsRdsClusterAutoScaling.ProtoReflect.Descriptor instead.
func (*AwsRdsClusterAutoScaling) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *AwsRdsClusterAutoScaling) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *AwsRdsClusterAutoScaling) GetPolicyType() string {
	if x != nil {
		return x.PolicyType
	}
	return ""
}

func (x *AwsRdsClusterAutoScaling) GetTargetMetrics() string {
	if x != nil {
		return x.TargetMetrics
	}
	return ""
}

func (x *AwsRdsClusterAutoScaling) GetTargetValue() float64 {
	if x != nil {
		return x.TargetValue
	}
	return 0
}

func (x *AwsRdsClusterAutoScaling) GetScaleInCooldown() int32 {
	if x != nil {
		return x.ScaleInCooldown
	}
	return 0
}

func (x *AwsRdsClusterAutoScaling) GetScaleOutCooldown() int32 {
	if x != nil {
		return x.ScaleOutCooldown
	}
	return 0
}

func (x *AwsRdsClusterAutoScaling) GetMinCapacity() int32 {
	if x != nil {
		return x.MinCapacity
	}
	return 0
}

func (x *AwsRdsClusterAutoScaling) GetMaxCapacity() int32 {
	if x != nil {
		return x.MaxCapacity
	}
	return 0
}

// AwsRdsClusterScalingConfiguration defines the scaling properties for Serverless v1 RDS clusters, allowing automatic
// scaling based on usage patterns.
type AwsRdsClusterScalingConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to enable automatic pause. A DB cluster can be paused only when it's idle (it has no connections).
	// If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot.
	// In this case, the DB cluster is restored when there is a request to connect to it.
	AutoPause bool `protobuf:"varint,1,opt,name=auto_pause,json=autoPause,proto3" json:"auto_pause,omitempty"`
	// Maximum capacity for an Aurora DB cluster in `serverless` DB engine mode.
	// The maximum capacity must be greater than or equal to the minimum capacity.
	// Valid Aurora PostgreSQL capacity values are (`2`, `4`, `8`, `16`, `32`, `64`, `192`, and `384`). Defaults to `16`.
	MaxCapacity int32 `protobuf:"varint,2,opt,name=max_capacity,json=maxCapacity,proto3" json:"max_capacity,omitempty"`
	// Minimum capacity for an Aurora DB cluster in `serverless` DB engine mode.
	// The minimum capacity must be lesser than or equal to the maximum capacity.
	// Valid Aurora PostgreSQL capacity values are (`2`, `4`, `8`, `16`, `32`, `64`, `192`, and `384`). Defaults to `2`.
	MinCapacity int32 `protobuf:"varint,3,opt,name=min_capacity,json=minCapacity,proto3" json:"min_capacity,omitempty"`
	// Time, in seconds, before an Aurora DB cluster in serverless mode is paused. Valid values are `300` through `86400`. Defaults to `300`.
	SecondsUntilAutoPause int32 `protobuf:"varint,4,opt,name=seconds_until_auto_pause,json=secondsUntilAutoPause,proto3" json:"seconds_until_auto_pause,omitempty"`
	// Action to take when the timeout is reached. Valid values: `ForceApplyCapacityChange`, `RollbackCapacityChange`.
	// Defaults to `RollbackCapacityChange`.
	// See [documentation](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v1.how-it-works.html#aurora-serverless.how-it-works.timeout-action).
	TimeoutAction string `protobuf:"bytes,5,opt,name=timeout_action,json=timeoutAction,proto3" json:"timeout_action,omitempty"`
}

func (x *AwsRdsClusterScalingConfiguration) Reset() {
	*x = AwsRdsClusterScalingConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsRdsClusterScalingConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsRdsClusterScalingConfiguration) ProtoMessage() {}

func (x *AwsRdsClusterScalingConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsRdsClusterScalingConfiguration.ProtoReflect.Descriptor instead.
func (*AwsRdsClusterScalingConfiguration) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *AwsRdsClusterScalingConfiguration) GetAutoPause() bool {
	if x != nil {
		return x.AutoPause
	}
	return false
}

func (x *AwsRdsClusterScalingConfiguration) GetMaxCapacity() int32 {
	if x != nil {
		return x.MaxCapacity
	}
	return 0
}

func (x *AwsRdsClusterScalingConfiguration) GetMinCapacity() int32 {
	if x != nil {
		return x.MinCapacity
	}
	return 0
}

func (x *AwsRdsClusterScalingConfiguration) GetSecondsUntilAutoPause() int32 {
	if x != nil {
		return x.SecondsUntilAutoPause
	}
	return 0
}

func (x *AwsRdsClusterScalingConfiguration) GetTimeoutAction() string {
	if x != nil {
		return x.TimeoutAction
	}
	return ""
}

// AwsRdsClusterServerless2ScalingConfiguration defines the scaling properties for Serverless v2 RDS clusters, allowing
// fine-grained automatic scaling.
type AwsRdsClusterServerless2ScalingConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Minimum capacity for an Aurora DB cluster in `provisioned` DB engine mode. The minimum capacity must be
	// lesser than or equal to the maximum capacity. Valid capacity values are in a range of `0.5` up to `128` in steps of `0.5`.
	MaxCapacity float64 `protobuf:"fixed64,1,opt,name=max_capacity,json=maxCapacity,proto3" json:"max_capacity,omitempty"`
	// Maximum capacity for an Aurora DB cluster in `provisioned` DB engine mode. The maximum capacity must be
	// greater than or equal to the minimum capacity. Valid capacity values are in a range of `0.5` up to `128` in steps of `0.5`.
	MinCapacity float64 `protobuf:"fixed64,2,opt,name=min_capacity,json=minCapacity,proto3" json:"min_capacity,omitempty"`
}

func (x *AwsRdsClusterServerless2ScalingConfiguration) Reset() {
	*x = AwsRdsClusterServerless2ScalingConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsRdsClusterServerless2ScalingConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsRdsClusterServerless2ScalingConfiguration) ProtoMessage() {}

func (x *AwsRdsClusterServerless2ScalingConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsRdsClusterServerless2ScalingConfiguration.ProtoReflect.Descriptor instead.
func (*AwsRdsClusterServerless2ScalingConfiguration) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_rawDescGZIP(), []int{3}
}

func (x *AwsRdsClusterServerless2ScalingConfiguration) GetMaxCapacity() float64 {
	if x != nil {
		return x.MaxCapacity
	}
	return 0
}

func (x *AwsRdsClusterServerless2ScalingConfiguration) GetMinCapacity() float64 {
	if x != nil {
		return x.MinCapacity
	}
	return 0
}

// AwsRdsClusterParameterGroupParameter represents a parameter to apply to the DB cluster parameter group, allowing
// customization of database settings.
type AwsRdsClusterParameterGroupParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// "immediate" (default), or "pending-reboot". Some
	// engines can't apply some parameters without a reboot, and you will need to
	// specify "pending-reboot" here.
	ApplyMethod string `protobuf:"bytes,1,opt,name=apply_method,json=applyMethod,proto3" json:"apply_method,omitempty"`
	// The name of the DB parameter.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The value of the DB parameter.
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AwsRdsClusterParameterGroupParameter) Reset() {
	*x = AwsRdsClusterParameterGroupParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsRdsClusterParameterGroupParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsRdsClusterParameterGroupParameter) ProtoMessage() {}

func (x *AwsRdsClusterParameterGroupParameter) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsRdsClusterParameterGroupParameter.ProtoReflect.Descriptor instead.
func (*AwsRdsClusterParameterGroupParameter) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_rawDescGZIP(), []int{4}
}

func (x *AwsRdsClusterParameterGroupParameter) GetApplyMethod() string {
	if x != nil {
		return x.ApplyMethod
	}
	return ""
}

func (x *AwsRdsClusterParameterGroupParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AwsRdsClusterParameterGroupParameter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_project_planton_provider_aws_awsrdscluster_v1_spec_proto protoreflect.FileDescriptor

var file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_rawDesc = []byte{
	0x0a, 0x38, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x61,
	0x77, 0x73, 0x72, 0x64, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x72, 0x64, 0x73, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x16, 0x0a, 0x11, 0x41, 0x77, 0x73, 0x52, 0x64, 0x73, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x52, 0x0a, 0x06, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xba, 0x48, 0x37, 0xc8,
	0x01, 0x01, 0x72, 0x32, 0x52, 0x0c, 0x61, 0x75, 0x72, 0x6f, 0x72, 0x61, 0x2d, 0x6d, 0x79, 0x73,
	0x71, 0x6c, 0x52, 0x11, 0x61, 0x75, 0x72, 0x6f, 0x72, 0x61, 0x2d, 0x70, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x71, 0x6c, 0x52, 0x05, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x2d,
	0x0a, 0x0e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0d,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x75, 0x0a,
	0x0b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x54, 0xba, 0x48, 0x42, 0xd8, 0x01, 0x02, 0x72, 0x3d, 0x52, 0x06, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x8a, 0xa6, 0x1d, 0x0b, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x52, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x27, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0x90, 0xa6, 0x1d, 0x01, 0x52, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x47, 0x0a, 0x1b, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08,
	0x9a, 0xa6, 0x1d, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x18, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x3f, 0x0a, 0x1d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x6d, 0x73, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x6d, 0x73, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x8a, 0xa6, 0x1d, 0x06, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e,
	0x0a, 0x16, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6c, 0x79, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08,
	0x9a, 0xa6, 0x1d, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x14, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x6c, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x62, 0x5f,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x62, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x4e, 0x0a, 0x24, 0x69, 0x6e, 0x74, 0x72,
	0x61, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x69, 0x6e, 0x74, 0x72, 0x61, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x69,
	0x64, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19,
	0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x4d, 0x0a, 0x23, 0x69, 0x61, 0x6d,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x69, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x6b, 0x6d, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4b, 0x6d, 0x73, 0x4b, 0x65,
	0x79, 0x41, 0x72, 0x6e, 0x12, 0x45, 0x0a, 0x1f, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x69,
	0x73, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x1f, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x5f, 0x6b, 0x6d, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x4b, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x12, 0x45, 0x0a, 0x1f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1c, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x73,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x20, 0x65, 0x6e, 0x68, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1d, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x44, 0x0a, 0x1e, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1c, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63,
	0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x17, 0x72, 0x64, 0x73, 0x5f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xba, 0x48, 0x13, 0xd8, 0x01, 0x02, 0x1a,
	0x0e, 0x30, 0x00, 0x30, 0x01, 0x30, 0x05, 0x30, 0x0a, 0x30, 0x0f, 0x30, 0x1e, 0x30, 0x3c, 0x52,
	0x15, 0x72, 0x64, 0x73, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x6b, 0x69, 0x70, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x6a, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x63,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x72, 0x64,
	0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x52,
	0x64, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x12, 0x85, 0x01, 0x0a, 0x15, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x50, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73,
	0x2e, 0x61, 0x77, 0x73, 0x72, 0x64, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x77, 0x73, 0x52, 0x64, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x14, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa9, 0x01, 0x0a, 0x22, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x76, 0x32, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x72, 0x64, 0x73, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x52, 0x64, 0x73, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x32, 0x53,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x76,
	0x32, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x2a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61,
	0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x72, 0x64, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x52, 0x64, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x3a, 0xcc, 0x01, 0xba, 0x48,
	0xc8, 0x01, 0x1a, 0xc5, 0x01, 0x0a, 0x17, 0x72, 0x64, 0x73, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0xa9,
	0x01, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x72,
	0x64, 0x73, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x3f, 0x20, 0x27, 0x72, 0x64,
	0x73, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20,
	0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x30, 0x20, 0x69,
	0x66, 0x20, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x20, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x69, 0x73, 0x20, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x27, 0x3a, 0x20, 0x27, 0x27, 0x22, 0xc4, 0x02, 0x0a, 0x18, 0x41,
	0x77, 0x73, 0x52, 0x64, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f,
	0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x49, 0x6e, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x64,
	0x6f, 0x77, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x69, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x22, 0xb5, 0x02, 0x0a, 0x21, 0x41, 0x77, 0x73, 0x52, 0x64, 0x73, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74,
	0x6f, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61,
	0x78, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e,
	0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6d, 0x69, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x18,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f,
	0xba, 0x48, 0x0c, 0xd8, 0x01, 0x02, 0x1a, 0x07, 0x18, 0x80, 0xa3, 0x05, 0x28, 0xac, 0x02, 0x52,
	0x15, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x41, 0x75, 0x74,
	0x6f, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a,
	0xba, 0x48, 0x37, 0xd8, 0x01, 0x02, 0x72, 0x32, 0x52, 0x18, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x16, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x74, 0x0a, 0x2c, 0x41, 0x77, 0x73,
	0x52, 0x64, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x6c, 0x65, 0x73, 0x73, 0x32, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x22,
	0x73, 0x0a, 0x24, 0x41, 0x77, 0x73, 0x52, 0x64, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x8b, 0x03, 0x0a, 0x31, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x72, 0x64, 0x73,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x53, 0x70, 0x65, 0x63,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x70, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x61, 0x77, 0x73, 0x72, 0x64, 0x73, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x77, 0x73, 0x72, 0x64, 0x73,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x05, 0x50, 0x50, 0x50, 0x41,
	0x41, 0xaa, 0x02, 0x2d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x77, 0x73,
	0x2e, 0x41, 0x77, 0x73, 0x72, 0x64, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x2d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x41, 0x77, 0x73,
	0x5c, 0x41, 0x77, 0x73, 0x72, 0x64, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5c, 0x56,
	0x31, 0xe2, 0x02, 0x39, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x41, 0x77, 0x73,
	0x5c, 0x41, 0x77, 0x73, 0x72, 0x64, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x32,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3a, 0x3a, 0x41, 0x77, 0x73, 0x3a,
	0x3a, 0x41, 0x77, 0x73, 0x72, 0x64, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_rawDescData = file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_rawDesc
)

func file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_rawDescData)
	})
	return file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_rawDescData
}

var file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_goTypes = []any{
	(*AwsRdsClusterSpec)(nil),                            // 0: project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterSpec
	(*AwsRdsClusterAutoScaling)(nil),                     // 1: project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterAutoScaling
	(*AwsRdsClusterScalingConfiguration)(nil),            // 2: project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterScalingConfiguration
	(*AwsRdsClusterServerless2ScalingConfiguration)(nil), // 3: project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterServerless2ScalingConfiguration
	(*AwsRdsClusterParameterGroupParameter)(nil),         // 4: project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterParameterGroupParameter
}
var file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterSpec.auto_scaling:type_name -> project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterAutoScaling
	2, // 1: project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterSpec.scaling_configuration:type_name -> project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterScalingConfiguration
	3, // 2: project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterSpec.serverlessv2_scaling_configuration:type_name -> project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterServerless2ScalingConfiguration
	4, // 3: project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterSpec.cluster_parameters:type_name -> project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterParameterGroupParameter
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_init() }
func file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_init() {
	if File_project_planton_provider_aws_awsrdscluster_v1_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AwsRdsClusterSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AwsRdsClusterAutoScaling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AwsRdsClusterScalingConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*AwsRdsClusterServerless2ScalingConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*AwsRdsClusterParameterGroupParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_awsrdscluster_v1_spec_proto = out.File
	file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_rawDesc = nil
	file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_goTypes = nil
	file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_depIdxs = nil
}
