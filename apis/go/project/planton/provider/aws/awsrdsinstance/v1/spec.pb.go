// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/provider/aws/awsrdsinstance/v1/spec.proto

package awsrdsinstancev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// aws-rds-instance spec
type AwsRdsInstanceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the database to create when the DB instance is created.
	// If this parameter is not specified, no database is created in the DB instance.
	// Note that this does not apply for Oracle or SQL Server engines.
	// See the [AWS documentation](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/rds/create-db-instance.html)
	// for more details on what applies for those engines. \
	// If you are providing an Oracle db name, it needs to be in all upper case.
	// Cannot be specified for a replica.
	DbName string `protobuf:"bytes,1,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	// Set to true to allow RDS to manage the master user password in Secrets Manager. Cannot be set if `password` is provided.
	ManageMasterUserPassword bool `protobuf:"varint,2,opt,name=manage_master_user_password,json=manageMasterUserPassword,proto3" json:"manage_master_user_password,omitempty"`
	// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.
	// To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.
	// If not specified, the default KMS key for your Amazon Web Services account is used.
	MasterUserSecretKmsKeyId string `protobuf:"bytes,3,opt,name=master_user_secret_kms_key_id,json=masterUserSecretKmsKeyId,proto3" json:"master_user_secret_kms_key_id,omitempty"`
	// *(Required unless a `snapshotIdentifier` or `replicateSourceDb` is provided)
	// Username for the master DB user. Cannot be specified for a replica.
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	// (Required unless `manageMasterUserPassword` is set to true or unless a `snapshotIdentifier` or `replicateSourceDb`
	// is provided or `manageMasterUserPassword` is set.) Password for the master DB user. Note that this may show up in
	// logs, and it will be stored in the state file. Cannot be set if `manageMasterUserPassword` is set to `true`.
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	// The port on which the DB accepts connections.
	Port int32 `protobuf:"varint,6,opt,name=port,proto3" json:"port,omitempty"`
	// The database engine to use. For supported values, see the Engine parameter in [API action CreateDBInstance]
	// (https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstance.html).
	// Note that for Amazon Aurora instances the engine must match the DB cluster's engine'.
	// For information on the difference between the available Aurora MySQL engines see
	// [Comparison between Aurora MySQL 1 and Aurora MySQL 2](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AuroraMySQL.Updates.20180206.html)
	// in the Amazon RDS User Guide.
	Engine string `protobuf:"bytes,7,opt,name=engine,proto3" json:"engine,omitempty"`
	// The engine version to use. If `autoMinorVersionUpgrade` is enabled, you can provide a prefix of the version such
	// as `8.0` (for `8.0.36`). The actual engine version used is returned in the attribute `engineVersionActual`,
	// see Attribute Reference below. For supported values, see the EngineVersion parameter in
	// [API action CreateDBInstance](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstance.html).
	// Note that for Amazon Aurora instances the engine version must match the DB cluster's engine version'.
	EngineVersion string `protobuf:"bytes,8,opt,name=engine_version,json=engineVersion,proto3" json:"engine_version,omitempty"`
	// Database MAJOR engine version, depends on engine type
	// https://docs.aws.amazon.com/cli/latest/reference/rds/create-option-group.html
	MajorEngineVersion string `protobuf:"bytes,9,opt,name=major_engine_version,json=majorEngineVersion,proto3" json:"major_engine_version,omitempty"`
	// The character set name to use for DB encoding in Oracle and Microsoft SQL instances (collation).
	// This can't be changed.
	// See [Oracle Character Sets Supported in Amazon RDS](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.OracleCharacterSets.html) or
	// [Server-Level Collation for Microsoft SQL Server](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.SQLServer.CommonDBATasks.Collation.html) for more information.
	// Cannot be set  with `replicateSourceDb`, `restoreToPointInTime`, `s3Import`, or `snapshotIdentifier`.
	CharacterSetName string `protobuf:"bytes,10,opt,name=character_set_name,json=characterSetName,proto3" json:"character_set_name,omitempty"`
	// The instance type of the RDS instance.
	InstanceClass string `protobuf:"bytes,11,opt,name=instance_class,json=instanceClass,proto3" json:"instance_class,omitempty"`
	// The allocated storage in gibibytes. If `maxAllocatedStorage` is configured, this argument represents the initial
	// storage allocation and differences from the configuration will be ignored automatically when Storage Autoscaling
	// occurs. If `replicateSourceDb` is set, the value is ignored during the creation of the instance.
	AllocatedStorage int32 `protobuf:"varint,12,opt,name=allocated_storage,json=allocatedStorage,proto3" json:"allocated_storage,omitempty"`
	// When configured, the upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
	// Configuring this will automatically ignore differences to `allocatedStorage`. Must be greater than or equal to
	// `allocatedStorage` or `0` to disable Storage Autoscaling.
	MaxAllocatedStorage int32 `protobuf:"varint,13,opt,name=max_allocated_storage,json=maxAllocatedStorage,proto3" json:"max_allocated_storage,omitempty"`
	// Specifies whether the DB instance is
	// encrypted. Note that if you are creating a cross-region read replica this field
	// is ignored and you should instead declare `kmsKeyId` with a valid ARN. The
	// default is `false` if not specified.
	StorageEncrypted bool `protobuf:"varint,14,opt,name=storage_encrypted,json=storageEncrypted,proto3" json:"storage_encrypted,omitempty"`
	// The ARN for the KMS encryption key. If creating an
	// encrypted replica, set this to the destination KMS ARN.
	KmsKeyId string `protobuf:"bytes,15,opt,name=kms_key_id,json=kmsKeyId,proto3" json:"kms_key_id,omitempty"`
	// The IDs of the security groups from which to allow `ingress` traffic to the DB instance
	SecurityGroupIds []string `protobuf:"bytes,16,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	// The whitelisted CIDRs which to allow `ingress` traffic to the DB instance
	AllowedCidrBlocks []string `protobuf:"bytes,17,rep,name=allowed_cidr_blocks,json=allowedCidrBlocks,proto3" json:"allowed_cidr_blocks,omitempty"`
	// The IDs of the existing security groups to associate with the DB instance
	AssociateSecurityGroupIds []string `protobuf:"bytes,18,rep,name=associate_security_group_ids,json=associateSecurityGroupIds,proto3" json:"associate_security_group_ids,omitempty"`
	// List of subnet IDs for the DB. DB instance will be created in the VPC associated with the DB subnet group provisioned using the subnet IDs.
	// Specify one of `subnet_ids`, `db_subnet_group_name` or `availability_zone`
	SubnetIds []string `protobuf:"bytes,19,rep,name=subnet_ids,json=subnetIds,proto3" json:"subnet_ids,omitempty"`
	// The AZ for the RDS instance. Specify one of `subnet_ids`, `db_subnet_group_name` or `availability_zone`.
	// If `availability_zone` is provided, the instance will be placed into the default VPC or EC2 Classic
	AvailabilityZone string `protobuf:"bytes,20,opt,name=availability_zone,json=availabilityZone,proto3" json:"availability_zone,omitempty"`
	// Name of DB subnet group. DB instance will be created in the VPC associated with the DB subnet group.
	// Specify one of `subnet_ids`, `db_subnet_group_name` or `availability_zone`
	DbSubnetGroupName string `protobuf:"bytes,21,opt,name=db_subnet_group_name,json=dbSubnetGroupName,proto3" json:"db_subnet_group_name,omitempty"`
	// The identifier of the CA certificate for the DB instance.
	CaCertIdentifier string `protobuf:"bytes,22,opt,name=ca_cert_identifier,json=caCertIdentifier,proto3" json:"ca_cert_identifier,omitempty"`
	// Name of the DB parameter group to associate.
	ParameterGroupName string `protobuf:"bytes,23,opt,name=parameter_group_name,json=parameterGroupName,proto3" json:"parameter_group_name,omitempty"`
	// The DB parameter group family name. The value depends on DB engine used.
	// See [DBParameterGroupFamily](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBParameterGroup.html#API_CreateDBParameterGroup_RequestParameters)
	// for instructions on how to retrieve applicable value.
	DbParameterGroup string `protobuf:"bytes,24,opt,name=db_parameter_group,json=dbParameterGroup,proto3" json:"db_parameter_group,omitempty"`
	// A list of DB parameters to apply. Note that parameters may differ from a DB family to another
	Parameters []*AwsRdsInstanceParameterGroupParameter `protobuf:"bytes,25,rep,name=parameters,proto3" json:"parameters,omitempty"`
	// Name of the DB option group to associate
	OptionGroupName string `protobuf:"bytes,26,opt,name=option_group_name,json=optionGroupName,proto3" json:"option_group_name,omitempty"`
	// A list of DB options to apply with an option group. Depends on DB engine
	Options []*AwsRdsInstanceOptionGroupOption `protobuf:"bytes,27,rep,name=options,proto3" json:"options,omitempty"`
	// Specifies if the RDS instance is multi-AZ
	IsMultiAz bool `protobuf:"varint,28,opt,name=isMultiAz,proto3" json:"isMultiAz,omitempty"`
	// One of "standard" (magnetic), "gp2" (general
	// purpose SSD), "gp3" (general purpose SSD that needs `iops` independently)
	// or "io1" (provisioned IOPS SSD). The default is "io1" if `iops` is specified,
	// "gp2" if not.
	StorageType string `protobuf:"bytes,29,opt,name=storage_type,json=storageType,proto3" json:"storage_type,omitempty"`
	// The amount of provisioned IOPS. Setting this implies a storageType of "io1".
	// Can only be set when `storageType` is `"io1"` or `"gp3"`.
	// Cannot be specified for gp3 storage if the `allocatedStorage` value is below a per-`engine` threshold.
	// See the [RDS User Guide](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#gp3-storage) for details.
	Iops int32 `protobuf:"varint,30,opt,name=iops,proto3" json:"iops,omitempty"`
	// The storage throughput value for the DB instance. Can only be set when `storage_type` is `gp3`.
	// Cannot be specified if the `allocated_storage` value is below a per-engine threshold.
	StorageThroughput int32 `protobuf:"varint,31,opt,name=storage_throughput,json=storageThroughput,proto3" json:"storage_throughput,omitempty"`
	// Bool to control if instance is publicly accessible. Default is `false`.
	IsPubliclyAccessible bool `protobuf:"varint,32,opt,name=is_publicly_accessible,json=isPubliclyAccessible,proto3" json:"is_publicly_accessible,omitempty"`
	// Snapshot identifier e.g: `rds:production-2019-06-26-06-05` for automated or `manual-backup-2023-11-16` for manual.
	// If specified, the module create the instance from the snapshot.
	SnapshotIdentifier string `protobuf:"bytes,33,opt,name=snapshot_identifier,json=snapshotIdentifier,proto3" json:"snapshot_identifier,omitempty"`
	// Allow major version upgrade
	AllowMajorVersionUpgrade bool `protobuf:"varint,34,opt,name=allow_major_version_upgrade,json=allowMajorVersionUpgrade,proto3" json:"allow_major_version_upgrade,omitempty"`
	// Allow automated minor version upgrade (e.g. from Postgres 9.5.3 to Postgres 9.5.4)
	AutoMinorVersionUpgrade bool `protobuf:"varint,35,opt,name=auto_minor_version_upgrade,json=autoMinorVersionUpgrade,proto3" json:"auto_minor_version_upgrade,omitempty"`
	// Specifies whether any database modifications are applied immediately, or during the next maintenance window
	ApplyImmediately bool `protobuf:"varint,36,opt,name=apply_immediately,json=applyImmediately,proto3" json:"apply_immediately,omitempty"`
	// The window to perform maintenance in. Syntax: 'ddd:hh24:mi-ddd:hh24:mi' UTC
	MaintenanceWindow string `protobuf:"bytes,37,opt,name=maintenance_window,json=maintenanceWindow,proto3" json:"maintenance_window,omitempty"`
	// If true (default), no snapshot will be made before deleting DB
	SkipFinalSnapshot bool `protobuf:"varint,38,opt,name=skip_final_snapshot,json=skipFinalSnapshot,proto3" json:"skip_final_snapshot,omitempty"`
	// Copy tags from DB to a snapshot
	CopyTagsToSnapshot bool `protobuf:"varint,39,opt,name=copy_tags_to_snapshot,json=copyTagsToSnapshot,proto3" json:"copy_tags_to_snapshot,omitempty"`
	// Backup retention period in days. Must be > 0 to enable backups
	BackupRetentionPeriod int32 `protobuf:"varint,40,opt,name=backup_retention_period,json=backupRetentionPeriod,proto3" json:"backup_retention_period,omitempty"`
	// When AWS can perform DB snapshots, can't overlap with maintenance window
	BackupWindow string `protobuf:"bytes,41,opt,name=backup_window,json=backupWindow,proto3" json:"backup_window,omitempty"`
	// Set to true to enable deletion protection on the RDS instance
	DeletionProtection bool `protobuf:"varint,42,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// Specifies that this resource is a Replicate database, and to use this value as the source database.
	// This correlates to the `identifier` of another Amazon RDS Database to replicate (if replicating within a single region)
	// or ARN of the Amazon RDS Database to replicate (if replicating cross-region).
	// Note that if you are creating a cross-region replica of an encrypted database you will also need to
	// specify a `kms_key_id`. See [DB Instance Replication](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Replication.html)
	// and [Working with PostgreSQL and MySQL Read Replicas](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html)
	// for more information on using Replication.
	ReplicateSourceDb string `protobuf:"bytes,43,opt,name=replicate_source_db,json=replicateSourceDb,proto3" json:"replicate_source_db,omitempty"`
	// Time zone of the DB instance. timezone is currently only supported by Microsoft SQL Server. The timezone can only
	// be set on creation. See [MSSQL User Guide](http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone)
	// for more information.
	Timezone string `protobuf:"bytes,44,opt,name=timezone,proto3" json:"timezone,omitempty"`
	// Specifies whether or mappings of AWS Identity and Access Management (IAM) accounts to database accounts is enabled
	IamDatabaseAuthenticationEnabled bool `protobuf:"varint,45,opt,name=iam_database_authentication_enabled,json=iamDatabaseAuthenticationEnabled,proto3" json:"iam_database_authentication_enabled,omitempty"`
	// List of log types to enable for exporting to CloudWatch logs. If omitted, no logs will be exported.
	// Valid values (depending on engine): alert, audit, error, general, listener, slowquery, trace, postgresql (PostgreSQL),
	// upgrade (PostgreSQL).
	EnabledCloudwatchLogsExports []string `protobuf:"bytes,46,rep,name=enabled_cloudwatch_logs_exports,json=enabledCloudwatchLogsExports,proto3" json:"enabled_cloudwatch_logs_exports,omitempty"`
	// performance insights settings
	PerformanceInsights *AwsRdsInstancePerformanceInsights `protobuf:"bytes,47,opt,name=performance_insights,json=performanceInsights,proto3" json:"performance_insights,omitempty"`
	// enhanced monitoring settings
	Monitoring *AwsRdsInstanceMonitoring `protobuf:"bytes,48,opt,name=monitoring,proto3" json:"monitoring,omitempty"`
	// An object specifying the restore point in time for the DB instance to restore from. Only used when
	// `snapshot_identifier` is not provided.
	RestoreToPointInTime *AwsRdsInstanceRestoreToPointInTime `protobuf:"bytes,49,opt,name=restore_to_point_in_time,json=restoreToPointInTime,proto3" json:"restore_to_point_in_time,omitempty"`
	// VPC ID the DB instance will be created in
	VpcId string `protobuf:"bytes,50,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	// License model for this DB. Optional, but required for some DB Engines.
	// Valid values: license-included | bring-your-own-license | general-public-license
	LicenseModel string `protobuf:"bytes,51,opt,name=license_model,json=licenseModel,proto3" json:"license_model,omitempty"`
}

func (x *AwsRdsInstanceSpec) Reset() {
	*x = AwsRdsInstanceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsRdsInstanceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsRdsInstanceSpec) ProtoMessage() {}

func (x *AwsRdsInstanceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsRdsInstanceSpec.ProtoReflect.Descriptor instead.
func (*AwsRdsInstanceSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AwsRdsInstanceSpec) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *AwsRdsInstanceSpec) GetManageMasterUserPassword() bool {
	if x != nil {
		return x.ManageMasterUserPassword
	}
	return false
}

func (x *AwsRdsInstanceSpec) GetMasterUserSecretKmsKeyId() string {
	if x != nil {
		return x.MasterUserSecretKmsKeyId
	}
	return ""
}

func (x *AwsRdsInstanceSpec) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AwsRdsInstanceSpec) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AwsRdsInstanceSpec) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AwsRdsInstanceSpec) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *AwsRdsInstanceSpec) GetEngineVersion() string {
	if x != nil {
		return x.EngineVersion
	}
	return ""
}

func (x *AwsRdsInstanceSpec) GetMajorEngineVersion() string {
	if x != nil {
		return x.MajorEngineVersion
	}
	return ""
}

func (x *AwsRdsInstanceSpec) GetCharacterSetName() string {
	if x != nil {
		return x.CharacterSetName
	}
	return ""
}

func (x *AwsRdsInstanceSpec) GetInstanceClass() string {
	if x != nil {
		return x.InstanceClass
	}
	return ""
}

func (x *AwsRdsInstanceSpec) GetAllocatedStorage() int32 {
	if x != nil {
		return x.AllocatedStorage
	}
	return 0
}

func (x *AwsRdsInstanceSpec) GetMaxAllocatedStorage() int32 {
	if x != nil {
		return x.MaxAllocatedStorage
	}
	return 0
}

func (x *AwsRdsInstanceSpec) GetStorageEncrypted() bool {
	if x != nil {
		return x.StorageEncrypted
	}
	return false
}

func (x *AwsRdsInstanceSpec) GetKmsKeyId() string {
	if x != nil {
		return x.KmsKeyId
	}
	return ""
}

func (x *AwsRdsInstanceSpec) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *AwsRdsInstanceSpec) GetAllowedCidrBlocks() []string {
	if x != nil {
		return x.AllowedCidrBlocks
	}
	return nil
}

func (x *AwsRdsInstanceSpec) GetAssociateSecurityGroupIds() []string {
	if x != nil {
		return x.AssociateSecurityGroupIds
	}
	return nil
}

func (x *AwsRdsInstanceSpec) GetSubnetIds() []string {
	if x != nil {
		return x.SubnetIds
	}
	return nil
}

func (x *AwsRdsInstanceSpec) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *AwsRdsInstanceSpec) GetDbSubnetGroupName() string {
	if x != nil {
		return x.DbSubnetGroupName
	}
	return ""
}

func (x *AwsRdsInstanceSpec) GetCaCertIdentifier() string {
	if x != nil {
		return x.CaCertIdentifier
	}
	return ""
}

func (x *AwsRdsInstanceSpec) GetParameterGroupName() string {
	if x != nil {
		return x.ParameterGroupName
	}
	return ""
}

func (x *AwsRdsInstanceSpec) GetDbParameterGroup() string {
	if x != nil {
		return x.DbParameterGroup
	}
	return ""
}

func (x *AwsRdsInstanceSpec) GetParameters() []*AwsRdsInstanceParameterGroupParameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *AwsRdsInstanceSpec) GetOptionGroupName() string {
	if x != nil {
		return x.OptionGroupName
	}
	return ""
}

func (x *AwsRdsInstanceSpec) GetOptions() []*AwsRdsInstanceOptionGroupOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *AwsRdsInstanceSpec) GetIsMultiAz() bool {
	if x != nil {
		return x.IsMultiAz
	}
	return false
}

func (x *AwsRdsInstanceSpec) GetStorageType() string {
	if x != nil {
		return x.StorageType
	}
	return ""
}

func (x *AwsRdsInstanceSpec) GetIops() int32 {
	if x != nil {
		return x.Iops
	}
	return 0
}

func (x *AwsRdsInstanceSpec) GetStorageThroughput() int32 {
	if x != nil {
		return x.StorageThroughput
	}
	return 0
}

func (x *AwsRdsInstanceSpec) GetIsPubliclyAccessible() bool {
	if x != nil {
		return x.IsPubliclyAccessible
	}
	return false
}

func (x *AwsRdsInstanceSpec) GetSnapshotIdentifier() string {
	if x != nil {
		return x.SnapshotIdentifier
	}
	return ""
}

func (x *AwsRdsInstanceSpec) GetAllowMajorVersionUpgrade() bool {
	if x != nil {
		return x.AllowMajorVersionUpgrade
	}
	return false
}

func (x *AwsRdsInstanceSpec) GetAutoMinorVersionUpgrade() bool {
	if x != nil {
		return x.AutoMinorVersionUpgrade
	}
	return false
}

func (x *AwsRdsInstanceSpec) GetApplyImmediately() bool {
	if x != nil {
		return x.ApplyImmediately
	}
	return false
}

func (x *AwsRdsInstanceSpec) GetMaintenanceWindow() string {
	if x != nil {
		return x.MaintenanceWindow
	}
	return ""
}

func (x *AwsRdsInstanceSpec) GetSkipFinalSnapshot() bool {
	if x != nil {
		return x.SkipFinalSnapshot
	}
	return false
}

func (x *AwsRdsInstanceSpec) GetCopyTagsToSnapshot() bool {
	if x != nil {
		return x.CopyTagsToSnapshot
	}
	return false
}

func (x *AwsRdsInstanceSpec) GetBackupRetentionPeriod() int32 {
	if x != nil {
		return x.BackupRetentionPeriod
	}
	return 0
}

func (x *AwsRdsInstanceSpec) GetBackupWindow() string {
	if x != nil {
		return x.BackupWindow
	}
	return ""
}

func (x *AwsRdsInstanceSpec) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *AwsRdsInstanceSpec) GetReplicateSourceDb() string {
	if x != nil {
		return x.ReplicateSourceDb
	}
	return ""
}

func (x *AwsRdsInstanceSpec) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *AwsRdsInstanceSpec) GetIamDatabaseAuthenticationEnabled() bool {
	if x != nil {
		return x.IamDatabaseAuthenticationEnabled
	}
	return false
}

func (x *AwsRdsInstanceSpec) GetEnabledCloudwatchLogsExports() []string {
	if x != nil {
		return x.EnabledCloudwatchLogsExports
	}
	return nil
}

func (x *AwsRdsInstanceSpec) GetPerformanceInsights() *AwsRdsInstancePerformanceInsights {
	if x != nil {
		return x.PerformanceInsights
	}
	return nil
}

func (x *AwsRdsInstanceSpec) GetMonitoring() *AwsRdsInstanceMonitoring {
	if x != nil {
		return x.Monitoring
	}
	return nil
}

func (x *AwsRdsInstanceSpec) GetRestoreToPointInTime() *AwsRdsInstanceRestoreToPointInTime {
	if x != nil {
		return x.RestoreToPointInTime
	}
	return nil
}

func (x *AwsRdsInstanceSpec) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *AwsRdsInstanceSpec) GetLicenseModel() string {
	if x != nil {
		return x.LicenseModel
	}
	return ""
}

type AwsRdsInstanceParameterGroupParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// "immediate" (default), or "pending-reboot". Some
	// engines can't apply some parameters without a reboot, and you will need to
	// specify "pending-reboot" here.
	ApplyMethod string `protobuf:"bytes,1,opt,name=apply_method,json=applyMethod,proto3" json:"apply_method,omitempty"`
	// The name of the DB parameter.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The value of the DB parameter.
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AwsRdsInstanceParameterGroupParameter) Reset() {
	*x = AwsRdsInstanceParameterGroupParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsRdsInstanceParameterGroupParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsRdsInstanceParameterGroupParameter) ProtoMessage() {}

func (x *AwsRdsInstanceParameterGroupParameter) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsRdsInstanceParameterGroupParameter.ProtoReflect.Descriptor instead.
func (*AwsRdsInstanceParameterGroupParameter) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *AwsRdsInstanceParameterGroupParameter) GetApplyMethod() string {
	if x != nil {
		return x.ApplyMethod
	}
	return ""
}

func (x *AwsRdsInstanceParameterGroupParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AwsRdsInstanceParameterGroupParameter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type AwsRdsInstanceOptionGroupOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of DB Security Groups for which the option is enabled.
	DbSecurityGroupMemberships []string `protobuf:"bytes,1,rep,name=db_security_group_memberships,json=dbSecurityGroupMemberships,proto3" json:"db_security_group_memberships,omitempty"`
	// Name of the option (e.g., MEMCACHED).
	OptionName string `protobuf:"bytes,2,opt,name=option_name,json=optionName,proto3" json:"option_name,omitempty"`
	// Port number when connecting to the option (e.g., 11211). Leaving out or removing `port` from your
	// configuration does not remove or clear a port from the option in AWS. AWS may assign a default port.
	// Not including `port` in your configuration means that the AWS provider will ignore a previously set value,
	// a value set by AWS, and any port changes.
	Port int32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// Version of the option (e.g., 13.1.0.0). Leaving out or removing `version` from your configuration does not
	// remove or clear a version from the option in AWS. AWS may assign a default version. Not including `version`
	// in your configuration means that the AWS provider will ignore a previously set value, a value set by AWS,
	// and any version changes.
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// List of VPC Security Groups for which the option is enabled.
	VpcSecurityGroupMemberships []string `protobuf:"bytes,5,rep,name=vpc_security_group_memberships,json=vpcSecurityGroupMemberships,proto3" json:"vpc_security_group_memberships,omitempty"`
	// The option settings to apply.
	OptionSettings []*AwsRdsInstanceOptionGroupOptionSettings `protobuf:"bytes,6,rep,name=option_settings,json=optionSettings,proto3" json:"option_settings,omitempty"`
}

func (x *AwsRdsInstanceOptionGroupOption) Reset() {
	*x = AwsRdsInstanceOptionGroupOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsRdsInstanceOptionGroupOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsRdsInstanceOptionGroupOption) ProtoMessage() {}

func (x *AwsRdsInstanceOptionGroupOption) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsRdsInstanceOptionGroupOption.ProtoReflect.Descriptor instead.
func (*AwsRdsInstanceOptionGroupOption) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *AwsRdsInstanceOptionGroupOption) GetDbSecurityGroupMemberships() []string {
	if x != nil {
		return x.DbSecurityGroupMemberships
	}
	return nil
}

func (x *AwsRdsInstanceOptionGroupOption) GetOptionName() string {
	if x != nil {
		return x.OptionName
	}
	return ""
}

func (x *AwsRdsInstanceOptionGroupOption) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AwsRdsInstanceOptionGroupOption) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AwsRdsInstanceOptionGroupOption) GetVpcSecurityGroupMemberships() []string {
	if x != nil {
		return x.VpcSecurityGroupMemberships
	}
	return nil
}

func (x *AwsRdsInstanceOptionGroupOption) GetOptionSettings() []*AwsRdsInstanceOptionGroupOptionSettings {
	if x != nil {
		return x.OptionSettings
	}
	return nil
}

type AwsRdsInstanceOptionGroupOptionSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the setting.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Value of the setting.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AwsRdsInstanceOptionGroupOptionSettings) Reset() {
	*x = AwsRdsInstanceOptionGroupOptionSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsRdsInstanceOptionGroupOptionSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsRdsInstanceOptionGroupOptionSettings) ProtoMessage() {}

func (x *AwsRdsInstanceOptionGroupOptionSettings) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsRdsInstanceOptionGroupOptionSettings.ProtoReflect.Descriptor instead.
func (*AwsRdsInstanceOptionGroupOptionSettings) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_rawDescGZIP(), []int{3}
}

func (x *AwsRdsInstanceOptionGroupOptionSettings) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AwsRdsInstanceOptionGroupOptionSettings) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type AwsRdsInstancePerformanceInsights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies whether Performance Insights are enabled.
	IsEnabled bool `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	// The ARN for the KMS key to encrypt Performance Insights data. Once KMS key is set, it can never be changed.
	KmsKeyId string `protobuf:"bytes,2,opt,name=kms_key_id,json=kmsKeyId,proto3" json:"kms_key_id,omitempty"`
	// The amount of time in days to retain Performance Insights data. Either 7 (7 days) or 731 (2 years).
	RetentionPeriod int32 `protobuf:"varint,3,opt,name=retention_period,json=retentionPeriod,proto3" json:"retention_period,omitempty"`
}

func (x *AwsRdsInstancePerformanceInsights) Reset() {
	*x = AwsRdsInstancePerformanceInsights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsRdsInstancePerformanceInsights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsRdsInstancePerformanceInsights) ProtoMessage() {}

func (x *AwsRdsInstancePerformanceInsights) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsRdsInstancePerformanceInsights.ProtoReflect.Descriptor instead.
func (*AwsRdsInstancePerformanceInsights) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_rawDescGZIP(), []int{4}
}

func (x *AwsRdsInstancePerformanceInsights) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *AwsRdsInstancePerformanceInsights) GetKmsKeyId() string {
	if x != nil {
		return x.KmsKeyId
	}
	return ""
}

func (x *AwsRdsInstancePerformanceInsights) GetRetentionPeriod() int32 {
	if x != nil {
		return x.RetentionPeriod
	}
	return 0
}

type AwsRdsInstanceMonitoring struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance.
	// To disable collecting Enhanced Monitoring metrics, specify 0. Valid Values are 0, 1, 5, 10, 15, 30, 60.
	MonitoringInterval int32 `protobuf:"varint,1,opt,name=monitoring_interval,json=monitoringInterval,proto3" json:"monitoring_interval,omitempty"`
	// The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to CloudWatch Logs
	MonitoringRoleArn string `protobuf:"bytes,2,opt,name=monitoring_role_arn,json=monitoringRoleArn,proto3" json:"monitoring_role_arn,omitempty"`
}

func (x *AwsRdsInstanceMonitoring) Reset() {
	*x = AwsRdsInstanceMonitoring{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsRdsInstanceMonitoring) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsRdsInstanceMonitoring) ProtoMessage() {}

func (x *AwsRdsInstanceMonitoring) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsRdsInstanceMonitoring.ProtoReflect.Descriptor instead.
func (*AwsRdsInstanceMonitoring) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_rawDescGZIP(), []int{5}
}

func (x *AwsRdsInstanceMonitoring) GetMonitoringInterval() int32 {
	if x != nil {
		return x.MonitoringInterval
	}
	return 0
}

func (x *AwsRdsInstanceMonitoring) GetMonitoringRoleArn() string {
	if x != nil {
		return x.MonitoringRoleArn
	}
	return ""
}

type AwsRdsInstanceRestoreToPointInTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date and time to restore from. Value must be a time in Universal Coordinated Time (UTC) format and must be
	// before the latest restorable time for the DB instance. Cannot be specified with `useLatestRestorableTime`.
	RestoreTime string `protobuf:"bytes,1,opt,name=restore_time,json=restoreTime,proto3" json:"restore_time,omitempty"`
	// The ARN of the automated backup from which to restore.
	// Required if `sourceDbInstanceIdentifier` or `sourceDbiResourceId` is not specified.
	SourceDbInstanceAutomatedBackupsArn string `protobuf:"bytes,2,opt,name=source_db_instance_automated_backups_arn,json=sourceDbInstanceAutomatedBackupsArn,proto3" json:"source_db_instance_automated_backups_arn,omitempty"`
	// The identifier of the source DB instance from which to restore. Must match the identifier of an existing DB instance.
	// Required if `sourceDbInstanceAutomatedBackupsArn` or `sourceDbiResourceId` is not specified.
	SourceDbInstanceIdentifier string `protobuf:"bytes,3,opt,name=source_db_instance_identifier,json=sourceDbInstanceIdentifier,proto3" json:"source_db_instance_identifier,omitempty"`
	// The resource ID of the source DB instance from which to restore.
	// Required if `sourceDbInstanceIdentifier` or `sourceDbInstanceAutomatedBackupsArn` is not specified.
	SourceDbiResourceId string `protobuf:"bytes,4,opt,name=source_dbi_resource_id,json=sourceDbiResourceId,proto3" json:"source_dbi_resource_id,omitempty"`
	// A boolean value that indicates whether the DB instance is restored from the latest backup time.
	// Defaults to `false`. Cannot be specified with `restoreTime`.
	UseLatestRestorableTime bool `protobuf:"varint,5,opt,name=use_latest_restorable_time,json=useLatestRestorableTime,proto3" json:"use_latest_restorable_time,omitempty"`
}

func (x *AwsRdsInstanceRestoreToPointInTime) Reset() {
	*x = AwsRdsInstanceRestoreToPointInTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsRdsInstanceRestoreToPointInTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsRdsInstanceRestoreToPointInTime) ProtoMessage() {}

func (x *AwsRdsInstanceRestoreToPointInTime) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsRdsInstanceRestoreToPointInTime.ProtoReflect.Descriptor instead.
func (*AwsRdsInstanceRestoreToPointInTime) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_rawDescGZIP(), []int{6}
}

func (x *AwsRdsInstanceRestoreToPointInTime) GetRestoreTime() string {
	if x != nil {
		return x.RestoreTime
	}
	return ""
}

func (x *AwsRdsInstanceRestoreToPointInTime) GetSourceDbInstanceAutomatedBackupsArn() string {
	if x != nil {
		return x.SourceDbInstanceAutomatedBackupsArn
	}
	return ""
}

func (x *AwsRdsInstanceRestoreToPointInTime) GetSourceDbInstanceIdentifier() string {
	if x != nil {
		return x.SourceDbInstanceIdentifier
	}
	return ""
}

func (x *AwsRdsInstanceRestoreToPointInTime) GetSourceDbiResourceId() string {
	if x != nil {
		return x.SourceDbiResourceId
	}
	return ""
}

func (x *AwsRdsInstanceRestoreToPointInTime) GetUseLatestRestorableTime() bool {
	if x != nil {
		return x.UseLatestRestorableTime
	}
	return false
}

var File_project_planton_provider_aws_awsrdsinstance_v1_spec_proto protoreflect.FileDescriptor

var file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_rawDesc = []byte{
	0x0a, 0x39, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x61,
	0x77, 0x73, 0x72, 0x64, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x72, 0x64, 0x73,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x17, 0x0a, 0x12, 0x41, 0x77, 0x73,
	0x52, 0x64, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3f, 0x0a, 0x1d, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x6d,
	0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x4b, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x6d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x12, 0x1c, 0x0a, 0x0a, 0x6b, 0x6d, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x43, 0x69, 0x64, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3f, 0x0a, 0x1c,
	0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x19, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x11,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x62, 0x5f,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x62, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x62,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x62, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x75, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x72,
	0x64, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77,
	0x73, 0x52, 0x64, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x69, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x72,
	0x64, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77,
	0x73, 0x52, 0x64, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x41, 0x7a, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x41, 0x7a, 0x12, 0x49, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xba, 0x48, 0x23, 0xd8,
	0x01, 0x02, 0x72, 0x1e, 0x52, 0x03, 0x67, 0x70, 0x32, 0x52, 0x03, 0x67, 0x70, 0x33, 0x52, 0x03,
	0x69, 0x6f, 0x31, 0x52, 0x03, 0x69, 0x6f, 0x32, 0x52, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x6f, 0x70, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x69,
	0x6f, 0x70, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70,
	0x75, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6c,
	0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6c, 0x79, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x61, 0x75,
	0x74, 0x6f, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69,
	0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65,
	0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x73, 0x6b, 0x69, 0x70, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x31, 0x0a, 0x15, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x63, 0x6f, 0x70, 0x79, 0x54, 0x61, 0x67, 0x73, 0x54, 0x6f, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x72,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x62, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x4d,
	0x0a, 0x23, 0x69, 0x61, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x69, 0x61, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x45, 0x0a,
	0x1f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x2e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x73, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x14, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61,
	0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x72, 0x64, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x52, 0x64, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x13, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x68, 0x0a, 0x0a, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61,
	0x77, 0x73, 0x72, 0x64, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x77, 0x73, 0x52, 0x64, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x8a, 0x01, 0x0a, 0x18, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x72, 0x64, 0x73, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x52, 0x64, 0x73,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54,
	0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x14, 0x72, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x6f, 0x0a, 0x0d, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4a, 0xba, 0x48, 0x47, 0xd8, 0x01, 0x02, 0x72, 0x42, 0x52, 0x10, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x2d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x52, 0x16, 0x62, 0x72,
	0x69, 0x6e, 0x67, 0x2d, 0x79, 0x6f, 0x75, 0x72, 0x2d, 0x6f, 0x77, 0x6e, 0x2d, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x52, 0x16, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x2d, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x3a, 0xa6, 0x01, 0xba, 0x48, 0xa2,
	0x01, 0x1a, 0x9f, 0x01, 0x0a, 0x1a, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x72, 0x64, 0x73, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x1a, 0x80, 0x01, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x20, 0x26, 0x26, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x3f, 0x20,
	0x27, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x65, 0x74, 0x20, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x20, 0x69, 0x66, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20,
	0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x72, 0x75, 0x65, 0x27, 0x3a,
	0x20, 0x27, 0x27, 0x22, 0x74, 0x0a, 0x25, 0x41, 0x77, 0x73, 0x52, 0x64, 0x73, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfb, 0x02, 0x0a, 0x1f, 0x41, 0x77,
	0x73, 0x52, 0x64, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a,
	0x1d, 0x64, 0x62, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x1a, 0x64, 0x62, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x0a, 0x1e, 0x76, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1b, 0x76, 0x70, 0x63, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77,
	0x73, 0x72, 0x64, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x77, 0x73, 0x52, 0x64, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x53, 0x0a, 0x27, 0x41, 0x77, 0x73, 0x52, 0x64,
	0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8b, 0x01, 0x0a,
	0x21, 0x41, 0x77, 0x73, 0x52, 0x64, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6b, 0x6d, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x7b, 0x0a, 0x18, 0x41, 0x77,
	0x73, 0x52, 0x64, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x13, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x22, 0xd3, 0x02, 0x0a, 0x22, 0x41, 0x77, 0x73, 0x52,
	0x64, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x54, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x55, 0x0a, 0x28, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x62, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x23, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x62, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x73, 0x41, 0x72, 0x6e, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x16, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x62, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x62, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x3b, 0x0a, 0x1a, 0x75, 0x73, 0x65, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x75, 0x73, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x92, 0x03,
	0x0a, 0x32, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61,
	0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x72, 0x64, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x72, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x61,
	0x77, 0x73, 0x2f, 0x61, 0x77, 0x73, 0x72, 0x64, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x77, 0x73, 0x72, 0x64, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x05, 0x50, 0x50, 0x50, 0x41, 0x41, 0xaa, 0x02, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x77, 0x73, 0x2e, 0x41, 0x77, 0x73,
	0x72, 0x64, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x41, 0x77, 0x73, 0x5c, 0x41, 0x77,
	0x73, 0x72, 0x64, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x3a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x41, 0x77, 0x73, 0x5c, 0x41,
	0x77, 0x73, 0x72, 0x64, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x33, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a,
	0x3a, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3a, 0x3a, 0x41, 0x77, 0x73, 0x3a, 0x3a,
	0x41, 0x77, 0x73, 0x72, 0x64, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_rawDescData = file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_rawDesc
)

func file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_rawDescData)
	})
	return file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_rawDescData
}

var file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_goTypes = []any{
	(*AwsRdsInstanceSpec)(nil),                      // 0: project.planton.provider.aws.awsrdsinstance.v1.AwsRdsInstanceSpec
	(*AwsRdsInstanceParameterGroupParameter)(nil),   // 1: project.planton.provider.aws.awsrdsinstance.v1.AwsRdsInstanceParameterGroupParameter
	(*AwsRdsInstanceOptionGroupOption)(nil),         // 2: project.planton.provider.aws.awsrdsinstance.v1.AwsRdsInstanceOptionGroupOption
	(*AwsRdsInstanceOptionGroupOptionSettings)(nil), // 3: project.planton.provider.aws.awsrdsinstance.v1.AwsRdsInstanceOptionGroupOptionSettings
	(*AwsRdsInstancePerformanceInsights)(nil),       // 4: project.planton.provider.aws.awsrdsinstance.v1.AwsRdsInstancePerformanceInsights
	(*AwsRdsInstanceMonitoring)(nil),                // 5: project.planton.provider.aws.awsrdsinstance.v1.AwsRdsInstanceMonitoring
	(*AwsRdsInstanceRestoreToPointInTime)(nil),      // 6: project.planton.provider.aws.awsrdsinstance.v1.AwsRdsInstanceRestoreToPointInTime
}
var file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.aws.awsrdsinstance.v1.AwsRdsInstanceSpec.parameters:type_name -> project.planton.provider.aws.awsrdsinstance.v1.AwsRdsInstanceParameterGroupParameter
	2, // 1: project.planton.provider.aws.awsrdsinstance.v1.AwsRdsInstanceSpec.options:type_name -> project.planton.provider.aws.awsrdsinstance.v1.AwsRdsInstanceOptionGroupOption
	4, // 2: project.planton.provider.aws.awsrdsinstance.v1.AwsRdsInstanceSpec.performance_insights:type_name -> project.planton.provider.aws.awsrdsinstance.v1.AwsRdsInstancePerformanceInsights
	5, // 3: project.planton.provider.aws.awsrdsinstance.v1.AwsRdsInstanceSpec.monitoring:type_name -> project.planton.provider.aws.awsrdsinstance.v1.AwsRdsInstanceMonitoring
	6, // 4: project.planton.provider.aws.awsrdsinstance.v1.AwsRdsInstanceSpec.restore_to_point_in_time:type_name -> project.planton.provider.aws.awsrdsinstance.v1.AwsRdsInstanceRestoreToPointInTime
	3, // 5: project.planton.provider.aws.awsrdsinstance.v1.AwsRdsInstanceOptionGroupOption.option_settings:type_name -> project.planton.provider.aws.awsrdsinstance.v1.AwsRdsInstanceOptionGroupOptionSettings
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_init() }
func file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_init() {
	if File_project_planton_provider_aws_awsrdsinstance_v1_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AwsRdsInstanceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AwsRdsInstanceParameterGroupParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AwsRdsInstanceOptionGroupOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*AwsRdsInstanceOptionGroupOptionSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*AwsRdsInstancePerformanceInsights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*AwsRdsInstanceMonitoring); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*AwsRdsInstanceRestoreToPointInTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_awsrdsinstance_v1_spec_proto = out.File
	file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_rawDesc = nil
	file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_goTypes = nil
	file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_depIdxs = nil
}
