// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/provider/aws/awsdynamodb/v1/spec.proto

package awsdynamodbv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/project-planton/project-planton/apis/go/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AwsDynamodbSpec defines the specification required to deploy an AWS DynamoDB resource, encapsulating all
// configurations for the DynamoDB table and related settings.
type AwsDynamodbSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Table name. If provided, the bucket will be created with this name instead of generating the name from the context
	TableName string `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	// Controls how you are charged for read and write throughput and how you manage
	// capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults
	// to `PROVISIONED`.
	BillingMode string `protobuf:"bytes,2,opt,name=billing_mode,json=billingMode,proto3" json:"billing_mode,omitempty"`
	// Attribute to use as the hash (partition) key. Must also be defined as an `attribute`.
	HashKey *AwsDynamodbTableAttribute `protobuf:"bytes,3,opt,name=hash_key,json=hashKey,proto3" json:"hash_key,omitempty"`
	// Attribute to use as the range (sort) key. Must also be defined as an `attribute`, see below.
	RangeKey *AwsDynamodbTableAttribute `protobuf:"bytes,4,opt,name=range_key,json=rangeKey,proto3" json:"range_key,omitempty"`
	// Whether Streams are enabled.
	EnableStreams bool `protobuf:"varint,5,opt,name=enable_streams,json=enableStreams,proto3" json:"enable_streams,omitempty"`
	// When an item in the table is modified, StreamViewType determines what information
	// is written to the table's stream. Valid values are
	// `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
	StreamViewType string `protobuf:"bytes,6,opt,name=stream_view_type,json=streamViewType,proto3" json:"stream_view_type,omitempty"`
	// Encryption at rest options. AWS DynamoDB tables are automatically
	// encrypted at rest with an AWS-owned Customer Master Key if this argument
	// isn't specified.
	ServerSideEncryption *AwsDynamodbTableServerSideEncryption `protobuf:"bytes,7,opt,name=server_side_encryption,json=serverSideEncryption,proto3" json:"server_side_encryption,omitempty"`
	// Enable point-in-time recovery options.
	PointInTimeRecovery *AwsDynamodbTablePointInTimeRecovery `protobuf:"bytes,8,opt,name=point_in_time_recovery,json=pointInTimeRecovery,proto3" json:"point_in_time_recovery,omitempty"`
	// Configuration block for TTL.
	Ttl *AwsDynamodbTableTtl `protobuf:"bytes,9,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// Dynamodb auto scale config
	AutoScale *AwsDynamodbAutoScaleCapacity `protobuf:"bytes,10,opt,name=auto_scale,json=autoScale,proto3" json:"auto_scale,omitempty"`
	// Set of nested attribute definitions. Only required for `hashKey` and `rangeKey` attributes.
	Attributes []*AwsDynamodbTableAttribute `protobuf:"bytes,11,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc.
	GlobalSecondaryIndexes []*AwsDynamodbTableGlobalSecondaryIndex `protobuf:"bytes,12,rep,name=global_secondary_indexes,json=globalSecondaryIndexes,proto3" json:"global_secondary_indexes,omitempty"`
	// Describe an LSI on the table; these can only be allocated _at creation_
	// so you cannot change this definition after you have created the resource.
	LocalSecondaryIndexes []*AwsDynamodbTableLocalSecondaryIndex `protobuf:"bytes,13,rep,name=local_secondary_indexes,json=localSecondaryIndexes,proto3" json:"local_secondary_indexes,omitempty"`
	// Configuration block(s) with [DynamoDB Global Tables V2 (version 2019.11.21)]
	// (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html) replication configurations.
	ReplicaRegionNames []string `protobuf:"bytes,14,rep,name=replica_region_names,json=replicaRegionNames,proto3" json:"replica_region_names,omitempty"`
	// Import Amazon S3 data into a new table. See below.
	ImportTable *AwsDynamodbTableImport `protobuf:"bytes,15,opt,name=import_table,json=importTable,proto3" json:"import_table,omitempty"`
}

func (x *AwsDynamodbSpec) Reset() {
	*x = AwsDynamodbSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsDynamodbSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsDynamodbSpec) ProtoMessage() {}

func (x *AwsDynamodbSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsDynamodbSpec.ProtoReflect.Descriptor instead.
func (*AwsDynamodbSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AwsDynamodbSpec) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *AwsDynamodbSpec) GetBillingMode() string {
	if x != nil {
		return x.BillingMode
	}
	return ""
}

func (x *AwsDynamodbSpec) GetHashKey() *AwsDynamodbTableAttribute {
	if x != nil {
		return x.HashKey
	}
	return nil
}

func (x *AwsDynamodbSpec) GetRangeKey() *AwsDynamodbTableAttribute {
	if x != nil {
		return x.RangeKey
	}
	return nil
}

func (x *AwsDynamodbSpec) GetEnableStreams() bool {
	if x != nil {
		return x.EnableStreams
	}
	return false
}

func (x *AwsDynamodbSpec) GetStreamViewType() string {
	if x != nil {
		return x.StreamViewType
	}
	return ""
}

func (x *AwsDynamodbSpec) GetServerSideEncryption() *AwsDynamodbTableServerSideEncryption {
	if x != nil {
		return x.ServerSideEncryption
	}
	return nil
}

func (x *AwsDynamodbSpec) GetPointInTimeRecovery() *AwsDynamodbTablePointInTimeRecovery {
	if x != nil {
		return x.PointInTimeRecovery
	}
	return nil
}

func (x *AwsDynamodbSpec) GetTtl() *AwsDynamodbTableTtl {
	if x != nil {
		return x.Ttl
	}
	return nil
}

func (x *AwsDynamodbSpec) GetAutoScale() *AwsDynamodbAutoScaleCapacity {
	if x != nil {
		return x.AutoScale
	}
	return nil
}

func (x *AwsDynamodbSpec) GetAttributes() []*AwsDynamodbTableAttribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *AwsDynamodbSpec) GetGlobalSecondaryIndexes() []*AwsDynamodbTableGlobalSecondaryIndex {
	if x != nil {
		return x.GlobalSecondaryIndexes
	}
	return nil
}

func (x *AwsDynamodbSpec) GetLocalSecondaryIndexes() []*AwsDynamodbTableLocalSecondaryIndex {
	if x != nil {
		return x.LocalSecondaryIndexes
	}
	return nil
}

func (x *AwsDynamodbSpec) GetReplicaRegionNames() []string {
	if x != nil {
		return x.ReplicaRegionNames
	}
	return nil
}

func (x *AwsDynamodbSpec) GetImportTable() *AwsDynamodbTableImport {
	if x != nil {
		return x.ImportTable
	}
	return nil
}

// AwsDynamodbTableServerSideEncryption configures the server-side encryption settings for the DynamoDB table,
// allowing the specification of whether encryption is enabled and the KMS key ARN to use for encryption.
type AwsDynamodbTableServerSideEncryption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether or not to enable encryption at rest using an AWS managed KMS customer master key (CMK).
	// If `enabled` is `false` then server-side encryption is set to
	// AWS-_owned_ key (shown as `DEFAULT` in the AWS console).
	// Potentially confusingly, if `enabled` is `true` and no `kmsKeyArn` is specified then
	// server-side encryption is set to the _default_ KMS-_managed_ key (shown as `KMS` in the AWS console).
	// The [AWS KMS documentation](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html)
	// explains the difference between AWS-_owned_ and KMS-_managed_ keys.
	IsEnabled bool `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	// ARN of the CMK that should be used for the AWS KMS encryption.
	// This argument should only be used if the key is different from the default KMS-managed DynamoDB key,
	// `alias/aws/dynamodb`.
	// **Note:** This attribute will _not_ be populated with the ARN of _default_ keys.
	KmsKeyArn string `protobuf:"bytes,2,opt,name=kms_key_arn,json=kmsKeyArn,proto3" json:"kms_key_arn,omitempty"`
}

func (x *AwsDynamodbTableServerSideEncryption) Reset() {
	*x = AwsDynamodbTableServerSideEncryption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsDynamodbTableServerSideEncryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsDynamodbTableServerSideEncryption) ProtoMessage() {}

func (x *AwsDynamodbTableServerSideEncryption) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsDynamodbTableServerSideEncryption.ProtoReflect.Descriptor instead.
func (*AwsDynamodbTableServerSideEncryption) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *AwsDynamodbTableServerSideEncryption) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *AwsDynamodbTableServerSideEncryption) GetKmsKeyArn() string {
	if x != nil {
		return x.KmsKeyArn
	}
	return ""
}

// AwsDynamodbTableTtl specifies the Time to Live (TTL) settings for the DynamoDB table, allowing you to define an
// attribute that DynamoDB will use to automatically delete expired items.
type AwsDynamodbTableTtl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether TTL is enabled. Default value is `false`.
	IsEnabled bool `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	// Name of the table attribute to store the TTL timestamp in.
	// Required if `enabled` is `true`, must not be set otherwise.
	AttributeName string `protobuf:"bytes,2,opt,name=attribute_name,json=attributeName,proto3" json:"attribute_name,omitempty"`
}

func (x *AwsDynamodbTableTtl) Reset() {
	*x = AwsDynamodbTableTtl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsDynamodbTableTtl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsDynamodbTableTtl) ProtoMessage() {}

func (x *AwsDynamodbTableTtl) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsDynamodbTableTtl.ProtoReflect.Descriptor instead.
func (*AwsDynamodbTableTtl) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *AwsDynamodbTableTtl) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *AwsDynamodbTableTtl) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

// AwsDynamodbTableAttribute defines an attribute for the DynamoDB table, specifying the attribute's name and data
// type, which is used in key schemas and indexes.
type AwsDynamodbTableAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the attribute
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Attribute type. Valid values are `S` (string), `N` (number), `B` (binary).
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *AwsDynamodbTableAttribute) Reset() {
	*x = AwsDynamodbTableAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsDynamodbTableAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsDynamodbTableAttribute) ProtoMessage() {}

func (x *AwsDynamodbTableAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsDynamodbTableAttribute.ProtoReflect.Descriptor instead.
func (*AwsDynamodbTableAttribute) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescGZIP(), []int{3}
}

func (x *AwsDynamodbTableAttribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AwsDynamodbTableAttribute) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// AwsDynamodbTableGlobalSecondaryIndex defines a global secondary index (GSI) for the DynamoDB table, allowing
// queries on alternative key attributes and providing additional read/write capacity configurations.
type AwsDynamodbTableGlobalSecondaryIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the index.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// One of `ALL`, `INCLUDE` or `KEYS_ONLY` where
	// `ALL` projects every attribute into the index,
	// `KEYS_ONLY` projects  into the index only the table and index hashKey and sortKey attributes ,
	// `INCLUDE` projects into the index all of the attributes that are defined in `nonKeyAttributes`
	// in addition to the attributes that that`KEYS_ONLY` project.
	ProjectionType string `protobuf:"bytes,2,opt,name=projection_type,json=projectionType,proto3" json:"projection_type,omitempty"`
	// Only required with `INCLUDE` as a projection type; a list of attributes to project into the index.
	// These do not need to be defined as attributes on the table.
	NonKeyAttributes []string `protobuf:"bytes,3,rep,name=non_key_attributes,json=nonKeyAttributes,proto3" json:"non_key_attributes,omitempty"`
	// Name of the hash key in the index; must be defined as an attribute in the resource.
	HashKey string `protobuf:"bytes,4,opt,name=hash_key,json=hashKey,proto3" json:"hash_key,omitempty"`
	// Name of the range key; must be defined
	RangeKey string `protobuf:"bytes,5,opt,name=range_key,json=rangeKey,proto3" json:"range_key,omitempty"`
	// Number of read units for this index. Must be set if billingMode is set to PROVISIONED.
	ReadCapacity int32 `protobuf:"varint,6,opt,name=read_capacity,json=readCapacity,proto3" json:"read_capacity,omitempty"`
	// Number of write units for this index. Must be set if billingMode is set to PROVISIONED.
	WriteCapacity int32 `protobuf:"varint,7,opt,name=write_capacity,json=writeCapacity,proto3" json:"write_capacity,omitempty"`
}

func (x *AwsDynamodbTableGlobalSecondaryIndex) Reset() {
	*x = AwsDynamodbTableGlobalSecondaryIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsDynamodbTableGlobalSecondaryIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsDynamodbTableGlobalSecondaryIndex) ProtoMessage() {}

func (x *AwsDynamodbTableGlobalSecondaryIndex) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsDynamodbTableGlobalSecondaryIndex.ProtoReflect.Descriptor instead.
func (*AwsDynamodbTableGlobalSecondaryIndex) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescGZIP(), []int{4}
}

func (x *AwsDynamodbTableGlobalSecondaryIndex) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AwsDynamodbTableGlobalSecondaryIndex) GetProjectionType() string {
	if x != nil {
		return x.ProjectionType
	}
	return ""
}

func (x *AwsDynamodbTableGlobalSecondaryIndex) GetNonKeyAttributes() []string {
	if x != nil {
		return x.NonKeyAttributes
	}
	return nil
}

func (x *AwsDynamodbTableGlobalSecondaryIndex) GetHashKey() string {
	if x != nil {
		return x.HashKey
	}
	return ""
}

func (x *AwsDynamodbTableGlobalSecondaryIndex) GetRangeKey() string {
	if x != nil {
		return x.RangeKey
	}
	return ""
}

func (x *AwsDynamodbTableGlobalSecondaryIndex) GetReadCapacity() int32 {
	if x != nil {
		return x.ReadCapacity
	}
	return 0
}

func (x *AwsDynamodbTableGlobalSecondaryIndex) GetWriteCapacity() int32 {
	if x != nil {
		return x.WriteCapacity
	}
	return 0
}

// AwsDynamodbTableLocalSecondaryIndex defines a local secondary index (LSI) for the DynamoDB table,
// allowing alternative sort keys for queries on the primary hash key, which must be defined at table creation.
type AwsDynamodbTableLocalSecondaryIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the index.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// One of `ALL`, `INCLUDE` or `KEYS_ONLY` where
	// `ALL` projects every attribute into the index,
	// `KEYS_ONLY` projects  into the index only the table and index hashKey and sortKey attributes ,
	// `INCLUDE` projects into the index all of the attributes that are defined in `nonKeyAttributes` in addition to
	// the attributes that that`KEYS_ONLY` project.
	ProjectionType string `protobuf:"bytes,2,opt,name=projection_type,json=projectionType,proto3" json:"projection_type,omitempty"`
	// Only required with `INCLUDE` as a projection type; a list of attributes to project into the index.
	// These do not need to be defined as attributes on the table.
	NonKeyAttributes []string `protobuf:"bytes,3,rep,name=non_key_attributes,json=nonKeyAttributes,proto3" json:"non_key_attributes,omitempty"`
	// Name of the range key; must be defined
	RangeKey string `protobuf:"bytes,4,opt,name=range_key,json=rangeKey,proto3" json:"range_key,omitempty"`
}

func (x *AwsDynamodbTableLocalSecondaryIndex) Reset() {
	*x = AwsDynamodbTableLocalSecondaryIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsDynamodbTableLocalSecondaryIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsDynamodbTableLocalSecondaryIndex) ProtoMessage() {}

func (x *AwsDynamodbTableLocalSecondaryIndex) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsDynamodbTableLocalSecondaryIndex.ProtoReflect.Descriptor instead.
func (*AwsDynamodbTableLocalSecondaryIndex) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescGZIP(), []int{5}
}

func (x *AwsDynamodbTableLocalSecondaryIndex) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AwsDynamodbTableLocalSecondaryIndex) GetProjectionType() string {
	if x != nil {
		return x.ProjectionType
	}
	return ""
}

func (x *AwsDynamodbTableLocalSecondaryIndex) GetNonKeyAttributes() []string {
	if x != nil {
		return x.NonKeyAttributes
	}
	return nil
}

func (x *AwsDynamodbTableLocalSecondaryIndex) GetRangeKey() string {
	if x != nil {
		return x.RangeKey
	}
	return ""
}

// AwsDynamodbTablePointInTimeRecovery configures point-in-time recovery settings for the DynamoDB table, allowing
// restoration of the table to any point in time within the last 35 days.
type AwsDynamodbTablePointInTimeRecovery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to enable point-in-time recovery. It can take 10 minutes to enable for
	// new tables. If the `pointInTimeRecovery` block is not provided,
	// this defaults to `false`.
	IsEnabled bool `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
}

func (x *AwsDynamodbTablePointInTimeRecovery) Reset() {
	*x = AwsDynamodbTablePointInTimeRecovery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsDynamodbTablePointInTimeRecovery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsDynamodbTablePointInTimeRecovery) ProtoMessage() {}

func (x *AwsDynamodbTablePointInTimeRecovery) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsDynamodbTablePointInTimeRecovery.ProtoReflect.Descriptor instead.
func (*AwsDynamodbTablePointInTimeRecovery) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescGZIP(), []int{6}
}

func (x *AwsDynamodbTablePointInTimeRecovery) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

// AwsDynamodbTableImport defines settings to import data from Amazon S3 into a new DynamoDB table, including
// compression type, data format, and source S3 bucket information.
type AwsDynamodbTableImport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of compression to be used on the input coming from the imported table.
	// Valid values are `GZIP`, `ZSTD` and `NONE`.
	InputCompressionType string `protobuf:"bytes,1,opt,name=input_compression_type,json=inputCompressionType,proto3" json:"input_compression_type,omitempty"`
	// The format of the source data.
	// Valid values are `CSV`, `DYNAMODB_JSON`, and `ION`.
	InputFormat string `protobuf:"bytes,2,opt,name=input_format,json=inputFormat,proto3" json:"input_format,omitempty"`
	// Describe the format options for the data that was imported into the target table.
	// There is one value, `csv`.
	InputFormatOptions *AwsDynamodbTableImportInputFormatOptions `protobuf:"bytes,3,opt,name=input_format_options,json=inputFormatOptions,proto3" json:"input_format_options,omitempty"`
	// Values for the S3 bucket the source file is imported from.
	S3BucketSource *AwsDynamodbTableImportS3BucketSource `protobuf:"bytes,4,opt,name=s3_bucket_source,json=s3BucketSource,proto3" json:"s3_bucket_source,omitempty"`
}

func (x *AwsDynamodbTableImport) Reset() {
	*x = AwsDynamodbTableImport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsDynamodbTableImport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsDynamodbTableImport) ProtoMessage() {}

func (x *AwsDynamodbTableImport) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsDynamodbTableImport.ProtoReflect.Descriptor instead.
func (*AwsDynamodbTableImport) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescGZIP(), []int{7}
}

func (x *AwsDynamodbTableImport) GetInputCompressionType() string {
	if x != nil {
		return x.InputCompressionType
	}
	return ""
}

func (x *AwsDynamodbTableImport) GetInputFormat() string {
	if x != nil {
		return x.InputFormat
	}
	return ""
}

func (x *AwsDynamodbTableImport) GetInputFormatOptions() *AwsDynamodbTableImportInputFormatOptions {
	if x != nil {
		return x.InputFormatOptions
	}
	return nil
}

func (x *AwsDynamodbTableImport) GetS3BucketSource() *AwsDynamodbTableImportS3BucketSource {
	if x != nil {
		return x.S3BucketSource
	}
	return nil
}

// AwsDynamodbTableImportInputFormatOptions specifies additional format options for the data being imported, such as
// CSV format settings.
type AwsDynamodbTableImportInputFormatOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This block contains the processing options for the CSV file being imported:
	Csv *AwsDynamodbTableImportInputFormatOptionsCsv `protobuf:"bytes,1,opt,name=csv,proto3" json:"csv,omitempty"`
}

func (x *AwsDynamodbTableImportInputFormatOptions) Reset() {
	*x = AwsDynamodbTableImportInputFormatOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsDynamodbTableImportInputFormatOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsDynamodbTableImportInputFormatOptions) ProtoMessage() {}

func (x *AwsDynamodbTableImportInputFormatOptions) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsDynamodbTableImportInputFormatOptions.ProtoReflect.Descriptor instead.
func (*AwsDynamodbTableImportInputFormatOptions) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescGZIP(), []int{8}
}

func (x *AwsDynamodbTableImportInputFormatOptions) GetCsv() *AwsDynamodbTableImportInputFormatOptionsCsv {
	if x != nil {
		return x.Csv
	}
	return nil
}

// AwsDynamodbTableImportInputFormatOptionsCsv defines the CSV format options for the data being imported,
// including delimiter and headers.
type AwsDynamodbTableImportInputFormatOptionsCsv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The delimiter used for separating items in the CSV file being imported.
	Delimiter string `protobuf:"bytes,1,opt,name=delimiter,proto3" json:"delimiter,omitempty"`
	// List of the headers used to specify a common header for all source CSV files being imported.
	Headers []string `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty"`
}

func (x *AwsDynamodbTableImportInputFormatOptionsCsv) Reset() {
	*x = AwsDynamodbTableImportInputFormatOptionsCsv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsDynamodbTableImportInputFormatOptionsCsv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsDynamodbTableImportInputFormatOptionsCsv) ProtoMessage() {}

func (x *AwsDynamodbTableImportInputFormatOptionsCsv) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsDynamodbTableImportInputFormatOptionsCsv.ProtoReflect.Descriptor instead.
func (*AwsDynamodbTableImportInputFormatOptionsCsv) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescGZIP(), []int{9}
}

func (x *AwsDynamodbTableImportInputFormatOptionsCsv) GetDelimiter() string {
	if x != nil {
		return x.Delimiter
	}
	return ""
}

func (x *AwsDynamodbTableImportInputFormatOptionsCsv) GetHeaders() []string {
	if x != nil {
		return x.Headers
	}
	return nil
}

// AwsDynamodbTableImportS3BucketSource specifies the S3 bucket source from which data is imported into the
// DynamoDB table, including bucket name, owner account, and key prefix.
type AwsDynamodbTableImportS3BucketSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The S3 bucket that is being imported from.
	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// The account number of the S3 bucket that is being imported from.
	BucketOwner string `protobuf:"bytes,2,opt,name=bucket_owner,json=bucketOwner,proto3" json:"bucket_owner,omitempty"`
	// The key prefix shared by all S3 Objects that are being imported.
	KeyPrefix string `protobuf:"bytes,3,opt,name=key_prefix,json=keyPrefix,proto3" json:"key_prefix,omitempty"`
}

func (x *AwsDynamodbTableImportS3BucketSource) Reset() {
	*x = AwsDynamodbTableImportS3BucketSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsDynamodbTableImportS3BucketSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsDynamodbTableImportS3BucketSource) ProtoMessage() {}

func (x *AwsDynamodbTableImportS3BucketSource) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsDynamodbTableImportS3BucketSource.ProtoReflect.Descriptor instead.
func (*AwsDynamodbTableImportS3BucketSource) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescGZIP(), []int{10}
}

func (x *AwsDynamodbTableImportS3BucketSource) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *AwsDynamodbTableImportS3BucketSource) GetBucketOwner() string {
	if x != nil {
		return x.BucketOwner
	}
	return ""
}

func (x *AwsDynamodbTableImportS3BucketSource) GetKeyPrefix() string {
	if x != nil {
		return x.KeyPrefix
	}
	return ""
}

// AwsDynamodbAutoScaleCapacity configures the auto-scaling settings for the DynamoDB table's read and write
// capacity units, including minimum and maximum capacity and target utilization.
type AwsDynamodbAutoScaleCapacity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsEnabled bool `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	// auto scale capacity for read
	ReadCapacity *AutoScaleCapacity `protobuf:"bytes,2,opt,name=read_capacity,json=readCapacity,proto3" json:"read_capacity,omitempty"`
	// auto scale capacity for write
	WriteCapacity *AutoScaleCapacity `protobuf:"bytes,3,opt,name=write_capacity,json=writeCapacity,proto3" json:"write_capacity,omitempty"`
}

func (x *AwsDynamodbAutoScaleCapacity) Reset() {
	*x = AwsDynamodbAutoScaleCapacity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsDynamodbAutoScaleCapacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsDynamodbAutoScaleCapacity) ProtoMessage() {}

func (x *AwsDynamodbAutoScaleCapacity) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsDynamodbAutoScaleCapacity.ProtoReflect.Descriptor instead.
func (*AwsDynamodbAutoScaleCapacity) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescGZIP(), []int{11}
}

func (x *AwsDynamodbAutoScaleCapacity) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *AwsDynamodbAutoScaleCapacity) GetReadCapacity() *AutoScaleCapacity {
	if x != nil {
		return x.ReadCapacity
	}
	return nil
}

func (x *AwsDynamodbAutoScaleCapacity) GetWriteCapacity() *AutoScaleCapacity {
	if x != nil {
		return x.WriteCapacity
	}
	return nil
}

// AutoScaleCapacity defines the auto-scaling capacity settings, specifying minimum and maximum capacity units and
// the target utilization percentage for scaling.
type AutoScaleCapacity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Min capacity of the scalable target.
	MinCapacity int32 `protobuf:"varint,1,opt,name=min_capacity,json=minCapacity,proto3" json:"min_capacity,omitempty"`
	// Max capacity of the scalable target.
	MaxCapacity int32 `protobuf:"varint,2,opt,name=max_capacity,json=maxCapacity,proto3" json:"max_capacity,omitempty"`
	// target capacity utilization percentage
	TargetUtilization float64 `protobuf:"fixed64,3,opt,name=target_utilization,json=targetUtilization,proto3" json:"target_utilization,omitempty"`
}

func (x *AutoScaleCapacity) Reset() {
	*x = AutoScaleCapacity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoScaleCapacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoScaleCapacity) ProtoMessage() {}

func (x *AutoScaleCapacity) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoScaleCapacity.ProtoReflect.Descriptor instead.
func (*AutoScaleCapacity) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescGZIP(), []int{12}
}

func (x *AutoScaleCapacity) GetMinCapacity() int32 {
	if x != nil {
		return x.MinCapacity
	}
	return 0
}

func (x *AutoScaleCapacity) GetMaxCapacity() int32 {
	if x != nil {
		return x.MaxCapacity
	}
	return 0
}

func (x *AutoScaleCapacity) GetTargetUtilization() float64 {
	if x != nil {
		return x.TargetUtilization
	}
	return 0
}

var File_project_planton_provider_aws_awsdynamodb_v1_spec_proto protoreflect.FileDescriptor

var file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDesc = []byte{
	0x0a, 0x36, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x61,
	0x77, 0x73, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f,
	0x64, 0x62, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xdd, 0x0b, 0x0a, 0x0f, 0x41, 0x77, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x25, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x0c, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x35, 0xba, 0x48, 0x23, 0xd8, 0x01, 0x02, 0x72, 0x1e, 0x52, 0x0b, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x52, 0x0f, 0x50, 0x41, 0x59, 0x5f, 0x50, 0x45,
	0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x8a, 0xa6, 0x1d, 0x0b, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x52, 0x0b, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x69, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f,
	0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64,
	0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x68, 0x61, 0x73, 0x68, 0x4b, 0x65, 0x79,
	0x12, 0x63, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61,
	0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x77, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x08, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x67, 0x0a, 0x10,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0xba, 0x48, 0x3a, 0xd8, 0x01, 0x02, 0x72, 0x35,
	0x52, 0x09, 0x4e, 0x45, 0x57, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x52, 0x09, 0x4f, 0x4c, 0x44,
	0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x52, 0x12, 0x4e, 0x45, 0x57, 0x5f, 0x41, 0x4e, 0x44, 0x5f,
	0x4f, 0x4c, 0x44, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x53, 0x52, 0x09, 0x4b, 0x45, 0x59, 0x53,
	0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x69, 0x65,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x53, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x85, 0x01, 0x0a, 0x16, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x50, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e,
	0x61, 0x77, 0x73, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x77, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x52, 0x13, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x52, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x74, 0x6c, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x68, 0x0a, 0x0a, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x49, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61,
	0x77, 0x73, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77,
	0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x66, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x6f, 0x64, 0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x8b, 0x01,
	0x0a, 0x18, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x51, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e,
	0x61, 0x77, 0x73, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x77, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x16, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x17,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x0c, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77,
	0x73, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x22, 0x65, 0x0a, 0x24, 0x41, 0x77, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6b, 0x6d, 0x73, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x6d,
	0x73, 0x4b, 0x65, 0x79, 0x41, 0x72, 0x6e, 0x22, 0x5b, 0x0a, 0x13, 0x41, 0x77, 0x73, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x74, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x19, 0x41, 0x77, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x6f, 0x64, 0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xba, 0x48, 0x0e,
	0xc8, 0x01, 0x01, 0x72, 0x09, 0x52, 0x01, 0x53, 0x52, 0x01, 0x4e, 0x52, 0x01, 0x42, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xb5, 0x02, 0x0a, 0x24, 0x41, 0x77, 0x73, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x6f, 0x64, 0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x47, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xba, 0x48, 0x1b, 0x72,
	0x19, 0x52, 0x03, 0x41, 0x4c, 0x4c, 0x52, 0x09, 0x4b, 0x45, 0x59, 0x53, 0x5f, 0x4f, 0x4e, 0x4c,
	0x59, 0x52, 0x07, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x6f,
	0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x61, 0x73, 0x68,
	0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x22, 0xcd, 0x01, 0x0a,
	0x23, 0x41, 0x77, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1e, 0xba, 0x48, 0x1b, 0x72, 0x19, 0x52, 0x03, 0x41, 0x4c, 0x4c, 0x52, 0x09, 0x4b,
	0x45, 0x59, 0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x52, 0x07, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44,
	0x45, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6e,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x44, 0x0a, 0x23,
	0x41, 0x77, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0xb1, 0x03, 0x0a, 0x16, 0x41, 0x77, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f,
	0x64, 0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4d, 0x0a,
	0x16, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xba,
	0x48, 0x14, 0x72, 0x12, 0x52, 0x04, 0x47, 0x5a, 0x49, 0x50, 0x52, 0x04, 0x5a, 0x53, 0x54, 0x44,
	0x52, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x52, 0x14, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0c,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1e, 0xba, 0x48, 0x1b, 0x72, 0x19, 0x52, 0x03, 0x43, 0x53, 0x56, 0x52, 0x0d,
	0x44, 0x59, 0x4e, 0x41, 0x4d, 0x4f, 0x44, 0x42, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x52, 0x03, 0x49,
	0x4f, 0x4e, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x87, 0x01, 0x0a, 0x14, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77,
	0x73, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x12, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x7b, 0x0a, 0x10, 0x73, 0x33, 0x5f,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61,
	0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x77, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0e, 0x73, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x28, 0x41, 0x77, 0x73, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x6a, 0x0a, 0x03, 0x63, 0x73, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x58, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e,
	0x61, 0x77, 0x73, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x77, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x73, 0x76, 0x52, 0x03, 0x63, 0x73, 0x76, 0x22,
	0x65, 0x0a, 0x2b, 0x41, 0x77, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x73, 0x76, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x24, 0x41, 0x77, 0x73, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65,
	0x79, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6b, 0x65, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x89, 0x02, 0x0a, 0x1c, 0x41, 0x77,
	0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x63, 0x0a, 0x0d, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e,
	0x61, 0x77, 0x73, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x65,
	0x0a, 0x0e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x22, 0x88, 0x01, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x69, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0xfd, 0x02, 0x0a, 0x2f, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64,
	0x62, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x6c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x61,
	0x77, 0x73, 0x2f, 0x61, 0x77, 0x73, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x2f, 0x76,
	0x31, 0x3b, 0x61, 0x77, 0x73, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x76, 0x31, 0xa2,
	0x02, 0x05, 0x50, 0x50, 0x50, 0x41, 0x41, 0xaa, 0x02, 0x2b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x41, 0x77, 0x73, 0x2e, 0x41, 0x77, 0x73, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f,
	0x64, 0x62, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x2b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5c, 0x41, 0x77, 0x73, 0x5c, 0x41, 0x77, 0x73, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62,
	0x5c, 0x56, 0x31, 0xe2, 0x02, 0x37, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x41,
	0x77, 0x73, 0x5c, 0x41, 0x77, 0x73, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x30,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3a, 0x3a, 0x41, 0x77, 0x73, 0x3a,
	0x3a, 0x41, 0x77, 0x73, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescData = file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDesc
)

func file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescData)
	})
	return file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescData
}

var file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_goTypes = []any{
	(*AwsDynamodbSpec)(nil),                             // 0: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbSpec
	(*AwsDynamodbTableServerSideEncryption)(nil),        // 1: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableServerSideEncryption
	(*AwsDynamodbTableTtl)(nil),                         // 2: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableTtl
	(*AwsDynamodbTableAttribute)(nil),                   // 3: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableAttribute
	(*AwsDynamodbTableGlobalSecondaryIndex)(nil),        // 4: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableGlobalSecondaryIndex
	(*AwsDynamodbTableLocalSecondaryIndex)(nil),         // 5: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableLocalSecondaryIndex
	(*AwsDynamodbTablePointInTimeRecovery)(nil),         // 6: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTablePointInTimeRecovery
	(*AwsDynamodbTableImport)(nil),                      // 7: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableImport
	(*AwsDynamodbTableImportInputFormatOptions)(nil),    // 8: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableImportInputFormatOptions
	(*AwsDynamodbTableImportInputFormatOptionsCsv)(nil), // 9: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableImportInputFormatOptionsCsv
	(*AwsDynamodbTableImportS3BucketSource)(nil),        // 10: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableImportS3BucketSource
	(*AwsDynamodbAutoScaleCapacity)(nil),                // 11: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbAutoScaleCapacity
	(*AutoScaleCapacity)(nil),                           // 12: project.planton.provider.aws.awsdynamodb.v1.AutoScaleCapacity
}
var file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_depIdxs = []int32{
	3,  // 0: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbSpec.hash_key:type_name -> project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableAttribute
	3,  // 1: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbSpec.range_key:type_name -> project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableAttribute
	1,  // 2: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbSpec.server_side_encryption:type_name -> project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableServerSideEncryption
	6,  // 3: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbSpec.point_in_time_recovery:type_name -> project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTablePointInTimeRecovery
	2,  // 4: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbSpec.ttl:type_name -> project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableTtl
	11, // 5: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbSpec.auto_scale:type_name -> project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbAutoScaleCapacity
	3,  // 6: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbSpec.attributes:type_name -> project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableAttribute
	4,  // 7: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbSpec.global_secondary_indexes:type_name -> project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableGlobalSecondaryIndex
	5,  // 8: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbSpec.local_secondary_indexes:type_name -> project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableLocalSecondaryIndex
	7,  // 9: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbSpec.import_table:type_name -> project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableImport
	8,  // 10: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableImport.input_format_options:type_name -> project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableImportInputFormatOptions
	10, // 11: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableImport.s3_bucket_source:type_name -> project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableImportS3BucketSource
	9,  // 12: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableImportInputFormatOptions.csv:type_name -> project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableImportInputFormatOptionsCsv
	12, // 13: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbAutoScaleCapacity.read_capacity:type_name -> project.planton.provider.aws.awsdynamodb.v1.AutoScaleCapacity
	12, // 14: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbAutoScaleCapacity.write_capacity:type_name -> project.planton.provider.aws.awsdynamodb.v1.AutoScaleCapacity
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_init() }
func file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_init() {
	if File_project_planton_provider_aws_awsdynamodb_v1_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AwsDynamodbSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AwsDynamodbTableServerSideEncryption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AwsDynamodbTableTtl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*AwsDynamodbTableAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*AwsDynamodbTableGlobalSecondaryIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*AwsDynamodbTableLocalSecondaryIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*AwsDynamodbTablePointInTimeRecovery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*AwsDynamodbTableImport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*AwsDynamodbTableImportInputFormatOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*AwsDynamodbTableImportInputFormatOptionsCsv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*AwsDynamodbTableImportS3BucketSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*AwsDynamodbAutoScaleCapacity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*AutoScaleCapacity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_awsdynamodb_v1_spec_proto = out.File
	file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDesc = nil
	file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_goTypes = nil
	file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_depIdxs = nil
}
