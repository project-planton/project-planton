// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/provider/aws/awsvpc/v1/spec.proto

package awsvpcv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// aws-vpc spec
type AwsVpcSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cidr block for vpc
	// example: 10.0.0.0/16
	VpcCidr string `protobuf:"bytes,1,opt,name=vpc_cidr,json=vpcCidr,proto3" json:"vpc_cidr,omitempty"`
	// availability zones to span the vpc
	// example: {"us-west-2a", "us-west-2b"}
	AvailabilityZones []string `protobuf:"bytes,2,rep,name=availability_zones,json=availabilityZones,proto3" json:"availability_zones,omitempty"`
	// number of subnets to be created in each az
	SubnetsPerAvailabilityZone int32 `protobuf:"varint,3,opt,name=subnets_per_availability_zone,json=subnetsPerAvailabilityZone,proto3" json:"subnets_per_availability_zone,omitempty"`
	// number of hosts in each subnet
	SubnetSize int32 `protobuf:"varint,4,opt,name=subnet_size,json=subnetSize,proto3" json:"subnet_size,omitempty"`
	// toggle to enable/disable an nat gateway for private subnets created in the vpc
	IsNatGatewayEnabled bool `protobuf:"varint,5,opt,name=is_nat_gateway_enabled,json=isNatGatewayEnabled,proto3" json:"is_nat_gateway_enabled,omitempty"`
	// toggle to enable/disable [dns hostnames](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-dns.html#vpc-dns-hostnames) in the vpc
	IsDnsHostnamesEnabled bool `protobuf:"varint,6,opt,name=is_dns_hostnames_enabled,json=isDnsHostnamesEnabled,proto3" json:"is_dns_hostnames_enabled,omitempty"`
	// toggle to enable/disable dns resolution in the vpc through the amazon provided dns server
	IsDnsSupportEnabled bool `protobuf:"varint,7,opt,name=is_dns_support_enabled,json=isDnsSupportEnabled,proto3" json:"is_dns_support_enabled,omitempty"`
}

func (x *AwsVpcSpec) Reset() {
	*x = AwsVpcSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsvpc_v1_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsVpcSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsVpcSpec) ProtoMessage() {}

func (x *AwsVpcSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsvpc_v1_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsVpcSpec.ProtoReflect.Descriptor instead.
func (*AwsVpcSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsvpc_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AwsVpcSpec) GetVpcCidr() string {
	if x != nil {
		return x.VpcCidr
	}
	return ""
}

func (x *AwsVpcSpec) GetAvailabilityZones() []string {
	if x != nil {
		return x.AvailabilityZones
	}
	return nil
}

func (x *AwsVpcSpec) GetSubnetsPerAvailabilityZone() int32 {
	if x != nil {
		return x.SubnetsPerAvailabilityZone
	}
	return 0
}

func (x *AwsVpcSpec) GetSubnetSize() int32 {
	if x != nil {
		return x.SubnetSize
	}
	return 0
}

func (x *AwsVpcSpec) GetIsNatGatewayEnabled() bool {
	if x != nil {
		return x.IsNatGatewayEnabled
	}
	return false
}

func (x *AwsVpcSpec) GetIsDnsHostnamesEnabled() bool {
	if x != nil {
		return x.IsDnsHostnamesEnabled
	}
	return false
}

func (x *AwsVpcSpec) GetIsDnsSupportEnabled() bool {
	if x != nil {
		return x.IsDnsSupportEnabled
	}
	return false
}

var File_project_planton_provider_aws_awsvpc_v1_spec_proto protoreflect.FileDescriptor

var file_project_planton_provider_aws_awsvpc_v1_spec_proto_rawDesc = []byte{
	0x0a, 0x31, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x61,
	0x77, 0x73, 0x76, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x26, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77,
	0x73, 0x2e, 0x61, 0x77, 0x73, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x22, 0xdd, 0x02, 0x0a, 0x0a,
	0x41, 0x77, 0x73, 0x56, 0x70, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x70,
	0x63, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x70,
	0x63, 0x43, 0x69, 0x64, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a,
	0x6f, 0x6e, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x73, 0x50, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x6e,
	0x61, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x4e, 0x61, 0x74, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x37, 0x0a,
	0x18, 0x69, 0x73, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x69, 0x73, 0x44, 0x6e, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x64, 0x6e, 0x73,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x44, 0x6e, 0x73, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0xda, 0x02, 0x0a, 0x2a,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73,
	0x2e, 0x61, 0x77, 0x73, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x53, 0x70, 0x65, 0x63,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x62, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x61, 0x77, 0x73, 0x76, 0x70, 0x63, 0x2f,
	0x76, 0x31, 0x3b, 0x61, 0x77, 0x73, 0x76, 0x70, 0x63, 0x76, 0x31, 0xa2, 0x02, 0x05, 0x50, 0x50,
	0x50, 0x41, 0x41, 0xaa, 0x02, 0x26, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x41,
	0x77, 0x73, 0x2e, 0x41, 0x77, 0x73, 0x76, 0x70, 0x63, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x26, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x41, 0x77, 0x73, 0x5c, 0x41, 0x77, 0x73, 0x76,
	0x70, 0x63, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x32, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5c, 0x41, 0x77, 0x73, 0x5c, 0x41, 0x77, 0x73, 0x76, 0x70, 0x63, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x2b, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3a, 0x3a, 0x41, 0x77, 0x73, 0x3a, 0x3a, 0x41, 0x77,
	0x73, 0x76, 0x70, 0x63, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_project_planton_provider_aws_awsvpc_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_awsvpc_v1_spec_proto_rawDescData = file_project_planton_provider_aws_awsvpc_v1_spec_proto_rawDesc
)

func file_project_planton_provider_aws_awsvpc_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_awsvpc_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_awsvpc_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_provider_aws_awsvpc_v1_spec_proto_rawDescData)
	})
	return file_project_planton_provider_aws_awsvpc_v1_spec_proto_rawDescData
}

var file_project_planton_provider_aws_awsvpc_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_provider_aws_awsvpc_v1_spec_proto_goTypes = []any{
	(*AwsVpcSpec)(nil), // 0: project.planton.provider.aws.awsvpc.v1.AwsVpcSpec
}
var file_project_planton_provider_aws_awsvpc_v1_spec_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_awsvpc_v1_spec_proto_init() }
func file_project_planton_provider_aws_awsvpc_v1_spec_proto_init() {
	if File_project_planton_provider_aws_awsvpc_v1_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_provider_aws_awsvpc_v1_spec_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AwsVpcSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_provider_aws_awsvpc_v1_spec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_awsvpc_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_awsvpc_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_aws_awsvpc_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_awsvpc_v1_spec_proto = out.File
	file_project_planton_provider_aws_awsvpc_v1_spec_proto_rawDesc = nil
	file_project_planton_provider_aws_awsvpc_v1_spec_proto_goTypes = nil
	file_project_planton_provider_aws_awsvpc_v1_spec_proto_depIdxs = nil
}
