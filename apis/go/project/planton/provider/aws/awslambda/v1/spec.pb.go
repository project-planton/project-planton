// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/provider/aws/awslambda/v1/spec.proto

package awslambdav1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AwsLambdaSpec defines the specification required to deploy an AWS Lambda function, encapsulating all configurations
// including the function itself, IAM roles, logging configurations, and permissions for invoking the function.
type AwsLambdaSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// aws lambda function spec
	Function *AwsLambdaFunction `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
	// aws lambda function iam spec
	IamRole *AwsLambdaIamRole `protobuf:"bytes,2,opt,name=iam_role,json=iamRole,proto3" json:"iam_role,omitempty"`
	// aws lambda cloud watch log group
	CloudwatchLogGroup *AwsLambdaCloudwatchLogGroup `protobuf:"bytes,3,opt,name=cloudwatch_log_group,json=cloudwatchLogGroup,proto3" json:"cloudwatch_log_group,omitempty"`
	// Defines which external source(s) can invoke this function (action 'lambda:InvokeFunction'). Attributes map to
	// those of https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_permission.
	// NOTE: to keep things simple, we only expose a subset of said attributes. If a more complex configuration is
	// needed, declare the necessary lambda permissions outside of this module
	InvokeFunctionPermissions []*AwsLambdaInvokeFunctionPermission `protobuf:"bytes,4,rep,name=invoke_function_permissions,json=invokeFunctionPermissions,proto3" json:"invoke_function_permissions,omitempty"`
}

func (x *AwsLambdaSpec) Reset() {
	*x = AwsLambdaSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsLambdaSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsLambdaSpec) ProtoMessage() {}

func (x *AwsLambdaSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsLambdaSpec.ProtoReflect.Descriptor instead.
func (*AwsLambdaSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AwsLambdaSpec) GetFunction() *AwsLambdaFunction {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *AwsLambdaSpec) GetIamRole() *AwsLambdaIamRole {
	if x != nil {
		return x.IamRole
	}
	return nil
}

func (x *AwsLambdaSpec) GetCloudwatchLogGroup() *AwsLambdaCloudwatchLogGroup {
	if x != nil {
		return x.CloudwatchLogGroup
	}
	return nil
}

func (x *AwsLambdaSpec) GetInvokeFunctionPermissions() []*AwsLambdaInvokeFunctionPermission {
	if x != nil {
		return x.InvokeFunctionPermissions
	}
	return nil
}

// AwsLambdaFunction represents the configuration of an AWS Lambda function, including properties such as
// architectures, handler, runtime, memory size, timeouts, environment variables, VPC configuration, and other
// optional settings.
type AwsLambdaFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Instruction set architecture for your Lambda function. Valid values are `["x8664"]` and `["arm64"]`.
	// Default is `["x8664"]`. Removing this attribute, function's architecture stay the same.
	Architectures []string `protobuf:"bytes,1,rep,name=architectures,proto3" json:"architectures,omitempty"`
	// Description of what your Lambda Function does.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Configuration block. Detailed below.
	FileSystemConfig *AwsLambdaFunctionFileSystemConfig `protobuf:"bytes,3,opt,name=file_system_config,json=fileSystemConfig,proto3" json:"file_system_config,omitempty"`
	// Function [entrypoint](https://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events-create-test-function.html) in your code.
	Handler string `protobuf:"bytes,4,opt,name=handler,proto3" json:"handler,omitempty"`
	// ECR image URI containing the function's deployment package. Exactly one of `filename`, `imageUri`,  or `s3Bucket` must be specified.
	ImageUri string `protobuf:"bytes,5,opt,name=image_uri,json=imageUri,proto3" json:"image_uri,omitempty"`
	// Amazon Resource Name (ARN) of the AWS Key Management Service (KMS) key that is used to encrypt environment variables.
	// If this configuration is not provided when environment variables are in use, AWS Lambda uses a default service key.
	// If this configuration is provided when environment variables are not in use,
	// the AWS Lambda API does not save this configuration and the provider will show a perpetual difference of adding
	// the key. To fix the perpetual difference, remove this configuration.
	KmsKeyArn string `protobuf:"bytes,6,opt,name=kms_key_arn,json=kmsKeyArn,proto3" json:"kms_key_arn,omitempty"`
	// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function.
	// See [Lambda Layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html)
	Layers []string `protobuf:"bytes,7,rep,name=layers,proto3" json:"layers,omitempty"`
	// Amount of memory in MB your Lambda Function can use at runtime. Defaults to `128`.
	// See [Limits](https://docs.aws.amazon.com/lambda/latest/dg/limits.html)
	MemorySize int32 `protobuf:"varint,8,opt,name=memory_size,json=memorySize,proto3" json:"memory_size,omitempty"`
	// Lambda deployment package type. Valid values are `Zip` and `Image`. Defaults to `Zip`.
	PackageType string `protobuf:"bytes,9,opt,name=package_type,json=packageType,proto3" json:"package_type,omitempty"`
	// Whether to publish creation/change as new Lambda Function Version. Defaults to `false`.
	Publish bool `protobuf:"varint,10,opt,name=publish,proto3" json:"publish,omitempty"`
	// Amount of reserved concurrent executions for this lambda function. A value of `0` disables lambda from
	// being triggered and `-1` removes any concurrency limitations. Defaults to Unreserved Concurrency Limits `-1`.
	// See [Managing Concurrency](https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html)
	ReservedConcurrentExecutions int32 `protobuf:"varint,11,opt,name=reserved_concurrent_executions,json=reservedConcurrentExecutions,proto3" json:"reserved_concurrent_executions,omitempty"`
	// Identifier of the function's runtime.
	// See [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime) for valid values.
	Runtime string `protobuf:"bytes,12,opt,name=runtime,proto3" json:"runtime,omitempty"`
	// S3 bucket location containing the function's deployment package. This bucket must reside in the same AWS region
	// where you are creating the Lambda function. Exactly one of `filename`, `imageUri`, or `s3Bucket` must be specified.
	// When `s3Bucket` is set, `s3Key` is required.
	S3Bucket string `protobuf:"bytes,13,opt,name=s3_bucket,json=s3Bucket,proto3" json:"s3_bucket,omitempty"`
	// S3 key of an object containing the function's deployment package. When `s3Bucket` is set, `s3Key` is required.
	S3Key string `protobuf:"bytes,14,opt,name=s3_key,json=s3Key,proto3" json:"s3_key,omitempty"`
	// Object version containing the function's deployment package. Conflicts with `filename` and `imageUri`.
	S3ObjectVersion string `protobuf:"bytes,15,opt,name=s3_object_version,json=s3ObjectVersion,proto3" json:"s3_object_version,omitempty"`
	// Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either
	// filename or s3_key. The usual way to set this is filebase64sha256('file.zip') where 'file.zip' is the local filename
	// of the lambda function source archive.
	SourceCodeHash string `protobuf:"bytes,16,opt,name=source_code_hash,json=sourceCodeHash,proto3" json:"source_code_hash,omitempty"`
	// Amount of time your Lambda Function has to run in seconds. Defaults to `3`.
	// See [Limits](https://docs.aws.amazon.com/lambda/latest/dg/limits.html).
	Timeout int32 `protobuf:"varint,17,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Map of environment variables that are accessible from the function code during execution. If provided at least one key must be present.
	Variables map[string]string `protobuf:"bytes,18,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ARN of an SNS topic or SQS queue to notify when an invocation fails. If this option is used, the function's IAM
	// role must be granted suitable access to write to the target object, which means allowing either
	// the `sns:Publish` or `sqs:SendMessage` action on this ARN, depending on which service is targeted.
	DeadLetterConfigTargetArn string `protobuf:"bytes,19,opt,name=dead_letter_config_target_arn,json=deadLetterConfigTargetArn,proto3" json:"dead_letter_config_target_arn,omitempty"`
	// The Lambda OCI [image configurations](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_function#image_config)
	ImageConfig *AwsLambdaFunctionImageConfig `protobuf:"bytes,20,opt,name=image_config,json=imageConfig,proto3" json:"image_config,omitempty"`
	// Whether to sample and trace a subset of incoming requests with AWS X-Ray. Valid values are `PassThrough` and `Active`.
	// If `PassThrough`, Lambda will only trace the request from an upstream service if it contains a tracing header
	// with "sampled=1". If `Active`, Lambda will respect any tracing header it receives from an upstream service.
	// If no tracing header is received, Lambda will call X-Ray for a tracing decision.
	TracingConfigMode string `protobuf:"bytes,21,opt,name=tracing_config_mode,json=tracingConfigMode,proto3" json:"tracing_config_mode,omitempty"`
	// VPC configuration
	VpcConfig *AwsLambdaFunctionVpcConfig `protobuf:"bytes,22,opt,name=vpc_config,json=vpcConfig,proto3" json:"vpc_config,omitempty"`
	// The size of the Lambda function Ephemeral storage(`/tmp`) represented in MB.
	// The minimum supported `ephemeralStorage` value defaults to `512`MB and the maximum supported value is `10240`MB.
	EphemeralStorageSize int32 `protobuf:"varint,23,opt,name=ephemeral_storage_size,json=ephemeralStorageSize,proto3" json:"ephemeral_storage_size,omitempty"`
}

func (x *AwsLambdaFunction) Reset() {
	*x = AwsLambdaFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsLambdaFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsLambdaFunction) ProtoMessage() {}

func (x *AwsLambdaFunction) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsLambdaFunction.ProtoReflect.Descriptor instead.
func (*AwsLambdaFunction) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *AwsLambdaFunction) GetArchitectures() []string {
	if x != nil {
		return x.Architectures
	}
	return nil
}

func (x *AwsLambdaFunction) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AwsLambdaFunction) GetFileSystemConfig() *AwsLambdaFunctionFileSystemConfig {
	if x != nil {
		return x.FileSystemConfig
	}
	return nil
}

func (x *AwsLambdaFunction) GetHandler() string {
	if x != nil {
		return x.Handler
	}
	return ""
}

func (x *AwsLambdaFunction) GetImageUri() string {
	if x != nil {
		return x.ImageUri
	}
	return ""
}

func (x *AwsLambdaFunction) GetKmsKeyArn() string {
	if x != nil {
		return x.KmsKeyArn
	}
	return ""
}

func (x *AwsLambdaFunction) GetLayers() []string {
	if x != nil {
		return x.Layers
	}
	return nil
}

func (x *AwsLambdaFunction) GetMemorySize() int32 {
	if x != nil {
		return x.MemorySize
	}
	return 0
}

func (x *AwsLambdaFunction) GetPackageType() string {
	if x != nil {
		return x.PackageType
	}
	return ""
}

func (x *AwsLambdaFunction) GetPublish() bool {
	if x != nil {
		return x.Publish
	}
	return false
}

func (x *AwsLambdaFunction) GetReservedConcurrentExecutions() int32 {
	if x != nil {
		return x.ReservedConcurrentExecutions
	}
	return 0
}

func (x *AwsLambdaFunction) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *AwsLambdaFunction) GetS3Bucket() string {
	if x != nil {
		return x.S3Bucket
	}
	return ""
}

func (x *AwsLambdaFunction) GetS3Key() string {
	if x != nil {
		return x.S3Key
	}
	return ""
}

func (x *AwsLambdaFunction) GetS3ObjectVersion() string {
	if x != nil {
		return x.S3ObjectVersion
	}
	return ""
}

func (x *AwsLambdaFunction) GetSourceCodeHash() string {
	if x != nil {
		return x.SourceCodeHash
	}
	return ""
}

func (x *AwsLambdaFunction) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *AwsLambdaFunction) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *AwsLambdaFunction) GetDeadLetterConfigTargetArn() string {
	if x != nil {
		return x.DeadLetterConfigTargetArn
	}
	return ""
}

func (x *AwsLambdaFunction) GetImageConfig() *AwsLambdaFunctionImageConfig {
	if x != nil {
		return x.ImageConfig
	}
	return nil
}

func (x *AwsLambdaFunction) GetTracingConfigMode() string {
	if x != nil {
		return x.TracingConfigMode
	}
	return ""
}

func (x *AwsLambdaFunction) GetVpcConfig() *AwsLambdaFunctionVpcConfig {
	if x != nil {
		return x.VpcConfig
	}
	return nil
}

func (x *AwsLambdaFunction) GetEphemeralStorageSize() int32 {
	if x != nil {
		return x.EphemeralStorageSize
	}
	return 0
}

// AwsLambdaFunctionFileSystemConfig configures the file system access for the Lambda function, allowing it to
// access an Amazon EFS file system via an Access Point.
type AwsLambdaFunctionFileSystemConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amazon Resource Name (ARN) of the Amazon EFS Access Point that provides access to the file system.
	Arn string `protobuf:"bytes,1,opt,name=arn,proto3" json:"arn,omitempty"`
	// Path where the function can access the file system, starting with /mnt/.
	LocalMountPath string `protobuf:"bytes,2,opt,name=local_mount_path,json=localMountPath,proto3" json:"local_mount_path,omitempty"`
}

func (x *AwsLambdaFunctionFileSystemConfig) Reset() {
	*x = AwsLambdaFunctionFileSystemConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsLambdaFunctionFileSystemConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsLambdaFunctionFileSystemConfig) ProtoMessage() {}

func (x *AwsLambdaFunctionFileSystemConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsLambdaFunctionFileSystemConfig.ProtoReflect.Descriptor instead.
func (*AwsLambdaFunctionFileSystemConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *AwsLambdaFunctionFileSystemConfig) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

func (x *AwsLambdaFunctionFileSystemConfig) GetLocalMountPath() string {
	if x != nil {
		return x.LocalMountPath
	}
	return ""
}

// AwsLambdaFunctionImageConfig specifies the image configuration values for a container image Lambda function,
// including command overrides, entry point, and working directory.
type AwsLambdaFunctionImageConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parameters that you want to pass in with `entryPoint`.
	Commands []string `protobuf:"bytes,1,rep,name=commands,proto3" json:"commands,omitempty"`
	// Entry point to your application, which is typically the location of the runtime executable.
	EntryPoints []string `protobuf:"bytes,2,rep,name=entry_points,json=entryPoints,proto3" json:"entry_points,omitempty"`
	// Working directory.
	WorkingDirectory string `protobuf:"bytes,3,opt,name=working_directory,json=workingDirectory,proto3" json:"working_directory,omitempty"`
}

func (x *AwsLambdaFunctionImageConfig) Reset() {
	*x = AwsLambdaFunctionImageConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsLambdaFunctionImageConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsLambdaFunctionImageConfig) ProtoMessage() {}

func (x *AwsLambdaFunctionImageConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsLambdaFunctionImageConfig.ProtoReflect.Descriptor instead.
func (*AwsLambdaFunctionImageConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDescGZIP(), []int{3}
}

func (x *AwsLambdaFunctionImageConfig) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *AwsLambdaFunctionImageConfig) GetEntryPoints() []string {
	if x != nil {
		return x.EntryPoints
	}
	return nil
}

func (x *AwsLambdaFunctionImageConfig) GetWorkingDirectory() string {
	if x != nil {
		return x.WorkingDirectory
	}
	return ""
}

// AwsLambdaFunctionVpcConfig provides VPC configuration for the Lambda function, specifying the VPC, subnets, and
// security groups for the function's network interface.
type AwsLambdaFunctionVpcConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of security group IDs associated with the Lambda function.
	SecurityGroupIds []string `protobuf:"bytes,1,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	// List of subnet IDs associated with the Lambda function.
	SubnetIds []string `protobuf:"bytes,2,rep,name=subnet_ids,json=subnetIds,proto3" json:"subnet_ids,omitempty"`
	// ID of the VPC.
	VpcId string `protobuf:"bytes,3,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
}

func (x *AwsLambdaFunctionVpcConfig) Reset() {
	*x = AwsLambdaFunctionVpcConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsLambdaFunctionVpcConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsLambdaFunctionVpcConfig) ProtoMessage() {}

func (x *AwsLambdaFunctionVpcConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsLambdaFunctionVpcConfig.ProtoReflect.Descriptor instead.
func (*AwsLambdaFunctionVpcConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDescGZIP(), []int{4}
}

func (x *AwsLambdaFunctionVpcConfig) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *AwsLambdaFunctionVpcConfig) GetSubnetIds() []string {
	if x != nil {
		return x.SubnetIds
	}
	return nil
}

func (x *AwsLambdaFunctionVpcConfig) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

// AwsLambdaIamRole defines the IAM role configuration for the Lambda function, including permissions boundaries,
// custom policies, and settings for Lambda@Edge and CloudWatch Lambda Insights.
type AwsLambdaIamRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ARN of the policy that is used to set the permissions boundary for the role
	PermissionsBoundary string `protobuf:"bytes,1,opt,name=permissions_boundary,json=permissionsBoundary,proto3" json:"permissions_boundary,omitempty"`
	// Enable Lambda@Edge for your Node.js or Python functions. The required trust relationship and publishing of
	// function versions will be configured in this module.
	LambdaAtEdgeEnabled bool `protobuf:"varint,2,opt,name=lambda_at_edge_enabled,json=lambdaAtEdgeEnabled,proto3" json:"lambda_at_edge_enabled,omitempty"`
	// Enable CloudWatch Lambda Insights for the Lambda Function.
	CloudwatchLambdaInsightsEnabled bool `protobuf:"varint,3,opt,name=cloudwatch_lambda_insights_enabled,json=cloudwatchLambdaInsightsEnabled,proto3" json:"cloudwatch_lambda_insights_enabled,omitempty"`
	// List of AWS Systems Manager Parameter Store parameter names. The IAM role of this Lambda function will be enhanced
	// with read permissions for those parameters. Parameters must start with a forward slash and can be encrypted with the
	// default KMS key.
	SsmParameterNames []string `protobuf:"bytes,4,rep,name=ssm_parameter_names,json=ssmParameterNames,proto3" json:"ssm_parameter_names,omitempty"`
	// ARNs of custom policies to be attached to the lambda role
	CustomIamPolicyArns []string `protobuf:"bytes,5,rep,name=custom_iam_policy_arns,json=customIamPolicyArns,proto3" json:"custom_iam_policy_arns,omitempty"`
	// Inline policy document (JSON) to attach to the lambda role
	InlineIamPolicy string `protobuf:"bytes,6,opt,name=inline_iam_policy,json=inlineIamPolicy,proto3" json:"inline_iam_policy,omitempty"`
}

func (x *AwsLambdaIamRole) Reset() {
	*x = AwsLambdaIamRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsLambdaIamRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsLambdaIamRole) ProtoMessage() {}

func (x *AwsLambdaIamRole) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsLambdaIamRole.ProtoReflect.Descriptor instead.
func (*AwsLambdaIamRole) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDescGZIP(), []int{5}
}

func (x *AwsLambdaIamRole) GetPermissionsBoundary() string {
	if x != nil {
		return x.PermissionsBoundary
	}
	return ""
}

func (x *AwsLambdaIamRole) GetLambdaAtEdgeEnabled() bool {
	if x != nil {
		return x.LambdaAtEdgeEnabled
	}
	return false
}

func (x *AwsLambdaIamRole) GetCloudwatchLambdaInsightsEnabled() bool {
	if x != nil {
		return x.CloudwatchLambdaInsightsEnabled
	}
	return false
}

func (x *AwsLambdaIamRole) GetSsmParameterNames() []string {
	if x != nil {
		return x.SsmParameterNames
	}
	return nil
}

func (x *AwsLambdaIamRole) GetCustomIamPolicyArns() []string {
	if x != nil {
		return x.CustomIamPolicyArns
	}
	return nil
}

func (x *AwsLambdaIamRole) GetInlineIamPolicy() string {
	if x != nil {
		return x.InlineIamPolicy
	}
	return ""
}

// AwsLambdaCloudwatchLogGroup configures the CloudWatch Log Group for the Lambda function, including retention
// settings and KMS key for encrypting log data.
type AwsLambdaCloudwatchLogGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ARN of the KMS Key to use when encrypting log data.
	// Please note, after the AWS KMS CMK is disassociated from the log group, AWS CloudWatch Logs stops encrypting newly
	// ingested data for the log group.
	// All previously ingested data remains encrypted, and AWS CloudWatch Logs requires permissions for the CMK whenever
	// the encrypted data is requested.
	KmsKeyArn string `protobuf:"bytes,1,opt,name=kms_key_arn,json=kmsKeyArn,proto3" json:"kms_key_arn,omitempty"`
	// Number of days you want to retain log events in the log group
	RetentionInDays int32 `protobuf:"varint,2,opt,name=retention_in_days,json=retentionInDays,proto3" json:"retention_in_days,omitempty"`
}

func (x *AwsLambdaCloudwatchLogGroup) Reset() {
	*x = AwsLambdaCloudwatchLogGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsLambdaCloudwatchLogGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsLambdaCloudwatchLogGroup) ProtoMessage() {}

func (x *AwsLambdaCloudwatchLogGroup) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsLambdaCloudwatchLogGroup.ProtoReflect.Descriptor instead.
func (*AwsLambdaCloudwatchLogGroup) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDescGZIP(), []int{6}
}

func (x *AwsLambdaCloudwatchLogGroup) GetKmsKeyArn() string {
	if x != nil {
		return x.KmsKeyArn
	}
	return ""
}

func (x *AwsLambdaCloudwatchLogGroup) GetRetentionInDays() int32 {
	if x != nil {
		return x.RetentionInDays
	}
	return 0
}

// AwsLambdaInvokeFunctionPermission defines which external sources can invoke the Lambda function, specifying the
// principal and source ARN.
type AwsLambdaInvokeFunctionPermission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//	The principal who is getting this permission e.g., `s3.amazonaws.com`,
	//
	// an AWS account ID, or AWS IAM principal, or AWS service principal such as `events.amazonaws.com` or `sns.amazonaws.com`.
	Principal string `protobuf:"bytes,1,opt,name=principal,proto3" json:"principal,omitempty"`
	// When the principal is an AWS service, the ARN of the specific resource within that service to grant permission to.
	// Without this, any resource from `principal` will be granted permission – even if that resource is from another account.
	// For S3, this should be the ARN of the S3 Bucket.
	// For EventBridge events, this should be the ARN of the EventBridge Rule.
	// For API Gateway, this should be the ARN of the API, as described
	// [here](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-control-access-using-iam-policies-to-invoke-api.html).
	SourceArn string `protobuf:"bytes,2,opt,name=source_arn,json=sourceArn,proto3" json:"source_arn,omitempty"`
}

func (x *AwsLambdaInvokeFunctionPermission) Reset() {
	*x = AwsLambdaInvokeFunctionPermission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsLambdaInvokeFunctionPermission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsLambdaInvokeFunctionPermission) ProtoMessage() {}

func (x *AwsLambdaInvokeFunctionPermission) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsLambdaInvokeFunctionPermission.ProtoReflect.Descriptor instead.
func (*AwsLambdaInvokeFunctionPermission) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDescGZIP(), []int{7}
}

func (x *AwsLambdaInvokeFunctionPermission) GetPrincipal() string {
	if x != nil {
		return x.Principal
	}
	return ""
}

func (x *AwsLambdaInvokeFunctionPermission) GetSourceArn() string {
	if x != nil {
		return x.SourceArn
	}
	return ""
}

var File_project_planton_provider_aws_awslambda_v1_spec_proto protoreflect.FileDescriptor

var file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDesc = []byte{
	0x0a, 0x34, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x61,
	0x77, 0x73, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x29, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x2e, 0x76,
	0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd2,
	0x03, 0x0a, 0x0d, 0x41, 0x77, 0x73, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x60, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77,
	0x73, 0x2e, 0x61, 0x77, 0x73, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x77, 0x73, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x08, 0x69, 0x61, 0x6d, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x77, 0x73, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x49, 0x61, 0x6d, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x07, 0x69, 0x61, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x78, 0x0a, 0x14, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x6c, 0x61, 0x6d, 0x62, 0x64,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x77, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x12, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x8c, 0x01, 0x0a, 0x1b, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x6c, 0x61, 0x6d,
	0x62, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61,
	0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xcb, 0x09, 0x0a, 0x11, 0x41, 0x77, 0x73, 0x4c, 0x61, 0x6d, 0x62, 0x64,
	0x61, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x7a, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73,
	0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x4c, 0x61, 0x6d,
	0x62, 0x64, 0x61, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x66, 0x69, 0x6c,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x72, 0x69, 0x12, 0x1e, 0x0a, 0x0b, 0x6b, 0x6d, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x61, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x6d, 0x73, 0x4b, 0x65,
	0x79, 0x41, 0x72, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x44, 0x0a, 0x1e, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x33,
	0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x33, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x33, 0x4b, 0x65, 0x79, 0x12, 0x2a,
	0x0a, 0x11, 0x73, 0x33, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x33, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x69,
	0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4b, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73,
	0x2e, 0x61, 0x77, 0x73, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77,
	0x73, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x1d, 0x64, 0x65, 0x61,
	0x64, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x64, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x6e, 0x12, 0x6a, 0x0a, 0x0c, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x47, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73,
	0x2e, 0x61, 0x77, 0x73, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77,
	0x73, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x63, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x64, 0x0a, 0x0a, 0x76, 0x70, 0x63, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x6c, 0x61,
	0x6d, 0x62, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x4c, 0x61, 0x6d, 0x62, 0x64,
	0x61, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x09, 0x76, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a,
	0x16, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x65,
	0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x5f, 0x0a, 0x21, 0x41, 0x77, 0x73, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x72, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x22, 0x8a, 0x01, 0x0a, 0x1c, 0x41, 0x77, 0x73, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x22,
	0x80, 0x01, 0x0a, 0x1a, 0x41, 0x77, 0x73, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x76,
	0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63,
	0x49, 0x64, 0x22, 0xd8, 0x02, 0x0a, 0x10, 0x41, 0x77, 0x73, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61,
	0x49, 0x61, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x61,
	0x6d, 0x62, 0x64, 0x61, 0x5f, 0x61, 0x74, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6c, 0x61, 0x6d, 0x62,
	0x64, 0x61, 0x41, 0x74, 0x45, 0x64, 0x67, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x4b, 0x0a, 0x22, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x61,
	0x6d, 0x62, 0x64, 0x61, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x77, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x49, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x73, 0x73, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x73, 0x73, 0x6d, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x61, 0x72, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x49, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x72, 0x6e,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x61, 0x6d, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x69, 0x0a,
	0x1b, 0x41, 0x77, 0x73, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x0a, 0x0b,
	0x6b, 0x6d, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6b, 0x6d, 0x73, 0x4b, 0x65, 0x79, 0x41, 0x72, 0x6e, 0x12, 0x2a, 0x0a, 0x11,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x22, 0x60, 0x0a, 0x21, 0x41, 0x77, 0x73, 0x4c,
	0x61, 0x6d, 0x62, 0x64, 0x61, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x6e, 0x42, 0xef, 0x02, 0x0a, 0x2d, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e,
	0x61, 0x77, 0x73, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x53, 0x70,
	0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x68, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x61, 0x77, 0x73, 0x6c, 0x61,
	0x6d, 0x62, 0x64, 0x61, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x77, 0x73, 0x6c, 0x61, 0x6d, 0x62, 0x64,
	0x61, 0x76, 0x31, 0xa2, 0x02, 0x05, 0x50, 0x50, 0x50, 0x41, 0x41, 0xaa, 0x02, 0x29, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x77, 0x73, 0x2e, 0x41, 0x77, 0x73, 0x6c, 0x61,
	0x6d, 0x62, 0x64, 0x61, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x29, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5c, 0x41, 0x77, 0x73, 0x5c, 0x41, 0x77, 0x73, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61,
	0x5c, 0x56, 0x31, 0xe2, 0x02, 0x35, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x41,
	0x77, 0x73, 0x5c, 0x41, 0x77, 0x73, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3a, 0x3a, 0x41, 0x77, 0x73, 0x3a, 0x3a, 0x41,
	0x77, 0x73, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDescData = file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDesc
)

func file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDescData)
	})
	return file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDescData
}

var file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_project_planton_provider_aws_awslambda_v1_spec_proto_goTypes = []any{
	(*AwsLambdaSpec)(nil),                     // 0: project.planton.provider.aws.awslambda.v1.AwsLambdaSpec
	(*AwsLambdaFunction)(nil),                 // 1: project.planton.provider.aws.awslambda.v1.AwsLambdaFunction
	(*AwsLambdaFunctionFileSystemConfig)(nil), // 2: project.planton.provider.aws.awslambda.v1.AwsLambdaFunctionFileSystemConfig
	(*AwsLambdaFunctionImageConfig)(nil),      // 3: project.planton.provider.aws.awslambda.v1.AwsLambdaFunctionImageConfig
	(*AwsLambdaFunctionVpcConfig)(nil),        // 4: project.planton.provider.aws.awslambda.v1.AwsLambdaFunctionVpcConfig
	(*AwsLambdaIamRole)(nil),                  // 5: project.planton.provider.aws.awslambda.v1.AwsLambdaIamRole
	(*AwsLambdaCloudwatchLogGroup)(nil),       // 6: project.planton.provider.aws.awslambda.v1.AwsLambdaCloudwatchLogGroup
	(*AwsLambdaInvokeFunctionPermission)(nil), // 7: project.planton.provider.aws.awslambda.v1.AwsLambdaInvokeFunctionPermission
	nil, // 8: project.planton.provider.aws.awslambda.v1.AwsLambdaFunction.VariablesEntry
}
var file_project_planton_provider_aws_awslambda_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.aws.awslambda.v1.AwsLambdaSpec.function:type_name -> project.planton.provider.aws.awslambda.v1.AwsLambdaFunction
	5, // 1: project.planton.provider.aws.awslambda.v1.AwsLambdaSpec.iam_role:type_name -> project.planton.provider.aws.awslambda.v1.AwsLambdaIamRole
	6, // 2: project.planton.provider.aws.awslambda.v1.AwsLambdaSpec.cloudwatch_log_group:type_name -> project.planton.provider.aws.awslambda.v1.AwsLambdaCloudwatchLogGroup
	7, // 3: project.planton.provider.aws.awslambda.v1.AwsLambdaSpec.invoke_function_permissions:type_name -> project.planton.provider.aws.awslambda.v1.AwsLambdaInvokeFunctionPermission
	2, // 4: project.planton.provider.aws.awslambda.v1.AwsLambdaFunction.file_system_config:type_name -> project.planton.provider.aws.awslambda.v1.AwsLambdaFunctionFileSystemConfig
	8, // 5: project.planton.provider.aws.awslambda.v1.AwsLambdaFunction.variables:type_name -> project.planton.provider.aws.awslambda.v1.AwsLambdaFunction.VariablesEntry
	3, // 6: project.planton.provider.aws.awslambda.v1.AwsLambdaFunction.image_config:type_name -> project.planton.provider.aws.awslambda.v1.AwsLambdaFunctionImageConfig
	4, // 7: project.planton.provider.aws.awslambda.v1.AwsLambdaFunction.vpc_config:type_name -> project.planton.provider.aws.awslambda.v1.AwsLambdaFunctionVpcConfig
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_awslambda_v1_spec_proto_init() }
func file_project_planton_provider_aws_awslambda_v1_spec_proto_init() {
	if File_project_planton_provider_aws_awslambda_v1_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AwsLambdaSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AwsLambdaFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AwsLambdaFunctionFileSystemConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*AwsLambdaFunctionImageConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*AwsLambdaFunctionVpcConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*AwsLambdaIamRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*AwsLambdaCloudwatchLogGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*AwsLambdaInvokeFunctionPermission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_awslambda_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_awslambda_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_awslambda_v1_spec_proto = out.File
	file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDesc = nil
	file_project_planton_provider_aws_awslambda_v1_spec_proto_goTypes = nil
	file_project_planton_provider_aws_awslambda_v1_spec_proto_depIdxs = nil
}
