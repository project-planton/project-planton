// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/provider/aws/ekscluster/v1/spec.proto

package eksclusterv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EksClusterSpec defines the specification required to deploy an Amazon Elastic Kubernetes Service (EKS) cluster
// on Planton Cloud.
// This message encapsulates all configurations necessary for setting up an EKS cluster, including the AWS region
// where the cluster will be deployed,
// the VPC (Virtual Private Cloud) settings, and the management mode for worker nodes.
// Amazon EKS is a managed Kubernetes service that simplifies running Kubernetes on AWS without needing to install,
// operate, and maintain your own Kubernetes control plane or nodes.
// By providing this specification, users can automate the EKS cluster creation process with specified configurations,
// ensuring a consistent and repeatable setup for their AWS environment.
// This is particularly useful for organizations looking to deploy containerized applications in a scalable and
// highly available manner.
type EksClusterSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The AWS region in which to create the EKS cluster.
	// This must be a valid AWS region where EKS is available.
	// Note: The EKS cluster will be recreated if this value is updated.
	// For a list of AWS regions, see: https://aws.amazon.com/about-aws/global-infrastructure/regions_az/
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// (Optional) The ID of the VPC to be used for creating the EKS cluster.
	// If an ID is not provided, a new VPC will be created automatically.
	// The VPC is the virtual network in which your EKS cluster and nodes will reside.
	// Note: The EKS cluster will be recreated if this value is updated.
	VpcId string `protobuf:"bytes,2,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	// The management mode for AWS EKS worker node groups.
	// This defines how the worker nodes are managed within the EKS cluster.
	// The management mode is specified using the EksWorkersManagementMode enum,
	// which can define modes such as "MANAGED", "SELF_MANAGED", or "FARGATE".
	// - MANAGED: AWS manages the worker nodes for you.
	// - SELF_MANAGED: You are responsible for managing the worker nodes.
	// - FARGATE: Use AWS Fargate to run Kubernetes pods without managing nodes.
	// Note: This field is required to determine how the cluster's compute resources are provisioned and managed.
	WorkersManagementMode EksWorkersManagementMode `protobuf:"varint,3,opt,name=workers_management_mode,json=workersManagementMode,proto3,enum=project.planton.provider.aws.ekscluster.v1.EksWorkersManagementMode" json:"workers_management_mode,omitempty"`
}

func (x *EksClusterSpec) Reset() {
	*x = EksClusterSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_ekscluster_v1_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EksClusterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EksClusterSpec) ProtoMessage() {}

func (x *EksClusterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_ekscluster_v1_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EksClusterSpec.ProtoReflect.Descriptor instead.
func (*EksClusterSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_ekscluster_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *EksClusterSpec) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *EksClusterSpec) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *EksClusterSpec) GetWorkersManagementMode() EksWorkersManagementMode {
	if x != nil {
		return x.WorkersManagementMode
	}
	return EksWorkersManagementMode_eks_workers_management_mode_unspecified
}

var File_project_planton_provider_aws_ekscluster_v1_spec_proto protoreflect.FileDescriptor

var file_project_planton_provider_aws_ekscluster_v1_spec_proto_rawDesc = []byte{
	0x0a, 0x35, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x65,
	0x6b, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x65, 0x6b, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x35, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x65,
	0x6b, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xce, 0x01, 0x0a, 0x0e, 0x45, 0x6b, 0x73, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1e, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x70,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49,
	0x64, 0x12, 0x84, 0x01, 0x0a, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61,
	0x77, 0x73, 0x2e, 0x65, 0x6b, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6b, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0xf6, 0x02, 0x0a, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x65, 0x6b,
	0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x53, 0x70, 0x65,
	0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x6a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x65, 0x6b, 0x73, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x65, 0x6b, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x05, 0x50, 0x50, 0x50, 0x41, 0x45, 0xaa, 0x02, 0x2a, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x77, 0x73, 0x2e, 0x45, 0x6b, 0x73, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x2a, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5c, 0x41, 0x77, 0x73, 0x5c, 0x45, 0x6b, 0x73, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x36, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5c, 0x41, 0x77, 0x73, 0x5c, 0x45, 0x6b, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x2f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3a, 0x3a, 0x41, 0x77,
	0x73, 0x3a, 0x3a, 0x45, 0x6b, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_project_planton_provider_aws_ekscluster_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_ekscluster_v1_spec_proto_rawDescData = file_project_planton_provider_aws_ekscluster_v1_spec_proto_rawDesc
)

func file_project_planton_provider_aws_ekscluster_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_ekscluster_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_ekscluster_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_provider_aws_ekscluster_v1_spec_proto_rawDescData)
	})
	return file_project_planton_provider_aws_ekscluster_v1_spec_proto_rawDescData
}

var file_project_planton_provider_aws_ekscluster_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_provider_aws_ekscluster_v1_spec_proto_goTypes = []any{
	(*EksClusterSpec)(nil),        // 0: project.planton.provider.aws.ekscluster.v1.EksClusterSpec
	(EksWorkersManagementMode)(0), // 1: project.planton.provider.aws.ekscluster.v1.EksWorkersManagementMode
}
var file_project_planton_provider_aws_ekscluster_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.aws.ekscluster.v1.EksClusterSpec.workers_management_mode:type_name -> project.planton.provider.aws.ekscluster.v1.EksWorkersManagementMode
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_ekscluster_v1_spec_proto_init() }
func file_project_planton_provider_aws_ekscluster_v1_spec_proto_init() {
	if File_project_planton_provider_aws_ekscluster_v1_spec_proto != nil {
		return
	}
	file_project_planton_provider_aws_ekscluster_v1_enum_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_project_planton_provider_aws_ekscluster_v1_spec_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*EksClusterSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_provider_aws_ekscluster_v1_spec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_ekscluster_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_ekscluster_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_aws_ekscluster_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_ekscluster_v1_spec_proto = out.File
	file_project_planton_provider_aws_ekscluster_v1_spec_proto_rawDesc = nil
	file_project_planton_provider_aws_ekscluster_v1_spec_proto_goTypes = nil
	file_project_planton_provider_aws_ekscluster_v1_spec_proto_depIdxs = nil
}
