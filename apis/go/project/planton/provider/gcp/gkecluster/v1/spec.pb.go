// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/provider/gcp/gkecluster/v1/spec.proto

package gkeclusterv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GkeClusterSpec is a message type that defines the specifications for a gke-cluster on Planton Cloud.
type GkeClusterSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gcp project in which the gke-cluster is to be created
	ClusterProjectId string `protobuf:"bytes,1,opt,name=cluster_project_id,json=clusterProjectId,proto3" json:"cluster_project_id,omitempty"`
	// valid gcp region in which to create the gke-cluster.
	// warning: gke-cluster will recreated if this value is updated.
	// https://cloud.google.com/compute/docs/regions-zones
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// valid gcp zone in which to create the gke-cluster.
	// https://cloud.google.com/compute/docs/regions-zones
	Zone string `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone,omitempty"`
	// flag to indicate that the cluster should be created in a shared vpc network.
	// warning: gke-cluster will be recreated if this is updated.
	// note: vpc network is created in a separate project when this is enabled.
	IsCreateSharedVpc bool `protobuf:"varint,4,opt,name=is_create_shared_vpc,json=isCreateSharedVpc,proto3" json:"is_create_shared_vpc,omitempty"`
	// flag to toggle workload logs for gke-cluster environment.
	// when workload logs is enabled, the logs from kubernetes pods would be sent to google cloud logging.
	// warning: enabling log forwarding increases cloud bills depending on the log volume.
	IsWorkloadLogsEnabled bool `protobuf:"varint,5,opt,name=is_workload_logs_enabled,json=isWorkloadLogsEnabled,proto3" json:"is_workload_logs_enabled,omitempty"`
	// cluster autoscaling configuration
	ClusterAutoscalingConfig *GkeClusterAutoscalingConfig `protobuf:"bytes,6,opt,name=cluster_autoscaling_config,json=clusterAutoscalingConfig,proto3" json:"cluster_autoscaling_config,omitempty"`
	// gke-cluster node pools
	NodePools []*GkeClusterNodePool `protobuf:"bytes,7,rep,name=node_pools,json=nodePools,proto3" json:"node_pools,omitempty"`
	// gke-cluster kubernetes addons spec
	KubernetesAddons *GkeClusterAddons `protobuf:"bytes,8,opt,name=kubernetes_addons,json=kubernetesAddons,proto3" json:"kubernetes_addons,omitempty"`
	// ingress dns-domains to be configured in gke cluster.
	IngressDnsDomains []*GkeClusterIngressDnsDomain `protobuf:"bytes,9,rep,name=ingress_dns_domains,json=ingressDnsDomains,proto3" json:"ingress_dns_domains,omitempty"`
}

func (x *GkeClusterSpec) Reset() {
	*x = GkeClusterSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GkeClusterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GkeClusterSpec) ProtoMessage() {}

func (x *GkeClusterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GkeClusterSpec.ProtoReflect.Descriptor instead.
func (*GkeClusterSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *GkeClusterSpec) GetClusterProjectId() string {
	if x != nil {
		return x.ClusterProjectId
	}
	return ""
}

func (x *GkeClusterSpec) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GkeClusterSpec) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *GkeClusterSpec) GetIsCreateSharedVpc() bool {
	if x != nil {
		return x.IsCreateSharedVpc
	}
	return false
}

func (x *GkeClusterSpec) GetIsWorkloadLogsEnabled() bool {
	if x != nil {
		return x.IsWorkloadLogsEnabled
	}
	return false
}

func (x *GkeClusterSpec) GetClusterAutoscalingConfig() *GkeClusterAutoscalingConfig {
	if x != nil {
		return x.ClusterAutoscalingConfig
	}
	return nil
}

func (x *GkeClusterSpec) GetNodePools() []*GkeClusterNodePool {
	if x != nil {
		return x.NodePools
	}
	return nil
}

func (x *GkeClusterSpec) GetKubernetesAddons() *GkeClusterAddons {
	if x != nil {
		return x.KubernetesAddons
	}
	return nil
}

func (x *GkeClusterSpec) GetIngressDnsDomains() []*GkeClusterIngressDnsDomain {
	if x != nil {
		return x.IngressDnsDomains
	}
	return nil
}

// gcp project
type GcpProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the gcp project
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// id of the gcp project
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// number of the gcp project
	Number string `protobuf:"bytes,3,opt,name=number,proto3" json:"number,omitempty"`
	// id of the billing account
	BillingAccountId string `protobuf:"bytes,4,opt,name=billing_account_id,json=billingAccountId,proto3" json:"billing_account_id,omitempty"`
}

func (x *GcpProject) Reset() {
	*x = GcpProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcpProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpProject) ProtoMessage() {}

func (x *GcpProject) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpProject.ProtoReflect.Descriptor instead.
func (*GcpProject) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *GcpProject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GcpProject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GcpProject) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *GcpProject) GetBillingAccountId() string {
	if x != nil {
		return x.BillingAccountId
	}
	return ""
}

// cluster autoscaling configuration for gke clusters.
// https://cloud.google.com/kubernetes-engine/docs/how-to/node-auto-provisioning
type GkeClusterAutoscalingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flag to control autoscaling of kubernetes worker nodes.
	// When set to true, the cluster will automatically scale up or down based on the resource requirements.
	IsEnabled bool `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	// The minimum number of CPU cores that the cluster can down up to when autoscaling is enabled.
	// The number of CPU cores is a sum across all nodes in the cluster.
	CpuMinCores int64 `protobuf:"varint,2,opt,name=cpu_min_cores,json=cpuMinCores,proto3" json:"cpu_min_cores,omitempty"`
	// The maximum number of CPU cores that the cluster can scale up to when autoscaling is enabled.
	// The number of CPU cores is a sum across all nodes in the cluster.
	CpuMaxCores int64 `protobuf:"varint,3,opt,name=cpu_max_cores,json=cpuMaxCores,proto3" json:"cpu_max_cores,omitempty"`
	// The minimum amount of memory in gigabytes (GB) that the cluster can scale down to when autoscaling is enabled.
	// The memory size is a sum across all nodes in the cluster.
	MemoryMinGb int64 `protobuf:"varint,4,opt,name=memory_min_gb,json=memoryMinGb,proto3" json:"memory_min_gb,omitempty"`
	// The maximum amount of memory in gigabytes (GB) that the cluster can scale up to when autoscaling is enabled.
	// The memory size is a sum across all nodes in the cluster.
	MemoryMaxGb int64 `protobuf:"varint,5,opt,name=memory_max_gb,json=memoryMaxGb,proto3" json:"memory_max_gb,omitempty"`
}

func (x *GkeClusterAutoscalingConfig) Reset() {
	*x = GkeClusterAutoscalingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GkeClusterAutoscalingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GkeClusterAutoscalingConfig) ProtoMessage() {}

func (x *GkeClusterAutoscalingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GkeClusterAutoscalingConfig.ProtoReflect.Descriptor instead.
func (*GkeClusterAutoscalingConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *GkeClusterAutoscalingConfig) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *GkeClusterAutoscalingConfig) GetCpuMinCores() int64 {
	if x != nil {
		return x.CpuMinCores
	}
	return 0
}

func (x *GkeClusterAutoscalingConfig) GetCpuMaxCores() int64 {
	if x != nil {
		return x.CpuMaxCores
	}
	return 0
}

func (x *GkeClusterAutoscalingConfig) GetMemoryMinGb() int64 {
	if x != nil {
		return x.MemoryMinGb
	}
	return 0
}

func (x *GkeClusterAutoscalingConfig) GetMemoryMaxGb() int64 {
	if x != nil {
		return x.MemoryMaxGb
	}
	return 0
}

// gcp gke-cluster node pool
type GkeClusterNodePool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the node pool. The name is added as a label to the node pool that can be used to schedule workloads.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type of machine for the node pool. For example, 'n2-custom-8-16234'.
	MachineType string `protobuf:"bytes,2,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	// Minimum number of nodes in the node pool. Defaults to 1.
	MinNodeCount int32 `protobuf:"varint,3,opt,name=min_node_count,json=minNodeCount,proto3" json:"min_node_count,omitempty"`
	// Maximum number of nodes in the node pool. Defaults to 1.
	MaxNodeCount int32 `protobuf:"varint,4,opt,name=max_node_count,json=maxNodeCount,proto3" json:"max_node_count,omitempty"`
	// Flag to enable spot instances on the node pool. Defaults to false.
	IsSpotEnabled bool `protobuf:"varint,5,opt,name=is_spot_enabled,json=isSpotEnabled,proto3" json:"is_spot_enabled,omitempty"`
}

func (x *GkeClusterNodePool) Reset() {
	*x = GkeClusterNodePool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GkeClusterNodePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GkeClusterNodePool) ProtoMessage() {}

func (x *GkeClusterNodePool) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GkeClusterNodePool.ProtoReflect.Descriptor instead.
func (*GkeClusterNodePool) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDescGZIP(), []int{3}
}

func (x *GkeClusterNodePool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GkeClusterNodePool) GetMachineType() string {
	if x != nil {
		return x.MachineType
	}
	return ""
}

func (x *GkeClusterNodePool) GetMinNodeCount() int32 {
	if x != nil {
		return x.MinNodeCount
	}
	return 0
}

func (x *GkeClusterNodePool) GetMaxNodeCount() int32 {
	if x != nil {
		return x.MaxNodeCount
	}
	return 0
}

func (x *GkeClusterNodePool) GetIsSpotEnabled() bool {
	if x != nil {
		return x.IsSpotEnabled
	}
	return false
}

// ingress dns domain
type GkeClusterIngressDnsDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique identifier of ingress-dns-domain
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// dns domain name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// flag to toggle tls for endpoint-domain.
	// defaults to "false".
	// (important note) certificates are not created for endpoints that do not need tls.
	// (important note) ingress-dns-domains with out tls enabled are not eligible to be used for
	// creating endpoints for microservice-instances, postgres-clusters, kafka-clusters, redis-clusters or solr-clouds
	IsTlsEnabled bool `protobuf:"varint,3,opt,name=is_tls_enabled,json=isTlsEnabled,proto3" json:"is_tls_enabled,omitempty"`
	// id of the project on google cloud containing the dns zone for the endpoint-domain.
	// this value is looked up from the dns-domains in the organization dns data.
	// this value is required for configuring the cert-issuer to perform dns validations.
	DnsZoneGcpProjectId string `protobuf:"bytes,4,opt,name=dns_zone_gcp_project_id,json=dnsZoneGcpProjectId,proto3" json:"dns_zone_gcp_project_id,omitempty"`
}

func (x *GkeClusterIngressDnsDomain) Reset() {
	*x = GkeClusterIngressDnsDomain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GkeClusterIngressDnsDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GkeClusterIngressDnsDomain) ProtoMessage() {}

func (x *GkeClusterIngressDnsDomain) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GkeClusterIngressDnsDomain.ProtoReflect.Descriptor instead.
func (*GkeClusterIngressDnsDomain) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDescGZIP(), []int{4}
}

func (x *GkeClusterIngressDnsDomain) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GkeClusterIngressDnsDomain) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GkeClusterIngressDnsDomain) GetIsTlsEnabled() bool {
	if x != nil {
		return x.IsTlsEnabled
	}
	return false
}

func (x *GkeClusterIngressDnsDomain) GetDnsZoneGcpProjectId() string {
	if x != nil {
		return x.DnsZoneGcpProjectId
	}
	return ""
}

// gke-cluster kubernetes addons
type GkeClusterAddons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// flag to control postgres-operator installation
	IsInstallPostgresOperator bool `protobuf:"varint,1,opt,name=is_install_postgres_operator,json=isInstallPostgresOperator,proto3" json:"is_install_postgres_operator,omitempty"`
	// flag to control kafka-operator installation
	IsInstallKafkaOperator bool `protobuf:"varint,2,opt,name=is_install_kafka_operator,json=isInstallKafkaOperator,proto3" json:"is_install_kafka_operator,omitempty"`
	// flag to control solr-operator installation
	IsInstallSolrOperator bool `protobuf:"varint,3,opt,name=is_install_solr_operator,json=isInstallSolrOperator,proto3" json:"is_install_solr_operator,omitempty"`
	// flag to control kubecost
	IsInstallKubecost bool `protobuf:"varint,4,opt,name=is_install_kubecost,json=isInstallKubecost,proto3" json:"is_install_kubecost,omitempty"`
	// planton-cloud-kube-agent addon spec
	PlantonCloudKubeAgent *GkeClusterAddonsPlantonCloudKubeAgent `protobuf:"bytes,5,opt,name=planton_cloud_kube_agent,json=plantonCloudKubeAgent,proto3" json:"planton_cloud_kube_agent,omitempty"`
	// flag to control ingress-nginx
	IsInstallIngressNginx bool `protobuf:"varint,6,opt,name=is_install_ingress_nginx,json=isInstallIngressNginx,proto3" json:"is_install_ingress_nginx,omitempty"`
	// flag to control istio
	IsInstallIstio bool `protobuf:"varint,7,opt,name=is_install_istio,json=isInstallIstio,proto3" json:"is_install_istio,omitempty"`
	// flag to control cert-manager
	IsInstallCertManager bool `protobuf:"varint,8,opt,name=is_install_cert_manager,json=isInstallCertManager,proto3" json:"is_install_cert_manager,omitempty"`
	// flag to control external-dns
	IsInstallExternalDns bool `protobuf:"varint,9,opt,name=is_install_external_dns,json=isInstallExternalDns,proto3" json:"is_install_external_dns,omitempty"`
	// flag to control external-secrets
	IsInstallExternalSecrets bool `protobuf:"varint,10,opt,name=is_install_external_secrets,json=isInstallExternalSecrets,proto3" json:"is_install_external_secrets,omitempty"`
	// flag to control elastic-operator installation
	IsInstallElasticOperator bool `protobuf:"varint,11,opt,name=is_install_elastic_operator,json=isInstallElasticOperator,proto3" json:"is_install_elastic_operator,omitempty"`
	// flag to control keycloak-operator installation
	IsInstallKeycloakOperator bool `protobuf:"varint,12,opt,name=is_install_keycloak_operator,json=isInstallKeycloakOperator,proto3" json:"is_install_keycloak_operator,omitempty"`
}

func (x *GkeClusterAddons) Reset() {
	*x = GkeClusterAddons{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GkeClusterAddons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GkeClusterAddons) ProtoMessage() {}

func (x *GkeClusterAddons) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GkeClusterAddons.ProtoReflect.Descriptor instead.
func (*GkeClusterAddons) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDescGZIP(), []int{5}
}

func (x *GkeClusterAddons) GetIsInstallPostgresOperator() bool {
	if x != nil {
		return x.IsInstallPostgresOperator
	}
	return false
}

func (x *GkeClusterAddons) GetIsInstallKafkaOperator() bool {
	if x != nil {
		return x.IsInstallKafkaOperator
	}
	return false
}

func (x *GkeClusterAddons) GetIsInstallSolrOperator() bool {
	if x != nil {
		return x.IsInstallSolrOperator
	}
	return false
}

func (x *GkeClusterAddons) GetIsInstallKubecost() bool {
	if x != nil {
		return x.IsInstallKubecost
	}
	return false
}

func (x *GkeClusterAddons) GetPlantonCloudKubeAgent() *GkeClusterAddonsPlantonCloudKubeAgent {
	if x != nil {
		return x.PlantonCloudKubeAgent
	}
	return nil
}

func (x *GkeClusterAddons) GetIsInstallIngressNginx() bool {
	if x != nil {
		return x.IsInstallIngressNginx
	}
	return false
}

func (x *GkeClusterAddons) GetIsInstallIstio() bool {
	if x != nil {
		return x.IsInstallIstio
	}
	return false
}

func (x *GkeClusterAddons) GetIsInstallCertManager() bool {
	if x != nil {
		return x.IsInstallCertManager
	}
	return false
}

func (x *GkeClusterAddons) GetIsInstallExternalDns() bool {
	if x != nil {
		return x.IsInstallExternalDns
	}
	return false
}

func (x *GkeClusterAddons) GetIsInstallExternalSecrets() bool {
	if x != nil {
		return x.IsInstallExternalSecrets
	}
	return false
}

func (x *GkeClusterAddons) GetIsInstallElasticOperator() bool {
	if x != nil {
		return x.IsInstallElasticOperator
	}
	return false
}

func (x *GkeClusterAddons) GetIsInstallKeycloakOperator() bool {
	if x != nil {
		return x.IsInstallKeycloakOperator
	}
	return false
}

// planton-cloud-kube-agent addon spec
type GkeClusterAddonsPlantonCloudKubeAgent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// flag to control planton-cloud-kube-agent installation
	IsInstall bool `protobuf:"varint,1,opt,name=is_install,json=isInstall,proto3" json:"is_install,omitempty"`
	// machine_account_email is the email of the machine-account to be used by planton-cloud-kube-agent.
	// this is only created if the is_install is true.
	MachineAccountEmail string `protobuf:"bytes,2,opt,name=machine_account_email,json=machineAccountEmail,proto3" json:"machine_account_email,omitempty"`
}

func (x *GkeClusterAddonsPlantonCloudKubeAgent) Reset() {
	*x = GkeClusterAddonsPlantonCloudKubeAgent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GkeClusterAddonsPlantonCloudKubeAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GkeClusterAddonsPlantonCloudKubeAgent) ProtoMessage() {}

func (x *GkeClusterAddonsPlantonCloudKubeAgent) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GkeClusterAddonsPlantonCloudKubeAgent.ProtoReflect.Descriptor instead.
func (*GkeClusterAddonsPlantonCloudKubeAgent) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDescGZIP(), []int{6}
}

func (x *GkeClusterAddonsPlantonCloudKubeAgent) GetIsInstall() bool {
	if x != nil {
		return x.IsInstall
	}
	return false
}

func (x *GkeClusterAddonsPlantonCloudKubeAgent) GetMachineAccountEmail() string {
	if x != nil {
		return x.MachineAccountEmail
	}
	return ""
}

var File_project_planton_provider_gcp_gkecluster_v1_spec_proto protoreflect.FileDescriptor

var file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDesc = []byte{
	0x0a, 0x35, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x67, 0x63, 0x70, 0x2f, 0x67,
	0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x67, 0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xae, 0x05, 0x0a, 0x0e, 0x47, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x2f, 0x0a,
	0x14, 0x69, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x76, 0x70, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x70, 0x63, 0x12, 0x37,
	0x0a, 0x18, 0x69, 0x73, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6c, 0x6f,
	0x67, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x69, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x67, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x1a, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x67, 0x6b, 0x65, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6b, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x18, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75,
	0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x5d, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x67,
	0x63, 0x70, 0x2e, 0x67, 0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x69,
	0x0a, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x64, 0x64,
	0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x67, 0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x52, 0x10, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x12, 0x76, 0x0a, 0x13, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x67, 0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x44, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x11,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x44, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x22, 0x76, 0x0a, 0x0a, 0x47, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xcc, 0x01, 0x0a, 0x1b, 0x47, 0x6b,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x70, 0x75, 0x5f,
	0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x63, 0x70, 0x75, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d,
	0x63, 0x70, 0x75, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x70, 0x75, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x72, 0x65, 0x73,
	0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x67,
	0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d,
	0x69, 0x6e, 0x47, 0x62, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x67, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x47, 0x62, 0x22, 0xeb, 0x03, 0x0a, 0x12, 0x47, 0x6b, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12,
	0xb5, 0x02, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xa0,
	0x02, 0xba, 0x48, 0x9c, 0x02, 0xba, 0x01, 0x7a, 0x0a, 0x12, 0x67, 0x63, 0x70, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x4f, 0x6e,
	0x6c, 0x79, 0x20, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x20,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x20, 0x28, 0x41, 0x2d, 0x5a, 0x2c,
	0x61, 0x2d, 0x7a, 0x2c, 0x20, 0x30, 0x2d, 0x39, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x68, 0x79,
	0x70, 0x68, 0x65, 0x6e, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x1a, 0x1f, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28,
	0x27, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x2b, 0x24,
	0x27, 0x29, 0xba, 0x01, 0x4c, 0x0a, 0x12, 0x67, 0x63, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x4d, 0x75, 0x73, 0x74, 0x20,
	0x6e, 0x6f, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61,
	0x20, 0x68, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x1a, 0x18, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x5e, 0x2d, 0x5d, 0x2e, 0x2a, 0x24, 0x27,
	0x29, 0xba, 0x01, 0x47, 0x0a, 0x12, 0x67, 0x63, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x6e,
	0x6f, 0x74, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x68, 0x79,
	0x70, 0x68, 0x65, 0x6e, 0x1a, 0x15, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x28, 0x27, 0x5b, 0x5e, 0x2d, 0x5d, 0x24, 0x27, 0x29, 0x72, 0x04, 0x10, 0x01, 0x18,
	0x19, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x53, 0x70, 0x6f, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xa4, 0x01, 0x0a, 0x1a, 0x47, 0x6b, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x44, 0x6e, 0x73, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x54, 0x6c, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x17, 0x64, 0x6e, 0x73, 0x5f, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x67, 0x63, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x6e, 0x73, 0x5a, 0x6f, 0x6e,
	0x65, 0x47, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x94, 0x06,
	0x0a, 0x10, 0x47, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x5f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x37,
	0x0a, 0x18, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x6f, 0x6c,
	0x72, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x6f, 0x6c, 0x72, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4b,
	0x75, 0x62, 0x65, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x8a, 0x01, 0x0a, 0x18, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x67, 0x6b, 0x65, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x15, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4b, 0x75, 0x62, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x67, 0x69, 0x6e, 0x78,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x67, 0x69, 0x6e, 0x78, 0x12, 0x28, 0x0a,
	0x10, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x73, 0x74, 0x69,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x35,
	0x0a, 0x17, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x44, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x5f, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x73, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x4b, 0x65, 0x79, 0x63, 0x6c, 0x6f, 0x61, 0x6b, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x22, 0x7a, 0x0a, 0x25, 0x47, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x32, 0x0a, 0x15,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x42, 0xf6, 0x02, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x67, 0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x42, 0x09, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x6a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x67, 0x63,
	0x70, 0x2f, 0x67, 0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b,
	0x67, 0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x05, 0x50,
	0x50, 0x50, 0x47, 0x47, 0xaa, 0x02, 0x2a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x47, 0x63, 0x70, 0x2e, 0x47, 0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x2a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x47, 0x63, 0x70,
	0x5c, 0x47, 0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x36, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x47, 0x63, 0x70, 0x5c, 0x47, 0x6b,
	0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x2f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x3a, 0x3a, 0x47, 0x63, 0x70, 0x3a, 0x3a, 0x47, 0x6b, 0x65, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDescData = file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDesc
)

func file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDescData)
	})
	return file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDescData
}

var file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_project_planton_provider_gcp_gkecluster_v1_spec_proto_goTypes = []any{
	(*GkeClusterSpec)(nil),                        // 0: project.planton.provider.gcp.gkecluster.v1.GkeClusterSpec
	(*GcpProject)(nil),                            // 1: project.planton.provider.gcp.gkecluster.v1.GcpProject
	(*GkeClusterAutoscalingConfig)(nil),           // 2: project.planton.provider.gcp.gkecluster.v1.GkeClusterAutoscalingConfig
	(*GkeClusterNodePool)(nil),                    // 3: project.planton.provider.gcp.gkecluster.v1.GkeClusterNodePool
	(*GkeClusterIngressDnsDomain)(nil),            // 4: project.planton.provider.gcp.gkecluster.v1.GkeClusterIngressDnsDomain
	(*GkeClusterAddons)(nil),                      // 5: project.planton.provider.gcp.gkecluster.v1.GkeClusterAddons
	(*GkeClusterAddonsPlantonCloudKubeAgent)(nil), // 6: project.planton.provider.gcp.gkecluster.v1.GkeClusterAddonsPlantonCloudKubeAgent
}
var file_project_planton_provider_gcp_gkecluster_v1_spec_proto_depIdxs = []int32{
	2, // 0: project.planton.provider.gcp.gkecluster.v1.GkeClusterSpec.cluster_autoscaling_config:type_name -> project.planton.provider.gcp.gkecluster.v1.GkeClusterAutoscalingConfig
	3, // 1: project.planton.provider.gcp.gkecluster.v1.GkeClusterSpec.node_pools:type_name -> project.planton.provider.gcp.gkecluster.v1.GkeClusterNodePool
	5, // 2: project.planton.provider.gcp.gkecluster.v1.GkeClusterSpec.kubernetes_addons:type_name -> project.planton.provider.gcp.gkecluster.v1.GkeClusterAddons
	4, // 3: project.planton.provider.gcp.gkecluster.v1.GkeClusterSpec.ingress_dns_domains:type_name -> project.planton.provider.gcp.gkecluster.v1.GkeClusterIngressDnsDomain
	6, // 4: project.planton.provider.gcp.gkecluster.v1.GkeClusterAddons.planton_cloud_kube_agent:type_name -> project.planton.provider.gcp.gkecluster.v1.GkeClusterAddonsPlantonCloudKubeAgent
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_project_planton_provider_gcp_gkecluster_v1_spec_proto_init() }
func file_project_planton_provider_gcp_gkecluster_v1_spec_proto_init() {
	if File_project_planton_provider_gcp_gkecluster_v1_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GkeClusterSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GcpProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GkeClusterAutoscalingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GkeClusterNodePool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GkeClusterIngressDnsDomain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GkeClusterAddons); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GkeClusterAddonsPlantonCloudKubeAgent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_gcp_gkecluster_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_gcp_gkecluster_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_gcp_gkecluster_v1_spec_proto = out.File
	file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDesc = nil
	file_project_planton_provider_gcp_gkecluster_v1_spec_proto_goTypes = nil
	file_project_planton_provider_gcp_gkecluster_v1_spec_proto_depIdxs = nil
}
