// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/provider/kubernetes/kafkakubernetes/v1/spec.proto

package kafkakubernetesv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	kubernetes "github.com/project-planton/project-planton/apis/go/project/planton/shared/kubernetes"
	_ "github.com/project-planton/project-planton/apis/go/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// **KafkaKubernetesSpec** defines the configuration for deploying Apache Kafka on a Kubernetes cluster.
// This message includes specifications for Kafka topics, broker containers, Zookeeper containers, schema registry,
// ingress settings, and the option to deploy a Kafka UI.
// By configuring these parameters, you can set up a Kafka cluster tailored to your application's needs, including
// resource allocation, data persistence, and external access.
type KafkaKubernetesSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of Kafka topics to be created in the Kafka cluster.
	KafkaTopics []*KafkaTopic `protobuf:"bytes,1,rep,name=kafka_topics,json=kafkaTopics,proto3" json:"kafka_topics,omitempty"`
	// The specifications for the Kafka broker containers.
	BrokerContainer *KafkaKubernetesBrokerContainer `protobuf:"bytes,2,opt,name=broker_container,json=brokerContainer,proto3" json:"broker_container,omitempty"`
	// The specifications for the Zookeeper containers.
	ZookeeperContainer *KafkaKubernetesZookeeperContainer `protobuf:"bytes,3,opt,name=zookeeper_container,json=zookeeperContainer,proto3" json:"zookeeper_container,omitempty"`
	// The specifications for the Schema Registry containers.
	SchemaRegistryContainer *KafkaKubernetesSchemaRegistryContainer `protobuf:"bytes,4,opt,name=schema_registry_container,json=schemaRegistryContainer,proto3" json:"schema_registry_container,omitempty"`
	// The ingress configuration for the Kafka deployment.
	Ingress *kubernetes.IngressSpec `protobuf:"bytes,5,opt,name=ingress,proto3" json:"ingress,omitempty"`
	// A flag to toggle the deployment of the Kafka UI component.
	IsDeployKafkaUi bool `protobuf:"varint,6,opt,name=is_deploy_kafka_ui,json=isDeployKafkaUi,proto3" json:"is_deploy_kafka_ui,omitempty"`
}

func (x *KafkaKubernetesSpec) Reset() {
	*x = KafkaKubernetesSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaKubernetesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaKubernetesSpec) ProtoMessage() {}

func (x *KafkaKubernetesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaKubernetesSpec.ProtoReflect.Descriptor instead.
func (*KafkaKubernetesSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *KafkaKubernetesSpec) GetKafkaTopics() []*KafkaTopic {
	if x != nil {
		return x.KafkaTopics
	}
	return nil
}

func (x *KafkaKubernetesSpec) GetBrokerContainer() *KafkaKubernetesBrokerContainer {
	if x != nil {
		return x.BrokerContainer
	}
	return nil
}

func (x *KafkaKubernetesSpec) GetZookeeperContainer() *KafkaKubernetesZookeeperContainer {
	if x != nil {
		return x.ZookeeperContainer
	}
	return nil
}

func (x *KafkaKubernetesSpec) GetSchemaRegistryContainer() *KafkaKubernetesSchemaRegistryContainer {
	if x != nil {
		return x.SchemaRegistryContainer
	}
	return nil
}

func (x *KafkaKubernetesSpec) GetIngress() *kubernetes.IngressSpec {
	if x != nil {
		return x.Ingress
	}
	return nil
}

func (x *KafkaKubernetesSpec) GetIsDeployKafkaUi() bool {
	if x != nil {
		return x.IsDeployKafkaUi
	}
	return false
}

// **KafkaKubernetesBrokerContainer** specifies the configuration for the Kafka broker containers.
// It includes settings such as the number of replicas, resource allocations, and disk size.
// Proper configuration ensures optimal performance and data reliability for your Kafka brokers.
type KafkaKubernetesBrokerContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of Kafka brokers to deploy.
	// Defaults to 1 if the client sets the value to 0.
	// Recommended default value is 1.
	Replicas int32 `protobuf:"varint,1,opt,name=replicas,proto3" json:"replicas,omitempty"`
	// The CPU and memory resources allocated to the Kafka broker containers.
	// Recommended defaults: "cpu-requests: 50m", "memory-requests: 256Mi", "cpu-limits: 1", "memory-limits: 1Gi".
	Resources *kubernetes.ContainerResources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// The size of the disk to be attached to each broker instance (e.g., "30Gi").
	// A default value is set if not provided by the client.
	DiskSize string `protobuf:"bytes,3,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
}

func (x *KafkaKubernetesBrokerContainer) Reset() {
	*x = KafkaKubernetesBrokerContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaKubernetesBrokerContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaKubernetesBrokerContainer) ProtoMessage() {}

func (x *KafkaKubernetesBrokerContainer) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaKubernetesBrokerContainer.ProtoReflect.Descriptor instead.
func (*KafkaKubernetesBrokerContainer) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *KafkaKubernetesBrokerContainer) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *KafkaKubernetesBrokerContainer) GetResources() *kubernetes.ContainerResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *KafkaKubernetesBrokerContainer) GetDiskSize() string {
	if x != nil {
		return x.DiskSize
	}
	return ""
}

// **KafkaKubernetesZookeeperContainer** specifies the configuration for the Zookeeper containers.
// Zookeeper is required for Kafka cluster management and coordination.
// Proper configuration ensures high availability and reliability of your Kafka cluster.
type KafkaKubernetesZookeeperContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of Zookeeper container replicas.
	// Zookeeper requires at least 3 replicas for high availability (HA) mode.
	// Zookeeper uses the Raft consensus algorithm; refer to https://raft.github.io/ for more information on how replica
	// count affects availability.
	Replicas int32 `protobuf:"varint,1,opt,name=replicas,proto3" json:"replicas,omitempty"`
	// The CPU and memory resources allocated to the Zookeeper containers.
	// Recommended defaults: "cpu-requests: 50m", "memory-requests: 256Mi", "cpu-limits: 1", "memory-limits: 1Gi".
	Resources *kubernetes.ContainerResources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// The size of the disk to be attached to each Zookeeper instance (e.g., "30Gi").
	// A default value is set if not provided by the client.
	DiskSize string `protobuf:"bytes,3,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
}

func (x *KafkaKubernetesZookeeperContainer) Reset() {
	*x = KafkaKubernetesZookeeperContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaKubernetesZookeeperContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaKubernetesZookeeperContainer) ProtoMessage() {}

func (x *KafkaKubernetesZookeeperContainer) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaKubernetesZookeeperContainer.ProtoReflect.Descriptor instead.
func (*KafkaKubernetesZookeeperContainer) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *KafkaKubernetesZookeeperContainer) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *KafkaKubernetesZookeeperContainer) GetResources() *kubernetes.ContainerResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *KafkaKubernetesZookeeperContainer) GetDiskSize() string {
	if x != nil {
		return x.DiskSize
	}
	return ""
}

// **KafkaKubernetesSchemaRegistryContainer** specifies the configuration for the Schema Registry containers.
// The Schema Registry provides a serving layer for your metadata, allowing data producers and consumers to evolve independently.
type KafkaKubernetesSchemaRegistryContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A flag to control whether the Schema Registry is created for the Kafka deployment.
	// Defaults to `false`.
	IsEnabled bool `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	// The number of Schema Registry replicas.
	// Recommended default value is "1".
	// This value has no effect if `is_enabled` is set to `false`.
	Replicas int32 `protobuf:"varint,2,opt,name=replicas,proto3" json:"replicas,omitempty"`
	// The CPU and memory resources allocated to the Schema Registry containers.
	// Recommended defaults: "cpu-requests: 50m", "memory-requests: 256Mi", "cpu-limits: 1", "memory-limits: 1Gi".
	Resources *kubernetes.ContainerResources `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`
}

func (x *KafkaKubernetesSchemaRegistryContainer) Reset() {
	*x = KafkaKubernetesSchemaRegistryContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaKubernetesSchemaRegistryContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaKubernetesSchemaRegistryContainer) ProtoMessage() {}

func (x *KafkaKubernetesSchemaRegistryContainer) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaKubernetesSchemaRegistryContainer.ProtoReflect.Descriptor instead.
func (*KafkaKubernetesSchemaRegistryContainer) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_rawDescGZIP(), []int{3}
}

func (x *KafkaKubernetesSchemaRegistryContainer) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *KafkaKubernetesSchemaRegistryContainer) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *KafkaKubernetesSchemaRegistryContainer) GetResources() *kubernetes.ContainerResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

// **KafkaTopic** represents a Kafka topic to be created in the Kafka cluster.
// It includes configurations such as the topic name, number of partitions, replicas, and additional configurations.
type KafkaTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the Kafka topic.
	// Must be between 1 and 249 characters in length.
	// The name must start and end with an alphanumeric character, can contain alphanumeric characters, '.', '_', and '-'.
	// Must not contain '..' or non-ASCII characters.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The number of partitions for the topic.
	// Recommended default is 1.
	Partitions int32 `protobuf:"varint,2,opt,name=partitions,proto3" json:"partitions,omitempty"`
	// The number of replicas for the topic.
	// Recommended default is 1.
	Replicas int32 `protobuf:"varint,3,opt,name=replicas,proto3" json:"replicas,omitempty"`
	// Additional configuration for the Kafka topic.
	// If not provided, default values will be set.
	// For example, the default `delete.policy` is `delete`, but it can be set to `compact`.
	Config map[string]string `protobuf:"bytes,4,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *KafkaTopic) Reset() {
	*x = KafkaTopic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaTopic) ProtoMessage() {}

func (x *KafkaTopic) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaTopic.ProtoReflect.Descriptor instead.
func (*KafkaTopic) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_rawDescGZIP(), []int{4}
}

func (x *KafkaTopic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KafkaTopic) GetPartitions() int32 {
	if x != nil {
		return x.Partitions
	}
	return 0
}

func (x *KafkaTopic) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *KafkaTopic) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

var File_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto protoreflect.FileDescriptor

var file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_rawDesc = []byte{
	0x0a, 0x41, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x36, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x05, 0x0a, 0x13, 0x4b,
	0x61, 0x66, 0x6b, 0x61, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x65, 0x0a, 0x0c, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6b,
	0x61, 0x66, 0x6b, 0x61, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x0b, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x10, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61,
	0x66, 0x6b, 0x61, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x0f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x92, 0x01, 0x0a, 0x13, 0x7a, 0x6f, 0x6f, 0x6b, 0x65, 0x65,
	0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5a, 0x6f, 0x6f, 0x6b,
	0x65, 0x65, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x12, 0x7a, 0x6f, 0x6f, 0x6b, 0x65, 0x65, 0x70, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x9a, 0x01, 0x0a, 0x19, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x17,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x35, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x6b,
	0x61, 0x66, 0x6b, 0x61, 0x5f, 0x75, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0x92,
	0xa6, 0x1d, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0f, 0x69, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x55, 0x69, 0x22, 0xeb, 0x02, 0x0a, 0x1e, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x08, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x05, 0x92,
	0xa6, 0x1d, 0x01, 0x31, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x5b,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0xc8, 0x01, 0x0a, 0x09,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0xaa, 0x01, 0xba, 0x48, 0x9f, 0x01, 0xba, 0x01, 0x9b, 0x01, 0x0a, 0x26, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x2e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x1a, 0x44, 0x69, 0x73, 0x6b, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x1a, 0x55,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5c,
	0x5c, 0x64, 0x2b, 0x28, 0x5c, 0x5c, 0x2e, 0x5c, 0x5c, 0x64, 0x2b, 0x29, 0x3f, 0x5c, 0x5c, 0x73,
	0x3f, 0x28, 0x4b, 0x69, 0x7c, 0x4d, 0x69, 0x7c, 0x47, 0x69, 0x7c, 0x54, 0x69, 0x7c, 0x50, 0x69,
	0x7c, 0x45, 0x69, 0x7c, 0x4b, 0x7c, 0x4d, 0x7c, 0x47, 0x7c, 0x54, 0x7c, 0x50, 0x7c, 0x45, 0x29,
	0x24, 0x27, 0x29, 0x20, 0x26, 0x26, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69, 0x73,
	0x29, 0x20, 0x3e, 0x20, 0x30, 0x8a, 0xa6, 0x1d, 0x03, 0x31, 0x47, 0x69, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xee, 0x02, 0x0a, 0x21, 0x4b, 0x61, 0x66, 0x6b, 0x61,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5a, 0x6f, 0x6f, 0x6b, 0x65, 0x65,
	0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x08,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x05,
	0x92, 0xa6, 0x1d, 0x01, 0x31, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12,
	0x5b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0xc8, 0x01, 0x0a,
	0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0xaa, 0x01, 0xba, 0x48, 0x9f, 0x01, 0xba, 0x01, 0x9b, 0x01, 0x0a, 0x26, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x2e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x1a, 0x44, 0x69, 0x73, 0x6b, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x1a,
	0x55, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e,
	0x5c, 0x5c, 0x64, 0x2b, 0x28, 0x5c, 0x5c, 0x2e, 0x5c, 0x5c, 0x64, 0x2b, 0x29, 0x3f, 0x5c, 0x5c,
	0x73, 0x3f, 0x28, 0x4b, 0x69, 0x7c, 0x4d, 0x69, 0x7c, 0x47, 0x69, 0x7c, 0x54, 0x69, 0x7c, 0x50,
	0x69, 0x7c, 0x45, 0x69, 0x7c, 0x4b, 0x7c, 0x4d, 0x7c, 0x47, 0x7c, 0x54, 0x7c, 0x50, 0x7c, 0x45,
	0x29, 0x24, 0x27, 0x29, 0x20, 0x26, 0x26, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69,
	0x73, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x8a, 0xa6, 0x1d, 0x03, 0x31, 0x47, 0x69, 0x52, 0x08, 0x64,
	0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x26, 0x4b, 0x61, 0x66, 0x6b,
	0x61, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x21, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x05, 0x92, 0xa6, 0x1d, 0x01, 0x31, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x12, 0x5b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x22, 0xb0, 0x08, 0x0a, 0x0a, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x12, 0xdf, 0x03, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0xca, 0x03, 0xba, 0x48, 0xc6, 0x03, 0xba, 0x01, 0x5a, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x1a, 0x1f, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x28, 0x27, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x2e, 0x2a,
	0x24, 0x27, 0x29, 0xba, 0x01, 0x70, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3f, 0x4f, 0x6e, 0x6c, 0x79, 0x20, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x28, 0x27, 0x2e, 0x27, 0x2c, 0x20,
	0x27, 0x5f, 0x27, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x27, 0x2d, 0x27, 0x29, 0x20, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x1a, 0x21, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x28, 0x27, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2e, 0x5f,
	0x2d, 0x5d, 0x2b, 0x24, 0x27, 0x29, 0xba, 0x01, 0x39, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x27, 0x2e, 0x2e, 0x27, 0x1a, 0x14, 0x21, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x28, 0x27, 0x2e, 0x2e,
	0x27, 0x29, 0xba, 0x01, 0x53, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x41, 0x53, 0x43, 0x49, 0x49, 0x20, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x1e, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x5c, 0x78, 0x30, 0x30, 0x2d, 0x5c,
	0x78, 0x37, 0x46, 0x5d, 0x2b, 0x24, 0x27, 0x29, 0xba, 0x01, 0x57, 0x0a, 0x0a, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20,
	0x65, 0x6e, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x1a, 0x1e, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x28, 0x27, 0x2e, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x24,
	0x27, 0x29, 0xc8, 0x01, 0x01, 0x72, 0x05, 0x10, 0x01, 0x18, 0xf9, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x05, 0x8a, 0xa6, 0x1d, 0x01, 0x31, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x08, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x05, 0x8a, 0xa6, 0x1d,
	0x01, 0x31, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0xba, 0x03, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0xd1, 0x02,
	0x9a, 0xa6, 0x1d, 0x18, 0x0a, 0x0e, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x9a, 0xa6, 0x1d, 0x1f,
	0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x6d, 0x73, 0x12, 0x08, 0x38, 0x36, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x9a,
	0xa6, 0x1d, 0x1c, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x07, 0x32, 0x30, 0x39, 0x37, 0x31, 0x36, 0x34, 0x9a,
	0xa6, 0x1d, 0x3a, 0x0a, 0x23, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x6d, 0x61, 0x78, 0x2e, 0x6d, 0x73, 0x12, 0x13, 0x39, 0x32, 0x32, 0x33, 0x33, 0x37,
	0x32, 0x30, 0x33, 0x36, 0x38, 0x35, 0x34, 0x37, 0x37, 0x35, 0x38, 0x30, 0x37, 0x9a, 0xa6, 0x1d,
	0x24, 0x0a, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x9a, 0xa6, 0x1d, 0x18, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x2e, 0x69,
	0x6e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x01,
	0x31, 0x9a, 0xa6, 0x1d, 0x15, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x02, 0x2d, 0x31, 0x9a, 0xa6, 0x1d, 0x19, 0x0a, 0x0c,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x73, 0x12, 0x09, 0x36, 0x30,
	0x34, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x9a, 0xa6, 0x1d, 0x1b, 0x0a, 0x0d, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x0a, 0x31, 0x30, 0x37, 0x33,
	0x37, 0x34, 0x31, 0x38, 0x32, 0x34, 0x9a, 0xa6, 0x1d, 0x17, 0x0a, 0x0a, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x6d, 0x73, 0x12, 0x09, 0x36, 0x30, 0x34, 0x38, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0xc3, 0x03, 0x0a, 0x3a, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x42, 0x09, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x7b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x6b, 0x61, 0x66, 0x6b,
	0x61, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x05,
	0x50, 0x50, 0x50, 0x4b, 0x4b, 0xaa, 0x02, 0x36, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x4b, 0x61, 0x66, 0x6b,
	0x61, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x36, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x5c, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x42, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5c, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5c, 0x4b, 0x61,
	0x66, 0x6b, 0x61, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x3b, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a,
	0x3a, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3a, 0x3a, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x3a, 0x3a, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_rawDescData = file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_rawDesc
)

func file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_rawDescData)
	})
	return file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_rawDescData
}

var file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_goTypes = []any{
	(*KafkaKubernetesSpec)(nil),                    // 0: project.planton.provider.kubernetes.kafkakubernetes.v1.KafkaKubernetesSpec
	(*KafkaKubernetesBrokerContainer)(nil),         // 1: project.planton.provider.kubernetes.kafkakubernetes.v1.KafkaKubernetesBrokerContainer
	(*KafkaKubernetesZookeeperContainer)(nil),      // 2: project.planton.provider.kubernetes.kafkakubernetes.v1.KafkaKubernetesZookeeperContainer
	(*KafkaKubernetesSchemaRegistryContainer)(nil), // 3: project.planton.provider.kubernetes.kafkakubernetes.v1.KafkaKubernetesSchemaRegistryContainer
	(*KafkaTopic)(nil),                             // 4: project.planton.provider.kubernetes.kafkakubernetes.v1.KafkaTopic
	nil,                                            // 5: project.planton.provider.kubernetes.kafkakubernetes.v1.KafkaTopic.ConfigEntry
	(*kubernetes.IngressSpec)(nil),                 // 6: project.planton.shared.kubernetes.IngressSpec
	(*kubernetes.ContainerResources)(nil),          // 7: project.planton.shared.kubernetes.ContainerResources
}
var file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_depIdxs = []int32{
	4, // 0: project.planton.provider.kubernetes.kafkakubernetes.v1.KafkaKubernetesSpec.kafka_topics:type_name -> project.planton.provider.kubernetes.kafkakubernetes.v1.KafkaTopic
	1, // 1: project.planton.provider.kubernetes.kafkakubernetes.v1.KafkaKubernetesSpec.broker_container:type_name -> project.planton.provider.kubernetes.kafkakubernetes.v1.KafkaKubernetesBrokerContainer
	2, // 2: project.planton.provider.kubernetes.kafkakubernetes.v1.KafkaKubernetesSpec.zookeeper_container:type_name -> project.planton.provider.kubernetes.kafkakubernetes.v1.KafkaKubernetesZookeeperContainer
	3, // 3: project.planton.provider.kubernetes.kafkakubernetes.v1.KafkaKubernetesSpec.schema_registry_container:type_name -> project.planton.provider.kubernetes.kafkakubernetes.v1.KafkaKubernetesSchemaRegistryContainer
	6, // 4: project.planton.provider.kubernetes.kafkakubernetes.v1.KafkaKubernetesSpec.ingress:type_name -> project.planton.shared.kubernetes.IngressSpec
	7, // 5: project.planton.provider.kubernetes.kafkakubernetes.v1.KafkaKubernetesBrokerContainer.resources:type_name -> project.planton.shared.kubernetes.ContainerResources
	7, // 6: project.planton.provider.kubernetes.kafkakubernetes.v1.KafkaKubernetesZookeeperContainer.resources:type_name -> project.planton.shared.kubernetes.ContainerResources
	7, // 7: project.planton.provider.kubernetes.kafkakubernetes.v1.KafkaKubernetesSchemaRegistryContainer.resources:type_name -> project.planton.shared.kubernetes.ContainerResources
	5, // 8: project.planton.provider.kubernetes.kafkakubernetes.v1.KafkaTopic.config:type_name -> project.planton.provider.kubernetes.kafkakubernetes.v1.KafkaTopic.ConfigEntry
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_init() }
func file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_init() {
	if File_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*KafkaKubernetesSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*KafkaKubernetesBrokerContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*KafkaKubernetesZookeeperContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*KafkaKubernetesSchemaRegistryContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*KafkaTopic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto = out.File
	file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_rawDesc = nil
	file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_goTypes = nil
	file_project_planton_provider_kubernetes_kafkakubernetes_v1_spec_proto_depIdxs = nil
}
