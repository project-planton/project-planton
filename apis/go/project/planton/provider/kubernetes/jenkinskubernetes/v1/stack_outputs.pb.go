// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/provider/kubernetes/jenkinskubernetes/v1/stack_outputs.proto

package jenkinskubernetesv1

import (
	kubernetes "github.com/project-planton/project-planton/apis/go/project/planton/shared/kubernetes"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// jenkins-kubernetes stack outputs.
type JenkinsKubernetesStackOutputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// kubernetes namespace in which jenkins-kubernetes is created.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// kubernetes service name for jenkins-kubernetes.
	// ex: main-jenkins-kubernetes
	// in the above example, "main" is the name of the jenkins-kubernetes
	Service string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	// command to setup port-forwarding to open jenkins-kubernetes from developers laptop.
	// this might come handy when jenkins-kubernetes ingress is disabled for security reasons.
	// this is rendered by combining jenkins_kubernetes_kubernetes_service and kubernetes_namespace
	// ex: kubectl port-forward svc/jenkins_kubernetes_kubernetes_service -n kubernetes_namespace 8080:8080
	// running the command from this attribute makes it possible to access jenkins-kubernetes using http://localhost:8080
	PortForwardCommand string `protobuf:"bytes,3,opt,name=port_forward_command,json=portForwardCommand,proto3" json:"port_forward_command,omitempty"`
	// kubernetes endpoint to connect to jenkins-kubernetes from the web browser.
	// ex: main-jenkins-kubernetes.namespace.svc.cluster.local:8080
	KubeEndpoint string `protobuf:"bytes,4,opt,name=kube_endpoint,json=kubeEndpoint,proto3" json:"kube_endpoint,omitempty"`
	// public endpoint to open jenkins-kubernetes from clients outside kubernetes.
	// ex: https://jnk-planton-pcs-dev-main.data.dev.planton.live:8080
	ExternalHostname string `protobuf:"bytes,5,opt,name=external_hostname,json=externalHostname,proto3" json:"external_hostname,omitempty"`
	// internal postgres-kubernetes hostname.
	// ex: https://jnk-planton-pcs-dev-main.data-internal.dev.planton.live:8080
	InternalHostname string `protobuf:"bytes,6,opt,name=internal_hostname,json=internalHostname,proto3" json:"internal_hostname,omitempty"`
	// jenkins username
	Username string `protobuf:"bytes,7,opt,name=username,proto3" json:"username,omitempty"`
	// kubernetes secret key for the password.
	PasswordSecret *kubernetes.KubernetesSecretKey `protobuf:"bytes,8,opt,name=password_secret,json=passwordSecret,proto3" json:"password_secret,omitempty"`
}

func (x *JenkinsKubernetesStackOutputs) Reset() {
	*x = JenkinsKubernetesStackOutputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_kubernetes_jenkinskubernetes_v1_stack_outputs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JenkinsKubernetesStackOutputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JenkinsKubernetesStackOutputs) ProtoMessage() {}

func (x *JenkinsKubernetesStackOutputs) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_jenkinskubernetes_v1_stack_outputs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JenkinsKubernetesStackOutputs.ProtoReflect.Descriptor instead.
func (*JenkinsKubernetesStackOutputs) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_jenkinskubernetes_v1_stack_outputs_proto_rawDescGZIP(), []int{0}
}

func (x *JenkinsKubernetesStackOutputs) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *JenkinsKubernetesStackOutputs) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *JenkinsKubernetesStackOutputs) GetPortForwardCommand() string {
	if x != nil {
		return x.PortForwardCommand
	}
	return ""
}

func (x *JenkinsKubernetesStackOutputs) GetKubeEndpoint() string {
	if x != nil {
		return x.KubeEndpoint
	}
	return ""
}

func (x *JenkinsKubernetesStackOutputs) GetExternalHostname() string {
	if x != nil {
		return x.ExternalHostname
	}
	return ""
}

func (x *JenkinsKubernetesStackOutputs) GetInternalHostname() string {
	if x != nil {
		return x.InternalHostname
	}
	return ""
}

func (x *JenkinsKubernetesStackOutputs) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *JenkinsKubernetesStackOutputs) GetPasswordSecret() *kubernetes.KubernetesSecretKey {
	if x != nil {
		return x.PasswordSecret
	}
	return nil
}

var File_project_planton_provider_kubernetes_jenkinskubernetes_v1_stack_outputs_proto protoreflect.FileDescriptor

var file_project_planton_provider_kubernetes_jenkinskubernetes_v1_stack_outputs_proto_rawDesc = []byte{
	0x0a, 0x4c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x6a, 0x65, 0x6e, 0x6b, 0x69, 0x6e, 0x73, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x38,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x2e, 0x6a, 0x65, 0x6e, 0x6b, 0x69, 0x6e, 0x73, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x32, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x03, 0x0a,
	0x1d, 0x4a, 0x65, 0x6e, 0x6b, 0x69, 0x6e, 0x73, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x75, 0x62, 0x65,
	0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6b, 0x75, 0x62, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2b, 0x0a,
	0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x48,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x42, 0xd9, 0x03, 0x0a, 0x3c, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x2e, 0x6a, 0x65, 0x6e, 0x6b, 0x69, 0x6e, 0x73, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x11, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x7f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x2f, 0x6a, 0x65, 0x6e, 0x6b, 0x69, 0x6e, 0x73, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x6a, 0x65, 0x6e, 0x6b, 0x69, 0x6e, 0x73, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x05, 0x50, 0x50,
	0x50, 0x4b, 0x4a, 0xaa, 0x02, 0x38, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x4b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x4a, 0x65, 0x6e, 0x6b, 0x69, 0x6e,
	0x73, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x38, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x5c, 0x4a, 0x65, 0x6e, 0x6b, 0x69, 0x6e, 0x73, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x44, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5c, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5c,
	0x4a, 0x65, 0x6e, 0x6b, 0x69, 0x6e, 0x73, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x3d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3a, 0x3a, 0x4b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x3a, 0x3a, 0x4a, 0x65, 0x6e, 0x6b, 0x69,
	0x6e, 0x73, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_project_planton_provider_kubernetes_jenkinskubernetes_v1_stack_outputs_proto_rawDescOnce sync.Once
	file_project_planton_provider_kubernetes_jenkinskubernetes_v1_stack_outputs_proto_rawDescData = file_project_planton_provider_kubernetes_jenkinskubernetes_v1_stack_outputs_proto_rawDesc
)

func file_project_planton_provider_kubernetes_jenkinskubernetes_v1_stack_outputs_proto_rawDescGZIP() []byte {
	file_project_planton_provider_kubernetes_jenkinskubernetes_v1_stack_outputs_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_kubernetes_jenkinskubernetes_v1_stack_outputs_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_provider_kubernetes_jenkinskubernetes_v1_stack_outputs_proto_rawDescData)
	})
	return file_project_planton_provider_kubernetes_jenkinskubernetes_v1_stack_outputs_proto_rawDescData
}

var file_project_planton_provider_kubernetes_jenkinskubernetes_v1_stack_outputs_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_provider_kubernetes_jenkinskubernetes_v1_stack_outputs_proto_goTypes = []any{
	(*JenkinsKubernetesStackOutputs)(nil),  // 0: project.planton.provider.kubernetes.jenkinskubernetes.v1.JenkinsKubernetesStackOutputs
	(*kubernetes.KubernetesSecretKey)(nil), // 1: project.planton.shared.kubernetes.KubernetesSecretKey
}
var file_project_planton_provider_kubernetes_jenkinskubernetes_v1_stack_outputs_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.kubernetes.jenkinskubernetes.v1.JenkinsKubernetesStackOutputs.password_secret:type_name -> project.planton.shared.kubernetes.KubernetesSecretKey
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_project_planton_provider_kubernetes_jenkinskubernetes_v1_stack_outputs_proto_init() }
func file_project_planton_provider_kubernetes_jenkinskubernetes_v1_stack_outputs_proto_init() {
	if File_project_planton_provider_kubernetes_jenkinskubernetes_v1_stack_outputs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_provider_kubernetes_jenkinskubernetes_v1_stack_outputs_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*JenkinsKubernetesStackOutputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_provider_kubernetes_jenkinskubernetes_v1_stack_outputs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_kubernetes_jenkinskubernetes_v1_stack_outputs_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_kubernetes_jenkinskubernetes_v1_stack_outputs_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_kubernetes_jenkinskubernetes_v1_stack_outputs_proto_msgTypes,
	}.Build()
	File_project_planton_provider_kubernetes_jenkinskubernetes_v1_stack_outputs_proto = out.File
	file_project_planton_provider_kubernetes_jenkinskubernetes_v1_stack_outputs_proto_rawDesc = nil
	file_project_planton_provider_kubernetes_jenkinskubernetes_v1_stack_outputs_proto_goTypes = nil
	file_project_planton_provider_kubernetes_jenkinskubernetes_v1_stack_outputs_proto_depIdxs = nil
}
