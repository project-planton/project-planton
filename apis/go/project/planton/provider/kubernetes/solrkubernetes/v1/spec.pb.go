// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/provider/kubernetes/solrkubernetes/v1/spec.proto

package solrkubernetesv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	kubernetes "github.com/project-planton/project-planton/apis/go/project/planton/shared/kubernetes"
	_ "github.com/project-planton/project-planton/apis/go/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// **SolrKubernetesSpec** defines the configuration for deploying Apache Solr on a Kubernetes cluster.
// This message includes specifications for the Solr container, Zookeeper container, and ingress settings.
// By configuring these parameters, you can set up a Solr deployment tailored to your application's needs,
// including resource allocation, data persistence, and external access through ingress.
type SolrKubernetesSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The specifications for the Solr container deployment.
	SolrContainer *SolrKubernetesSolrContainer `protobuf:"bytes,1,opt,name=solr_container,json=solrContainer,proto3" json:"solr_container,omitempty"`
	// The Solr-specific configuration options.
	Config *SolrKubernetesSolrConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	// The specifications for the Zookeeper container deployment.
	ZookeeperContainer *SolrKubernetesZookeeperContainer `protobuf:"bytes,3,opt,name=zookeeper_container,json=zookeeperContainer,proto3" json:"zookeeper_container,omitempty"`
	// The ingress configuration for the Solr deployment.
	Ingress *kubernetes.IngressSpec `protobuf:"bytes,4,opt,name=ingress,proto3" json:"ingress,omitempty"`
}

func (x *SolrKubernetesSpec) Reset() {
	*x = SolrKubernetesSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolrKubernetesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolrKubernetesSpec) ProtoMessage() {}

func (x *SolrKubernetesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolrKubernetesSpec.ProtoReflect.Descriptor instead.
func (*SolrKubernetesSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *SolrKubernetesSpec) GetSolrContainer() *SolrKubernetesSolrContainer {
	if x != nil {
		return x.SolrContainer
	}
	return nil
}

func (x *SolrKubernetesSpec) GetConfig() *SolrKubernetesSolrConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *SolrKubernetesSpec) GetZookeeperContainer() *SolrKubernetesZookeeperContainer {
	if x != nil {
		return x.ZookeeperContainer
	}
	return nil
}

func (x *SolrKubernetesSpec) GetIngress() *kubernetes.IngressSpec {
	if x != nil {
		return x.Ingress
	}
	return nil
}

// *
// **SolrKubernetesSolrContainer** specifies the configuration for the Solr container.
// It includes settings such as the number of replicas, container image, resource allocations,
// disk size for data persistence, and Solr-specific configurations.
// Proper configuration ensures optimal performance and data reliability for your Solr deployment.
type SolrKubernetesSolrContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of Solr pods in the Solr Kubernetes deployment.
	Replicas int32 `protobuf:"varint,1,opt,name=replicas,proto3" json:"replicas,omitempty"`
	// The CPU and memory resources allocated to the Solr container.
	Resources *kubernetes.ContainerResources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// The size of the persistent volume attached to each Solr pod (e.g., "1Gi").
	DiskSize string `protobuf:"bytes,3,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	// The container image for the Solr deployment.
	// Example repository: "solr", example tag: "8.7.0".
	Image *kubernetes.ContainerImage `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *SolrKubernetesSolrContainer) Reset() {
	*x = SolrKubernetesSolrContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolrKubernetesSolrContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolrKubernetesSolrContainer) ProtoMessage() {}

func (x *SolrKubernetesSolrContainer) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolrKubernetesSolrContainer.ProtoReflect.Descriptor instead.
func (*SolrKubernetesSolrContainer) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *SolrKubernetesSolrContainer) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *SolrKubernetesSolrContainer) GetResources() *kubernetes.ContainerResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *SolrKubernetesSolrContainer) GetDiskSize() string {
	if x != nil {
		return x.DiskSize
	}
	return ""
}

func (x *SolrKubernetesSolrContainer) GetImage() *kubernetes.ContainerImage {
	if x != nil {
		return x.Image
	}
	return nil
}

// *
// **SolrKubernetesSolrConfig** specifies the configuration settings for Solr.
// It includes JVM memory settings, custom Solr options, and garbage collection tuning parameters.
type SolrKubernetesSolrConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// JVM memory settings for Solr.
	JavaMem string `protobuf:"bytes,1,opt,name=java_mem,json=javaMem,proto3" json:"java_mem,omitempty"`
	// Custom Solr options (e.g., "-Dsolr.autoSoftCommit.maxTime=10000").
	Opts string `protobuf:"bytes,2,opt,name=opts,proto3" json:"opts,omitempty"`
	// Solr garbage collection tuning configuration (e.g., "-XX:SurvivorRatio=4 -XX:TargetSurvivorRatio=90 -XX:MaxTenuringThreshold=8").
	GarbageCollectionTuning string `protobuf:"bytes,3,opt,name=garbage_collection_tuning,json=garbageCollectionTuning,proto3" json:"garbage_collection_tuning,omitempty"`
}

func (x *SolrKubernetesSolrConfig) Reset() {
	*x = SolrKubernetesSolrConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolrKubernetesSolrConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolrKubernetesSolrConfig) ProtoMessage() {}

func (x *SolrKubernetesSolrConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolrKubernetesSolrConfig.ProtoReflect.Descriptor instead.
func (*SolrKubernetesSolrConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *SolrKubernetesSolrConfig) GetJavaMem() string {
	if x != nil {
		return x.JavaMem
	}
	return ""
}

func (x *SolrKubernetesSolrConfig) GetOpts() string {
	if x != nil {
		return x.Opts
	}
	return ""
}

func (x *SolrKubernetesSolrConfig) GetGarbageCollectionTuning() string {
	if x != nil {
		return x.GarbageCollectionTuning
	}
	return ""
}

// *
// **SolrKubernetesZookeeperContainer** specifies the configuration for the Zookeeper container used by Solr.
// It includes settings such as the number of replicas, resource allocations, and disk size for data persistence.
// Proper configuration ensures high availability and reliability for your Solr cluster.
type SolrKubernetesZookeeperContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of Zookeeper pods in the Zookeeper cluster.
	Replicas int32 `protobuf:"varint,1,opt,name=replicas,proto3" json:"replicas,omitempty"`
	// The CPU and memory resources allocated to the Zookeeper container.
	Resources *kubernetes.ContainerResources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// The size of the persistent volume attached to each Zookeeper pod (e.g., "1Gi").
	DiskSize string `protobuf:"bytes,3,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
}

func (x *SolrKubernetesZookeeperContainer) Reset() {
	*x = SolrKubernetesZookeeperContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolrKubernetesZookeeperContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolrKubernetesZookeeperContainer) ProtoMessage() {}

func (x *SolrKubernetesZookeeperContainer) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolrKubernetesZookeeperContainer.ProtoReflect.Descriptor instead.
func (*SolrKubernetesZookeeperContainer) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_rawDescGZIP(), []int{3}
}

func (x *SolrKubernetesZookeeperContainer) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *SolrKubernetesZookeeperContainer) GetResources() *kubernetes.ContainerResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *SolrKubernetesZookeeperContainer) GetDiskSize() string {
	if x != nil {
		return x.DiskSize
	}
	return ""
}

var file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*SolrKubernetesSolrContainer)(nil),
		Field:         540001,
		Name:          "project.planton.provider.kubernetes.solrkubernetes.v1.default_solr_container",
		Tag:           "bytes,540001,opt,name=default_solr_container",
		Filename:      "project/planton/provider/kubernetes/solrkubernetes/v1/spec.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*SolrKubernetesSolrContainer)(nil),
		Field:         540002,
		Name:          "project.planton.provider.kubernetes.solrkubernetes.v1.default_zookeeper_container",
		Tag:           "bytes,540002,opt,name=default_zookeeper_container",
		Filename:      "project/planton/provider/kubernetes/solrkubernetes/v1/spec.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional project.planton.provider.kubernetes.solrkubernetes.v1.SolrKubernetesSolrContainer default_solr_container = 540001;
	E_DefaultSolrContainer = &file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_extTypes[0]
	// optional project.planton.provider.kubernetes.solrkubernetes.v1.SolrKubernetesSolrContainer default_zookeeper_container = 540002;
	E_DefaultZookeeperContainer = &file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_extTypes[1]
)

var File_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto protoreflect.FileDescriptor

var file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_rawDesc = []byte{
	0x0a, 0x40, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x73, 0x6f, 0x6c, 0x72, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x35, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x73, 0x6f, 0x6c, 0x72, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb5, 0x04, 0x0a, 0x12,
	0x53, 0x6f, 0x6c, 0x72, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x70,
	0x65, 0x63, 0x12, 0xb4, 0x01, 0x0a, 0x0e, 0x73, 0x6f, 0x6c, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x2e, 0x73, 0x6f, 0x6c, 0x72, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x72, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x53, 0x6f, 0x6c, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42,
	0x39, 0x8a, 0xd6, 0x87, 0x02, 0x34, 0x08, 0x01, 0x12, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x31, 0x30,
	0x30, 0x30, 0x6d, 0x12, 0x03, 0x31, 0x47, 0x69, 0x12, 0x0c, 0x0a, 0x03, 0x35, 0x30, 0x6d, 0x12,
	0x05, 0x31, 0x30, 0x30, 0x4d, 0x69, 0x1a, 0x03, 0x31, 0x47, 0x69, 0x22, 0x0d, 0x0a, 0x04, 0x73,
	0x6f, 0x6c, 0x72, 0x12, 0x05, 0x38, 0x2e, 0x37, 0x2e, 0x30, 0x52, 0x0d, 0x73, 0x6f, 0x6c, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e,
	0x73, 0x6f, 0x6c, 0x72, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x72, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x53, 0x6f, 0x6c, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0xb4, 0x01, 0x0a, 0x13, 0x7a, 0x6f, 0x6f, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x57, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x73, 0x6f, 0x6c, 0x72, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x72, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5a, 0x6f, 0x6f, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x2a, 0x92, 0xd6, 0x87, 0x02, 0x25,
	0x08, 0x01, 0x12, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x31, 0x30, 0x30, 0x30, 0x6d, 0x12, 0x03, 0x31,
	0x47, 0x69, 0x12, 0x0c, 0x0a, 0x03, 0x35, 0x30, 0x6d, 0x12, 0x05, 0x31, 0x30, 0x30, 0x4d, 0x69,
	0x1a, 0x03, 0x31, 0x47, 0x69, 0x52, 0x12, 0x7a, 0x6f, 0x6f, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x07, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x96, 0x03, 0x0a, 0x1b, 0x53, 0x6f, 0x6c, 0x72, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x6f, 0x6c, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12,
	0x53, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0xbc, 0x01, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x9e, 0x01, 0xba, 0x48, 0x9a, 0x01, 0xba,
	0x01, 0x96, 0x01, 0x0a, 0x21, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x2e, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x44, 0x69, 0x73, 0x6b, 0x20, 0x73, 0x69, 0x7a,
	0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x1a, 0x55, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x28, 0x27, 0x5e, 0x5c, 0x5c, 0x64, 0x2b, 0x28, 0x5c, 0x5c, 0x2e, 0x5c, 0x5c, 0x64, 0x2b, 0x29,
	0x3f, 0x5c, 0x5c, 0x73, 0x3f, 0x28, 0x4b, 0x69, 0x7c, 0x4d, 0x69, 0x7c, 0x47, 0x69, 0x7c, 0x54,
	0x69, 0x7c, 0x50, 0x69, 0x7c, 0x45, 0x69, 0x7c, 0x4b, 0x7c, 0x4d, 0x7c, 0x47, 0x7c, 0x54, 0x7c,
	0x50, 0x7c, 0x45, 0x29, 0x24, 0x27, 0x29, 0x20, 0x26, 0x26, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x28,
	0x74, 0x68, 0x69, 0x73, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x85, 0x01, 0x0a,
	0x18, 0x53, 0x6f, 0x6c, 0x72, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53,
	0x6f, 0x6c, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x61, 0x76,
	0x61, 0x5f, 0x6d, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x61, 0x76,
	0x61, 0x4d, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6f, 0x70, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x67, 0x61, 0x72, 0x62,
	0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x75, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x67, 0x61, 0x72,
	0x62, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x75,
	0x6e, 0x69, 0x6e, 0x67, 0x22, 0xd2, 0x02, 0x0a, 0x20, 0x53, 0x6f, 0x6c, 0x72, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5a, 0x6f, 0x6f, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x53, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0xbc, 0x01, 0x0a, 0x09, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x9e,
	0x01, 0xba, 0x48, 0x9a, 0x01, 0xba, 0x01, 0x96, 0x01, 0x0a, 0x21, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x44, 0x69,
	0x73, 0x6b, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69, 0x73,
	0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x1a, 0x55, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5c, 0x5c, 0x64, 0x2b, 0x28, 0x5c, 0x5c,
	0x2e, 0x5c, 0x5c, 0x64, 0x2b, 0x29, 0x3f, 0x5c, 0x5c, 0x73, 0x3f, 0x28, 0x4b, 0x69, 0x7c, 0x4d,
	0x69, 0x7c, 0x47, 0x69, 0x7c, 0x54, 0x69, 0x7c, 0x50, 0x69, 0x7c, 0x45, 0x69, 0x7c, 0x4b, 0x7c,
	0x4d, 0x7c, 0x47, 0x7c, 0x54, 0x7c, 0x50, 0x7c, 0x45, 0x29, 0x24, 0x27, 0x29, 0x20, 0x26, 0x26,
	0x20, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69, 0x73, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x3a, 0xa9, 0x01, 0x0a, 0x16, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x6f, 0x6c, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xe1, 0xfa, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x2e, 0x73, 0x6f, 0x6c, 0x72, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x72, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x53, 0x6f, 0x6c, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52,
	0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x6f, 0x6c, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x3a, 0xb3, 0x01, 0x0a, 0x1b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x7a, 0x6f, 0x6f, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe2, 0xfa, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x2e, 0x73, 0x6f, 0x6c, 0x72, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x6c, 0x72, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x53, 0x6f, 0x6c, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x19, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5a, 0x6f, 0x6f, 0x6b, 0x65, 0x65, 0x70,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0xbc, 0x03, 0x0a, 0x39,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x73, 0x6f, 0x6c, 0x72, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x53, 0x70, 0x65, 0x63, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x79, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x73,
	0x6f, 0x6c, 0x72, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31,
	0x3b, 0x73, 0x6f, 0x6c, 0x72, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x76,
	0x31, 0xa2, 0x02, 0x05, 0x50, 0x50, 0x50, 0x4b, 0x53, 0xaa, 0x02, 0x35, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e,
	0x53, 0x6f, 0x6c, 0x72, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x35, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5c, 0x53, 0x6f, 0x6c, 0x72, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x41, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5c, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5c,
	0x53, 0x6f, 0x6c, 0x72, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x3a,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3a, 0x3a, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x3a, 0x3a, 0x53, 0x6f, 0x6c, 0x72, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_rawDescData = file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_rawDesc
)

func file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_rawDescData)
	})
	return file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_rawDescData
}

var file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_goTypes = []any{
	(*SolrKubernetesSpec)(nil),               // 0: project.planton.provider.kubernetes.solrkubernetes.v1.SolrKubernetesSpec
	(*SolrKubernetesSolrContainer)(nil),      // 1: project.planton.provider.kubernetes.solrkubernetes.v1.SolrKubernetesSolrContainer
	(*SolrKubernetesSolrConfig)(nil),         // 2: project.planton.provider.kubernetes.solrkubernetes.v1.SolrKubernetesSolrConfig
	(*SolrKubernetesZookeeperContainer)(nil), // 3: project.planton.provider.kubernetes.solrkubernetes.v1.SolrKubernetesZookeeperContainer
	(*kubernetes.IngressSpec)(nil),           // 4: project.planton.shared.kubernetes.IngressSpec
	(*kubernetes.ContainerResources)(nil),    // 5: project.planton.shared.kubernetes.ContainerResources
	(*kubernetes.ContainerImage)(nil),        // 6: project.planton.shared.kubernetes.ContainerImage
	(*descriptorpb.FieldOptions)(nil),        // 7: google.protobuf.FieldOptions
}
var file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_depIdxs = []int32{
	1,  // 0: project.planton.provider.kubernetes.solrkubernetes.v1.SolrKubernetesSpec.solr_container:type_name -> project.planton.provider.kubernetes.solrkubernetes.v1.SolrKubernetesSolrContainer
	2,  // 1: project.planton.provider.kubernetes.solrkubernetes.v1.SolrKubernetesSpec.config:type_name -> project.planton.provider.kubernetes.solrkubernetes.v1.SolrKubernetesSolrConfig
	3,  // 2: project.planton.provider.kubernetes.solrkubernetes.v1.SolrKubernetesSpec.zookeeper_container:type_name -> project.planton.provider.kubernetes.solrkubernetes.v1.SolrKubernetesZookeeperContainer
	4,  // 3: project.planton.provider.kubernetes.solrkubernetes.v1.SolrKubernetesSpec.ingress:type_name -> project.planton.shared.kubernetes.IngressSpec
	5,  // 4: project.planton.provider.kubernetes.solrkubernetes.v1.SolrKubernetesSolrContainer.resources:type_name -> project.planton.shared.kubernetes.ContainerResources
	6,  // 5: project.planton.provider.kubernetes.solrkubernetes.v1.SolrKubernetesSolrContainer.image:type_name -> project.planton.shared.kubernetes.ContainerImage
	5,  // 6: project.planton.provider.kubernetes.solrkubernetes.v1.SolrKubernetesZookeeperContainer.resources:type_name -> project.planton.shared.kubernetes.ContainerResources
	7,  // 7: project.planton.provider.kubernetes.solrkubernetes.v1.default_solr_container:extendee -> google.protobuf.FieldOptions
	7,  // 8: project.planton.provider.kubernetes.solrkubernetes.v1.default_zookeeper_container:extendee -> google.protobuf.FieldOptions
	1,  // 9: project.planton.provider.kubernetes.solrkubernetes.v1.default_solr_container:type_name -> project.planton.provider.kubernetes.solrkubernetes.v1.SolrKubernetesSolrContainer
	1,  // 10: project.planton.provider.kubernetes.solrkubernetes.v1.default_zookeeper_container:type_name -> project.planton.provider.kubernetes.solrkubernetes.v1.SolrKubernetesSolrContainer
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	9,  // [9:11] is the sub-list for extension type_name
	7,  // [7:9] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_init() }
func file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_init() {
	if File_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SolrKubernetesSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*SolrKubernetesSolrContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SolrKubernetesSolrConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SolrKubernetesZookeeperContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 2,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_msgTypes,
		ExtensionInfos:    file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_extTypes,
	}.Build()
	File_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto = out.File
	file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_rawDesc = nil
	file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_goTypes = nil
	file_project_planton_provider_kubernetes_solrkubernetes_v1_spec_proto_depIdxs = nil
}
