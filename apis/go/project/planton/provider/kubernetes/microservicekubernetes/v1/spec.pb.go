// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/provider/kubernetes/microservicekubernetes/v1/spec.proto

package microservicekubernetesv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	kubernetes "github.com/project-planton/project-planton/apis/go/project/planton/shared/kubernetes"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// **MicroserviceKubernetesSpec** defines the configuration for deploying a microservice on a Kubernetes cluster.
// This message includes specifications for the microservice version, container configurations, ingress settings,
// and availability options. By setting these parameters, you can manage how your microservice is deployed,
// scaled, and accessed within the Kubernetes environment.
type MicroserviceKubernetesSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version of the microservice being deployed.
	// This is usually either "main" (the default git branch name) or "review-<id>" where <id> is the merge request number.
	// It must be between 1 and 20 characters and can only contain lowercase letters, numbers, and hyphens.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// The container specifications for the microservice deployment.
	// This includes configurations for the main application container and any sidecar containers.
	Container *MicroserviceKubernetesContainer `protobuf:"bytes,3,opt,name=container,proto3" json:"container,omitempty"`
	// The ingress configuration for the microservice.
	// This defines how the microservice can be accessed externally.
	Ingress *kubernetes.IngressSpec `protobuf:"bytes,4,opt,name=ingress,proto3" json:"ingress,omitempty"`
	// The availability configuration for the microservice.
	// This includes settings for minimum replicas and autoscaling options.
	Availability *MicroserviceKubernetesAvailability `protobuf:"bytes,5,opt,name=availability,proto3" json:"availability,omitempty"`
}

func (x *MicroserviceKubernetesSpec) Reset() {
	*x = MicroserviceKubernetesSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MicroserviceKubernetesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MicroserviceKubernetesSpec) ProtoMessage() {}

func (x *MicroserviceKubernetesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MicroserviceKubernetesSpec.ProtoReflect.Descriptor instead.
func (*MicroserviceKubernetesSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *MicroserviceKubernetesSpec) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *MicroserviceKubernetesSpec) GetContainer() *MicroserviceKubernetesContainer {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *MicroserviceKubernetesSpec) GetIngress() *kubernetes.IngressSpec {
	if x != nil {
		return x.Ingress
	}
	return nil
}

func (x *MicroserviceKubernetesSpec) GetAvailability() *MicroserviceKubernetesAvailability {
	if x != nil {
		return x.Availability
	}
	return nil
}

// *
// **MicroserviceKubernetesContainer** specifies the container configuration for the microservice.
// It includes the main application container and any sidecar containers that need to run alongside it.
type MicroserviceKubernetesContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The main application container specifications.
	App *MicroserviceKubernetesContainerApp `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	// A list of sidecar containers to be deployed alongside the main application container.
	Sidecars []*kubernetes.Container `protobuf:"bytes,2,rep,name=sidecars,proto3" json:"sidecars,omitempty"`
}

func (x *MicroserviceKubernetesContainer) Reset() {
	*x = MicroserviceKubernetesContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MicroserviceKubernetesContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MicroserviceKubernetesContainer) ProtoMessage() {}

func (x *MicroserviceKubernetesContainer) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MicroserviceKubernetesContainer.ProtoReflect.Descriptor instead.
func (*MicroserviceKubernetesContainer) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *MicroserviceKubernetesContainer) GetApp() *MicroserviceKubernetesContainerApp {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *MicroserviceKubernetesContainer) GetSidecars() []*kubernetes.Container {
	if x != nil {
		return x.Sidecars
	}
	return nil
}

// *
// **MicroserviceKubernetesContainerApp** specifies the configuration for the main application container.
// It includes the container image, resource allocations, environment variables, and ports.
type MicroserviceKubernetesContainerApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// The container image to be used for the application.
	// This value is computed during creation but can be updated.
	// It is derived by combining the Docker repository of the artifact store configured for the environment and the code project path.
	// The `pull_secret_name` is the name of the image pull secret to be configured in the Kubernetes Deployment resource.
	// It is determined by looking up the `container_image_artifact_store_id` from the environment where the microservice is deployed.
	Image *kubernetes.ContainerImage `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// The CPU and memory resources allocated to the application container.
	Resources *kubernetes.ContainerResources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// *
	// The environment variables and secrets for the application container.
	Env *MicroserviceKubernetesContainerAppEnv `protobuf:"bytes,3,opt,name=env,proto3" json:"env,omitempty"`
	// *
	// A list of ports to be configured for the application container.
	Ports []*MicroserviceKubernetesContainerAppPort `protobuf:"bytes,4,rep,name=ports,proto3" json:"ports,omitempty"`
}

func (x *MicroserviceKubernetesContainerApp) Reset() {
	*x = MicroserviceKubernetesContainerApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MicroserviceKubernetesContainerApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MicroserviceKubernetesContainerApp) ProtoMessage() {}

func (x *MicroserviceKubernetesContainerApp) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MicroserviceKubernetesContainerApp.ProtoReflect.Descriptor instead.
func (*MicroserviceKubernetesContainerApp) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *MicroserviceKubernetesContainerApp) GetImage() *kubernetes.ContainerImage {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *MicroserviceKubernetesContainerApp) GetResources() *kubernetes.ContainerResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MicroserviceKubernetesContainerApp) GetEnv() *MicroserviceKubernetesContainerAppEnv {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *MicroserviceKubernetesContainerApp) GetPorts() []*MicroserviceKubernetesContainerAppPort {
	if x != nil {
		return x.Ports
	}
	return nil
}

// *
// **MicroserviceKubernetesContainerAppEnv** defines the environment variables and secrets for the application container.
type MicroserviceKubernetesContainerAppEnv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// A map of environment variable names to their values.
	Variables map[string]string `protobuf:"bytes,1,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// *
	// A map of secret names to their values.
	Secrets map[string]string `protobuf:"bytes,2,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MicroserviceKubernetesContainerAppEnv) Reset() {
	*x = MicroserviceKubernetesContainerAppEnv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MicroserviceKubernetesContainerAppEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MicroserviceKubernetesContainerAppEnv) ProtoMessage() {}

func (x *MicroserviceKubernetesContainerAppEnv) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MicroserviceKubernetesContainerAppEnv.ProtoReflect.Descriptor instead.
func (*MicroserviceKubernetesContainerAppEnv) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_rawDescGZIP(), []int{3}
}

func (x *MicroserviceKubernetesContainerAppEnv) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *MicroserviceKubernetesContainerAppEnv) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

// *
// **MicroserviceKubernetesContainerAppPort** specifies the port configuration for the application container.
// It includes details such as the port name, container port, network protocol, application protocol, and service port.
type MicroserviceKubernetesContainerAppPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the port (e.g., "http", "grpc").
	// The name must only contain lowercase alphanumeric characters and hyphens.
	// Port names must also start and end with an alphanumeric character.
	// For example, "123-abc" and "web" are valid, but "123_abc" and "-web" are not.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The port number on the container.
	ContainerPort int32 `protobuf:"varint,2,opt,name=container_port,json=containerPort,proto3" json:"container_port,omitempty"`
	// The network protocol used by the port (e.g., "TCP", "UDP", "SCTP").
	// Must be one of "TCP", "UDP", or "SCTP".
	NetworkProtocol string `protobuf:"bytes,3,opt,name=network_protocol,json=networkProtocol,proto3" json:"network_protocol,omitempty"`
	// The application protocol for the microservice (e.g., "http").
	// This field is used for setting up the name of the service port in Kubernetes.
	// It is used during microservice deployment and is relevant for deployment and stateful set pod managers.
	// Refer to: https://kubernetes.io/docs/concepts/services-networking/service/#application-protocol
	AppProtocol string `protobuf:"bytes,4,opt,name=app_protocol,json=appProtocol,proto3" json:"app_protocol,omitempty"`
	// The port number on the Kubernetes service.
	ServicePort int32 `protobuf:"varint,5,opt,name=service_port,json=servicePort,proto3" json:"service_port,omitempty"`
	// A flag indicating whether this port should be exposed via ingress.
	IsIngressPort bool `protobuf:"varint,6,opt,name=is_ingress_port,json=isIngressPort,proto3" json:"is_ingress_port,omitempty"`
}

func (x *MicroserviceKubernetesContainerAppPort) Reset() {
	*x = MicroserviceKubernetesContainerAppPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MicroserviceKubernetesContainerAppPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MicroserviceKubernetesContainerAppPort) ProtoMessage() {}

func (x *MicroserviceKubernetesContainerAppPort) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MicroserviceKubernetesContainerAppPort.ProtoReflect.Descriptor instead.
func (*MicroserviceKubernetesContainerAppPort) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_rawDescGZIP(), []int{4}
}

func (x *MicroserviceKubernetesContainerAppPort) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MicroserviceKubernetesContainerAppPort) GetContainerPort() int32 {
	if x != nil {
		return x.ContainerPort
	}
	return 0
}

func (x *MicroserviceKubernetesContainerAppPort) GetNetworkProtocol() string {
	if x != nil {
		return x.NetworkProtocol
	}
	return ""
}

func (x *MicroserviceKubernetesContainerAppPort) GetAppProtocol() string {
	if x != nil {
		return x.AppProtocol
	}
	return ""
}

func (x *MicroserviceKubernetesContainerAppPort) GetServicePort() int32 {
	if x != nil {
		return x.ServicePort
	}
	return 0
}

func (x *MicroserviceKubernetesContainerAppPort) GetIsIngressPort() bool {
	if x != nil {
		return x.IsIngressPort
	}
	return false
}

// *
// **MicroserviceKubernetesAvailability** specifies the availability configuration for the microservice.
// It includes settings for minimum replicas and horizontal pod autoscaling.
type MicroserviceKubernetesAvailability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The minimum number of pod replicas to maintain.
	MinReplicas int32 `protobuf:"varint,1,opt,name=min_replicas,json=minReplicas,proto3" json:"min_replicas,omitempty"`
	// The configuration for horizontal pod autoscaling.
	HorizontalPodAutoscaling *MicroserviceKubernetesAvailabilityHpa `protobuf:"bytes,2,opt,name=horizontal_pod_autoscaling,json=horizontalPodAutoscaling,proto3" json:"horizontal_pod_autoscaling,omitempty"`
}

func (x *MicroserviceKubernetesAvailability) Reset() {
	*x = MicroserviceKubernetesAvailability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MicroserviceKubernetesAvailability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MicroserviceKubernetesAvailability) ProtoMessage() {}

func (x *MicroserviceKubernetesAvailability) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MicroserviceKubernetesAvailability.ProtoReflect.Descriptor instead.
func (*MicroserviceKubernetesAvailability) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_rawDescGZIP(), []int{5}
}

func (x *MicroserviceKubernetesAvailability) GetMinReplicas() int32 {
	if x != nil {
		return x.MinReplicas
	}
	return 0
}

func (x *MicroserviceKubernetesAvailability) GetHorizontalPodAutoscaling() *MicroserviceKubernetesAvailabilityHpa {
	if x != nil {
		return x.HorizontalPodAutoscaling
	}
	return nil
}

// *
// **MicroserviceKubernetesAvailabilityHpa** specifies the horizontal pod autoscaling configuration.
// It includes settings to enable autoscaling based on CPU and memory utilization.
type MicroserviceKubernetesAvailabilityHpa struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A flag to enable or disable horizontal pod autoscaling.
	IsEnabled bool `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	// The target CPU utilization percentage to trigger autoscaling (e.g., 60.0).
	TargetCpuUtilizationPercent float64 `protobuf:"fixed64,2,opt,name=target_cpu_utilization_percent,json=targetCpuUtilizationPercent,proto3" json:"target_cpu_utilization_percent,omitempty"`
	// The target memory utilization to trigger autoscaling (e.g., "1Gi").
	TargetMemoryUtilization string `protobuf:"bytes,3,opt,name=target_memory_utilization,json=targetMemoryUtilization,proto3" json:"target_memory_utilization,omitempty"`
}

func (x *MicroserviceKubernetesAvailabilityHpa) Reset() {
	*x = MicroserviceKubernetesAvailabilityHpa{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MicroserviceKubernetesAvailabilityHpa) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MicroserviceKubernetesAvailabilityHpa) ProtoMessage() {}

func (x *MicroserviceKubernetesAvailabilityHpa) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MicroserviceKubernetesAvailabilityHpa.ProtoReflect.Descriptor instead.
func (*MicroserviceKubernetesAvailabilityHpa) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_rawDescGZIP(), []int{6}
}

func (x *MicroserviceKubernetesAvailabilityHpa) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *MicroserviceKubernetesAvailabilityHpa) GetTargetCpuUtilizationPercent() float64 {
	if x != nil {
		return x.TargetCpuUtilizationPercent
	}
	return 0
}

func (x *MicroserviceKubernetesAvailabilityHpa) GetTargetMemoryUtilization() string {
	if x != nil {
		return x.TargetMemoryUtilization
	}
	return ""
}

var File_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto protoreflect.FileDescriptor

var file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_rawDesc = []byte{
	0x0a, 0x48, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe1, 0x04, 0x0a, 0x1a,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0xe9, 0x01, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xce, 0x01, 0xba,
	0x48, 0xca, 0x01, 0xba, 0x01, 0x6c, 0x0a, 0x12, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x73, 0x12, 0x38, 0x4f, 0x6e, 0x6c, 0x79,
	0x20, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x73, 0x2c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x68, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x1a, 0x1c, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x2b, 0x24,
	0x27, 0x29, 0xba, 0x01, 0x52, 0x0a, 0x1d, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x6e, 0x6f, 0x2d, 0x68, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x2d, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65,
	0x6e, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x68, 0x79, 0x70, 0x68, 0x65, 0x6e,
	0x1a, 0x15, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27,
	0x5b, 0x5e, 0x2d, 0x5d, 0x24, 0x27, 0x29, 0x72, 0x04, 0x10, 0x01, 0x18, 0x14, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x84, 0x01, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x48, 0x0a,
	0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22,
	0xe8, 0x01, 0x0a, 0x1f, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x12, 0x7b, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x03, 0x61, 0x70, 0x70,
	0x12, 0x48, 0x0a, 0x08, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x08, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x73, 0x22, 0xda, 0x03, 0x0a, 0x22, 0x4d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x12, 0x47, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x76, 0x0a, 0x09, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x42, 0x21, 0xba, 0xfb, 0xa4, 0x02, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x31,
	0x30, 0x30, 0x30, 0x6d, 0x12, 0x03, 0x31, 0x47, 0x69, 0x12, 0x0c, 0x0a, 0x03, 0x35, 0x30, 0x6d,
	0x12, 0x05, 0x31, 0x30, 0x30, 0x4d, 0x69, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x76, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x45, 0x6e, 0x76, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x7b, 0x0a, 0x05, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0xc3, 0x03, 0x0a, 0x25, 0x4d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x45, 0x6e,
	0x76, 0x12, 0x91, 0x01, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x45, 0x6e, 0x76, 0x2e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x45, 0x6e, 0x76, 0x2e, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xeb, 0x05,
	0x0a, 0x26, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x12, 0xd0, 0x02, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xbb, 0x02, 0xba, 0x48, 0xb7, 0x02, 0xba, 0x01,
	0xb0, 0x02, 0x0a, 0x1d, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0xe0, 0x01, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x20, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x20, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x20, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x68, 0x79, 0x70, 0x68, 0x65,
	0x6e, 0x73, 0x2e, 0x20, 0x50, 0x6f, 0x72, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x6d,
	0x75, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x6e, 0x20, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x20, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2c, 0x20, 0x27, 0x31, 0x32, 0x33, 0x2d, 0x61, 0x62, 0x63, 0x27, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x27, 0x77, 0x65, 0x62, 0x27, 0x20, 0x61, 0x72, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x2c, 0x20, 0x62, 0x75, 0x74, 0x20, 0x27, 0x31, 0x32, 0x33, 0x5f, 0x61, 0x62, 0x63, 0x27,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x27, 0x2d, 0x77, 0x65, 0x62, 0x27, 0x20, 0x61, 0x72, 0x65, 0x20,
	0x6e, 0x6f, 0x74, 0x2e, 0x1a, 0x2c, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x2a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x24,
	0x27, 0x29, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0xc0, 0x01, 0x0a, 0x10, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x94, 0x01, 0xba, 0x48, 0x90, 0x01, 0xba, 0x01, 0x89, 0x01,
	0x0a, 0x29, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x3c, 0x54, 0x68, 0x65,
	0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x22, 0x53, 0x43, 0x54, 0x50, 0x22, 0x2c, 0x20, 0x22, 0x54, 0x43, 0x50, 0x22, 0x2c, 0x20,
	0x6f, 0x72, 0x20, 0x22, 0x55, 0x44, 0x50, 0x22, 0x2e, 0x1a, 0x1e, 0x74, 0x68, 0x69, 0x73, 0x20,
	0x69, 0x6e, 0x20, 0x5b, 0x22, 0x53, 0x43, 0x54, 0x50, 0x22, 0x2c, 0x20, 0x22, 0x54, 0x43, 0x50,
	0x22, 0x2c, 0x20, 0x22, 0x55, 0x44, 0x50, 0x22, 0x5d, 0xc8, 0x01, 0x01, 0x52, 0x0f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x29, 0x0a,
	0x0c, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b, 0x61, 0x70, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x29, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x22, 0xec, 0x01, 0x0a, 0x22,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0xa2, 0x01, 0x0a, 0x1a, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f,
	0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x70, 0x61,
	0x52, 0x18, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x64, 0x41,
	0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0xc7, 0x01, 0x0a, 0x25, 0x4d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x48, 0x70, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x70,
	0x75, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x43, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0xf5, 0x03, 0x0a, 0x41, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x2e, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x53, 0x70, 0x65, 0x63,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x89, 0x01, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x76, 0x31, 0xa2, 0x02, 0x05, 0x50, 0x50, 0x50, 0x4b, 0x4d, 0xaa, 0x02, 0x3d, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x3d, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x5c, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x49, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x5c, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x42, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x3a, 0x3a, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x3a, 0x3a, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_rawDescData = file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_rawDesc
)

func file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_rawDescData)
	})
	return file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_rawDescData
}

var file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_goTypes = []any{
	(*MicroserviceKubernetesSpec)(nil),             // 0: project.planton.provider.kubernetes.microservicekubernetes.v1.MicroserviceKubernetesSpec
	(*MicroserviceKubernetesContainer)(nil),        // 1: project.planton.provider.kubernetes.microservicekubernetes.v1.MicroserviceKubernetesContainer
	(*MicroserviceKubernetesContainerApp)(nil),     // 2: project.planton.provider.kubernetes.microservicekubernetes.v1.MicroserviceKubernetesContainerApp
	(*MicroserviceKubernetesContainerAppEnv)(nil),  // 3: project.planton.provider.kubernetes.microservicekubernetes.v1.MicroserviceKubernetesContainerAppEnv
	(*MicroserviceKubernetesContainerAppPort)(nil), // 4: project.planton.provider.kubernetes.microservicekubernetes.v1.MicroserviceKubernetesContainerAppPort
	(*MicroserviceKubernetesAvailability)(nil),     // 5: project.planton.provider.kubernetes.microservicekubernetes.v1.MicroserviceKubernetesAvailability
	(*MicroserviceKubernetesAvailabilityHpa)(nil),  // 6: project.planton.provider.kubernetes.microservicekubernetes.v1.MicroserviceKubernetesAvailabilityHpa
	nil,                                   // 7: project.planton.provider.kubernetes.microservicekubernetes.v1.MicroserviceKubernetesContainerAppEnv.VariablesEntry
	nil,                                   // 8: project.planton.provider.kubernetes.microservicekubernetes.v1.MicroserviceKubernetesContainerAppEnv.SecretsEntry
	(*kubernetes.IngressSpec)(nil),        // 9: project.planton.shared.kubernetes.IngressSpec
	(*kubernetes.Container)(nil),          // 10: project.planton.shared.kubernetes.Container
	(*kubernetes.ContainerImage)(nil),     // 11: project.planton.shared.kubernetes.ContainerImage
	(*kubernetes.ContainerResources)(nil), // 12: project.planton.shared.kubernetes.ContainerResources
}
var file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_depIdxs = []int32{
	1,  // 0: project.planton.provider.kubernetes.microservicekubernetes.v1.MicroserviceKubernetesSpec.container:type_name -> project.planton.provider.kubernetes.microservicekubernetes.v1.MicroserviceKubernetesContainer
	9,  // 1: project.planton.provider.kubernetes.microservicekubernetes.v1.MicroserviceKubernetesSpec.ingress:type_name -> project.planton.shared.kubernetes.IngressSpec
	5,  // 2: project.planton.provider.kubernetes.microservicekubernetes.v1.MicroserviceKubernetesSpec.availability:type_name -> project.planton.provider.kubernetes.microservicekubernetes.v1.MicroserviceKubernetesAvailability
	2,  // 3: project.planton.provider.kubernetes.microservicekubernetes.v1.MicroserviceKubernetesContainer.app:type_name -> project.planton.provider.kubernetes.microservicekubernetes.v1.MicroserviceKubernetesContainerApp
	10, // 4: project.planton.provider.kubernetes.microservicekubernetes.v1.MicroserviceKubernetesContainer.sidecars:type_name -> project.planton.shared.kubernetes.Container
	11, // 5: project.planton.provider.kubernetes.microservicekubernetes.v1.MicroserviceKubernetesContainerApp.image:type_name -> project.planton.shared.kubernetes.ContainerImage
	12, // 6: project.planton.provider.kubernetes.microservicekubernetes.v1.MicroserviceKubernetesContainerApp.resources:type_name -> project.planton.shared.kubernetes.ContainerResources
	3,  // 7: project.planton.provider.kubernetes.microservicekubernetes.v1.MicroserviceKubernetesContainerApp.env:type_name -> project.planton.provider.kubernetes.microservicekubernetes.v1.MicroserviceKubernetesContainerAppEnv
	4,  // 8: project.planton.provider.kubernetes.microservicekubernetes.v1.MicroserviceKubernetesContainerApp.ports:type_name -> project.planton.provider.kubernetes.microservicekubernetes.v1.MicroserviceKubernetesContainerAppPort
	7,  // 9: project.planton.provider.kubernetes.microservicekubernetes.v1.MicroserviceKubernetesContainerAppEnv.variables:type_name -> project.planton.provider.kubernetes.microservicekubernetes.v1.MicroserviceKubernetesContainerAppEnv.VariablesEntry
	8,  // 10: project.planton.provider.kubernetes.microservicekubernetes.v1.MicroserviceKubernetesContainerAppEnv.secrets:type_name -> project.planton.provider.kubernetes.microservicekubernetes.v1.MicroserviceKubernetesContainerAppEnv.SecretsEntry
	6,  // 11: project.planton.provider.kubernetes.microservicekubernetes.v1.MicroserviceKubernetesAvailability.horizontal_pod_autoscaling:type_name -> project.planton.provider.kubernetes.microservicekubernetes.v1.MicroserviceKubernetesAvailabilityHpa
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_init() }
func file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_init() {
	if File_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*MicroserviceKubernetesSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*MicroserviceKubernetesContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*MicroserviceKubernetesContainerApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*MicroserviceKubernetesContainerAppEnv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*MicroserviceKubernetesContainerAppPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*MicroserviceKubernetesAvailability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*MicroserviceKubernetesAvailabilityHpa); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto = out.File
	file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_rawDesc = nil
	file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_goTypes = nil
	file_project_planton_provider_kubernetes_microservicekubernetes_v1_spec_proto_depIdxs = nil
}
