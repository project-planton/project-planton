// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/provider/kubernetes/openfgakubernetes/v1/spec.proto

package openfgakubernetesv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	kubernetes "github.com/project-planton/project-planton/apis/go/project/planton/shared/kubernetes"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// **OpenfgaKubernetesSpec** defines the configuration for deploying OpenFGA on a Kubernetes cluster.
// This message specifies the parameters needed to create and manage an OpenFGA deployment within a Kubernetes environment.
// It includes container specifications, ingress settings, and data store configurations to control resource allocation,
// external access, and backend storage options.
type OpenfgaKubernetesSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The container specifications for the OpenFGA deployment.
	Container *OpenfgaKubernetesContainer `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	// *
	// The ingress configuration for the OpenFGA deployment.
	Ingress *kubernetes.IngressSpec `protobuf:"bytes,2,opt,name=ingress,proto3" json:"ingress,omitempty"`
	// *
	// The data store configuration for OpenFGA.
	// This specifies the backend database engine and connection details.
	Datastore *OpenfgaKubernetesDataStore `protobuf:"bytes,3,opt,name=datastore,proto3" json:"datastore,omitempty"`
}

func (x *OpenfgaKubernetesSpec) Reset() {
	*x = OpenfgaKubernetesSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenfgaKubernetesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenfgaKubernetesSpec) ProtoMessage() {}

func (x *OpenfgaKubernetesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenfgaKubernetesSpec.ProtoReflect.Descriptor instead.
func (*OpenfgaKubernetesSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *OpenfgaKubernetesSpec) GetContainer() *OpenfgaKubernetesContainer {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *OpenfgaKubernetesSpec) GetIngress() *kubernetes.IngressSpec {
	if x != nil {
		return x.Ingress
	}
	return nil
}

func (x *OpenfgaKubernetesSpec) GetDatastore() *OpenfgaKubernetesDataStore {
	if x != nil {
		return x.Datastore
	}
	return nil
}

// *
// **OpenfgaKubernetesContainer** specifies the container configuration for the OpenFGA application.
// It includes resource allocations for CPU and memory to ensure the application runs efficiently,
// and the number of replicas for scaling purposes.
// Recommended defaults: CPU requests - 50m, Memory requests - 256Mi, CPU limits - 1, Memory limits - 1Gi.
type OpenfgaKubernetesContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of OpenFGA replicas to deploy. This determines the level of concurrency and availability.
	Replicas int32 `protobuf:"varint,1,opt,name=replicas,proto3" json:"replicas,omitempty"`
	// The CPU and memory resources allocated to the OpenFGA container.
	Resources *kubernetes.ContainerResources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
}

func (x *OpenfgaKubernetesContainer) Reset() {
	*x = OpenfgaKubernetesContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenfgaKubernetesContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenfgaKubernetesContainer) ProtoMessage() {}

func (x *OpenfgaKubernetesContainer) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenfgaKubernetesContainer.ProtoReflect.Descriptor instead.
func (*OpenfgaKubernetesContainer) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *OpenfgaKubernetesContainer) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *OpenfgaKubernetesContainer) GetResources() *kubernetes.ContainerResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

// *
// **OpenfgaKubernetesDataStore** represents the configuration for the OpenFGA data store in a Kubernetes deployment.
// It specifies the type of database engine to use and the URI for connecting to the database.
type OpenfgaKubernetesDataStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Specifies the type of data store engine to use.
	// Allowed values are "mysql" for MySQL database and "postgres" for PostgreSQL database.
	Engine string `protobuf:"bytes,1,opt,name=engine,proto3" json:"engine,omitempty"`
	// *
	// Specifies the URI to connect to the selected data store engine.
	// The URI format should be appropriate for the specified engine:
	// - For MySQL: `mysql://user:password@host:port/database`
	// - For PostgreSQL: `postgres://user:password@host:port/database`
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *OpenfgaKubernetesDataStore) Reset() {
	*x = OpenfgaKubernetesDataStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenfgaKubernetesDataStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenfgaKubernetesDataStore) ProtoMessage() {}

func (x *OpenfgaKubernetesDataStore) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenfgaKubernetesDataStore.ProtoReflect.Descriptor instead.
func (*OpenfgaKubernetesDataStore) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *OpenfgaKubernetesDataStore) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *OpenfgaKubernetesDataStore) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

var file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*OpenfgaKubernetesContainer)(nil),
		Field:         531001,
		Name:          "project.planton.provider.kubernetes.openfgakubernetes.v1.default_container",
		Tag:           "bytes,531001,opt,name=default_container",
		Filename:      "project/planton/provider/kubernetes/openfgakubernetes/v1/spec.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional project.planton.provider.kubernetes.openfgakubernetes.v1.OpenfgaKubernetesContainer default_container = 531001;
	E_DefaultContainer = &file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_extTypes[0]
)

var File_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto protoreflect.FileDescriptor

var file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_rawDesc = []byte{
	0x0a, 0x43, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x38, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66,
	0x67, 0x61, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a,
	0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xf9, 0x02, 0x0a, 0x15, 0x4f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x4b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x99, 0x01,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x54, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x66, 0x67, 0x61, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x25, 0xca, 0xa3, 0x83, 0x02, 0x20, 0x08, 0x01,
	0x12, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x31, 0x30, 0x30, 0x30, 0x6d, 0x12, 0x03, 0x31, 0x47, 0x69,
	0x12, 0x0c, 0x0a, 0x03, 0x35, 0x30, 0x6d, 0x12, 0x05, 0x31, 0x30, 0x30, 0x4d, 0x69, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x07, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x7a, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x66, 0x67, 0x61, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22,
	0x8d, 0x01, 0x0a, 0x1a, 0x4f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x53, 0x0a, 0x09, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22,
	0xcd, 0x01, 0x0a, 0x1a, 0x4f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x94,
	0x01, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x7c, 0xba, 0x48, 0x79, 0xba, 0x01, 0x73, 0x0a, 0x15, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x3b,
	0x54, 0x68, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x6f, 0x6e, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x22, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x22, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x22, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x22, 0x2e, 0x1a, 0x1d, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x22, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x22,
	0x2c, 0x20, 0x22, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x22, 0x5d, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x03, 0x75, 0x72, 0x69, 0x3a,
	0xa2, 0x01, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0xb9, 0xb4, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x4b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x42, 0xd1, 0x03, 0x0a, 0x3c, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x7f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x66,
	0x67, 0x61, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b,
	0x6f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x76, 0x31, 0xa2, 0x02, 0x05, 0x50, 0x50, 0x50, 0x4b, 0x4f, 0xaa, 0x02, 0x38, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x38, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5c, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5c, 0x4f, 0x70, 0x65,
	0x6e, 0x66, 0x67, 0x61, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5c, 0x56,
	0x31, 0xe2, 0x02, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5c, 0x4f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x3d, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x3a, 0x3a, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x3a, 0x3a, 0x4f, 0x70, 0x65, 0x6e, 0x66, 0x67, 0x61, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_rawDescData = file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_rawDesc
)

func file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_rawDescData)
	})
	return file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_rawDescData
}

var file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_goTypes = []any{
	(*OpenfgaKubernetesSpec)(nil),         // 0: project.planton.provider.kubernetes.openfgakubernetes.v1.OpenfgaKubernetesSpec
	(*OpenfgaKubernetesContainer)(nil),    // 1: project.planton.provider.kubernetes.openfgakubernetes.v1.OpenfgaKubernetesContainer
	(*OpenfgaKubernetesDataStore)(nil),    // 2: project.planton.provider.kubernetes.openfgakubernetes.v1.OpenfgaKubernetesDataStore
	(*kubernetes.IngressSpec)(nil),        // 3: project.planton.shared.kubernetes.IngressSpec
	(*kubernetes.ContainerResources)(nil), // 4: project.planton.shared.kubernetes.ContainerResources
	(*descriptorpb.FieldOptions)(nil),     // 5: google.protobuf.FieldOptions
}
var file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.kubernetes.openfgakubernetes.v1.OpenfgaKubernetesSpec.container:type_name -> project.planton.provider.kubernetes.openfgakubernetes.v1.OpenfgaKubernetesContainer
	3, // 1: project.planton.provider.kubernetes.openfgakubernetes.v1.OpenfgaKubernetesSpec.ingress:type_name -> project.planton.shared.kubernetes.IngressSpec
	2, // 2: project.planton.provider.kubernetes.openfgakubernetes.v1.OpenfgaKubernetesSpec.datastore:type_name -> project.planton.provider.kubernetes.openfgakubernetes.v1.OpenfgaKubernetesDataStore
	4, // 3: project.planton.provider.kubernetes.openfgakubernetes.v1.OpenfgaKubernetesContainer.resources:type_name -> project.planton.shared.kubernetes.ContainerResources
	5, // 4: project.planton.provider.kubernetes.openfgakubernetes.v1.default_container:extendee -> google.protobuf.FieldOptions
	1, // 5: project.planton.provider.kubernetes.openfgakubernetes.v1.default_container:type_name -> project.planton.provider.kubernetes.openfgakubernetes.v1.OpenfgaKubernetesContainer
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	5, // [5:6] is the sub-list for extension type_name
	4, // [4:5] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_init() }
func file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_init() {
	if File_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*OpenfgaKubernetesSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*OpenfgaKubernetesContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*OpenfgaKubernetesDataStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_msgTypes,
		ExtensionInfos:    file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_extTypes,
	}.Build()
	File_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto = out.File
	file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_rawDesc = nil
	file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_goTypes = nil
	file_project_planton_provider_kubernetes_openfgakubernetes_v1_spec_proto_depIdxs = nil
}
