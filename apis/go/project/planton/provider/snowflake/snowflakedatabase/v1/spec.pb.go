// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/provider/snowflake/snowflakedatabase/v1/spec.proto

package snowflakedatabasev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// snowflake-database spec
type SnowflakeDatabaseSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The database parameter that specifies the default catalog to use for Iceberg tables
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#catalog_yaml
	// https://docs.snowflake.com/en/sql-reference/parameters#catalog
	Catalog string `protobuf:"bytes,1,opt,name=catalog,proto3" json:"catalog,omitempty"`
	// Specifies a comment for the database
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#comment_yaml
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	// Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database,
	// as well as specifying the default Time Travel retention time for all schemas created in the database.
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#dataretentiontimeindays_yaml
	// https://docs.snowflake.com/en/user-guide/data-time-travel
	DataRetentionTimeInDays int32 `protobuf:"varint,3,opt,name=data_retention_time_in_days,json=dataRetentionTimeInDays,proto3" json:"data_retention_time_in_days,omitempty"`
	// Specifies a default collation specification for all schemas and tables added to the database.
	// It can be overridden on schema or table level.
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#defaultddlcollation_yaml
	// https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification
	DefaultDdlCollation string `protobuf:"bytes,4,opt,name=default_ddl_collation,json=defaultDdlCollation,proto3" json:"default_ddl_collation,omitempty"`
	// Specifies whether to drop public schema on creation or not. Modifying the parameter after database is
	// already created won't have any effect.
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#droppublicschemaoncreation_yaml
	DropPublicSchemaOnCreation bool `protobuf:"varint,5,opt,name=drop_public_schema_on_creation,json=dropPublicSchemaOnCreation,proto3" json:"drop_public_schema_on_creation,omitempty"`
	// If true, enables stdout/stderr fast path logging for anonymous stored procedures.
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#enableconsoleoutput_yaml
	EnableConsoleOutput bool `protobuf:"varint,6,opt,name=enable_console_output,json=enableConsoleOutput,proto3" json:"enable_console_output,omitempty"`
	// The database parameter that specifies the default external volume to use for Iceberg tables
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#externalvolume_yaml
	// https://docs.snowflake.com/en/sql-reference/parameters#external-volume
	ExternalVolume string `protobuf:"bytes,7,opt,name=external_volume,json=externalVolume,proto3" json:"external_volume,omitempty"`
	// Specifies the database as transient. Transient databases do not have a Fail-safe period so they do not incur
	// additional storage costs once they leave Time Travel; however, this means they are also not protected by
	// Fail-safe in the event of a data loss.
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#istransient_yaml
	IsTransient bool `protobuf:"varint,8,opt,name=is_transient,json=isTransient,proto3" json:"is_transient,omitempty"`
	// Specifies the severity level of messages that should be ingested and made available in the active event table.
	// Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested.
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#loglevel_yaml
	// https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level
	LogLevel string `protobuf:"bytes,9,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`
	// Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period
	// for tables in the database to prevent streams on the tables from becoming stale.
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#maxdataextensiontimeindays_yaml
	// https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days
	MaxDataExtensionTimeInDays int32 `protobuf:"varint,10,opt,name=max_data_extension_time_in_days,json=maxDataExtensionTimeInDays,proto3" json:"max_data_extension_time_in_days,omitempty"`
	// Specifies the identifier for the database; must be unique for your account. As a best practice for Database
	// Replication and Failover, it is recommended to give each secondary database the same name as its primary database.
	// This practice supports referencing fully-qualified objects (i.e. '\n\n.\n\n.\n\n') by other objects in the
	// same database, such as querying a fully-qualified table name in a view. If a secondary database has a
	// different name from the primary database, then these object references would break in the secondary database.
	// Due to technical limitations (read more here), avoid using the following characters: |, ., (, ), "
	Name string `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	// If true, the case of quoted identifiers is ignored
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#quotedidentifiersignorecase_yaml
	// https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case
	QuotedIdentifiersIgnoreCase bool `protobuf:"varint,12,opt,name=quoted_identifiers_ignore_case,json=quotedIdentifiersIgnoreCase,proto3" json:"quoted_identifiers_ignore_case,omitempty"`
	// Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (ï¿½) in query results
	// for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#replaceinvalidcharacters_yaml
	// https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters
	ReplaceInvalidCharacters bool `protobuf:"varint,13,opt,name=replace_invalid_characters,json=replaceInvalidCharacters,proto3" json:"replace_invalid_characters,omitempty"`
	// The storage serialization policy for Iceberg tables that use Snowflake as the catalog.
	// Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data
	// files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and
	// compression of data files that ensures the best table performance within Snowflake.
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#storageserializationpolicy_yaml
	// https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy
	StorageSerializationPolicy string `protobuf:"bytes,14,opt,name=storage_serialization_policy,json=storageSerializationPolicy,proto3" json:"storage_serialization_policy,omitempty"`
	// How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending.
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#suspendtaskafternumfailures_yaml
	// https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures
	SuspendTaskAfterNumFailures int32 `protobuf:"varint,15,opt,name=suspend_task_after_num_failures,json=suspendTaskAfterNumFailures,proto3" json:"suspend_task_after_num_failures,omitempty"`
	// Maximum automatic retries allowed for a user task
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#taskautoretryattempts_yaml
	// https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts
	TaskAutoRetryAttempts int32 `protobuf:"varint,16,opt,name=task_auto_retry_attempts,json=taskAutoRetryAttempts,proto3" json:"task_auto_retry_attempts,omitempty"`
	// Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON*EVENT OFF]
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#tracelevel_yaml
	// https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level
	TraceLevel string `protobuf:"bytes,17,opt,name=trace_level,json=traceLevel,proto3" json:"trace_level,omitempty"`
	// snowflake database user task
	UserTask *SnowflakeDatabaseUserTask `protobuf:"bytes,18,opt,name=user_task,json=userTask,proto3" json:"user_task,omitempty"`
}

func (x *SnowflakeDatabaseSpec) Reset() {
	*x = SnowflakeDatabaseSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnowflakeDatabaseSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnowflakeDatabaseSpec) ProtoMessage() {}

func (x *SnowflakeDatabaseSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnowflakeDatabaseSpec.ProtoReflect.Descriptor instead.
func (*SnowflakeDatabaseSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *SnowflakeDatabaseSpec) GetCatalog() string {
	if x != nil {
		return x.Catalog
	}
	return ""
}

func (x *SnowflakeDatabaseSpec) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SnowflakeDatabaseSpec) GetDataRetentionTimeInDays() int32 {
	if x != nil {
		return x.DataRetentionTimeInDays
	}
	return 0
}

func (x *SnowflakeDatabaseSpec) GetDefaultDdlCollation() string {
	if x != nil {
		return x.DefaultDdlCollation
	}
	return ""
}

func (x *SnowflakeDatabaseSpec) GetDropPublicSchemaOnCreation() bool {
	if x != nil {
		return x.DropPublicSchemaOnCreation
	}
	return false
}

func (x *SnowflakeDatabaseSpec) GetEnableConsoleOutput() bool {
	if x != nil {
		return x.EnableConsoleOutput
	}
	return false
}

func (x *SnowflakeDatabaseSpec) GetExternalVolume() string {
	if x != nil {
		return x.ExternalVolume
	}
	return ""
}

func (x *SnowflakeDatabaseSpec) GetIsTransient() bool {
	if x != nil {
		return x.IsTransient
	}
	return false
}

func (x *SnowflakeDatabaseSpec) GetLogLevel() string {
	if x != nil {
		return x.LogLevel
	}
	return ""
}

func (x *SnowflakeDatabaseSpec) GetMaxDataExtensionTimeInDays() int32 {
	if x != nil {
		return x.MaxDataExtensionTimeInDays
	}
	return 0
}

func (x *SnowflakeDatabaseSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SnowflakeDatabaseSpec) GetQuotedIdentifiersIgnoreCase() bool {
	if x != nil {
		return x.QuotedIdentifiersIgnoreCase
	}
	return false
}

func (x *SnowflakeDatabaseSpec) GetReplaceInvalidCharacters() bool {
	if x != nil {
		return x.ReplaceInvalidCharacters
	}
	return false
}

func (x *SnowflakeDatabaseSpec) GetStorageSerializationPolicy() string {
	if x != nil {
		return x.StorageSerializationPolicy
	}
	return ""
}

func (x *SnowflakeDatabaseSpec) GetSuspendTaskAfterNumFailures() int32 {
	if x != nil {
		return x.SuspendTaskAfterNumFailures
	}
	return 0
}

func (x *SnowflakeDatabaseSpec) GetTaskAutoRetryAttempts() int32 {
	if x != nil {
		return x.TaskAutoRetryAttempts
	}
	return 0
}

func (x *SnowflakeDatabaseSpec) GetTraceLevel() string {
	if x != nil {
		return x.TraceLevel
	}
	return ""
}

func (x *SnowflakeDatabaseSpec) GetUserTask() *SnowflakeDatabaseUserTask {
	if x != nil {
		return x.UserTask
	}
	return nil
}

// snowflake database user task
type SnowflakeDatabaseUserTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The initial size of warehouse to use for managed warehouses in the absence of history.
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#usertaskmanagedinitialwarehousesize_yaml
	// https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size
	ManagedInitialWarehouseSize string `protobuf:"bytes,1,opt,name=managed_initial_warehouse_size,json=managedInitialWarehouseSize,proto3" json:"managed_initial_warehouse_size,omitempty"`
	// Minimum amount of time between Triggered Task executions in seconds.
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#usertaskminimumtriggerintervalinseconds_yaml
	MinimumTriggerIntervalInSeconds int32 `protobuf:"varint,2,opt,name=minimum_trigger_interval_in_seconds,json=minimumTriggerIntervalInSeconds,proto3" json:"minimum_trigger_interval_in_seconds,omitempty"`
	// User task execution timeout in milliseconds
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#usertasktimeoutms_yaml
	// https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms
	TimeoutMs int32 `protobuf:"varint,3,opt,name=timeout_ms,json=timeoutMs,proto3" json:"timeout_ms,omitempty"`
}

func (x *SnowflakeDatabaseUserTask) Reset() {
	*x = SnowflakeDatabaseUserTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnowflakeDatabaseUserTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnowflakeDatabaseUserTask) ProtoMessage() {}

func (x *SnowflakeDatabaseUserTask) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnowflakeDatabaseUserTask.ProtoReflect.Descriptor instead.
func (*SnowflakeDatabaseUserTask) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *SnowflakeDatabaseUserTask) GetManagedInitialWarehouseSize() string {
	if x != nil {
		return x.ManagedInitialWarehouseSize
	}
	return ""
}

func (x *SnowflakeDatabaseUserTask) GetMinimumTriggerIntervalInSeconds() int32 {
	if x != nil {
		return x.MinimumTriggerIntervalInSeconds
	}
	return 0
}

func (x *SnowflakeDatabaseUserTask) GetTimeoutMs() int32 {
	if x != nil {
		return x.TimeoutMs
	}
	return 0
}

var File_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto protoreflect.FileDescriptor

var file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_rawDesc = []byte{
	0x0a, 0x42, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x73, 0x6e, 0x6f, 0x77, 0x66,
	0x6c, 0x61, 0x6b, 0x65, 0x2f, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x37, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73,
	0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61,
	0x6b, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62,
	0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcd, 0x07, 0x0a, 0x15, 0x53,
	0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x1b, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x64, 0x64, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x64,
	0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1e, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x5f, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1a, 0x64, 0x72, 0x6f, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x4f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32,
	0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x43, 0x0a, 0x1f, 0x6d,
	0x61, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x61, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x44, 0x61, 0x79, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x49,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x1c, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x44, 0x0a, 0x1f, 0x73, 0x75, 0x73,
	0x70, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1b, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x37, 0x0a, 0x18, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x15, 0x74, 0x61, 0x73, 0x6b, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x6f, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b,
	0x65, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x22, 0xcd, 0x01, 0x0a, 0x19, 0x53,
	0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x43, 0x0a, 0x1e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4c, 0x0a,
	0x23, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x42, 0xcb, 0x03, 0x0a, 0x3b, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x6e, 0x6f, 0x77,
	0x66, 0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x53, 0x70, 0x65, 0x63,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x7e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2f, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x2f, 0x73,
	0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x2f, 0x76, 0x31, 0x3b, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x05, 0x50, 0x50, 0x50, 0x53, 0x53, 0xaa,
	0x02, 0x37, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x6e, 0x6f, 0x77, 0x66,
	0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x37, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5c, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x5c, 0x53,
	0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5c, 0x56, 0x31, 0xe2, 0x02, 0x43, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x53,
	0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x5c, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61,
	0x6b, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x3c, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3a, 0x3a, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b,
	0x65, 0x3a, 0x3a, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_rawDescData = file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_rawDesc
)

func file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_rawDescData)
	})
	return file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_rawDescData
}

var file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_goTypes = []any{
	(*SnowflakeDatabaseSpec)(nil),     // 0: project.planton.provider.snowflake.snowflakedatabase.v1.SnowflakeDatabaseSpec
	(*SnowflakeDatabaseUserTask)(nil), // 1: project.planton.provider.snowflake.snowflakedatabase.v1.SnowflakeDatabaseUserTask
}
var file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.snowflake.snowflakedatabase.v1.SnowflakeDatabaseSpec.user_task:type_name -> project.planton.provider.snowflake.snowflakedatabase.v1.SnowflakeDatabaseUserTask
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_init() }
func file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_init() {
	if File_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SnowflakeDatabaseSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*SnowflakeDatabaseUserTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto = out.File
	file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_rawDesc = nil
	file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_goTypes = nil
	file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_depIdxs = nil
}
