syntax = "proto3";

package project.planton.provider.kubernetes.kuberneteshttpendpoint.v1;

import "buf/validate/validate.proto";

//kubernetes-http-endpoint spec
message KubernetesHttpEndpointSpec {
  //(optional for create) flag to toggle tls for istio-http-endpoint.
  //defaults to "false".
  //(important note) certificates are not created for endpoints that do not need tls.
  //(important note) endpoint domains with out tls enabled are not eligible to be used for
  //creating endpoints for postgres-clusters or kafka-clusters.
  bool is_tls_enabled = 1;

  //name of the cluster-issuer to be used for provisioning the certificate.
  //this is only required when tls is enabled and can be left empty otherwise.
  //this will be one of the domains from gke-cluster.spec.ingress-domains for
  // gke-clusters deployed using planton-cloud provided pulumi module since a cluster-issuer for
  // each entry in the ingress-domains will be created with the name of the cluster-issuer set to the domain name.
  //if the cluster is not managed by planton-cloud, specify the cluster-issuer configured to issue
  // certificate for the http-endpoint domain name.
  //for all other scenarios, the devops team can deploy a customized pulumi module.
  string cert_cluster_issuer_name = 2;

  //flag to control virtual service configuration compatible for grpc-web clients.
  //grpc-web clients would rely on extra headers added by envoy proxy.
  bool is_grpc_web_compatible = 3;

  //routes to configure backends for url paths of the domain.
  //routes allow configuring requests to be routed to different microservices based on the url path.
  //ex: if the endpoint domain name is console.example.com, then console.example.com/public/api/* can be
  //to be sent to public-api microservice and console.example.com/private/api/* can be configured to route to
  //route to private-api microservice.
  repeated KubernetesHttpEndpointRoutingRule routing_rules = 4;
}

//kubernetes-http-endpoint routing-rule
message KubernetesHttpEndpointRoutingRule {
  //if endpoint domain name is console.example.com, and if the url_path_prefix is /api, then
  //all requests that match console.example.com/api/* are forwarded to the configured kubernetes service.
  string url_path_prefix = 1 [
    (buf.validate.field).required = true
  ];

  //backend-service
  KubernetesHttpEndpointRoutingRuleBackendService backend_service = 2 [
    (buf.validate.field).required = true
  ];
}

//backend-service spec for kubernetes-http-endpoint routing-rule
message KubernetesHttpEndpointRoutingRuleBackendService {
  //name of the kubernetes service
  string name = 1;
  //namespace of the kubernetes service
  string namespace = 2;
  //kubernetes service port
  int32 port = 3;
}
