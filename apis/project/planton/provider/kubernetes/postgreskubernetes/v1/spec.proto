syntax = "proto3";

package project.planton.provider.kubernetes.postgreskubernetes.v1;

import "buf/validate/validate.proto";
import "project/planton/shared/kubernetes/kubernetes.proto";
import "project/planton/shared/kubernetes/options.proto";
import "project/planton/shared/options/options.proto";

/**
 * **PostgresKubernetesSpec** defines the configuration for deploying PostgreSQL on a Kubernetes cluster.
 * This message specifies the parameters needed to create and manage a PostgreSQL deployment within a Kubernetes environment.
 * It includes container specifications and ingress settings to control resource allocation and external access.
 */
message PostgresKubernetesSpec {
  /**
   * **Required.** The container specifications for the PostgreSQL deployment.
   */
  PostgresKubernetesContainer container = 1 [
    (buf.validate.field).required = true
  ];

  /**
   * The ingress configuration for the PostgreSQL deployment.
   */
  project.planton.shared.kubernetes.IngressSpec ingress = 2;
}

/**
 * **PostgresKubernetesContainer** specifies the container configuration for the PostgreSQL application.
 * It includes resource allocations for CPU and memory, the number of replicas, and disk size for data persistence.
 * Proper configuration ensures optimal performance and data reliability for your PostgreSQL deployment.
 */
message PostgresKubernetesContainer {
  /**
   * **Required.** The number of replicas of PostgreSQL pods.
   * Recommended default is 1.
   */
  int32 replicas = 1 [
    (project.planton.shared.options.recommended_default) = "1"
  ];

  // The CPU and memory resources allocated to the PostgreSQL container.
  project.planton.shared.kubernetes.ContainerResources resources = 2 [
    (project.planton.shared.kubernetes.default_container_resources) = {
      limits {
        cpu: "1000m"
        memory: "1Gi"
      },
      requests {
        cpu: "50m"
        memory: "100Mi"
      }
    }
  ];

  /**
   * The storage size to allocate for each PostgreSQL instance (e.g., "1Gi").
   * A default value is set if the client does not provide a value.
   */
  string disk_size = 3 [
    (buf.validate.field).cel = {
      id: "spec.kubernetes.container.disk_size.is_valid",
      message: "Disk size value is invalid",
      // Validation regex for disk size.
      expression: "this.matches('^\\\\d+(\\\\.\\\\d+)?\\\\s?(Ki|Mi|Gi|Ti|Pi|Ei|K|M|G|T|P|E)$') && size(this) > 0"
    }
  ];
}
