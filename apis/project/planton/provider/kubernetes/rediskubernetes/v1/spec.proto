syntax = "proto3";

package project.planton.provider.kubernetes.rediskubernetes.v1;

import "buf/validate/validate.proto";
import "project/planton/shared/kubernetes/kubernetes.proto";
import "project/planton/shared/kubernetes/options.proto";
import "project/planton/shared/options/options.proto";

import "google/protobuf/descriptor.proto";

extend google.protobuf.FieldOptions {
  RedisKubernetesContainer default_container = 537001;
}

/**
 * **RedisKubernetesSpec** defines the configuration for deploying Redis on a Kubernetes cluster.
 * This message specifies the parameters needed to create and manage a Redis deployment within a Kubernetes environment.
 * It includes container specifications and ingress settings to control resource allocation and external access.
 */
message RedisKubernetesSpec {
  // The container specifications for the Redis deployment.
  RedisKubernetesContainer container = 1 [
    (default_container) = {
      replicas: 1,
      resources:  {
        limits {
          cpu: "1000m"
          memory: "1Gi"
        },
        requests {
          cpu: "50m"
          memory: "100Mi"
        }
      },
      is_persistence_enabled: true,
      disk_size: "1Gi"
    }
  ];

  //The ingress configuration for the Redis deployment.
  project.planton.shared.kubernetes.IngressSpec ingress = 2;
}

/**
 * **RedisKubernetesContainer** specifies the container configuration for the Redis application.
 * It includes resource allocations for CPU and memory, the number of replicas, data persistence options, and disk size.
 * Proper configuration ensures optimal performance and data reliability for your Redis deployment.
 */
message RedisKubernetesContainer {
  // The number of Redis pods to deploy.
  int32 replicas = 1;

  //The CPU and memory resources allocated to the Redis container.
  project.planton.shared.kubernetes.ContainerResources resources = 2;

  /**
   * A flag to enable or disable data persistence for Redis.
   * When enabled, in-memory data is persisted to a storage volume, allowing data to survive pod restarts.
   * The backup data from the persistent volume is restored into Redis memory between pod restarts.
   * Defaults to `false`.
   */
  bool is_persistence_enabled = 3;

  /**
   * The size of the persistent volume attached to each Redis pod (e.g., "10Gi").
   * If the client does not provide a value, a default value is configured.
   * This attribute is ignored when persistence is not enabled.
   * This persistent volume is used for backing up in-memory data.
   * Data from the persistent volume will be restored into memory between pod restarts.
   * **Note:** This value cannot be modified after creation due to Kubernetes limitations on stateful sets.
   */
  option (buf.validate.message).cel = {
    id: "spec.container.disk_size.required",
    expression: "this.is_persistence_enabled && size(this.disk_size) == 0"
        "? 'Disk size is required to enable persistence'"
        ": ''"
  };
  string disk_size = 4 [
    (buf.validate.field).cel = {
      id: "spec.container.disk_size.format",
      message: "Disk size value is invalid",
      // Regex to validate disk size format (e.g., "10Gi", "500Mi")
      expression: "this.matches('^\\\\d+(\\\\.\\\\d+)?\\\\s?(Ki|Mi|Gi|Ti|Pi|Ei|K|M|G|T|P|E)$') && size(this) > 0"
    }
  ];
}
