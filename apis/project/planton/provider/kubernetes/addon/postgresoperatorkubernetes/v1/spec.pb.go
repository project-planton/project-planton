// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/kubernetes/addon/postgresoperatorkubernetes/v1/spec.proto

package postgresoperatorkubernetesv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	kubernetes "github.com/project-planton/project-planton/apis/project/planton/shared/kubernetes"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Cloudflare R2-specific storage configuration for PostgreSQL backups.
// This is separate to allow future support for other S3-compatible backends.
type PostgresOperatorKubernetesBackupR2Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cloudflare R2 account ID (used to construct endpoint URL)
	// The endpoint will be: https://<account_id>.r2.cloudflarestorage.com
	CloudflareAccountId string `protobuf:"bytes,1,opt,name=cloudflare_account_id,json=cloudflareAccountId,proto3" json:"cloudflare_account_id,omitempty"`
	// R2 bucket name for storing backups
	BucketName string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// R2 Access Key ID
	// The Pulumi module will create a Kubernetes Secret from these credentials
	AccessKeyId string `protobuf:"bytes,3,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	// R2 Secret Access Key
	// The Pulumi module will create a Kubernetes Secret from these credentials
	SecretAccessKey string `protobuf:"bytes,4,opt,name=secret_access_key,json=secretAccessKey,proto3" json:"secret_access_key,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PostgresOperatorKubernetesBackupR2Config) Reset() {
	*x = PostgresOperatorKubernetesBackupR2Config{}
	mi := &file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresOperatorKubernetesBackupR2Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresOperatorKubernetesBackupR2Config) ProtoMessage() {}

func (x *PostgresOperatorKubernetesBackupR2Config) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresOperatorKubernetesBackupR2Config.ProtoReflect.Descriptor instead.
func (*PostgresOperatorKubernetesBackupR2Config) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *PostgresOperatorKubernetesBackupR2Config) GetCloudflareAccountId() string {
	if x != nil {
		return x.CloudflareAccountId
	}
	return ""
}

func (x *PostgresOperatorKubernetesBackupR2Config) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *PostgresOperatorKubernetesBackupR2Config) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *PostgresOperatorKubernetesBackupR2Config) GetSecretAccessKey() string {
	if x != nil {
		return x.SecretAccessKey
	}
	return ""
}

// Zalando-specific backup configuration for all PostgreSQL databases managed by this operator.
// This configures the pod_environment_configmap used by Zalando operator for WAL-G backups.
// The Pulumi module will automatically create a Kubernetes Secret from the R2 credentials.
type PostgresOperatorKubernetesBackupConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cloudflare R2 storage configuration (includes credentials)
	R2Config *PostgresOperatorKubernetesBackupR2Config `protobuf:"bytes,1,opt,name=r2_config,json=r2Config,proto3" json:"r2_config,omitempty"`
	// Optional: Custom S3 prefix template for WAL-G
	// Default: "backups/$(SCOPE)/$(PGVERSION)"
	// Zalando variables: $(SCOPE) = cluster name, $(PGVERSION) = postgres version
	S3PrefixTemplate string `protobuf:"bytes,2,opt,name=s3_prefix_template,json=s3PrefixTemplate,proto3" json:"s3_prefix_template,omitempty"`
	// Cron schedule for base backups (e.g., "0 2 * * *" for 2 AM daily)
	// This maps to Zalando's BACKUP_SCHEDULE environment variable
	BackupSchedule string `protobuf:"bytes,3,opt,name=backup_schedule,json=backupSchedule,proto3" json:"backup_schedule,omitempty"`
	// Enable WAL-G for backups (default: true)
	// Maps to USE_WALG_BACKUP environment variable
	EnableWalGBackup bool `protobuf:"varint,4,opt,name=enable_wal_g_backup,json=enableWalGBackup,proto3" json:"enable_wal_g_backup,omitempty"`
	// Enable WAL-G for restores (default: true)
	// Maps to USE_WALG_RESTORE environment variable
	EnableWalGRestore bool `protobuf:"varint,5,opt,name=enable_wal_g_restore,json=enableWalGRestore,proto3" json:"enable_wal_g_restore,omitempty"`
	// Enable WAL-G for clone operations (default: true)
	// Maps to CLONE_USE_WALG_RESTORE environment variable
	EnableCloneWalGRestore bool `protobuf:"varint,6,opt,name=enable_clone_wal_g_restore,json=enableCloneWalGRestore,proto3" json:"enable_clone_wal_g_restore,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *PostgresOperatorKubernetesBackupConfig) Reset() {
	*x = PostgresOperatorKubernetesBackupConfig{}
	mi := &file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresOperatorKubernetesBackupConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresOperatorKubernetesBackupConfig) ProtoMessage() {}

func (x *PostgresOperatorKubernetesBackupConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresOperatorKubernetesBackupConfig.ProtoReflect.Descriptor instead.
func (*PostgresOperatorKubernetesBackupConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *PostgresOperatorKubernetesBackupConfig) GetR2Config() *PostgresOperatorKubernetesBackupR2Config {
	if x != nil {
		return x.R2Config
	}
	return nil
}

func (x *PostgresOperatorKubernetesBackupConfig) GetS3PrefixTemplate() string {
	if x != nil {
		return x.S3PrefixTemplate
	}
	return ""
}

func (x *PostgresOperatorKubernetesBackupConfig) GetBackupSchedule() string {
	if x != nil {
		return x.BackupSchedule
	}
	return ""
}

func (x *PostgresOperatorKubernetesBackupConfig) GetEnableWalGBackup() bool {
	if x != nil {
		return x.EnableWalGBackup
	}
	return false
}

func (x *PostgresOperatorKubernetesBackupConfig) GetEnableWalGRestore() bool {
	if x != nil {
		return x.EnableWalGRestore
	}
	return false
}

func (x *PostgresOperatorKubernetesBackupConfig) GetEnableCloneWalGRestore() bool {
	if x != nil {
		return x.EnableCloneWalGRestore
	}
	return false
}

// **PostgresOperatorKubernetesSpec** defines the configuration for deploying GitLab on a Kubernetes cluster.
// This message specifies the parameters needed to create and manage a GitLab deployment within a Kubernetes environment.
// It includes container specifications and ingress settings to control resource allocation and external access.
type PostgresOperatorKubernetesSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Kubernetes cluster to install this addon on.
	TargetCluster *kubernetes.KubernetesAddonTargetCluster `protobuf:"bytes,1,opt,name=target_cluster,json=targetCluster,proto3" json:"target_cluster,omitempty"`
	// The container specifications for the GitLab deployment.
	Container *PostgresOperatorKubernetesSpecContainer `protobuf:"bytes,2,opt,name=container,proto3" json:"container,omitempty"`
	// Optional: Backup configuration for all databases managed by this operator
	BackupConfig  *PostgresOperatorKubernetesBackupConfig `protobuf:"bytes,3,opt,name=backup_config,json=backupConfig,proto3" json:"backup_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostgresOperatorKubernetesSpec) Reset() {
	*x = PostgresOperatorKubernetesSpec{}
	mi := &file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresOperatorKubernetesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresOperatorKubernetesSpec) ProtoMessage() {}

func (x *PostgresOperatorKubernetesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresOperatorKubernetesSpec.ProtoReflect.Descriptor instead.
func (*PostgresOperatorKubernetesSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *PostgresOperatorKubernetesSpec) GetTargetCluster() *kubernetes.KubernetesAddonTargetCluster {
	if x != nil {
		return x.TargetCluster
	}
	return nil
}

func (x *PostgresOperatorKubernetesSpec) GetContainer() *PostgresOperatorKubernetesSpecContainer {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *PostgresOperatorKubernetesSpec) GetBackupConfig() *PostgresOperatorKubernetesBackupConfig {
	if x != nil {
		return x.BackupConfig
	}
	return nil
}

// **PostgresOperatorKubernetesSpecContainer** specifies the container configuration for the GitLab application.
// It includes resource allocations for CPU and memory to ensure the application runs efficiently.
type PostgresOperatorKubernetesSpecContainer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The CPU and memory resources allocated to the GitLab container.
	Resources     *kubernetes.ContainerResources `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostgresOperatorKubernetesSpecContainer) Reset() {
	*x = PostgresOperatorKubernetesSpecContainer{}
	mi := &file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostgresOperatorKubernetesSpecContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresOperatorKubernetesSpecContainer) ProtoMessage() {}

func (x *PostgresOperatorKubernetesSpecContainer) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresOperatorKubernetesSpecContainer.ProtoReflect.Descriptor instead.
func (*PostgresOperatorKubernetesSpecContainer) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_rawDescGZIP(), []int{3}
}

func (x *PostgresOperatorKubernetesSpecContainer) GetResources() *kubernetes.ContainerResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

var File_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_rawDesc = "" +
	"\n" +
	"Rproject/planton/provider/kubernetes/addon/postgresoperatorkubernetes/v1/spec.proto\x12Gproject.planton.provider.kubernetes.addon.postgresoperatorkubernetes.v1\x1a\x1bbuf/validate/validate.proto\x1a2project/planton/shared/kubernetes/kubernetes.proto\x1a/project/planton/shared/kubernetes/options.proto\x1a6project/planton/shared/kubernetes/target_cluster.proto\"\xff\x01\n" +
	"(PostgresOperatorKubernetesBackupR2Config\x12>\n" +
	"\x15cloudflare_account_id\x18\x01 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x10\x01R\x13cloudflareAccountId\x12+\n" +
	"\vbucket_name\x18\x02 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x10\x01R\n" +
	"bucketName\x12.\n" +
	"\raccess_key_id\x18\x03 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x10\x01R\vaccessKeyId\x126\n" +
	"\x11secret_access_key\x18\x04 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x10\x01R\x0fsecretAccessKey\"\xc0\x03\n" +
	"&PostgresOperatorKubernetesBackupConfig\x12\x96\x01\n" +
	"\tr2_config\x18\x01 \x01(\v2q.project.planton.provider.kubernetes.addon.postgresoperatorkubernetes.v1.PostgresOperatorKubernetesBackupR2ConfigB\x06\xbaH\x03\xc8\x01\x01R\br2Config\x12,\n" +
	"\x12s3_prefix_template\x18\x02 \x01(\tR\x10s3PrefixTemplate\x123\n" +
	"\x0fbackup_schedule\x18\x03 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x10\x01R\x0ebackupSchedule\x12-\n" +
	"\x13enable_wal_g_backup\x18\x04 \x01(\bR\x10enableWalGBackup\x12/\n" +
	"\x14enable_wal_g_restore\x18\x05 \x01(\bR\x11enableWalGRestore\x12:\n" +
	"\x1aenable_clone_wal_g_restore\x18\x06 \x01(\bR\x16enableCloneWalGRestore\"\xb8\x03\n" +
	"\x1ePostgresOperatorKubernetesSpec\x12f\n" +
	"\x0etarget_cluster\x18\x01 \x01(\v2?.project.planton.shared.kubernetes.KubernetesAddonTargetClusterR\rtargetCluster\x12\x96\x01\n" +
	"\tcontainer\x18\x02 \x01(\v2p.project.planton.provider.kubernetes.addon.postgresoperatorkubernetes.v1.PostgresOperatorKubernetesSpecContainerB\x06\xbaH\x03\xc8\x01\x01R\tcontainer\x12\x94\x01\n" +
	"\rbackup_config\x18\x03 \x01(\v2o.project.planton.provider.kubernetes.addon.postgresoperatorkubernetes.v1.PostgresOperatorKubernetesBackupConfigR\fbackupConfig\"\xa1\x01\n" +
	"'PostgresOperatorKubernetesSpecContainer\x12v\n" +
	"\tresources\x18\x01 \x01(\v25.project.planton.shared.kubernetes.ContainerResourcesB!\xba\xfb\xa4\x02\x1c\n" +
	"\f\n" +
	"\x051000m\x12\x031Gi\x12\f\n" +
	"\x0350m\x12\x05100MiR\tresourcesB\xb4\x04\n" +
	"Kcom.project.planton.provider.kubernetes.addon.postgresoperatorkubernetes.v1B\tSpecProtoP\x01Z\x94\x01github.com/project-planton/project-planton/apis/project/planton/provider/kubernetes/addon/postgresoperatorkubernetes/v1;postgresoperatorkubernetesv1\xa2\x02\x06PPPKAP\xaa\x02GProject.Planton.Provider.Kubernetes.Addon.Postgresoperatorkubernetes.V1\xca\x02GProject\\Planton\\Provider\\Kubernetes\\Addon\\Postgresoperatorkubernetes\\V1\xe2\x02SProject\\Planton\\Provider\\Kubernetes\\Addon\\Postgresoperatorkubernetes\\V1\\GPBMetadata\xea\x02MProject::Planton::Provider::Kubernetes::Addon::Postgresoperatorkubernetes::V1b\x06proto3"

var (
	file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_rawDesc), len(file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_rawDescData
}

var file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_goTypes = []any{
	(*PostgresOperatorKubernetesBackupR2Config)(nil), // 0: project.planton.provider.kubernetes.addon.postgresoperatorkubernetes.v1.PostgresOperatorKubernetesBackupR2Config
	(*PostgresOperatorKubernetesBackupConfig)(nil),   // 1: project.planton.provider.kubernetes.addon.postgresoperatorkubernetes.v1.PostgresOperatorKubernetesBackupConfig
	(*PostgresOperatorKubernetesSpec)(nil),           // 2: project.planton.provider.kubernetes.addon.postgresoperatorkubernetes.v1.PostgresOperatorKubernetesSpec
	(*PostgresOperatorKubernetesSpecContainer)(nil),  // 3: project.planton.provider.kubernetes.addon.postgresoperatorkubernetes.v1.PostgresOperatorKubernetesSpecContainer
	(*kubernetes.KubernetesAddonTargetCluster)(nil),  // 4: project.planton.shared.kubernetes.KubernetesAddonTargetCluster
	(*kubernetes.ContainerResources)(nil),            // 5: project.planton.shared.kubernetes.ContainerResources
}
var file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_depIdxs = []int32{
	0, // 0: project.planton.provider.kubernetes.addon.postgresoperatorkubernetes.v1.PostgresOperatorKubernetesBackupConfig.r2_config:type_name -> project.planton.provider.kubernetes.addon.postgresoperatorkubernetes.v1.PostgresOperatorKubernetesBackupR2Config
	4, // 1: project.planton.provider.kubernetes.addon.postgresoperatorkubernetes.v1.PostgresOperatorKubernetesSpec.target_cluster:type_name -> project.planton.shared.kubernetes.KubernetesAddonTargetCluster
	3, // 2: project.planton.provider.kubernetes.addon.postgresoperatorkubernetes.v1.PostgresOperatorKubernetesSpec.container:type_name -> project.planton.provider.kubernetes.addon.postgresoperatorkubernetes.v1.PostgresOperatorKubernetesSpecContainer
	1, // 3: project.planton.provider.kubernetes.addon.postgresoperatorkubernetes.v1.PostgresOperatorKubernetesSpec.backup_config:type_name -> project.planton.provider.kubernetes.addon.postgresoperatorkubernetes.v1.PostgresOperatorKubernetesBackupConfig
	5, // 4: project.planton.provider.kubernetes.addon.postgresoperatorkubernetes.v1.PostgresOperatorKubernetesSpecContainer.resources:type_name -> project.planton.shared.kubernetes.ContainerResources
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() {
	file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_init()
}
func file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_init() {
	if File_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_rawDesc), len(file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto = out.File
	file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_goTypes = nil
	file_project_planton_provider_kubernetes_addon_postgresoperatorkubernetes_v1_spec_proto_depIdxs = nil
}
