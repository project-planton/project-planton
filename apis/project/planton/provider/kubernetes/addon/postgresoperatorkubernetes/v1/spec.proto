syntax = "proto3";

package project.planton.provider.kubernetes.addon.postgresoperatorkubernetes.v1;

import "buf/validate/validate.proto";
import "project/planton/shared/kubernetes/kubernetes.proto";
import "project/planton/shared/kubernetes/options.proto";
import "project/planton/shared/kubernetes/target_cluster.proto";

// Cloudflare R2-specific storage configuration for PostgreSQL backups.
// This is separate to allow future support for other S3-compatible backends.
message PostgresOperatorKubernetesBackupR2Config {
  // Cloudflare R2 account ID (used to construct endpoint URL)
  // The endpoint will be: https://<account_id>.r2.cloudflarestorage.com
  string cloudflare_account_id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1
  ];

  // R2 bucket name for storing backups
  string bucket_name = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1
  ];

  // R2 Access Key ID
  // The Pulumi module will create a Kubernetes Secret from these credentials
  string access_key_id = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1
  ];

  // R2 Secret Access Key
  // The Pulumi module will create a Kubernetes Secret from these credentials
  string secret_access_key = 4 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1
  ];
}

// Zalando-specific backup configuration for all PostgreSQL databases managed by this operator.
// This configures the pod_environment_configmap used by Zalando operator for WAL-G backups.
// The Pulumi module will automatically create a Kubernetes Secret from the R2 credentials.
message PostgresOperatorKubernetesBackupConfig {
  // Cloudflare R2 storage configuration (includes credentials)
  PostgresOperatorKubernetesBackupR2Config r2_config = 1 [(buf.validate.field).required = true];

  // Optional: Custom S3 prefix template for WAL-G
  // Default: "backups/$(SCOPE)/$(PGVERSION)"
  // Zalando variables: $(SCOPE) = cluster name, $(PGVERSION) = postgres version
  string s3_prefix_template = 2;

  // Cron schedule for base backups (e.g., "0 2 * * *" for 2 AM daily)
  // This maps to Zalando's BACKUP_SCHEDULE environment variable
  string backup_schedule = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1
  ];

  // Enable WAL-G for backups (default: true)
  // Maps to USE_WALG_BACKUP environment variable
  bool enable_wal_g_backup = 4;

  // Enable WAL-G for restores (default: true)
  // Maps to USE_WALG_RESTORE environment variable
  bool enable_wal_g_restore = 5;

  // Enable WAL-G for clone operations (default: true)
  // Maps to CLONE_USE_WALG_RESTORE environment variable
  bool enable_clone_wal_g_restore = 6;
}

// **PostgresOperatorKubernetesSpec** defines the configuration for deploying GitLab on a Kubernetes cluster.
// This message specifies the parameters needed to create and manage a GitLab deployment within a Kubernetes environment.
// It includes container specifications and ingress settings to control resource allocation and external access.
message PostgresOperatorKubernetesSpec {
  // The Kubernetes cluster to install this addon on.
  project.planton.shared.kubernetes.KubernetesAddonTargetCluster target_cluster = 1;
  // The container specifications for the GitLab deployment.
  PostgresOperatorKubernetesSpecContainer container = 2 [(buf.validate.field).required = true];
  // Optional: Backup configuration for all databases managed by this operator
  PostgresOperatorKubernetesBackupConfig backup_config = 3;
}

// **PostgresOperatorKubernetesSpecContainer** specifies the container configuration for the GitLab application.
// It includes resource allocations for CPU and memory to ensure the application runs efficiently.
message PostgresOperatorKubernetesSpecContainer {
  // The CPU and memory resources allocated to the GitLab container.
  project.planton.shared.kubernetes.ContainerResources resources = 1 [(project.planton.shared.kubernetes.default_container_resources) = {
    limits: {
      cpu: "1000m"
      memory: "1Gi"
    }
    requests: {
      cpu: "50m"
      memory: "100Mi"
    }
  }];
}
