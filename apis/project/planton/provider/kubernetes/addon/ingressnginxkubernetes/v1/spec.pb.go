// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/kubernetes/addon/ingressnginxkubernetes/v1/spec.proto

package ingressnginxkubernetesv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/project-planton/project-planton/apis/project/planton/shared/foreignkey/v1"
	kubernetes "github.com/project-planton/project-planton/apis/project/planton/shared/kubernetes"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// IngressNginxKubernetesSpec defines configuration for ingress‑nginx on any cluster.
type IngressNginxKubernetesSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Kubernetes cluster to install this addon on.
	TargetCluster *kubernetes.KubernetesAddonTargetCluster `protobuf:"bytes,1,opt,name=target_cluster,json=targetCluster,proto3" json:"target_cluster,omitempty"`
	// Upstream Helm chart version tag (e.g. "4.11.1").
	ChartVersion string `protobuf:"bytes,2,opt,name=chart_version,json=chartVersion,proto3" json:"chart_version,omitempty"`
	// Deploy the controller with an **internal** load balancer.
	// The default (false) produces an external LB where the provider supports it.
	Internal bool `protobuf:"varint,3,opt,name=internal,proto3" json:"internal,omitempty"`
	// Provider‑specific glue (exactly one block may be set).
	//
	// Types that are valid to be assigned to ProviderConfig:
	//
	//	*IngressNginxKubernetesSpec_Gke
	//	*IngressNginxKubernetesSpec_Eks
	//	*IngressNginxKubernetesSpec_Aks
	ProviderConfig isIngressNginxKubernetesSpec_ProviderConfig `protobuf_oneof:"provider_config"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *IngressNginxKubernetesSpec) Reset() {
	*x = IngressNginxKubernetesSpec{}
	mi := &file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngressNginxKubernetesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressNginxKubernetesSpec) ProtoMessage() {}

func (x *IngressNginxKubernetesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressNginxKubernetesSpec.ProtoReflect.Descriptor instead.
func (*IngressNginxKubernetesSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *IngressNginxKubernetesSpec) GetTargetCluster() *kubernetes.KubernetesAddonTargetCluster {
	if x != nil {
		return x.TargetCluster
	}
	return nil
}

func (x *IngressNginxKubernetesSpec) GetChartVersion() string {
	if x != nil {
		return x.ChartVersion
	}
	return ""
}

func (x *IngressNginxKubernetesSpec) GetInternal() bool {
	if x != nil {
		return x.Internal
	}
	return false
}

func (x *IngressNginxKubernetesSpec) GetProviderConfig() isIngressNginxKubernetesSpec_ProviderConfig {
	if x != nil {
		return x.ProviderConfig
	}
	return nil
}

func (x *IngressNginxKubernetesSpec) GetGke() *IngressNginxGkeConfig {
	if x != nil {
		if x, ok := x.ProviderConfig.(*IngressNginxKubernetesSpec_Gke); ok {
			return x.Gke
		}
	}
	return nil
}

func (x *IngressNginxKubernetesSpec) GetEks() *IngressNginxEksConfig {
	if x != nil {
		if x, ok := x.ProviderConfig.(*IngressNginxKubernetesSpec_Eks); ok {
			return x.Eks
		}
	}
	return nil
}

func (x *IngressNginxKubernetesSpec) GetAks() *IngressNginxAksConfig {
	if x != nil {
		if x, ok := x.ProviderConfig.(*IngressNginxKubernetesSpec_Aks); ok {
			return x.Aks
		}
	}
	return nil
}

type isIngressNginxKubernetesSpec_ProviderConfig interface {
	isIngressNginxKubernetesSpec_ProviderConfig()
}

type IngressNginxKubernetesSpec_Gke struct {
	Gke *IngressNginxGkeConfig `protobuf:"bytes,100,opt,name=gke,proto3,oneof"`
}

type IngressNginxKubernetesSpec_Eks struct {
	Eks *IngressNginxEksConfig `protobuf:"bytes,101,opt,name=eks,proto3,oneof"`
}

type IngressNginxKubernetesSpec_Aks struct {
	Aks *IngressNginxAksConfig `protobuf:"bytes,102,opt,name=aks,proto3,oneof"`
}

func (*IngressNginxKubernetesSpec_Gke) isIngressNginxKubernetesSpec_ProviderConfig() {}

func (*IngressNginxKubernetesSpec_Eks) isIngressNginxKubernetesSpec_ProviderConfig() {}

func (*IngressNginxKubernetesSpec_Aks) isIngressNginxKubernetesSpec_ProviderConfig() {}

// -----------------------------------------------------------------------------
// Google Kubernetes Engine (GKE) – Cloud Load Balancer options
// -----------------------------------------------------------------------------
type IngressNginxGkeConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of an existing reserved static IP address (global or regional)
	// to be assigned to the load balancer.
	StaticIpName string `protobuf:"bytes,1,opt,name=static_ip_name,json=staticIpName,proto3" json:"static_ip_name,omitempty"`
	// Sub‑network self‑link to use when `internal = true`.
	SubnetworkSelfLink string `protobuf:"bytes,2,opt,name=subnetwork_self_link,json=subnetworkSelfLink,proto3" json:"subnetwork_self_link,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *IngressNginxGkeConfig) Reset() {
	*x = IngressNginxGkeConfig{}
	mi := &file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngressNginxGkeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressNginxGkeConfig) ProtoMessage() {}

func (x *IngressNginxGkeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressNginxGkeConfig.ProtoReflect.Descriptor instead.
func (*IngressNginxGkeConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *IngressNginxGkeConfig) GetStaticIpName() string {
	if x != nil {
		return x.StaticIpName
	}
	return ""
}

func (x *IngressNginxGkeConfig) GetSubnetworkSelfLink() string {
	if x != nil {
		return x.SubnetworkSelfLink
	}
	return ""
}

// -----------------------------------------------------------------------------
// Amazon EKS – Classic ELB/NLB options
// -----------------------------------------------------------------------------
type IngressNginxEksConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Security‑group IDs to attach to the load balancer (adds to the
	// controller‑managed SG).
	AdditionalSecurityGroupIds []*v1.StringValueOrRef `protobuf:"bytes,1,rep,name=additional_security_group_ids,json=additionalSecurityGroupIds,proto3" json:"additional_security_group_ids,omitempty"`
	// Subnet IDs where the ELB/NLB should be placed.  Leave empty to let AWS
	// pick all subnets of the selected scheme (public/private).
	SubnetIds []*v1.StringValueOrRef `protobuf:"bytes,2,rep,name=subnet_ids,json=subnetIds,proto3" json:"subnet_ids,omitempty"`
	// Optional existing IAM role ARN for IRSA.  If empty the stack can
	// auto‑create and wire up a role.
	IrsaRoleArnOverride string `protobuf:"bytes,3,opt,name=irsa_role_arn_override,json=irsaRoleArnOverride,proto3" json:"irsa_role_arn_override,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *IngressNginxEksConfig) Reset() {
	*x = IngressNginxEksConfig{}
	mi := &file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngressNginxEksConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressNginxEksConfig) ProtoMessage() {}

func (x *IngressNginxEksConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressNginxEksConfig.ProtoReflect.Descriptor instead.
func (*IngressNginxEksConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *IngressNginxEksConfig) GetAdditionalSecurityGroupIds() []*v1.StringValueOrRef {
	if x != nil {
		return x.AdditionalSecurityGroupIds
	}
	return nil
}

func (x *IngressNginxEksConfig) GetSubnetIds() []*v1.StringValueOrRef {
	if x != nil {
		return x.SubnetIds
	}
	return nil
}

func (x *IngressNginxEksConfig) GetIrsaRoleArnOverride() string {
	if x != nil {
		return x.IrsaRoleArnOverride
	}
	return ""
}

// -----------------------------------------------------------------------------
// Microsoft AKS – Azure Load Balancer options
// -----------------------------------------------------------------------------
type IngressNginxAksConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Client ID of a user‑assigned managed identity that should be bound to the
	// controller’s ServiceAccount (via Azure Workload Identity).
	ManagedIdentityClientId string `protobuf:"bytes,1,opt,name=managed_identity_client_id,json=managedIdentityClientId,proto3" json:"managed_identity_client_id,omitempty"`
	// Name of a pre‑existing public IP resource to reuse for the load balancer.
	PublicIpName  string `protobuf:"bytes,2,opt,name=public_ip_name,json=publicIpName,proto3" json:"public_ip_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngressNginxAksConfig) Reset() {
	*x = IngressNginxAksConfig{}
	mi := &file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngressNginxAksConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressNginxAksConfig) ProtoMessage() {}

func (x *IngressNginxAksConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressNginxAksConfig.ProtoReflect.Descriptor instead.
func (*IngressNginxAksConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_rawDescGZIP(), []int{3}
}

func (x *IngressNginxAksConfig) GetManagedIdentityClientId() string {
	if x != nil {
		return x.ManagedIdentityClientId
	}
	return ""
}

func (x *IngressNginxAksConfig) GetPublicIpName() string {
	if x != nil {
		return x.PublicIpName
	}
	return ""
}

var File_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_rawDesc = "" +
	"\n" +
	"Nproject/planton/provider/kubernetes/addon/ingressnginxkubernetes/v1/spec.proto\x12Cproject.planton.provider.kubernetes.addon.ingressnginxkubernetes.v1\x1a\x1bbuf/validate/validate.proto\x1a6project/planton/shared/foreignkey/v1/foreign_key.proto\x1a,project/planton/shared/options/options.proto\x1a6project/planton/shared/kubernetes/target_cluster.proto\"\xa8\x04\n" +
	"\x1aIngressNginxKubernetesSpec\x12f\n" +
	"\x0etarget_cluster\x18\x01 \x01(\v2?.project.planton.shared.kubernetes.KubernetesAddonTargetClusterR\rtargetCluster\x12#\n" +
	"\rchart_version\x18\x02 \x01(\tR\fchartVersion\x12\x1a\n" +
	"\binternal\x18\x03 \x01(\bR\binternal\x12n\n" +
	"\x03gke\x18d \x01(\v2Z.project.planton.provider.kubernetes.addon.ingressnginxkubernetes.v1.IngressNginxGkeConfigH\x00R\x03gke\x12n\n" +
	"\x03eks\x18e \x01(\v2Z.project.planton.provider.kubernetes.addon.ingressnginxkubernetes.v1.IngressNginxEksConfigH\x00R\x03eks\x12n\n" +
	"\x03aks\x18f \x01(\v2Z.project.planton.provider.kubernetes.addon.ingressnginxkubernetes.v1.IngressNginxAksConfigH\x00R\x03aksB\x11\n" +
	"\x0fprovider_config\"o\n" +
	"\x15IngressNginxGkeConfig\x12$\n" +
	"\x0estatic_ip_name\x18\x01 \x01(\tR\fstaticIpName\x120\n" +
	"\x14subnetwork_self_link\x18\x02 \x01(\tR\x12subnetworkSelfLink\"\xe7\x02\n" +
	"\x15IngressNginxEksConfig\x12\x95\x01\n" +
	"\x1dadditional_security_group_ids\x18\x01 \x03(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB\x1a\x88\xd4a\xd7\x01\x92\xd4a\x11status.outputs.idR\x1aadditionalSecurityGroupIds\x12\x80\x01\n" +
	"\n" +
	"subnet_ids\x18\x02 \x03(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB)\x88\xd4a\xd9\x01\x92\xd4a status.outputs.public_subnet_idsR\tsubnetIds\x123\n" +
	"\x16irsa_role_arn_override\x18\x03 \x01(\tR\x13irsaRoleArnOverride\"z\n" +
	"\x15IngressNginxAksConfig\x12;\n" +
	"\x1amanaged_identity_client_id\x18\x01 \x01(\tR\x17managedIdentityClientId\x12$\n" +
	"\x0epublic_ip_name\x18\x02 \x01(\tR\fpublicIpNameB\x98\x04\n" +
	"Gcom.project.planton.provider.kubernetes.addon.ingressnginxkubernetes.v1B\tSpecProtoP\x01Z\x8c\x01github.com/project-planton/project-planton/apis/project/planton/provider/kubernetes/addon/ingressnginxkubernetes/v1;ingressnginxkubernetesv1\xa2\x02\x06PPPKAI\xaa\x02CProject.Planton.Provider.Kubernetes.Addon.Ingressnginxkubernetes.V1\xca\x02CProject\\Planton\\Provider\\Kubernetes\\Addon\\Ingressnginxkubernetes\\V1\xe2\x02OProject\\Planton\\Provider\\Kubernetes\\Addon\\Ingressnginxkubernetes\\V1\\GPBMetadata\xea\x02IProject::Planton::Provider::Kubernetes::Addon::Ingressnginxkubernetes::V1b\x06proto3"

var (
	file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_rawDesc), len(file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_rawDescData
}

var file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_goTypes = []any{
	(*IngressNginxKubernetesSpec)(nil),              // 0: project.planton.provider.kubernetes.addon.ingressnginxkubernetes.v1.IngressNginxKubernetesSpec
	(*IngressNginxGkeConfig)(nil),                   // 1: project.planton.provider.kubernetes.addon.ingressnginxkubernetes.v1.IngressNginxGkeConfig
	(*IngressNginxEksConfig)(nil),                   // 2: project.planton.provider.kubernetes.addon.ingressnginxkubernetes.v1.IngressNginxEksConfig
	(*IngressNginxAksConfig)(nil),                   // 3: project.planton.provider.kubernetes.addon.ingressnginxkubernetes.v1.IngressNginxAksConfig
	(*kubernetes.KubernetesAddonTargetCluster)(nil), // 4: project.planton.shared.kubernetes.KubernetesAddonTargetCluster
	(*v1.StringValueOrRef)(nil),                     // 5: project.planton.shared.foreignkey.v1.StringValueOrRef
}
var file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_depIdxs = []int32{
	4, // 0: project.planton.provider.kubernetes.addon.ingressnginxkubernetes.v1.IngressNginxKubernetesSpec.target_cluster:type_name -> project.planton.shared.kubernetes.KubernetesAddonTargetCluster
	1, // 1: project.planton.provider.kubernetes.addon.ingressnginxkubernetes.v1.IngressNginxKubernetesSpec.gke:type_name -> project.planton.provider.kubernetes.addon.ingressnginxkubernetes.v1.IngressNginxGkeConfig
	2, // 2: project.planton.provider.kubernetes.addon.ingressnginxkubernetes.v1.IngressNginxKubernetesSpec.eks:type_name -> project.planton.provider.kubernetes.addon.ingressnginxkubernetes.v1.IngressNginxEksConfig
	3, // 3: project.planton.provider.kubernetes.addon.ingressnginxkubernetes.v1.IngressNginxKubernetesSpec.aks:type_name -> project.planton.provider.kubernetes.addon.ingressnginxkubernetes.v1.IngressNginxAksConfig
	5, // 4: project.planton.provider.kubernetes.addon.ingressnginxkubernetes.v1.IngressNginxEksConfig.additional_security_group_ids:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	5, // 5: project.planton.provider.kubernetes.addon.ingressnginxkubernetes.v1.IngressNginxEksConfig.subnet_ids:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() {
	file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_init()
}
func file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_init() {
	if File_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto != nil {
		return
	}
	file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_msgTypes[0].OneofWrappers = []any{
		(*IngressNginxKubernetesSpec_Gke)(nil),
		(*IngressNginxKubernetesSpec_Eks)(nil),
		(*IngressNginxKubernetesSpec_Aks)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_rawDesc), len(file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto = out.File
	file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_goTypes = nil
	file_project_planton_provider_kubernetes_addon_ingressnginxkubernetes_v1_spec_proto_depIdxs = nil
}
