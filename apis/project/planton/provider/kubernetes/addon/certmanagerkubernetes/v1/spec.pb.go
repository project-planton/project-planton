// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/kubernetes/addon/certmanagerkubernetes/v1/spec.proto

package certmanagerkubernetesv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/project-planton/project-planton/apis/project/planton/shared/foreignkey/v1"
	kubernetes "github.com/project-planton/project-planton/apis/project/planton/shared/kubernetes"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CertManagerKubernetesSpec defines configuration for cert-manager on any cluster.
type CertManagerKubernetesSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Kubernetes cluster to install this addon on.
	TargetCluster *kubernetes.KubernetesAddonTargetCluster `protobuf:"bytes,1,opt,name=target_cluster,json=targetCluster,proto3" json:"target_cluster,omitempty"`
	// Upstream release channel or version tag (e.g. "v1.16").
	ReleaseChannel string `protobuf:"bytes,2,opt,name=release_channel,json=releaseChannel,proto3" json:"release_channel,omitempty"`
	// skip installation of self-signed issuer.
	SkipInstallSelfSignedIssuer bool `protobuf:"varint,3,opt,name=skip_install_self_signed_issuer,json=skipInstallSelfSignedIssuer,proto3" json:"skip_install_self_signed_issuer,omitempty"`
	// Provider‑specific glue. Only one may be set.
	//
	// Types that are valid to be assigned to ProviderConfig:
	//
	//	*CertManagerKubernetesSpec_Gke
	//	*CertManagerKubernetesSpec_Eks
	//	*CertManagerKubernetesSpec_Aks
	ProviderConfig isCertManagerKubernetesSpec_ProviderConfig `protobuf_oneof:"provider_config"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CertManagerKubernetesSpec) Reset() {
	*x = CertManagerKubernetesSpec{}
	mi := &file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertManagerKubernetesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertManagerKubernetesSpec) ProtoMessage() {}

func (x *CertManagerKubernetesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertManagerKubernetesSpec.ProtoReflect.Descriptor instead.
func (*CertManagerKubernetesSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *CertManagerKubernetesSpec) GetTargetCluster() *kubernetes.KubernetesAddonTargetCluster {
	if x != nil {
		return x.TargetCluster
	}
	return nil
}

func (x *CertManagerKubernetesSpec) GetReleaseChannel() string {
	if x != nil {
		return x.ReleaseChannel
	}
	return ""
}

func (x *CertManagerKubernetesSpec) GetSkipInstallSelfSignedIssuer() bool {
	if x != nil {
		return x.SkipInstallSelfSignedIssuer
	}
	return false
}

func (x *CertManagerKubernetesSpec) GetProviderConfig() isCertManagerKubernetesSpec_ProviderConfig {
	if x != nil {
		return x.ProviderConfig
	}
	return nil
}

func (x *CertManagerKubernetesSpec) GetGke() *CertManagerGkeConfig {
	if x != nil {
		if x, ok := x.ProviderConfig.(*CertManagerKubernetesSpec_Gke); ok {
			return x.Gke
		}
	}
	return nil
}

func (x *CertManagerKubernetesSpec) GetEks() *CertManagerEksConfig {
	if x != nil {
		if x, ok := x.ProviderConfig.(*CertManagerKubernetesSpec_Eks); ok {
			return x.Eks
		}
	}
	return nil
}

func (x *CertManagerKubernetesSpec) GetAks() *CertManagerAksConfig {
	if x != nil {
		if x, ok := x.ProviderConfig.(*CertManagerKubernetesSpec_Aks); ok {
			return x.Aks
		}
	}
	return nil
}

type isCertManagerKubernetesSpec_ProviderConfig interface {
	isCertManagerKubernetesSpec_ProviderConfig()
}

type CertManagerKubernetesSpec_Gke struct {
	// Google Cloud Platform (GCP) + Workload Identity.
	Gke *CertManagerGkeConfig `protobuf:"bytes,100,opt,name=gke,proto3,oneof"`
}

type CertManagerKubernetesSpec_Eks struct {
	// Amazon Web Services (AWS) + IAM Roles for Service Accounts (IRSA).
	Eks *CertManagerEksConfig `protobuf:"bytes,101,opt,name=eks,proto3,oneof"`
}

type CertManagerKubernetesSpec_Aks struct {
	// Microsoft Azure (Azure) + Managed Identity.
	Aks *CertManagerAksConfig `protobuf:"bytes,102,opt,name=aks,proto3,oneof"`
}

func (*CertManagerKubernetesSpec_Gke) isCertManagerKubernetesSpec_ProviderConfig() {}

func (*CertManagerKubernetesSpec_Eks) isCertManagerKubernetesSpec_ProviderConfig() {}

func (*CertManagerKubernetesSpec_Aks) isCertManagerKubernetesSpec_ProviderConfig() {}

// Google Cloud DNS + Workload Identity.
type CertManagerGkeConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The GCP project that hosts the DNS zone and the GKE cluster.
	ProjectId *v1.StringValueOrRef `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The GCP DNS zone ID to use for cert-manager.
	DnsZoneId *v1.StringValueOrRef `protobuf:"bytes,2,opt,name=dns_zone_id,json=dnsZoneId,proto3" json:"dns_zone_id,omitempty"`
	// google service account email to use for cert-manager.
	GsaEmail      string `protobuf:"bytes,3,opt,name=gsa_email,json=gsaEmail,proto3" json:"gsa_email,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertManagerGkeConfig) Reset() {
	*x = CertManagerGkeConfig{}
	mi := &file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertManagerGkeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertManagerGkeConfig) ProtoMessage() {}

func (x *CertManagerGkeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertManagerGkeConfig.ProtoReflect.Descriptor instead.
func (*CertManagerGkeConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *CertManagerGkeConfig) GetProjectId() *v1.StringValueOrRef {
	if x != nil {
		return x.ProjectId
	}
	return nil
}

func (x *CertManagerGkeConfig) GetDnsZoneId() *v1.StringValueOrRef {
	if x != nil {
		return x.DnsZoneId
	}
	return nil
}

func (x *CertManagerGkeConfig) GetGsaEmail() string {
	if x != nil {
		return x.GsaEmail
	}
	return ""
}

// AWS Route 53 + IRSA.
type CertManagerEksConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Route53ZoneId *v1.StringValueOrRef   `protobuf:"bytes,1,opt,name=route53_zone_id,json=route53ZoneId,proto3" json:"route53_zone_id,omitempty"`
	// Optional existing IAM role ARN for IRSA; auto‑created if blank.
	IrsaRoleArnOverride string `protobuf:"bytes,2,opt,name=irsa_role_arn_override,json=irsaRoleArnOverride,proto3" json:"irsa_role_arn_override,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CertManagerEksConfig) Reset() {
	*x = CertManagerEksConfig{}
	mi := &file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertManagerEksConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertManagerEksConfig) ProtoMessage() {}

func (x *CertManagerEksConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertManagerEksConfig.ProtoReflect.Descriptor instead.
func (*CertManagerEksConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *CertManagerEksConfig) GetRoute53ZoneId() *v1.StringValueOrRef {
	if x != nil {
		return x.Route53ZoneId
	}
	return nil
}

func (x *CertManagerEksConfig) GetIrsaRoleArnOverride() string {
	if x != nil {
		return x.IrsaRoleArnOverride
	}
	return ""
}

// Azure DNS + Managed Identity.
type CertManagerAksConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Azure DNS zone ID to use for cert-manager.
	DnsZoneId string `protobuf:"bytes,1,opt,name=dns_zone_id,json=dnsZoneId,proto3" json:"dns_zone_id,omitempty"`
	// Optional existing managed identity client ID.
	ManagedIdentityClientId string `protobuf:"bytes,2,opt,name=managed_identity_client_id,json=managedIdentityClientId,proto3" json:"managed_identity_client_id,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CertManagerAksConfig) Reset() {
	*x = CertManagerAksConfig{}
	mi := &file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertManagerAksConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertManagerAksConfig) ProtoMessage() {}

func (x *CertManagerAksConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertManagerAksConfig.ProtoReflect.Descriptor instead.
func (*CertManagerAksConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_rawDescGZIP(), []int{3}
}

func (x *CertManagerAksConfig) GetDnsZoneId() string {
	if x != nil {
		return x.DnsZoneId
	}
	return ""
}

func (x *CertManagerAksConfig) GetManagedIdentityClientId() string {
	if x != nil {
		return x.ManagedIdentityClientId
	}
	return ""
}

var File_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_rawDesc = "" +
	"\n" +
	"Mproject/planton/provider/kubernetes/addon/certmanagerkubernetes/v1/spec.proto\x12Bproject.planton.provider.kubernetes.addon.certmanagerkubernetes.v1\x1a\x1bbuf/validate/validate.proto\x1a6project/planton/shared/foreignkey/v1/foreign_key.proto\x1a,project/planton/shared/options/options.proto\x1a6project/planton/shared/kubernetes/target_cluster.proto\"\xdb\x04\n" +
	"\x19CertManagerKubernetesSpec\x12f\n" +
	"\x0etarget_cluster\x18\x01 \x01(\v2?.project.planton.shared.kubernetes.KubernetesAddonTargetClusterR\rtargetCluster\x123\n" +
	"\x0frelease_channel\x18\x02 \x01(\tB\n" +
	"\x8a\xa6\x1d\x06stableR\x0ereleaseChannel\x12D\n" +
	"\x1fskip_install_self_signed_issuer\x18\x03 \x01(\bR\x1bskipInstallSelfSignedIssuer\x12l\n" +
	"\x03gke\x18d \x01(\v2X.project.planton.provider.kubernetes.addon.certmanagerkubernetes.v1.CertManagerGkeConfigH\x00R\x03gke\x12l\n" +
	"\x03eks\x18e \x01(\v2X.project.planton.provider.kubernetes.addon.certmanagerkubernetes.v1.CertManagerEksConfigH\x00R\x03eks\x12l\n" +
	"\x03aks\x18f \x01(\v2X.project.planton.provider.kubernetes.addon.certmanagerkubernetes.v1.CertManagerAksConfigH\x00R\x03aksB\x11\n" +
	"\x0fprovider_config\"\xd8\x02\n" +
	"\x14CertManagerGkeConfig\x12\x7f\n" +
	"\n" +
	"project_id\x18\x01 \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB(\xbaH\x03\xc8\x01\x01\x88\xd4a\xe3\x04\x92\xd4a\x19status.outputs.project_idR\tprojectId\x12}\n" +
	"\vdns_zone_id\x18\x02 \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB%\xbaH\x03\xc8\x01\x01\x88\xd4a\xdd\x04\x92\xd4a\x16status.outputs.zone_idR\tdnsZoneId\x12@\n" +
	"\tgsa_email\x18\x03 \x01(\tB#\xbaH\x03\xc8\x01\x01\x88\xd4a\xe9\x04\x92\xd4a\x14status.outputs.emailR\bgsaEmail\"\xd3\x01\n" +
	"\x14CertManagerEksConfig\x12\x85\x01\n" +
	"\x0froute53_zone_id\x18\x01 \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB%\xbaH\x03\xc8\x01\x01\x88\xd4a\xd4\x01\x92\xd4a\x16status.outputs.zone_idR\rroute53ZoneId\x123\n" +
	"\x16irsa_role_arn_override\x18\x02 \x01(\tR\x13irsaRoleArnOverride\"s\n" +
	"\x14CertManagerAksConfig\x12\x1e\n" +
	"\vdns_zone_id\x18\x01 \x01(\tR\tdnsZoneId\x12;\n" +
	"\x1amanaged_identity_client_id\x18\x02 \x01(\tR\x17managedIdentityClientIdB\x91\x04\n" +
	"Fcom.project.planton.provider.kubernetes.addon.certmanagerkubernetes.v1B\tSpecProtoP\x01Z\x8a\x01github.com/project-planton/project-planton/apis/project/planton/provider/kubernetes/addon/certmanagerkubernetes/v1;certmanagerkubernetesv1\xa2\x02\x06PPPKAC\xaa\x02BProject.Planton.Provider.Kubernetes.Addon.Certmanagerkubernetes.V1\xca\x02BProject\\Planton\\Provider\\Kubernetes\\Addon\\Certmanagerkubernetes\\V1\xe2\x02NProject\\Planton\\Provider\\Kubernetes\\Addon\\Certmanagerkubernetes\\V1\\GPBMetadata\xea\x02HProject::Planton::Provider::Kubernetes::Addon::Certmanagerkubernetes::V1b\x06proto3"

var (
	file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_rawDesc), len(file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_rawDescData
}

var file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_goTypes = []any{
	(*CertManagerKubernetesSpec)(nil),               // 0: project.planton.provider.kubernetes.addon.certmanagerkubernetes.v1.CertManagerKubernetesSpec
	(*CertManagerGkeConfig)(nil),                    // 1: project.planton.provider.kubernetes.addon.certmanagerkubernetes.v1.CertManagerGkeConfig
	(*CertManagerEksConfig)(nil),                    // 2: project.planton.provider.kubernetes.addon.certmanagerkubernetes.v1.CertManagerEksConfig
	(*CertManagerAksConfig)(nil),                    // 3: project.planton.provider.kubernetes.addon.certmanagerkubernetes.v1.CertManagerAksConfig
	(*kubernetes.KubernetesAddonTargetCluster)(nil), // 4: project.planton.shared.kubernetes.KubernetesAddonTargetCluster
	(*v1.StringValueOrRef)(nil),                     // 5: project.planton.shared.foreignkey.v1.StringValueOrRef
}
var file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_depIdxs = []int32{
	4, // 0: project.planton.provider.kubernetes.addon.certmanagerkubernetes.v1.CertManagerKubernetesSpec.target_cluster:type_name -> project.planton.shared.kubernetes.KubernetesAddonTargetCluster
	1, // 1: project.planton.provider.kubernetes.addon.certmanagerkubernetes.v1.CertManagerKubernetesSpec.gke:type_name -> project.planton.provider.kubernetes.addon.certmanagerkubernetes.v1.CertManagerGkeConfig
	2, // 2: project.planton.provider.kubernetes.addon.certmanagerkubernetes.v1.CertManagerKubernetesSpec.eks:type_name -> project.planton.provider.kubernetes.addon.certmanagerkubernetes.v1.CertManagerEksConfig
	3, // 3: project.planton.provider.kubernetes.addon.certmanagerkubernetes.v1.CertManagerKubernetesSpec.aks:type_name -> project.planton.provider.kubernetes.addon.certmanagerkubernetes.v1.CertManagerAksConfig
	5, // 4: project.planton.provider.kubernetes.addon.certmanagerkubernetes.v1.CertManagerGkeConfig.project_id:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	5, // 5: project.planton.provider.kubernetes.addon.certmanagerkubernetes.v1.CertManagerGkeConfig.dns_zone_id:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	5, // 6: project.planton.provider.kubernetes.addon.certmanagerkubernetes.v1.CertManagerEksConfig.route53_zone_id:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() {
	file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_init()
}
func file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_init() {
	if File_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto != nil {
		return
	}
	file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_msgTypes[0].OneofWrappers = []any{
		(*CertManagerKubernetesSpec_Gke)(nil),
		(*CertManagerKubernetesSpec_Eks)(nil),
		(*CertManagerKubernetesSpec_Aks)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_rawDesc), len(file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto = out.File
	file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_goTypes = nil
	file_project_planton_provider_kubernetes_addon_certmanagerkubernetes_v1_spec_proto_depIdxs = nil
}
