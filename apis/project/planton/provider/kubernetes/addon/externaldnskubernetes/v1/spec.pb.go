// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/kubernetes/addon/externaldnskubernetes/v1/spec.proto

package externaldnskubernetesv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/project-planton/project-planton/apis/project/planton/shared/foreignkey/v1"
	kubernetes "github.com/project-planton/project-planton/apis/project/planton/shared/kubernetes"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ExternalDnsKubernetesSpec defines configuration for ExternalDNS on any cluster.
type ExternalDnsKubernetesSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Kubernetes cluster to install this addon on.
	TargetCluster *kubernetes.KubernetesAddonTargetCluster `protobuf:"bytes,1,opt,name=target_cluster,json=targetCluster,proto3" json:"target_cluster,omitempty"`
	// Kubernetes namespace where ExternalDNS will be deployed.
	Namespace *string `protobuf:"bytes,2,opt,name=namespace,proto3,oneof" json:"namespace,omitempty"`
	// ExternalDNS version such as "v0.19.0". Used to set the image tag.
	ExternalDnsVersion *string `protobuf:"bytes,3,opt,name=external_dns_version,json=externalDnsVersion,proto3,oneof" json:"external_dns_version,omitempty"`
	// Helm chart version to deploy. If not specified, uses the default version.
	HelmChartVersion *string `protobuf:"bytes,4,opt,name=helm_chart_version,json=helmChartVersion,proto3,oneof" json:"helm_chart_version,omitempty"`
	// provider-specific glue. Only one may be set.
	//
	// Types that are valid to be assigned to ProviderConfig:
	//
	//	*ExternalDnsKubernetesSpec_Gke
	//	*ExternalDnsKubernetesSpec_Eks
	//	*ExternalDnsKubernetesSpec_Aks
	//	*ExternalDnsKubernetesSpec_Cloudflare
	ProviderConfig isExternalDnsKubernetesSpec_ProviderConfig `protobuf_oneof:"provider_config"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ExternalDnsKubernetesSpec) Reset() {
	*x = ExternalDnsKubernetesSpec{}
	mi := &file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalDnsKubernetesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalDnsKubernetesSpec) ProtoMessage() {}

func (x *ExternalDnsKubernetesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalDnsKubernetesSpec.ProtoReflect.Descriptor instead.
func (*ExternalDnsKubernetesSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *ExternalDnsKubernetesSpec) GetTargetCluster() *kubernetes.KubernetesAddonTargetCluster {
	if x != nil {
		return x.TargetCluster
	}
	return nil
}

func (x *ExternalDnsKubernetesSpec) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *ExternalDnsKubernetesSpec) GetExternalDnsVersion() string {
	if x != nil && x.ExternalDnsVersion != nil {
		return *x.ExternalDnsVersion
	}
	return ""
}

func (x *ExternalDnsKubernetesSpec) GetHelmChartVersion() string {
	if x != nil && x.HelmChartVersion != nil {
		return *x.HelmChartVersion
	}
	return ""
}

func (x *ExternalDnsKubernetesSpec) GetProviderConfig() isExternalDnsKubernetesSpec_ProviderConfig {
	if x != nil {
		return x.ProviderConfig
	}
	return nil
}

func (x *ExternalDnsKubernetesSpec) GetGke() *ExternalDnsGkeConfig {
	if x != nil {
		if x, ok := x.ProviderConfig.(*ExternalDnsKubernetesSpec_Gke); ok {
			return x.Gke
		}
	}
	return nil
}

func (x *ExternalDnsKubernetesSpec) GetEks() *ExternalDnsEksConfig {
	if x != nil {
		if x, ok := x.ProviderConfig.(*ExternalDnsKubernetesSpec_Eks); ok {
			return x.Eks
		}
	}
	return nil
}

func (x *ExternalDnsKubernetesSpec) GetAks() *ExternalDnsAksConfig {
	if x != nil {
		if x, ok := x.ProviderConfig.(*ExternalDnsKubernetesSpec_Aks); ok {
			return x.Aks
		}
	}
	return nil
}

func (x *ExternalDnsKubernetesSpec) GetCloudflare() *ExternalDnsCloudflareConfig {
	if x != nil {
		if x, ok := x.ProviderConfig.(*ExternalDnsKubernetesSpec_Cloudflare); ok {
			return x.Cloudflare
		}
	}
	return nil
}

type isExternalDnsKubernetesSpec_ProviderConfig interface {
	isExternalDnsKubernetesSpec_ProviderConfig()
}

type ExternalDnsKubernetesSpec_Gke struct {
	Gke *ExternalDnsGkeConfig `protobuf:"bytes,200,opt,name=gke,proto3,oneof"`
}

type ExternalDnsKubernetesSpec_Eks struct {
	Eks *ExternalDnsEksConfig `protobuf:"bytes,201,opt,name=eks,proto3,oneof"`
}

type ExternalDnsKubernetesSpec_Aks struct {
	Aks *ExternalDnsAksConfig `protobuf:"bytes,202,opt,name=aks,proto3,oneof"`
}

type ExternalDnsKubernetesSpec_Cloudflare struct {
	Cloudflare *ExternalDnsCloudflareConfig `protobuf:"bytes,203,opt,name=cloudflare,proto3,oneof"`
}

func (*ExternalDnsKubernetesSpec_Gke) isExternalDnsKubernetesSpec_ProviderConfig() {}

func (*ExternalDnsKubernetesSpec_Eks) isExternalDnsKubernetesSpec_ProviderConfig() {}

func (*ExternalDnsKubernetesSpec_Aks) isExternalDnsKubernetesSpec_ProviderConfig() {}

func (*ExternalDnsKubernetesSpec_Cloudflare) isExternalDnsKubernetesSpec_ProviderConfig() {}

// ExternalDnsGkeConfig defines configuration for ExternalDNS on GKE with Google Cloud DNS.
type ExternalDnsGkeConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The GCP project that hosts the DNS zone and the GKE cluster.
	ProjectId *v1.StringValueOrRef `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The GCP DNS zone ID to use for ExternalDNS.
	DnsZoneId     *v1.StringValueOrRef `protobuf:"bytes,2,opt,name=dns_zone_id,json=dnsZoneId,proto3" json:"dns_zone_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExternalDnsGkeConfig) Reset() {
	*x = ExternalDnsGkeConfig{}
	mi := &file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalDnsGkeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalDnsGkeConfig) ProtoMessage() {}

func (x *ExternalDnsGkeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalDnsGkeConfig.ProtoReflect.Descriptor instead.
func (*ExternalDnsGkeConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *ExternalDnsGkeConfig) GetProjectId() *v1.StringValueOrRef {
	if x != nil {
		return x.ProjectId
	}
	return nil
}

func (x *ExternalDnsGkeConfig) GetDnsZoneId() *v1.StringValueOrRef {
	if x != nil {
		return x.DnsZoneId
	}
	return nil
}

// ExternalDnsEksConfig defines configuration for ExternalDNS on EKS with AWS Route53 .
type ExternalDnsEksConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Route53ZoneId *v1.StringValueOrRef   `protobuf:"bytes,1,opt,name=route53_zone_id,json=route53ZoneId,proto3" json:"route53_zone_id,omitempty"`
	// Optional existing IAM role ARN for IRSA; auto-created if blank.
	IrsaRoleArnOverride string `protobuf:"bytes,2,opt,name=irsa_role_arn_override,json=irsaRoleArnOverride,proto3" json:"irsa_role_arn_override,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ExternalDnsEksConfig) Reset() {
	*x = ExternalDnsEksConfig{}
	mi := &file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalDnsEksConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalDnsEksConfig) ProtoMessage() {}

func (x *ExternalDnsEksConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalDnsEksConfig.ProtoReflect.Descriptor instead.
func (*ExternalDnsEksConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *ExternalDnsEksConfig) GetRoute53ZoneId() *v1.StringValueOrRef {
	if x != nil {
		return x.Route53ZoneId
	}
	return nil
}

func (x *ExternalDnsEksConfig) GetIrsaRoleArnOverride() string {
	if x != nil {
		return x.IrsaRoleArnOverride
	}
	return ""
}

// ExternalDnsAksConfig defines configuration for ExternalDNS on AKS with Azure DNS.
type ExternalDnsAksConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Azure DNS zone ID to use for ExternalDNS.
	DnsZoneId string `protobuf:"bytes,1,opt,name=dns_zone_id,json=dnsZoneId,proto3" json:"dns_zone_id,omitempty"`
	// The Azure Managed Identity client ID to use for ExternalDNS.
	ManagedIdentityClientId string `protobuf:"bytes,2,opt,name=managed_identity_client_id,json=managedIdentityClientId,proto3" json:"managed_identity_client_id,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ExternalDnsAksConfig) Reset() {
	*x = ExternalDnsAksConfig{}
	mi := &file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalDnsAksConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalDnsAksConfig) ProtoMessage() {}

func (x *ExternalDnsAksConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalDnsAksConfig.ProtoReflect.Descriptor instead.
func (*ExternalDnsAksConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_rawDescGZIP(), []int{3}
}

func (x *ExternalDnsAksConfig) GetDnsZoneId() string {
	if x != nil {
		return x.DnsZoneId
	}
	return ""
}

func (x *ExternalDnsAksConfig) GetManagedIdentityClientId() string {
	if x != nil {
		return x.ManagedIdentityClientId
	}
	return ""
}

// ExternalDnsCloudflareConfig defines configuration for ExternalDNS with Cloudflare DNS.
type ExternalDnsCloudflareConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cloudflare API token for authentication (scoped with Zone:Zone:Read and Zone:DNS:Edit permissions).
	ApiToken string `protobuf:"bytes,1,opt,name=api_token,json=apiToken,proto3" json:"api_token,omitempty"`
	// Cloudflare DNS zone ID to manage. ExternalDNS will only manage records in this zone.
	DnsZoneId string `protobuf:"bytes,2,opt,name=dns_zone_id,json=dnsZoneId,proto3" json:"dns_zone_id,omitempty"`
	// Enable Cloudflare proxy (orange cloud) for all managed DNS records.
	// When enabled, traffic routes through Cloudflare's edge network for DDoS protection, WAF, and CDN.
	// Default: false
	IsProxied     bool `protobuf:"varint,3,opt,name=is_proxied,json=isProxied,proto3" json:"is_proxied,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExternalDnsCloudflareConfig) Reset() {
	*x = ExternalDnsCloudflareConfig{}
	mi := &file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalDnsCloudflareConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalDnsCloudflareConfig) ProtoMessage() {}

func (x *ExternalDnsCloudflareConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalDnsCloudflareConfig.ProtoReflect.Descriptor instead.
func (*ExternalDnsCloudflareConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_rawDescGZIP(), []int{4}
}

func (x *ExternalDnsCloudflareConfig) GetApiToken() string {
	if x != nil {
		return x.ApiToken
	}
	return ""
}

func (x *ExternalDnsCloudflareConfig) GetDnsZoneId() string {
	if x != nil {
		return x.DnsZoneId
	}
	return ""
}

func (x *ExternalDnsCloudflareConfig) GetIsProxied() bool {
	if x != nil {
		return x.IsProxied
	}
	return false
}

var File_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_rawDesc = "" +
	"\n" +
	"Mproject/planton/provider/kubernetes/addon/externaldnskubernetes/v1/spec.proto\x12Bproject.planton.provider.kubernetes.addon.externaldnskubernetes.v1\x1a\x1bbuf/validate/validate.proto\x1a6project/planton/shared/foreignkey/v1/foreign_key.proto\x1a6project/planton/shared/kubernetes/target_cluster.proto\x1a,project/planton/shared/options/options.proto\"\xde\x06\n" +
	"\x19ExternalDnsKubernetesSpec\x12f\n" +
	"\x0etarget_cluster\x18\x01 \x01(\v2?.project.planton.shared.kubernetes.KubernetesAddonTargetClusterR\rtargetCluster\x123\n" +
	"\tnamespace\x18\x02 \x01(\tB\x10\x8a\xa6\x1d\fexternal-dnsH\x01R\tnamespace\x88\x01\x01\x12B\n" +
	"\x14external_dns_version\x18\x03 \x01(\tB\v\x8a\xa6\x1d\av0.19.0H\x02R\x12externalDnsVersion\x88\x01\x01\x12=\n" +
	"\x12helm_chart_version\x18\x04 \x01(\tB\n" +
	"\x8a\xa6\x1d\x061.19.0H\x03R\x10helmChartVersion\x88\x01\x01\x12m\n" +
	"\x03gke\x18\xc8\x01 \x01(\v2X.project.planton.provider.kubernetes.addon.externaldnskubernetes.v1.ExternalDnsGkeConfigH\x00R\x03gke\x12m\n" +
	"\x03eks\x18\xc9\x01 \x01(\v2X.project.planton.provider.kubernetes.addon.externaldnskubernetes.v1.ExternalDnsEksConfigH\x00R\x03eks\x12m\n" +
	"\x03aks\x18\xca\x01 \x01(\v2X.project.planton.provider.kubernetes.addon.externaldnskubernetes.v1.ExternalDnsAksConfigH\x00R\x03aks\x12\x82\x01\n" +
	"\n" +
	"cloudflare\x18\xcb\x01 \x01(\v2_.project.planton.provider.kubernetes.addon.externaldnskubernetes.v1.ExternalDnsCloudflareConfigH\x00R\n" +
	"cloudflareB\x11\n" +
	"\x0fprovider_configB\f\n" +
	"\n" +
	"_namespaceB\x17\n" +
	"\x15_external_dns_versionB\x15\n" +
	"\x13_helm_chart_version\"\x96\x02\n" +
	"\x14ExternalDnsGkeConfig\x12\x7f\n" +
	"\n" +
	"project_id\x18\x01 \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB(\xbaH\x03\xc8\x01\x01\x88\xd4a\xe3\x04\x92\xd4a\x19status.outputs.project_idR\tprojectId\x12}\n" +
	"\vdns_zone_id\x18\x02 \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB%\xbaH\x03\xc8\x01\x01\x88\xd4a\xdd\x04\x92\xd4a\x16status.outputs.zone_idR\tdnsZoneId\"\xd3\x01\n" +
	"\x14ExternalDnsEksConfig\x12\x85\x01\n" +
	"\x0froute53_zone_id\x18\x01 \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB%\xbaH\x03\xc8\x01\x01\x88\xd4a\xd4\x01\x92\xd4a\x16status.outputs.zone_idR\rroute53ZoneId\x123\n" +
	"\x16irsa_role_arn_override\x18\x02 \x01(\tR\x13irsaRoleArnOverride\"s\n" +
	"\x14ExternalDnsAksConfig\x12\x1e\n" +
	"\vdns_zone_id\x18\x01 \x01(\tR\tdnsZoneId\x12;\n" +
	"\x1amanaged_identity_client_id\x18\x02 \x01(\tR\x17managedIdentityClientId\"\x89\x01\n" +
	"\x1bExternalDnsCloudflareConfig\x12#\n" +
	"\tapi_token\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\bapiToken\x12&\n" +
	"\vdns_zone_id\x18\x02 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\tdnsZoneId\x12\x1d\n" +
	"\n" +
	"is_proxied\x18\x03 \x01(\bR\tisProxiedB\x91\x04\n" +
	"Fcom.project.planton.provider.kubernetes.addon.externaldnskubernetes.v1B\tSpecProtoP\x01Z\x8a\x01github.com/project-planton/project-planton/apis/project/planton/provider/kubernetes/addon/externaldnskubernetes/v1;externaldnskubernetesv1\xa2\x02\x06PPPKAE\xaa\x02BProject.Planton.Provider.Kubernetes.Addon.Externaldnskubernetes.V1\xca\x02BProject\\Planton\\Provider\\Kubernetes\\Addon\\Externaldnskubernetes\\V1\xe2\x02NProject\\Planton\\Provider\\Kubernetes\\Addon\\Externaldnskubernetes\\V1\\GPBMetadata\xea\x02HProject::Planton::Provider::Kubernetes::Addon::Externaldnskubernetes::V1b\x06proto3"

var (
	file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_rawDesc), len(file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_rawDescData
}

var file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_goTypes = []any{
	(*ExternalDnsKubernetesSpec)(nil),               // 0: project.planton.provider.kubernetes.addon.externaldnskubernetes.v1.ExternalDnsKubernetesSpec
	(*ExternalDnsGkeConfig)(nil),                    // 1: project.planton.provider.kubernetes.addon.externaldnskubernetes.v1.ExternalDnsGkeConfig
	(*ExternalDnsEksConfig)(nil),                    // 2: project.planton.provider.kubernetes.addon.externaldnskubernetes.v1.ExternalDnsEksConfig
	(*ExternalDnsAksConfig)(nil),                    // 3: project.planton.provider.kubernetes.addon.externaldnskubernetes.v1.ExternalDnsAksConfig
	(*ExternalDnsCloudflareConfig)(nil),             // 4: project.planton.provider.kubernetes.addon.externaldnskubernetes.v1.ExternalDnsCloudflareConfig
	(*kubernetes.KubernetesAddonTargetCluster)(nil), // 5: project.planton.shared.kubernetes.KubernetesAddonTargetCluster
	(*v1.StringValueOrRef)(nil),                     // 6: project.planton.shared.foreignkey.v1.StringValueOrRef
}
var file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_depIdxs = []int32{
	5, // 0: project.planton.provider.kubernetes.addon.externaldnskubernetes.v1.ExternalDnsKubernetesSpec.target_cluster:type_name -> project.planton.shared.kubernetes.KubernetesAddonTargetCluster
	1, // 1: project.planton.provider.kubernetes.addon.externaldnskubernetes.v1.ExternalDnsKubernetesSpec.gke:type_name -> project.planton.provider.kubernetes.addon.externaldnskubernetes.v1.ExternalDnsGkeConfig
	2, // 2: project.planton.provider.kubernetes.addon.externaldnskubernetes.v1.ExternalDnsKubernetesSpec.eks:type_name -> project.planton.provider.kubernetes.addon.externaldnskubernetes.v1.ExternalDnsEksConfig
	3, // 3: project.planton.provider.kubernetes.addon.externaldnskubernetes.v1.ExternalDnsKubernetesSpec.aks:type_name -> project.planton.provider.kubernetes.addon.externaldnskubernetes.v1.ExternalDnsAksConfig
	4, // 4: project.planton.provider.kubernetes.addon.externaldnskubernetes.v1.ExternalDnsKubernetesSpec.cloudflare:type_name -> project.planton.provider.kubernetes.addon.externaldnskubernetes.v1.ExternalDnsCloudflareConfig
	6, // 5: project.planton.provider.kubernetes.addon.externaldnskubernetes.v1.ExternalDnsGkeConfig.project_id:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	6, // 6: project.planton.provider.kubernetes.addon.externaldnskubernetes.v1.ExternalDnsGkeConfig.dns_zone_id:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	6, // 7: project.planton.provider.kubernetes.addon.externaldnskubernetes.v1.ExternalDnsEksConfig.route53_zone_id:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() {
	file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_init()
}
func file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_init() {
	if File_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto != nil {
		return
	}
	file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_msgTypes[0].OneofWrappers = []any{
		(*ExternalDnsKubernetesSpec_Gke)(nil),
		(*ExternalDnsKubernetesSpec_Eks)(nil),
		(*ExternalDnsKubernetesSpec_Aks)(nil),
		(*ExternalDnsKubernetesSpec_Cloudflare)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_rawDesc), len(file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto = out.File
	file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_goTypes = nil
	file_project_planton_provider_kubernetes_addon_externaldnskubernetes_v1_spec_proto_depIdxs = nil
}
