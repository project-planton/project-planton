syntax = "proto3";

package project.planton.provider.kubernetes.locustkubernetes.v1;

import "buf/validate/validate.proto";
import "project/planton/shared/kubernetes/kubernetes.proto";

// LocustKubernetesSpec defines the overall configuration for a Locust load testing cluster.
// This message encapsulates the environmental context, Kubernetes deployment specifications,
// load testing parameters, and Helm chart values for customizing the deployment.
message LocustKubernetesSpec {
  // kubernetes specifies the configuration settings specific to Kubernetes.
  //master-locust-container spec
  LocustKubernetesContainer master_container = 1 [
    (buf.validate.field).required = true
  ];
  //worker-locust-container spec
  LocustKubernetesContainer worker_container = 2 [
    (buf.validate.field).required = true
  ];
  //locust-kubernetes ingress-spec
  project.planton.shared.kubernetes.IngressSpec ingress = 3;

  // load_test defines the parameters of the load test itself, including the main test script,
  // any additional library files, and extra Python pip packages needed for the test execution.
  // This specification directs how the Locust nodes will simulate traffic and interact with the target application.
  LocustKubernetesLoadTest load_test = 4;

  // helm_values is a map of key-value pairs that provide additional customization options for the Helm chart used
  // to deploy the Locust cluster. These values allow for further refinement of the deployment, such as customizing
  // resource limits, setting environment variables, or specifying version tags. For detailed information on the available
  // options, refer to the Helm chart documentation at:
  // https://github.com/deliveryhero/helm-charts/tree/master/stable/locust#values
  map<string, string> helm_values = 5;
}

// locust-kubernetes kubernetes locust-container spec
message LocustKubernetesContainer {
  //locust container cpu and memory resources.
  //recommended default "cpu-requests: 50m, memory-requests: 256Mi, cpu-limits: 1, memory-limits: 1Gi"
  project.planton.shared.kubernetes.ContainerResources resources = 1 [
    (buf.validate.field).required = true
  ];
  // number of replicas
  int32 replicas = 2 [
    (buf.validate.field).required = true
  ];
}

// LocustKubernetesSpecLoadTestSpec defines the specification for a load test using a Locust cluster.
// This message includes the primary Python script for Locust and any additional library files
// necessary to execute the load test.
message LocustKubernetesLoadTest {
  // name specifies the unique identifier or name for this particular load test specification.
  // It is used to reference or distinguish this test configuration among others within a testing suite or environment.
  string name = 1 [
    (buf.validate.field).required = true
  ];

  // main_py_content contains the Python code for the main Locust test script.
  // This script defines the behavior of the simulated users and is crucial for executing the load test.
  string main_py_content = 2 [
    (buf.validate.field).required = true
  ];

  // lib_files_content is a map where each entry consists of a filename and its associated Python code content.
  // These files typically contain additional classes or functions required by the main_py_content script.
  // The key of the map is the filename, and the value is the file content.
  map<string,string> lib_files_content = 3 [
    (buf.validate.field).required = true
  ];

  // pip_packages lists extra python pip packages that are required for the load test.
  // These packages will be installed in the environment where the load test is executed,
  // allowing for extended functionality or custom dependencies to be included easily.
  repeated string pip_packages = 4;
}
