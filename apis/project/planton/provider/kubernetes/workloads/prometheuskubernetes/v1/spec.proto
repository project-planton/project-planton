syntax = "proto3";

package project.planton.provider.kubernetes.workloads.prometheuskubernetes.v1;

import "buf/validate/validate.proto";
import "project/planton/shared/kubernetes/kubernetes.proto";
import "project/planton/shared/kubernetes/options.proto";
import "project/planton/shared/options/options.proto";

/**
 * **PrometheusKubernetesSpec** defines the configuration for deploying Prometheus on a Kubernetes cluster.
 * This message specifies the parameters needed to create and manage a Prometheus deployment within a Kubernetes environment.
 * It includes container specifications and ingress settings to control resource allocation and external access.
 */
message PrometheusKubernetesSpec {
  // The container specifications for the Prometheus deployment.
  PrometheusKubernetesContainer container = 1 [
    (buf.validate.field).required = true
  ];

  /**
   * The ingress configuration for the Prometheus deployment.
   */
  project.planton.shared.kubernetes.IngressSpec ingress = 2;
}

/**
 * **PrometheusKubernetesContainer** specifies the container configuration for the Prometheus application.
 * It includes resource allocations for CPU and memory, the number of replicas, data persistence options, and disk size.
 * Proper configuration ensures optimal performance and data reliability for your Prometheus deployment.
 */
message PrometheusKubernetesContainer {
  // The number of Prometheus pods to deploy.
  int32 replicas = 1 [
    (project.planton.shared.options.recommended_default) = "1"
  ];

  //The CPU and memory resources allocated to the Prometheus container.
  project.planton.shared.kubernetes.ContainerResources resources = 2 [
    (project.planton.shared.kubernetes.default_container_resources) = {
      limits {
        cpu: "1000m"
        memory: "1Gi"
      },
      requests {
        cpu: "50m"
        memory: "100Mi"
      }
    }
  ];

  /**
   * A flag to enable or disable data persistence for Prometheus.
   * When enabled, in-memory data is persisted to a storage volume, allowing data to survive pod restarts.
   * The backup data from the persistent volume is restored into Prometheus memory between pod restarts.
   * Defaults to `false`.
   */
  bool is_persistence_enabled = 3;

  /**
   * The size of the persistent volume attached to each Redis pod (e.g., "10Gi").
   * If the client does not provide a value, a default value is configured.
   * This attribute is ignored when persistence is not enabled.
   * This persistent volume is used for backing up in-memory data.
   * Data from the persistent volume will be restored into memory between pod restarts.
   * **Note:** This value cannot be modified after creation due to Kubernetes limitations on stateful sets.
   */
  option (buf.validate.message).cel = {
    // Consolidated validation logic:
    // If `is_persistence_enabled` is false, `disk_size` can be empty.
    // If `is_persistence_enabled` is true, `disk_size` must be non-empty and match the regex.
    id: "spec.container.disk_size.required",
    expression: "((!this.is_persistence_enabled && (size(this.disk_size) == 0 || this.disk_size == '')) || (this.is_persistence_enabled && size(this.disk_size) > 0 && this.disk_size.matches('^\\\\d+(\\\\.\\\\d+)?\\\\s?(Ki|Mi|Gi|Ti|Pi|Ei|K|M|G|T|P|E)$')))"
    message: "Disk size is required and must match the format if persistence is enabled"
  };

  string disk_size = 4;
}
