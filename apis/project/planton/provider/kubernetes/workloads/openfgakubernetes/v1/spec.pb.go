// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/kubernetes/workloads/openfgakubernetes/v1/spec.proto

package openfgakubernetesv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	kubernetes "github.com/project-planton/project-planton/apis/project/planton/shared/kubernetes"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// **OpenFgaKubernetesSpec** defines the configuration for deploying OpenFGA on a Kubernetes cluster.
// This message specifies the parameters needed to create and manage an OpenFGA deployment within a Kubernetes environment.
// It includes container specifications, ingress settings, and data store configurations to control resource allocation,
// external access, and backend storage options.
type OpenFgaKubernetesSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The container specifications for the OpenFGA deployment.
	Container *OpenFgaKubernetesContainer `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	// *
	// The ingress configuration for the OpenFGA deployment.
	Ingress *kubernetes.IngressSpec `protobuf:"bytes,2,opt,name=ingress,proto3" json:"ingress,omitempty"`
	// *
	// The data store configuration for OpenFGA.
	// This specifies the backend database engine and connection details.
	Datastore     *OpenFgaKubernetesDataStore `protobuf:"bytes,3,opt,name=datastore,proto3" json:"datastore,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OpenFgaKubernetesSpec) Reset() {
	*x = OpenFgaKubernetesSpec{}
	mi := &file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenFgaKubernetesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenFgaKubernetesSpec) ProtoMessage() {}

func (x *OpenFgaKubernetesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenFgaKubernetesSpec.ProtoReflect.Descriptor instead.
func (*OpenFgaKubernetesSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *OpenFgaKubernetesSpec) GetContainer() *OpenFgaKubernetesContainer {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *OpenFgaKubernetesSpec) GetIngress() *kubernetes.IngressSpec {
	if x != nil {
		return x.Ingress
	}
	return nil
}

func (x *OpenFgaKubernetesSpec) GetDatastore() *OpenFgaKubernetesDataStore {
	if x != nil {
		return x.Datastore
	}
	return nil
}

// *
// **OpenFgaKubernetesContainer** specifies the container configuration for the OpenFGA application.
// It includes resource allocations for CPU and memory to ensure the application runs efficiently,
// and the number of replicas for scaling purposes.
// Recommended defaults: CPU requests - 50m, Memory requests - 256Mi, CPU limits - 1, Memory limits - 1Gi.
type OpenFgaKubernetesContainer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of OpenFGA replicas to deploy. This determines the level of concurrency and availability.
	Replicas int32 `protobuf:"varint,1,opt,name=replicas,proto3" json:"replicas,omitempty"`
	// The CPU and memory resources allocated to the OpenFGA container.
	Resources     *kubernetes.ContainerResources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OpenFgaKubernetesContainer) Reset() {
	*x = OpenFgaKubernetesContainer{}
	mi := &file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenFgaKubernetesContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenFgaKubernetesContainer) ProtoMessage() {}

func (x *OpenFgaKubernetesContainer) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenFgaKubernetesContainer.ProtoReflect.Descriptor instead.
func (*OpenFgaKubernetesContainer) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *OpenFgaKubernetesContainer) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *OpenFgaKubernetesContainer) GetResources() *kubernetes.ContainerResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

// *
// **OpenFgaKubernetesDataStore** represents the configuration for the OpenFGA data store in a Kubernetes deployment.
// It specifies the type of database engine to use and the URI for connecting to the database.
type OpenFgaKubernetesDataStore struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// Specifies the type of data store engine to use.
	// Allowed values are "mysql" for MySQL database and "postgres" for PostgreSQL database.
	Engine string `protobuf:"bytes,1,opt,name=engine,proto3" json:"engine,omitempty"`
	// *
	// Specifies the URI to connect to the selected data store engine.
	// The URI format should be appropriate for the specified engine:
	// - For MySQL: `mysql://user:password@host:port/database`
	// - For PostgreSQL: `postgres://user:password@host:port/database`
	Uri           string `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OpenFgaKubernetesDataStore) Reset() {
	*x = OpenFgaKubernetesDataStore{}
	mi := &file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenFgaKubernetesDataStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenFgaKubernetesDataStore) ProtoMessage() {}

func (x *OpenFgaKubernetesDataStore) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenFgaKubernetesDataStore.ProtoReflect.Descriptor instead.
func (*OpenFgaKubernetesDataStore) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *OpenFgaKubernetesDataStore) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *OpenFgaKubernetesDataStore) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

var file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*OpenFgaKubernetesContainer)(nil),
		Field:         531001,
		Name:          "project.planton.provider.kubernetes.workloads.openfgakubernetes.v1.default_container",
		Tag:           "bytes,531001,opt,name=default_container",
		Filename:      "project/planton/provider/kubernetes/workloads/openfgakubernetes/v1/spec.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional project.planton.provider.kubernetes.workloads.openfgakubernetes.v1.OpenFgaKubernetesContainer default_container = 531001;
	E_DefaultContainer = &file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_extTypes[0]
)

var File_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_rawDesc = "" +
	"\n" +
	"Mproject/planton/provider/kubernetes/workloads/openfgakubernetes/v1/spec.proto\x12Bproject.planton.provider.kubernetes.workloads.openfgakubernetes.v1\x1a\x1bbuf/validate/validate.proto\x1a google/protobuf/descriptor.proto\x1a2project/planton/shared/kubernetes/kubernetes.proto\x1a/project/planton/shared/kubernetes/options.proto\"\x8e\x03\n" +
	"\x15OpenFgaKubernetesSpec\x12\xa3\x01\n" +
	"\tcontainer\x18\x01 \x01(\v2^.project.planton.provider.kubernetes.workloads.openfgakubernetes.v1.OpenFgaKubernetesContainerB%Ê£\x83\x02 \b\x01\x12\x1c\n" +
	"\f\n" +
	"\x051000m\x12\x031Gi\x12\f\n" +
	"\x0350m\x12\x05100MiR\tcontainer\x12H\n" +
	"\aingress\x18\x02 \x01(\v2..project.planton.shared.kubernetes.IngressSpecR\aingress\x12\x84\x01\n" +
	"\tdatastore\x18\x03 \x01(\v2^.project.planton.provider.kubernetes.workloads.openfgakubernetes.v1.OpenFgaKubernetesDataStoreB\x06\xbaH\x03\xc8\x01\x01R\tdatastore\"\x8d\x01\n" +
	"\x1aOpenFgaKubernetesContainer\x12\x1a\n" +
	"\breplicas\x18\x01 \x01(\x05R\breplicas\x12S\n" +
	"\tresources\x18\x02 \x01(\v25.project.planton.shared.kubernetes.ContainerResourcesR\tresources\"\xcd\x01\n" +
	"\x1aOpenFgaKubernetesDataStore\x12\x94\x01\n" +
	"\x06engine\x18\x01 \x01(\tB|\xbaHy\xba\x01s\n" +
	"\x15spec.datastore.engine\x12;The datastore engine must be one of \"postgres\" and \"mysql\".\x1a\x1dthis in [\"postgres\", \"mysql\"]\xc8\x01\x01R\x06engine\x12\x18\n" +
	"\x03uri\x18\x02 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x03uri:\xac\x01\n" +
	"\x11default_container\x12\x1d.google.protobuf.FieldOptions\x18\xb9\xb4  \x01(\v2^.project.planton.provider.kubernetes.workloads.openfgakubernetes.v1.OpenFgaKubernetesContainerR\x10defaultContainerB\x8d\x04\n" +
	"Fcom.project.planton.provider.kubernetes.workloads.openfgakubernetes.v1B\tSpecProtoP\x01Z\x86\x01github.com/project-planton/project-planton/apis/project/planton/provider/kubernetes/workloads/openfgakubernetes/v1;openfgakubernetesv1\xa2\x02\x06PPPKWO\xaa\x02BProject.Planton.Provider.Kubernetes.Workloads.Openfgakubernetes.V1\xca\x02BProject\\Planton\\Provider\\Kubernetes\\Workloads\\Openfgakubernetes\\V1\xe2\x02NProject\\Planton\\Provider\\Kubernetes\\Workloads\\Openfgakubernetes\\V1\\GPBMetadata\xea\x02HProject::Planton::Provider::Kubernetes::Workloads::Openfgakubernetes::V1b\x06proto3"

var (
	file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_rawDesc), len(file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_rawDescData
}

var file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_goTypes = []any{
	(*OpenFgaKubernetesSpec)(nil),         // 0: project.planton.provider.kubernetes.workloads.openfgakubernetes.v1.OpenFgaKubernetesSpec
	(*OpenFgaKubernetesContainer)(nil),    // 1: project.planton.provider.kubernetes.workloads.openfgakubernetes.v1.OpenFgaKubernetesContainer
	(*OpenFgaKubernetesDataStore)(nil),    // 2: project.planton.provider.kubernetes.workloads.openfgakubernetes.v1.OpenFgaKubernetesDataStore
	(*kubernetes.IngressSpec)(nil),        // 3: project.planton.shared.kubernetes.IngressSpec
	(*kubernetes.ContainerResources)(nil), // 4: project.planton.shared.kubernetes.ContainerResources
	(*descriptorpb.FieldOptions)(nil),     // 5: google.protobuf.FieldOptions
}
var file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.kubernetes.workloads.openfgakubernetes.v1.OpenFgaKubernetesSpec.container:type_name -> project.planton.provider.kubernetes.workloads.openfgakubernetes.v1.OpenFgaKubernetesContainer
	3, // 1: project.planton.provider.kubernetes.workloads.openfgakubernetes.v1.OpenFgaKubernetesSpec.ingress:type_name -> project.planton.shared.kubernetes.IngressSpec
	2, // 2: project.planton.provider.kubernetes.workloads.openfgakubernetes.v1.OpenFgaKubernetesSpec.datastore:type_name -> project.planton.provider.kubernetes.workloads.openfgakubernetes.v1.OpenFgaKubernetesDataStore
	4, // 3: project.planton.provider.kubernetes.workloads.openfgakubernetes.v1.OpenFgaKubernetesContainer.resources:type_name -> project.planton.shared.kubernetes.ContainerResources
	5, // 4: project.planton.provider.kubernetes.workloads.openfgakubernetes.v1.default_container:extendee -> google.protobuf.FieldOptions
	1, // 5: project.planton.provider.kubernetes.workloads.openfgakubernetes.v1.default_container:type_name -> project.planton.provider.kubernetes.workloads.openfgakubernetes.v1.OpenFgaKubernetesContainer
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	5, // [5:6] is the sub-list for extension type_name
	4, // [4:5] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() {
	file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_init()
}
func file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_init() {
	if File_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_rawDesc), len(file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_msgTypes,
		ExtensionInfos:    file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_extTypes,
	}.Build()
	File_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto = out.File
	file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_goTypes = nil
	file_project_planton_provider_kubernetes_workloads_openfgakubernetes_v1_spec_proto_depIdxs = nil
}
