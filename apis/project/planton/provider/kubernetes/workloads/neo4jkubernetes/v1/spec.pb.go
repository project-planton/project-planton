// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/kubernetes/workloads/neo4jkubernetes/v1/spec.proto

package neo4jkubernetesv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	kubernetes "github.com/project-planton/project-planton/apis/project/planton/shared/kubernetes"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Neo4jKubernetesSpec holds the minimal required fields to deploy a single-node Neo4j Community instance on Kubernetes.
type Neo4JKubernetesSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The specifications for the Neo4j container deployment.
	Container *Neo4JKubernetesContainer `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	// Optional extra memory config for Neo4j (heap, page cache).
	// By default, we rely on Neo4jâ€™s internal defaults if unset.
	MemoryConfig *Neo4JKubernetesMemoryConfig `protobuf:"bytes,3,opt,name=memory_config,json=memoryConfig,proto3" json:"memory_config,omitempty"`
	// The ingress configuration for the Solr deployment.
	Ingress       *kubernetes.IngressSpec `protobuf:"bytes,4,opt,name=ingress,proto3" json:"ingress,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Neo4JKubernetesSpec) Reset() {
	*x = Neo4JKubernetesSpec{}
	mi := &file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Neo4JKubernetesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Neo4JKubernetesSpec) ProtoMessage() {}

func (x *Neo4JKubernetesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Neo4JKubernetesSpec.ProtoReflect.Descriptor instead.
func (*Neo4JKubernetesSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *Neo4JKubernetesSpec) GetContainer() *Neo4JKubernetesContainer {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *Neo4JKubernetesSpec) GetMemoryConfig() *Neo4JKubernetesMemoryConfig {
	if x != nil {
		return x.MemoryConfig
	}
	return nil
}

func (x *Neo4JKubernetesSpec) GetIngress() *kubernetes.IngressSpec {
	if x != nil {
		return x.Ingress
	}
	return nil
}

// Neo4jKubernetesContainer defines the container specifications for the Neo4j deployment.
type Neo4JKubernetesContainer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The CPU and memory resources allocated to the Neo4j container.
	Resources *kubernetes.ContainerResources `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
	// A flag to enable or disable data persistence for Neo4j.
	// When enabled, Neo4j stores its database files on a persistent volume,
	// allowing data to survive pod restarts.
	// Defaults to `false`.
	IsPersistenceEnabled bool `protobuf:"varint,2,opt,name=is_persistence_enabled,json=isPersistenceEnabled,proto3" json:"is_persistence_enabled,omitempty"`
	// Size of the persistent volume if is_persistence_enabled=true (e.g., "10Gi").
	// If is_persistence_enabled=false, this may be ignored or left empty.
	DiskSize      string `protobuf:"bytes,3,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Neo4JKubernetesContainer) Reset() {
	*x = Neo4JKubernetesContainer{}
	mi := &file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Neo4JKubernetesContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Neo4JKubernetesContainer) ProtoMessage() {}

func (x *Neo4JKubernetesContainer) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Neo4JKubernetesContainer.ProtoReflect.Descriptor instead.
func (*Neo4JKubernetesContainer) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *Neo4JKubernetesContainer) GetResources() *kubernetes.ContainerResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *Neo4JKubernetesContainer) GetIsPersistenceEnabled() bool {
	if x != nil {
		return x.IsPersistenceEnabled
	}
	return false
}

func (x *Neo4JKubernetesContainer) GetDiskSize() string {
	if x != nil {
		return x.DiskSize
	}
	return ""
}

// Neo4jKubernetesMemoryConfig sets optional memory parameters for the database.
type Neo4JKubernetesMemoryConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Sets the maximum Java heap size (e.g., "1Gi" or "512m").
	// If omitted, Neo4j uses its default (~512m or auto-detect).
	HeapMax string `protobuf:"bytes,1,opt,name=heap_max,json=heapMax,proto3" json:"heap_max,omitempty"`
	// Sets the page cache size for on-disk data (e.g., "512m").
	// If omitted, Neo4j uses a default or auto-detection.
	PageCache     string `protobuf:"bytes,2,opt,name=page_cache,json=pageCache,proto3" json:"page_cache,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Neo4JKubernetesMemoryConfig) Reset() {
	*x = Neo4JKubernetesMemoryConfig{}
	mi := &file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Neo4JKubernetesMemoryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Neo4JKubernetesMemoryConfig) ProtoMessage() {}

func (x *Neo4JKubernetesMemoryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Neo4JKubernetesMemoryConfig.ProtoReflect.Descriptor instead.
func (*Neo4JKubernetesMemoryConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *Neo4JKubernetesMemoryConfig) GetHeapMax() string {
	if x != nil {
		return x.HeapMax
	}
	return ""
}

func (x *Neo4JKubernetesMemoryConfig) GetPageCache() string {
	if x != nil {
		return x.PageCache
	}
	return ""
}

var file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*Neo4JKubernetesContainer)(nil),
		Field:         5008130,
		Name:          "project.planton.provider.kubernetes.workloads.neo4jkubernetes.v1.default_container",
		Tag:           "bytes,5008130,opt,name=default_container",
		Filename:      "project/planton/provider/kubernetes/workloads/neo4jkubernetes/v1/spec.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional project.planton.provider.kubernetes.workloads.neo4jkubernetes.v1.Neo4jKubernetesContainer default_container = 5008130;
	E_DefaultContainer = &file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_extTypes[0]
)

var File_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_rawDesc = "" +
	"\n" +
	"Kproject/planton/provider/kubernetes/workloads/neo4jkubernetes/v1/spec.proto\x12@project.planton.provider.kubernetes.workloads.neo4jkubernetes.v1\x1a\x1bbuf/validate/validate.proto\x1a2project/planton/shared/kubernetes/kubernetes.proto\x1a/project/planton/shared/kubernetes/options.proto\x1a,project/planton/shared/options/options.proto\x1a google/protobuf/descriptor.proto\"\x89\x03\n" +
	"\x13Neo4jKubernetesSpec\x12\xa2\x01\n" +
	"\tcontainer\x18\x01 \x01(\v2Z.project.planton.provider.kubernetes.workloads.neo4jkubernetes.v1.Neo4jKubernetesContainerB(\x92\xb0\x8d\x13#\n" +
	"\x1c\n" +
	"\f\n" +
	"\x051000m\x12\x031Gi\x12\f\n" +
	"\x0350m\x12\x05100Mi\x1a\x031GiR\tcontainer\x12\x82\x01\n" +
	"\rmemory_config\x18\x03 \x01(\v2].project.planton.provider.kubernetes.workloads.neo4jkubernetes.v1.Neo4jKubernetesMemoryConfigR\fmemoryConfig\x12H\n" +
	"\aingress\x18\x04 \x01(\v2..project.planton.shared.kubernetes.IngressSpecR\aingress\"\xc2\x01\n" +
	"\x18Neo4jKubernetesContainer\x12S\n" +
	"\tresources\x18\x01 \x01(\v25.project.planton.shared.kubernetes.ContainerResourcesR\tresources\x124\n" +
	"\x16is_persistence_enabled\x18\x02 \x01(\bR\x14isPersistenceEnabled\x12\x1b\n" +
	"\tdisk_size\x18\x03 \x01(\tR\bdiskSize\"W\n" +
	"\x1bNeo4jKubernetesMemoryConfig\x12\x19\n" +
	"\bheap_max\x18\x01 \x01(\tR\aheapMax\x12\x1d\n" +
	"\n" +
	"page_cache\x18\x02 \x01(\tR\tpageCache:\xa9\x01\n" +
	"\x11default_container\x12\x1d.google.protobuf.FieldOptions\x18\x82Ö±\x02 \x01(\v2Z.project.planton.provider.kubernetes.workloads.neo4jkubernetes.v1.Neo4jKubernetesContainerR\x10defaultContainerB\xff\x03\n" +
	"Dcom.project.planton.provider.kubernetes.workloads.neo4jkubernetes.v1B\tSpecProtoP\x01Z\x82\x01github.com/project-planton/project-planton/apis/project/planton/provider/kubernetes/workloads/neo4jkubernetes/v1;neo4jkubernetesv1\xa2\x02\x06PPPKWN\xaa\x02@Project.Planton.Provider.Kubernetes.Workloads.Neo4jkubernetes.V1\xca\x02@Project\\Planton\\Provider\\Kubernetes\\Workloads\\Neo4jkubernetes\\V1\xe2\x02LProject\\Planton\\Provider\\Kubernetes\\Workloads\\Neo4jkubernetes\\V1\\GPBMetadata\xea\x02FProject::Planton::Provider::Kubernetes::Workloads::Neo4jkubernetes::V1b\x06proto3"

var (
	file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_rawDesc), len(file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_rawDescData
}

var file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_goTypes = []any{
	(*Neo4JKubernetesSpec)(nil),           // 0: project.planton.provider.kubernetes.workloads.neo4jkubernetes.v1.Neo4jKubernetesSpec
	(*Neo4JKubernetesContainer)(nil),      // 1: project.planton.provider.kubernetes.workloads.neo4jkubernetes.v1.Neo4jKubernetesContainer
	(*Neo4JKubernetesMemoryConfig)(nil),   // 2: project.planton.provider.kubernetes.workloads.neo4jkubernetes.v1.Neo4jKubernetesMemoryConfig
	(*kubernetes.IngressSpec)(nil),        // 3: project.planton.shared.kubernetes.IngressSpec
	(*kubernetes.ContainerResources)(nil), // 4: project.planton.shared.kubernetes.ContainerResources
	(*descriptorpb.FieldOptions)(nil),     // 5: google.protobuf.FieldOptions
}
var file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.kubernetes.workloads.neo4jkubernetes.v1.Neo4jKubernetesSpec.container:type_name -> project.planton.provider.kubernetes.workloads.neo4jkubernetes.v1.Neo4jKubernetesContainer
	2, // 1: project.planton.provider.kubernetes.workloads.neo4jkubernetes.v1.Neo4jKubernetesSpec.memory_config:type_name -> project.planton.provider.kubernetes.workloads.neo4jkubernetes.v1.Neo4jKubernetesMemoryConfig
	3, // 2: project.planton.provider.kubernetes.workloads.neo4jkubernetes.v1.Neo4jKubernetesSpec.ingress:type_name -> project.planton.shared.kubernetes.IngressSpec
	4, // 3: project.planton.provider.kubernetes.workloads.neo4jkubernetes.v1.Neo4jKubernetesContainer.resources:type_name -> project.planton.shared.kubernetes.ContainerResources
	5, // 4: project.planton.provider.kubernetes.workloads.neo4jkubernetes.v1.default_container:extendee -> google.protobuf.FieldOptions
	1, // 5: project.planton.provider.kubernetes.workloads.neo4jkubernetes.v1.default_container:type_name -> project.planton.provider.kubernetes.workloads.neo4jkubernetes.v1.Neo4jKubernetesContainer
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	5, // [5:6] is the sub-list for extension type_name
	4, // [4:5] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_init() }
func file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_init() {
	if File_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_rawDesc), len(file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_msgTypes,
		ExtensionInfos:    file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_extTypes,
	}.Build()
	File_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto = out.File
	file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_goTypes = nil
	file_project_planton_provider_kubernetes_workloads_neo4jkubernetes_v1_spec_proto_depIdxs = nil
}
