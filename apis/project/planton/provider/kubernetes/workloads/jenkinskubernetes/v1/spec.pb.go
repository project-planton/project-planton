// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/kubernetes/workloads/jenkinskubernetes/v1/spec.proto

package jenkinskubernetesv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	kubernetes "github.com/project-planton/project-planton/apis/project/planton/shared/kubernetes"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// **JenkinsKubernetesSpec** defines the configuration for deploying Jenkins on a Kubernetes cluster.
// This message specifies the parameters needed to create and manage a Jenkins deployment within a Kubernetes environment.
// It includes container specifications, Helm chart customization options, and ingress settings to control resource allocation
// and external access.
type JenkinsKubernetesSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The CPU and memory resources allocated to the Jenkins container.
	ContainerResources *kubernetes.ContainerResources `protobuf:"bytes,1,opt,name=container_resources,json=containerResources,proto3" json:"container_resources,omitempty"`
	// A map of key-value pairs that provide additional customization options for the Helm chart used to deploy Jenkins.
	// These values allow for further refinement of the deployment, such as customizing resource limits, setting environment variables,
	// or specifying version tags. For detailed information on the available options, refer to the Helm chart documentation at:
	// https://github.com/jenkinsci/helm-charts/blob/main/charts/jenkins/values.yaml
	HelmValues map[string]string `protobuf:"bytes,3,rep,name=helm_values,json=helmValues,proto3" json:"helm_values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The ingress configuration for the Jenkins deployment.
	Ingress       *kubernetes.IngressSpec `protobuf:"bytes,4,opt,name=ingress,proto3" json:"ingress,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JenkinsKubernetesSpec) Reset() {
	*x = JenkinsKubernetesSpec{}
	mi := &file_project_planton_provider_kubernetes_workloads_jenkinskubernetes_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JenkinsKubernetesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JenkinsKubernetesSpec) ProtoMessage() {}

func (x *JenkinsKubernetesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workloads_jenkinskubernetes_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JenkinsKubernetesSpec.ProtoReflect.Descriptor instead.
func (*JenkinsKubernetesSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workloads_jenkinskubernetes_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *JenkinsKubernetesSpec) GetContainerResources() *kubernetes.ContainerResources {
	if x != nil {
		return x.ContainerResources
	}
	return nil
}

func (x *JenkinsKubernetesSpec) GetHelmValues() map[string]string {
	if x != nil {
		return x.HelmValues
	}
	return nil
}

func (x *JenkinsKubernetesSpec) GetIngress() *kubernetes.IngressSpec {
	if x != nil {
		return x.Ingress
	}
	return nil
}

var File_project_planton_provider_kubernetes_workloads_jenkinskubernetes_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_kubernetes_workloads_jenkinskubernetes_v1_spec_proto_rawDesc = "" +
	"\n" +
	"Mproject/planton/provider/kubernetes/workloads/jenkinskubernetes/v1/spec.proto\x12Bproject.planton.provider.kubernetes.workloads.jenkinskubernetes.v1\x1a\x1bbuf/validate/validate.proto\x1a2project/planton/shared/kubernetes/kubernetes.proto\x1a/project/planton/shared/kubernetes/options.proto\"\xb9\x03\n" +
	"\x15JenkinsKubernetesSpec\x12\x89\x01\n" +
	"\x13container_resources\x18\x01 \x01(\v25.project.planton.shared.kubernetes.ContainerResourcesB!\xba\xfb\xa4\x02\x1c\n" +
	"\f\n" +
	"\x051000m\x12\x031Gi\x12\f\n" +
	"\x0350m\x12\x05100MiR\x12containerResources\x12\x8a\x01\n" +
	"\vhelm_values\x18\x03 \x03(\v2i.project.planton.provider.kubernetes.workloads.jenkinskubernetes.v1.JenkinsKubernetesSpec.HelmValuesEntryR\n" +
	"helmValues\x12H\n" +
	"\aingress\x18\x04 \x01(\v2..project.planton.shared.kubernetes.IngressSpecR\aingress\x1a=\n" +
	"\x0fHelmValuesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x8d\x04\n" +
	"Fcom.project.planton.provider.kubernetes.workloads.jenkinskubernetes.v1B\tSpecProtoP\x01Z\x86\x01github.com/project-planton/project-planton/apis/project/planton/provider/kubernetes/workloads/jenkinskubernetes/v1;jenkinskubernetesv1\xa2\x02\x06PPPKWJ\xaa\x02BProject.Planton.Provider.Kubernetes.Workloads.Jenkinskubernetes.V1\xca\x02BProject\\Planton\\Provider\\Kubernetes\\Workloads\\Jenkinskubernetes\\V1\xe2\x02NProject\\Planton\\Provider\\Kubernetes\\Workloads\\Jenkinskubernetes\\V1\\GPBMetadata\xea\x02HProject::Planton::Provider::Kubernetes::Workloads::Jenkinskubernetes::V1b\x06proto3"

var (
	file_project_planton_provider_kubernetes_workloads_jenkinskubernetes_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_kubernetes_workloads_jenkinskubernetes_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_kubernetes_workloads_jenkinskubernetes_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_kubernetes_workloads_jenkinskubernetes_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_kubernetes_workloads_jenkinskubernetes_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_workloads_jenkinskubernetes_v1_spec_proto_rawDesc), len(file_project_planton_provider_kubernetes_workloads_jenkinskubernetes_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_kubernetes_workloads_jenkinskubernetes_v1_spec_proto_rawDescData
}

var file_project_planton_provider_kubernetes_workloads_jenkinskubernetes_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_project_planton_provider_kubernetes_workloads_jenkinskubernetes_v1_spec_proto_goTypes = []any{
	(*JenkinsKubernetesSpec)(nil),         // 0: project.planton.provider.kubernetes.workloads.jenkinskubernetes.v1.JenkinsKubernetesSpec
	nil,                                   // 1: project.planton.provider.kubernetes.workloads.jenkinskubernetes.v1.JenkinsKubernetesSpec.HelmValuesEntry
	(*kubernetes.ContainerResources)(nil), // 2: project.planton.shared.kubernetes.ContainerResources
	(*kubernetes.IngressSpec)(nil),        // 3: project.planton.shared.kubernetes.IngressSpec
}
var file_project_planton_provider_kubernetes_workloads_jenkinskubernetes_v1_spec_proto_depIdxs = []int32{
	2, // 0: project.planton.provider.kubernetes.workloads.jenkinskubernetes.v1.JenkinsKubernetesSpec.container_resources:type_name -> project.planton.shared.kubernetes.ContainerResources
	1, // 1: project.planton.provider.kubernetes.workloads.jenkinskubernetes.v1.JenkinsKubernetesSpec.helm_values:type_name -> project.planton.provider.kubernetes.workloads.jenkinskubernetes.v1.JenkinsKubernetesSpec.HelmValuesEntry
	3, // 2: project.planton.provider.kubernetes.workloads.jenkinskubernetes.v1.JenkinsKubernetesSpec.ingress:type_name -> project.planton.shared.kubernetes.IngressSpec
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() {
	file_project_planton_provider_kubernetes_workloads_jenkinskubernetes_v1_spec_proto_init()
}
func file_project_planton_provider_kubernetes_workloads_jenkinskubernetes_v1_spec_proto_init() {
	if File_project_planton_provider_kubernetes_workloads_jenkinskubernetes_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_workloads_jenkinskubernetes_v1_spec_proto_rawDesc), len(file_project_planton_provider_kubernetes_workloads_jenkinskubernetes_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_kubernetes_workloads_jenkinskubernetes_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_kubernetes_workloads_jenkinskubernetes_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_kubernetes_workloads_jenkinskubernetes_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_kubernetes_workloads_jenkinskubernetes_v1_spec_proto = out.File
	file_project_planton_provider_kubernetes_workloads_jenkinskubernetes_v1_spec_proto_goTypes = nil
	file_project_planton_provider_kubernetes_workloads_jenkinskubernetes_v1_spec_proto_depIdxs = nil
}
