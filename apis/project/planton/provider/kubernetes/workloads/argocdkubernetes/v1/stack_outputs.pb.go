// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/kubernetes/workloads/argocdkubernetes/v1/stack_outputs.proto

package argocdkubernetesv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ArgocdKubernetesStackOutputs struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// kubernetes namespace in which argocd-kubernetes is created.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// kubernetes service name for argocd-kubernetes.
	// ex: main-argocd-kubernetes
	// in the above example, "main" is the name of the argocd-kubernetes
	Service string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	// command to setup port-forwarding to open argocd-kubernetes from developers laptop.
	// this might come handy when argocd-kubernetes ingress is disabled for security reasons.
	// this is rendered by combining argocd_kubernetes_kubernetes_service and kubernetes_namespace
	// ex: kubectl port-forward svc/argocd_kubernetes_kubernetes_service -n kubernetes_namespace 6379:6379
	// running the command from this attribute makes it possible to access argocd-kubernetes using http://localhost:8080/argocd
	PortForwardCommand string `protobuf:"bytes,3,opt,name=port_forward_command,json=portForwardCommand,proto3" json:"port_forward_command,omitempty"`
	// kubernetes endpoint to connect to argocd-kubernetes from the web browser.
	// ex: main-argocd-kubernetes.namespace.svc.cluster.local:6379
	KubeEndpoint string `protobuf:"bytes,4,opt,name=kube_endpoint,json=kubeEndpoint,proto3" json:"kube_endpoint,omitempty"`
	// public endpoint to open argocd-kubernetes from clients outside kubernetes.
	// ex: https://acdk8s-planton-pcs-dev-main.data.dev.planton.live:6379/argocd
	ExternalHostname string `protobuf:"bytes,5,opt,name=external_hostname,json=externalHostname,proto3" json:"external_hostname,omitempty"`
	// public endpoint to open argocd-kubernetes from clients outside kubernetes.
	// ex: https://acdk8s-planton-pcs-dev-main.data-internal.dev.planton.live:6379/argocd
	InternalHostname string `protobuf:"bytes,6,opt,name=internal_hostname,json=internalHostname,proto3" json:"internal_hostname,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ArgocdKubernetesStackOutputs) Reset() {
	*x = ArgocdKubernetesStackOutputs{}
	mi := &file_project_planton_provider_kubernetes_workloads_argocdkubernetes_v1_stack_outputs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArgocdKubernetesStackOutputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgocdKubernetesStackOutputs) ProtoMessage() {}

func (x *ArgocdKubernetesStackOutputs) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workloads_argocdkubernetes_v1_stack_outputs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgocdKubernetesStackOutputs.ProtoReflect.Descriptor instead.
func (*ArgocdKubernetesStackOutputs) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workloads_argocdkubernetes_v1_stack_outputs_proto_rawDescGZIP(), []int{0}
}

func (x *ArgocdKubernetesStackOutputs) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ArgocdKubernetesStackOutputs) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *ArgocdKubernetesStackOutputs) GetPortForwardCommand() string {
	if x != nil {
		return x.PortForwardCommand
	}
	return ""
}

func (x *ArgocdKubernetesStackOutputs) GetKubeEndpoint() string {
	if x != nil {
		return x.KubeEndpoint
	}
	return ""
}

func (x *ArgocdKubernetesStackOutputs) GetExternalHostname() string {
	if x != nil {
		return x.ExternalHostname
	}
	return ""
}

func (x *ArgocdKubernetesStackOutputs) GetInternalHostname() string {
	if x != nil {
		return x.InternalHostname
	}
	return ""
}

var File_project_planton_provider_kubernetes_workloads_argocdkubernetes_v1_stack_outputs_proto protoreflect.FileDescriptor

const file_project_planton_provider_kubernetes_workloads_argocdkubernetes_v1_stack_outputs_proto_rawDesc = "" +
	"\n" +
	"Uproject/planton/provider/kubernetes/workloads/argocdkubernetes/v1/stack_outputs.proto\x12Aproject.planton.provider.kubernetes.workloads.argocdkubernetes.v1\"\x87\x02\n" +
	"\x1cArgocdKubernetesStackOutputs\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x18\n" +
	"\aservice\x18\x02 \x01(\tR\aservice\x120\n" +
	"\x14port_forward_command\x18\x03 \x01(\tR\x12portForwardCommand\x12#\n" +
	"\rkube_endpoint\x18\x04 \x01(\tR\fkubeEndpoint\x12+\n" +
	"\x11external_hostname\x18\x05 \x01(\tR\x10externalHostname\x12+\n" +
	"\x11internal_hostname\x18\x06 \x01(\tR\x10internalHostnameB\x8e\x04\n" +
	"Ecom.project.planton.provider.kubernetes.workloads.argocdkubernetes.v1B\x11StackOutputsProtoP\x01Z\x84\x01github.com/project-planton/project-planton/apis/project/planton/provider/kubernetes/workloads/argocdkubernetes/v1;argocdkubernetesv1\xa2\x02\x06PPPKWA\xaa\x02AProject.Planton.Provider.Kubernetes.Workloads.Argocdkubernetes.V1\xca\x02AProject\\Planton\\Provider\\Kubernetes\\Workloads\\Argocdkubernetes\\V1\xe2\x02MProject\\Planton\\Provider\\Kubernetes\\Workloads\\Argocdkubernetes\\V1\\GPBMetadata\xea\x02GProject::Planton::Provider::Kubernetes::Workloads::Argocdkubernetes::V1b\x06proto3"

var (
	file_project_planton_provider_kubernetes_workloads_argocdkubernetes_v1_stack_outputs_proto_rawDescOnce sync.Once
	file_project_planton_provider_kubernetes_workloads_argocdkubernetes_v1_stack_outputs_proto_rawDescData []byte
)

func file_project_planton_provider_kubernetes_workloads_argocdkubernetes_v1_stack_outputs_proto_rawDescGZIP() []byte {
	file_project_planton_provider_kubernetes_workloads_argocdkubernetes_v1_stack_outputs_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_kubernetes_workloads_argocdkubernetes_v1_stack_outputs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_workloads_argocdkubernetes_v1_stack_outputs_proto_rawDesc), len(file_project_planton_provider_kubernetes_workloads_argocdkubernetes_v1_stack_outputs_proto_rawDesc)))
	})
	return file_project_planton_provider_kubernetes_workloads_argocdkubernetes_v1_stack_outputs_proto_rawDescData
}

var file_project_planton_provider_kubernetes_workloads_argocdkubernetes_v1_stack_outputs_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_provider_kubernetes_workloads_argocdkubernetes_v1_stack_outputs_proto_goTypes = []any{
	(*ArgocdKubernetesStackOutputs)(nil), // 0: project.planton.provider.kubernetes.workloads.argocdkubernetes.v1.ArgocdKubernetesStackOutputs
}
var file_project_planton_provider_kubernetes_workloads_argocdkubernetes_v1_stack_outputs_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() {
	file_project_planton_provider_kubernetes_workloads_argocdkubernetes_v1_stack_outputs_proto_init()
}
func file_project_planton_provider_kubernetes_workloads_argocdkubernetes_v1_stack_outputs_proto_init() {
	if File_project_planton_provider_kubernetes_workloads_argocdkubernetes_v1_stack_outputs_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_workloads_argocdkubernetes_v1_stack_outputs_proto_rawDesc), len(file_project_planton_provider_kubernetes_workloads_argocdkubernetes_v1_stack_outputs_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_kubernetes_workloads_argocdkubernetes_v1_stack_outputs_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_kubernetes_workloads_argocdkubernetes_v1_stack_outputs_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_kubernetes_workloads_argocdkubernetes_v1_stack_outputs_proto_msgTypes,
	}.Build()
	File_project_planton_provider_kubernetes_workloads_argocdkubernetes_v1_stack_outputs_proto = out.File
	file_project_planton_provider_kubernetes_workloads_argocdkubernetes_v1_stack_outputs_proto_goTypes = nil
	file_project_planton_provider_kubernetes_workloads_argocdkubernetes_v1_stack_outputs_proto_depIdxs = nil
}
