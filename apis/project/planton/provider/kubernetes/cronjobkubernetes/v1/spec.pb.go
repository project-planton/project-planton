// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/provider/kubernetes/cronjobkubernetes/v1/spec.proto

package cronjobkubernetesv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	kubernetes "github.com/project-planton/project-planton/apis/project/planton/shared/kubernetes"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// CronJobKubernetesSpec defines the configuration for deploying a cron-job on a Kubernetes cluster.
// This message includes specifications for the container image, resources, environment variables,
// and the cron-job schedule/policy fields. By setting these parameters, you manage how the
// cron-job is deployed, executed, and how concurrency and retries are handled.
type CronJobKubernetesSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// The container image to be used for the application.
	// The `pull_secret_name` is determined by looking up the
	// `container_image_artifact_store_id` from the environment where the cron-job is deployed.
	Image *kubernetes.ContainerImage `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// The CPU and memory resources allocated to the cron-job container.
	Resources *kubernetes.ContainerResources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Environment variables and secrets for the cron-job container.
	Env *CronJobKubernetesContainerAppEnv `protobuf:"bytes,3,opt,name=env,proto3" json:"env,omitempty"`
	// A cron schedule expression in standard Cron format, e.g. "0 0 * * *".
	Schedule string `protobuf:"bytes,4,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// Optional deadline in seconds for starting the job if it misses scheduled time.
	StartingDeadlineSeconds uint64 `protobuf:"varint,5,opt,name=starting_deadline_seconds,json=startingDeadlineSeconds,proto3" json:"starting_deadline_seconds,omitempty"`
	// Concurrency policy, how to treat concurrent job runs. Allowed: "Allow", "Forbid", "Replace".
	ConcurrencyPolicy string `protobuf:"bytes,6,opt,name=concurrency_policy,json=concurrencyPolicy,proto3" json:"concurrency_policy,omitempty"`
	// If true, no subsequent runs are scheduled.
	Suspend bool `protobuf:"varint,7,opt,name=suspend,proto3" json:"suspend,omitempty"`
	// Number of successful finished jobs to retain.
	SuccessfulJobsHistoryLimit uint32 `protobuf:"varint,8,opt,name=successful_jobs_history_limit,json=successfulJobsHistoryLimit,proto3" json:"successful_jobs_history_limit,omitempty"`
	// Number of failed finished jobs to retain.
	FailedJobsHistoryLimit uint32 `protobuf:"varint,9,opt,name=failed_jobs_history_limit,json=failedJobsHistoryLimit,proto3" json:"failed_jobs_history_limit,omitempty"`
	// Number of retries before marking this job as failed.
	BackoffLimit uint32 `protobuf:"varint,10,opt,name=backoff_limit,json=backoffLimit,proto3" json:"backoff_limit,omitempty"`
	// Pod restart policy. Allowed: "Always", "OnFailure", "Never". Typically set to "Never".
	RestartPolicy string `protobuf:"bytes,11,opt,name=restart_policy,json=restartPolicy,proto3" json:"restart_policy,omitempty"`
}

func (x *CronJobKubernetesSpec) Reset() {
	*x = CronJobKubernetesSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronJobKubernetesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronJobKubernetesSpec) ProtoMessage() {}

func (x *CronJobKubernetesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronJobKubernetesSpec.ProtoReflect.Descriptor instead.
func (*CronJobKubernetesSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *CronJobKubernetesSpec) GetImage() *kubernetes.ContainerImage {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *CronJobKubernetesSpec) GetResources() *kubernetes.ContainerResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *CronJobKubernetesSpec) GetEnv() *CronJobKubernetesContainerAppEnv {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *CronJobKubernetesSpec) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

func (x *CronJobKubernetesSpec) GetStartingDeadlineSeconds() uint64 {
	if x != nil {
		return x.StartingDeadlineSeconds
	}
	return 0
}

func (x *CronJobKubernetesSpec) GetConcurrencyPolicy() string {
	if x != nil {
		return x.ConcurrencyPolicy
	}
	return ""
}

func (x *CronJobKubernetesSpec) GetSuspend() bool {
	if x != nil {
		return x.Suspend
	}
	return false
}

func (x *CronJobKubernetesSpec) GetSuccessfulJobsHistoryLimit() uint32 {
	if x != nil {
		return x.SuccessfulJobsHistoryLimit
	}
	return 0
}

func (x *CronJobKubernetesSpec) GetFailedJobsHistoryLimit() uint32 {
	if x != nil {
		return x.FailedJobsHistoryLimit
	}
	return 0
}

func (x *CronJobKubernetesSpec) GetBackoffLimit() uint32 {
	if x != nil {
		return x.BackoffLimit
	}
	return 0
}

func (x *CronJobKubernetesSpec) GetRestartPolicy() string {
	if x != nil {
		return x.RestartPolicy
	}
	return ""
}

// *
// CronJobKubernetesContainerAppEnv defines the environment variables
// and secrets for the cron-job container.
type CronJobKubernetesContainerAppEnv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A map of environment variable names to their values.
	Variables map[string]string `protobuf:"bytes,1,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A map of secret names to their values.
	Secrets map[string]string `protobuf:"bytes,2,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CronJobKubernetesContainerAppEnv) Reset() {
	*x = CronJobKubernetesContainerAppEnv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronJobKubernetesContainerAppEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronJobKubernetesContainerAppEnv) ProtoMessage() {}

func (x *CronJobKubernetesContainerAppEnv) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronJobKubernetesContainerAppEnv.ProtoReflect.Descriptor instead.
func (*CronJobKubernetesContainerAppEnv) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *CronJobKubernetesContainerAppEnv) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *CronJobKubernetesContainerAppEnv) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

var File_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto protoreflect.FileDescriptor

var file_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto_rawDesc = []byte{
	0x0a, 0x43, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x38, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x6a,
	0x6f, 0x62, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a,
	0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb9, 0x06, 0x0a, 0x15, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x47, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x76, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x21, 0xba, 0xfb,
	0xa4, 0x02, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x31, 0x30, 0x30, 0x30, 0x6d, 0x12, 0x03, 0x31, 0x47,
	0x69, 0x12, 0x0c, 0x0a, 0x03, 0x35, 0x30, 0x6d, 0x12, 0x05, 0x31, 0x30, 0x30, 0x4d, 0x69, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x6c, 0x0a, 0x03, 0x65, 0x6e,
	0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x63, 0x72,
	0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x45, 0x6e, 0x76, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x19,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x0b, 0xba, 0x48, 0x03, 0xd8, 0x01, 0x02, 0x8a, 0xa6, 0x1d, 0x01, 0x30, 0x52, 0x17, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x56, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x27, 0xba, 0x48, 0x1a, 0x72, 0x18, 0x52, 0x05, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52,
	0x06, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x52, 0x07, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x8a, 0xa6, 0x1d, 0x06, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x23, 0x0a,
	0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x09,
	0x8a, 0xa6, 0x1d, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x12, 0x48, 0x0a, 0x1d, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x8a, 0xa6, 0x1d, 0x01, 0x33,
	0x52, 0x1a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x4a, 0x6f, 0x62, 0x73,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x40, 0x0a, 0x19,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x5f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x05, 0x8a, 0xa6, 0x1d, 0x01, 0x31, 0x52, 0x16, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4a, 0x6f,
	0x62, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2a,
	0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x8a, 0xa6, 0x1d, 0x01, 0x36, 0x52, 0x0c, 0x62, 0x61,
	0x63, 0x6b, 0x6f, 0x66, 0x66, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x4f, 0x0a, 0x0e, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x28, 0xba, 0x48, 0x1c, 0x72, 0x1a, 0x52, 0x06, 0x41, 0x6c, 0x77, 0x61, 0x79,
	0x73, 0x52, 0x09, 0x4f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x05, 0x4e, 0x65,
	0x76, 0x65, 0x72, 0x8a, 0xa6, 0x1d, 0x05, 0x4e, 0x65, 0x76, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xaa, 0x03, 0x0a, 0x20,
	0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x45, 0x6e, 0x76,
	0x12, 0x87, 0x01, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x6a,
	0x6f, 0x62, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x70, 0x70, 0x45, 0x6e, 0x76,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x07, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x4b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x45, 0x6e, 0x76, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x1a, 0x3c,
	0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0xce, 0x03, 0x0a, 0x3c, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x53, 0x70, 0x65, 0x63, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x7c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x6e,
	0x6a, 0x6f, 0x62, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31,
	0x3b, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x05, 0x50, 0x50, 0x50, 0x4b, 0x43, 0xaa, 0x02, 0x38, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x38, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5c, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5c, 0x43, 0x72,
	0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5c,
	0x56, 0x31, 0xe2, 0x02, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5c, 0x43, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x3d, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3a, 0x3a, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x3a, 0x3a, 0x43, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto_rawDescData = file_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto_rawDesc
)

func file_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto_rawDescData)
	})
	return file_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto_rawDescData
}

var file_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto_goTypes = []any{
	(*CronJobKubernetesSpec)(nil),            // 0: project.planton.provider.kubernetes.cronjobkubernetes.v1.CronJobKubernetesSpec
	(*CronJobKubernetesContainerAppEnv)(nil), // 1: project.planton.provider.kubernetes.cronjobkubernetes.v1.CronJobKubernetesContainerAppEnv
	nil,                                      // 2: project.planton.provider.kubernetes.cronjobkubernetes.v1.CronJobKubernetesContainerAppEnv.VariablesEntry
	nil,                                      // 3: project.planton.provider.kubernetes.cronjobkubernetes.v1.CronJobKubernetesContainerAppEnv.SecretsEntry
	(*kubernetes.ContainerImage)(nil),        // 4: project.planton.shared.kubernetes.ContainerImage
	(*kubernetes.ContainerResources)(nil),    // 5: project.planton.shared.kubernetes.ContainerResources
}
var file_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto_depIdxs = []int32{
	4, // 0: project.planton.provider.kubernetes.cronjobkubernetes.v1.CronJobKubernetesSpec.image:type_name -> project.planton.shared.kubernetes.ContainerImage
	5, // 1: project.planton.provider.kubernetes.cronjobkubernetes.v1.CronJobKubernetesSpec.resources:type_name -> project.planton.shared.kubernetes.ContainerResources
	1, // 2: project.planton.provider.kubernetes.cronjobkubernetes.v1.CronJobKubernetesSpec.env:type_name -> project.planton.provider.kubernetes.cronjobkubernetes.v1.CronJobKubernetesContainerAppEnv
	2, // 3: project.planton.provider.kubernetes.cronjobkubernetes.v1.CronJobKubernetesContainerAppEnv.variables:type_name -> project.planton.provider.kubernetes.cronjobkubernetes.v1.CronJobKubernetesContainerAppEnv.VariablesEntry
	3, // 4: project.planton.provider.kubernetes.cronjobkubernetes.v1.CronJobKubernetesContainerAppEnv.secrets:type_name -> project.planton.provider.kubernetes.cronjobkubernetes.v1.CronJobKubernetesContainerAppEnv.SecretsEntry
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto_init() }
func file_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto_init() {
	if File_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CronJobKubernetesSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CronJobKubernetesContainerAppEnv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto = out.File
	file_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto_rawDesc = nil
	file_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto_goTypes = nil
	file_project_planton_provider_kubernetes_cronjobkubernetes_v1_spec_proto_depIdxs = nil
}
