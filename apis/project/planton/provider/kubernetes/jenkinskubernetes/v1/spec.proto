syntax = "proto3";

package project.planton.provider.kubernetes.jenkinskubernetes.v1;

import "buf/validate/validate.proto";
import "project/planton/shared/kubernetes/kubernetes.proto";
import "project/planton/shared/kubernetes/options.proto";

// **JenkinsKubernetesSpec** defines the configuration for deploying Jenkins on a Kubernetes cluster.
// This message specifies the parameters needed to create and manage a Jenkins deployment within a Kubernetes environment.
// It includes container specifications, Helm chart customization options, and ingress settings to control resource allocation
// and external access.
message JenkinsKubernetesSpec {
  // The container specifications for the Jenkins deployment.
  JenkinsKubernetesSpecContainer container = 1 [
    (buf.validate.field).required = true
  ];

  // A map of key-value pairs that provide additional customization options for the Helm chart used to deploy Jenkins.
  // These values allow for further refinement of the deployment, such as customizing resource limits, setting environment variables,
  // or specifying version tags. For detailed information on the available options, refer to the Helm chart documentation at:
  // https://github.com/jenkinsci/helm-charts/blob/main/charts/jenkins/values.yaml
  map<string, string> helm_values = 3;

  // The ingress configuration for the Jenkins deployment.
  project.planton.shared.kubernetes.IngressSpec ingress = 4;
}

// **JenkinsKubernetesSpecContainer** specifies the container configuration for the Jenkins application.
// It includes resource allocations for CPU and memory to ensure the application runs efficiently.
message JenkinsKubernetesSpecContainer {
  // The CPU and memory resources allocated to the Jenkins container.
  project.planton.shared.kubernetes.ContainerResources resources = 1 [
    (project.planton.shared.kubernetes.default_container_resources) = {
      limits {
        cpu: "1000m"
        memory: "1Gi"
      },
      requests {
        cpu: "50m"
        memory: "100Mi"
      }
    }
  ];
}
