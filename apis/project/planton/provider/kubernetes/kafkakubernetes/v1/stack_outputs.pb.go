// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/kubernetes/kafkakubernetes/v1/stack_outputs.proto

package kafkakubernetesv1

import (
	kubernetes "github.com/project-planton/project-planton/apis/project/planton/shared/kubernetes"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// kafka-kubernetes stack outputs
type KafkaKubernetesStackOutputs struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name of the kubernetes namespace in which the kafka-kubernetes is created.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// sasl user name of kafka-kubernetes.
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// kubernetes secret key for the password.
	PasswordSecret *kubernetes.KubernetesSecretKey `protobuf:"bytes,3,opt,name=password_secret,json=passwordSecret,proto3" json:"password_secret,omitempty"`
	// external hostname of kafka bootstrap server.
	BootstrapServerExternalHostname string `protobuf:"bytes,4,opt,name=bootstrap_server_external_hostname,json=bootstrapServerExternalHostname,proto3" json:"bootstrap_server_external_hostname,omitempty"`
	// internal hostname of kafka bootstrap server.
	BootstrapServerInternalHostname string `protobuf:"bytes,5,opt,name=bootstrap_server_internal_hostname,json=bootstrapServerInternalHostname,proto3" json:"bootstrap_server_internal_hostname,omitempty"`
	// external url of schema registry.
	// this is set to empty when schema registry is not enabled.
	SchemaRegistryExternalUrl string `protobuf:"bytes,6,opt,name=schema_registry_external_url,json=schemaRegistryExternalUrl,proto3" json:"schema_registry_external_url,omitempty"`
	// internal url of schema registry.
	// this is set to empty when schema registry is not enabled.
	SchemaRegistryInternalUrl string `protobuf:"bytes,7,opt,name=schema_registry_internal_url,json=schemaRegistryInternalUrl,proto3" json:"schema_registry_internal_url,omitempty"`
	// external url to access kafka ui.
	KafkaUiExternalUrl string `protobuf:"bytes,8,opt,name=kafka_ui_external_url,json=kafkaUiExternalUrl,proto3" json:"kafka_ui_external_url,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *KafkaKubernetesStackOutputs) Reset() {
	*x = KafkaKubernetesStackOutputs{}
	mi := &file_project_planton_provider_kubernetes_kafkakubernetes_v1_stack_outputs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaKubernetesStackOutputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaKubernetesStackOutputs) ProtoMessage() {}

func (x *KafkaKubernetesStackOutputs) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_kafkakubernetes_v1_stack_outputs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaKubernetesStackOutputs.ProtoReflect.Descriptor instead.
func (*KafkaKubernetesStackOutputs) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_kafkakubernetes_v1_stack_outputs_proto_rawDescGZIP(), []int{0}
}

func (x *KafkaKubernetesStackOutputs) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *KafkaKubernetesStackOutputs) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *KafkaKubernetesStackOutputs) GetPasswordSecret() *kubernetes.KubernetesSecretKey {
	if x != nil {
		return x.PasswordSecret
	}
	return nil
}

func (x *KafkaKubernetesStackOutputs) GetBootstrapServerExternalHostname() string {
	if x != nil {
		return x.BootstrapServerExternalHostname
	}
	return ""
}

func (x *KafkaKubernetesStackOutputs) GetBootstrapServerInternalHostname() string {
	if x != nil {
		return x.BootstrapServerInternalHostname
	}
	return ""
}

func (x *KafkaKubernetesStackOutputs) GetSchemaRegistryExternalUrl() string {
	if x != nil {
		return x.SchemaRegistryExternalUrl
	}
	return ""
}

func (x *KafkaKubernetesStackOutputs) GetSchemaRegistryInternalUrl() string {
	if x != nil {
		return x.SchemaRegistryInternalUrl
	}
	return ""
}

func (x *KafkaKubernetesStackOutputs) GetKafkaUiExternalUrl() string {
	if x != nil {
		return x.KafkaUiExternalUrl
	}
	return ""
}

var File_project_planton_provider_kubernetes_kafkakubernetes_v1_stack_outputs_proto protoreflect.FileDescriptor

const file_project_planton_provider_kubernetes_kafkakubernetes_v1_stack_outputs_proto_rawDesc = "" +
	"\n" +
	"Jproject/planton/provider/kubernetes/kafkakubernetes/v1/stack_outputs.proto\x126project.planton.provider.kubernetes.kafkakubernetes.v1\x1a2project/planton/shared/kubernetes/kubernetes.proto\"\x87\x04\n" +
	"\x1bKafkaKubernetesStackOutputs\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x1a\n" +
	"\busername\x18\x02 \x01(\tR\busername\x12_\n" +
	"\x0fpassword_secret\x18\x03 \x01(\v26.project.planton.shared.kubernetes.KubernetesSecretKeyR\x0epasswordSecret\x12K\n" +
	"\"bootstrap_server_external_hostname\x18\x04 \x01(\tR\x1fbootstrapServerExternalHostname\x12K\n" +
	"\"bootstrap_server_internal_hostname\x18\x05 \x01(\tR\x1fbootstrapServerInternalHostname\x12?\n" +
	"\x1cschema_registry_external_url\x18\x06 \x01(\tR\x19schemaRegistryExternalUrl\x12?\n" +
	"\x1cschema_registry_internal_url\x18\a \x01(\tR\x19schemaRegistryInternalUrl\x121\n" +
	"\x15kafka_ui_external_url\x18\b \x01(\tR\x12kafkaUiExternalUrlB\xc8\x03\n" +
	":com.project.planton.provider.kubernetes.kafkakubernetes.v1B\x11StackOutputsProtoP\x01Zxgithub.com/project-planton/project-planton/apis/project/planton/provider/kubernetes/kafkakubernetes/v1;kafkakubernetesv1\xa2\x02\x05PPPKK\xaa\x026Project.Planton.Provider.Kubernetes.Kafkakubernetes.V1\xca\x026Project\\Planton\\Provider\\Kubernetes\\Kafkakubernetes\\V1\xe2\x02BProject\\Planton\\Provider\\Kubernetes\\Kafkakubernetes\\V1\\GPBMetadata\xea\x02;Project::Planton::Provider::Kubernetes::Kafkakubernetes::V1b\x06proto3"

var (
	file_project_planton_provider_kubernetes_kafkakubernetes_v1_stack_outputs_proto_rawDescOnce sync.Once
	file_project_planton_provider_kubernetes_kafkakubernetes_v1_stack_outputs_proto_rawDescData []byte
)

func file_project_planton_provider_kubernetes_kafkakubernetes_v1_stack_outputs_proto_rawDescGZIP() []byte {
	file_project_planton_provider_kubernetes_kafkakubernetes_v1_stack_outputs_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_kubernetes_kafkakubernetes_v1_stack_outputs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_kafkakubernetes_v1_stack_outputs_proto_rawDesc), len(file_project_planton_provider_kubernetes_kafkakubernetes_v1_stack_outputs_proto_rawDesc)))
	})
	return file_project_planton_provider_kubernetes_kafkakubernetes_v1_stack_outputs_proto_rawDescData
}

var file_project_planton_provider_kubernetes_kafkakubernetes_v1_stack_outputs_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_provider_kubernetes_kafkakubernetes_v1_stack_outputs_proto_goTypes = []any{
	(*KafkaKubernetesStackOutputs)(nil),    // 0: project.planton.provider.kubernetes.kafkakubernetes.v1.KafkaKubernetesStackOutputs
	(*kubernetes.KubernetesSecretKey)(nil), // 1: project.planton.shared.kubernetes.KubernetesSecretKey
}
var file_project_planton_provider_kubernetes_kafkakubernetes_v1_stack_outputs_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.kubernetes.kafkakubernetes.v1.KafkaKubernetesStackOutputs.password_secret:type_name -> project.planton.shared.kubernetes.KubernetesSecretKey
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_project_planton_provider_kubernetes_kafkakubernetes_v1_stack_outputs_proto_init() }
func file_project_planton_provider_kubernetes_kafkakubernetes_v1_stack_outputs_proto_init() {
	if File_project_planton_provider_kubernetes_kafkakubernetes_v1_stack_outputs_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_kafkakubernetes_v1_stack_outputs_proto_rawDesc), len(file_project_planton_provider_kubernetes_kafkakubernetes_v1_stack_outputs_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_kubernetes_kafkakubernetes_v1_stack_outputs_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_kubernetes_kafkakubernetes_v1_stack_outputs_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_kubernetes_kafkakubernetes_v1_stack_outputs_proto_msgTypes,
	}.Build()
	File_project_planton_provider_kubernetes_kafkakubernetes_v1_stack_outputs_proto = out.File
	file_project_planton_provider_kubernetes_kafkakubernetes_v1_stack_outputs_proto_goTypes = nil
	file_project_planton_provider_kubernetes_kafkakubernetes_v1_stack_outputs_proto_depIdxs = nil
}
