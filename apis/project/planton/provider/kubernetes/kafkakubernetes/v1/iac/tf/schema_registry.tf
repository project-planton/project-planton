# Deploy the Schema Registry if enabled in var.spec.schema_registry_container.is_enabled == true.
# For simplicity, this is a minimal example showing how you might deploy Confluent Schema Registry.
# The Pulumi code sets up environment variables to connect to Kafka with SCRAM-SHA-512.

# This resource is created only when is_schema_registry_enabled is true.
resource "kubernetes_manifest" "schema_registry_deployment" {
  count = local.is_schema_registry_enabled ? 1 : 0

  manifest = {
    apiVersion = "apps/v1"
    kind       = "Deployment"
    metadata = {
      name      = "schema-registry"
      namespace = kubernetes_namespace_v1.kafka_namespace.metadata[0].name
      labels = merge(local.final_labels, {
        "app" = "schema-registry"
      })
    }
    spec = {
      replicas = try(var.spec.schema_registry_container.replicas, 1)
      selector = {
        matchLabels = {
          "app" = "schema-registry"
        }
      }
      template = {
        metadata = {
          labels = {
            "app" = "schema-registry"
          }
        }
        spec = {
          containers = [
            {
              name  = "schema-registry"
              image = "confluentinc/cp-schema-registry:7.2.6"

              ports = [
                {
                  name          = "http"
                  containerPort = 8081
                }
              ]

              resources = {
                limits = {
                  cpu = try(var.spec.schema_registry_container.resources.limits.cpu, "1000m")
                  memory = try(var.spec.schema_registry_container.resources.limits.memory, "1Gi")
                }
                requests = {
                  cpu = try(var.spec.schema_registry_container.resources.requests.cpu, "50m")
                  memory = try(var.spec.schema_registry_container.resources.requests.memory, "100Mi")
                }
              }

              env = [
                {
                  name = "SCHEMA_REGISTRY_HOST_NAME"
                  valueFrom = {
                    fieldRef = {
                      fieldPath = "status.podIP"
                    }
                  }
                },
                {
                  name  = "SCHEMA_REGISTRY_LISTENERS"
                  value = "http://0.0.0.0:8081"
                },
                {
                  name  = "SCHEMA_REGISTRY_KAFKASTORE_SASL_MECHANISM"
                  value = "SCRAM-SHA-512"
                },
                {
                  name  = "SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL"
                  value = "SASL_PLAINTEXT"
                },
                {
                  name  = "SCHEMA_REGISTRY_KAFKASTORE_TOPIC"
                  value = "schema-registry"
                },
                {
                  name  = "SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS"
                  value = "${local.bootstrap_kube_service_fqdn}:9094"
                },
                # This references the Secret generated by the KafkaUser admin resource for SASL credentials
                {
                  name = "SCHEMA_REGISTRY_KAFKASTORE_SASL_JAAS_CONFIG"
                  valueFrom = {
                    secretKeyRef = {
                      name = "admin"  # The KafkaUser Secret defaults to the same name as the user
                      key = "sasl.jaas.config"
                    }
                  }
                }
              ]
            }
          ]
        }
      }
    }
  }

  depends_on = [
    kubernetes_namespace_v1.kafka_namespace,
    kubernetes_manifest.kafka_cluster
  ]
}

# Create a ClusterIP Service for Schema Registry, if enabled.
resource "kubernetes_manifest" "schema_registry_service" {
  count = local.is_schema_registry_enabled ? 1 : 0

  manifest = {
    apiVersion = "v1"
    kind       = "Service"
    metadata = {
      name      = "sr"
      namespace = kubernetes_namespace_v1.kafka_namespace.metadata[0].name
      labels    = local.final_labels
    }
    spec = {
      type = "ClusterIP"

      selector = {
        "app" = "schema-registry"
      }

      ports = [
        {
          name       = "http"
          protocol   = "TCP"
          port       = 80
          targetPort = 8081
        }
      ]
    }
  }

  depends_on = [
    kubernetes_manifest.schema_registry_deployment
  ]
}
