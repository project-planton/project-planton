# Deploy the Kafka UI (Kowl) only if var.spec.is_deploy_kafka_ui == true.

###############################################################################
# 1) Create a ConfigMap for Kowl configuration
###############################################################################
resource "kubernetes_manifest" "kowl_configmap" {
  count = local.is_deploy_kafka_ui ? 1 : 0

  manifest = {
    apiVersion = "v1"
    kind       = "ConfigMap"
    metadata = {
      name      = "kowl"
      namespace = kubernetes_namespace_v1.kafka_namespace.metadata[0].name
      labels    = local.final_labels
    }
    data = {
      "kowl.yaml" = <<-EOT
    kafka:
      brokers:
        - ${local.bootstrap_kube_service_fqdn}:${9094}
      clientId: "kowl-on-cluster"
      sasl:
        enabled: true
        username: "admin"
        mechanism: "SCRAM-SHA-512"
      tls:
        enabled: false
      schemaRegistry:
        enabled: ${local.is_schema_registry_enabled}
        urls: ["http://${coalesce(local.schema_registry_internal_hostname, "sr.${local.namespace}.svc.cluster.local")}"]
      protobuf:
        enabled: ${local.is_schema_registry_enabled}
        schemaRegistry:
          enabled: ${local.is_schema_registry_enabled}
          refreshInterval: ${5}m
  EOT
    }
  }

  depends_on = [
    kubernetes_manifest.kafka_cluster,
    kubernetes_manifest.kafka_admin_user
  ]
}

###############################################################################
# 2) Create a Deployment for Kowl
###############################################################################
resource "kubernetes_manifest" "kowl_deployment" {
  count = local.is_deploy_kafka_ui ? 1 : 0

  manifest = {
    apiVersion = "apps/v1"
    kind       = "Deployment"
    metadata = {
      name      = "kowl"
      namespace = kubernetes_namespace_v1.kafka_namespace.metadata[0].name
      labels = merge(local.final_labels, {
        "app" = "kowl"
      })
    }
    spec = {
      replicas = 1
      selector = {
        matchLabels = {
          "app" = "kowl"
        }
      }
      template = {
        metadata = {
          labels = {
            "app" = "kowl"
          }
        }
        spec = {
          containers = [
            {
              name = "kowl"
              image = "quay.io/cloudhut/kowl:master-59f68da"

              # Kowl arguments to load the config file & reference Kafka password
              args = [
                "--config.filepath=/var/kowl/config.yaml",
                "--kafka.sasl.password=$KAFKA_SASL_PASSWORD"
              ]

              ports = [
                {
                  name          = "http"
                  containerPort = 8080
                }
              ]

              # Retrieve the Kafka admin password from the secret generated by the KafkaUser 'admin'
              env = [
                {
                  name = "KAFKA_SASL_PASSWORD"
                  valueFrom = {
                    secretKeyRef = {
                      name = "admin"    # matches the KafkaUser secret
                      key = "password" # scram-sha-512 password
                    }
                  }
                }
              ]

              volumeMounts = [
                {
                  name      = "kowl-config"
                  mountPath = "/var/kowl/config.yaml"
                  subPath   = "kowl.yaml"
                }
              ]

              # Minimal resource requests/limits
              resources = {
                limits = {
                  cpu    = "150m"
                  memory = "180Mi"
                }
                requests = {
                  cpu    = "25m"
                  memory = "90Mi"
                }
              }
            }
          ]

          volumes = [
            {
              name = "kowl-config"
              configMap = {
                name = "kowl"
              }
            }
          ]
        }
      }
    }
  }

  depends_on = [
    kubernetes_manifest.kowl_configmap
  ]
}

###############################################################################
# 3) Create a ClusterIP Service for Kowl
###############################################################################
resource "kubernetes_manifest" "kowl_service" {
  count = local.is_deploy_kafka_ui ? 1 : 0

  manifest = {
    apiVersion = "v1"
    kind       = "Service"
    metadata = {
      name      = "kowl"
      namespace = kubernetes_namespace_v1.kafka_namespace.metadata[0].name
      labels    = local.final_labels
    }
    spec = {
      type = "ClusterIP"

      selector = {
        "app" = "kowl"
      }

      ports = [
        {
          name       = "http"
          protocol   = "TCP"
          port       = 80
          targetPort = 8080
        }
      ]
    }
  }

  depends_on = [
    kubernetes_manifest.kowl_deployment
  ]
}

###############################################################################
# 4) (Optional) Create a Certificate + Gateway + HTTPRoute for external Kowl access
#    using Istio + Gateway API, only if:
#    - Kowl is deployed
#    - Ingress is enabled
#    - ingress_dns_domain is non-empty
###############################################################################

# 4a) Create a TLS certificate using cert-manager (requires ClusterIssuer with the same name as the domain)
resource "kubernetes_manifest" "kowl_ingress_certificate" {
  count = (local.is_deploy_kafka_ui && local.ingress_is_enabled && local.ingress_dns_domain != "") ? 1 : 0

  manifest = {
    apiVersion = "cert-manager.io/v1"
    kind       = "Certificate"
    metadata = {
      name      = "cert-${local.resource_id}-kowl"
      namespace = "istio-ingress"
      labels    = local.final_labels
    }
    spec = {
      dnsNames = [local.kowl_external_hostname]
      secretName = "cert-${local.resource_id}-kowl"
      issuerRef = {
        kind = "ClusterIssuer"
        name = local.ingress_dns_domain
      }
    }
  }

  depends_on = [
    kubernetes_manifest.kowl_service
  ]
}

# 4b) Define the Gateway for the external Kowl hostname
resource "kubernetes_manifest" "kowl_gateway" {
  count = (local.is_deploy_kafka_ui && local.ingress_is_enabled && local.ingress_dns_domain != "") ? 1 : 0

  manifest = {
    apiVersion = "gateway.networking.k8s.io/v1beta1"
    kind       = "Gateway"
    metadata = {
      name      = "${local.resource_id}-kowl-external"
      namespace = "istio-ingress"
      labels    = local.final_labels
    }
    spec = {
      gatewayClassName = "istio"
      addresses = [
        {
          type  = "Hostname"
          value = "ingress-external.istio-ingress.svc.cluster.local"
        }
      ]
      listeners = [
        {
          name     = "https-external"
          hostname = local.kowl_external_hostname
          port     = 443
          protocol = "HTTPS"
          tls = {
            mode = "Terminate"
            certificateRefs = [
              {
                name = "cert-${local.resource_id}-kowl"
              }
            ]
          }
          allowedRoutes = {
            namespaces = {
              from = "All"
            }
          }
        },
        {
          name     = "http-external"
          hostname = local.kowl_external_hostname
          port     = 80
          protocol = "HTTP"
          allowedRoutes = {
            namespaces = {
              from = "All"
            }
          }
        }
      ]
    }
  }

  depends_on = [
    kubernetes_manifest.kowl_ingress_certificate
  ]
}

# 4c) Create an HTTPRoute that routes traffic from the Gateway to the Kowl service
resource "kubernetes_manifest" "kowl_http_route" {
  count = (local.is_deploy_kafka_ui && local.ingress_is_enabled && local.ingress_dns_domain != "") ? 1 : 0

  manifest = {
    apiVersion = "gateway.networking.k8s.io/v1beta1"
    kind       = "HTTPRoute"
    metadata = {
      name      = "kowl"
      namespace = kubernetes_namespace_v1.kafka_namespace.metadata[0].name
      labels    = local.final_labels
    }
    spec = {
      hostnames = [local.kowl_external_hostname]
      parentRefs = [
        {
          name      = "${local.resource_id}-kowl-external"
          namespace = "istio-ingress"
        }
      ]
      rules = [
        {
          matches = [
            {
              path = {
                type  = "PathPrefix"
                value = "/"
              }
            }
          ]
          backendRefs = [
            {
              name = "kowl" # reference the Service name
              namespace = kubernetes_namespace_v1.kafka_namespace.metadata[0].name
              port      = 80
            }
          ]
        }
      ]
    }
  }

  depends_on = [
    kubernetes_manifest.kowl_gateway,
    kubernetes_manifest.kowl_service
  ]
}
