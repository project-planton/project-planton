syntax = "proto3";

package project.planton.provider.kubernetes.kafkakubernetes.v1;

import "buf/validate/validate.proto";
import "project/planton/shared/kubernetes/kubernetes.proto";

//kafka-kubernetes spec
message KafkaKubernetesSpec {
  //list of kafka topics.
  repeated KafkaTopic kafka_topics = 1;


  //kafka-broker container spec
  KafkaKubernetesBrokerContainer broker_container = 2 [
    (buf.validate.field).required = true
  ];

  //zookeeper container spec
  KafkaKubernetesZookeeperContainer zookeeper_container = 3 [
    (buf.validate.field).required = true
  ];

  //schema-registry container spec
  KafkaKubernetesSchemaRegistryContainer schema_registry_container = 4;

  //kafka-kubernetes ingress spec
  project.planton.shared.kubernetes.IngressSpec ingress = 5;

  //flag to toggle deploying kafka ui component.
  bool is_deploy_kafka_ui = 6;
}

//kafka-kubernetes kubernetes kafka-broker spec
message KafkaKubernetesBrokerContainer {
  //(optional for create) number of brokers required to setup kafka-kubernetes.
  //defaults value "1" is set if client sets the value to 0.
  //recommended default value is "1".
  int32 replicas = 1 [
    (buf.validate.field).required = true
  ];

  //kafka broker container cpu and memory resources.
  //recommended default "cpu-requests: 50m, memory-requests: 256Mi, cpu-limits: 1, memory-limits: 1Gi"
  project.planton.shared.kubernetes.ContainerResources resources = 2 [
    (buf.validate.field).required = true
  ];

  //size of the disk to be attached to each broker instance. ex: 30Gi
  //defaults value is set if not provided by the client.
  string disk_size = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).cel = {
      id: "spec.kubernetes.container.disk_size.is_valid",
      message: "disk size value is invalid",
      // https://regex101.com/r/EqH2xa/1
      expression: "this.matches('^\\\\d+(\\\\.\\\\d+)?\\\\s?(Ki|Mi|Gi|Ti|Pi|Ei|K|M|G|T|P|E)$') && size(this) > 0"
    }
  ];
}

//kafka-kubernetes kubernetes zookeeper spec
message KafkaKubernetesZookeeperContainer {
  //number or zookeeper container replicas
  //zookeeper requires latest 3 replicas for high availability(ha) mode.
  //zookeeper is built using raft consensus algorithm.
  //refer to https://raft.github.io/ to learn more on how replica count affect availability.
  int32 replicas = 1 [
    (buf.validate.field).required = true
  ];

  //zookeeper container cpu and memory resources.
  //recommended default "cpu-requests: 50m, memory-requests: 256Mi, cpu-limits: 1, memory-limits: 1Gi"
  project.planton.shared.kubernetes.ContainerResources resources = 2 [
    (buf.validate.field).required = true
  ];

  //size of the disk to be attached to each zookeeper instance. ex: 30Gi
  //defaults value is set if not provided by the client.
  string disk_size = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).cel = {
      id: "spec.kubernetes.container.disk_size.is_valid",
      message: "disk size value is invalid",
      // https://regex101.com/r/EqH2xa/1
      expression: "this.matches('^\\\\d+(\\\\.\\\\d+)?\\\\s?(Ki|Mi|Gi|Ti|Pi|Ei|K|M|G|T|P|E)$') && size(this) > 0"
    }
  ];
}

//kafka-kubernetes kubernetes schema-registry spec
message KafkaKubernetesSchemaRegistryContainer {
  //flag to control if schema registry is created for the kafka-kubernetes.
  //defaults to "false".
  bool is_enabled = 1;

  //number of schema registry replicas.
  //recommended default value is "1".
  //this value has no effect if the is_schema_registry_enabled is set to false.
  int32 replicas = 2 [
    (buf.validate.field).required = true
  ];

  //schema-registry container cpu and memory resources.
  //recommended default "cpu-requests: 50m, memory-requests: 256Mi, cpu-limits: 1, memory-limits: 1Gi"
  project.planton.shared.kubernetes.ContainerResources resources = 3 [
    (buf.validate.field).required = true
  ];
}

//kafka-topic
message KafkaTopic {
  //topic name
  string name = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 249,
    (buf.validate.field).cel = {
      id: "topic.name",
      message: "Should start with an alphanumeric character",
      // https://regex101.com/r/cXprYc/1
      expression: "this.matches('^[a-zA-Z0-9].*$')"
    },
    (buf.validate.field).cel = {
      id: "topic.name",
      message: "Only alphanumeric and ('.', '_' and '-') characters are allowed",
      // https://regex101.com/r/hheWzb/1
      expression: "this.matches('^[a-zA-Z0-9._-]+$')"
    },
    (buf.validate.field).cel = {
      id: "topic.name",
      message: "Must not contain '..'",
      // https://regex101.com/r/ILMhoL/1
      expression: "!this.contains('..')"
    },
    (buf.validate.field).cel = {
      id: "topic.name",
      message: "Must not contain non-ASCII characters",
      // https://regex101.com/r/FhCKeZ/1
      expression: "this.matches('^[\x00-\x7F]+$')"
    },
    (buf.validate.field).cel = {
      id: "topic.name",
      message: "Should end with an alphanumeric character",
      // https://regex101.com/r/DEA7Of/1
      expression: "this.matches('[a-zA-Z0-9]$')"
    }
  ];

  //topic partitions.
  //recommended default is 1.
  int32 partitions = 2;

  //topic replicas.
  //recommended default is 1.
  int32 replicas = 3;

  //additional configuration of kafka topic
  //if not provided then default values will be set
  //for example default delete.policy is `delete` and can be set up as `compact`
  map<string, string> config = 4;
}

//wrapper for kafka topic config
message KafkaTopicConfig {
  map<string, string> value = 1;
}
