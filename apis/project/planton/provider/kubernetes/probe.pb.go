// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/kubernetes/probe.proto

package kubernetes

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// **Probe** defines a health check to be performed against a container to determine whether it is
// alive, ready, or has started successfully. Probes are essential for zero-downtime deployments.
// Reference: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
type Probe struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Number of seconds after the container has started before liveness or readiness probes are initiated.
	// Defaults to 0 seconds. Minimum value is 0.
	InitialDelaySeconds int32 `protobuf:"varint,1,opt,name=initial_delay_seconds,json=initialDelaySeconds,proto3" json:"initial_delay_seconds,omitempty"`
	// How often (in seconds) to perform the probe.
	// Default to 10 seconds. Minimum value is 1.
	PeriodSeconds int32 `protobuf:"varint,2,opt,name=period_seconds,json=periodSeconds,proto3" json:"period_seconds,omitempty"`
	// Number of seconds after which the probe times out.
	// Defaults to 1 second. Minimum value is 1.
	TimeoutSeconds int32 `protobuf:"varint,3,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	// Minimum consecutive successes for the probe to be considered successful after having failed.
	// Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold int32 `protobuf:"varint,4,opt,name=success_threshold,json=successThreshold,proto3" json:"success_threshold,omitempty"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	// Defaults to 3. Minimum value is 1.
	FailureThreshold int32 `protobuf:"varint,5,opt,name=failure_threshold,json=failureThreshold,proto3" json:"failure_threshold,omitempty"`
	// The action to take to determine the health of a container.
	// Only one of the following handlers should be specified.
	//
	// Types that are valid to be assigned to Handler:
	//
	//	*Probe_HttpGet
	//	*Probe_Grpc
	//	*Probe_TcpSocket
	//	*Probe_Exec
	Handler       isProbe_Handler `protobuf_oneof:"handler"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Probe) Reset() {
	*x = Probe{}
	mi := &file_project_planton_provider_kubernetes_probe_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Probe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Probe) ProtoMessage() {}

func (x *Probe) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_probe_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Probe.ProtoReflect.Descriptor instead.
func (*Probe) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_probe_proto_rawDescGZIP(), []int{0}
}

func (x *Probe) GetInitialDelaySeconds() int32 {
	if x != nil {
		return x.InitialDelaySeconds
	}
	return 0
}

func (x *Probe) GetPeriodSeconds() int32 {
	if x != nil {
		return x.PeriodSeconds
	}
	return 0
}

func (x *Probe) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *Probe) GetSuccessThreshold() int32 {
	if x != nil {
		return x.SuccessThreshold
	}
	return 0
}

func (x *Probe) GetFailureThreshold() int32 {
	if x != nil {
		return x.FailureThreshold
	}
	return 0
}

func (x *Probe) GetHandler() isProbe_Handler {
	if x != nil {
		return x.Handler
	}
	return nil
}

func (x *Probe) GetHttpGet() *HTTPGetAction {
	if x != nil {
		if x, ok := x.Handler.(*Probe_HttpGet); ok {
			return x.HttpGet
		}
	}
	return nil
}

func (x *Probe) GetGrpc() *GRPCAction {
	if x != nil {
		if x, ok := x.Handler.(*Probe_Grpc); ok {
			return x.Grpc
		}
	}
	return nil
}

func (x *Probe) GetTcpSocket() *TCPSocketAction {
	if x != nil {
		if x, ok := x.Handler.(*Probe_TcpSocket); ok {
			return x.TcpSocket
		}
	}
	return nil
}

func (x *Probe) GetExec() *ExecAction {
	if x != nil {
		if x, ok := x.Handler.(*Probe_Exec); ok {
			return x.Exec
		}
	}
	return nil
}

type isProbe_Handler interface {
	isProbe_Handler()
}

type Probe_HttpGet struct {
	// HTTPGet specifies the http request to perform.
	HttpGet *HTTPGetAction `protobuf:"bytes,6,opt,name=http_get,json=httpGet,proto3,oneof"`
}

type Probe_Grpc struct {
	// GRPC specifies an action involving a GRPC port.
	Grpc *GRPCAction `protobuf:"bytes,7,opt,name=grpc,proto3,oneof"`
}

type Probe_TcpSocket struct {
	// TCPSocket specifies an action involving a TCP port.
	TcpSocket *TCPSocketAction `protobuf:"bytes,8,opt,name=tcp_socket,json=tcpSocket,proto3,oneof"`
}

type Probe_Exec struct {
	// Exec specifies a command to execute inside the container.
	Exec *ExecAction `protobuf:"bytes,9,opt,name=exec,proto3,oneof"`
}

func (*Probe_HttpGet) isProbe_Handler() {}

func (*Probe_Grpc) isProbe_Handler() {}

func (*Probe_TcpSocket) isProbe_Handler() {}

func (*Probe_Exec) isProbe_Handler() {}

// **HTTPGetAction** describes an action based on HTTP Get requests.
type HTTPGetAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Path to access on the HTTP server.
	// Defaults to '/'.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Name or number of the port to access on the container.
	// If using a port number, must be in range 1 to 65535.
	//
	// Types that are valid to be assigned to Port:
	//
	//	*HTTPGetAction_PortNumber
	//	*HTTPGetAction_PortName
	Port isHTTPGetAction_Port `protobuf_oneof:"port"`
	// Host name to connect to, defaults to the pod IP.
	// You probably want to set "Host" in http_headers instead.
	Host string `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	// Scheme to use for connecting to the host (HTTP or HTTPS).
	// Defaults to HTTP.
	Scheme string `protobuf:"bytes,5,opt,name=scheme,proto3" json:"scheme,omitempty"`
	// Custom headers to set in the request.
	// HTTP allows repeated headers.
	HttpHeaders   []*HTTPHeader `protobuf:"bytes,6,rep,name=http_headers,json=httpHeaders,proto3" json:"http_headers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPGetAction) Reset() {
	*x = HTTPGetAction{}
	mi := &file_project_planton_provider_kubernetes_probe_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPGetAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPGetAction) ProtoMessage() {}

func (x *HTTPGetAction) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_probe_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPGetAction.ProtoReflect.Descriptor instead.
func (*HTTPGetAction) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_probe_proto_rawDescGZIP(), []int{1}
}

func (x *HTTPGetAction) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HTTPGetAction) GetPort() isHTTPGetAction_Port {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *HTTPGetAction) GetPortNumber() int32 {
	if x != nil {
		if x, ok := x.Port.(*HTTPGetAction_PortNumber); ok {
			return x.PortNumber
		}
	}
	return 0
}

func (x *HTTPGetAction) GetPortName() string {
	if x != nil {
		if x, ok := x.Port.(*HTTPGetAction_PortName); ok {
			return x.PortName
		}
	}
	return ""
}

func (x *HTTPGetAction) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *HTTPGetAction) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *HTTPGetAction) GetHttpHeaders() []*HTTPHeader {
	if x != nil {
		return x.HttpHeaders
	}
	return nil
}

type isHTTPGetAction_Port interface {
	isHTTPGetAction_Port()
}

type HTTPGetAction_PortNumber struct {
	PortNumber int32 `protobuf:"varint,2,opt,name=port_number,json=portNumber,proto3,oneof"`
}

type HTTPGetAction_PortName struct {
	PortName string `protobuf:"bytes,3,opt,name=port_name,json=portName,proto3,oneof"`
}

func (*HTTPGetAction_PortNumber) isHTTPGetAction_Port() {}

func (*HTTPGetAction_PortName) isHTTPGetAction_Port() {}

// **HTTPHeader** describes a custom header to be used in HTTP probes.
type HTTPHeader struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The header field name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The header field value.
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPHeader) Reset() {
	*x = HTTPHeader{}
	mi := &file_project_planton_provider_kubernetes_probe_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPHeader) ProtoMessage() {}

func (x *HTTPHeader) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_probe_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPHeader.ProtoReflect.Descriptor instead.
func (*HTTPHeader) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_probe_proto_rawDescGZIP(), []int{2}
}

func (x *HTTPHeader) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HTTPHeader) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// **GRPCAction** describes an action based on gRPC health checking protocol.
// Reference: https://github.com/grpc/grpc/blob/master/doc/health-checking.md
type GRPCAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Port number of the gRPC service.
	// Number must be in the range 1 to 65535.
	Port int32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// Service is the name of the service to check.
	// If not specified, the default behavior defined by gRPC is used.
	// For standard gRPC health checks, leave empty to check overall server health.
	Service       string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GRPCAction) Reset() {
	*x = GRPCAction{}
	mi := &file_project_planton_provider_kubernetes_probe_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GRPCAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GRPCAction) ProtoMessage() {}

func (x *GRPCAction) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_probe_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GRPCAction.ProtoReflect.Descriptor instead.
func (*GRPCAction) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_probe_proto_rawDescGZIP(), []int{3}
}

func (x *GRPCAction) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *GRPCAction) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

// **TCPSocketAction** describes an action based on opening a socket.
type TCPSocketAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name or number of the port to access on the container.
	// If using a port number, must be in range 1 to 65535.
	//
	// Types that are valid to be assigned to Port:
	//
	//	*TCPSocketAction_PortNumber
	//	*TCPSocketAction_PortName
	Port isTCPSocketAction_Port `protobuf_oneof:"port"`
	// Host name to connect to, defaults to the pod IP.
	Host          string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TCPSocketAction) Reset() {
	*x = TCPSocketAction{}
	mi := &file_project_planton_provider_kubernetes_probe_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TCPSocketAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPSocketAction) ProtoMessage() {}

func (x *TCPSocketAction) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_probe_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPSocketAction.ProtoReflect.Descriptor instead.
func (*TCPSocketAction) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_probe_proto_rawDescGZIP(), []int{4}
}

func (x *TCPSocketAction) GetPort() isTCPSocketAction_Port {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *TCPSocketAction) GetPortNumber() int32 {
	if x != nil {
		if x, ok := x.Port.(*TCPSocketAction_PortNumber); ok {
			return x.PortNumber
		}
	}
	return 0
}

func (x *TCPSocketAction) GetPortName() string {
	if x != nil {
		if x, ok := x.Port.(*TCPSocketAction_PortName); ok {
			return x.PortName
		}
	}
	return ""
}

func (x *TCPSocketAction) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type isTCPSocketAction_Port interface {
	isTCPSocketAction_Port()
}

type TCPSocketAction_PortNumber struct {
	PortNumber int32 `protobuf:"varint,1,opt,name=port_number,json=portNumber,proto3,oneof"`
}

type TCPSocketAction_PortName struct {
	PortName string `protobuf:"bytes,2,opt,name=port_name,json=portName,proto3,oneof"`
}

func (*TCPSocketAction_PortNumber) isTCPSocketAction_Port() {}

func (*TCPSocketAction_PortName) isTCPSocketAction_Port() {}

// **ExecAction** describes a command-based health check.
type ExecAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Command is the command line to execute inside the container.
	// The command is run in the container's root filesystem.
	// The command's exit status is used to determine the health:
	// - 0: Success
	// - Non-zero: Failure
	Command       []string `protobuf:"bytes,1,rep,name=command,proto3" json:"command,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecAction) Reset() {
	*x = ExecAction{}
	mi := &file_project_planton_provider_kubernetes_probe_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecAction) ProtoMessage() {}

func (x *ExecAction) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_probe_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecAction.ProtoReflect.Descriptor instead.
func (*ExecAction) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_probe_proto_rawDescGZIP(), []int{5}
}

func (x *ExecAction) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

var File_project_planton_provider_kubernetes_probe_proto protoreflect.FileDescriptor

const file_project_planton_provider_kubernetes_probe_proto_rawDesc = "" +
	"\n" +
	"/project/planton/provider/kubernetes/probe.proto\x12#project.planton.provider.kubernetes\x1a\x1bbuf/validate/validate.proto\"\xa6\x04\n" +
	"\x05Probe\x122\n" +
	"\x15initial_delay_seconds\x18\x01 \x01(\x05R\x13initialDelaySeconds\x12%\n" +
	"\x0eperiod_seconds\x18\x02 \x01(\x05R\rperiodSeconds\x12'\n" +
	"\x0ftimeout_seconds\x18\x03 \x01(\x05R\x0etimeoutSeconds\x12+\n" +
	"\x11success_threshold\x18\x04 \x01(\x05R\x10successThreshold\x12+\n" +
	"\x11failure_threshold\x18\x05 \x01(\x05R\x10failureThreshold\x12O\n" +
	"\bhttp_get\x18\x06 \x01(\v22.project.planton.provider.kubernetes.HTTPGetActionH\x00R\ahttpGet\x12E\n" +
	"\x04grpc\x18\a \x01(\v2/.project.planton.provider.kubernetes.GRPCActionH\x00R\x04grpc\x12U\n" +
	"\n" +
	"tcp_socket\x18\b \x01(\v24.project.planton.provider.kubernetes.TCPSocketActionH\x00R\ttcpSocket\x12E\n" +
	"\x04exec\x18\t \x01(\v2/.project.planton.provider.kubernetes.ExecActionH\x00R\x04execB\t\n" +
	"\ahandler\"\xed\x01\n" +
	"\rHTTPGetAction\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12!\n" +
	"\vport_number\x18\x02 \x01(\x05H\x00R\n" +
	"portNumber\x12\x1d\n" +
	"\tport_name\x18\x03 \x01(\tH\x00R\bportName\x12\x12\n" +
	"\x04host\x18\x04 \x01(\tR\x04host\x12\x16\n" +
	"\x06scheme\x18\x05 \x01(\tR\x06scheme\x12R\n" +
	"\fhttp_headers\x18\x06 \x03(\v2/.project.planton.provider.kubernetes.HTTPHeaderR\vhttpHeadersB\x06\n" +
	"\x04port\"6\n" +
	"\n" +
	"HTTPHeader\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"G\n" +
	"\n" +
	"GRPCAction\x12\x1f\n" +
	"\x04port\x18\x01 \x01(\x05B\v\xbaH\b\x1a\x06\x18\xff\xff\x03(\x01R\x04port\x12\x18\n" +
	"\aservice\x18\x02 \x01(\tR\aservice\"o\n" +
	"\x0fTCPSocketAction\x12!\n" +
	"\vport_number\x18\x01 \x01(\x05H\x00R\n" +
	"portNumber\x12\x1d\n" +
	"\tport_name\x18\x02 \x01(\tH\x00R\bportName\x12\x12\n" +
	"\x04host\x18\x03 \x01(\tR\x04hostB\x06\n" +
	"\x04port\"&\n" +
	"\n" +
	"ExecAction\x12\x18\n" +
	"\acommand\x18\x01 \x03(\tR\acommandB\xba\x02\n" +
	"'com.project.planton.provider.kubernetesB\n" +
	"ProbeProtoP\x01ZSgithub.com/project-planton/project-planton/apis/project/planton/provider/kubernetes\xa2\x02\x04PPPK\xaa\x02#Project.Planton.Provider.Kubernetes\xca\x02#Project\\Planton\\Provider\\Kubernetes\xe2\x02/Project\\Planton\\Provider\\Kubernetes\\GPBMetadata\xea\x02&Project::Planton::Provider::Kubernetesb\x06proto3"

var (
	file_project_planton_provider_kubernetes_probe_proto_rawDescOnce sync.Once
	file_project_planton_provider_kubernetes_probe_proto_rawDescData []byte
)

func file_project_planton_provider_kubernetes_probe_proto_rawDescGZIP() []byte {
	file_project_planton_provider_kubernetes_probe_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_kubernetes_probe_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_probe_proto_rawDesc), len(file_project_planton_provider_kubernetes_probe_proto_rawDesc)))
	})
	return file_project_planton_provider_kubernetes_probe_proto_rawDescData
}

var file_project_planton_provider_kubernetes_probe_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_project_planton_provider_kubernetes_probe_proto_goTypes = []any{
	(*Probe)(nil),           // 0: project.planton.provider.kubernetes.Probe
	(*HTTPGetAction)(nil),   // 1: project.planton.provider.kubernetes.HTTPGetAction
	(*HTTPHeader)(nil),      // 2: project.planton.provider.kubernetes.HTTPHeader
	(*GRPCAction)(nil),      // 3: project.planton.provider.kubernetes.GRPCAction
	(*TCPSocketAction)(nil), // 4: project.planton.provider.kubernetes.TCPSocketAction
	(*ExecAction)(nil),      // 5: project.planton.provider.kubernetes.ExecAction
}
var file_project_planton_provider_kubernetes_probe_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.kubernetes.Probe.http_get:type_name -> project.planton.provider.kubernetes.HTTPGetAction
	3, // 1: project.planton.provider.kubernetes.Probe.grpc:type_name -> project.planton.provider.kubernetes.GRPCAction
	4, // 2: project.planton.provider.kubernetes.Probe.tcp_socket:type_name -> project.planton.provider.kubernetes.TCPSocketAction
	5, // 3: project.planton.provider.kubernetes.Probe.exec:type_name -> project.planton.provider.kubernetes.ExecAction
	2, // 4: project.planton.provider.kubernetes.HTTPGetAction.http_headers:type_name -> project.planton.provider.kubernetes.HTTPHeader
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_project_planton_provider_kubernetes_probe_proto_init() }
func file_project_planton_provider_kubernetes_probe_proto_init() {
	if File_project_planton_provider_kubernetes_probe_proto != nil {
		return
	}
	file_project_planton_provider_kubernetes_probe_proto_msgTypes[0].OneofWrappers = []any{
		(*Probe_HttpGet)(nil),
		(*Probe_Grpc)(nil),
		(*Probe_TcpSocket)(nil),
		(*Probe_Exec)(nil),
	}
	file_project_planton_provider_kubernetes_probe_proto_msgTypes[1].OneofWrappers = []any{
		(*HTTPGetAction_PortNumber)(nil),
		(*HTTPGetAction_PortName)(nil),
	}
	file_project_planton_provider_kubernetes_probe_proto_msgTypes[4].OneofWrappers = []any{
		(*TCPSocketAction_PortNumber)(nil),
		(*TCPSocketAction_PortName)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_probe_proto_rawDesc), len(file_project_planton_provider_kubernetes_probe_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_kubernetes_probe_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_kubernetes_probe_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_kubernetes_probe_proto_msgTypes,
	}.Build()
	File_project_planton_provider_kubernetes_probe_proto = out.File
	file_project_planton_provider_kubernetes_probe_proto_goTypes = nil
	file_project_planton_provider_kubernetes_probe_proto_depIdxs = nil
}
