// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/kubernetes/workload/cronjobkubernetes/v1/spec.proto

package cronjobkubernetesv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	kubernetes "github.com/project-planton/project-planton/apis/project/planton/shared/kubernetes"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// CronJobKubernetesSpec defines the configuration for deploying a cron-job on a Kubernetes cluster.
// This message includes specifications for the container image, resources, environment variables,
// and the cron-job schedule/policy fields. By setting these parameters, you manage how the
// cron-job is deployed, executed, and how concurrency and retries are handled.
type CronJobKubernetesSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The container image to be used for the application.
	// The `pull_secret_name` is determined by looking up the
	// `container_image_artifact_store_id` from the environment where the cron-job is deployed.
	Image *kubernetes.ContainerImage `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// *
	// The CPU and memory resources allocated to the cron-job container.
	// If not specified, default container resources (limits.cpu=1000m, limits.memory=1Gi,
	// requests.cpu=50m, requests.memory=100Mi) are applied.
	Resources *kubernetes.ContainerResources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// *
	// Environment variables and secrets for the cron-job container.
	// This includes both straightforward environment variables (key=value)
	// and references to secrets.
	Env *CronJobKubernetesContainerAppEnv `protobuf:"bytes,3,opt,name=env,proto3" json:"env,omitempty"`
	// *
	// A cron schedule expression in standard Cron format, e.g. "0 0 * * *".
	// This field is required.
	Schedule string `protobuf:"bytes,4,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// *
	// Optional deadline in seconds for starting the job if it misses its scheduled time.
	// If set to 0, no deadline is enforced.
	StartingDeadlineSeconds uint64 `protobuf:"varint,5,opt,name=starting_deadline_seconds,json=startingDeadlineSeconds,proto3" json:"starting_deadline_seconds,omitempty"`
	// *
	// Concurrency policy specifies how concurrent job runs are handled.
	// Allowed values are: "Allow", "Forbid", "Replace".
	// Default is "Forbid".
	ConcurrencyPolicy string `protobuf:"bytes,6,opt,name=concurrency_policy,json=concurrencyPolicy,proto3" json:"concurrency_policy,omitempty"`
	// *
	// If true, no subsequent runs are scheduled.
	// Default is false.
	Suspend bool `protobuf:"varint,7,opt,name=suspend,proto3" json:"suspend,omitempty"`
	// *
	// Number of successful finished jobs to retain.
	// Default is 3.
	SuccessfulJobsHistoryLimit uint32 `protobuf:"varint,8,opt,name=successful_jobs_history_limit,json=successfulJobsHistoryLimit,proto3" json:"successful_jobs_history_limit,omitempty"`
	// *
	// Number of failed finished jobs to retain.
	// Default is 1.
	FailedJobsHistoryLimit uint32 `protobuf:"varint,9,opt,name=failed_jobs_history_limit,json=failedJobsHistoryLimit,proto3" json:"failed_jobs_history_limit,omitempty"`
	// *
	// Number of retries before marking this job as failed.
	// Default is 6.
	BackoffLimit uint32 `protobuf:"varint,10,opt,name=backoff_limit,json=backoffLimit,proto3" json:"backoff_limit,omitempty"`
	// *
	// Pod restart policy.
	// Allowed values: "Always", "OnFailure", "Never".
	// Default is "Never".
	RestartPolicy string `protobuf:"bytes,11,opt,name=restart_policy,json=restartPolicy,proto3" json:"restart_policy,omitempty"`
	// *
	// An optional list of commands (equivalent to an ENTRYPOINT override) for the cron-job container.
	// If omitted, the default ENTRYPOINT in the image will be used.
	// Example: ["sh","-c","echo Hello from Cron"]
	Command []string `protobuf:"bytes,12,rep,name=command,proto3" json:"command,omitempty"`
	// *
	// An optional list of arguments passed to the container command or the image's default ENTRYPOINT.
	// If omitted, the default CMD in the image will be used.
	// Example: ["-f","/path/to/config.yaml"]
	Args          []string `protobuf:"bytes,13,rep,name=args,proto3" json:"args,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CronJobKubernetesSpec) Reset() {
	*x = CronJobKubernetesSpec{}
	mi := &file_project_planton_provider_kubernetes_workload_cronjobkubernetes_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CronJobKubernetesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronJobKubernetesSpec) ProtoMessage() {}

func (x *CronJobKubernetesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_cronjobkubernetes_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronJobKubernetesSpec.ProtoReflect.Descriptor instead.
func (*CronJobKubernetesSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_cronjobkubernetes_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *CronJobKubernetesSpec) GetImage() *kubernetes.ContainerImage {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *CronJobKubernetesSpec) GetResources() *kubernetes.ContainerResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *CronJobKubernetesSpec) GetEnv() *CronJobKubernetesContainerAppEnv {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *CronJobKubernetesSpec) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

func (x *CronJobKubernetesSpec) GetStartingDeadlineSeconds() uint64 {
	if x != nil {
		return x.StartingDeadlineSeconds
	}
	return 0
}

func (x *CronJobKubernetesSpec) GetConcurrencyPolicy() string {
	if x != nil {
		return x.ConcurrencyPolicy
	}
	return ""
}

func (x *CronJobKubernetesSpec) GetSuspend() bool {
	if x != nil {
		return x.Suspend
	}
	return false
}

func (x *CronJobKubernetesSpec) GetSuccessfulJobsHistoryLimit() uint32 {
	if x != nil {
		return x.SuccessfulJobsHistoryLimit
	}
	return 0
}

func (x *CronJobKubernetesSpec) GetFailedJobsHistoryLimit() uint32 {
	if x != nil {
		return x.FailedJobsHistoryLimit
	}
	return 0
}

func (x *CronJobKubernetesSpec) GetBackoffLimit() uint32 {
	if x != nil {
		return x.BackoffLimit
	}
	return 0
}

func (x *CronJobKubernetesSpec) GetRestartPolicy() string {
	if x != nil {
		return x.RestartPolicy
	}
	return ""
}

func (x *CronJobKubernetesSpec) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *CronJobKubernetesSpec) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

// *
// CronJobKubernetesContainerAppEnv defines the environment variables
// and secrets for the cron-job container.
type CronJobKubernetesContainerAppEnv struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A map of environment variable names to their values.
	Variables map[string]string `protobuf:"bytes,1,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// A map of secret names to their values.
	Secrets       map[string]string `protobuf:"bytes,2,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CronJobKubernetesContainerAppEnv) Reset() {
	*x = CronJobKubernetesContainerAppEnv{}
	mi := &file_project_planton_provider_kubernetes_workload_cronjobkubernetes_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CronJobKubernetesContainerAppEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronJobKubernetesContainerAppEnv) ProtoMessage() {}

func (x *CronJobKubernetesContainerAppEnv) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_cronjobkubernetes_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronJobKubernetesContainerAppEnv.ProtoReflect.Descriptor instead.
func (*CronJobKubernetesContainerAppEnv) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_cronjobkubernetes_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *CronJobKubernetesContainerAppEnv) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *CronJobKubernetesContainerAppEnv) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

var File_project_planton_provider_kubernetes_workload_cronjobkubernetes_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_kubernetes_workload_cronjobkubernetes_v1_spec_proto_rawDesc = "" +
	"\n" +
	"Lproject/planton/provider/kubernetes/workload/cronjobkubernetes/v1/spec.proto\x12Bproject.planton.provider.kubernetes.workloads.cronjobkubernetes.v1\x1a\x1bbuf/validate/validate.proto\x1a2project/planton/shared/kubernetes/kubernetes.proto\x1a/project/planton/shared/kubernetes/options.proto\x1a,project/planton/shared/options/options.proto\"\xf1\x06\n" +
	"\x15CronJobKubernetesSpec\x12G\n" +
	"\x05image\x18\x01 \x01(\v21.project.planton.shared.kubernetes.ContainerImageR\x05image\x12v\n" +
	"\tresources\x18\x02 \x01(\v25.project.planton.shared.kubernetes.ContainerResourcesB!\xba\xfb\xa4\x02\x1c\n" +
	"\f\n" +
	"\x051000m\x12\x031Gi\x12\f\n" +
	"\x0350m\x12\x05100MiR\tresources\x12v\n" +
	"\x03env\x18\x03 \x01(\v2d.project.planton.provider.kubernetes.workloads.cronjobkubernetes.v1.CronJobKubernetesContainerAppEnvR\x03env\x12\"\n" +
	"\bschedule\x18\x04 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\bschedule\x12G\n" +
	"\x19starting_deadline_seconds\x18\x05 \x01(\x04B\v\xbaH\x03\xd8\x01\x02\x8a\xa6\x1d\x010R\x17startingDeadlineSeconds\x12V\n" +
	"\x12concurrency_policy\x18\x06 \x01(\tB'\xbaH\x1ar\x18R\x05AllowR\x06ForbidR\aReplace\x8a\xa6\x1d\x06ForbidR\x11concurrencyPolicy\x12#\n" +
	"\asuspend\x18\a \x01(\bB\t\x8a\xa6\x1d\x05falseR\asuspend\x12H\n" +
	"\x1dsuccessful_jobs_history_limit\x18\b \x01(\rB\x05\x8a\xa6\x1d\x013R\x1asuccessfulJobsHistoryLimit\x12@\n" +
	"\x19failed_jobs_history_limit\x18\t \x01(\rB\x05\x8a\xa6\x1d\x011R\x16failedJobsHistoryLimit\x12*\n" +
	"\rbackoff_limit\x18\n" +
	" \x01(\rB\x05\x8a\xa6\x1d\x016R\fbackoffLimit\x12O\n" +
	"\x0erestart_policy\x18\v \x01(\tB(\xbaH\x1cr\x1aR\x06AlwaysR\tOnFailureR\x05Never\x8a\xa6\x1d\x05NeverR\rrestartPolicy\x12\x18\n" +
	"\acommand\x18\f \x03(\tR\acommand\x12\x12\n" +
	"\x04args\x18\r \x03(\tR\x04args\"\xbe\x03\n" +
	" CronJobKubernetesContainerAppEnv\x12\x91\x01\n" +
	"\tvariables\x18\x01 \x03(\v2s.project.planton.provider.kubernetes.workloads.cronjobkubernetes.v1.CronJobKubernetesContainerAppEnv.VariablesEntryR\tvariables\x12\x8b\x01\n" +
	"\asecrets\x18\x02 \x03(\v2q.project.planton.provider.kubernetes.workloads.cronjobkubernetes.v1.CronJobKubernetesContainerAppEnv.SecretsEntryR\asecrets\x1a<\n" +
	"\x0eVariablesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a:\n" +
	"\fSecretsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x8c\x04\n" +
	"Fcom.project.planton.provider.kubernetes.workloads.cronjobkubernetes.v1B\tSpecProtoP\x01Z\x85\x01github.com/project-planton/project-planton/apis/project/planton/provider/kubernetes/workload/cronjobkubernetes/v1;cronjobkubernetesv1\xa2\x02\x06PPPKWC\xaa\x02BProject.Planton.Provider.Kubernetes.Workloads.Cronjobkubernetes.V1\xca\x02BProject\\Planton\\Provider\\Kubernetes\\Workloads\\Cronjobkubernetes\\V1\xe2\x02NProject\\Planton\\Provider\\Kubernetes\\Workloads\\Cronjobkubernetes\\V1\\GPBMetadata\xea\x02HProject::Planton::Provider::Kubernetes::Workloads::Cronjobkubernetes::V1b\x06proto3"

var (
	file_project_planton_provider_kubernetes_workload_cronjobkubernetes_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_kubernetes_workload_cronjobkubernetes_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_kubernetes_workload_cronjobkubernetes_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_kubernetes_workload_cronjobkubernetes_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_kubernetes_workload_cronjobkubernetes_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_workload_cronjobkubernetes_v1_spec_proto_rawDesc), len(file_project_planton_provider_kubernetes_workload_cronjobkubernetes_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_kubernetes_workload_cronjobkubernetes_v1_spec_proto_rawDescData
}

var file_project_planton_provider_kubernetes_workload_cronjobkubernetes_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_project_planton_provider_kubernetes_workload_cronjobkubernetes_v1_spec_proto_goTypes = []any{
	(*CronJobKubernetesSpec)(nil),            // 0: project.planton.provider.kubernetes.workloads.cronjobkubernetes.v1.CronJobKubernetesSpec
	(*CronJobKubernetesContainerAppEnv)(nil), // 1: project.planton.provider.kubernetes.workloads.cronjobkubernetes.v1.CronJobKubernetesContainerAppEnv
	nil,                                      // 2: project.planton.provider.kubernetes.workloads.cronjobkubernetes.v1.CronJobKubernetesContainerAppEnv.VariablesEntry
	nil,                                      // 3: project.planton.provider.kubernetes.workloads.cronjobkubernetes.v1.CronJobKubernetesContainerAppEnv.SecretsEntry
	(*kubernetes.ContainerImage)(nil),        // 4: project.planton.shared.kubernetes.ContainerImage
	(*kubernetes.ContainerResources)(nil),    // 5: project.planton.shared.kubernetes.ContainerResources
}
var file_project_planton_provider_kubernetes_workload_cronjobkubernetes_v1_spec_proto_depIdxs = []int32{
	4, // 0: project.planton.provider.kubernetes.workloads.cronjobkubernetes.v1.CronJobKubernetesSpec.image:type_name -> project.planton.shared.kubernetes.ContainerImage
	5, // 1: project.planton.provider.kubernetes.workloads.cronjobkubernetes.v1.CronJobKubernetesSpec.resources:type_name -> project.planton.shared.kubernetes.ContainerResources
	1, // 2: project.planton.provider.kubernetes.workloads.cronjobkubernetes.v1.CronJobKubernetesSpec.env:type_name -> project.planton.provider.kubernetes.workloads.cronjobkubernetes.v1.CronJobKubernetesContainerAppEnv
	2, // 3: project.planton.provider.kubernetes.workloads.cronjobkubernetes.v1.CronJobKubernetesContainerAppEnv.variables:type_name -> project.planton.provider.kubernetes.workloads.cronjobkubernetes.v1.CronJobKubernetesContainerAppEnv.VariablesEntry
	3, // 4: project.planton.provider.kubernetes.workloads.cronjobkubernetes.v1.CronJobKubernetesContainerAppEnv.secrets:type_name -> project.planton.provider.kubernetes.workloads.cronjobkubernetes.v1.CronJobKubernetesContainerAppEnv.SecretsEntry
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_project_planton_provider_kubernetes_workload_cronjobkubernetes_v1_spec_proto_init() }
func file_project_planton_provider_kubernetes_workload_cronjobkubernetes_v1_spec_proto_init() {
	if File_project_planton_provider_kubernetes_workload_cronjobkubernetes_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_workload_cronjobkubernetes_v1_spec_proto_rawDesc), len(file_project_planton_provider_kubernetes_workload_cronjobkubernetes_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_kubernetes_workload_cronjobkubernetes_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_kubernetes_workload_cronjobkubernetes_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_kubernetes_workload_cronjobkubernetes_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_kubernetes_workload_cronjobkubernetes_v1_spec_proto = out.File
	file_project_planton_provider_kubernetes_workload_cronjobkubernetes_v1_spec_proto_goTypes = nil
	file_project_planton_provider_kubernetes_workload_cronjobkubernetes_v1_spec_proto_depIdxs = nil
}
