// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/kubernetes/workload/clickhousekubernetes/v1/spec.proto

package clickhousekubernetesv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	kubernetes "github.com/project-planton/project-planton/apis/project/planton/shared/kubernetes"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// **ClickhouseKubernetesSpec** defines the configuration for deploying ClickHouse on a Kubernetes cluster.
// This message specifies the parameters needed to create and manage a ClickHouse deployment within a Kubernetes environment.
// It includes container specifications, ingress settings, and cluster configuration options.
type ClickhouseKubernetesSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The container specifications for the ClickHouse deployment.
	Container *ClickhouseKubernetesContainer `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	// The ingress configuration for the ClickHouse deployment.
	Ingress *kubernetes.IngressSpec `protobuf:"bytes,2,opt,name=ingress,proto3" json:"ingress,omitempty"`
	// The cluster configuration for ClickHouse sharding and replication.
	Cluster *ClickhouseKubernetesClusterConfig `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// *
	// A map of key-value pairs that provide additional customization options for the Helm chart used
	// to deploy ClickHouse on Kubernetes. These values allow for further refinement of the deployment,
	// such as customizing resource limits, setting environment variables, or specifying version tags.
	// For detailed information on the available options, refer to the Helm chart documentation at:
	// https://artifacthub.io/packages/helm/bitnami/clickhouse
	HelmValues    map[string]string `protobuf:"bytes,4,rep,name=helm_values,json=helmValues,proto3" json:"helm_values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickhouseKubernetesSpec) Reset() {
	*x = ClickhouseKubernetesSpec{}
	mi := &file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseKubernetesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseKubernetesSpec) ProtoMessage() {}

func (x *ClickhouseKubernetesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseKubernetesSpec.ProtoReflect.Descriptor instead.
func (*ClickhouseKubernetesSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *ClickhouseKubernetesSpec) GetContainer() *ClickhouseKubernetesContainer {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *ClickhouseKubernetesSpec) GetIngress() *kubernetes.IngressSpec {
	if x != nil {
		return x.Ingress
	}
	return nil
}

func (x *ClickhouseKubernetesSpec) GetCluster() *ClickhouseKubernetesClusterConfig {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *ClickhouseKubernetesSpec) GetHelmValues() map[string]string {
	if x != nil {
		return x.HelmValues
	}
	return nil
}

// *
// **ClickhouseKubernetesContainer** specifies the container configuration for the ClickHouse application.
// It includes settings such as the number of replicas, resource allocations, data persistence options, and disk size.
// Proper configuration ensures optimal performance and data reliability for your ClickHouse deployment.
type ClickhouseKubernetesContainer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of ClickHouse pods to deploy.
	Replicas int32 `protobuf:"varint,1,opt,name=replicas,proto3" json:"replicas,omitempty"`
	// The CPU and memory resources allocated to the ClickHouse container.
	Resources *kubernetes.ContainerResources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// *
	// A flag to enable or disable data persistence for ClickHouse.
	// When enabled, data is persisted to a storage volume, allowing data to survive pod restarts.
	// Defaults to `true`.
	IsPersistenceEnabled bool `protobuf:"varint,3,opt,name=is_persistence_enabled,json=isPersistenceEnabled,proto3" json:"is_persistence_enabled,omitempty"`
	// *
	// The size of the persistent volume attached to each ClickHouse pod (e.g., "10Gi").
	// If the client does not provide a value, a default value is configured.
	// This attribute is ignored when persistence is not enabled.
	// **Note:** This value cannot be modified after creation due to Kubernetes limitations on stateful sets.
	DiskSize      string `protobuf:"bytes,4,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickhouseKubernetesContainer) Reset() {
	*x = ClickhouseKubernetesContainer{}
	mi := &file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseKubernetesContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseKubernetesContainer) ProtoMessage() {}

func (x *ClickhouseKubernetesContainer) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseKubernetesContainer.ProtoReflect.Descriptor instead.
func (*ClickhouseKubernetesContainer) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *ClickhouseKubernetesContainer) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *ClickhouseKubernetesContainer) GetResources() *kubernetes.ContainerResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ClickhouseKubernetesContainer) GetIsPersistenceEnabled() bool {
	if x != nil {
		return x.IsPersistenceEnabled
	}
	return false
}

func (x *ClickhouseKubernetesContainer) GetDiskSize() string {
	if x != nil {
		return x.DiskSize
	}
	return ""
}

// *
// **ClickhouseKubernetesClusterConfig** defines the clustering configuration for ClickHouse.
// This includes settings for sharding and replication to enable distributed ClickHouse deployments.
type ClickhouseKubernetesClusterConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// A flag to enable or disable clustering mode for ClickHouse.
	// When enabled, ClickHouse will be deployed in a distributed cluster configuration.
	// Defaults to `false`.
	IsEnabled bool `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	// *
	// The number of shards in the ClickHouse cluster.
	// Sharding distributes data across multiple nodes for horizontal scaling.
	// This value is ignored if clustering is not enabled.
	ShardCount int32 `protobuf:"varint,2,opt,name=shard_count,json=shardCount,proto3" json:"shard_count,omitempty"`
	// *
	// The number of replicas for each shard.
	// Replication provides data redundancy and high availability.
	// This value is ignored if clustering is not enabled.
	ReplicaCount  int32 `protobuf:"varint,3,opt,name=replica_count,json=replicaCount,proto3" json:"replica_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickhouseKubernetesClusterConfig) Reset() {
	*x = ClickhouseKubernetesClusterConfig{}
	mi := &file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseKubernetesClusterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseKubernetesClusterConfig) ProtoMessage() {}

func (x *ClickhouseKubernetesClusterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseKubernetesClusterConfig.ProtoReflect.Descriptor instead.
func (*ClickhouseKubernetesClusterConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *ClickhouseKubernetesClusterConfig) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *ClickhouseKubernetesClusterConfig) GetShardCount() int32 {
	if x != nil {
		return x.ShardCount
	}
	return 0
}

func (x *ClickhouseKubernetesClusterConfig) GetReplicaCount() int32 {
	if x != nil {
		return x.ReplicaCount
	}
	return 0
}

var file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*ClickhouseKubernetesContainer)(nil),
		Field:         519001,
		Name:          "project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.default_container",
		Tag:           "bytes,519001,opt,name=default_container",
		Filename:      "project/planton/provider/kubernetes/workload/clickhousekubernetes/v1/spec.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickhouseKubernetesContainer default_container = 519001;
	E_DefaultContainer = &file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_extTypes[0]
)

var File_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDesc = "" +
	"\n" +
	"Oproject/planton/provider/kubernetes/workload/clickhousekubernetes/v1/spec.proto\x12Dproject.planton.provider.kubernetes.workload.clickhousekubernetes.v1\x1a\x1bbuf/validate/validate.proto\x1a2project/planton/shared/kubernetes/kubernetes.proto\x1a/project/planton/shared/kubernetes/options.proto\x1a,project/planton/shared/options/options.proto\x1a google/protobuf/descriptor.proto\"\xec\x04\n" +
	"\x18ClickhouseKubernetesSpec\x12\xb0\x01\n" +
	"\tcontainer\x18\x01 \x01(\v2c.project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickhouseKubernetesContainerB-ʵ\xfd\x01(\b\x01\x12\x1d\n" +
	"\f\n" +
	"\x051000m\x12\x032Gi\x12\r\n" +
	"\x04100m\x12\x05256Mi\x18\x01\"\x038GiR\tcontainer\x12H\n" +
	"\aingress\x18\x02 \x01(\v2..project.planton.shared.kubernetes.IngressSpecR\aingress\x12\x81\x01\n" +
	"\acluster\x18\x03 \x01(\v2g.project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickhouseKubernetesClusterConfigR\acluster\x12\x8f\x01\n" +
	"\vhelm_values\x18\x04 \x03(\v2n.project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickhouseKubernetesSpec.HelmValuesEntryR\n" +
	"helmValues\x1a=\n" +
	"\x0fHelmValuesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xcc\x04\n" +
	"\x1dClickhouseKubernetesContainer\x12#\n" +
	"\breplicas\x18\x01 \x01(\x05B\a\xbaH\x04\x1a\x02(\x01R\breplicas\x12S\n" +
	"\tresources\x18\x02 \x01(\v25.project.planton.shared.kubernetes.ContainerResourcesR\tresources\x124\n" +
	"\x16is_persistence_enabled\x18\x03 \x01(\bR\x14isPersistenceEnabled\x12\x1b\n" +
	"\tdisk_size\x18\x04 \x01(\tR\bdiskSize:\xdd\x02\xbaH\xd9\x02\x1a\xd6\x02\n" +
	"!spec.container.disk_size.required\x12IDisk size is required and must match the format if persistence is enabled\x1a\xe5\x01((!this.is_persistence_enabled && (size(this.disk_size) == 0 || this.disk_size == '')) || (this.is_persistence_enabled && size(this.disk_size) > 0 && this.disk_size.matches('^\\\\d+(\\\\.\\\\d+)?\\\\s?(Ki|Mi|Gi|Ti|Pi|Ei|K|M|G|T|P|E)$')))\"\xc9\x02\n" +
	"!ClickhouseKubernetesClusterConfig\x12\x1d\n" +
	"\n" +
	"is_enabled\x18\x01 \x01(\bR\tisEnabled\x12\x1f\n" +
	"\vshard_count\x18\x02 \x01(\x05R\n" +
	"shardCount\x12#\n" +
	"\rreplica_count\x18\x03 \x01(\x05R\freplicaCount:\xbe\x01\xbaH\xba\x01\x1a\xb7\x01\n" +
	" spec.cluster.counts_when_enabled\x12KShard count and replica count must be at least 1 when clustering is enabled\x1aF!this.is_enabled || (this.shard_count >= 1 && this.replica_count >= 1):\xb1\x01\n" +
	"\x11default_container\x12\x1d.google.protobuf.FieldOptions\x18\xd9\xd6\x1f \x01(\v2c.project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickhouseKubernetesContainerR\x10defaultContainerB\x9c\x04\n" +
	"Hcom.project.planton.provider.kubernetes.workload.clickhousekubernetes.v1B\tSpecProtoP\x01Z\x8b\x01github.com/project-planton/project-planton/apis/project/planton/provider/kubernetes/workload/clickhousekubernetes/v1;clickhousekubernetesv1\xa2\x02\x06PPPKWC\xaa\x02DProject.Planton.Provider.Kubernetes.Workload.Clickhousekubernetes.V1\xca\x02DProject\\Planton\\Provider\\Kubernetes\\Workload\\Clickhousekubernetes\\V1\xe2\x02PProject\\Planton\\Provider\\Kubernetes\\Workload\\Clickhousekubernetes\\V1\\GPBMetadata\xea\x02JProject::Planton::Provider::Kubernetes::Workload::Clickhousekubernetes::V1b\x06proto3"

var (
	file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDesc), len(file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDescData
}

var file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_goTypes = []any{
	(*ClickhouseKubernetesSpec)(nil),          // 0: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickhouseKubernetesSpec
	(*ClickhouseKubernetesContainer)(nil),     // 1: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickhouseKubernetesContainer
	(*ClickhouseKubernetesClusterConfig)(nil), // 2: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickhouseKubernetesClusterConfig
	nil,                                   // 3: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickhouseKubernetesSpec.HelmValuesEntry
	(*kubernetes.IngressSpec)(nil),        // 4: project.planton.shared.kubernetes.IngressSpec
	(*kubernetes.ContainerResources)(nil), // 5: project.planton.shared.kubernetes.ContainerResources
	(*descriptorpb.FieldOptions)(nil),     // 6: google.protobuf.FieldOptions
}
var file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickhouseKubernetesSpec.container:type_name -> project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickhouseKubernetesContainer
	4, // 1: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickhouseKubernetesSpec.ingress:type_name -> project.planton.shared.kubernetes.IngressSpec
	2, // 2: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickhouseKubernetesSpec.cluster:type_name -> project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickhouseKubernetesClusterConfig
	3, // 3: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickhouseKubernetesSpec.helm_values:type_name -> project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickhouseKubernetesSpec.HelmValuesEntry
	5, // 4: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickhouseKubernetesContainer.resources:type_name -> project.planton.shared.kubernetes.ContainerResources
	6, // 5: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.default_container:extendee -> google.protobuf.FieldOptions
	1, // 6: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.default_container:type_name -> project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickhouseKubernetesContainer
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	6, // [6:7] is the sub-list for extension type_name
	5, // [5:6] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() {
	file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_init()
}
func file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_init() {
	if File_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDesc), len(file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_msgTypes,
		ExtensionInfos:    file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_extTypes,
	}.Build()
	File_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto = out.File
	file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_goTypes = nil
	file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_depIdxs = nil
}
