// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/kubernetes/workload/clickhousekubernetes/v1/spec.proto

package clickhousekubernetesv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	kubernetes "github.com/project-planton/project-planton/apis/project/planton/shared/kubernetes"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Type of coordination service to use.
type ClickHouseKubernetesCoordinationConfig_CoordinationType int32

const (
	// Unspecified defaults to 'keeper' (recommended for new deployments)
	ClickHouseKubernetesCoordinationConfig_unspecified ClickHouseKubernetesCoordinationConfig_CoordinationType = 0
	// Auto-managed ClickHouse Keeper deployed by the operator.
	// Recommended: More efficient than ZooKeeper, easier to manage.
	// Creates a ClickHouseKeeperInstallation resource automatically.
	ClickHouseKubernetesCoordinationConfig_keeper ClickHouseKubernetesCoordinationConfig_CoordinationType = 1
	// Use existing ClickHouse Keeper cluster.
	// For shared infrastructure or advanced scenarios.
	ClickHouseKubernetesCoordinationConfig_external_keeper ClickHouseKubernetesCoordinationConfig_CoordinationType = 2
	// Use existing ZooKeeper cluster.
	// For legacy systems or shared ZooKeeper infrastructure (Kafka, etc.)
	ClickHouseKubernetesCoordinationConfig_external_zookeeper ClickHouseKubernetesCoordinationConfig_CoordinationType = 3
)

// Enum value maps for ClickHouseKubernetesCoordinationConfig_CoordinationType.
var (
	ClickHouseKubernetesCoordinationConfig_CoordinationType_name = map[int32]string{
		0: "unspecified",
		1: "keeper",
		2: "external_keeper",
		3: "external_zookeeper",
	}
	ClickHouseKubernetesCoordinationConfig_CoordinationType_value = map[string]int32{
		"unspecified":        0,
		"keeper":             1,
		"external_keeper":    2,
		"external_zookeeper": 3,
	}
)

func (x ClickHouseKubernetesCoordinationConfig_CoordinationType) Enum() *ClickHouseKubernetesCoordinationConfig_CoordinationType {
	p := new(ClickHouseKubernetesCoordinationConfig_CoordinationType)
	*p = x
	return p
}

func (x ClickHouseKubernetesCoordinationConfig_CoordinationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClickHouseKubernetesCoordinationConfig_CoordinationType) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_enumTypes[0].Descriptor()
}

func (ClickHouseKubernetesCoordinationConfig_CoordinationType) Type() protoreflect.EnumType {
	return &file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_enumTypes[0]
}

func (x ClickHouseKubernetesCoordinationConfig_CoordinationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClickHouseKubernetesCoordinationConfig_CoordinationType.Descriptor instead.
func (ClickHouseKubernetesCoordinationConfig_CoordinationType) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDescGZIP(), []int{3, 0}
}

// *
// Log level for ClickHouse server.
type ClickHouseKubernetesLoggingConfig_LogLevel int32

const (
	// Information level: Logs errors, warnings, and important operational events.
	// Default and recommended for production environments.
	// Typical log volume: 5-10 MB/day per pod under normal load.
	ClickHouseKubernetesLoggingConfig_information ClickHouseKubernetesLoggingConfig_LogLevel = 0
	// Debug level: Logs detailed debugging information including query execution details.
	// Use for troubleshooting specific issues.
	// Warning: Generates 10-50x more logs than information level.
	// Typical log volume: 50-500 MB/day per pod.
	ClickHouseKubernetesLoggingConfig_debug ClickHouseKubernetesLoggingConfig_LogLevel = 1
	// Trace level: Logs extensive tracing information including internal operations.
	// Use only for deep troubleshooting or development.
	// Warning: Generates 50-100x more logs than information level.
	// Can impact performance due to I/O overhead.
	// Typical log volume: 500MB-5GB/day per pod.
	ClickHouseKubernetesLoggingConfig_trace ClickHouseKubernetesLoggingConfig_LogLevel = 2
)

// Enum value maps for ClickHouseKubernetesLoggingConfig_LogLevel.
var (
	ClickHouseKubernetesLoggingConfig_LogLevel_name = map[int32]string{
		0: "information",
		1: "debug",
		2: "trace",
	}
	ClickHouseKubernetesLoggingConfig_LogLevel_value = map[string]int32{
		"information": 0,
		"debug":       1,
		"trace":       2,
	}
)

func (x ClickHouseKubernetesLoggingConfig_LogLevel) Enum() *ClickHouseKubernetesLoggingConfig_LogLevel {
	p := new(ClickHouseKubernetesLoggingConfig_LogLevel)
	*p = x
	return p
}

func (x ClickHouseKubernetesLoggingConfig_LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClickHouseKubernetesLoggingConfig_LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_enumTypes[1].Descriptor()
}

func (ClickHouseKubernetesLoggingConfig_LogLevel) Type() protoreflect.EnumType {
	return &file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_enumTypes[1]
}

func (x ClickHouseKubernetesLoggingConfig_LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClickHouseKubernetesLoggingConfig_LogLevel.Descriptor instead.
func (ClickHouseKubernetesLoggingConfig_LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDescGZIP(), []int{6, 0}
}

// *
// **ClickHouseKubernetesSpec** defines the configuration for deploying ClickHouse on a Kubernetes cluster.
// This message specifies the parameters needed to create and manage a ClickHouse deployment within a Kubernetes environment.
// It includes cluster name, container specifications, ingress settings, and cluster configuration options.
//
// The deployment uses the Altinity ClickHouse Operator, which provides production-grade ClickHouse cluster management
// with features like automated upgrades, scaling, and ZooKeeper coordination.
type ClickHouseKubernetesSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The name of the ClickHouse cluster.
	// This is used as the identifier for the ClickHouseInstallation custom resource.
	// Must be a valid DNS subdomain name (lowercase alphanumeric with hyphens).
	// Defaults to the resource metadata name if not specified.
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// The container specifications for the ClickHouse deployment.
	Container *ClickHouseKubernetesContainer `protobuf:"bytes,2,opt,name=container,proto3" json:"container,omitempty"`
	// The ingress configuration for the ClickHouse deployment.
	Ingress *ClickHouseKubernetesIngress `protobuf:"bytes,3,opt,name=ingress,proto3" json:"ingress,omitempty"`
	// The cluster configuration for ClickHouse sharding and replication.
	Cluster *ClickHouseKubernetesClusterConfig `protobuf:"bytes,4,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// *
	// The ClickHouse version to deploy (e.g., "24.3", "23.8").
	// If not specified, the operator's default stable version will be used.
	// It's recommended to specify a version for production deployments to ensure consistency.
	Version string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	// *
	// Coordination configuration for cluster operations.
	// Required when cluster.is_enabled = true.
	//
	// Recommended: Leave unspecified to use auto-managed ClickHouse Keeper (default).
	// This is more efficient than ZooKeeper and easier to manage.
	//
	// Advanced: Configure external Keeper or ZooKeeper for shared infrastructure scenarios.
	Coordination *ClickHouseKubernetesCoordinationConfig `protobuf:"bytes,6,opt,name=coordination,proto3" json:"coordination,omitempty"`
	// *
	// ZooKeeper configuration for cluster coordination.
	//
	// DEPRECATED: Use 'coordination' field instead.
	// This field is kept for backward compatibility and will be removed in v2.
	//
	// If both 'coordination' and 'zookeeper' are specified, 'coordination' takes precedence.
	//
	// Deprecated: Marked as deprecated in project/planton/provider/kubernetes/workload/clickhousekubernetes/v1/spec.proto.
	Zookeeper *ClickHouseKubernetesZookeeperConfig `protobuf:"bytes,7,opt,name=zookeeper,proto3" json:"zookeeper,omitempty"`
	// *
	// Logging configuration for ClickHouse server.
	// Controls the verbosity of ClickHouse server logs.
	//
	// Required field. Defaults to 'information' level (recommended for production).
	// Use 'debug' or 'trace' levels only for troubleshooting as they generate significant log volume.
	Logging       *ClickHouseKubernetesLoggingConfig `protobuf:"bytes,8,opt,name=logging,proto3" json:"logging,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickHouseKubernetesSpec) Reset() {
	*x = ClickHouseKubernetesSpec{}
	mi := &file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickHouseKubernetesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickHouseKubernetesSpec) ProtoMessage() {}

func (x *ClickHouseKubernetesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickHouseKubernetesSpec.ProtoReflect.Descriptor instead.
func (*ClickHouseKubernetesSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *ClickHouseKubernetesSpec) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ClickHouseKubernetesSpec) GetContainer() *ClickHouseKubernetesContainer {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *ClickHouseKubernetesSpec) GetIngress() *ClickHouseKubernetesIngress {
	if x != nil {
		return x.Ingress
	}
	return nil
}

func (x *ClickHouseKubernetesSpec) GetCluster() *ClickHouseKubernetesClusterConfig {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *ClickHouseKubernetesSpec) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ClickHouseKubernetesSpec) GetCoordination() *ClickHouseKubernetesCoordinationConfig {
	if x != nil {
		return x.Coordination
	}
	return nil
}

// Deprecated: Marked as deprecated in project/planton/provider/kubernetes/workload/clickhousekubernetes/v1/spec.proto.
func (x *ClickHouseKubernetesSpec) GetZookeeper() *ClickHouseKubernetesZookeeperConfig {
	if x != nil {
		return x.Zookeeper
	}
	return nil
}

func (x *ClickHouseKubernetesSpec) GetLogging() *ClickHouseKubernetesLoggingConfig {
	if x != nil {
		return x.Logging
	}
	return nil
}

// *
// **ClickHouseKubernetesContainer** specifies the container configuration for the ClickHouse application.
// It includes resource allocations, data persistence options, and disk size.
// Proper configuration ensures optimal performance and data reliability for your ClickHouse deployment.
type ClickHouseKubernetesContainer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The number of ClickHouse replicas (pods) to deploy.
	// For non-clustered deployments, this is the total number of ClickHouse pods.
	// For clustered deployments, this value is ignored in favor of shard_count * replica_count.
	// Must be at least 1.
	Replicas int32 `protobuf:"varint,1,opt,name=replicas,proto3" json:"replicas,omitempty"`
	// The CPU and memory resources allocated to each ClickHouse container.
	Resources *kubernetes.ContainerResources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// *
	// A flag to enable or disable data persistence for ClickHouse.
	// When enabled, data is persisted to a storage volume, allowing data to survive pod restarts.
	// Defaults to `true`. Strongly recommended for production use.
	IsPersistenceEnabled bool `protobuf:"varint,3,opt,name=is_persistence_enabled,json=isPersistenceEnabled,proto3" json:"is_persistence_enabled,omitempty"`
	// *
	// The size of the persistent volume attached to each ClickHouse pod (e.g., "50Gi", "100Gi").
	// If the client does not provide a value, a default value is configured.
	// This attribute is ignored when persistence is not enabled.
	// **Note:** This value cannot be easily modified after creation due to Kubernetes limitations.
	// Plan for growth and allocate sufficient storage initially.
	DiskSize      string `protobuf:"bytes,4,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickHouseKubernetesContainer) Reset() {
	*x = ClickHouseKubernetesContainer{}
	mi := &file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickHouseKubernetesContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickHouseKubernetesContainer) ProtoMessage() {}

func (x *ClickHouseKubernetesContainer) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickHouseKubernetesContainer.ProtoReflect.Descriptor instead.
func (*ClickHouseKubernetesContainer) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *ClickHouseKubernetesContainer) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *ClickHouseKubernetesContainer) GetResources() *kubernetes.ContainerResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ClickHouseKubernetesContainer) GetIsPersistenceEnabled() bool {
	if x != nil {
		return x.IsPersistenceEnabled
	}
	return false
}

func (x *ClickHouseKubernetesContainer) GetDiskSize() string {
	if x != nil {
		return x.DiskSize
	}
	return ""
}

// *
// **ClickHouseKubernetesClusterConfig** defines the clustering configuration for ClickHouse.
// This includes settings for sharding and replication to enable distributed ClickHouse deployments.
//
// Clustering provides horizontal scaling and high availability. When clustering is enabled:
// - Data is distributed across shards for parallel processing
// - Each shard can have multiple replicas for redundancy
// - ZooKeeper is used for cluster coordination (automatically managed by the operator)
type ClickHouseKubernetesClusterConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// A flag to enable or disable clustering mode for ClickHouse.
	// When enabled, ClickHouse will be deployed in a distributed cluster configuration with sharding and replication.
	// When disabled, a single standalone ClickHouse instance is deployed.
	// Defaults to `false` (standalone mode suitable for development and small workloads).
	IsEnabled bool `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	// *
	// The number of shards in the ClickHouse cluster.
	// Sharding distributes data across multiple nodes for horizontal scaling and improved query performance.
	// Each shard processes queries in parallel, allowing for massive throughput.
	// This value is ignored if clustering is not enabled.
	// Typical values: 2-8 for most use cases, can go higher for very large deployments.
	ShardCount int32 `protobuf:"varint,2,opt,name=shard_count,json=shardCount,proto3" json:"shard_count,omitempty"`
	// *
	// The number of replicas for each shard.
	// Replication provides data redundancy and high availability.
	// If one replica fails, queries can be served by other replicas in the same shard.
	// This value is ignored if clustering is not enabled.
	// Typical values: 2-3 (more than 3 replicas is rarely needed).
	ReplicaCount  int32 `protobuf:"varint,3,opt,name=replica_count,json=replicaCount,proto3" json:"replica_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickHouseKubernetesClusterConfig) Reset() {
	*x = ClickHouseKubernetesClusterConfig{}
	mi := &file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickHouseKubernetesClusterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickHouseKubernetesClusterConfig) ProtoMessage() {}

func (x *ClickHouseKubernetesClusterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickHouseKubernetesClusterConfig.ProtoReflect.Descriptor instead.
func (*ClickHouseKubernetesClusterConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *ClickHouseKubernetesClusterConfig) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *ClickHouseKubernetesClusterConfig) GetShardCount() int32 {
	if x != nil {
		return x.ShardCount
	}
	return 0
}

func (x *ClickHouseKubernetesClusterConfig) GetReplicaCount() int32 {
	if x != nil {
		return x.ReplicaCount
	}
	return 0
}

// *
// **ClickHouseKubernetesCoordinationConfig** defines coordination service configuration for ClickHouse cluster.
// ClickHouse requires coordination for distributed operations (DDL execution, replication management).
//
// For most use cases, auto-managed ClickHouse Keeper (default) is recommended.
// It's more efficient than ZooKeeper (75% less resources) and managed by the same operator.
//
// Use external coordination when:
// - Sharing infrastructure across multiple ClickHouse clusters
// - Using existing ZooKeeper for other services (Kafka, etc.)
// - Migrating from ZooKeeper to ClickHouse Keeper
type ClickHouseKubernetesCoordinationConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// Type of coordination service to use.
	// Defaults to 'keeper' (auto-managed ClickHouse Keeper).
	Type ClickHouseKubernetesCoordinationConfig_CoordinationType `protobuf:"varint,1,opt,name=type,proto3,enum=project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesCoordinationConfig_CoordinationType" json:"type,omitempty"`
	// *
	// Configuration for auto-managed ClickHouse Keeper.
	// Only used when type = 'keeper'.
	// If not specified, sensible defaults are used (1 replica for dev, 3 for prod).
	KeeperConfig *ClickHouseKubernetesKeeperConfig `protobuf:"bytes,2,opt,name=keeper_config,json=keeperConfig,proto3" json:"keeper_config,omitempty"`
	// *
	// Configuration for external coordination service.
	// Only used when type = 'external_keeper' or 'external_zookeeper'.
	// Must specify at least one node.
	ExternalConfig *ClickHouseKubernetesExternalCoordinationConfig `protobuf:"bytes,3,opt,name=external_config,json=externalConfig,proto3" json:"external_config,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ClickHouseKubernetesCoordinationConfig) Reset() {
	*x = ClickHouseKubernetesCoordinationConfig{}
	mi := &file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickHouseKubernetesCoordinationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickHouseKubernetesCoordinationConfig) ProtoMessage() {}

func (x *ClickHouseKubernetesCoordinationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickHouseKubernetesCoordinationConfig.ProtoReflect.Descriptor instead.
func (*ClickHouseKubernetesCoordinationConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDescGZIP(), []int{3}
}

func (x *ClickHouseKubernetesCoordinationConfig) GetType() ClickHouseKubernetesCoordinationConfig_CoordinationType {
	if x != nil {
		return x.Type
	}
	return ClickHouseKubernetesCoordinationConfig_unspecified
}

func (x *ClickHouseKubernetesCoordinationConfig) GetKeeperConfig() *ClickHouseKubernetesKeeperConfig {
	if x != nil {
		return x.KeeperConfig
	}
	return nil
}

func (x *ClickHouseKubernetesCoordinationConfig) GetExternalConfig() *ClickHouseKubernetesExternalCoordinationConfig {
	if x != nil {
		return x.ExternalConfig
	}
	return nil
}

// *
// **ClickHouseKubernetesKeeperConfig** defines configuration for auto-managed ClickHouse Keeper.
// The operator creates a ClickHouseKeeperInstallation resource with these settings.
//
// ClickHouse Keeper is a ZooKeeper alternative written in C++ specifically for ClickHouse.
// Benefits: 75% less CPU/memory usage, no JVM overhead, protocol-compatible with ZooKeeper.
type ClickHouseKubernetesKeeperConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// Number of ClickHouse Keeper replicas.
	// Must be an odd number for quorum (1, 3, or 5).
	//
	// Recommendations:
	// - Development/Testing: 1 (no fault tolerance)
	// - Production: 3 (survives 1 node failure)
	// - Large Production: 5 (survives 2 node failures)
	//
	// Defaults to 1 if not specified.
	Replicas int32 `protobuf:"varint,1,opt,name=replicas,proto3" json:"replicas,omitempty"`
	// *
	// Resources for each Keeper pod.
	//
	// Recommended defaults (applied if not specified):
	// - Requests: 100m CPU, 256Mi memory
	// - Limits: 500m CPU, 1Gi memory
	//
	// ClickHouse Keeper is very efficient; these defaults work for most deployments.
	Resources *kubernetes.ContainerResources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// *
	// Persistent volume size for each Keeper pod.
	// Defaults to "10Gi" if not specified.
	//
	// Keeper stores coordination metadata (not data), so 10Gi is sufficient for most use cases.
	// Consider larger sizes (20-50Gi) for very large clusters (100+ nodes).
	DiskSize      string `protobuf:"bytes,3,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickHouseKubernetesKeeperConfig) Reset() {
	*x = ClickHouseKubernetesKeeperConfig{}
	mi := &file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickHouseKubernetesKeeperConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickHouseKubernetesKeeperConfig) ProtoMessage() {}

func (x *ClickHouseKubernetesKeeperConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickHouseKubernetesKeeperConfig.ProtoReflect.Descriptor instead.
func (*ClickHouseKubernetesKeeperConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDescGZIP(), []int{4}
}

func (x *ClickHouseKubernetesKeeperConfig) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *ClickHouseKubernetesKeeperConfig) GetResources() *kubernetes.ContainerResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ClickHouseKubernetesKeeperConfig) GetDiskSize() string {
	if x != nil {
		return x.DiskSize
	}
	return ""
}

// *
// **ClickHouseKubernetesExternalCoordinationConfig** defines external coordination service configuration.
// Use when connecting to existing ClickHouse Keeper or ZooKeeper infrastructure.
//
// Common scenarios:
// - Shared ZooKeeper used by Kafka, Solr, and ClickHouse
// - Centrally managed Keeper infrastructure
// - Multi-cluster coordination through shared Keeper
type ClickHouseKubernetesExternalCoordinationConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// List of coordination service nodes in "host:port" format.
	//
	// For production, specify all nodes in the ensemble for redundancy.
	//
	// Examples:
	// - ClickHouse Keeper: ["keeper-prod:2181"]
	// - ClickHouse Keeper HA: ["keeper-0.keeper-svc:2181", "keeper-1.keeper-svc:2181", "keeper-2.keeper-svc:2181"]
	// - ZooKeeper: ["zk-0.zk.svc:2181", "zk-1.zk.svc:2181", "zk-2.zk.svc:2181"]
	//
	// Port 2181 is the standard client port for both ZooKeeper and ClickHouse Keeper.
	Nodes         []string `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickHouseKubernetesExternalCoordinationConfig) Reset() {
	*x = ClickHouseKubernetesExternalCoordinationConfig{}
	mi := &file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickHouseKubernetesExternalCoordinationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickHouseKubernetesExternalCoordinationConfig) ProtoMessage() {}

func (x *ClickHouseKubernetesExternalCoordinationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickHouseKubernetesExternalCoordinationConfig.ProtoReflect.Descriptor instead.
func (*ClickHouseKubernetesExternalCoordinationConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDescGZIP(), []int{5}
}

func (x *ClickHouseKubernetesExternalCoordinationConfig) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// *
// **ClickHouseKubernetesLoggingConfig** defines logging configuration for ClickHouse server.
// Controls the verbosity and behavior of ClickHouse server logs.
//
// ClickHouse logging can significantly impact I/O performance and disk usage.
// Choose the appropriate level based on your operational needs.
type ClickHouseKubernetesLoggingConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The log level for ClickHouse server logs.
	// Defaults to 'information' if not specified.
	//
	// Production recommendation: Use 'information' for normal operations.
	// Temporarily switch to 'debug' or 'trace' when troubleshooting specific issues,
	// then revert to 'information' to avoid excessive log volume.
	Level         ClickHouseKubernetesLoggingConfig_LogLevel `protobuf:"varint,1,opt,name=level,proto3,enum=project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesLoggingConfig_LogLevel" json:"level,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickHouseKubernetesLoggingConfig) Reset() {
	*x = ClickHouseKubernetesLoggingConfig{}
	mi := &file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickHouseKubernetesLoggingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickHouseKubernetesLoggingConfig) ProtoMessage() {}

func (x *ClickHouseKubernetesLoggingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickHouseKubernetesLoggingConfig.ProtoReflect.Descriptor instead.
func (*ClickHouseKubernetesLoggingConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDescGZIP(), []int{6}
}

func (x *ClickHouseKubernetesLoggingConfig) GetLevel() ClickHouseKubernetesLoggingConfig_LogLevel {
	if x != nil {
		return x.Level
	}
	return ClickHouseKubernetesLoggingConfig_information
}

// *
// **ClickHouseKubernetesIngress** defines the ingress configuration for ClickHouse deployment.
// Controls external access to the ClickHouse cluster via LoadBalancer with automatic DNS configuration.
type ClickHouseKubernetesIngress struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// Flag to enable or disable ingress.
	// When enabled, creates a LoadBalancer service with external-dns annotations.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// *
	// The full hostname for external access (e.g., "clickhouse.example.com").
	// This hostname will be configured automatically via external-dns.
	// Required when enabled is true.
	Hostname      string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickHouseKubernetesIngress) Reset() {
	*x = ClickHouseKubernetesIngress{}
	mi := &file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickHouseKubernetesIngress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickHouseKubernetesIngress) ProtoMessage() {}

func (x *ClickHouseKubernetesIngress) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickHouseKubernetesIngress.ProtoReflect.Descriptor instead.
func (*ClickHouseKubernetesIngress) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDescGZIP(), []int{7}
}

func (x *ClickHouseKubernetesIngress) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ClickHouseKubernetesIngress) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

// *
// **ClickHouseKubernetesZookeeperConfig** defines the ZooKeeper configuration for ClickHouse cluster coordination.
//
// DEPRECATED: This message is deprecated in favor of ClickHouseKubernetesCoordinationConfig.
// Use the 'coordination' field in ClickHouseKubernetesSpec instead.
//
// This is kept for backward compatibility and will be removed in v2.
type ClickHouseKubernetesZookeeperConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// A flag to use external ZooKeeper instead of operator-managed ZooKeeper.
	// When false (default), the operator automatically provisions and manages ZooKeeper pods.
	// When true, you must provide external ZooKeeper nodes.
	UseExternal bool `protobuf:"varint,1,opt,name=use_external,json=useExternal,proto3" json:"use_external,omitempty"`
	// *
	// List of external ZooKeeper nodes in the format "host:port".
	// This is only used when use_external is true.
	// Example: ["zk-0.zk-headless.default.svc.cluster.local:2181", "zk-1.zk-headless.default.svc.cluster.local:2181"]
	Nodes         []string `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickHouseKubernetesZookeeperConfig) Reset() {
	*x = ClickHouseKubernetesZookeeperConfig{}
	mi := &file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickHouseKubernetesZookeeperConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickHouseKubernetesZookeeperConfig) ProtoMessage() {}

func (x *ClickHouseKubernetesZookeeperConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickHouseKubernetesZookeeperConfig.ProtoReflect.Descriptor instead.
func (*ClickHouseKubernetesZookeeperConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDescGZIP(), []int{8}
}

func (x *ClickHouseKubernetesZookeeperConfig) GetUseExternal() bool {
	if x != nil {
		return x.UseExternal
	}
	return false
}

func (x *ClickHouseKubernetesZookeeperConfig) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

var file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*ClickHouseKubernetesContainer)(nil),
		Field:         519001,
		Name:          "project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.default_container",
		Tag:           "bytes,519001,opt,name=default_container",
		Filename:      "project/planton/provider/kubernetes/workload/clickhousekubernetes/v1/spec.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesContainer default_container = 519001;
	E_DefaultContainer = &file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_extTypes[0]
)

var File_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDesc = "" +
	"\n" +
	"Oproject/planton/provider/kubernetes/workload/clickhousekubernetes/v1/spec.proto\x12Dproject.planton.provider.kubernetes.workload.clickhousekubernetes.v1\x1a\x1bbuf/validate/validate.proto\x1a google/protobuf/descriptor.proto\x1a2project/planton/shared/kubernetes/kubernetes.proto\x1a/project/planton/shared/kubernetes/options.proto\x1a,project/planton/shared/options/options.proto\"\xdf\a\n" +
	"\x18ClickHouseKubernetesSpec\x12I\n" +
	"\fcluster_name\x18\x01 \x01(\tB&\xbaH#r!2\x1f^[a-z0-9]([-a-z0-9]*[a-z0-9])?$R\vclusterName\x12\xaf\x01\n" +
	"\tcontainer\x18\x02 \x01(\v2c.project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesContainerB,ʵ\xfd\x01'\b\x01\x12\x1b\n" +
	"\f\n" +
	"\x052000m\x12\x034Gi\x12\v\n" +
	"\x04500m\x12\x031Gi\x18\x01\"\x0450GiR\tcontainer\x12{\n" +
	"\aingress\x18\x03 \x01(\v2a.project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesIngressR\aingress\x12\x81\x01\n" +
	"\acluster\x18\x04 \x01(\v2g.project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesClusterConfigR\acluster\x12\x18\n" +
	"\aversion\x18\x05 \x01(\tR\aversion\x12\x90\x01\n" +
	"\fcoordination\x18\x06 \x01(\v2l.project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesCoordinationConfigR\fcoordination\x12\x8b\x01\n" +
	"\tzookeeper\x18\a \x01(\v2i.project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesZookeeperConfigB\x02\x18\x01R\tzookeeper\x12\x89\x01\n" +
	"\alogging\x18\b \x01(\v2g.project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesLoggingConfigB\x06\xbaH\x03\xc8\x01\x01R\alogging\"\xcc\x04\n" +
	"\x1dClickHouseKubernetesContainer\x12#\n" +
	"\breplicas\x18\x01 \x01(\x05B\a\xbaH\x04\x1a\x02(\x01R\breplicas\x12S\n" +
	"\tresources\x18\x02 \x01(\v25.project.planton.shared.kubernetes.ContainerResourcesR\tresources\x124\n" +
	"\x16is_persistence_enabled\x18\x03 \x01(\bR\x14isPersistenceEnabled\x12\x1b\n" +
	"\tdisk_size\x18\x04 \x01(\tR\bdiskSize:\xdd\x02\xbaH\xd9\x02\x1a\xd6\x02\n" +
	"!spec.container.disk_size.required\x12IDisk size is required and must match the format if persistence is enabled\x1a\xe5\x01((!this.is_persistence_enabled && (size(this.disk_size) == 0 || this.disk_size == '')) || (this.is_persistence_enabled && size(this.disk_size) > 0 && this.disk_size.matches('^\\\\d+(\\\\.\\\\d+)?\\\\s?(Ki|Mi|Gi|Ti|Pi|Ei|K|M|G|T|P|E)$')))\"\xc9\x02\n" +
	"!ClickHouseKubernetesClusterConfig\x12\x1d\n" +
	"\n" +
	"is_enabled\x18\x01 \x01(\bR\tisEnabled\x12\x1f\n" +
	"\vshard_count\x18\x02 \x01(\x05R\n" +
	"shardCount\x12#\n" +
	"\rreplica_count\x18\x03 \x01(\x05R\freplicaCount:\xbe\x01\xbaH\xba\x01\x1a\xb7\x01\n" +
	" spec.cluster.counts_when_enabled\x12KShard count and replica count must be at least 1 when clustering is enabled\x1aF!this.is_enabled || (this.shard_count >= 1 && this.replica_count >= 1)\"\xc8\x04\n" +
	"&ClickHouseKubernetesCoordinationConfig\x12\x91\x01\n" +
	"\x04type\x18\x01 \x01(\x0e2}.project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesCoordinationConfig.CoordinationTypeR\x04type\x12\x8b\x01\n" +
	"\rkeeper_config\x18\x02 \x01(\v2f.project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesKeeperConfigR\fkeeperConfig\x12\x9d\x01\n" +
	"\x0fexternal_config\x18\x03 \x01(\v2t.project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesExternalCoordinationConfigR\x0eexternalConfig\"\\\n" +
	"\x10CoordinationType\x12\x0f\n" +
	"\vunspecified\x10\x00\x12\n" +
	"\n" +
	"\x06keeper\x10\x01\x12\x13\n" +
	"\x0fexternal_keeper\x10\x02\x12\x16\n" +
	"\x12external_zookeeper\x10\x03\"\xf5\x01\n" +
	" ClickHouseKubernetesKeeperConfig\x12'\n" +
	"\breplicas\x18\x01 \x01(\x05B\v\xbaH\b\x1a\x060\x010\x030\x05R\breplicas\x12S\n" +
	"\tresources\x18\x02 \x01(\v25.project.planton.shared.kubernetes.ContainerResourcesR\tresources\x12S\n" +
	"\tdisk_size\x18\x03 \x01(\tB6\xbaH3r12/^\\d+(\\.\\d+)?\\s?(Ki|Mi|Gi|Ti|Pi|Ei|K|M|G|T|P|E)$R\bdiskSize\"P\n" +
	".ClickHouseKubernetesExternalCoordinationConfig\x12\x1e\n" +
	"\x05nodes\x18\x01 \x03(\tB\b\xbaH\x05\x92\x01\x02\b\x01R\x05nodes\"\xdf\x01\n" +
	"!ClickHouseKubernetesLoggingConfig\x12\x86\x01\n" +
	"\x05level\x18\x01 \x01(\x0e2p.project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesLoggingConfig.LogLevelR\x05level\"1\n" +
	"\bLogLevel\x12\x0f\n" +
	"\vinformation\x10\x00\x12\t\n" +
	"\x05debug\x10\x01\x12\t\n" +
	"\x05trace\x10\x02\"\xd2\x01\n" +
	"\x1bClickHouseKubernetesIngress\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12\x1a\n" +
	"\bhostname\x18\x02 \x01(\tR\bhostname:}\xbaHz\x1ax\n" +
	"\x1espec.ingress.hostname.required\x12,hostname is required when ingress is enabled\x1a(!this.enabled || size(this.hostname) > 0\"\x86\x02\n" +
	"#ClickHouseKubernetesZookeeperConfig\x12!\n" +
	"\fuse_external\x18\x01 \x01(\bR\vuseExternal\x12\x14\n" +
	"\x05nodes\x18\x02 \x03(\tR\x05nodes:\xa5\x01\xbaH\xa1\x01\x1a\x9e\x01\n" +
	"\"spec.zookeeper.nodes_when_external\x12KAt least one ZooKeeper node must be specified when using external ZooKeeper\x1a+!this.use_external || size(this.nodes) >= 1:\xb1\x01\n" +
	"\x11default_container\x12\x1d.google.protobuf.FieldOptions\x18\xd9\xd6\x1f \x01(\v2c.project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesContainerR\x10defaultContainerB\x9c\x04\n" +
	"Hcom.project.planton.provider.kubernetes.workload.clickhousekubernetes.v1B\tSpecProtoP\x01Z\x8b\x01github.com/project-planton/project-planton/apis/project/planton/provider/kubernetes/workload/clickhousekubernetes/v1;clickhousekubernetesv1\xa2\x02\x06PPPKWC\xaa\x02DProject.Planton.Provider.Kubernetes.Workload.Clickhousekubernetes.V1\xca\x02DProject\\Planton\\Provider\\Kubernetes\\Workload\\Clickhousekubernetes\\V1\xe2\x02PProject\\Planton\\Provider\\Kubernetes\\Workload\\Clickhousekubernetes\\V1\\GPBMetadata\xea\x02JProject::Planton::Provider::Kubernetes::Workload::Clickhousekubernetes::V1b\x06proto3"

var (
	file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDesc), len(file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDescData
}

var file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_goTypes = []any{
	(ClickHouseKubernetesCoordinationConfig_CoordinationType)(0), // 0: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesCoordinationConfig.CoordinationType
	(ClickHouseKubernetesLoggingConfig_LogLevel)(0),              // 1: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesLoggingConfig.LogLevel
	(*ClickHouseKubernetesSpec)(nil),                             // 2: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesSpec
	(*ClickHouseKubernetesContainer)(nil),                        // 3: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesContainer
	(*ClickHouseKubernetesClusterConfig)(nil),                    // 4: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesClusterConfig
	(*ClickHouseKubernetesCoordinationConfig)(nil),               // 5: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesCoordinationConfig
	(*ClickHouseKubernetesKeeperConfig)(nil),                     // 6: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesKeeperConfig
	(*ClickHouseKubernetesExternalCoordinationConfig)(nil),       // 7: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesExternalCoordinationConfig
	(*ClickHouseKubernetesLoggingConfig)(nil),                    // 8: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesLoggingConfig
	(*ClickHouseKubernetesIngress)(nil),                          // 9: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesIngress
	(*ClickHouseKubernetesZookeeperConfig)(nil),                  // 10: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesZookeeperConfig
	(*kubernetes.ContainerResources)(nil),                        // 11: project.planton.shared.kubernetes.ContainerResources
	(*descriptorpb.FieldOptions)(nil),                            // 12: google.protobuf.FieldOptions
}
var file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_depIdxs = []int32{
	3,  // 0: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesSpec.container:type_name -> project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesContainer
	9,  // 1: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesSpec.ingress:type_name -> project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesIngress
	4,  // 2: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesSpec.cluster:type_name -> project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesClusterConfig
	5,  // 3: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesSpec.coordination:type_name -> project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesCoordinationConfig
	10, // 4: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesSpec.zookeeper:type_name -> project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesZookeeperConfig
	8,  // 5: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesSpec.logging:type_name -> project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesLoggingConfig
	11, // 6: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesContainer.resources:type_name -> project.planton.shared.kubernetes.ContainerResources
	0,  // 7: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesCoordinationConfig.type:type_name -> project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesCoordinationConfig.CoordinationType
	6,  // 8: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesCoordinationConfig.keeper_config:type_name -> project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesKeeperConfig
	7,  // 9: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesCoordinationConfig.external_config:type_name -> project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesExternalCoordinationConfig
	11, // 10: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesKeeperConfig.resources:type_name -> project.planton.shared.kubernetes.ContainerResources
	1,  // 11: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesLoggingConfig.level:type_name -> project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesLoggingConfig.LogLevel
	12, // 12: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.default_container:extendee -> google.protobuf.FieldOptions
	3,  // 13: project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.default_container:type_name -> project.planton.provider.kubernetes.workload.clickhousekubernetes.v1.ClickHouseKubernetesContainer
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	13, // [13:14] is the sub-list for extension type_name
	12, // [12:13] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() {
	file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_init()
}
func file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_init() {
	if File_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDesc), len(file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_depIdxs,
		EnumInfos:         file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_enumTypes,
		MessageInfos:      file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_msgTypes,
		ExtensionInfos:    file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_extTypes,
	}.Build()
	File_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto = out.File
	file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_goTypes = nil
	file_project_planton_provider_kubernetes_workload_clickhousekubernetes_v1_spec_proto_depIdxs = nil
}
