syntax = "proto3";

package project.planton.provider.kubernetes.workload.mongodbkubernetes.v1;

import "buf/validate/validate.proto";
import "google/protobuf/descriptor.proto";
import "project/planton/shared/kubernetes/kubernetes.proto";
import "project/planton/shared/kubernetes/options.proto";
import "project/planton/shared/options/options.proto";

extend google.protobuf.FieldOptions {
  MongodbKubernetesContainer default_container = 530001;
}

/**
 * **MongodbKubernetesSpec** defines the configuration for deploying MongoDB on a Kubernetes cluster.
 * This message specifies the parameters needed to create and manage a MongoDB deployment within a Kubernetes environment.
 * It includes container specifications, ingress settings, and Helm chart customization options.
 */
message MongodbKubernetesSpec {
  // The specifications for the MongoDB container deployment.
  MongodbKubernetesContainer container = 1 [(default_container) = {
    replicas: 1
    resources: {
      limits: {
        cpu: "1000m"
        memory: "1Gi"
      }
      requests: {
        cpu: "50m"
        memory: "100Mi"
      }
    }
    is_persistence_enabled: true
    disk_size: "1Gi"
  }];

  /**
   * The ingress configuration for the MongoDB deployment.
   */
  project.planton.shared.kubernetes.IngressSpec ingress = 2;

  /**
   * A map of key-value pairs that provide additional customization options for the Helm chart used
   * to deploy MongoDB on Kubernetes. These values allow for further refinement of the deployment,
   * such as customizing resource limits, setting environment variables, or specifying version tags.
   * For detailed information on the available options, refer to the Helm chart documentation at:
   * https://artifacthub.io/packages/helm/bitnami/mongodb
   */
  map<string, string> helm_values = 3;
}

/**
 * **MongodbKubernetesContainer** specifies the container configuration for the MongoDB application.
 * It includes settings such as the number of replicas, resource allocations, data persistence options, and disk size.
 * Proper configuration ensures optimal performance and data reliability for your MongoDB deployment.
 */
message MongodbKubernetesContainer {
  // The number of MongoDB pods to deploy.
  int32 replicas = 1;

  //The CPU and memory resources allocated to the MongoDB container.
  project.planton.shared.kubernetes.ContainerResources resources = 2;

  /**
   * A flag to enable or disable data persistence for MongoDB.
   * When enabled, in-memory data is persisted to a storage volume, allowing data to survive pod restarts.
   */
  bool is_persistence_enabled = 3;

  /**
   * The size of the persistent volume attached to each Redis pod (e.g., "10Gi").
   * If the client does not provide a value, a default value is configured.
   * This attribute is ignored when persistence is not enabled.
   * This persistent volume is used for backing up in-memory data.
   * Data from the persistent volume will be restored into memory between pod restarts.
   * **Note:** This value cannot be modified after creation due to Kubernetes limitations on stateful sets.
   */
  option (buf.validate.message).cel = {
    // Consolidated validation logic:
    // If `is_persistence_enabled` is false, `disk_size` can be empty.
    // If `is_persistence_enabled` is true, `disk_size` must be non-empty and match the regex.
    id: "spec.container.disk_size.required"
    expression: "((!this.is_persistence_enabled && (size(this.disk_size) == 0 || this.disk_size == '')) || (this.is_persistence_enabled && size(this.disk_size) > 0 && this.disk_size.matches('^\\\\d+(\\\\.\\\\d+)?\\\\s?(Ki|Mi|Gi|Ti|Pi|Ei|K|M|G|T|P|E)$')))"
    message: "Disk size is required and must match the format if persistence is enabled"
  };

  string disk_size = 4;
}
