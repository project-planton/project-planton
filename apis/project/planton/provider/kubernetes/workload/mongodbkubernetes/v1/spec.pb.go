// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/kubernetes/workload/mongodbkubernetes/v1/spec.proto

package mongodbkubernetesv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	kubernetes "github.com/project-planton/project-planton/apis/project/planton/shared/kubernetes"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// **MongodbKubernetesSpec** defines the configuration for deploying MongoDB on a Kubernetes cluster.
// This message specifies the parameters needed to create and manage a MongoDB deployment within a Kubernetes environment.
// It includes container specifications, ingress settings, and Helm chart customization options.
type MongodbKubernetesSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The specifications for the MongoDB container deployment.
	Container *MongodbKubernetesContainer `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	// *
	// The ingress configuration for the MongoDB deployment.
	Ingress *kubernetes.IngressSpec `protobuf:"bytes,2,opt,name=ingress,proto3" json:"ingress,omitempty"`
	// *
	// A map of key-value pairs that provide additional customization options for the Helm chart used
	// to deploy MongoDB on Kubernetes. These values allow for further refinement of the deployment,
	// such as customizing resource limits, setting environment variables, or specifying version tags.
	// For detailed information on the available options, refer to the Helm chart documentation at:
	// https://artifacthub.io/packages/helm/bitnami/mongodb
	HelmValues    map[string]string `protobuf:"bytes,3,rep,name=helm_values,json=helmValues,proto3" json:"helm_values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MongodbKubernetesSpec) Reset() {
	*x = MongodbKubernetesSpec{}
	mi := &file_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbKubernetesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbKubernetesSpec) ProtoMessage() {}

func (x *MongodbKubernetesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbKubernetesSpec.ProtoReflect.Descriptor instead.
func (*MongodbKubernetesSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *MongodbKubernetesSpec) GetContainer() *MongodbKubernetesContainer {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *MongodbKubernetesSpec) GetIngress() *kubernetes.IngressSpec {
	if x != nil {
		return x.Ingress
	}
	return nil
}

func (x *MongodbKubernetesSpec) GetHelmValues() map[string]string {
	if x != nil {
		return x.HelmValues
	}
	return nil
}

// *
// **MongodbKubernetesContainer** specifies the container configuration for the MongoDB application.
// It includes settings such as the number of replicas, resource allocations, data persistence options, and disk size.
// Proper configuration ensures optimal performance and data reliability for your MongoDB deployment.
type MongodbKubernetesContainer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of MongoDB pods to deploy.
	Replicas int32 `protobuf:"varint,1,opt,name=replicas,proto3" json:"replicas,omitempty"`
	// The CPU and memory resources allocated to the MongoDB container.
	Resources *kubernetes.ContainerResources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// *
	// A flag to enable or disable data persistence for MongoDB.
	// When enabled, in-memory data is persisted to a storage volume, allowing data to survive pod restarts.
	IsPersistenceEnabled bool   `protobuf:"varint,3,opt,name=is_persistence_enabled,json=isPersistenceEnabled,proto3" json:"is_persistence_enabled,omitempty"`
	DiskSize             string `protobuf:"bytes,4,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *MongodbKubernetesContainer) Reset() {
	*x = MongodbKubernetesContainer{}
	mi := &file_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbKubernetesContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbKubernetesContainer) ProtoMessage() {}

func (x *MongodbKubernetesContainer) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbKubernetesContainer.ProtoReflect.Descriptor instead.
func (*MongodbKubernetesContainer) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *MongodbKubernetesContainer) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *MongodbKubernetesContainer) GetResources() *kubernetes.ContainerResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbKubernetesContainer) GetIsPersistenceEnabled() bool {
	if x != nil {
		return x.IsPersistenceEnabled
	}
	return false
}

func (x *MongodbKubernetesContainer) GetDiskSize() string {
	if x != nil {
		return x.DiskSize
	}
	return ""
}

var file_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*MongodbKubernetesContainer)(nil),
		Field:         530001,
		Name:          "project.planton.provider.kubernetes.workload.mongodbkubernetes.v1.default_container",
		Tag:           "bytes,530001,opt,name=default_container",
		Filename:      "project/planton/provider/kubernetes/workload/mongodbkubernetes/v1/spec.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional project.planton.provider.kubernetes.workload.mongodbkubernetes.v1.MongodbKubernetesContainer default_container = 530001;
	E_DefaultContainer = &file_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto_extTypes[0]
)

var File_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto_rawDesc = "" +
	"\n" +
	"Lproject/planton/provider/kubernetes/workload/mongodbkubernetes/v1/spec.proto\x12Aproject.planton.provider.kubernetes.workload.mongodbkubernetes.v1\x1a\x1bbuf/validate/validate.proto\x1a2project/planton/shared/kubernetes/kubernetes.proto\x1a/project/planton/shared/kubernetes/options.proto\x1a,project/planton/shared/options/options.proto\x1a google/protobuf/descriptor.proto\"\xd8\x03\n" +
	"\x15MongodbKubernetesSpec\x12\xa9\x01\n" +
	"\tcontainer\x18\x01 \x01(\v2].project.planton.provider.kubernetes.workload.mongodbkubernetes.v1.MongodbKubernetesContainerB,\x8a\xe5\x82\x02'\b\x01\x12\x1c\n" +
	"\f\n" +
	"\x051000m\x12\x031Gi\x12\f\n" +
	"\x0350m\x12\x05100Mi\x18\x01\"\x031GiR\tcontainer\x12H\n" +
	"\aingress\x18\x02 \x01(\v2..project.planton.shared.kubernetes.IngressSpecR\aingress\x12\x89\x01\n" +
	"\vhelm_values\x18\x03 \x03(\v2h.project.planton.provider.kubernetes.workload.mongodbkubernetes.v1.MongodbKubernetesSpec.HelmValuesEntryR\n" +
	"helmValues\x1a=\n" +
	"\x0fHelmValuesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc0\x04\n" +
	"\x1aMongodbKubernetesContainer\x12\x1a\n" +
	"\breplicas\x18\x01 \x01(\x05R\breplicas\x12S\n" +
	"\tresources\x18\x02 \x01(\v25.project.planton.shared.kubernetes.ContainerResourcesR\tresources\x124\n" +
	"\x16is_persistence_enabled\x18\x03 \x01(\bR\x14isPersistenceEnabled\x12\x1b\n" +
	"\tdisk_size\x18\x04 \x01(\tR\bdiskSize:\xdd\x02\xbaH\xd9\x02\x1a\xd6\x02\n" +
	"!spec.container.disk_size.required\x12IDisk size is required and must match the format if persistence is enabled\x1a\xe5\x01((!this.is_persistence_enabled && (size(this.disk_size) == 0 || this.disk_size == '')) || (this.is_persistence_enabled && size(this.disk_size) > 0 && this.disk_size.matches('^\\\\d+(\\\\.\\\\d+)?\\\\s?(Ki|Mi|Gi|Ti|Pi|Ei|K|M|G|T|P|E)$'))):\xab\x01\n" +
	"\x11default_container\x12\x1d.google.protobuf.FieldOptions\x18Ñ¬  \x01(\v2].project.planton.provider.kubernetes.workload.mongodbkubernetes.v1.MongodbKubernetesContainerR\x10defaultContainerB\x87\x04\n" +
	"Ecom.project.planton.provider.kubernetes.workload.mongodbkubernetes.v1B\tSpecProtoP\x01Z\x85\x01github.com/project-planton/project-planton/apis/project/planton/provider/kubernetes/workload/mongodbkubernetes/v1;mongodbkubernetesv1\xa2\x02\x06PPPKWM\xaa\x02AProject.Planton.Provider.Kubernetes.Workload.Mongodbkubernetes.V1\xca\x02AProject\\Planton\\Provider\\Kubernetes\\Workload\\Mongodbkubernetes\\V1\xe2\x02MProject\\Planton\\Provider\\Kubernetes\\Workload\\Mongodbkubernetes\\V1\\GPBMetadata\xea\x02GProject::Planton::Provider::Kubernetes::Workload::Mongodbkubernetes::V1b\x06proto3"

var (
	file_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto_rawDesc), len(file_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto_rawDescData
}

var file_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto_goTypes = []any{
	(*MongodbKubernetesSpec)(nil),         // 0: project.planton.provider.kubernetes.workload.mongodbkubernetes.v1.MongodbKubernetesSpec
	(*MongodbKubernetesContainer)(nil),    // 1: project.planton.provider.kubernetes.workload.mongodbkubernetes.v1.MongodbKubernetesContainer
	nil,                                   // 2: project.planton.provider.kubernetes.workload.mongodbkubernetes.v1.MongodbKubernetesSpec.HelmValuesEntry
	(*kubernetes.IngressSpec)(nil),        // 3: project.planton.shared.kubernetes.IngressSpec
	(*kubernetes.ContainerResources)(nil), // 4: project.planton.shared.kubernetes.ContainerResources
	(*descriptorpb.FieldOptions)(nil),     // 5: google.protobuf.FieldOptions
}
var file_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.kubernetes.workload.mongodbkubernetes.v1.MongodbKubernetesSpec.container:type_name -> project.planton.provider.kubernetes.workload.mongodbkubernetes.v1.MongodbKubernetesContainer
	3, // 1: project.planton.provider.kubernetes.workload.mongodbkubernetes.v1.MongodbKubernetesSpec.ingress:type_name -> project.planton.shared.kubernetes.IngressSpec
	2, // 2: project.planton.provider.kubernetes.workload.mongodbkubernetes.v1.MongodbKubernetesSpec.helm_values:type_name -> project.planton.provider.kubernetes.workload.mongodbkubernetes.v1.MongodbKubernetesSpec.HelmValuesEntry
	4, // 3: project.planton.provider.kubernetes.workload.mongodbkubernetes.v1.MongodbKubernetesContainer.resources:type_name -> project.planton.shared.kubernetes.ContainerResources
	5, // 4: project.planton.provider.kubernetes.workload.mongodbkubernetes.v1.default_container:extendee -> google.protobuf.FieldOptions
	1, // 5: project.planton.provider.kubernetes.workload.mongodbkubernetes.v1.default_container:type_name -> project.planton.provider.kubernetes.workload.mongodbkubernetes.v1.MongodbKubernetesContainer
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	5, // [5:6] is the sub-list for extension type_name
	4, // [4:5] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto_init() }
func file_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto_init() {
	if File_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto_rawDesc), len(file_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto_msgTypes,
		ExtensionInfos:    file_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto_extTypes,
	}.Build()
	File_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto = out.File
	file_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto_goTypes = nil
	file_project_planton_provider_kubernetes_workload_mongodbkubernetes_v1_spec_proto_depIdxs = nil
}
