syntax = "proto3";

package project.planton.provider.kubernetes.workload.solrkubernetes.v1;

//solr-kubernetes stack outputs
message SolrKubernetesStackOutputs {
  //kubernetes namespace in which solr-kubernetes is created.
  string namespace = 1;

  //kubernetes service name for solr-kubernetes dashboard.
  //ex: main-solr-kubernetes-common
  //in the above example, "main" is the name of the solr-kubernetes
  string service = 2;

  //command to setup port-forwarding to open solr-kubernetes from developers laptop.
  //this might come handy when solr-kubernetes ingress is disabled for security reasons.
  //this is rendered by combining solr_kubernetes_kubernetes_service and kubernetes_namespace
  //ex: kubectl port-forward svc/solr_kubernetes_kubernetes_service -n kubernetes_namespace 8080:80
  //running the command from this attribute makes it possible to access solr-kubernetes using http://localhost:8080/solr
  string port_forward_command = 3;

  //kubernetes endpoint that can be used by clients running in the same kubernetes cluster.
  //ex: http://main-solrkubernetes-common.<namespace-name>:8983/solr
  string kube_endpoint = 4;

  //public endpoint to open solr-kubernetes from clients outside kubernetes.
  //ex: https://slk8s-planton-pcs-dev-main.data.dev.planton.live:6379/redis
  string external_hostname = 5;

  //internal endpoint to open solr-kubernetes from clients inside kubernetes.
  //ex: https://slk8s-planton-pcs-dev-main.data-internal.dev.planton.live:6379/redis
  string internal_hostname = 6;
}
