syntax = "proto3";

package project.planton.provider.kubernetes.workload.kuberneteshttpendpoint.v1;

import "buf/validate/validate.proto";

// **KubernetesHttpEndpointSpec** defines the configuration for deploying an HTTP endpoint in Kubernetes.
// This message specifies the parameters required to create and manage an HTTP endpoint within a Kubernetes cluster.
// It allows you to configure TLS settings, specify the certificate issuer, enable gRPC-Web compatibility,
// and define routing rules to direct traffic to different backend services based on URL paths.
message KubernetesHttpEndpointSpec {
  //(optional for create) flag to toggle tls for istio-http-endpoint.
  //defaults to "false".
  //(important note) certificates are not created for endpoints that do not need tls.
  //(important note) endpoint domains with out tls enabled are not eligible to be used for
  //creating endpoints for postgres-clusters or kafka-clusters.
  bool is_tls_enabled = 1;

  //name of the cluster-issuer to be used for provisioning the certificate.
  //this is only required when tls is enabled and can be left empty otherwise.
  //this will be one of the domains from gke-cluster.spec.ingress-domains for
  // gke-clusters deployed using planton-cloud provided pulumi module since a cluster-issuer for
  // each entry in the ingress-domains will be created with the name of the cluster-issuer set to the domain name.
  //if the cluster is not managed by planton-cloud, specify the cluster-issuer configured to issue
  // certificate for the http-endpoint domain name.
  //for all other scenarios, the devops team can deploy a customized pulumi module.
  string cert_cluster_issuer_name = 2;

  // A flag to enable virtual service configuration compatible with gRPC-Web clients.
  // gRPC-Web clients rely on extra headers added by the Envoy proxy.
  bool is_grpc_web_compatible = 3;

  // A list of routing rules to configure backends for URL paths of the domain.
  // Routes allow configuring requests to be routed to different microservices based on the URL path.
  // For example, if the endpoint domain name is `console.example.com`, then `console.example.com/public/api/*` can be
  // routed to the `public-api` microservice, and `console.example.com/private/api/*` can be routed to the `private-api` microservice.
  repeated KubernetesHttpEndpointRoutingRule routing_rules = 4;
}

// **KubernetesHttpEndpointRoutingRule** represents a routing rule for the HTTP endpoint.
// It defines how requests matching a specific URL path prefix should be routed to a backend Kubernetes service.
message KubernetesHttpEndpointRoutingRule {
  // The URL path prefix to match.
  // For example, if the endpoint domain name is `console.example.com`, and the `url_path_prefix` is `/api`,
  // then all requests matching `console.example.com/api/*` are forwarded to the configured Kubernetes service.
  string url_path_prefix = 1 [
    (buf.validate.field).required = true
  ];

  // The backend service to which the requests should be forwarded.
  KubernetesHttpEndpointRoutingRuleBackendService backend_service = 2 [
    (buf.validate.field).required = true
  ];
}

// **KubernetesHttpEndpointRoutingRuleBackendService** specifies the backend Kubernetes service details
// for a routing rule. It includes the service name, namespace, and port.
message KubernetesHttpEndpointRoutingRuleBackendService {
  // The name of the Kubernetes service.
  string name = 1;
  // The namespace of the Kubernetes service.
  string namespace = 2;
  // The port on which the Kubernetes service is exposed.
  int32 port = 3;
}
