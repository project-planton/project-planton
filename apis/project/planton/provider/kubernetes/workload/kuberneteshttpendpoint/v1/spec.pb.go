// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/kubernetes/workload/kuberneteshttpendpoint/v1/spec.proto

package kuberneteshttpendpointv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// **KubernetesHttpEndpointSpec** defines the configuration for deploying an HTTP endpoint in Kubernetes.
// This message specifies the parameters required to create and manage an HTTP endpoint within a Kubernetes cluster.
// It allows you to configure TLS settings, specify the certificate issuer, enable gRPC-Web compatibility,
// and define routing rules to direct traffic to different backend services based on URL paths.
type KubernetesHttpEndpointSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// (optional for create) flag to toggle tls for istio-http-endpoint.
	// defaults to "false".
	// (important note) certificates are not created for endpoints that do not need tls.
	// (important note) endpoint domains with out tls enabled are not eligible to be used for
	// creating endpoints for postgres-clusters or kafka-clusters.
	IsTlsEnabled bool `protobuf:"varint,1,opt,name=is_tls_enabled,json=isTlsEnabled,proto3" json:"is_tls_enabled,omitempty"`
	// name of the cluster-issuer to be used for provisioning the certificate.
	// this is only required when tls is enabled and can be left empty otherwise.
	// this will be one of the domains from gke-cluster.spec.ingress-domains for
	// gke-clusters deployed using planton-cloud provided pulumi module since a cluster-issuer for
	// each entry in the ingress-domains will be created with the name of the cluster-issuer set to the domain name.
	// if the cluster is not managed by planton-cloud, specify the cluster-issuer configured to issue
	// certificate for the http-endpoint domain name.
	// for all other scenarios, the devops team can deploy a customized pulumi module.
	CertClusterIssuerName string `protobuf:"bytes,2,opt,name=cert_cluster_issuer_name,json=certClusterIssuerName,proto3" json:"cert_cluster_issuer_name,omitempty"`
	// A flag to enable virtual service configuration compatible with gRPC-Web clients.
	// gRPC-Web clients rely on extra headers added by the Envoy proxy.
	IsGrpcWebCompatible bool `protobuf:"varint,3,opt,name=is_grpc_web_compatible,json=isGrpcWebCompatible,proto3" json:"is_grpc_web_compatible,omitempty"`
	// A list of routing rules to configure backends for URL paths of the domain.
	// Routes allow configuring requests to be routed to different microservices based on the URL path.
	// For example, if the endpoint domain name is `console.example.com`, then `console.example.com/public/api/*` can be
	// routed to the `public-api` microservice, and `console.example.com/private/api/*` can be routed to the `private-api` microservice.
	RoutingRules  []*KubernetesHttpEndpointRoutingRule `protobuf:"bytes,4,rep,name=routing_rules,json=routingRules,proto3" json:"routing_rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KubernetesHttpEndpointSpec) Reset() {
	*x = KubernetesHttpEndpointSpec{}
	mi := &file_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubernetesHttpEndpointSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesHttpEndpointSpec) ProtoMessage() {}

func (x *KubernetesHttpEndpointSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesHttpEndpointSpec.ProtoReflect.Descriptor instead.
func (*KubernetesHttpEndpointSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *KubernetesHttpEndpointSpec) GetIsTlsEnabled() bool {
	if x != nil {
		return x.IsTlsEnabled
	}
	return false
}

func (x *KubernetesHttpEndpointSpec) GetCertClusterIssuerName() string {
	if x != nil {
		return x.CertClusterIssuerName
	}
	return ""
}

func (x *KubernetesHttpEndpointSpec) GetIsGrpcWebCompatible() bool {
	if x != nil {
		return x.IsGrpcWebCompatible
	}
	return false
}

func (x *KubernetesHttpEndpointSpec) GetRoutingRules() []*KubernetesHttpEndpointRoutingRule {
	if x != nil {
		return x.RoutingRules
	}
	return nil
}

// **KubernetesHttpEndpointRoutingRule** represents a routing rule for the HTTP endpoint.
// It defines how requests matching a specific URL path prefix should be routed to a backend Kubernetes service.
type KubernetesHttpEndpointRoutingRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The URL path prefix to match.
	// For example, if the endpoint domain name is `console.example.com`, and the `url_path_prefix` is `/api`,
	// then all requests matching `console.example.com/api/*` are forwarded to the configured Kubernetes service.
	UrlPathPrefix string `protobuf:"bytes,1,opt,name=url_path_prefix,json=urlPathPrefix,proto3" json:"url_path_prefix,omitempty"`
	// The backend service to which the requests should be forwarded.
	BackendService *KubernetesHttpEndpointRoutingRuleBackendService `protobuf:"bytes,2,opt,name=backend_service,json=backendService,proto3" json:"backend_service,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *KubernetesHttpEndpointRoutingRule) Reset() {
	*x = KubernetesHttpEndpointRoutingRule{}
	mi := &file_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubernetesHttpEndpointRoutingRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesHttpEndpointRoutingRule) ProtoMessage() {}

func (x *KubernetesHttpEndpointRoutingRule) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesHttpEndpointRoutingRule.ProtoReflect.Descriptor instead.
func (*KubernetesHttpEndpointRoutingRule) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *KubernetesHttpEndpointRoutingRule) GetUrlPathPrefix() string {
	if x != nil {
		return x.UrlPathPrefix
	}
	return ""
}

func (x *KubernetesHttpEndpointRoutingRule) GetBackendService() *KubernetesHttpEndpointRoutingRuleBackendService {
	if x != nil {
		return x.BackendService
	}
	return nil
}

// **KubernetesHttpEndpointRoutingRuleBackendService** specifies the backend Kubernetes service details
// for a routing rule. It includes the service name, namespace, and port.
type KubernetesHttpEndpointRoutingRuleBackendService struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the Kubernetes service.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The namespace of the Kubernetes service.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The port on which the Kubernetes service is exposed.
	Port          int32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KubernetesHttpEndpointRoutingRuleBackendService) Reset() {
	*x = KubernetesHttpEndpointRoutingRuleBackendService{}
	mi := &file_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubernetesHttpEndpointRoutingRuleBackendService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesHttpEndpointRoutingRuleBackendService) ProtoMessage() {}

func (x *KubernetesHttpEndpointRoutingRuleBackendService) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesHttpEndpointRoutingRuleBackendService.ProtoReflect.Descriptor instead.
func (*KubernetesHttpEndpointRoutingRuleBackendService) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *KubernetesHttpEndpointRoutingRuleBackendService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubernetesHttpEndpointRoutingRuleBackendService) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *KubernetesHttpEndpointRoutingRuleBackendService) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

var File_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto_rawDesc = "" +
	"\n" +
	"Qproject/planton/provider/kubernetes/workload/kuberneteshttpendpoint/v1/spec.proto\x12Fproject.planton.provider.kubernetes.workload.kuberneteshttpendpoint.v1\x1a\x1bbuf/validate/validate.proto\"\xc1\x02\n" +
	"\x1aKubernetesHttpEndpointSpec\x12$\n" +
	"\x0eis_tls_enabled\x18\x01 \x01(\bR\fisTlsEnabled\x127\n" +
	"\x18cert_cluster_issuer_name\x18\x02 \x01(\tR\x15certClusterIssuerName\x123\n" +
	"\x16is_grpc_web_compatible\x18\x03 \x01(\bR\x13isGrpcWebCompatible\x12\x8e\x01\n" +
	"\rrouting_rules\x18\x04 \x03(\v2i.project.planton.provider.kubernetes.workload.kuberneteshttpendpoint.v1.KubernetesHttpEndpointRoutingRuleR\froutingRules\"\xfe\x01\n" +
	"!KubernetesHttpEndpointRoutingRule\x12.\n" +
	"\x0furl_path_prefix\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\rurlPathPrefix\x12\xa8\x01\n" +
	"\x0fbackend_service\x18\x02 \x01(\v2w.project.planton.provider.kubernetes.workload.kuberneteshttpendpoint.v1.KubernetesHttpEndpointRoutingRuleBackendServiceB\x06\xbaH\x03\xc8\x01\x01R\x0ebackendService\"w\n" +
	"/KubernetesHttpEndpointRoutingRuleBackendService\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1c\n" +
	"\tnamespace\x18\x02 \x01(\tR\tnamespace\x12\x12\n" +
	"\x04port\x18\x03 \x01(\x05R\x04portB\xaa\x04\n" +
	"Jcom.project.planton.provider.kubernetes.workload.kuberneteshttpendpoint.v1B\tSpecProtoP\x01Z\x8f\x01github.com/project-planton/project-planton/apis/project/planton/provider/kubernetes/workload/kuberneteshttpendpoint/v1;kuberneteshttpendpointv1\xa2\x02\x06PPPKWK\xaa\x02FProject.Planton.Provider.Kubernetes.Workload.Kuberneteshttpendpoint.V1\xca\x02FProject\\Planton\\Provider\\Kubernetes\\Workload\\Kuberneteshttpendpoint\\V1\xe2\x02RProject\\Planton\\Provider\\Kubernetes\\Workload\\Kuberneteshttpendpoint\\V1\\GPBMetadata\xea\x02LProject::Planton::Provider::Kubernetes::Workload::Kuberneteshttpendpoint::V1b\x06proto3"

var (
	file_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto_rawDesc), len(file_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto_rawDescData
}

var file_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto_goTypes = []any{
	(*KubernetesHttpEndpointSpec)(nil),                      // 0: project.planton.provider.kubernetes.workload.kuberneteshttpendpoint.v1.KubernetesHttpEndpointSpec
	(*KubernetesHttpEndpointRoutingRule)(nil),               // 1: project.planton.provider.kubernetes.workload.kuberneteshttpendpoint.v1.KubernetesHttpEndpointRoutingRule
	(*KubernetesHttpEndpointRoutingRuleBackendService)(nil), // 2: project.planton.provider.kubernetes.workload.kuberneteshttpendpoint.v1.KubernetesHttpEndpointRoutingRuleBackendService
}
var file_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.kubernetes.workload.kuberneteshttpendpoint.v1.KubernetesHttpEndpointSpec.routing_rules:type_name -> project.planton.provider.kubernetes.workload.kuberneteshttpendpoint.v1.KubernetesHttpEndpointRoutingRule
	2, // 1: project.planton.provider.kubernetes.workload.kuberneteshttpendpoint.v1.KubernetesHttpEndpointRoutingRule.backend_service:type_name -> project.planton.provider.kubernetes.workload.kuberneteshttpendpoint.v1.KubernetesHttpEndpointRoutingRuleBackendService
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() {
	file_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto_init()
}
func file_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto_init() {
	if File_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto_rawDesc), len(file_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto = out.File
	file_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto_goTypes = nil
	file_project_planton_provider_kubernetes_workload_kuberneteshttpendpoint_v1_spec_proto_depIdxs = nil
}
