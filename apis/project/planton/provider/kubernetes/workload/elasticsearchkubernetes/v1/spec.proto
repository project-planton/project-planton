syntax = "proto3";

package project.planton.provider.kubernetes.workload.elasticsearchkubernetes.v1;

import "buf/validate/validate.proto";
import "google/protobuf/descriptor.proto";
import "project/planton/shared/kubernetes/kubernetes.proto";
import "project/planton/shared/kubernetes/options.proto";
import "project/planton/shared/options/options.proto";

extend google.protobuf.FieldOptions {
  ElasticsearchKubernetesElasticsearchSpec default_elasticsearch_spec = 509001;
  ElasticsearchKubernetesKibanaSpec default_kibana_spec = 509002;
}

// **ElasticsearchKubernetesSpec** defines the configuration for deploying Elasticsearch on a Kubernetes cluster.
// This message includes specifications for the Elasticsearch and Kibana, each with their own container and ingress settings.
// By configuring these parameters, you can set up an Elasticsearch deployment tailored to your application's needs,
// including resource allocation, persistence settings, and external access through ingress.
message ElasticsearchKubernetesSpec {
  // The elasticsearch configuration.
  ElasticsearchKubernetesElasticsearchSpec elasticsearch = 1 [(default_elasticsearch_spec) = {
    container: {
      replicas: 1
      resources: {
        limits: {
          cpu: "1000m"
          memory: "1Gi"
        }
        requests: {
          cpu: "50m"
          memory: "100Mi"
        }
      }
      persistence_enabled: true
      disk_size: "1Gi"
    }
  }];

  // The kibana configuration.
  ElasticsearchKubernetesKibanaSpec kibana = 2 [(default_kibana_spec) = {
    enabled: true
    container: {
      replicas: 1
      resources: {
        limits: {
          cpu: "1000m"
          memory: "1Gi"
        }
        requests: {
          cpu: "50m"
          memory: "100Mi"
        }
      }
    }
  }];
}

// **ElasticsearchKubernetesElasticsearchSpec** groups Elasticsearch container and ingress configuration.
message ElasticsearchKubernetesElasticsearchSpec {
  // Container configuration for Elasticsearch.
  ElasticsearchKubernetesElasticsearchContainer container = 1;

  // Ingress configuration for Elasticsearch.
  ElasticsearchKubernetesIngress ingress = 2;
}

// **ElasticsearchKubernetesKibanaSpec** groups Kibana enabled flag, container and ingress configuration.
message ElasticsearchKubernetesKibanaSpec {
  // Flag to enable or disable Kibana deployment. Defaults to false.
  bool enabled = 1;

  // Container configuration for Kibana.
  ElasticsearchKubernetesKibanaContainer container = 2;

  // Ingress configuration for Kibana.
  ElasticsearchKubernetesIngress ingress = 3;
}

// **ElasticsearchKubernetesElasticsearchContainer** specifies the configuration for the Elasticsearch container.
// It includes settings such as the number of replicas, resource allocations, data persistence options, and disk size.
// Proper configuration ensures optimal performance and data reliability for your Elasticsearch deployment.
message ElasticsearchKubernetesElasticsearchContainer {
  // The number of Elasticsearch pods to deploy
  int32 replicas = 1;

  // The CPU and memory resources allocated to the Elasticsearch container.
  project.planton.shared.kubernetes.ContainerResources resources = 2;

  // A flag to enable or disable data persistence for Elasticsearch.
  // When enabled, in-memory data is persisted to a storage volume, allowing data to survive pod restarts.
  bool persistence_enabled = 3;

  /**
   * The size of the persistent volume attached to each Elasticsearch pod (e.g., "10Gi").
   * If the client does not provide a value, a default value is configured.
   * This attribute is ignored when persistence is not enabled.
   * This persistent volume is used for backing up in-memory data.
   * Data from the persistent volume will be restored into memory between pod restarts.
   * **Note:** This value cannot be modified after creation due to Kubernetes limitations on stateful sets.
   */
  option (buf.validate.message).cel = {
    // Consolidated validation logic:
    // If `persistence_enabled` is false, `disk_size` can be empty.
    // If `persistence_enabled` is true, `disk_size` must be non-empty and match the regex.
    id: "spec.elasticsearch.container.disk_size.required"
    expression: "((!this.persistence_enabled && (size(this.disk_size) == 0 || this.disk_size == '')) || (this.persistence_enabled && size(this.disk_size) > 0 && this.disk_size.matches('^\\\\d+(\\\\.\\\\d+)?\\\\s?(Ki|Mi|Gi|Ti|Pi|Ei|K|M|G|T|P|E)$')))"
    message: "Disk size is required and must match the format if persistence is enabled"
  };

  string disk_size = 4;
}

// **ElasticsearchKubernetesKibanaContainer** specifies the configuration for the Kibana container.
// Kibana provides visualization capabilities for data stored in Elasticsearch.
// This message allows you to set the number of replicas and allocate resources accordingly.
message ElasticsearchKubernetesKibanaContainer {
  // The number of Kibana pods to deploy.
  // Recommended default is 1.
  int32 replicas = 1;

  // The CPU and memory resources allocated to the Kibana container.
  project.planton.shared.kubernetes.ContainerResources resources = 2;
}

// **ElasticsearchKubernetesIngress** defines the ingress configuration for Elasticsearch or Kibana.
// It allows you to enable external access and specify the hostname.
message ElasticsearchKubernetesIngress {
  // Flag to enable or disable ingress.
  bool enabled = 1;

  // The full hostname for external access (e.g., "elasticsearch.example.com").
  // This hostname will be configured automatically via external-dns.
  // Required when enabled is true.
  string hostname = 2;

  option (buf.validate.message).cel = {
    id: "spec.ingress.hostname.required"
    expression: "!this.enabled || size(this.hostname) > 0"
    message: "hostname is required when ingress is enabled"
  };
}
