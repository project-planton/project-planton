syntax = "proto3";

package project.planton.provider.kubernetes.workload.rediskubernetes.v1;

import "buf/validate/validate.proto";
import "google/protobuf/descriptor.proto";
import "project/planton/shared/kubernetes/kubernetes.proto";
import "project/planton/shared/kubernetes/options.proto";
import "project/planton/shared/options/options.proto";

extend google.protobuf.FieldOptions {
  RedisKubernetesContainer default_container = 537001;
}

/**
 * **RedisKubernetesSpec** defines the configuration for deploying Redis on a Kubernetes cluster.
 * This message specifies the parameters needed to create and manage a Redis deployment within a Kubernetes environment.
 * It includes container specifications and ingress settings to control resource allocation and external access.
 */
message RedisKubernetesSpec {
  // The container specifications for the Redis deployment.
  RedisKubernetesContainer container = 1 [(default_container) = {
    replicas: 1
    resources: {
      limits: {
        cpu: "1000m"
        memory: "1Gi"
      }
      requests: {
        cpu: "50m"
        memory: "100Mi"
      }
    }
    is_persistence_enabled: true
    disk_size: "1Gi"
  }];

  //The ingress configuration for the Redis deployment.
  RedisKubernetesIngress ingress = 2;
}

// RedisKubernetesContainer defines the container specifications for the Redis deployment.
message RedisKubernetesContainer {
  // The number of Redis pods to deploy.
  int32 replicas = 1;

  //The CPU and memory resources allocated to the Redis container.
  project.planton.shared.kubernetes.ContainerResources resources = 2;

  /**
   * A flag to enable or disable data persistence for Redis.
   * When enabled, in-memory data is persisted to a storage volume, allowing data to survive pod restarts.
   * The backup data from the persistent volume is restored into Redis memory between pod restarts.
   * Defaults to `false`.
   */
  bool is_persistence_enabled = 3;

  /**
   * The size of the persistent volume attached to each Redis pod (e.g., "10Gi").
   * If the client does not provide a value, a default value is configured.
   * This attribute is ignored when persistence is not enabled.
   * This persistent volume is used for backing up in-memory data.
   * Data from the persistent volume will be restored into memory between pod restarts.
   * **Note:** This value cannot be modified after creation due to Kubernetes limitations on stateful sets.
   */
  option (buf.validate.message).cel = {
    // Consolidated validation logic:
    // If `is_persistence_enabled` is false, `disk_size` can be empty.
    // If `is_persistence_enabled` is true, `disk_size` must be non-empty and match the regex.
    id: "spec.container.disk_size.required"
    expression: "((!this.is_persistence_enabled && (size(this.disk_size) == 0 || this.disk_size == '')) || (this.is_persistence_enabled && size(this.disk_size) > 0 && this.disk_size.matches('^\\\\d+(\\\\.\\\\d+)?\\\\s?(Ki|Mi|Gi|Ti|Pi|Ei|K|M|G|T|P|E)$')))"
    message: "Disk size is required and must match the format if persistence is enabled"
  };

  string disk_size = 4;
}

/**
 * RedisKubernetesIngress defines the ingress configuration for Redis.
 */
message RedisKubernetesIngress {
  // Flag to enable or disable ingress.
  // When enabled, creates a LoadBalancer service with external-dns annotations.
  bool enabled = 1;

  // The full hostname for external access (e.g., "redis.example.com").
  // This hostname will be configured automatically via external-dns.
  // Required when enabled is true.
  string hostname = 2;

  option (buf.validate.message).cel = {
    id: "spec.ingress.hostname.required"
    expression: "!this.enabled || size(this.hostname) > 0"
    message: "hostname is required when ingress is enabled"
  };
}
