// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/kubernetes/workload/rediskubernetes/v1/spec.proto

package rediskubernetesv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	kubernetes "github.com/project-planton/project-planton/apis/project/planton/shared/kubernetes"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// **RedisKubernetesSpec** defines the configuration for deploying Redis on a Kubernetes cluster.
// This message specifies the parameters needed to create and manage a Redis deployment within a Kubernetes environment.
// It includes container specifications and ingress settings to control resource allocation and external access.
type RedisKubernetesSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The container specifications for the Redis deployment.
	Container *RedisKubernetesContainer `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	// The ingress configuration for the Redis deployment.
	Ingress       *kubernetes.IngressSpec `protobuf:"bytes,2,opt,name=ingress,proto3" json:"ingress,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedisKubernetesSpec) Reset() {
	*x = RedisKubernetesSpec{}
	mi := &file_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisKubernetesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisKubernetesSpec) ProtoMessage() {}

func (x *RedisKubernetesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisKubernetesSpec.ProtoReflect.Descriptor instead.
func (*RedisKubernetesSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *RedisKubernetesSpec) GetContainer() *RedisKubernetesContainer {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *RedisKubernetesSpec) GetIngress() *kubernetes.IngressSpec {
	if x != nil {
		return x.Ingress
	}
	return nil
}

// RedisKubernetesContainer defines the container specifications for the Redis deployment.
type RedisKubernetesContainer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of Redis pods to deploy.
	Replicas int32 `protobuf:"varint,1,opt,name=replicas,proto3" json:"replicas,omitempty"`
	// The CPU and memory resources allocated to the Redis container.
	Resources *kubernetes.ContainerResources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// *
	// A flag to enable or disable data persistence for Redis.
	// When enabled, in-memory data is persisted to a storage volume, allowing data to survive pod restarts.
	// The backup data from the persistent volume is restored into Redis memory between pod restarts.
	// Defaults to `false`.
	IsPersistenceEnabled bool   `protobuf:"varint,3,opt,name=is_persistence_enabled,json=isPersistenceEnabled,proto3" json:"is_persistence_enabled,omitempty"`
	DiskSize             string `protobuf:"bytes,4,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *RedisKubernetesContainer) Reset() {
	*x = RedisKubernetesContainer{}
	mi := &file_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisKubernetesContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisKubernetesContainer) ProtoMessage() {}

func (x *RedisKubernetesContainer) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisKubernetesContainer.ProtoReflect.Descriptor instead.
func (*RedisKubernetesContainer) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *RedisKubernetesContainer) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *RedisKubernetesContainer) GetResources() *kubernetes.ContainerResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *RedisKubernetesContainer) GetIsPersistenceEnabled() bool {
	if x != nil {
		return x.IsPersistenceEnabled
	}
	return false
}

func (x *RedisKubernetesContainer) GetDiskSize() string {
	if x != nil {
		return x.DiskSize
	}
	return ""
}

var file_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*RedisKubernetesContainer)(nil),
		Field:         537001,
		Name:          "project.planton.provider.kubernetes.workload.rediskubernetes.v1.default_container",
		Tag:           "bytes,537001,opt,name=default_container",
		Filename:      "project/planton/provider/kubernetes/workload/rediskubernetes/v1/spec.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional project.planton.provider.kubernetes.workload.rediskubernetes.v1.RedisKubernetesContainer default_container = 537001;
	E_DefaultContainer = &file_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto_extTypes[0]
)

var File_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto_rawDesc = "" +
	"\n" +
	"Jproject/planton/provider/kubernetes/workload/rediskubernetes/v1/spec.proto\x12?project.planton.provider.kubernetes.workload.rediskubernetes.v1\x1a\x1bbuf/validate/validate.proto\x1a google/protobuf/descriptor.proto\x1a2project/planton/shared/kubernetes/kubernetes.proto\x1a/project/planton/shared/kubernetes/options.proto\x1a,project/planton/shared/options/options.proto\"\x87\x02\n" +
	"\x13RedisKubernetesSpec\x12\xa5\x01\n" +
	"\tcontainer\x18\x01 \x01(\v2Y.project.planton.provider.kubernetes.workload.rediskubernetes.v1.RedisKubernetesContainerB,Êš\x86\x02'\b\x01\x12\x1c\n" +
	"\f\n" +
	"\x051000m\x12\x031Gi\x12\f\n" +
	"\x0350m\x12\x05100Mi\x18\x01\"\x031GiR\tcontainer\x12H\n" +
	"\aingress\x18\x02 \x01(\v2..project.planton.shared.kubernetes.IngressSpecR\aingress\"\xbe\x04\n" +
	"\x18RedisKubernetesContainer\x12\x1a\n" +
	"\breplicas\x18\x01 \x01(\x05R\breplicas\x12S\n" +
	"\tresources\x18\x02 \x01(\v25.project.planton.shared.kubernetes.ContainerResourcesR\tresources\x124\n" +
	"\x16is_persistence_enabled\x18\x03 \x01(\bR\x14isPersistenceEnabled\x12\x1b\n" +
	"\tdisk_size\x18\x04 \x01(\tR\bdiskSize:\xdd\x02\xbaH\xd9\x02\x1a\xd6\x02\n" +
	"!spec.container.disk_size.required\x12IDisk size is required and must match the format if persistence is enabled\x1a\xe5\x01((!this.is_persistence_enabled && (size(this.disk_size) == 0 || this.disk_size == '')) || (this.is_persistence_enabled && size(this.disk_size) > 0 && this.disk_size.matches('^\\\\d+(\\\\.\\\\d+)?\\\\s?(Ki|Mi|Gi|Ti|Pi|Ei|K|M|G|T|P|E)$'))):\xa7\x01\n" +
	"\x11default_container\x12\x1d.google.protobuf.FieldOptions\x18\xa9\xe3  \x01(\v2Y.project.planton.provider.kubernetes.workload.rediskubernetes.v1.RedisKubernetesContainerR\x10defaultContainerB\xf9\x03\n" +
	"Ccom.project.planton.provider.kubernetes.workload.rediskubernetes.v1B\tSpecProtoP\x01Z\x81\x01github.com/project-planton/project-planton/apis/project/planton/provider/kubernetes/workload/rediskubernetes/v1;rediskubernetesv1\xa2\x02\x06PPPKWR\xaa\x02?Project.Planton.Provider.Kubernetes.Workload.Rediskubernetes.V1\xca\x02?Project\\Planton\\Provider\\Kubernetes\\Workload\\Rediskubernetes\\V1\xe2\x02KProject\\Planton\\Provider\\Kubernetes\\Workload\\Rediskubernetes\\V1\\GPBMetadata\xea\x02EProject::Planton::Provider::Kubernetes::Workload::Rediskubernetes::V1b\x06proto3"

var (
	file_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto_rawDesc), len(file_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto_rawDescData
}

var file_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto_goTypes = []any{
	(*RedisKubernetesSpec)(nil),           // 0: project.planton.provider.kubernetes.workload.rediskubernetes.v1.RedisKubernetesSpec
	(*RedisKubernetesContainer)(nil),      // 1: project.planton.provider.kubernetes.workload.rediskubernetes.v1.RedisKubernetesContainer
	(*kubernetes.IngressSpec)(nil),        // 2: project.planton.shared.kubernetes.IngressSpec
	(*kubernetes.ContainerResources)(nil), // 3: project.planton.shared.kubernetes.ContainerResources
	(*descriptorpb.FieldOptions)(nil),     // 4: google.protobuf.FieldOptions
}
var file_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.kubernetes.workload.rediskubernetes.v1.RedisKubernetesSpec.container:type_name -> project.planton.provider.kubernetes.workload.rediskubernetes.v1.RedisKubernetesContainer
	2, // 1: project.planton.provider.kubernetes.workload.rediskubernetes.v1.RedisKubernetesSpec.ingress:type_name -> project.planton.shared.kubernetes.IngressSpec
	3, // 2: project.planton.provider.kubernetes.workload.rediskubernetes.v1.RedisKubernetesContainer.resources:type_name -> project.planton.shared.kubernetes.ContainerResources
	4, // 3: project.planton.provider.kubernetes.workload.rediskubernetes.v1.default_container:extendee -> google.protobuf.FieldOptions
	1, // 4: project.planton.provider.kubernetes.workload.rediskubernetes.v1.default_container:type_name -> project.planton.provider.kubernetes.workload.rediskubernetes.v1.RedisKubernetesContainer
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	4, // [4:5] is the sub-list for extension type_name
	3, // [3:4] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto_init() }
func file_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto_init() {
	if File_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto_rawDesc), len(file_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto_msgTypes,
		ExtensionInfos:    file_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto_extTypes,
	}.Build()
	File_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto = out.File
	file_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto_goTypes = nil
	file_project_planton_provider_kubernetes_workload_rediskubernetes_v1_spec_proto_depIdxs = nil
}
