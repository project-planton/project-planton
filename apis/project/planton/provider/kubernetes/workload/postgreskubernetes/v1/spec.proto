syntax = "proto3";

package project.planton.provider.kubernetes.workload.postgreskubernetes.v1;

import "buf/validate/validate.proto";
import "project/planton/shared/kubernetes/kubernetes.proto";
import "project/planton/shared/kubernetes/options.proto";
import "project/planton/shared/options/options.proto";

import "google/protobuf/descriptor.proto";

extend google.protobuf.FieldOptions {
  PostgresKubernetesContainer default_container = 534001;
}

// Manager-agnostic backup configuration for a PostgreSQL database.
// This configuration allows per-database backup overrides independent of the operator implementation.
// When specified, these settings override operator-level backup configuration.
message PostgresKubernetesBackupConfig {
  // Optional: Custom S3/R2 prefix path for this database's backups
  // If not specified, uses operator-level default or standard naming
  // Example: "backups/my-app/production/postgres/$(PGVERSION)"
  // Note: $(PGVERSION) will be replaced by the Postgres version
  string s3_prefix = 1;

  // Optional: Custom backup schedule in cron format
  // If not specified, uses operator-level schedule
  // Example: "0 3 * * *" for 3 AM daily backups
  string backup_schedule = 2;

  // Optional: Enable or disable backups for this specific database
  // If true, backups are explicitly enabled (overrides operator setting)
  // If false, backups are explicitly disabled for this database
  // If not specified, uses operator-level setting
  optional bool enable_backup = 3;

  // Optional: Enable or disable restore capability
  // If not specified, uses operator-level setting
  optional bool enable_restore = 4;

  // Optional: Enable or disable clone capability
  // If not specified, uses operator-level setting
  optional bool enable_clone = 5;
}

/**
 * **PostgresKubernetesSpec** defines the configuration for deploying PostgreSQL on a Kubernetes cluster.
 * This message specifies the parameters needed to create and manage a PostgreSQL deployment within a Kubernetes environment.
 * It includes container specifications and ingress settings to control resource allocation and external access.
 */
message PostgresKubernetesSpec {
  // The container specifications for the PostgreSQL deployment.
  PostgresKubernetesContainer container = 1 [
    (default_container) = {
      replicas: 1,
      resources:  {
        limits {
          cpu: "1000m"
          memory: "1Gi"
        },
        requests {
          cpu: "50m"
          memory: "100Mi"
        }
      },
      disk_size: "1Gi"
    }
  ];

  //The ingress configuration for the PostgreSQL deployment.
  project.planton.shared.kubernetes.IngressSpec ingress = 2;

  // Optional: Per-database backup configuration
  // When specified, these settings override the operator-level backup configuration
  // If not specified, the database inherits operator-level backup settings
  PostgresKubernetesBackupConfig backup_config = 3;
}

/**
 * **PostgresKubernetesContainer** specifies the container configuration for the PostgreSQL application.
 * It includes resource allocations for CPU and memory, the number of replicas, and disk size for data persistence.
 * Proper configuration ensures optimal performance and data reliability for your PostgreSQL deployment.
 */
message PostgresKubernetesContainer {
  // The number of replicas of PostgreSQL pods.
  int32 replicas = 1;

  // The CPU and memory resources allocated to the PostgreSQL container.
  project.planton.shared.kubernetes.ContainerResources resources = 2;

  /**
   * The storage size to allocate for each PostgreSQL instance (e.g., "1Gi").
   * A default value is set if the client does not provide a value.
   */
  string disk_size = 3 [
    (buf.validate.field).cel = {
      id: "spec.container.disk_size.required",
      message: "Disk size value is invalid",
      // Validation regex for disk size.
      expression: "this.matches('^\\\\d+(\\\\.\\\\d+)?\\\\s?(Ki|Mi|Gi|Ti|Pi|Ei|K|M|G|T|P|E)$') && size(this) > 0"
    }
  ];
}
