// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/kubernetes/workload/locustkubernetes/v1/spec.proto

package locustkubernetesv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	kubernetes "github.com/project-planton/project-planton/apis/project/planton/shared/kubernetes"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// **LocustKubernetesSpec** defines the overall configuration for deploying a Locust load testing cluster on Kubernetes.
// This message encapsulates environmental context, Kubernetes deployment specifications, load testing parameters,
// and Helm chart values for customizing the deployment. By configuring these parameters, you can set up a scalable
// and customizable load testing environment to simulate user traffic and measure application performance.
type LocustKubernetesSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The master container specifications for the Locust cluster.
	// This defines the resource allocation and number of replicas for the master node.
	MasterContainer *LocustKubernetesContainer `protobuf:"bytes,1,opt,name=master_container,json=masterContainer,proto3" json:"master_container,omitempty"`
	// The worker container specifications for the Locust cluster.
	// This defines the resource allocation and number of replicas for the worker nodes.
	WorkerContainer *LocustKubernetesContainer `protobuf:"bytes,2,opt,name=worker_container,json=workerContainer,proto3" json:"worker_container,omitempty"`
	// The ingress configuration for the Locust deployment.
	Ingress *kubernetes.IngressSpec `protobuf:"bytes,3,opt,name=ingress,proto3" json:"ingress,omitempty"`
	// The load test parameters, including the main test script, additional library files,
	// and extra Python pip packages needed for test execution.
	// This specifies how the Locust nodes will simulate traffic and interact with the target application.
	LoadTest *LocustKubernetesLoadTest `protobuf:"bytes,4,opt,name=load_test,json=loadTest,proto3" json:"load_test,omitempty"`
	// A map of key-value pairs providing additional customization options for the Helm chart used
	// to deploy the Locust cluster. These values allow for further refinement of the deployment,
	// such as customizing resource limits, setting environment variables, or specifying version tags.
	// For detailed information on the available options, refer to the Helm chart documentation at:
	// https://github.com/deliveryhero/helm-charts/tree/master/stable/locust#values
	HelmValues    map[string]string `protobuf:"bytes,5,rep,name=helm_values,json=helmValues,proto3" json:"helm_values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocustKubernetesSpec) Reset() {
	*x = LocustKubernetesSpec{}
	mi := &file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocustKubernetesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocustKubernetesSpec) ProtoMessage() {}

func (x *LocustKubernetesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocustKubernetesSpec.ProtoReflect.Descriptor instead.
func (*LocustKubernetesSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *LocustKubernetesSpec) GetMasterContainer() *LocustKubernetesContainer {
	if x != nil {
		return x.MasterContainer
	}
	return nil
}

func (x *LocustKubernetesSpec) GetWorkerContainer() *LocustKubernetesContainer {
	if x != nil {
		return x.WorkerContainer
	}
	return nil
}

func (x *LocustKubernetesSpec) GetIngress() *kubernetes.IngressSpec {
	if x != nil {
		return x.Ingress
	}
	return nil
}

func (x *LocustKubernetesSpec) GetLoadTest() *LocustKubernetesLoadTest {
	if x != nil {
		return x.LoadTest
	}
	return nil
}

func (x *LocustKubernetesSpec) GetHelmValues() map[string]string {
	if x != nil {
		return x.HelmValues
	}
	return nil
}

// **LocustKubernetesContainer** specifies the container configuration for Locust master and worker nodes.
// It includes resource allocations for CPU and memory, as well as the number of replicas to deploy.
// Proper configuration ensures optimal performance and scalability of your load testing environment.
type LocustKubernetesContainer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of replicas for the container.
	// This determines the level of concurrency and load generation capabilities.
	Replicas int32 `protobuf:"varint,1,opt,name=replicas,proto3" json:"replicas,omitempty"`
	// The CPU and memory resources allocated to the Locust container.
	Resources     *kubernetes.ContainerResources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocustKubernetesContainer) Reset() {
	*x = LocustKubernetesContainer{}
	mi := &file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocustKubernetesContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocustKubernetesContainer) ProtoMessage() {}

func (x *LocustKubernetesContainer) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocustKubernetesContainer.ProtoReflect.Descriptor instead.
func (*LocustKubernetesContainer) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *LocustKubernetesContainer) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *LocustKubernetesContainer) GetResources() *kubernetes.ContainerResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

// **LocustKubernetesLoadTest** defines the specification for a load test using a Locust cluster.
// This message includes the primary Python script for Locust and any additional library files
// necessary to execute the load test. By providing these details, you can define the behavior
// of simulated users and customize the load test according to your application's requirements.
type LocustKubernetesLoadTest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A unique identifier or name for this particular load test specification.
	// It is used to reference or distinguish this test configuration among others within a testing suite or environment.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The Python code for the main Locust test script.
	// This script defines the behavior of the simulated users and is crucial for executing the load test.
	MainPyContent string `protobuf:"bytes,2,opt,name=main_py_content,json=mainPyContent,proto3" json:"main_py_content,omitempty"`
	// A map where each entry consists of a filename and its associated Python code content.
	// These files typically contain additional classes or functions required by the main_py_content script.
	// The key of the map is the filename, and the value is the file content.
	LibFilesContent map[string]string `protobuf:"bytes,3,rep,name=lib_files_content,json=libFilesContent,proto3" json:"lib_files_content,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// A list of extra Python pip packages that are required for the load test.
	// These packages will be installed in the environment where the load test is executed,
	// allowing for extended functionality or custom dependencies to be included easily.
	PipPackages   []string `protobuf:"bytes,4,rep,name=pip_packages,json=pipPackages,proto3" json:"pip_packages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocustKubernetesLoadTest) Reset() {
	*x = LocustKubernetesLoadTest{}
	mi := &file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocustKubernetesLoadTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocustKubernetesLoadTest) ProtoMessage() {}

func (x *LocustKubernetesLoadTest) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocustKubernetesLoadTest.ProtoReflect.Descriptor instead.
func (*LocustKubernetesLoadTest) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *LocustKubernetesLoadTest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LocustKubernetesLoadTest) GetMainPyContent() string {
	if x != nil {
		return x.MainPyContent
	}
	return ""
}

func (x *LocustKubernetesLoadTest) GetLibFilesContent() map[string]string {
	if x != nil {
		return x.LibFilesContent
	}
	return nil
}

func (x *LocustKubernetesLoadTest) GetPipPackages() []string {
	if x != nil {
		return x.PipPackages
	}
	return nil
}

var file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*LocustKubernetesContainer)(nil),
		Field:         528001,
		Name:          "project.planton.provider.kubernetes.workloads.locustkubernetes.v1.default_master_container",
		Tag:           "bytes,528001,opt,name=default_master_container",
		Filename:      "project/planton/provider/kubernetes/workload/locustkubernetes/v1/spec.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*LocustKubernetesContainer)(nil),
		Field:         528002,
		Name:          "project.planton.provider.kubernetes.workloads.locustkubernetes.v1.default_worker_container",
		Tag:           "bytes,528002,opt,name=default_worker_container",
		Filename:      "project/planton/provider/kubernetes/workload/locustkubernetes/v1/spec.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional project.planton.provider.kubernetes.workloads.locustkubernetes.v1.LocustKubernetesContainer default_master_container = 528001;
	E_DefaultMasterContainer = &file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_extTypes[0]
	// optional project.planton.provider.kubernetes.workloads.locustkubernetes.v1.LocustKubernetesContainer default_worker_container = 528002;
	E_DefaultWorkerContainer = &file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_extTypes[1]
)

var File_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_rawDesc = "" +
	"\n" +
	"Kproject/planton/provider/kubernetes/workload/locustkubernetes/v1/spec.proto\x12Aproject.planton.provider.kubernetes.workloads.locustkubernetes.v1\x1a\x1bbuf/validate/validate.proto\x1a google/protobuf/descriptor.proto\x1a2project/planton/shared/kubernetes/kubernetes.proto\x1a/project/planton/shared/kubernetes/options.proto\"\x8f\x06\n" +
	"\x14LocustKubernetesSpec\x12\xae\x01\n" +
	"\x10master_container\x18\x01 \x01(\v2\\.project.planton.provider.kubernetes.workloads.locustkubernetes.v1.LocustKubernetesContainerB%\x8a\xe8\x81\x02 \b\x01\x12\x1c\n" +
	"\f\n" +
	"\x051000m\x12\x031Gi\x12\f\n" +
	"\x0350m\x12\x05100MiR\x0fmasterContainer\x12\xae\x01\n" +
	"\x10worker_container\x18\x02 \x01(\v2\\.project.planton.provider.kubernetes.workloads.locustkubernetes.v1.LocustKubernetesContainerB%\x92\xe8\x81\x02 \b\x01\x12\x1c\n" +
	"\f\n" +
	"\x051000m\x12\x031Gi\x12\f\n" +
	"\x0350m\x12\x05100MiR\x0fworkerContainer\x12H\n" +
	"\aingress\x18\x03 \x01(\v2..project.planton.shared.kubernetes.IngressSpecR\aingress\x12\x80\x01\n" +
	"\tload_test\x18\x04 \x01(\v2[.project.planton.provider.kubernetes.workloads.locustkubernetes.v1.LocustKubernetesLoadTestB\x06\xbaH\x03\xc8\x01\x01R\bloadTest\x12\x88\x01\n" +
	"\vhelm_values\x18\x05 \x03(\v2g.project.planton.provider.kubernetes.workloads.locustkubernetes.v1.LocustKubernetesSpec.HelmValuesEntryR\n" +
	"helmValues\x1a=\n" +
	"\x0fHelmValuesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x8c\x01\n" +
	"\x19LocustKubernetesContainer\x12\x1a\n" +
	"\breplicas\x18\x01 \x01(\x05R\breplicas\x12S\n" +
	"\tresources\x18\x02 \x01(\v25.project.planton.shared.kubernetes.ContainerResourcesR\tresources\"\xf4\x02\n" +
	"\x18LocustKubernetesLoadTest\x12\x1a\n" +
	"\x04name\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12.\n" +
	"\x0fmain_py_content\x18\x02 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\rmainPyContent\x12\xa4\x01\n" +
	"\x11lib_files_content\x18\x03 \x03(\v2p.project.planton.provider.kubernetes.workloads.locustkubernetes.v1.LocustKubernetesLoadTest.LibFilesContentEntryB\x06\xbaH\x03\xc8\x01\x01R\x0flibFilesContent\x12!\n" +
	"\fpip_packages\x18\x04 \x03(\tR\vpipPackages\x1aB\n" +
	"\x14LibFilesContentEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:\xb7\x01\n" +
	"\x18default_master_container\x12\x1d.google.protobuf.FieldOptions\x18\x81\x9d  \x01(\v2\\.project.planton.provider.kubernetes.workloads.locustkubernetes.v1.LocustKubernetesContainerR\x16defaultMasterContainer:\xb7\x01\n" +
	"\x18default_worker_container\x12\x1d.google.protobuf.FieldOptions\x18\x82\x9d  \x01(\v2\\.project.planton.provider.kubernetes.workloads.locustkubernetes.v1.LocustKubernetesContainerR\x16defaultWorkerContainerB\x85\x04\n" +
	"Ecom.project.planton.provider.kubernetes.workloads.locustkubernetes.v1B\tSpecProtoP\x01Z\x83\x01github.com/project-planton/project-planton/apis/project/planton/provider/kubernetes/workload/locustkubernetes/v1;locustkubernetesv1\xa2\x02\x06PPPKWL\xaa\x02AProject.Planton.Provider.Kubernetes.Workloads.Locustkubernetes.V1\xca\x02AProject\\Planton\\Provider\\Kubernetes\\Workloads\\Locustkubernetes\\V1\xe2\x02MProject\\Planton\\Provider\\Kubernetes\\Workloads\\Locustkubernetes\\V1\\GPBMetadata\xea\x02GProject::Planton::Provider::Kubernetes::Workloads::Locustkubernetes::V1b\x06proto3"

var (
	file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_rawDesc), len(file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_rawDescData
}

var file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_goTypes = []any{
	(*LocustKubernetesSpec)(nil),          // 0: project.planton.provider.kubernetes.workloads.locustkubernetes.v1.LocustKubernetesSpec
	(*LocustKubernetesContainer)(nil),     // 1: project.planton.provider.kubernetes.workloads.locustkubernetes.v1.LocustKubernetesContainer
	(*LocustKubernetesLoadTest)(nil),      // 2: project.planton.provider.kubernetes.workloads.locustkubernetes.v1.LocustKubernetesLoadTest
	nil,                                   // 3: project.planton.provider.kubernetes.workloads.locustkubernetes.v1.LocustKubernetesSpec.HelmValuesEntry
	nil,                                   // 4: project.planton.provider.kubernetes.workloads.locustkubernetes.v1.LocustKubernetesLoadTest.LibFilesContentEntry
	(*kubernetes.IngressSpec)(nil),        // 5: project.planton.shared.kubernetes.IngressSpec
	(*kubernetes.ContainerResources)(nil), // 6: project.planton.shared.kubernetes.ContainerResources
	(*descriptorpb.FieldOptions)(nil),     // 7: google.protobuf.FieldOptions
}
var file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_depIdxs = []int32{
	1,  // 0: project.planton.provider.kubernetes.workloads.locustkubernetes.v1.LocustKubernetesSpec.master_container:type_name -> project.planton.provider.kubernetes.workloads.locustkubernetes.v1.LocustKubernetesContainer
	1,  // 1: project.planton.provider.kubernetes.workloads.locustkubernetes.v1.LocustKubernetesSpec.worker_container:type_name -> project.planton.provider.kubernetes.workloads.locustkubernetes.v1.LocustKubernetesContainer
	5,  // 2: project.planton.provider.kubernetes.workloads.locustkubernetes.v1.LocustKubernetesSpec.ingress:type_name -> project.planton.shared.kubernetes.IngressSpec
	2,  // 3: project.planton.provider.kubernetes.workloads.locustkubernetes.v1.LocustKubernetesSpec.load_test:type_name -> project.planton.provider.kubernetes.workloads.locustkubernetes.v1.LocustKubernetesLoadTest
	3,  // 4: project.planton.provider.kubernetes.workloads.locustkubernetes.v1.LocustKubernetesSpec.helm_values:type_name -> project.planton.provider.kubernetes.workloads.locustkubernetes.v1.LocustKubernetesSpec.HelmValuesEntry
	6,  // 5: project.planton.provider.kubernetes.workloads.locustkubernetes.v1.LocustKubernetesContainer.resources:type_name -> project.planton.shared.kubernetes.ContainerResources
	4,  // 6: project.planton.provider.kubernetes.workloads.locustkubernetes.v1.LocustKubernetesLoadTest.lib_files_content:type_name -> project.planton.provider.kubernetes.workloads.locustkubernetes.v1.LocustKubernetesLoadTest.LibFilesContentEntry
	7,  // 7: project.planton.provider.kubernetes.workloads.locustkubernetes.v1.default_master_container:extendee -> google.protobuf.FieldOptions
	7,  // 8: project.planton.provider.kubernetes.workloads.locustkubernetes.v1.default_worker_container:extendee -> google.protobuf.FieldOptions
	1,  // 9: project.planton.provider.kubernetes.workloads.locustkubernetes.v1.default_master_container:type_name -> project.planton.provider.kubernetes.workloads.locustkubernetes.v1.LocustKubernetesContainer
	1,  // 10: project.planton.provider.kubernetes.workloads.locustkubernetes.v1.default_worker_container:type_name -> project.planton.provider.kubernetes.workloads.locustkubernetes.v1.LocustKubernetesContainer
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	9,  // [9:11] is the sub-list for extension type_name
	7,  // [7:9] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_init() }
func file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_init() {
	if File_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_rawDesc), len(file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 2,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_msgTypes,
		ExtensionInfos:    file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_extTypes,
	}.Build()
	File_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto = out.File
	file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_goTypes = nil
	file_project_planton_provider_kubernetes_workload_locustkubernetes_v1_spec_proto_depIdxs = nil
}
