syntax = "proto3";

package project.planton.provider.kubernetes.workloads.locustkubernetes.v1;

import "buf/validate/validate.proto";
import "google/protobuf/descriptor.proto";
import "project/planton/shared/kubernetes/kubernetes.proto";
import "project/planton/shared/kubernetes/options.proto";

extend google.protobuf.FieldOptions {
  LocustKubernetesContainer default_master_container = 528001;
  LocustKubernetesContainer default_worker_container = 528002;
}

// **LocustKubernetesSpec** defines the overall configuration for deploying a Locust load testing cluster on Kubernetes.
// This message encapsulates environmental context, Kubernetes deployment specifications, load testing parameters,
// and Helm chart values for customizing the deployment. By configuring these parameters, you can set up a scalable
// and customizable load testing environment to simulate user traffic and measure application performance.
message LocustKubernetesSpec {
  // The master container specifications for the Locust cluster.
  // This defines the resource allocation and number of replicas for the master node.
  LocustKubernetesContainer master_container = 1 [
    (default_master_container) = {
      replicas: 1,
      resources:  {
        limits {
          cpu: "1000m"
          memory: "1Gi"
        },
        requests {
          cpu: "50m"
          memory: "100Mi"
        }
      },
    }
  ];

  // The worker container specifications for the Locust cluster.
  // This defines the resource allocation and number of replicas for the worker nodes.
  LocustKubernetesContainer worker_container = 2 [
    (default_worker_container) = {
      replicas: 1,
      resources:  {
        limits {
          cpu: "1000m"
          memory: "1Gi"
        },
        requests {
          cpu: "50m"
          memory: "100Mi"
        }
      },
    }
  ];

  // The ingress configuration for the Locust deployment.
  project.planton.shared.kubernetes.IngressSpec ingress = 3;

  // The load test parameters, including the main test script, additional library files,
  // and extra Python pip packages needed for test execution.
  // This specifies how the Locust nodes will simulate traffic and interact with the target application.
  LocustKubernetesLoadTest load_test = 4 [
    (buf.validate.field).required = true
  ];

  // A map of key-value pairs providing additional customization options for the Helm chart used
  // to deploy the Locust cluster. These values allow for further refinement of the deployment,
  // such as customizing resource limits, setting environment variables, or specifying version tags.
  // For detailed information on the available options, refer to the Helm chart documentation at:
  // https://github.com/deliveryhero/helm-charts/tree/master/stable/locust#values
  map<string, string> helm_values = 5;
}

// **LocustKubernetesContainer** specifies the container configuration for Locust master and worker nodes.
// It includes resource allocations for CPU and memory, as well as the number of replicas to deploy.
// Proper configuration ensures optimal performance and scalability of your load testing environment.
message LocustKubernetesContainer {
  // The number of replicas for the container.
  // This determines the level of concurrency and load generation capabilities.
  int32 replicas = 1;
  // The CPU and memory resources allocated to the Locust container.
  project.planton.shared.kubernetes.ContainerResources resources = 2;
}

// **LocustKubernetesLoadTest** defines the specification for a load test using a Locust cluster.
// This message includes the primary Python script for Locust and any additional library files
// necessary to execute the load test. By providing these details, you can define the behavior
// of simulated users and customize the load test according to your application's requirements.
message LocustKubernetesLoadTest {
  // A unique identifier or name for this particular load test specification.
  // It is used to reference or distinguish this test configuration among others within a testing suite or environment.
  string name = 1 [
    (buf.validate.field).required = true
  ];

  // The Python code for the main Locust test script.
  // This script defines the behavior of the simulated users and is crucial for executing the load test.
  string main_py_content = 2 [
    (buf.validate.field).required = true
  ];

  // A map where each entry consists of a filename and its associated Python code content.
  // These files typically contain additional classes or functions required by the main_py_content script.
  // The key of the map is the filename, and the value is the file content.
  map<string,string> lib_files_content = 3 [
    (buf.validate.field).required = true
  ];

  // A list of extra Python pip packages that are required for the load test.
  // These packages will be installed in the environment where the load test is executed,
  // allowing for extended functionality or custom dependencies to be included easily.
  repeated string pip_packages = 4;
}
