syntax = "proto3";

package project.planton.provider.kubernetes.workload.temporalkubernetes.v1;

import "buf/validate/validate.proto";
import "project/planton/shared/kubernetes/kubernetes.proto";
import "project/planton/shared/options/options.proto";

// temporal kubernetes database backend enumerates the supported databases.
enum TemporalKubernetesDatabaseBackend {
  // unspecified should not be used
  temporal_kubernetes_database_backend_unspecified = 0;

  // uses cassandra
  cassandra = 1;

  // uses postgresql
  postgresql = 2;

  // uses mysql
  mysql = 3;
}

// defines a custom search attribute for Temporal workflows
message TemporalKubernetesSearchAttribute {
  // name of the search attribute (e.g., "CustomerId", "Environment")
  string name = 1 [(buf.validate.field).required = true];

  // type of the search attribute
  // must be one of: Keyword, Text, Int, Double, Bool, Datetime, KeywordList
  // note: Text type only works with Elasticsearch backend
  string type = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).cel = {
      id: "type.valid_search_attribute_type"
      message: "type must be one of: Keyword, Text, Int, Double, Bool, Datetime, KeywordList"
      expression: "this in ['Keyword', 'Text', 'Int', 'Double', 'Bool', 'Datetime', 'KeywordList']"
    }
  ];
}

// temporal kubernetes spec defines minimal fields for deploying temporal on kubernetes.
message TemporalKubernetesSpec {
  // database configuration
  TemporalKubernetesDatabaseConfig database = 1 [(buf.validate.field).required = true];
  // disables temporal web ui
  bool disable_web_ui = 2;
  // enables embedded elasticsearch for temporal
  // this is ignored if external elasticsearch is set
  bool enable_embedded_elasticsearch = 3;
  // enables monitoring stack for temporal
  // enabling this will deploy prometheus and grafana
  bool enable_monitoring_stack = 4;
  //number of cassandra nodes to be deployed
  //this is only honored when the backend is cassandra, and no external database is provided.
  optional int32 cassandra_replicas = 5 [(project.planton.shared.options.default) = "1"];
  //The ingress configuration for the temporal deployment.
  //if enabled, the frontend will be exposed using a load-balancer
  // and also if web ui is enabled it will be exposed using the kubernetes ingress controller.
  project.planton.shared.kubernetes.IngressSpec ingress = 6;
  // external elasticsearch configuration to be used by temporal for configuring observability.
  TemporalKubernetesExternalElasticsearch external_elasticsearch = 7;
  // custom search attributes to register in the Temporal cluster
  // these attributes can be used to filter and query workflows
  // note: 'Text' type only works with Elasticsearch backend
  repeated TemporalKubernetesSearchAttribute search_attributes = 8;
  // version of the Temporal Helm chart to deploy (e.g., "0.62.0")
  // if not specified, the default version configured in the Pulumi module will be used
  string version = 9;
}

// groups database configuration settings.
message TemporalKubernetesDatabaseConfig {
  // selected database backend
  TemporalKubernetesDatabaseBackend backend = 1 [(buf.validate.field).required = true];

  // external database configuration, if this is not set, in-cluster cassandra would be created
  TemporalKubernetesExternalDatabase external_database = 2;

  // primary database or keyspace name
  optional string database_name = 6 [(project.planton.shared.options.default) = "temporal"];

  // visibility database or keyspace name
  optional string visibility_name = 7 [(project.planton.shared.options.default) = "temporal_visibility"];

  // disables automatic schema creation
  bool disable_auto_schema_setup = 8;
}

// describes an external database that temporal can use
message TemporalKubernetesExternalDatabase {
  // hostname for external database
  string host = 1;

  // port for external database
  int32 port = 2;

  // username for database
  string username = 3;

  // password for database
  string password = 4;
}

// describes an external elasticsearch cluster that temporal can use
// for advanced visibility instead of deploying an in-cluster es chart.
message TemporalKubernetesExternalElasticsearch {
  // the host address of the existing elasticsearch cluster
  string host = 1;

  // the port for the existing elasticsearch cluster
  int32 port = 2;

  // optional username, if the external cluster requires auth
  string user = 3;

  // optional password, if the external cluster requires auth
  string password = 4;
}
