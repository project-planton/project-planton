// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/kubernetes/workload/temporalkubernetes/v1/spec.proto

package temporalkubernetesv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// temporal kubernetes database backend enumerates the supported databases.
type TemporalKubernetesDatabaseBackend int32

const (
	// unspecified should not be used
	TemporalKubernetesDatabaseBackend_temporal_kubernetes_database_backend_unspecified TemporalKubernetesDatabaseBackend = 0
	// uses cassandra
	TemporalKubernetesDatabaseBackend_cassandra TemporalKubernetesDatabaseBackend = 1
	// uses postgresql
	TemporalKubernetesDatabaseBackend_postgresql TemporalKubernetesDatabaseBackend = 2
	// uses mysql
	TemporalKubernetesDatabaseBackend_mysql TemporalKubernetesDatabaseBackend = 3
)

// Enum value maps for TemporalKubernetesDatabaseBackend.
var (
	TemporalKubernetesDatabaseBackend_name = map[int32]string{
		0: "temporal_kubernetes_database_backend_unspecified",
		1: "cassandra",
		2: "postgresql",
		3: "mysql",
	}
	TemporalKubernetesDatabaseBackend_value = map[string]int32{
		"temporal_kubernetes_database_backend_unspecified": 0,
		"cassandra":  1,
		"postgresql": 2,
		"mysql":      3,
	}
)

func (x TemporalKubernetesDatabaseBackend) Enum() *TemporalKubernetesDatabaseBackend {
	p := new(TemporalKubernetesDatabaseBackend)
	*p = x
	return p
}

func (x TemporalKubernetesDatabaseBackend) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TemporalKubernetesDatabaseBackend) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_enumTypes[0].Descriptor()
}

func (TemporalKubernetesDatabaseBackend) Type() protoreflect.EnumType {
	return &file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_enumTypes[0]
}

func (x TemporalKubernetesDatabaseBackend) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TemporalKubernetesDatabaseBackend.Descriptor instead.
func (TemporalKubernetesDatabaseBackend) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_rawDescGZIP(), []int{0}
}

// temporal kubernetes spec defines minimal fields for deploying temporal on kubernetes.
type TemporalKubernetesSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// database configuration
	Database *TemporalKubernetesDatabaseConfig `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	// disables temporal web ui
	DisableWebUi bool `protobuf:"varint,2,opt,name=disable_web_ui,json=disableWebUi,proto3" json:"disable_web_ui,omitempty"`
	// enables embedded elasticsearch for temporal
	// this is ignored if external elasticsearch is set
	EnableEmbeddedElasticsearch bool `protobuf:"varint,3,opt,name=enable_embedded_elasticsearch,json=enableEmbeddedElasticsearch,proto3" json:"enable_embedded_elasticsearch,omitempty"`
	// enables monitoring stack for temporal
	// enabling this will deploy prometheus and grafana
	EnableMonitoringStack bool `protobuf:"varint,4,opt,name=enable_monitoring_stack,json=enableMonitoringStack,proto3" json:"enable_monitoring_stack,omitempty"`
	// number of cassandra nodes to be deployed
	// this is only honored when the backend is cassandra, and no external database is provided.
	CassandraReplicas *int32 `protobuf:"varint,5,opt,name=cassandra_replicas,json=cassandraReplicas,proto3,oneof" json:"cassandra_replicas,omitempty"`
	// The ingress configuration for the temporal deployment.
	// if enabled, the frontend will be exposed using a load-balancer
	// and also if web ui is enabled it will be exposed using the kubernetes ingress controller.
	Ingress *TemporalKubernetesIngress `protobuf:"bytes,6,opt,name=ingress,proto3" json:"ingress,omitempty"`
	// external elasticsearch configuration to be used by temporal for configuring observability.
	ExternalElasticsearch *TemporalKubernetesExternalElasticsearch `protobuf:"bytes,7,opt,name=external_elasticsearch,json=externalElasticsearch,proto3" json:"external_elasticsearch,omitempty"`
	// version of the Temporal Helm chart to deploy (e.g., "0.62.0")
	// if not specified, the default version configured in the Pulumi module will be used
	Version       string `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TemporalKubernetesSpec) Reset() {
	*x = TemporalKubernetesSpec{}
	mi := &file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemporalKubernetesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemporalKubernetesSpec) ProtoMessage() {}

func (x *TemporalKubernetesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemporalKubernetesSpec.ProtoReflect.Descriptor instead.
func (*TemporalKubernetesSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *TemporalKubernetesSpec) GetDatabase() *TemporalKubernetesDatabaseConfig {
	if x != nil {
		return x.Database
	}
	return nil
}

func (x *TemporalKubernetesSpec) GetDisableWebUi() bool {
	if x != nil {
		return x.DisableWebUi
	}
	return false
}

func (x *TemporalKubernetesSpec) GetEnableEmbeddedElasticsearch() bool {
	if x != nil {
		return x.EnableEmbeddedElasticsearch
	}
	return false
}

func (x *TemporalKubernetesSpec) GetEnableMonitoringStack() bool {
	if x != nil {
		return x.EnableMonitoringStack
	}
	return false
}

func (x *TemporalKubernetesSpec) GetCassandraReplicas() int32 {
	if x != nil && x.CassandraReplicas != nil {
		return *x.CassandraReplicas
	}
	return 0
}

func (x *TemporalKubernetesSpec) GetIngress() *TemporalKubernetesIngress {
	if x != nil {
		return x.Ingress
	}
	return nil
}

func (x *TemporalKubernetesSpec) GetExternalElasticsearch() *TemporalKubernetesExternalElasticsearch {
	if x != nil {
		return x.ExternalElasticsearch
	}
	return nil
}

func (x *TemporalKubernetesSpec) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// groups database configuration settings.
type TemporalKubernetesDatabaseConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// selected database backend
	Backend TemporalKubernetesDatabaseBackend `protobuf:"varint,1,opt,name=backend,proto3,enum=project.planton.provider.kubernetes.workload.temporalkubernetes.v1.TemporalKubernetesDatabaseBackend" json:"backend,omitempty"`
	// external database configuration, if this is not set, in-cluster cassandra would be created
	ExternalDatabase *TemporalKubernetesExternalDatabase `protobuf:"bytes,2,opt,name=external_database,json=externalDatabase,proto3" json:"external_database,omitempty"`
	// primary database or keyspace name
	DatabaseName *string `protobuf:"bytes,6,opt,name=database_name,json=databaseName,proto3,oneof" json:"database_name,omitempty"`
	// visibility database or keyspace name
	VisibilityName *string `protobuf:"bytes,7,opt,name=visibility_name,json=visibilityName,proto3,oneof" json:"visibility_name,omitempty"`
	// disables automatic schema creation
	DisableAutoSchemaSetup bool `protobuf:"varint,8,opt,name=disable_auto_schema_setup,json=disableAutoSchemaSetup,proto3" json:"disable_auto_schema_setup,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TemporalKubernetesDatabaseConfig) Reset() {
	*x = TemporalKubernetesDatabaseConfig{}
	mi := &file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemporalKubernetesDatabaseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemporalKubernetesDatabaseConfig) ProtoMessage() {}

func (x *TemporalKubernetesDatabaseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemporalKubernetesDatabaseConfig.ProtoReflect.Descriptor instead.
func (*TemporalKubernetesDatabaseConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *TemporalKubernetesDatabaseConfig) GetBackend() TemporalKubernetesDatabaseBackend {
	if x != nil {
		return x.Backend
	}
	return TemporalKubernetesDatabaseBackend_temporal_kubernetes_database_backend_unspecified
}

func (x *TemporalKubernetesDatabaseConfig) GetExternalDatabase() *TemporalKubernetesExternalDatabase {
	if x != nil {
		return x.ExternalDatabase
	}
	return nil
}

func (x *TemporalKubernetesDatabaseConfig) GetDatabaseName() string {
	if x != nil && x.DatabaseName != nil {
		return *x.DatabaseName
	}
	return ""
}

func (x *TemporalKubernetesDatabaseConfig) GetVisibilityName() string {
	if x != nil && x.VisibilityName != nil {
		return *x.VisibilityName
	}
	return ""
}

func (x *TemporalKubernetesDatabaseConfig) GetDisableAutoSchemaSetup() bool {
	if x != nil {
		return x.DisableAutoSchemaSetup
	}
	return false
}

// describes an external database that temporal can use
type TemporalKubernetesExternalDatabase struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// hostname for external database
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// port for external database
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// username for database
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// password for database
	Password      string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TemporalKubernetesExternalDatabase) Reset() {
	*x = TemporalKubernetesExternalDatabase{}
	mi := &file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemporalKubernetesExternalDatabase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemporalKubernetesExternalDatabase) ProtoMessage() {}

func (x *TemporalKubernetesExternalDatabase) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemporalKubernetesExternalDatabase.ProtoReflect.Descriptor instead.
func (*TemporalKubernetesExternalDatabase) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *TemporalKubernetesExternalDatabase) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *TemporalKubernetesExternalDatabase) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *TemporalKubernetesExternalDatabase) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TemporalKubernetesExternalDatabase) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// describes an external elasticsearch cluster that temporal can use
// for advanced visibility instead of deploying an in-cluster es chart.
type TemporalKubernetesExternalElasticsearch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the host address of the existing elasticsearch cluster
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// the port for the existing elasticsearch cluster
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// optional username, if the external cluster requires auth
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	// optional password, if the external cluster requires auth
	Password      string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TemporalKubernetesExternalElasticsearch) Reset() {
	*x = TemporalKubernetesExternalElasticsearch{}
	mi := &file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemporalKubernetesExternalElasticsearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemporalKubernetesExternalElasticsearch) ProtoMessage() {}

func (x *TemporalKubernetesExternalElasticsearch) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemporalKubernetesExternalElasticsearch.ProtoReflect.Descriptor instead.
func (*TemporalKubernetesExternalElasticsearch) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_rawDescGZIP(), []int{3}
}

func (x *TemporalKubernetesExternalElasticsearch) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *TemporalKubernetesExternalElasticsearch) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *TemporalKubernetesExternalElasticsearch) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *TemporalKubernetesExternalElasticsearch) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// ingress configuration for temporal deployment with separate frontend and web ui endpoints
type TemporalKubernetesIngress struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// frontend (gRPC + HTTP) ingress configuration
	Frontend *TemporalKubernetesFrontendIngressEndpoint `protobuf:"bytes,1,opt,name=frontend,proto3" json:"frontend,omitempty"`
	// web ui ingress configuration
	WebUi         *TemporalKubernetesWebUiIngressEndpoint `protobuf:"bytes,2,opt,name=web_ui,json=webUi,proto3" json:"web_ui,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TemporalKubernetesIngress) Reset() {
	*x = TemporalKubernetesIngress{}
	mi := &file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemporalKubernetesIngress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemporalKubernetesIngress) ProtoMessage() {}

func (x *TemporalKubernetesIngress) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemporalKubernetesIngress.ProtoReflect.Descriptor instead.
func (*TemporalKubernetesIngress) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_rawDescGZIP(), []int{4}
}

func (x *TemporalKubernetesIngress) GetFrontend() *TemporalKubernetesFrontendIngressEndpoint {
	if x != nil {
		return x.Frontend
	}
	return nil
}

func (x *TemporalKubernetesIngress) GetWebUi() *TemporalKubernetesWebUiIngressEndpoint {
	if x != nil {
		return x.WebUi
	}
	return nil
}

// frontend ingress endpoint configuration supporting both gRPC and HTTP protocols
type TemporalKubernetesFrontendIngressEndpoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// flag to enable or disable frontend ingress
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// the full hostname for gRPC access via LoadBalancer (e.g., "temporal-frontend-grpc.example.com")
	// required when enabled is true
	GrpcHostname string `protobuf:"bytes,2,opt,name=grpc_hostname,json=grpcHostname,proto3" json:"grpc_hostname,omitempty"`
	// the full hostname for HTTP access via Gateway API (e.g., "temporal-frontend-http.example.com")
	// optional - only creates Gateway/HTTPRoute resources if provided
	HttpHostname  string `protobuf:"bytes,3,opt,name=http_hostname,json=httpHostname,proto3" json:"http_hostname,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TemporalKubernetesFrontendIngressEndpoint) Reset() {
	*x = TemporalKubernetesFrontendIngressEndpoint{}
	mi := &file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemporalKubernetesFrontendIngressEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemporalKubernetesFrontendIngressEndpoint) ProtoMessage() {}

func (x *TemporalKubernetesFrontendIngressEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemporalKubernetesFrontendIngressEndpoint.ProtoReflect.Descriptor instead.
func (*TemporalKubernetesFrontendIngressEndpoint) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_rawDescGZIP(), []int{5}
}

func (x *TemporalKubernetesFrontendIngressEndpoint) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *TemporalKubernetesFrontendIngressEndpoint) GetGrpcHostname() string {
	if x != nil {
		return x.GrpcHostname
	}
	return ""
}

func (x *TemporalKubernetesFrontendIngressEndpoint) GetHttpHostname() string {
	if x != nil {
		return x.HttpHostname
	}
	return ""
}

// web ui ingress endpoint configuration for HTTP-only access
type TemporalKubernetesWebUiIngressEndpoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// flag to enable or disable web ui ingress
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// the full hostname for HTTP access via Gateway API (e.g., "temporal-ui.example.com")
	// required when enabled is true
	Hostname      string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TemporalKubernetesWebUiIngressEndpoint) Reset() {
	*x = TemporalKubernetesWebUiIngressEndpoint{}
	mi := &file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemporalKubernetesWebUiIngressEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemporalKubernetesWebUiIngressEndpoint) ProtoMessage() {}

func (x *TemporalKubernetesWebUiIngressEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemporalKubernetesWebUiIngressEndpoint.ProtoReflect.Descriptor instead.
func (*TemporalKubernetesWebUiIngressEndpoint) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_rawDescGZIP(), []int{6}
}

func (x *TemporalKubernetesWebUiIngressEndpoint) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *TemporalKubernetesWebUiIngressEndpoint) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

var File_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_rawDesc = "" +
	"\n" +
	"Mproject/planton/provider/kubernetes/workload/temporalkubernetes/v1/spec.proto\x12Bproject.planton.provider.kubernetes.workload.temporalkubernetes.v1\x1a\x1bbuf/validate/validate.proto\x1a,project/planton/shared/options/options.proto\"\xcf\x05\n" +
	"\x16TemporalKubernetesSpec\x12\x88\x01\n" +
	"\bdatabase\x18\x01 \x01(\v2d.project.planton.provider.kubernetes.workload.temporalkubernetes.v1.TemporalKubernetesDatabaseConfigB\x06\xbaH\x03\xc8\x01\x01R\bdatabase\x12$\n" +
	"\x0edisable_web_ui\x18\x02 \x01(\bR\fdisableWebUi\x12B\n" +
	"\x1denable_embedded_elasticsearch\x18\x03 \x01(\bR\x1benableEmbeddedElasticsearch\x126\n" +
	"\x17enable_monitoring_stack\x18\x04 \x01(\bR\x15enableMonitoringStack\x129\n" +
	"\x12cassandra_replicas\x18\x05 \x01(\x05B\x05\x8a\xa6\x1d\x011H\x00R\x11cassandraReplicas\x88\x01\x01\x12w\n" +
	"\aingress\x18\x06 \x01(\v2].project.planton.provider.kubernetes.workload.temporalkubernetes.v1.TemporalKubernetesIngressR\aingress\x12\xa2\x01\n" +
	"\x16external_elasticsearch\x18\a \x01(\v2k.project.planton.provider.kubernetes.workload.temporalkubernetes.v1.TemporalKubernetesExternalElasticsearchR\x15externalElasticsearch\x12\x18\n" +
	"\aversion\x18\b \x01(\tR\aversionB\x15\n" +
	"\x13_cassandra_replicas\"\xa2\x04\n" +
	" TemporalKubernetesDatabaseConfig\x12\x87\x01\n" +
	"\abackend\x18\x01 \x01(\x0e2e.project.planton.provider.kubernetes.workload.temporalkubernetes.v1.TemporalKubernetesDatabaseBackendB\x06\xbaH\x03\xc8\x01\x01R\abackend\x12\x93\x01\n" +
	"\x11external_database\x18\x02 \x01(\v2f.project.planton.provider.kubernetes.workload.temporalkubernetes.v1.TemporalKubernetesExternalDatabaseR\x10externalDatabase\x126\n" +
	"\rdatabase_name\x18\x06 \x01(\tB\f\x8a\xa6\x1d\btemporalH\x00R\fdatabaseName\x88\x01\x01\x12E\n" +
	"\x0fvisibility_name\x18\a \x01(\tB\x17\x8a\xa6\x1d\x13temporal_visibilityH\x01R\x0evisibilityName\x88\x01\x01\x129\n" +
	"\x19disable_auto_schema_setup\x18\b \x01(\bR\x16disableAutoSchemaSetupB\x10\n" +
	"\x0e_database_nameB\x12\n" +
	"\x10_visibility_name\"\x84\x01\n" +
	"\"TemporalKubernetesExternalDatabase\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x02 \x01(\x05R\x04port\x12\x1a\n" +
	"\busername\x18\x03 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x04 \x01(\tR\bpassword\"\x81\x01\n" +
	"'TemporalKubernetesExternalElasticsearch\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x02 \x01(\x05R\x04port\x12\x12\n" +
	"\x04user\x18\x03 \x01(\tR\x04user\x12\x1a\n" +
	"\bpassword\x18\x04 \x01(\tR\bpassword\"\xab\x02\n" +
	"\x19TemporalKubernetesIngress\x12\x89\x01\n" +
	"\bfrontend\x18\x01 \x01(\v2m.project.planton.provider.kubernetes.workload.temporalkubernetes.v1.TemporalKubernetesFrontendIngressEndpointR\bfrontend\x12\x81\x01\n" +
	"\x06web_ui\x18\x02 \x01(\v2j.project.planton.provider.kubernetes.workload.temporalkubernetes.v1.TemporalKubernetesWebUiIngressEndpointR\x05webUi\"\xbb\x02\n" +
	")TemporalKubernetesFrontendIngressEndpoint\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12#\n" +
	"\rgrpc_hostname\x18\x02 \x01(\tR\fgrpcHostname\x12#\n" +
	"\rhttp_hostname\x18\x03 \x01(\tR\fhttpHostname:\xa9\x01\xbaH\xa5\x01\x1a\xa2\x01\n" +
	",spec.ingress.frontend.grpc_hostname.required\x12Cfrontend.grpc_hostname is required when frontend ingress is enabled\x1a-!this.enabled || size(this.grpc_hostname) > 0\"\xf5\x01\n" +
	"&TemporalKubernetesWebUiIngressEndpoint\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12\x1a\n" +
	"\bhostname\x18\x02 \x01(\tR\bhostname:\x94\x01\xbaH\x90\x01\x1a\x8d\x01\n" +
	"%spec.ingress.web_ui.hostname.required\x12:web_ui.hostname is required when web ui ingress is enabled\x1a(!this.enabled || size(this.hostname) > 0*\x83\x01\n" +
	"!TemporalKubernetesDatabaseBackend\x124\n" +
	"0temporal_kubernetes_database_backend_unspecified\x10\x00\x12\r\n" +
	"\tcassandra\x10\x01\x12\x0e\n" +
	"\n" +
	"postgresql\x10\x02\x12\t\n" +
	"\x05mysql\x10\x03B\x8e\x04\n" +
	"Fcom.project.planton.provider.kubernetes.workload.temporalkubernetes.v1B\tSpecProtoP\x01Z\x87\x01github.com/project-planton/project-planton/apis/project/planton/provider/kubernetes/workload/temporalkubernetes/v1;temporalkubernetesv1\xa2\x02\x06PPPKWT\xaa\x02BProject.Planton.Provider.Kubernetes.Workload.Temporalkubernetes.V1\xca\x02BProject\\Planton\\Provider\\Kubernetes\\Workload\\Temporalkubernetes\\V1\xe2\x02NProject\\Planton\\Provider\\Kubernetes\\Workload\\Temporalkubernetes\\V1\\GPBMetadata\xea\x02HProject::Planton::Provider::Kubernetes::Workload::Temporalkubernetes::V1b\x06proto3"

var (
	file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_rawDesc), len(file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_rawDescData
}

var file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_goTypes = []any{
	(TemporalKubernetesDatabaseBackend)(0),            // 0: project.planton.provider.kubernetes.workload.temporalkubernetes.v1.TemporalKubernetesDatabaseBackend
	(*TemporalKubernetesSpec)(nil),                    // 1: project.planton.provider.kubernetes.workload.temporalkubernetes.v1.TemporalKubernetesSpec
	(*TemporalKubernetesDatabaseConfig)(nil),          // 2: project.planton.provider.kubernetes.workload.temporalkubernetes.v1.TemporalKubernetesDatabaseConfig
	(*TemporalKubernetesExternalDatabase)(nil),        // 3: project.planton.provider.kubernetes.workload.temporalkubernetes.v1.TemporalKubernetesExternalDatabase
	(*TemporalKubernetesExternalElasticsearch)(nil),   // 4: project.planton.provider.kubernetes.workload.temporalkubernetes.v1.TemporalKubernetesExternalElasticsearch
	(*TemporalKubernetesIngress)(nil),                 // 5: project.planton.provider.kubernetes.workload.temporalkubernetes.v1.TemporalKubernetesIngress
	(*TemporalKubernetesFrontendIngressEndpoint)(nil), // 6: project.planton.provider.kubernetes.workload.temporalkubernetes.v1.TemporalKubernetesFrontendIngressEndpoint
	(*TemporalKubernetesWebUiIngressEndpoint)(nil),    // 7: project.planton.provider.kubernetes.workload.temporalkubernetes.v1.TemporalKubernetesWebUiIngressEndpoint
}
var file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_depIdxs = []int32{
	2, // 0: project.planton.provider.kubernetes.workload.temporalkubernetes.v1.TemporalKubernetesSpec.database:type_name -> project.planton.provider.kubernetes.workload.temporalkubernetes.v1.TemporalKubernetesDatabaseConfig
	5, // 1: project.planton.provider.kubernetes.workload.temporalkubernetes.v1.TemporalKubernetesSpec.ingress:type_name -> project.planton.provider.kubernetes.workload.temporalkubernetes.v1.TemporalKubernetesIngress
	4, // 2: project.planton.provider.kubernetes.workload.temporalkubernetes.v1.TemporalKubernetesSpec.external_elasticsearch:type_name -> project.planton.provider.kubernetes.workload.temporalkubernetes.v1.TemporalKubernetesExternalElasticsearch
	0, // 3: project.planton.provider.kubernetes.workload.temporalkubernetes.v1.TemporalKubernetesDatabaseConfig.backend:type_name -> project.planton.provider.kubernetes.workload.temporalkubernetes.v1.TemporalKubernetesDatabaseBackend
	3, // 4: project.planton.provider.kubernetes.workload.temporalkubernetes.v1.TemporalKubernetesDatabaseConfig.external_database:type_name -> project.planton.provider.kubernetes.workload.temporalkubernetes.v1.TemporalKubernetesExternalDatabase
	6, // 5: project.planton.provider.kubernetes.workload.temporalkubernetes.v1.TemporalKubernetesIngress.frontend:type_name -> project.planton.provider.kubernetes.workload.temporalkubernetes.v1.TemporalKubernetesFrontendIngressEndpoint
	7, // 6: project.planton.provider.kubernetes.workload.temporalkubernetes.v1.TemporalKubernetesIngress.web_ui:type_name -> project.planton.provider.kubernetes.workload.temporalkubernetes.v1.TemporalKubernetesWebUiIngressEndpoint
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() {
	file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_init()
}
func file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_init() {
	if File_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto != nil {
		return
	}
	file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_msgTypes[0].OneofWrappers = []any{}
	file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_rawDesc), len(file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_depIdxs,
		EnumInfos:         file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_enumTypes,
		MessageInfos:      file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto = out.File
	file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_goTypes = nil
	file_project_planton_provider_kubernetes_workload_temporalkubernetes_v1_spec_proto_depIdxs = nil
}
