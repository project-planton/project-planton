// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/gcp/gcpgkeaddonbundle/v1/spec.proto

package gcpgkeaddonbundlev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GcpGkeAddonBundleSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The GCP project ID in which the GKE cluster exists.
	ClusterProjectId string `protobuf:"bytes,1,opt,name=cluster_project_id,json=clusterProjectId,proto3" json:"cluster_project_id,omitempty"`
	// Istio addon configuration
	Istio *GcpGkeAddonBundleIstio `protobuf:"bytes,2,opt,name=istio,proto3" json:"istio,omitempty"`
	// A flag to control the installation of the PostgreSQL operator.
	InstallPostgresOperator bool `protobuf:"varint,3,opt,name=install_postgres_operator,json=installPostgresOperator,proto3" json:"install_postgres_operator,omitempty"`
	// A flag to control the installation of the Kafka operator.
	InstallKafkaOperator bool `protobuf:"varint,4,opt,name=install_kafka_operator,json=installKafkaOperator,proto3" json:"install_kafka_operator,omitempty"`
	// A flag to control the installation of the Solr operator.
	InstallSolrOperator bool `protobuf:"varint,5,opt,name=install_solr_operator,json=installSolrOperator,proto3" json:"install_solr_operator,omitempty"`
	// A flag to control the installation of Kubecost.
	InstallKubecost bool `protobuf:"varint,6,opt,name=install_kubecost,json=installKubecost,proto3" json:"install_kubecost,omitempty"`
	// A flag to control the installation of Ingress NGINX.
	InstallIngressNginx bool `protobuf:"varint,7,opt,name=install_ingress_nginx,json=installIngressNginx,proto3" json:"install_ingress_nginx,omitempty"`
	// A flag to control the installation of Cert-Manager.
	InstallCertManager bool `protobuf:"varint,8,opt,name=install_cert_manager,json=installCertManager,proto3" json:"install_cert_manager,omitempty"`
	// A flag to control the installation of External DNS.
	InstallExternalDns bool `protobuf:"varint,9,opt,name=install_external_dns,json=installExternalDns,proto3" json:"install_external_dns,omitempty"`
	// A flag to control the installation of External Secrets.
	InstallExternalSecrets bool `protobuf:"varint,10,opt,name=install_external_secrets,json=installExternalSecrets,proto3" json:"install_external_secrets,omitempty"`
	// A flag to control the installation of the Elastic operator.
	InstallElasticOperator bool `protobuf:"varint,11,opt,name=install_elastic_operator,json=installElasticOperator,proto3" json:"install_elastic_operator,omitempty"`
	// A flag to control the installation of the Keycloak operator.
	InstallKeycloakOperator bool `protobuf:"varint,12,opt,name=install_keycloak_operator,json=installKeycloakOperator,proto3" json:"install_keycloak_operator,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *GcpGkeAddonBundleSpec) Reset() {
	*x = GcpGkeAddonBundleSpec{}
	mi := &file_project_planton_provider_gcp_gcpgkeaddonbundle_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpGkeAddonBundleSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpGkeAddonBundleSpec) ProtoMessage() {}

func (x *GcpGkeAddonBundleSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gcpgkeaddonbundle_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpGkeAddonBundleSpec.ProtoReflect.Descriptor instead.
func (*GcpGkeAddonBundleSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gcpgkeaddonbundle_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *GcpGkeAddonBundleSpec) GetClusterProjectId() string {
	if x != nil {
		return x.ClusterProjectId
	}
	return ""
}

func (x *GcpGkeAddonBundleSpec) GetIstio() *GcpGkeAddonBundleIstio {
	if x != nil {
		return x.Istio
	}
	return nil
}

func (x *GcpGkeAddonBundleSpec) GetInstallPostgresOperator() bool {
	if x != nil {
		return x.InstallPostgresOperator
	}
	return false
}

func (x *GcpGkeAddonBundleSpec) GetInstallKafkaOperator() bool {
	if x != nil {
		return x.InstallKafkaOperator
	}
	return false
}

func (x *GcpGkeAddonBundleSpec) GetInstallSolrOperator() bool {
	if x != nil {
		return x.InstallSolrOperator
	}
	return false
}

func (x *GcpGkeAddonBundleSpec) GetInstallKubecost() bool {
	if x != nil {
		return x.InstallKubecost
	}
	return false
}

func (x *GcpGkeAddonBundleSpec) GetInstallIngressNginx() bool {
	if x != nil {
		return x.InstallIngressNginx
	}
	return false
}

func (x *GcpGkeAddonBundleSpec) GetInstallCertManager() bool {
	if x != nil {
		return x.InstallCertManager
	}
	return false
}

func (x *GcpGkeAddonBundleSpec) GetInstallExternalDns() bool {
	if x != nil {
		return x.InstallExternalDns
	}
	return false
}

func (x *GcpGkeAddonBundleSpec) GetInstallExternalSecrets() bool {
	if x != nil {
		return x.InstallExternalSecrets
	}
	return false
}

func (x *GcpGkeAddonBundleSpec) GetInstallElasticOperator() bool {
	if x != nil {
		return x.InstallElasticOperator
	}
	return false
}

func (x *GcpGkeAddonBundleSpec) GetInstallKeycloakOperator() bool {
	if x != nil {
		return x.InstallKeycloakOperator
	}
	return false
}

type GcpGkeAddonBundleIstio struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A flag to control the installation of the Istio addon.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The GCP region in which the GKE cluster exists.
	ClusterRegion string `protobuf:"bytes,2,opt,name=cluster_region,json=clusterRegion,proto3" json:"cluster_region,omitempty"`
	// The GCP sub-network self-link in which the GKE cluster exists.
	SubNetworkSelfLink string `protobuf:"bytes,3,opt,name=sub_network_self_link,json=subNetworkSelfLink,proto3" json:"sub_network_self_link,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GcpGkeAddonBundleIstio) Reset() {
	*x = GcpGkeAddonBundleIstio{}
	mi := &file_project_planton_provider_gcp_gcpgkeaddonbundle_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpGkeAddonBundleIstio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpGkeAddonBundleIstio) ProtoMessage() {}

func (x *GcpGkeAddonBundleIstio) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gcpgkeaddonbundle_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpGkeAddonBundleIstio.ProtoReflect.Descriptor instead.
func (*GcpGkeAddonBundleIstio) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gcpgkeaddonbundle_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *GcpGkeAddonBundleIstio) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GcpGkeAddonBundleIstio) GetClusterRegion() string {
	if x != nil {
		return x.ClusterRegion
	}
	return ""
}

func (x *GcpGkeAddonBundleIstio) GetSubNetworkSelfLink() string {
	if x != nil {
		return x.SubNetworkSelfLink
	}
	return ""
}

var File_project_planton_provider_gcp_gcpgkeaddonbundle_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_gcp_gcpgkeaddonbundle_v1_spec_proto_rawDesc = "" +
	"\n" +
	"<project/planton/provider/gcp/gcpgkeaddonbundle/v1/spec.proto\x121project.planton.provider.gcp.gcpgkeaddonbundle.v1\x1a\x1bbuf/validate/validate.proto\"\xc7\x05\n" +
	"\x15GcpGkeAddonBundleSpec\x124\n" +
	"\x12cluster_project_id\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x10clusterProjectId\x12_\n" +
	"\x05istio\x18\x02 \x01(\v2I.project.planton.provider.gcp.gcpgkeaddonbundle.v1.GcpGkeAddonBundleIstioR\x05istio\x12:\n" +
	"\x19install_postgres_operator\x18\x03 \x01(\bR\x17installPostgresOperator\x124\n" +
	"\x16install_kafka_operator\x18\x04 \x01(\bR\x14installKafkaOperator\x122\n" +
	"\x15install_solr_operator\x18\x05 \x01(\bR\x13installSolrOperator\x12)\n" +
	"\x10install_kubecost\x18\x06 \x01(\bR\x0finstallKubecost\x122\n" +
	"\x15install_ingress_nginx\x18\a \x01(\bR\x13installIngressNginx\x120\n" +
	"\x14install_cert_manager\x18\b \x01(\bR\x12installCertManager\x120\n" +
	"\x14install_external_dns\x18\t \x01(\bR\x12installExternalDns\x128\n" +
	"\x18install_external_secrets\x18\n" +
	" \x01(\bR\x16installExternalSecrets\x128\n" +
	"\x18install_elastic_operator\x18\v \x01(\bR\x16installElasticOperator\x12:\n" +
	"\x19install_keycloak_operator\x18\f \x01(\bR\x17installKeycloakOperator\"\x9c\x01\n" +
	"\x16GcpGkeAddonBundleIstio\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12-\n" +
	"\x0ecluster_region\x18\x02 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\rclusterRegion\x129\n" +
	"\x15sub_network_self_link\x18\x03 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x12subNetworkSelfLinkB\xa4\x03\n" +
	"5com.project.planton.provider.gcp.gcpgkeaddonbundle.v1B\tSpecProtoP\x01Zugithub.com/project-planton/project-planton/apis/project/planton/provider/gcp/gcpgkeaddonbundle/v1;gcpgkeaddonbundlev1\xa2\x02\x05PPPGG\xaa\x021Project.Planton.Provider.Gcp.Gcpgkeaddonbundle.V1\xca\x021Project\\Planton\\Provider\\Gcp\\Gcpgkeaddonbundle\\V1\xe2\x02=Project\\Planton\\Provider\\Gcp\\Gcpgkeaddonbundle\\V1\\GPBMetadata\xea\x026Project::Planton::Provider::Gcp::Gcpgkeaddonbundle::V1b\x06proto3"

var (
	file_project_planton_provider_gcp_gcpgkeaddonbundle_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_gcp_gcpgkeaddonbundle_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_gcp_gcpgkeaddonbundle_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_gcp_gcpgkeaddonbundle_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_gcp_gcpgkeaddonbundle_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_gcp_gcpgkeaddonbundle_v1_spec_proto_rawDesc), len(file_project_planton_provider_gcp_gcpgkeaddonbundle_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_gcp_gcpgkeaddonbundle_v1_spec_proto_rawDescData
}

var file_project_planton_provider_gcp_gcpgkeaddonbundle_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_project_planton_provider_gcp_gcpgkeaddonbundle_v1_spec_proto_goTypes = []any{
	(*GcpGkeAddonBundleSpec)(nil),  // 0: project.planton.provider.gcp.gcpgkeaddonbundle.v1.GcpGkeAddonBundleSpec
	(*GcpGkeAddonBundleIstio)(nil), // 1: project.planton.provider.gcp.gcpgkeaddonbundle.v1.GcpGkeAddonBundleIstio
}
var file_project_planton_provider_gcp_gcpgkeaddonbundle_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.gcp.gcpgkeaddonbundle.v1.GcpGkeAddonBundleSpec.istio:type_name -> project.planton.provider.gcp.gcpgkeaddonbundle.v1.GcpGkeAddonBundleIstio
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_project_planton_provider_gcp_gcpgkeaddonbundle_v1_spec_proto_init() }
func file_project_planton_provider_gcp_gcpgkeaddonbundle_v1_spec_proto_init() {
	if File_project_planton_provider_gcp_gcpgkeaddonbundle_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_gcp_gcpgkeaddonbundle_v1_spec_proto_rawDesc), len(file_project_planton_provider_gcp_gcpgkeaddonbundle_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_gcp_gcpgkeaddonbundle_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_gcp_gcpgkeaddonbundle_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_gcp_gcpgkeaddonbundle_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_gcp_gcpgkeaddonbundle_v1_spec_proto = out.File
	file_project_planton_provider_gcp_gcpgkeaddonbundle_v1_spec_proto_goTypes = nil
	file_project_planton_provider_gcp_gcpgkeaddonbundle_v1_spec_proto_depIdxs = nil
}
