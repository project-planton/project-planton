// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/provider/gcp/gcpartifactregistryrepo/v1/stack_outputs.proto

package gcpartifactregistryrepov1

import (
	gcp "github.com/project-planton/project-planton/apis/project/planton/shared/gcp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// gcp-artifact-registry-repo stack outputs
type GcpArtifactRegistryRepoStackOutputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// reader service account
	ReaderServiceAccount *gcp.GoogleServiceAccount `protobuf:"bytes,1,opt,name=reader_service_account,json=readerServiceAccount,proto3" json:"reader_service_account,omitempty"`
	// writer service account
	WriterServiceAccount *gcp.GoogleServiceAccount `protobuf:"bytes,2,opt,name=writer_service_account,json=writerServiceAccount,proto3" json:"writer_service_account,omitempty"`
	// name of the repository.
	RepoName string `protobuf:"bytes,3,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	// hostname of the repository.
	Hostname string `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// url for the repository.
	RepoUrl string `protobuf:"bytes,5,opt,name=repo_url,json=repoUrl,proto3" json:"repo_url,omitempty"`
}

func (x *GcpArtifactRegistryRepoStackOutputs) Reset() {
	*x = GcpArtifactRegistryRepoStackOutputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_gcp_gcpartifactregistryrepo_v1_stack_outputs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcpArtifactRegistryRepoStackOutputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpArtifactRegistryRepoStackOutputs) ProtoMessage() {}

func (x *GcpArtifactRegistryRepoStackOutputs) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gcpartifactregistryrepo_v1_stack_outputs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpArtifactRegistryRepoStackOutputs.ProtoReflect.Descriptor instead.
func (*GcpArtifactRegistryRepoStackOutputs) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gcpartifactregistryrepo_v1_stack_outputs_proto_rawDescGZIP(), []int{0}
}

func (x *GcpArtifactRegistryRepoStackOutputs) GetReaderServiceAccount() *gcp.GoogleServiceAccount {
	if x != nil {
		return x.ReaderServiceAccount
	}
	return nil
}

func (x *GcpArtifactRegistryRepoStackOutputs) GetWriterServiceAccount() *gcp.GoogleServiceAccount {
	if x != nil {
		return x.WriterServiceAccount
	}
	return nil
}

func (x *GcpArtifactRegistryRepoStackOutputs) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *GcpArtifactRegistryRepoStackOutputs) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *GcpArtifactRegistryRepoStackOutputs) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

var File_project_planton_provider_gcp_gcpartifactregistryrepo_v1_stack_outputs_proto protoreflect.FileDescriptor

var file_project_planton_provider_gcp_gcpartifactregistryrepo_v1_stack_outputs_proto_rawDesc = []byte{
	0x0a, 0x4b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x67, 0x63, 0x70, 0x2f, 0x67,
	0x63, 0x70, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x72, 0x65, 0x70, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x37, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x67, 0x63, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x72,
	0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x24, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x67,
	0x63, 0x70, 0x2f, 0x67, 0x63, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x02, 0x0a,
	0x23, 0x47, 0x63, 0x70, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x12, 0x66, 0x0a, 0x16, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x67, 0x63,
	0x70, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x14, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x66, 0x0a, 0x16,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x14,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x42, 0xd7, 0x03, 0x0a, 0x3b, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x67, 0x63,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x76, 0x31, 0x42, 0x11, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x81, 0x01,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x67, 0x63, 0x70, 0x2f, 0x67, 0x63, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x72, 0x65, 0x70, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x67, 0x63, 0x70, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x72, 0x65, 0x70, 0x6f, 0x76,
	0x31, 0xa2, 0x02, 0x05, 0x50, 0x50, 0x50, 0x47, 0x47, 0xaa, 0x02, 0x37, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x63, 0x70, 0x2e, 0x47, 0x63, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x72, 0x65, 0x70, 0x6f,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x37, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x47,
	0x63, 0x70, 0x5c, 0x47, 0x63, 0x70, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x72, 0x65, 0x70, 0x6f, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x43,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x47, 0x63, 0x70, 0x5c, 0x47, 0x63, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x72, 0x65, 0x70, 0x6f, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x3c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x3a, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x3a, 0x3a, 0x47, 0x63, 0x70, 0x3a, 0x3a, 0x47, 0x63, 0x70, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x72, 0x65, 0x70, 0x6f, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_project_planton_provider_gcp_gcpartifactregistryrepo_v1_stack_outputs_proto_rawDescOnce sync.Once
	file_project_planton_provider_gcp_gcpartifactregistryrepo_v1_stack_outputs_proto_rawDescData = file_project_planton_provider_gcp_gcpartifactregistryrepo_v1_stack_outputs_proto_rawDesc
)

func file_project_planton_provider_gcp_gcpartifactregistryrepo_v1_stack_outputs_proto_rawDescGZIP() []byte {
	file_project_planton_provider_gcp_gcpartifactregistryrepo_v1_stack_outputs_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_gcp_gcpartifactregistryrepo_v1_stack_outputs_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_provider_gcp_gcpartifactregistryrepo_v1_stack_outputs_proto_rawDescData)
	})
	return file_project_planton_provider_gcp_gcpartifactregistryrepo_v1_stack_outputs_proto_rawDescData
}

var file_project_planton_provider_gcp_gcpartifactregistryrepo_v1_stack_outputs_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_provider_gcp_gcpartifactregistryrepo_v1_stack_outputs_proto_goTypes = []any{
	(*GcpArtifactRegistryRepoStackOutputs)(nil), // 0: project.planton.provider.gcp.gcpartifactregistryrepo.v1.GcpArtifactRegistryRepoStackOutputs
	(*gcp.GoogleServiceAccount)(nil),            // 1: project.planton.shared.gcp.GoogleServiceAccount
}
var file_project_planton_provider_gcp_gcpartifactregistryrepo_v1_stack_outputs_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.gcp.gcpartifactregistryrepo.v1.GcpArtifactRegistryRepoStackOutputs.reader_service_account:type_name -> project.planton.shared.gcp.GoogleServiceAccount
	1, // 1: project.planton.provider.gcp.gcpartifactregistryrepo.v1.GcpArtifactRegistryRepoStackOutputs.writer_service_account:type_name -> project.planton.shared.gcp.GoogleServiceAccount
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_project_planton_provider_gcp_gcpartifactregistryrepo_v1_stack_outputs_proto_init() }
func file_project_planton_provider_gcp_gcpartifactregistryrepo_v1_stack_outputs_proto_init() {
	if File_project_planton_provider_gcp_gcpartifactregistryrepo_v1_stack_outputs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_provider_gcp_gcpartifactregistryrepo_v1_stack_outputs_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GcpArtifactRegistryRepoStackOutputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_provider_gcp_gcpartifactregistryrepo_v1_stack_outputs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_gcp_gcpartifactregistryrepo_v1_stack_outputs_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_gcp_gcpartifactregistryrepo_v1_stack_outputs_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_gcp_gcpartifactregistryrepo_v1_stack_outputs_proto_msgTypes,
	}.Build()
	File_project_planton_provider_gcp_gcpartifactregistryrepo_v1_stack_outputs_proto = out.File
	file_project_planton_provider_gcp_gcpartifactregistryrepo_v1_stack_outputs_proto_rawDesc = nil
	file_project_planton_provider_gcp_gcpartifactregistryrepo_v1_stack_outputs_proto_goTypes = nil
	file_project_planton_provider_gcp_gcpartifactregistryrepo_v1_stack_outputs_proto_depIdxs = nil
}
