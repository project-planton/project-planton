// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/gcp/gcprouternat/v1/spec.proto

package gcprouternatv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/project-planton/project-planton/apis/project/planton/shared/foreignkey/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GcpRouterNatSpec defines configuration for a Cloud Router with a NAT gateway.
type GcpRouterNatSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Reference to the target VPC network (self-link or name of an existing GCP VPC).
	VpcSelfLink *v1.StringValueOrRef `protobuf:"bytes,1,opt,name=vpc_self_link,json=vpcSelfLink,proto3" json:"vpc_self_link,omitempty"`
	// GCP region for the Cloud Router and NAT.
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// Optional specific subnets to enable NAT on (if empty or not set, NAT covers all subnets in the region).
	SubnetworkSelfLinks []*v1.StringValueOrRef `protobuf:"bytes,3,rep,name=subnetwork_self_links,json=subnetworkSelfLinks,proto3" json:"subnetwork_self_links,omitempty"`
	// Optional static external IP addresses to use for NAT (if empty, NAT will auto-allocate IPs).
	NatIpNames    []*v1.StringValueOrRef `protobuf:"bytes,4,rep,name=nat_ip_names,json=natIpNames,proto3" json:"nat_ip_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GcpRouterNatSpec) Reset() {
	*x = GcpRouterNatSpec{}
	mi := &file_project_planton_provider_gcp_gcprouternat_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpRouterNatSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpRouterNatSpec) ProtoMessage() {}

func (x *GcpRouterNatSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gcprouternat_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpRouterNatSpec.ProtoReflect.Descriptor instead.
func (*GcpRouterNatSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gcprouternat_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *GcpRouterNatSpec) GetVpcSelfLink() *v1.StringValueOrRef {
	if x != nil {
		return x.VpcSelfLink
	}
	return nil
}

func (x *GcpRouterNatSpec) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GcpRouterNatSpec) GetSubnetworkSelfLinks() []*v1.StringValueOrRef {
	if x != nil {
		return x.SubnetworkSelfLinks
	}
	return nil
}

func (x *GcpRouterNatSpec) GetNatIpNames() []*v1.StringValueOrRef {
	if x != nil {
		return x.NatIpNames
	}
	return nil
}

var File_project_planton_provider_gcp_gcprouternat_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_gcp_gcprouternat_v1_spec_proto_rawDesc = "" +
	"\n" +
	"7project/planton/provider/gcp/gcprouternat/v1/spec.proto\x12,project.planton.provider.gcp.gcprouternat.v1\x1a\x1bbuf/validate/validate.proto\x1a6project/planton/shared/foreignkey/v1/foreign_key.proto\"\x86\x03\n" +
	"\x10GcpRouterNatSpec\x12\x8b\x01\n" +
	"\rvpc_self_link\x18\x01 \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB/\xbaH\x03\xc8\x01\x01\x88\xd4a\xe4\x04\x92\xd4a status.outputs.network_self_linkR\vvpcSelfLink\x12\x1e\n" +
	"\x06region\x18\x02 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x06region\x12j\n" +
	"\x15subnetwork_self_links\x18\x03 \x03(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefR\x13subnetworkSelfLinks\x12X\n" +
	"\fnat_ip_names\x18\x04 \x03(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefR\n" +
	"natIpNamesB\x81\x03\n" +
	"0com.project.planton.provider.gcp.gcprouternat.v1B\tSpecProtoP\x01Zkgithub.com/project-planton/project-planton/apis/project/planton/provider/gcp/gcprouternat/v1;gcprouternatv1\xa2\x02\x05PPPGG\xaa\x02,Project.Planton.Provider.Gcp.Gcprouternat.V1\xca\x02,Project\\Planton\\Provider\\Gcp\\Gcprouternat\\V1\xe2\x028Project\\Planton\\Provider\\Gcp\\Gcprouternat\\V1\\GPBMetadata\xea\x021Project::Planton::Provider::Gcp::Gcprouternat::V1b\x06proto3"

var (
	file_project_planton_provider_gcp_gcprouternat_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_gcp_gcprouternat_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_gcp_gcprouternat_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_gcp_gcprouternat_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_gcp_gcprouternat_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_gcp_gcprouternat_v1_spec_proto_rawDesc), len(file_project_planton_provider_gcp_gcprouternat_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_gcp_gcprouternat_v1_spec_proto_rawDescData
}

var file_project_planton_provider_gcp_gcprouternat_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_provider_gcp_gcprouternat_v1_spec_proto_goTypes = []any{
	(*GcpRouterNatSpec)(nil),    // 0: project.planton.provider.gcp.gcprouternat.v1.GcpRouterNatSpec
	(*v1.StringValueOrRef)(nil), // 1: project.planton.shared.foreignkey.v1.StringValueOrRef
}
var file_project_planton_provider_gcp_gcprouternat_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.gcp.gcprouternat.v1.GcpRouterNatSpec.vpc_self_link:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	1, // 1: project.planton.provider.gcp.gcprouternat.v1.GcpRouterNatSpec.subnetwork_self_links:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	1, // 2: project.planton.provider.gcp.gcprouternat.v1.GcpRouterNatSpec.nat_ip_names:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_project_planton_provider_gcp_gcprouternat_v1_spec_proto_init() }
func file_project_planton_provider_gcp_gcprouternat_v1_spec_proto_init() {
	if File_project_planton_provider_gcp_gcprouternat_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_gcp_gcprouternat_v1_spec_proto_rawDesc), len(file_project_planton_provider_gcp_gcprouternat_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_gcp_gcprouternat_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_gcp_gcprouternat_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_gcp_gcprouternat_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_gcp_gcprouternat_v1_spec_proto = out.File
	file_project_planton_provider_gcp_gcprouternat_v1_spec_proto_goTypes = nil
	file_project_planton_provider_gcp_gcprouternat_v1_spec_proto_depIdxs = nil
}
