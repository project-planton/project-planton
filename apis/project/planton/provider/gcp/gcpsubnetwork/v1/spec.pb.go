// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/gcp/gcpsubnetwork/v1/spec.proto

package gcpsubnetworkv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/project-planton/project-planton/apis/project/planton/shared/foreignkey/v1"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GcpSubnetworkSpec defines the user-provided settings for a GCP Subnetwork (custom mode).
type GcpSubnetworkSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The GCP project ID in which to create this subnetwork.
	ProjectId *v1.StringValueOrRef `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Reference to the parent VPC network (must be an existing GcpVpc).
	// This should point to the VPC's selfLink for the network:contentReference[oaicite:8]{index=8}.
	VpcSelfLink *v1.StringValueOrRef `protobuf:"bytes,2,opt,name=vpc_self_link,json=vpcSelfLink,proto3" json:"vpc_self_link,omitempty"`
	// Region in which to create this subnet (e.g. "us-west1").
	// Must be a valid GCP region code (ends with a digit) and cannot be changed after creation.
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// Primary IPv4 CIDR range for the subnet. Example: "10.0.0.0/16".
	// Must be unique and non-overlapping within the VPC. Only IPv4 ranges are supported:contentReference[oaicite:9]{index=9}.
	IpCidrRange string `protobuf:"bytes,4,opt,name=ip_cidr_range,json=ipCidrRange,proto3" json:"ip_cidr_range,omitempty"`
	// Secondary IP ranges for alias IPs (e.g., for GKE Pod or Service IPs). Optional.
	// Each secondary range has a name (1-63 chars, lowercase alphanumeric or '-') and an IPv4 CIDR.
	// Up to 170 secondary ranges can be defined per subnet:contentReference[oaicite:10]{index=10} (typical usage is one or two).
	SecondaryIpRanges []*GcpSubnetworkSecondaryRange `protobuf:"bytes,5,rep,name=secondary_ip_ranges,json=secondaryIpRanges,proto3" json:"secondary_ip_ranges,omitempty"`
	// Whether to enable Private Google Access on this subnet.
	// If true, VMs without external IPs in this subnet can access Google APIs internally:contentReference[oaicite:11]{index=11}.
	PrivateIpGoogleAccess bool `protobuf:"varint,6,opt,name=private_ip_google_access,json=privateIpGoogleAccess,proto3" json:"private_ip_google_access,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GcpSubnetworkSpec) Reset() {
	*x = GcpSubnetworkSpec{}
	mi := &file_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpSubnetworkSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpSubnetworkSpec) ProtoMessage() {}

func (x *GcpSubnetworkSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpSubnetworkSpec.ProtoReflect.Descriptor instead.
func (*GcpSubnetworkSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *GcpSubnetworkSpec) GetProjectId() *v1.StringValueOrRef {
	if x != nil {
		return x.ProjectId
	}
	return nil
}

func (x *GcpSubnetworkSpec) GetVpcSelfLink() *v1.StringValueOrRef {
	if x != nil {
		return x.VpcSelfLink
	}
	return nil
}

func (x *GcpSubnetworkSpec) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GcpSubnetworkSpec) GetIpCidrRange() string {
	if x != nil {
		return x.IpCidrRange
	}
	return ""
}

func (x *GcpSubnetworkSpec) GetSecondaryIpRanges() []*GcpSubnetworkSecondaryRange {
	if x != nil {
		return x.SecondaryIpRanges
	}
	return nil
}

func (x *GcpSubnetworkSpec) GetPrivateIpGoogleAccess() bool {
	if x != nil {
		return x.PrivateIpGoogleAccess
	}
	return false
}

// Define the structure for a secondary IP range.
type GcpSubnetworkSecondaryRange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name for this secondary range (unique within the subnet).
	// 1-63 characters, must start with a letter and end with a letter or digit (RFC1035):contentReference[oaicite:12]{index=12}.
	RangeName string `protobuf:"bytes,1,opt,name=range_name,json=rangeName,proto3" json:"range_name,omitempty"`
	// The IPv4 CIDR for this secondary range (non-overlapping within the VPC).
	IpCidrRange   string `protobuf:"bytes,2,opt,name=ip_cidr_range,json=ipCidrRange,proto3" json:"ip_cidr_range,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GcpSubnetworkSecondaryRange) Reset() {
	*x = GcpSubnetworkSecondaryRange{}
	mi := &file_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpSubnetworkSecondaryRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpSubnetworkSecondaryRange) ProtoMessage() {}

func (x *GcpSubnetworkSecondaryRange) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpSubnetworkSecondaryRange.ProtoReflect.Descriptor instead.
func (*GcpSubnetworkSecondaryRange) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *GcpSubnetworkSecondaryRange) GetRangeName() string {
	if x != nil {
		return x.RangeName
	}
	return ""
}

func (x *GcpSubnetworkSecondaryRange) GetIpCidrRange() string {
	if x != nil {
		return x.IpCidrRange
	}
	return ""
}

var File_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto_rawDesc = "" +
	"\n" +
	"8project/planton/provider/gcp/gcpsubnetwork/v1/spec.proto\x12-project.planton.provider.gcp.gcpsubnetwork.v1\x1a\x1bbuf/validate/validate.proto\x1a,project/planton/shared/options/options.proto\x1a6project/planton/shared/foreignkey/v1/foreign_key.proto\"\xdf\x04\n" +
	"\x11GcpSubnetworkSpec\x12\x7f\n" +
	"\n" +
	"project_id\x18\x01 \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB(\xbaH\x03\xc8\x01\x01\x88\xd4a\xe3\x04\x92\xd4a\x19status.outputs.project_idR\tprojectId\x12\x8b\x01\n" +
	"\rvpc_self_link\x18\x02 \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB/\xbaH\x03\xc8\x01\x01\x88\xd4a\xe4\x04\x92\xd4a status.outputs.network_self_linkR\vvpcSelfLink\x12>\n" +
	"\x06region\x18\x03 \x01(\tB&\xbaH#\xc8\x01\x01r\x1e2\x1c^[a-z]([-a-z0-9]*[a-z0-9])?$R\x06region\x12F\n" +
	"\rip_cidr_range\x18\x04 \x01(\tB\"\xbaH\x1f\xc8\x01\x01r\x1a2\x18^\\d+\\.\\d+\\.\\d+\\.\\d+/\\d+$R\vipCidrRange\x12z\n" +
	"\x13secondary_ip_ranges\x18\x05 \x03(\v2J.project.planton.provider.gcp.gcpsubnetwork.v1.GcpSubnetworkSecondaryRangeR\x11secondaryIpRanges\x127\n" +
	"\x18private_ip_google_access\x18\x06 \x01(\bR\x15privateIpGoogleAccess\"\xb0\x01\n" +
	"\x1bGcpSubnetworkSecondaryRange\x12I\n" +
	"\n" +
	"range_name\x18\x01 \x01(\tB*\xbaH'\xc8\x01\x01r\"\x10\x01\x18?2\x1c^[a-z]([-a-z0-9]*[a-z0-9])?$R\trangeName\x12F\n" +
	"\rip_cidr_range\x18\x02 \x01(\tB\"\xbaH\x1f\xc8\x01\x01r\x1a2\x18^\\d+\\.\\d+\\.\\d+\\.\\d+/\\d+$R\vipCidrRangeB\x88\x03\n" +
	"1com.project.planton.provider.gcp.gcpsubnetwork.v1B\tSpecProtoP\x01Zmgithub.com/project-planton/project-planton/apis/project/planton/provider/gcp/gcpsubnetwork/v1;gcpsubnetworkv1\xa2\x02\x05PPPGG\xaa\x02-Project.Planton.Provider.Gcp.Gcpsubnetwork.V1\xca\x02-Project\\Planton\\Provider\\Gcp\\Gcpsubnetwork\\V1\xe2\x029Project\\Planton\\Provider\\Gcp\\Gcpsubnetwork\\V1\\GPBMetadata\xea\x022Project::Planton::Provider::Gcp::Gcpsubnetwork::V1b\x06proto3"

var (
	file_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto_rawDesc), len(file_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto_rawDescData
}

var file_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto_goTypes = []any{
	(*GcpSubnetworkSpec)(nil),           // 0: project.planton.provider.gcp.gcpsubnetwork.v1.GcpSubnetworkSpec
	(*GcpSubnetworkSecondaryRange)(nil), // 1: project.planton.provider.gcp.gcpsubnetwork.v1.GcpSubnetworkSecondaryRange
	(*v1.StringValueOrRef)(nil),         // 2: project.planton.shared.foreignkey.v1.StringValueOrRef
}
var file_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto_depIdxs = []int32{
	2, // 0: project.planton.provider.gcp.gcpsubnetwork.v1.GcpSubnetworkSpec.project_id:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	2, // 1: project.planton.provider.gcp.gcpsubnetwork.v1.GcpSubnetworkSpec.vpc_self_link:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	1, // 2: project.planton.provider.gcp.gcpsubnetwork.v1.GcpSubnetworkSpec.secondary_ip_ranges:type_name -> project.planton.provider.gcp.gcpsubnetwork.v1.GcpSubnetworkSecondaryRange
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto_init() }
func file_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto_init() {
	if File_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto_rawDesc), len(file_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto = out.File
	file_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto_goTypes = nil
	file_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto_depIdxs = nil
}
