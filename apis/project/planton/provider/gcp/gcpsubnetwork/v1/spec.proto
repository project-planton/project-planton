syntax = "proto3";

package project.planton.provider.gcp.gcpsubnetwork.v1;

import "buf/validate/validate.proto";
import "project/planton/shared/foreignkey/v1/foreign_key.proto";

// GcpSubnetworkSpec defines the user-provided settings for a GCP Subnetwork (custom mode).
message GcpSubnetworkSpec {
  // The GCP project ID in which to create this subnetwork.
  project.planton.shared.foreignkey.v1.StringValueOrRef project_id = 1 [
    (buf.validate.field).required = true,
    (project.planton.shared.foreignkey.v1.default_kind) = GcpProject,
    (project.planton.shared.foreignkey.v1.default_kind_field_path) = "status.outputs.project_id"
  ];
  // Reference to the parent VPC network (must be an existing GcpVpc).
  // This should point to the VPC's selfLink for the network:contentReference[oaicite:8]{index=8}.
  project.planton.shared.foreignkey.v1.StringValueOrRef vpc_self_link = 2 [
    (buf.validate.field).required = true,
    (project.planton.shared.foreignkey.v1.default_kind) = GcpVpc,
    (project.planton.shared.foreignkey.v1.default_kind_field_path) = "status.outputs.network_self_link"
  ];

  // Region in which to create this subnet (e.g. "us-west1").
  // Must be a valid GCP region code (ends with a digit) and cannot be changed after creation.
  string region = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^[a-z]([-a-z0-9]*[a-z0-9])?$" // loosely ensure it's a valid region format (e.g. "us-central1")
  ];

  // Primary IPv4 CIDR range for the subnet. Example: "10.0.0.0/16".
  // Must be unique and non-overlapping within the VPC. Only IPv4 ranges are supported:contentReference[oaicite:9]{index=9}.
  string ip_cidr_range = 4 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^\\d+\\.\\d+\\.\\d+\\.\\d+/\\d+$" // basic IPv4/CIDR format check
  ];

  // Secondary IP ranges for alias IPs (e.g., for GKE Pod or Service IPs). Optional.
  // Each secondary range has a name (1-63 chars, lowercase alphanumeric or '-') and an IPv4 CIDR.
  // Up to 170 secondary ranges can be defined per subnet:contentReference[oaicite:10]{index=10} (typical usage is one or two).
  repeated GcpSubnetworkSecondaryRange secondary_ip_ranges = 5;

  // Whether to enable Private Google Access on this subnet.
  // If true, VMs without external IPs in this subnet can access Google APIs internally:contentReference[oaicite:11]{index=11}.
  bool private_ip_google_access = 6;
}

// Define the structure for a secondary IP range.
message GcpSubnetworkSecondaryRange {
  // Name for this secondary range (unique within the subnet).
  // 1-63 characters, must start with a letter and end with a letter or digit (RFC1035):contentReference[oaicite:12]{index=12}.
  string range_name = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^[a-z]([-a-z0-9]*[a-z0-9])?$",
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 63
  ];

  // The IPv4 CIDR for this secondary range (non-overlapping within the VPC).
  string ip_cidr_range = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^\\d+\\.\\d+\\.\\d+\\.\\d+/\\d+$"
  ];
}
