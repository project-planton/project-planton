// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/gcp/gcpsubnetwork/v1/stack_outputs.proto

package gcpsubnetworkv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GcpSubnetworkStackOutputs captures the key outputs after provisioning the subnet.
type GcpSubnetworkStackOutputs struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Self-link URL of the created subnetwork (useful for GKE clusters or other resources that need to reference this subnet).
	SubnetworkSelfLink string `protobuf:"bytes,1,opt,name=subnetwork_self_link,json=subnetworkSelfLink,proto3" json:"subnetwork_self_link,omitempty"`
	// The region where this subnetwork resides (mirrors spec, included for convenience).
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// The primary IPv4 CIDR of the subnet (in dotted notation).
	IpCidrRange string `protobuf:"bytes,3,opt,name=ip_cidr_range,json=ipCidrRange,proto3" json:"ip_cidr_range,omitempty"`
	// List of secondary ranges created in this subnet, with their names and CIDRs.
	SecondaryRanges []*GcpSubnetworkSecondaryRangeStackOutput `protobuf:"bytes,4,rep,name=secondary_ranges,json=secondaryRanges,proto3" json:"secondary_ranges,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GcpSubnetworkStackOutputs) Reset() {
	*x = GcpSubnetworkStackOutputs{}
	mi := &file_project_planton_provider_gcp_gcpsubnetwork_v1_stack_outputs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpSubnetworkStackOutputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpSubnetworkStackOutputs) ProtoMessage() {}

func (x *GcpSubnetworkStackOutputs) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gcpsubnetwork_v1_stack_outputs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpSubnetworkStackOutputs.ProtoReflect.Descriptor instead.
func (*GcpSubnetworkStackOutputs) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gcpsubnetwork_v1_stack_outputs_proto_rawDescGZIP(), []int{0}
}

func (x *GcpSubnetworkStackOutputs) GetSubnetworkSelfLink() string {
	if x != nil {
		return x.SubnetworkSelfLink
	}
	return ""
}

func (x *GcpSubnetworkStackOutputs) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GcpSubnetworkStackOutputs) GetIpCidrRange() string {
	if x != nil {
		return x.IpCidrRange
	}
	return ""
}

func (x *GcpSubnetworkStackOutputs) GetSecondaryRanges() []*GcpSubnetworkSecondaryRangeStackOutput {
	if x != nil {
		return x.SecondaryRanges
	}
	return nil
}

// List of secondary ranges created in this subnet, with their names and CIDRs.
type GcpSubnetworkSecondaryRangeStackOutput struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the secondary range (unique within the subnet).
	RangeName string `protobuf:"bytes,1,opt,name=range_name,json=rangeName,proto3" json:"range_name,omitempty"`
	// The IPv4 CIDR for this secondary range (non-overlapping within the VPC).
	IpCidrRange   string `protobuf:"bytes,2,opt,name=ip_cidr_range,json=ipCidrRange,proto3" json:"ip_cidr_range,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GcpSubnetworkSecondaryRangeStackOutput) Reset() {
	*x = GcpSubnetworkSecondaryRangeStackOutput{}
	mi := &file_project_planton_provider_gcp_gcpsubnetwork_v1_stack_outputs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpSubnetworkSecondaryRangeStackOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpSubnetworkSecondaryRangeStackOutput) ProtoMessage() {}

func (x *GcpSubnetworkSecondaryRangeStackOutput) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gcpsubnetwork_v1_stack_outputs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpSubnetworkSecondaryRangeStackOutput.ProtoReflect.Descriptor instead.
func (*GcpSubnetworkSecondaryRangeStackOutput) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gcpsubnetwork_v1_stack_outputs_proto_rawDescGZIP(), []int{1}
}

func (x *GcpSubnetworkSecondaryRangeStackOutput) GetRangeName() string {
	if x != nil {
		return x.RangeName
	}
	return ""
}

func (x *GcpSubnetworkSecondaryRangeStackOutput) GetIpCidrRange() string {
	if x != nil {
		return x.IpCidrRange
	}
	return ""
}

var File_project_planton_provider_gcp_gcpsubnetwork_v1_stack_outputs_proto protoreflect.FileDescriptor

const file_project_planton_provider_gcp_gcpsubnetwork_v1_stack_outputs_proto_rawDesc = "" +
	"\n" +
	"Aproject/planton/provider/gcp/gcpsubnetwork/v1/stack_outputs.proto\x12-project.planton.provider.gcp.gcpsubnetwork.v1\x1a8project/planton/provider/gcp/gcpsubnetwork/v1/spec.proto\"\x8c\x02\n" +
	"\x19GcpSubnetworkStackOutputs\x120\n" +
	"\x14subnetwork_self_link\x18\x01 \x01(\tR\x12subnetworkSelfLink\x12\x16\n" +
	"\x06region\x18\x02 \x01(\tR\x06region\x12\"\n" +
	"\rip_cidr_range\x18\x03 \x01(\tR\vipCidrRange\x12\x80\x01\n" +
	"\x10secondary_ranges\x18\x04 \x03(\v2U.project.planton.provider.gcp.gcpsubnetwork.v1.GcpSubnetworkSecondaryRangeStackOutputR\x0fsecondaryRanges\"k\n" +
	"&GcpSubnetworkSecondaryRangeStackOutput\x12\x1d\n" +
	"\n" +
	"range_name\x18\x01 \x01(\tR\trangeName\x12\"\n" +
	"\rip_cidr_range\x18\x02 \x01(\tR\vipCidrRangeB\x90\x03\n" +
	"1com.project.planton.provider.gcp.gcpsubnetwork.v1B\x11StackOutputsProtoP\x01Zmgithub.com/project-planton/project-planton/apis/project/planton/provider/gcp/gcpsubnetwork/v1;gcpsubnetworkv1\xa2\x02\x05PPPGG\xaa\x02-Project.Planton.Provider.Gcp.Gcpsubnetwork.V1\xca\x02-Project\\Planton\\Provider\\Gcp\\Gcpsubnetwork\\V1\xe2\x029Project\\Planton\\Provider\\Gcp\\Gcpsubnetwork\\V1\\GPBMetadata\xea\x022Project::Planton::Provider::Gcp::Gcpsubnetwork::V1b\x06proto3"

var (
	file_project_planton_provider_gcp_gcpsubnetwork_v1_stack_outputs_proto_rawDescOnce sync.Once
	file_project_planton_provider_gcp_gcpsubnetwork_v1_stack_outputs_proto_rawDescData []byte
)

func file_project_planton_provider_gcp_gcpsubnetwork_v1_stack_outputs_proto_rawDescGZIP() []byte {
	file_project_planton_provider_gcp_gcpsubnetwork_v1_stack_outputs_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_gcp_gcpsubnetwork_v1_stack_outputs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_gcp_gcpsubnetwork_v1_stack_outputs_proto_rawDesc), len(file_project_planton_provider_gcp_gcpsubnetwork_v1_stack_outputs_proto_rawDesc)))
	})
	return file_project_planton_provider_gcp_gcpsubnetwork_v1_stack_outputs_proto_rawDescData
}

var file_project_planton_provider_gcp_gcpsubnetwork_v1_stack_outputs_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_project_planton_provider_gcp_gcpsubnetwork_v1_stack_outputs_proto_goTypes = []any{
	(*GcpSubnetworkStackOutputs)(nil),              // 0: project.planton.provider.gcp.gcpsubnetwork.v1.GcpSubnetworkStackOutputs
	(*GcpSubnetworkSecondaryRangeStackOutput)(nil), // 1: project.planton.provider.gcp.gcpsubnetwork.v1.GcpSubnetworkSecondaryRangeStackOutput
}
var file_project_planton_provider_gcp_gcpsubnetwork_v1_stack_outputs_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.gcp.gcpsubnetwork.v1.GcpSubnetworkStackOutputs.secondary_ranges:type_name -> project.planton.provider.gcp.gcpsubnetwork.v1.GcpSubnetworkSecondaryRangeStackOutput
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_project_planton_provider_gcp_gcpsubnetwork_v1_stack_outputs_proto_init() }
func file_project_planton_provider_gcp_gcpsubnetwork_v1_stack_outputs_proto_init() {
	if File_project_planton_provider_gcp_gcpsubnetwork_v1_stack_outputs_proto != nil {
		return
	}
	file_project_planton_provider_gcp_gcpsubnetwork_v1_spec_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_gcp_gcpsubnetwork_v1_stack_outputs_proto_rawDesc), len(file_project_planton_provider_gcp_gcpsubnetwork_v1_stack_outputs_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_gcp_gcpsubnetwork_v1_stack_outputs_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_gcp_gcpsubnetwork_v1_stack_outputs_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_gcp_gcpsubnetwork_v1_stack_outputs_proto_msgTypes,
	}.Build()
	File_project_planton_provider_gcp_gcpsubnetwork_v1_stack_outputs_proto = out.File
	file_project_planton_provider_gcp_gcpsubnetwork_v1_stack_outputs_proto_goTypes = nil
	file_project_planton_provider_gcp_gcpsubnetwork_v1_stack_outputs_proto_depIdxs = nil
}
