// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/gcp/gcpgkenodepool/v1/spec.proto

package gcpgkenodepoolv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/project-planton/project-planton/apis/project/planton/shared/foreignkey/v1"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GcpGkeNodePoolSpec defines the configurable settings for a GKE cluster Node Pool.
type GcpGkeNodePoolSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Reference to the parent GKE cluster (by name).
	// Must refer to an existing GcpGkeCluster resource in the same environment.
	ClusterProjectId *v1.StringValueOrRef `protobuf:"bytes,1,opt,name=cluster_project_id,json=clusterProjectId,proto3" json:"cluster_project_id,omitempty"`
	// Reference to the parent GKE cluster (by name).
	// Must refer to an existing GcpGkeCluster resource in the same environment.
	ClusterName *v1.StringValueOrRef `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// Machine type for node VMs (e.g., "e2-medium", "n1-standard-4").
	// If unspecified, defaults to "e2-medium" (2 vCPU, 4 GB RAM).
	MachineType string `protobuf:"bytes,3,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	// Size of boot disk (GB) for each node. Min 10 GB. Defaults to 100 GB if unset.
	// Default 100 implied if not provided (handled in provisioning code or via options.default if supported).
	DiskSizeGb uint32 `protobuf:"varint,4,opt,name=disk_size_gb,json=diskSizeGb,proto3" json:"disk_size_gb,omitempty"`
	// Type of boot disk: "pd-standard", "pd-ssd", or "pd-balanced".
	// Defaults to "pd-standard" for unspecified.
	DiskType string `protobuf:"bytes,5,opt,name=disk_type,json=diskType,proto3" json:"disk_type,omitempty"`
	// Node image type (OS image). Default is "COS_CONTAINERD" (Container-Optimized OS with containerd).
	ImageType string `protobuf:"bytes,6,opt,name=image_type,json=imageType,proto3" json:"image_type,omitempty"`
	// Service account email for nodes. If not provided, the GKE default node service account is used.
	ServiceAccount string `protobuf:"bytes,7,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// Auto-upgrade and Auto-repair settings for node management.
	Management *GcpGkeClusterNodePoolNodeManagement `protobuf:"bytes,8,opt,name=management,proto3" json:"management,omitempty"`
	// Whether to use Spot (preemptible) VMs for this node pool.
	Spot bool `protobuf:"varint,9,opt,name=spot,proto3" json:"spot,omitempty"`
	// Kubernetes labels to apply to all nodes in this pool.
	NodeLabels map[string]string `protobuf:"bytes,10,rep,name=node_labels,json=nodeLabels,proto3" json:"node_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Oneof: either a fixed node count or autoscaling config must be provided.
	//
	// Types that are valid to be assigned to NodePoolSize:
	//
	//	*GcpGkeNodePoolSpec_NodeCount
	//	*GcpGkeNodePoolSpec_Autoscaling
	NodePoolSize  isGcpGkeNodePoolSpec_NodePoolSize `protobuf_oneof:"node_pool_size"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GcpGkeNodePoolSpec) Reset() {
	*x = GcpGkeNodePoolSpec{}
	mi := &file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpGkeNodePoolSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpGkeNodePoolSpec) ProtoMessage() {}

func (x *GcpGkeNodePoolSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpGkeNodePoolSpec.ProtoReflect.Descriptor instead.
func (*GcpGkeNodePoolSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *GcpGkeNodePoolSpec) GetClusterProjectId() *v1.StringValueOrRef {
	if x != nil {
		return x.ClusterProjectId
	}
	return nil
}

func (x *GcpGkeNodePoolSpec) GetClusterName() *v1.StringValueOrRef {
	if x != nil {
		return x.ClusterName
	}
	return nil
}

func (x *GcpGkeNodePoolSpec) GetMachineType() string {
	if x != nil {
		return x.MachineType
	}
	return ""
}

func (x *GcpGkeNodePoolSpec) GetDiskSizeGb() uint32 {
	if x != nil {
		return x.DiskSizeGb
	}
	return 0
}

func (x *GcpGkeNodePoolSpec) GetDiskType() string {
	if x != nil {
		return x.DiskType
	}
	return ""
}

func (x *GcpGkeNodePoolSpec) GetImageType() string {
	if x != nil {
		return x.ImageType
	}
	return ""
}

func (x *GcpGkeNodePoolSpec) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

func (x *GcpGkeNodePoolSpec) GetManagement() *GcpGkeClusterNodePoolNodeManagement {
	if x != nil {
		return x.Management
	}
	return nil
}

func (x *GcpGkeNodePoolSpec) GetSpot() bool {
	if x != nil {
		return x.Spot
	}
	return false
}

func (x *GcpGkeNodePoolSpec) GetNodeLabels() map[string]string {
	if x != nil {
		return x.NodeLabels
	}
	return nil
}

func (x *GcpGkeNodePoolSpec) GetNodePoolSize() isGcpGkeNodePoolSpec_NodePoolSize {
	if x != nil {
		return x.NodePoolSize
	}
	return nil
}

func (x *GcpGkeNodePoolSpec) GetNodeCount() uint32 {
	if x != nil {
		if x, ok := x.NodePoolSize.(*GcpGkeNodePoolSpec_NodeCount); ok {
			return x.NodeCount
		}
	}
	return 0
}

func (x *GcpGkeNodePoolSpec) GetAutoscaling() *GcpGkeNodePoolAutoscaling {
	if x != nil {
		if x, ok := x.NodePoolSize.(*GcpGkeNodePoolSpec_Autoscaling); ok {
			return x.Autoscaling
		}
	}
	return nil
}

type isGcpGkeNodePoolSpec_NodePoolSize interface {
	isGcpGkeNodePoolSpec_NodePoolSize()
}

type GcpGkeNodePoolSpec_NodeCount struct {
	// Fixed number of nodes (no autoscaling).
	NodeCount uint32 `protobuf:"varint,100,opt,name=node_count,json=nodeCount,proto3,oneof"`
}

type GcpGkeNodePoolSpec_Autoscaling struct {
	// Autoscaling config for this node pool.
	Autoscaling *GcpGkeNodePoolAutoscaling `protobuf:"bytes,101,opt,name=autoscaling,proto3,oneof"`
}

func (*GcpGkeNodePoolSpec_NodeCount) isGcpGkeNodePoolSpec_NodePoolSize() {}

func (*GcpGkeNodePoolSpec_Autoscaling) isGcpGkeNodePoolSpec_NodePoolSize() {}

// Nested message for autoscaler settings.
type GcpGkeNodePoolAutoscaling struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Minimum nodes (per zone) when autoscaling. 0 allows scale-to-zero.
	MinNodes uint32 `protobuf:"varint,1,opt,name=min_nodes,json=minNodes,proto3" json:"min_nodes,omitempty"`
	// Maximum nodes (per zone) when autoscaling.
	MaxNodes uint32 `protobuf:"varint,2,opt,name=max_nodes,json=maxNodes,proto3" json:"max_nodes,omitempty"`
	// (Optional) Location policy for scaling ("BALANCED" or "ANY").
	LocationPolicy string `protobuf:"bytes,3,opt,name=location_policy,json=locationPolicy,proto3" json:"location_policy,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GcpGkeNodePoolAutoscaling) Reset() {
	*x = GcpGkeNodePoolAutoscaling{}
	mi := &file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpGkeNodePoolAutoscaling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpGkeNodePoolAutoscaling) ProtoMessage() {}

func (x *GcpGkeNodePoolAutoscaling) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpGkeNodePoolAutoscaling.ProtoReflect.Descriptor instead.
func (*GcpGkeNodePoolAutoscaling) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *GcpGkeNodePoolAutoscaling) GetMinNodes() uint32 {
	if x != nil {
		return x.MinNodes
	}
	return 0
}

func (x *GcpGkeNodePoolAutoscaling) GetMaxNodes() uint32 {
	if x != nil {
		return x.MaxNodes
	}
	return 0
}

func (x *GcpGkeNodePoolAutoscaling) GetLocationPolicy() string {
	if x != nil {
		return x.LocationPolicy
	}
	return ""
}

// Node management settings for auto-upgrade/repair.
type GcpGkeClusterNodePoolNodeManagement struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether to enable automatic upgrades for nodes in this pool.
	DisableAutoUpgrade bool `protobuf:"varint,1,opt,name=disable_auto_upgrade,json=disableAutoUpgrade,proto3" json:"disable_auto_upgrade,omitempty"`
	// Whether to enable automatic repair of unhealthy nodes in this pool.
	DisableAutoRepair bool `protobuf:"varint,2,opt,name=disable_auto_repair,json=disableAutoRepair,proto3" json:"disable_auto_repair,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GcpGkeClusterNodePoolNodeManagement) Reset() {
	*x = GcpGkeClusterNodePoolNodeManagement{}
	mi := &file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpGkeClusterNodePoolNodeManagement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpGkeClusterNodePoolNodeManagement) ProtoMessage() {}

func (x *GcpGkeClusterNodePoolNodeManagement) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpGkeClusterNodePoolNodeManagement.ProtoReflect.Descriptor instead.
func (*GcpGkeClusterNodePoolNodeManagement) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *GcpGkeClusterNodePoolNodeManagement) GetDisableAutoUpgrade() bool {
	if x != nil {
		return x.DisableAutoUpgrade
	}
	return false
}

func (x *GcpGkeClusterNodePoolNodeManagement) GetDisableAutoRepair() bool {
	if x != nil {
		return x.DisableAutoRepair
	}
	return false
}

var File_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_rawDesc = "" +
	"\n" +
	"9project/planton/provider/gcp/gcpgkenodepool/v1/spec.proto\x12.project.planton.provider.gcp.gcpgkenodepool.v1\x1a\x1bbuf/validate/validate.proto\x1a6project/planton/shared/foreignkey/v1/foreign_key.proto\x1a,project/planton/shared/options/options.proto\"\x80\b\n" +
	"\x12GcpGkeNodePoolSpec\x12\x84\x01\n" +
	"\x12cluster_project_id\x18\x01 \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB\x1e\xbaH\x03\xc8\x01\x01\x88\xd4a\xe7\x04\x92\xd4a\x0fspec.project_idR\x10clusterProjectId\x12w\n" +
	"\fcluster_name\x18\x02 \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB\x1c\xbaH\x03\xc8\x01\x01\x88\xd4a\xe7\x04\x92\xd4a\rmetadata.nameR\vclusterName\x120\n" +
	"\fmachine_type\x18\x03 \x01(\tB\r\x8a\xa6\x1d\te2-mediumR\vmachineType\x12 \n" +
	"\fdisk_size_gb\x18\x04 \x01(\rR\n" +
	"diskSizeGb\x12S\n" +
	"\tdisk_type\x18\x05 \x01(\tB6\xbaH$r\"R\vpd-standardR\x06pd-ssdR\vpd-balanced\x8a\xa6\x1d\vpd-standardR\bdiskType\x121\n" +
	"\n" +
	"image_type\x18\x06 \x01(\tB\x12\x8a\xa6\x1d\x0eCOS_CONTAINERDR\timageType\x12'\n" +
	"\x0fservice_account\x18\a \x01(\tR\x0eserviceAccount\x12{\n" +
	"\n" +
	"management\x18\b \x01(\v2S.project.planton.provider.gcp.gcpgkenodepool.v1.GcpGkeClusterNodePoolNodeManagementB\x06\xbaH\x03\xc8\x01\x00R\n" +
	"management\x12\x12\n" +
	"\x04spot\x18\t \x01(\bR\x04spot\x12s\n" +
	"\vnode_labels\x18\n" +
	" \x03(\v2R.project.planton.provider.gcp.gcpgkenodepool.v1.GcpGkeNodePoolSpec.NodeLabelsEntryR\n" +
	"nodeLabels\x12\x1f\n" +
	"\n" +
	"node_count\x18d \x01(\rH\x00R\tnodeCount\x12m\n" +
	"\vautoscaling\x18e \x01(\v2I.project.planton.provider.gcp.gcpgkenodepool.v1.GcpGkeNodePoolAutoscalingH\x00R\vautoscaling\x1a=\n" +
	"\x0fNodeLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x10\n" +
	"\x0enode_pool_size\"\x8c\x01\n" +
	"\x19GcpGkeNodePoolAutoscaling\x12\x1b\n" +
	"\tmin_nodes\x18\x01 \x01(\rR\bminNodes\x12\x1b\n" +
	"\tmax_nodes\x18\x02 \x01(\rR\bmaxNodes\x125\n" +
	"\x0flocation_policy\x18\x03 \x01(\tB\f\x8a\xa6\x1d\bBALANCEDR\x0elocationPolicy\"\x87\x01\n" +
	"#GcpGkeClusterNodePoolNodeManagement\x120\n" +
	"\x14disable_auto_upgrade\x18\x01 \x01(\bR\x12disableAutoUpgrade\x12.\n" +
	"\x13disable_auto_repair\x18\x02 \x01(\bR\x11disableAutoRepairB\x8f\x03\n" +
	"2com.project.planton.provider.gcp.gcpgkenodepool.v1B\tSpecProtoP\x01Zogithub.com/project-planton/project-planton/apis/project/planton/provider/gcp/gcpgkenodepool/v1;gcpgkenodepoolv1\xa2\x02\x05PPPGG\xaa\x02.Project.Planton.Provider.Gcp.Gcpgkenodepool.V1\xca\x02.Project\\Planton\\Provider\\Gcp\\Gcpgkenodepool\\V1\xe2\x02:Project\\Planton\\Provider\\Gcp\\Gcpgkenodepool\\V1\\GPBMetadata\xea\x023Project::Planton::Provider::Gcp::Gcpgkenodepool::V1b\x06proto3"

var (
	file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_rawDesc), len(file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_rawDescData
}

var file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_goTypes = []any{
	(*GcpGkeNodePoolSpec)(nil),                  // 0: project.planton.provider.gcp.gcpgkenodepool.v1.GcpGkeNodePoolSpec
	(*GcpGkeNodePoolAutoscaling)(nil),           // 1: project.planton.provider.gcp.gcpgkenodepool.v1.GcpGkeNodePoolAutoscaling
	(*GcpGkeClusterNodePoolNodeManagement)(nil), // 2: project.planton.provider.gcp.gcpgkenodepool.v1.GcpGkeClusterNodePoolNodeManagement
	nil,                         // 3: project.planton.provider.gcp.gcpgkenodepool.v1.GcpGkeNodePoolSpec.NodeLabelsEntry
	(*v1.StringValueOrRef)(nil), // 4: project.planton.shared.foreignkey.v1.StringValueOrRef
}
var file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_depIdxs = []int32{
	4, // 0: project.planton.provider.gcp.gcpgkenodepool.v1.GcpGkeNodePoolSpec.cluster_project_id:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	4, // 1: project.planton.provider.gcp.gcpgkenodepool.v1.GcpGkeNodePoolSpec.cluster_name:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	2, // 2: project.planton.provider.gcp.gcpgkenodepool.v1.GcpGkeNodePoolSpec.management:type_name -> project.planton.provider.gcp.gcpgkenodepool.v1.GcpGkeClusterNodePoolNodeManagement
	3, // 3: project.planton.provider.gcp.gcpgkenodepool.v1.GcpGkeNodePoolSpec.node_labels:type_name -> project.planton.provider.gcp.gcpgkenodepool.v1.GcpGkeNodePoolSpec.NodeLabelsEntry
	1, // 4: project.planton.provider.gcp.gcpgkenodepool.v1.GcpGkeNodePoolSpec.autoscaling:type_name -> project.planton.provider.gcp.gcpgkenodepool.v1.GcpGkeNodePoolAutoscaling
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_init() }
func file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_init() {
	if File_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto != nil {
		return
	}
	file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_msgTypes[0].OneofWrappers = []any{
		(*GcpGkeNodePoolSpec_NodeCount)(nil),
		(*GcpGkeNodePoolSpec_Autoscaling)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_rawDesc), len(file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto = out.File
	file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_goTypes = nil
	file_project_planton_provider_gcp_gcpgkenodepool_v1_spec_proto_depIdxs = nil
}
