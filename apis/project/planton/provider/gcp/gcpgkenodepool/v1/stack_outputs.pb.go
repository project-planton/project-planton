// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/gcp/gcpgkenodepool/v1/stack_outputs.proto

package gcpgkenodepoolv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Outputs produced after creating/updating a GKE Node Pool.
type GcpGkeNodePoolStackOutputs struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the node pool in GKE (usually same as metadata.name of the resource).
	NodePoolName string `protobuf:"bytes,1,opt,name=node_pool_name,json=nodePoolName,proto3" json:"node_pool_name,omitempty"`
	// URLs of the Compute Instance Group(s) backing this node pool.
	// For regional clusters, there is one managed instance group per zone.
	InstanceGroupUrls []string `protobuf:"bytes,2,rep,name=instance_group_urls,json=instanceGroupUrls,proto3" json:"instance_group_urls,omitempty"`
	// Effective minimum and maximum size of the node pool (for autoscaling).
	MinNodes uint32 `protobuf:"varint,3,opt,name=min_nodes,json=minNodes,proto3" json:"min_nodes,omitempty"`
	MaxNodes uint32 `protobuf:"varint,4,opt,name=max_nodes,json=maxNodes,proto3" json:"max_nodes,omitempty"`
	// Current number of nodes in this pool.
	CurrentNodeCount uint32 `protobuf:"varint,5,opt,name=current_node_count,json=currentNodeCount,proto3" json:"current_node_count,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GcpGkeNodePoolStackOutputs) Reset() {
	*x = GcpGkeNodePoolStackOutputs{}
	mi := &file_project_planton_provider_gcp_gcpgkenodepool_v1_stack_outputs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpGkeNodePoolStackOutputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpGkeNodePoolStackOutputs) ProtoMessage() {}

func (x *GcpGkeNodePoolStackOutputs) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gcpgkenodepool_v1_stack_outputs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpGkeNodePoolStackOutputs.ProtoReflect.Descriptor instead.
func (*GcpGkeNodePoolStackOutputs) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gcpgkenodepool_v1_stack_outputs_proto_rawDescGZIP(), []int{0}
}

func (x *GcpGkeNodePoolStackOutputs) GetNodePoolName() string {
	if x != nil {
		return x.NodePoolName
	}
	return ""
}

func (x *GcpGkeNodePoolStackOutputs) GetInstanceGroupUrls() []string {
	if x != nil {
		return x.InstanceGroupUrls
	}
	return nil
}

func (x *GcpGkeNodePoolStackOutputs) GetMinNodes() uint32 {
	if x != nil {
		return x.MinNodes
	}
	return 0
}

func (x *GcpGkeNodePoolStackOutputs) GetMaxNodes() uint32 {
	if x != nil {
		return x.MaxNodes
	}
	return 0
}

func (x *GcpGkeNodePoolStackOutputs) GetCurrentNodeCount() uint32 {
	if x != nil {
		return x.CurrentNodeCount
	}
	return 0
}

var File_project_planton_provider_gcp_gcpgkenodepool_v1_stack_outputs_proto protoreflect.FileDescriptor

const file_project_planton_provider_gcp_gcpgkenodepool_v1_stack_outputs_proto_rawDesc = "" +
	"\n" +
	"Bproject/planton/provider/gcp/gcpgkenodepool/v1/stack_outputs.proto\x12.project.planton.provider.gcp.gcpgkenodepool.v1\"\xda\x01\n" +
	"\x1aGcpGkeNodePoolStackOutputs\x12$\n" +
	"\x0enode_pool_name\x18\x01 \x01(\tR\fnodePoolName\x12.\n" +
	"\x13instance_group_urls\x18\x02 \x03(\tR\x11instanceGroupUrls\x12\x1b\n" +
	"\tmin_nodes\x18\x03 \x01(\rR\bminNodes\x12\x1b\n" +
	"\tmax_nodes\x18\x04 \x01(\rR\bmaxNodes\x12,\n" +
	"\x12current_node_count\x18\x05 \x01(\rR\x10currentNodeCountB\x97\x03\n" +
	"2com.project.planton.provider.gcp.gcpgkenodepool.v1B\x11StackOutputsProtoP\x01Zogithub.com/project-planton/project-planton/apis/project/planton/provider/gcp/gcpgkenodepool/v1;gcpgkenodepoolv1\xa2\x02\x05PPPGG\xaa\x02.Project.Planton.Provider.Gcp.Gcpgkenodepool.V1\xca\x02.Project\\Planton\\Provider\\Gcp\\Gcpgkenodepool\\V1\xe2\x02:Project\\Planton\\Provider\\Gcp\\Gcpgkenodepool\\V1\\GPBMetadata\xea\x023Project::Planton::Provider::Gcp::Gcpgkenodepool::V1b\x06proto3"

var (
	file_project_planton_provider_gcp_gcpgkenodepool_v1_stack_outputs_proto_rawDescOnce sync.Once
	file_project_planton_provider_gcp_gcpgkenodepool_v1_stack_outputs_proto_rawDescData []byte
)

func file_project_planton_provider_gcp_gcpgkenodepool_v1_stack_outputs_proto_rawDescGZIP() []byte {
	file_project_planton_provider_gcp_gcpgkenodepool_v1_stack_outputs_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_gcp_gcpgkenodepool_v1_stack_outputs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_gcp_gcpgkenodepool_v1_stack_outputs_proto_rawDesc), len(file_project_planton_provider_gcp_gcpgkenodepool_v1_stack_outputs_proto_rawDesc)))
	})
	return file_project_planton_provider_gcp_gcpgkenodepool_v1_stack_outputs_proto_rawDescData
}

var file_project_planton_provider_gcp_gcpgkenodepool_v1_stack_outputs_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_provider_gcp_gcpgkenodepool_v1_stack_outputs_proto_goTypes = []any{
	(*GcpGkeNodePoolStackOutputs)(nil), // 0: project.planton.provider.gcp.gcpgkenodepool.v1.GcpGkeNodePoolStackOutputs
}
var file_project_planton_provider_gcp_gcpgkenodepool_v1_stack_outputs_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_project_planton_provider_gcp_gcpgkenodepool_v1_stack_outputs_proto_init() }
func file_project_planton_provider_gcp_gcpgkenodepool_v1_stack_outputs_proto_init() {
	if File_project_planton_provider_gcp_gcpgkenodepool_v1_stack_outputs_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_gcp_gcpgkenodepool_v1_stack_outputs_proto_rawDesc), len(file_project_planton_provider_gcp_gcpgkenodepool_v1_stack_outputs_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_gcp_gcpgkenodepool_v1_stack_outputs_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_gcp_gcpgkenodepool_v1_stack_outputs_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_gcp_gcpgkenodepool_v1_stack_outputs_proto_msgTypes,
	}.Build()
	File_project_planton_provider_gcp_gcpgkenodepool_v1_stack_outputs_proto = out.File
	file_project_planton_provider_gcp_gcpgkenodepool_v1_stack_outputs_proto_goTypes = nil
	file_project_planton_provider_gcp_gcpgkenodepool_v1_stack_outputs_proto_depIdxs = nil
}
