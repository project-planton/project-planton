// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/gcp/gcpdnszone/v1/spec.proto

package gcpdnszonev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	dnsrecordtype "github.com/project-planton/project-planton/apis/project/planton/shared/networking/enums/dnsrecordtype"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// **GcpDnsZoneSpec** defines the configuration for creating a Google Cloud DNS Managed Zone.
// This message specifies the parameters needed to create and manage a DNS zone within a specified GCP project.
// It includes the project ID, optional service accounts for IAM permissions, and DNS records to be added to the zone.
type GcpDnsZoneSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the GCP project where the Managed Zone is created.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// An optional list of GCP service accounts that are granted permissions to manage DNS records in the Managed Zone.
	// These accounts are typically workload identities, such as those used by cert-manager,
	// and are added when new environments are created or updated.
	IamServiceAccounts []string `protobuf:"bytes,2,rep,name=iam_service_accounts,json=iamServiceAccounts,proto3" json:"iam_service_accounts,omitempty"`
	// The DNS records to be added to the Managed Zone.
	Records       []*GcpDnsRecord `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GcpDnsZoneSpec) Reset() {
	*x = GcpDnsZoneSpec{}
	mi := &file_project_planton_provider_gcp_gcpdnszone_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpDnsZoneSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpDnsZoneSpec) ProtoMessage() {}

func (x *GcpDnsZoneSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gcpdnszone_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpDnsZoneSpec.ProtoReflect.Descriptor instead.
func (*GcpDnsZoneSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gcpdnszone_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *GcpDnsZoneSpec) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GcpDnsZoneSpec) GetIamServiceAccounts() []string {
	if x != nil {
		return x.IamServiceAccounts
	}
	return nil
}

func (x *GcpDnsZoneSpec) GetRecords() []*GcpDnsRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

// **GcpDnsRecord** represents a DNS record to be added to the Managed Zone.
// It includes the record type, name, values, and TTL (Time To Live) settings.
type GcpDnsRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The DNS record type (e.g., A, AAAA, CNAME).
	RecordType dnsrecordtype.DnsRecordType `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3,enum=project.planton.shared.networking.enums.dnsrecordtype.DnsRecordType" json:"record_type,omitempty"`
	// The name of the DNS record (e.g., "example.com." or "dev.example.com.").
	// This value should always end with a dot to signify a fully qualified domain name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The list of values for the DNS record.
	// If the record type is CNAME, each value in the list should end with a dot.
	Values []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	// The Time To Live (TTL) for the DNS record, in seconds.
	TtlSeconds    *int32 `protobuf:"varint,4,opt,name=ttl_seconds,json=ttlSeconds,proto3,oneof" json:"ttl_seconds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GcpDnsRecord) Reset() {
	*x = GcpDnsRecord{}
	mi := &file_project_planton_provider_gcp_gcpdnszone_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpDnsRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpDnsRecord) ProtoMessage() {}

func (x *GcpDnsRecord) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gcpdnszone_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpDnsRecord.ProtoReflect.Descriptor instead.
func (*GcpDnsRecord) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gcpdnszone_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *GcpDnsRecord) GetRecordType() dnsrecordtype.DnsRecordType {
	if x != nil {
		return x.RecordType
	}
	return dnsrecordtype.DnsRecordType(0)
}

func (x *GcpDnsRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GcpDnsRecord) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *GcpDnsRecord) GetTtlSeconds() int32 {
	if x != nil && x.TtlSeconds != nil {
		return *x.TtlSeconds
	}
	return 0
}

var File_project_planton_provider_gcp_gcpdnszone_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_gcp_gcpdnszone_v1_spec_proto_rawDesc = "" +
	"\n" +
	"5project/planton/provider/gcp/gcpdnszone/v1/spec.proto\x12*project.planton.provider.gcp.gcpdnszone.v1\x1a\x1bbuf/validate/validate.proto\x1aKproject/planton/shared/networking/enums/dnsrecordtype/dns_record_type.proto\x1a,project/planton/shared/options/options.proto\"\xbd\x01\n" +
	"\x0eGcpDnsZoneSpec\x12%\n" +
	"\n" +
	"project_id\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\tprojectId\x120\n" +
	"\x14iam_service_accounts\x18\x02 \x03(\tR\x12iamServiceAccounts\x12R\n" +
	"\arecords\x18\x03 \x03(\v28.project.planton.provider.gcp.gcpdnszone.v1.GcpDnsRecordR\arecords\"\xa3\x03\n" +
	"\fGcpDnsRecord\x12m\n" +
	"\vrecord_type\x18\x01 \x01(\x0e2D.project.planton.shared.networking.enums.dnsrecordtype.DnsRecordTypeB\x06\xbaH\x03\xc8\x01\x01R\n" +
	"recordType\x12\xc3\x01\n" +
	"\x04name\x18\x02 \x01(\tB\xae\x01\xbaH\xaa\x01\xba\x01\xa3\x01\n" +
	"\x04name\x12(Name should be any valid DNS Domain Name\x1aqthis.matches('^(?:[*][.])?(?:[_a-z0-9](?:[_a-z0-9-]{0,61}[a-z0-9])?[.])+(?:[a-z](?:[a-z0-9-]{0,61}[a-z0-9])?)?$')\xc8\x01\x01R\x04name\x12 \n" +
	"\x06values\x18\x03 \x03(\tB\b\xbaH\x05\x92\x01\x02\b\x01R\x06values\x12,\n" +
	"\vttl_seconds\x18\x04 \x01(\x05B\x06\x8a\xa6\x1d\x0260H\x00R\n" +
	"ttlSeconds\x88\x01\x01B\x0e\n" +
	"\f_ttl_secondsB\xf3\x02\n" +
	".com.project.planton.provider.gcp.gcpdnszone.v1B\tSpecProtoP\x01Zggithub.com/project-planton/project-planton/apis/project/planton/provider/gcp/gcpdnszone/v1;gcpdnszonev1\xa2\x02\x05PPPGG\xaa\x02*Project.Planton.Provider.Gcp.Gcpdnszone.V1\xca\x02*Project\\Planton\\Provider\\Gcp\\Gcpdnszone\\V1\xe2\x026Project\\Planton\\Provider\\Gcp\\Gcpdnszone\\V1\\GPBMetadata\xea\x02/Project::Planton::Provider::Gcp::Gcpdnszone::V1b\x06proto3"

var (
	file_project_planton_provider_gcp_gcpdnszone_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_gcp_gcpdnszone_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_gcp_gcpdnszone_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_gcp_gcpdnszone_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_gcp_gcpdnszone_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_gcp_gcpdnszone_v1_spec_proto_rawDesc), len(file_project_planton_provider_gcp_gcpdnszone_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_gcp_gcpdnszone_v1_spec_proto_rawDescData
}

var file_project_planton_provider_gcp_gcpdnszone_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_project_planton_provider_gcp_gcpdnszone_v1_spec_proto_goTypes = []any{
	(*GcpDnsZoneSpec)(nil),           // 0: project.planton.provider.gcp.gcpdnszone.v1.GcpDnsZoneSpec
	(*GcpDnsRecord)(nil),             // 1: project.planton.provider.gcp.gcpdnszone.v1.GcpDnsRecord
	(dnsrecordtype.DnsRecordType)(0), // 2: project.planton.shared.networking.enums.dnsrecordtype.DnsRecordType
}
var file_project_planton_provider_gcp_gcpdnszone_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.gcp.gcpdnszone.v1.GcpDnsZoneSpec.records:type_name -> project.planton.provider.gcp.gcpdnszone.v1.GcpDnsRecord
	2, // 1: project.planton.provider.gcp.gcpdnszone.v1.GcpDnsRecord.record_type:type_name -> project.planton.shared.networking.enums.dnsrecordtype.DnsRecordType
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_project_planton_provider_gcp_gcpdnszone_v1_spec_proto_init() }
func file_project_planton_provider_gcp_gcpdnszone_v1_spec_proto_init() {
	if File_project_planton_provider_gcp_gcpdnszone_v1_spec_proto != nil {
		return
	}
	file_project_planton_provider_gcp_gcpdnszone_v1_spec_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_gcp_gcpdnszone_v1_spec_proto_rawDesc), len(file_project_planton_provider_gcp_gcpdnszone_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_gcp_gcpdnszone_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_gcp_gcpdnszone_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_gcp_gcpdnszone_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_gcp_gcpdnszone_v1_spec_proto = out.File
	file_project_planton_provider_gcp_gcpdnszone_v1_spec_proto_goTypes = nil
	file_project_planton_provider_gcp_gcpdnszone_v1_spec_proto_depIdxs = nil
}
