// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/provider/gcp/gkecluster/v1/spec.proto

package gkeclusterv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// **GkeClusterSpec** defines the specifications for a Google Kubernetes Engine (GKE) cluster.
// This message includes necessary parameters to create and manage a GKE cluster within a specified GCP project.
// It covers details like project IDs, region, zone, networking configurations, logging options, autoscaling settings,
// node pools, Kubernetes addons, and ingress DNS domains.
type GkeClusterSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The GCP project ID in which the GKE cluster will be created.
	ClusterProjectId string `protobuf:"bytes,1,opt,name=cluster_project_id,json=clusterProjectId,proto3" json:"cluster_project_id,omitempty"`
	// **Required.** The GCP region where the GKE cluster will be created.
	// **Warning:** The GKE cluster will be recreated if this value is updated.
	// Refer to: https://cloud.google.com/compute/docs/regions-zones
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// **Required.** The GCP zone where the GKE cluster will be created.
	// Refer to: https://cloud.google.com/compute/docs/regions-zones
	Zone            string                     `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone,omitempty"`
	SharedVpcConfig *GkeClusterSharedVpcConfig `protobuf:"bytes,4,opt,name=shared_vpc_config,json=sharedVpcConfig,proto3" json:"shared_vpc_config,omitempty"`
	// A flag to toggle workload logs for the GKE cluster environment.
	// When enabled, logs from Kubernetes pods will be sent to Google Cloud Logging.
	// **Warning:** Enabling log forwarding may increase cloud bills depending on the log volume.
	IsWorkloadLogsEnabled bool `protobuf:"varint,5,opt,name=is_workload_logs_enabled,json=isWorkloadLogsEnabled,proto3" json:"is_workload_logs_enabled,omitempty"`
	// Configuration for cluster autoscaling.
	ClusterAutoscalingConfig *GkeClusterAutoscalingConfig `protobuf:"bytes,6,opt,name=cluster_autoscaling_config,json=clusterAutoscalingConfig,proto3" json:"cluster_autoscaling_config,omitempty"`
	// A list of node pools for the GKE cluster.
	NodePools []*GkeClusterNodePool `protobuf:"bytes,7,rep,name=node_pools,json=nodePools,proto3" json:"node_pools,omitempty"`
}

func (x *GkeClusterSpec) Reset() {
	*x = GkeClusterSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GkeClusterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GkeClusterSpec) ProtoMessage() {}

func (x *GkeClusterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GkeClusterSpec.ProtoReflect.Descriptor instead.
func (*GkeClusterSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *GkeClusterSpec) GetClusterProjectId() string {
	if x != nil {
		return x.ClusterProjectId
	}
	return ""
}

func (x *GkeClusterSpec) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GkeClusterSpec) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *GkeClusterSpec) GetSharedVpcConfig() *GkeClusterSharedVpcConfig {
	if x != nil {
		return x.SharedVpcConfig
	}
	return nil
}

func (x *GkeClusterSpec) GetIsWorkloadLogsEnabled() bool {
	if x != nil {
		return x.IsWorkloadLogsEnabled
	}
	return false
}

func (x *GkeClusterSpec) GetClusterAutoscalingConfig() *GkeClusterAutoscalingConfig {
	if x != nil {
		return x.ClusterAutoscalingConfig
	}
	return nil
}

func (x *GkeClusterSpec) GetNodePools() []*GkeClusterNodePool {
	if x != nil {
		return x.NodePools
	}
	return nil
}

// **GkeClusterSharedVpcConfig** specifies the shared VPC network settings for GKE clusters.
// This message includes the project ID for the shared VPC network where the GKE cluster is created.
// For more details, visit: https://cloud.google.com/kubernetes-engine/docs/how-to/cluster-shared-vpc
type GkeClusterSharedVpcConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A flag indicating whether the cluster should be created in a shared VPC network.
	// **Warning:** The GKE cluster will be recreated if this is updated.
	IsEnabled    bool   `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	VpcProjectId string `protobuf:"bytes,2,opt,name=vpc_project_id,json=vpcProjectId,proto3" json:"vpc_project_id,omitempty"`
}

func (x *GkeClusterSharedVpcConfig) Reset() {
	*x = GkeClusterSharedVpcConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GkeClusterSharedVpcConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GkeClusterSharedVpcConfig) ProtoMessage() {}

func (x *GkeClusterSharedVpcConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GkeClusterSharedVpcConfig.ProtoReflect.Descriptor instead.
func (*GkeClusterSharedVpcConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *GkeClusterSharedVpcConfig) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *GkeClusterSharedVpcConfig) GetVpcProjectId() string {
	if x != nil {
		return x.VpcProjectId
	}
	return ""
}

// **GkeClusterAutoscalingConfig** specifies the autoscaling settings for GKE clusters.
// For more details, visit: https://cloud.google.com/kubernetes-engine/docs/how-to/node-auto-provisioning
type GkeClusterAutoscalingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A flag to enable or disable autoscaling of Kubernetes worker nodes.
	// When set to true, the cluster will automatically scale up or down based on resource requirements.
	IsEnabled bool `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	// The minimum number of CPU cores the cluster can scale down to when autoscaling is enabled.
	// This is the total number of CPU cores across all nodes in the cluster.
	CpuMinCores int64 `protobuf:"varint,2,opt,name=cpu_min_cores,json=cpuMinCores,proto3" json:"cpu_min_cores,omitempty"`
	// The maximum number of CPU cores the cluster can scale up to when autoscaling is enabled.
	// This is the total number of CPU cores across all nodes in the cluster.
	CpuMaxCores int64 `protobuf:"varint,3,opt,name=cpu_max_cores,json=cpuMaxCores,proto3" json:"cpu_max_cores,omitempty"`
	// The minimum amount of memory in gigabytes (GB) the cluster can scale down to when autoscaling is enabled.
	// This is the total memory across all nodes in the cluster.
	MemoryMinGb int64 `protobuf:"varint,4,opt,name=memory_min_gb,json=memoryMinGb,proto3" json:"memory_min_gb,omitempty"`
	// The maximum amount of memory in gigabytes (GB) the cluster can scale up to when autoscaling is enabled.
	// This is the total memory across all nodes in the cluster.
	MemoryMaxGb int64 `protobuf:"varint,5,opt,name=memory_max_gb,json=memoryMaxGb,proto3" json:"memory_max_gb,omitempty"`
}

func (x *GkeClusterAutoscalingConfig) Reset() {
	*x = GkeClusterAutoscalingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GkeClusterAutoscalingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GkeClusterAutoscalingConfig) ProtoMessage() {}

func (x *GkeClusterAutoscalingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GkeClusterAutoscalingConfig.ProtoReflect.Descriptor instead.
func (*GkeClusterAutoscalingConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *GkeClusterAutoscalingConfig) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *GkeClusterAutoscalingConfig) GetCpuMinCores() int64 {
	if x != nil {
		return x.CpuMinCores
	}
	return 0
}

func (x *GkeClusterAutoscalingConfig) GetCpuMaxCores() int64 {
	if x != nil {
		return x.CpuMaxCores
	}
	return 0
}

func (x *GkeClusterAutoscalingConfig) GetMemoryMinGb() int64 {
	if x != nil {
		return x.MemoryMinGb
	}
	return 0
}

func (x *GkeClusterAutoscalingConfig) GetMemoryMaxGb() int64 {
	if x != nil {
		return x.MemoryMaxGb
	}
	return 0
}

// **GkeClusterNodePool** defines a node pool within the GKE cluster.
type GkeClusterNodePool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the node pool.
	// This name is added as a label to the node pool and can be used to schedule workloads.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// **Required.** The machine type for the node pool (e.g., 'n2-custom-8-16234').
	MachineType string `protobuf:"bytes,2,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	// The minimum number of nodes in the node pool. Defaults to 1.
	MinNodeCount int32 `protobuf:"varint,3,opt,name=min_node_count,json=minNodeCount,proto3" json:"min_node_count,omitempty"`
	// The maximum number of nodes in the node pool. Defaults to 1.
	MaxNodeCount int32 `protobuf:"varint,4,opt,name=max_node_count,json=maxNodeCount,proto3" json:"max_node_count,omitempty"`
	// A flag to enable spot instances on the node pool. Defaults to false.
	IsSpotEnabled bool `protobuf:"varint,5,opt,name=is_spot_enabled,json=isSpotEnabled,proto3" json:"is_spot_enabled,omitempty"`
}

func (x *GkeClusterNodePool) Reset() {
	*x = GkeClusterNodePool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GkeClusterNodePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GkeClusterNodePool) ProtoMessage() {}

func (x *GkeClusterNodePool) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GkeClusterNodePool.ProtoReflect.Descriptor instead.
func (*GkeClusterNodePool) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDescGZIP(), []int{3}
}

func (x *GkeClusterNodePool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GkeClusterNodePool) GetMachineType() string {
	if x != nil {
		return x.MachineType
	}
	return ""
}

func (x *GkeClusterNodePool) GetMinNodeCount() int32 {
	if x != nil {
		return x.MinNodeCount
	}
	return 0
}

func (x *GkeClusterNodePool) GetMaxNodeCount() int32 {
	if x != nil {
		return x.MaxNodeCount
	}
	return 0
}

func (x *GkeClusterNodePool) GetIsSpotEnabled() bool {
	if x != nil {
		return x.IsSpotEnabled
	}
	return false
}

var File_project_planton_provider_gcp_gkecluster_v1_spec_proto protoreflect.FileDescriptor

var file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDesc = []byte{
	0x0a, 0x35, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x67, 0x63, 0x70, 0x2f, 0x67,
	0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x67, 0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9,
	0x04, 0x0a, 0x0e, 0x47, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x34, 0x0a, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x8a, 0xa6, 0x1d, 0x0b, 0x75, 0x73, 0x2d,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x31, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11,
	0x8a, 0xa6, 0x1d, 0x0d, 0x75, 0x73, 0x2d, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x31, 0x2d,
	0x61, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x71, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x63,
	0x70, 0x2e, 0x67, 0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x73,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x1a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x67, 0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x18, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5d, 0x0a, 0x0a, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x67,
	0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6b, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x22, 0x8b, 0x02, 0x0a, 0x19, 0x47,
	0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56,
	0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x0e, 0x76, 0x70, 0x63, 0x5f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0c, 0x76, 0x70, 0x63, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x3a, 0xa0, 0x01, 0xba, 0x48, 0x9c, 0x01, 0x1a, 0x99, 0x01, 0x0a,
	0x2e, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x70, 0x63,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x70, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x1a,
	0x67, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x20, 0x26, 0x26, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x76, 0x70,
	0x63, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x29, 0x20, 0x3d, 0x3d,
	0x20, 0x30, 0x3f, 0x20, 0x27, 0x56, 0x50, 0x43, 0x20, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x20, 0x49, 0x64, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x73, 0x65, 0x74, 0x75, 0x70, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2d,
	0x76, 0x70, 0x63, 0x27, 0x3a, 0x20, 0x27, 0x27, 0x22, 0xcc, 0x01, 0x0a, 0x1b, 0x47, 0x6b, 0x65,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x70, 0x75, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x63, 0x70, 0x75, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x63,
	0x70, 0x75, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x63, 0x70, 0x75, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12,
	0x22, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x62,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x69,
	0x6e, 0x47, 0x62, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x67, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x4d, 0x61, 0x78, 0x47, 0x62, 0x22, 0xec, 0x03, 0x0a, 0x12, 0x47, 0x6b, 0x65, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0xb6,
	0x02, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xa1, 0x02,
	0xba, 0x48, 0x9d, 0x02, 0xba, 0x01, 0x7b, 0x0a, 0x12, 0x67, 0x63, 0x70, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x4f, 0x6e, 0x6c,
	0x79, 0x20, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x20, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x20, 0x28, 0x41, 0x2d, 0x5a, 0x2c, 0x20,
	0x61, 0x2d, 0x7a, 0x2c, 0x20, 0x30, 0x2d, 0x39, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x68, 0x79,
	0x70, 0x68, 0x65, 0x6e, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x1a, 0x1f, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28,
	0x27, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2d, 0x5d, 0x2b, 0x24,
	0x27, 0x29, 0xba, 0x01, 0x4c, 0x0a, 0x12, 0x67, 0x63, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x4d, 0x75, 0x73, 0x74, 0x20,
	0x6e, 0x6f, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61,
	0x20, 0x68, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x1a, 0x18, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x5e, 0x2d, 0x5d, 0x2e, 0x2a, 0x24, 0x27,
	0x29, 0xba, 0x01, 0x47, 0x0a, 0x12, 0x67, 0x63, 0x70, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x6e,
	0x6f, 0x74, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x68, 0x79,
	0x70, 0x68, 0x65, 0x6e, 0x1a, 0x15, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x28, 0x27, 0x5b, 0x5e, 0x2d, 0x5d, 0x24, 0x27, 0x29, 0x72, 0x04, 0x10, 0x01, 0x18,
	0x19, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x53, 0x70, 0x6f, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0xf3, 0x02, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x63, 0x70, 0x2e, 0x67, 0x6b, 0x65, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x53, 0x70, 0x65, 0x63, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x67, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2f, 0x67, 0x63, 0x70, 0x2f, 0x67, 0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x3b, 0x67, 0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x76, 0x31, 0xa2,
	0x02, 0x05, 0x50, 0x50, 0x50, 0x47, 0x47, 0xaa, 0x02, 0x2a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x47, 0x63, 0x70, 0x2e, 0x47, 0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x2a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c,
	0x47, 0x63, 0x70, 0x5c, 0x47, 0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5c, 0x56,
	0x31, 0xe2, 0x02, 0x36, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x47, 0x63, 0x70,
	0x5c, 0x47, 0x6b, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x2f, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3a, 0x3a, 0x47, 0x63, 0x70, 0x3a, 0x3a, 0x47, 0x6b,
	0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDescData = file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDesc
)

func file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDescData)
	})
	return file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDescData
}

var file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_project_planton_provider_gcp_gkecluster_v1_spec_proto_goTypes = []any{
	(*GkeClusterSpec)(nil),              // 0: project.planton.provider.gcp.gkecluster.v1.GkeClusterSpec
	(*GkeClusterSharedVpcConfig)(nil),   // 1: project.planton.provider.gcp.gkecluster.v1.GkeClusterSharedVpcConfig
	(*GkeClusterAutoscalingConfig)(nil), // 2: project.planton.provider.gcp.gkecluster.v1.GkeClusterAutoscalingConfig
	(*GkeClusterNodePool)(nil),          // 3: project.planton.provider.gcp.gkecluster.v1.GkeClusterNodePool
}
var file_project_planton_provider_gcp_gkecluster_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.gcp.gkecluster.v1.GkeClusterSpec.shared_vpc_config:type_name -> project.planton.provider.gcp.gkecluster.v1.GkeClusterSharedVpcConfig
	2, // 1: project.planton.provider.gcp.gkecluster.v1.GkeClusterSpec.cluster_autoscaling_config:type_name -> project.planton.provider.gcp.gkecluster.v1.GkeClusterAutoscalingConfig
	3, // 2: project.planton.provider.gcp.gkecluster.v1.GkeClusterSpec.node_pools:type_name -> project.planton.provider.gcp.gkecluster.v1.GkeClusterNodePool
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_project_planton_provider_gcp_gkecluster_v1_spec_proto_init() }
func file_project_planton_provider_gcp_gkecluster_v1_spec_proto_init() {
	if File_project_planton_provider_gcp_gkecluster_v1_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GkeClusterSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GkeClusterSharedVpcConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GkeClusterAutoscalingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GkeClusterNodePool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_gcp_gkecluster_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_gcp_gkecluster_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_gcp_gkecluster_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_gcp_gkecluster_v1_spec_proto = out.File
	file_project_planton_provider_gcp_gkecluster_v1_spec_proto_rawDesc = nil
	file_project_planton_provider_gcp_gkecluster_v1_spec_proto_goTypes = nil
	file_project_planton_provider_gcp_gkecluster_v1_spec_proto_depIdxs = nil
}
