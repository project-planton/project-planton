// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/gcp/gcpvpc/v1/spec.proto

package gcpvpcv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/project-planton/project-planton/apis/project/planton/shared/foreignkey/v1"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Allowed values for VPC dynamic routing mode.
type GcpVpcRoutingMode int32

const (
	GcpVpcRoutingMode_REGIONAL GcpVpcRoutingMode = 0
	GcpVpcRoutingMode_GLOBAL   GcpVpcRoutingMode = 1
)

// Enum value maps for GcpVpcRoutingMode.
var (
	GcpVpcRoutingMode_name = map[int32]string{
		0: "REGIONAL",
		1: "GLOBAL",
	}
	GcpVpcRoutingMode_value = map[string]int32{
		"REGIONAL": 0,
		"GLOBAL":   1,
	}
)

func (x GcpVpcRoutingMode) Enum() *GcpVpcRoutingMode {
	p := new(GcpVpcRoutingMode)
	*p = x
	return p
}

func (x GcpVpcRoutingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GcpVpcRoutingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_provider_gcp_gcpvpc_v1_spec_proto_enumTypes[0].Descriptor()
}

func (GcpVpcRoutingMode) Type() protoreflect.EnumType {
	return &file_project_planton_provider_gcp_gcpvpc_v1_spec_proto_enumTypes[0]
}

func (x GcpVpcRoutingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GcpVpcRoutingMode.Descriptor instead.
func (GcpVpcRoutingMode) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gcpvpc_v1_spec_proto_rawDescGZIP(), []int{0}
}

// GcpVpcSpec defines the essential configuration for a Google Cloud VPC (Virtual Private Cloud).
type GcpVpcSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The GCP project ID in which to create this VPC network.
	// Example: "my-prod-project-123"
	ProjectId *v1.StringValueOrRef `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Whether to use auto subnet mode (true) or custom subnet mode (false).
	// **Default:** false (custom mode). Auto mode is not recommended for production:contentReference[oaicite:4]{index=4}.
	AutoCreateSubnetworks bool `protobuf:"varint,2,opt,name=auto_create_subnetworks,json=autoCreateSubnetworks,proto3" json:"auto_create_subnetworks,omitempty"`
	// Dynamic routing mode for the VPCâ€™s Cloud Routers: REGIONAL or GLOBAL.
	// **Default:** REGIONAL (Cloud Router adverts routes only in one region):contentReference[oaicite:5]{index=5}.
	// Use GLOBAL only for multi-region routing needs.
	RoutingMode   GcpVpcRoutingMode `protobuf:"varint,3,opt,name=routing_mode,json=routingMode,proto3,enum=project.planton.provider.gcp.gcpvpc.v1.GcpVpcRoutingMode" json:"routing_mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GcpVpcSpec) Reset() {
	*x = GcpVpcSpec{}
	mi := &file_project_planton_provider_gcp_gcpvpc_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpVpcSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpVpcSpec) ProtoMessage() {}

func (x *GcpVpcSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gcpvpc_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpVpcSpec.ProtoReflect.Descriptor instead.
func (*GcpVpcSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gcpvpc_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *GcpVpcSpec) GetProjectId() *v1.StringValueOrRef {
	if x != nil {
		return x.ProjectId
	}
	return nil
}

func (x *GcpVpcSpec) GetAutoCreateSubnetworks() bool {
	if x != nil {
		return x.AutoCreateSubnetworks
	}
	return false
}

func (x *GcpVpcSpec) GetRoutingMode() GcpVpcRoutingMode {
	if x != nil {
		return x.RoutingMode
	}
	return GcpVpcRoutingMode_REGIONAL
}

var File_project_planton_provider_gcp_gcpvpc_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_gcp_gcpvpc_v1_spec_proto_rawDesc = "" +
	"\n" +
	"1project/planton/provider/gcp/gcpvpc/v1/spec.proto\x12&project.planton.provider.gcp.gcpvpc.v1\x1a\x1bbuf/validate/validate.proto\x1a,project/planton/shared/options/options.proto\x1a6project/planton/shared/foreignkey/v1/foreign_key.proto\"\xb1\x02\n" +
	"\n" +
	"GcpVpcSpec\x12\x7f\n" +
	"\n" +
	"project_id\x18\x01 \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB(\xbaH\x03\xc8\x01\x01\x88\xd4a\xe3\x04\x92\xd4a\x19status.outputs.project_idR\tprojectId\x126\n" +
	"\x17auto_create_subnetworks\x18\x02 \x01(\bR\x15autoCreateSubnetworks\x12j\n" +
	"\frouting_mode\x18\x03 \x01(\x0e29.project.planton.provider.gcp.gcpvpc.v1.GcpVpcRoutingModeB\f\x8a\xa6\x1d\bREGIONALR\vroutingMode*-\n" +
	"\x11GcpVpcRoutingMode\x12\f\n" +
	"\bREGIONAL\x10\x00\x12\n" +
	"\n" +
	"\x06GLOBAL\x10\x01B\xd7\x02\n" +
	"*com.project.planton.provider.gcp.gcpvpc.v1B\tSpecProtoP\x01Z_github.com/project-planton/project-planton/apis/project/planton/provider/gcp/gcpvpc/v1;gcpvpcv1\xa2\x02\x05PPPGG\xaa\x02&Project.Planton.Provider.Gcp.Gcpvpc.V1\xca\x02&Project\\Planton\\Provider\\Gcp\\Gcpvpc\\V1\xe2\x022Project\\Planton\\Provider\\Gcp\\Gcpvpc\\V1\\GPBMetadata\xea\x02+Project::Planton::Provider::Gcp::Gcpvpc::V1b\x06proto3"

var (
	file_project_planton_provider_gcp_gcpvpc_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_gcp_gcpvpc_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_gcp_gcpvpc_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_gcp_gcpvpc_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_gcp_gcpvpc_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_gcp_gcpvpc_v1_spec_proto_rawDesc), len(file_project_planton_provider_gcp_gcpvpc_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_gcp_gcpvpc_v1_spec_proto_rawDescData
}

var file_project_planton_provider_gcp_gcpvpc_v1_spec_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_project_planton_provider_gcp_gcpvpc_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_provider_gcp_gcpvpc_v1_spec_proto_goTypes = []any{
	(GcpVpcRoutingMode)(0),      // 0: project.planton.provider.gcp.gcpvpc.v1.GcpVpcRoutingMode
	(*GcpVpcSpec)(nil),          // 1: project.planton.provider.gcp.gcpvpc.v1.GcpVpcSpec
	(*v1.StringValueOrRef)(nil), // 2: project.planton.shared.foreignkey.v1.StringValueOrRef
}
var file_project_planton_provider_gcp_gcpvpc_v1_spec_proto_depIdxs = []int32{
	2, // 0: project.planton.provider.gcp.gcpvpc.v1.GcpVpcSpec.project_id:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	0, // 1: project.planton.provider.gcp.gcpvpc.v1.GcpVpcSpec.routing_mode:type_name -> project.planton.provider.gcp.gcpvpc.v1.GcpVpcRoutingMode
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_project_planton_provider_gcp_gcpvpc_v1_spec_proto_init() }
func file_project_planton_provider_gcp_gcpvpc_v1_spec_proto_init() {
	if File_project_planton_provider_gcp_gcpvpc_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_gcp_gcpvpc_v1_spec_proto_rawDesc), len(file_project_planton_provider_gcp_gcpvpc_v1_spec_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_gcp_gcpvpc_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_gcp_gcpvpc_v1_spec_proto_depIdxs,
		EnumInfos:         file_project_planton_provider_gcp_gcpvpc_v1_spec_proto_enumTypes,
		MessageInfos:      file_project_planton_provider_gcp_gcpvpc_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_gcp_gcpvpc_v1_spec_proto = out.File
	file_project_planton_provider_gcp_gcpvpc_v1_spec_proto_goTypes = nil
	file_project_planton_provider_gcp_gcpvpc_v1_spec_proto_depIdxs = nil
}
