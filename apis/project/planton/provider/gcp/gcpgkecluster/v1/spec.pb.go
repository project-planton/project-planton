// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/gcp/gcpgkecluster/v1/spec.proto

package gcpgkeclusterv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// **GcpGkeClusterSpec** defines the specifications for a Google Kubernetes Engine (GKE) cluster.
// This message includes necessary parameters to create and manage a GKE cluster within a specified GCP project.
// It covers details like project IDs, region, zone, networking configurations, logging options, autoscaling settings,
// node pools, Kubernetes addons, and ingress DNS domains.
type GcpGkeClusterSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The GCP project ID in which the GKE cluster will be created.
	ClusterProjectId string `protobuf:"bytes,1,opt,name=cluster_project_id,json=clusterProjectId,proto3" json:"cluster_project_id,omitempty"`
	// The GCP region where the GKE cluster will be created.
	// **Warning:** The GKE cluster will be recreated if this value is updated.
	// Refer to: https://cloud.google.com/compute/docs/regions-zones
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// The GCP zone where the GKE cluster will be created.
	// Refer to: https://cloud.google.com/compute/docs/regions-zones
	Zone            string                        `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone,omitempty"`
	SharedVpcConfig *GcpGkeClusterSharedVpcConfig `protobuf:"bytes,4,opt,name=shared_vpc_config,json=sharedVpcConfig,proto3" json:"shared_vpc_config,omitempty"`
	// A flag to toggle workload logs for the GKE cluster environment.
	// When enabled, logs from Kubernetes pods will be sent to Google Cloud Logging.
	// **Warning:** Enabling log forwarding may increase cloud bills depending on the log volume.
	IsWorkloadLogsEnabled bool `protobuf:"varint,5,opt,name=is_workload_logs_enabled,json=isWorkloadLogsEnabled,proto3" json:"is_workload_logs_enabled,omitempty"`
	// Configuration for cluster autoscaling.
	ClusterAutoscalingConfig *GcpGkeClusterAutoscalingConfig `protobuf:"bytes,6,opt,name=cluster_autoscaling_config,json=clusterAutoscalingConfig,proto3" json:"cluster_autoscaling_config,omitempty"`
	// A list of node pools for the GKE cluster.
	NodePools     []*GcpGkeClusterNodePool `protobuf:"bytes,7,rep,name=node_pools,json=nodePools,proto3" json:"node_pools,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GcpGkeClusterSpec) Reset() {
	*x = GcpGkeClusterSpec{}
	mi := &file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpGkeClusterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpGkeClusterSpec) ProtoMessage() {}

func (x *GcpGkeClusterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpGkeClusterSpec.ProtoReflect.Descriptor instead.
func (*GcpGkeClusterSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *GcpGkeClusterSpec) GetClusterProjectId() string {
	if x != nil {
		return x.ClusterProjectId
	}
	return ""
}

func (x *GcpGkeClusterSpec) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GcpGkeClusterSpec) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *GcpGkeClusterSpec) GetSharedVpcConfig() *GcpGkeClusterSharedVpcConfig {
	if x != nil {
		return x.SharedVpcConfig
	}
	return nil
}

func (x *GcpGkeClusterSpec) GetIsWorkloadLogsEnabled() bool {
	if x != nil {
		return x.IsWorkloadLogsEnabled
	}
	return false
}

func (x *GcpGkeClusterSpec) GetClusterAutoscalingConfig() *GcpGkeClusterAutoscalingConfig {
	if x != nil {
		return x.ClusterAutoscalingConfig
	}
	return nil
}

func (x *GcpGkeClusterSpec) GetNodePools() []*GcpGkeClusterNodePool {
	if x != nil {
		return x.NodePools
	}
	return nil
}

// **GcpGkeClusterSharedVpcConfig** specifies the shared VPC network settings for GKE clusters.
// This message includes the project ID for the shared VPC network where the GKE cluster is created.
// For more details, visit: https://cloud.google.com/kubernetes-engine/docs/how-to/cluster-shared-vpc
type GcpGkeClusterSharedVpcConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A flag indicating whether the cluster should be created in a shared VPC network.
	// **Warning:** The GKE cluster will be recreated if this is updated.
	IsEnabled     bool   `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	VpcProjectId  string `protobuf:"bytes,2,opt,name=vpc_project_id,json=vpcProjectId,proto3" json:"vpc_project_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GcpGkeClusterSharedVpcConfig) Reset() {
	*x = GcpGkeClusterSharedVpcConfig{}
	mi := &file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpGkeClusterSharedVpcConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpGkeClusterSharedVpcConfig) ProtoMessage() {}

func (x *GcpGkeClusterSharedVpcConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpGkeClusterSharedVpcConfig.ProtoReflect.Descriptor instead.
func (*GcpGkeClusterSharedVpcConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *GcpGkeClusterSharedVpcConfig) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *GcpGkeClusterSharedVpcConfig) GetVpcProjectId() string {
	if x != nil {
		return x.VpcProjectId
	}
	return ""
}

// **GcpGkeClusterAutoscalingConfig** specifies the autoscaling settings for GKE clusters.
// For more details, visit: https://cloud.google.com/kubernetes-engine/docs/how-to/node-auto-provisioning
type GcpGkeClusterAutoscalingConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A flag to enable or disable autoscaling of Kubernetes worker nodes.
	// When set to true, the cluster will automatically scale up or down based on resource requirements.
	IsEnabled bool `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	// The minimum number of CPU cores the cluster can scale down to when autoscaling is enabled.
	// This is the total number of CPU cores across all nodes in the cluster.
	CpuMinCores int64 `protobuf:"varint,2,opt,name=cpu_min_cores,json=cpuMinCores,proto3" json:"cpu_min_cores,omitempty"`
	// The maximum number of CPU cores the cluster can scale up to when autoscaling is enabled.
	// This is the total number of CPU cores across all nodes in the cluster.
	CpuMaxCores int64 `protobuf:"varint,3,opt,name=cpu_max_cores,json=cpuMaxCores,proto3" json:"cpu_max_cores,omitempty"`
	// The minimum amount of memory in gigabytes (GB) the cluster can scale down to when autoscaling is enabled.
	// This is the total memory across all nodes in the cluster.
	MemoryMinGb int64 `protobuf:"varint,4,opt,name=memory_min_gb,json=memoryMinGb,proto3" json:"memory_min_gb,omitempty"`
	// The maximum amount of memory in gigabytes (GB) the cluster can scale up to when autoscaling is enabled.
	// This is the total memory across all nodes in the cluster.
	MemoryMaxGb   int64 `protobuf:"varint,5,opt,name=memory_max_gb,json=memoryMaxGb,proto3" json:"memory_max_gb,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GcpGkeClusterAutoscalingConfig) Reset() {
	*x = GcpGkeClusterAutoscalingConfig{}
	mi := &file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpGkeClusterAutoscalingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpGkeClusterAutoscalingConfig) ProtoMessage() {}

func (x *GcpGkeClusterAutoscalingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpGkeClusterAutoscalingConfig.ProtoReflect.Descriptor instead.
func (*GcpGkeClusterAutoscalingConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *GcpGkeClusterAutoscalingConfig) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *GcpGkeClusterAutoscalingConfig) GetCpuMinCores() int64 {
	if x != nil {
		return x.CpuMinCores
	}
	return 0
}

func (x *GcpGkeClusterAutoscalingConfig) GetCpuMaxCores() int64 {
	if x != nil {
		return x.CpuMaxCores
	}
	return 0
}

func (x *GcpGkeClusterAutoscalingConfig) GetMemoryMinGb() int64 {
	if x != nil {
		return x.MemoryMinGb
	}
	return 0
}

func (x *GcpGkeClusterAutoscalingConfig) GetMemoryMaxGb() int64 {
	if x != nil {
		return x.MemoryMaxGb
	}
	return 0
}

// **GcpGkeClusterNodePool** defines a node pool within the GKE cluster.
type GcpGkeClusterNodePool struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the node pool.
	// This name is added as a label to the node pool and can be used to schedule workloads.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The machine type for the node pool (e.g., 'n2-custom-8-16234').
	MachineType string `protobuf:"bytes,2,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	// The minimum number of nodes in the node pool. Defaults to 1.
	MinNodeCount int32 `protobuf:"varint,3,opt,name=min_node_count,json=minNodeCount,proto3" json:"min_node_count,omitempty"`
	// The maximum number of nodes in the node pool. Defaults to 1.
	MaxNodeCount int32 `protobuf:"varint,4,opt,name=max_node_count,json=maxNodeCount,proto3" json:"max_node_count,omitempty"`
	// A flag to enable spot instances on the node pool. Defaults to false.
	IsSpotEnabled bool `protobuf:"varint,5,opt,name=is_spot_enabled,json=isSpotEnabled,proto3" json:"is_spot_enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GcpGkeClusterNodePool) Reset() {
	*x = GcpGkeClusterNodePool{}
	mi := &file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpGkeClusterNodePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpGkeClusterNodePool) ProtoMessage() {}

func (x *GcpGkeClusterNodePool) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpGkeClusterNodePool.ProtoReflect.Descriptor instead.
func (*GcpGkeClusterNodePool) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_rawDescGZIP(), []int{3}
}

func (x *GcpGkeClusterNodePool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GcpGkeClusterNodePool) GetMachineType() string {
	if x != nil {
		return x.MachineType
	}
	return ""
}

func (x *GcpGkeClusterNodePool) GetMinNodeCount() int32 {
	if x != nil {
		return x.MinNodeCount
	}
	return 0
}

func (x *GcpGkeClusterNodePool) GetMaxNodeCount() int32 {
	if x != nil {
		return x.MaxNodeCount
	}
	return 0
}

func (x *GcpGkeClusterNodePool) GetIsSpotEnabled() bool {
	if x != nil {
		return x.IsSpotEnabled
	}
	return false
}

var File_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_rawDesc = "" +
	"\n" +
	"8project/planton/provider/gcp/gcpgkecluster/v1/spec.proto\x12-project.planton.provider.gcp.gcpgkecluster.v1\x1a\x1bbuf/validate/validate.proto\x1a,project/planton/shared/options/options.proto\"\xbe\x04\n" +
	"\x11GcpGkeClusterSpec\x124\n" +
	"\x12cluster_project_id\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x10clusterProjectId\x12'\n" +
	"\x06region\x18\x02 \x01(\tB\x0f\x8a\xa6\x1d\vus-central1R\x06region\x12%\n" +
	"\x04zone\x18\x03 \x01(\tB\x11\x8a\xa6\x1d\rus-central1-aR\x04zone\x12w\n" +
	"\x11shared_vpc_config\x18\x04 \x01(\v2K.project.planton.provider.gcp.gcpgkecluster.v1.GcpGkeClusterSharedVpcConfigR\x0fsharedVpcConfig\x127\n" +
	"\x18is_workload_logs_enabled\x18\x05 \x01(\bR\x15isWorkloadLogsEnabled\x12\x8b\x01\n" +
	"\x1acluster_autoscaling_config\x18\x06 \x01(\v2M.project.planton.provider.gcp.gcpgkecluster.v1.GcpGkeClusterAutoscalingConfigR\x18clusterAutoscalingConfig\x12c\n" +
	"\n" +
	"node_pools\x18\a \x03(\v2D.project.planton.provider.gcp.gcpgkecluster.v1.GcpGkeClusterNodePoolR\tnodePools\"\x8e\x02\n" +
	"\x1cGcpGkeClusterSharedVpcConfig\x12\x1d\n" +
	"\n" +
	"is_enabled\x18\x01 \x01(\bR\tisEnabled\x12,\n" +
	"\x0evpc_project_id\x18\x02 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\fvpcProjectId:\xa0\x01\xbaH\x9c\x01\x1a\x99\x01\n" +
	".spec.shared_vpc_config.vpc_project_id.required\x1agthis.is_enabled && size(this.vpc_project_id) == 0? 'VPC Project Id is required to setup shared-vpc': ''\"\xcf\x01\n" +
	"\x1eGcpGkeClusterAutoscalingConfig\x12\x1d\n" +
	"\n" +
	"is_enabled\x18\x01 \x01(\bR\tisEnabled\x12\"\n" +
	"\rcpu_min_cores\x18\x02 \x01(\x03R\vcpuMinCores\x12\"\n" +
	"\rcpu_max_cores\x18\x03 \x01(\x03R\vcpuMaxCores\x12\"\n" +
	"\rmemory_min_gb\x18\x04 \x01(\x03R\vmemoryMinGb\x12\"\n" +
	"\rmemory_max_gb\x18\x05 \x01(\x03R\vmemoryMaxGb\"\xef\x03\n" +
	"\x15GcpGkeClusterNodePool\x12\xb6\x02\n" +
	"\x04name\x18\x01 \x01(\tB\xa1\x02\xbaH\x9d\x02\xba\x01{\n" +
	"\x12gcp.node_pool.name\x12DOnly alphanumeric characters (A-Z, a-z, 0-9) and hyphens are allowed\x1a\x1fthis.matches('^[A-Za-z0-9-]+$')\xba\x01L\n" +
	"\x12gcp.node_pool.name\x12\x1cMust not start with a hyphen\x1a\x18this.matches('^[^-].*$')\xba\x01G\n" +
	"\x12gcp.node_pool.name\x12\x1aMust not end with a hyphen\x1a\x15this.matches('[^-]$')r\x04\x10\x01\x18\x19R\x04name\x12)\n" +
	"\fmachine_type\x18\x02 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\vmachineType\x12$\n" +
	"\x0emin_node_count\x18\x03 \x01(\x05R\fminNodeCount\x12$\n" +
	"\x0emax_node_count\x18\x04 \x01(\x05R\fmaxNodeCount\x12&\n" +
	"\x0fis_spot_enabled\x18\x05 \x01(\bR\risSpotEnabledB\x88\x03\n" +
	"1com.project.planton.provider.gcp.gcpgkecluster.v1B\tSpecProtoP\x01Zmgithub.com/project-planton/project-planton/apis/project/planton/provider/gcp/gcpgkecluster/v1;gcpgkeclusterv1\xa2\x02\x05PPPGG\xaa\x02-Project.Planton.Provider.Gcp.Gcpgkecluster.V1\xca\x02-Project\\Planton\\Provider\\Gcp\\Gcpgkecluster\\V1\xe2\x029Project\\Planton\\Provider\\Gcp\\Gcpgkecluster\\V1\\GPBMetadata\xea\x022Project::Planton::Provider::Gcp::Gcpgkecluster::V1b\x06proto3"

var (
	file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_rawDesc), len(file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_rawDescData
}

var file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_goTypes = []any{
	(*GcpGkeClusterSpec)(nil),              // 0: project.planton.provider.gcp.gcpgkecluster.v1.GcpGkeClusterSpec
	(*GcpGkeClusterSharedVpcConfig)(nil),   // 1: project.planton.provider.gcp.gcpgkecluster.v1.GcpGkeClusterSharedVpcConfig
	(*GcpGkeClusterAutoscalingConfig)(nil), // 2: project.planton.provider.gcp.gcpgkecluster.v1.GcpGkeClusterAutoscalingConfig
	(*GcpGkeClusterNodePool)(nil),          // 3: project.planton.provider.gcp.gcpgkecluster.v1.GcpGkeClusterNodePool
}
var file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.gcp.gcpgkecluster.v1.GcpGkeClusterSpec.shared_vpc_config:type_name -> project.planton.provider.gcp.gcpgkecluster.v1.GcpGkeClusterSharedVpcConfig
	2, // 1: project.planton.provider.gcp.gcpgkecluster.v1.GcpGkeClusterSpec.cluster_autoscaling_config:type_name -> project.planton.provider.gcp.gcpgkecluster.v1.GcpGkeClusterAutoscalingConfig
	3, // 2: project.planton.provider.gcp.gcpgkecluster.v1.GcpGkeClusterSpec.node_pools:type_name -> project.planton.provider.gcp.gcpgkecluster.v1.GcpGkeClusterNodePool
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_init() }
func file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_init() {
	if File_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_rawDesc), len(file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto = out.File
	file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_goTypes = nil
	file_project_planton_provider_gcp_gcpgkecluster_v1_spec_proto_depIdxs = nil
}
