syntax = "proto3";

package project.planton.provider.gcp.gcpcloudrun.v1;

import "buf/validate/validate.proto";
import "project/planton/shared/options/options.proto";

/*
 * GcpCloudRunSpec defines the configuration for deploying an HTTP service on
 * Google Cloud Run.  Container-related knobs are grouped under the
 * GcpCloudRunContainer message to keep naming and structure consistent with
 * MicroserviceKubernetes and AwsEcsService resources.
 */
message GcpCloudRunSpec {
  // GCP project ID where the Cloud Run service will be created.
  string project_id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string = {
      pattern: "^[a-z][a-z0-9-]{4,28}[a-z0-9]$"
    }
  ];

  // Region where the service is deployed, for example "us-central1".
  string region = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).string = {pattern: "^[a-z]+-[a-z]+[0-9]$"}
  ];

  // Container configuration for the Cloud Run service.
  GcpCloudRunContainer container = 3 [
    (buf.validate.field).required = true
  ];

  // Maximum concurrent requests handled by one instance.
  int32 max_concurrency = 4 [
    (buf.validate.field).int32 = {gte: 1,lte: 1000},
    (project.planton.shared.options.recommended_default) = "80"
  ];

  // If true, the service is publicly invokable by unauthenticated callers.
  bool allow_unauthenticated = 5 [
    (project.planton.shared.options.recommended_default) = "true"
  ];

  //Custom DNS mapping for the Cloud Run service.
  GcpCloudRunDns dns = 6;
}

/*
 * GcpCloudRunContainer groups image, resources, environment, and port settings
 * for the Cloud Run container.
 */
message GcpCloudRunContainer {
  // Container image URI, for example "us-docker.pkg.dev/prj/registry/app:1.0.0".
  GcpCloudRunContainerImage image = 1;

  // Environment variables and secrets injected into the container.
  GcpCloudRunContainerEnv env = 2;

  // Container port that receives HTTP traffic.  Defaults to 8080 if unset.
  int32 port = 3 [
    (buf.validate.field).int32 = {gte: 1,lte: 65535}
  ];

  // vCPU units allocated per instance.  Allowed values: 1, 2, 4.
  int32 cpu = 4 [
    (buf.validate.field).required = true,
    (buf.validate.field).int32 = {in: [1, 2, 4]},
    (project.planton.shared.options.recommended_default) = "1"
  ];

  // Memory in MiB allocated per instance.  Valid range 128 â€“ 32768.
  int32 memory = 5 [
    (buf.validate.field).required = true,
    (buf.validate.field).int32 = {gte: 128,lte: 32768},
    (project.planton.shared.options.recommended_default) = "512"
  ];

  // Minimum and maximum number of container instances.
  GcpCloudRunContainerReplicas replicas = 6 [
    (buf.validate.field).required = true
  ];
}

/// GcpCloudRunContainerReplicas defines the minimum and maximum number of container instances
message GcpCloudRunContainerReplicas {
  // Minimum number of container instances that remain warm.
  int32 min = 1 [
    (buf.validate.field).int32 = {gte: 0},
    (project.planton.shared.options.recommended_default) = "0"
  ];

  // Maximum number of container instances Cloud Run may scale out to.
  int32 max = 2 [
    (buf.validate.field).int32 = {gte: 0}
  ];
}

/*
 * GcpCloudRunContainerImage specifies the repository and tag of the container
 * image.
 */
message GcpCloudRunContainerImage {
  // Image repository, for example "us-docker.pkg.dev/prj/registry/app".
  string repo = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string = {min_len: 1}
  ];

  // Image tag, for example "1.0.0".  Using a fixed tag improves repeatability.
  string tag = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).string = {min_len: 1}
  ];
}

/*
 * GcpCloudRunContainerEnv defines plain environment variables and secrets.
 */
message GcpCloudRunContainerEnv {
  // Plain environment variables injected as KEY=VALUE pairs.
  map<string, string> variables = 1;

  // Secret Manager references injected as KEY=projects/*/secrets/*:version.
  map<string, string> secrets = 2;
}

/*
 * GcpCloudRunDns configures optional custom-domain mapping.
 */
message GcpCloudRunDns {
  // Enables or disables custom-domain mapping.
  bool enabled = 1;

  // Fully-qualified hostnames routed to the Cloud Run service.
  repeated string hostnames = 2 [
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE,
    (buf.validate.field).repeated = {
      unique: true,
      items: {
        string: {
          pattern: "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
        }
      }
    }
  ];

  // Cloud DNS managed zone used for domain-verification records.
  string managed_zone = 3;

  option (buf.validate.message).cel = {
    id: "dns.enabled-requires-fields",
    message: "hostnames and managed_zone must be set when dns.enabled is true",
    expression:
        "!this.enabled || (size(this.hostnames) > 0 && this.managed_zone != '')"
  };
}
