// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/gcp/gcpcloudrun/v1/spec.proto

package gcpcloudrunv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GcpCloudRunSpec defines the configuration for deploying an HTTP service on
// Google Cloud Run.  Container-related knobs are grouped under the
// GcpCloudRunContainer message to keep naming and structure consistent with
// MicroserviceKubernetes and AwsEcsService resources.
type GcpCloudRunSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// GCP project ID where the Cloud Run service will be created.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Region where the service is deployed, for example "us-central1".
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// Container configuration for the Cloud Run service.
	Container *GcpCloudRunContainer `protobuf:"bytes,3,opt,name=container,proto3" json:"container,omitempty"`
	// Maximum concurrent requests handled by one instance.
	MaxConcurrency int32 `protobuf:"varint,4,opt,name=max_concurrency,json=maxConcurrency,proto3" json:"max_concurrency,omitempty"`
	// If true, the service is publicly invokable by unauthenticated callers.
	AllowUnauthenticated bool `protobuf:"varint,5,opt,name=allow_unauthenticated,json=allowUnauthenticated,proto3" json:"allow_unauthenticated,omitempty"`
	// Custom DNS mapping for the Cloud Run service.
	Dns           *GcpCloudRunDns `protobuf:"bytes,6,opt,name=dns,proto3" json:"dns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GcpCloudRunSpec) Reset() {
	*x = GcpCloudRunSpec{}
	mi := &file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpCloudRunSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpCloudRunSpec) ProtoMessage() {}

func (x *GcpCloudRunSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpCloudRunSpec.ProtoReflect.Descriptor instead.
func (*GcpCloudRunSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *GcpCloudRunSpec) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GcpCloudRunSpec) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GcpCloudRunSpec) GetContainer() *GcpCloudRunContainer {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *GcpCloudRunSpec) GetMaxConcurrency() int32 {
	if x != nil {
		return x.MaxConcurrency
	}
	return 0
}

func (x *GcpCloudRunSpec) GetAllowUnauthenticated() bool {
	if x != nil {
		return x.AllowUnauthenticated
	}
	return false
}

func (x *GcpCloudRunSpec) GetDns() *GcpCloudRunDns {
	if x != nil {
		return x.Dns
	}
	return nil
}

// GcpCloudRunContainer groups image, resources, environment, and port settings
// for the Cloud Run container.
type GcpCloudRunContainer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Container image URI, for example "us-docker.pkg.dev/prj/registry/app:1.0.0".
	Image *GcpCloudRunContainerImage `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// Environment variables and secrets injected into the container.
	Env *GcpCloudRunContainerEnv `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	// Container port that receives HTTP traffic.  Defaults to 8080 if unset.
	Port int32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// vCPU units allocated per instance.  Allowed values: 1, 2, 4.
	Cpu int32 `protobuf:"varint,4,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// Memory in MiB allocated per instance.  Valid range 128 â€“ 32768.
	Memory int32 `protobuf:"varint,5,opt,name=memory,proto3" json:"memory,omitempty"`
	// Minimum and maximum number of container instances.
	Replicas      *GcpCloudRunContainerReplicas `protobuf:"bytes,6,opt,name=replicas,proto3" json:"replicas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GcpCloudRunContainer) Reset() {
	*x = GcpCloudRunContainer{}
	mi := &file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpCloudRunContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpCloudRunContainer) ProtoMessage() {}

func (x *GcpCloudRunContainer) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpCloudRunContainer.ProtoReflect.Descriptor instead.
func (*GcpCloudRunContainer) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *GcpCloudRunContainer) GetImage() *GcpCloudRunContainerImage {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *GcpCloudRunContainer) GetEnv() *GcpCloudRunContainerEnv {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *GcpCloudRunContainer) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *GcpCloudRunContainer) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *GcpCloudRunContainer) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *GcpCloudRunContainer) GetReplicas() *GcpCloudRunContainerReplicas {
	if x != nil {
		return x.Replicas
	}
	return nil
}

// / GcpCloudRunContainerReplicas defines the minimum and maximum number of container instances
type GcpCloudRunContainerReplicas struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Minimum number of container instances that remain warm.
	Min int32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// Maximum number of container instances Cloud Run may scale out to.
	Max           int32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GcpCloudRunContainerReplicas) Reset() {
	*x = GcpCloudRunContainerReplicas{}
	mi := &file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpCloudRunContainerReplicas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpCloudRunContainerReplicas) ProtoMessage() {}

func (x *GcpCloudRunContainerReplicas) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpCloudRunContainerReplicas.ProtoReflect.Descriptor instead.
func (*GcpCloudRunContainerReplicas) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *GcpCloudRunContainerReplicas) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *GcpCloudRunContainerReplicas) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

// GcpCloudRunContainerImage specifies the repository and tag of the container
// image.
type GcpCloudRunContainerImage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Image repository, for example "us-docker.pkg.dev/prj/registry/app".
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	// Image tag, for example "1.0.0".  Using a fixed tag improves repeatability.
	Tag           string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GcpCloudRunContainerImage) Reset() {
	*x = GcpCloudRunContainerImage{}
	mi := &file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpCloudRunContainerImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpCloudRunContainerImage) ProtoMessage() {}

func (x *GcpCloudRunContainerImage) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpCloudRunContainerImage.ProtoReflect.Descriptor instead.
func (*GcpCloudRunContainerImage) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_rawDescGZIP(), []int{3}
}

func (x *GcpCloudRunContainerImage) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *GcpCloudRunContainerImage) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

// GcpCloudRunContainerEnv defines plain environment variables and secrets.
type GcpCloudRunContainerEnv struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Plain environment variables injected as KEY=VALUE pairs.
	Variables map[string]string `protobuf:"bytes,1,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Secret Manager references injected as KEY=projects/*/secrets/*:version.
	Secrets       map[string]string `protobuf:"bytes,2,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GcpCloudRunContainerEnv) Reset() {
	*x = GcpCloudRunContainerEnv{}
	mi := &file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpCloudRunContainerEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpCloudRunContainerEnv) ProtoMessage() {}

func (x *GcpCloudRunContainerEnv) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpCloudRunContainerEnv.ProtoReflect.Descriptor instead.
func (*GcpCloudRunContainerEnv) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_rawDescGZIP(), []int{4}
}

func (x *GcpCloudRunContainerEnv) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *GcpCloudRunContainerEnv) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

// GcpCloudRunDns configures optional custom-domain mapping.
type GcpCloudRunDns struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Enables or disables custom-domain mapping.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Fully-qualified hostnames routed to the Cloud Run service.
	Hostnames []string `protobuf:"bytes,2,rep,name=hostnames,proto3" json:"hostnames,omitempty"`
	// Cloud DNS managed zone used for domain-verification records.
	ManagedZone   string `protobuf:"bytes,3,opt,name=managed_zone,json=managedZone,proto3" json:"managed_zone,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GcpCloudRunDns) Reset() {
	*x = GcpCloudRunDns{}
	mi := &file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcpCloudRunDns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcpCloudRunDns) ProtoMessage() {}

func (x *GcpCloudRunDns) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcpCloudRunDns.ProtoReflect.Descriptor instead.
func (*GcpCloudRunDns) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_rawDescGZIP(), []int{5}
}

func (x *GcpCloudRunDns) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GcpCloudRunDns) GetHostnames() []string {
	if x != nil {
		return x.Hostnames
	}
	return nil
}

func (x *GcpCloudRunDns) GetManagedZone() string {
	if x != nil {
		return x.ManagedZone
	}
	return ""
}

var File_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_rawDesc = "" +
	"\n" +
	"6project/planton/provider/gcp/gcpcloudrun/v1/spec.proto\x12+project.planton.provider.gcp.gcpcloudrun.v1\x1a\x1bbuf/validate/validate.proto\x1a,project/planton/shared/options/options.proto\"\xc4\x03\n" +
	"\x0fGcpCloudRunSpec\x12G\n" +
	"\n" +
	"project_id\x18\x01 \x01(\tB(\xbaH%\xc8\x01\x01r 2\x1e^[a-z][a-z0-9-]{4,28}[a-z0-9]$R\tprojectId\x126\n" +
	"\x06region\x18\x02 \x01(\tB\x1e\xbaH\x1b\xc8\x01\x01r\x162\x14^[a-z]+-[a-z]+[0-9]$R\x06region\x12g\n" +
	"\tcontainer\x18\x03 \x01(\v2A.project.planton.provider.gcp.gcpcloudrun.v1.GcpCloudRunContainerB\x06\xbaH\x03\xc8\x01\x01R\tcontainer\x129\n" +
	"\x0fmax_concurrency\x18\x04 \x01(\x05B\x10\xbaH\a\x1a\x05\x18\xe8\a(\x01\x92\xa6\x1d\x0280R\x0emaxConcurrency\x12=\n" +
	"\x15allow_unauthenticated\x18\x05 \x01(\bB\b\x92\xa6\x1d\x04trueR\x14allowUnauthenticated\x12M\n" +
	"\x03dns\x18\x06 \x01(\v2;.project.planton.provider.gcp.gcpcloudrun.v1.GcpCloudRunDnsR\x03dns\"\xb3\x03\n" +
	"\x14GcpCloudRunContainer\x12\\\n" +
	"\x05image\x18\x01 \x01(\v2F.project.planton.provider.gcp.gcpcloudrun.v1.GcpCloudRunContainerImageR\x05image\x12V\n" +
	"\x03env\x18\x02 \x01(\v2D.project.planton.provider.gcp.gcpcloudrun.v1.GcpCloudRunContainerEnvR\x03env\x12\x1f\n" +
	"\x04port\x18\x03 \x01(\x05B\v\xbaH\b\x1a\x06\x18\xff\xff\x03(\x01R\x04port\x12%\n" +
	"\x03cpu\x18\x04 \x01(\x05B\x13\xbaH\v\xc8\x01\x01\x1a\x060\x010\x020\x04\x92\xa6\x1d\x011R\x03cpu\x12.\n" +
	"\x06memory\x18\x05 \x01(\x05B\x16\xbaH\f\xc8\x01\x01\x1a\a\x18\x80\x80\x02(\x80\x01\x92\xa6\x1d\x03512R\x06memory\x12m\n" +
	"\breplicas\x18\x06 \x01(\v2I.project.planton.provider.gcp.gcpcloudrun.v1.GcpCloudRunContainerReplicasB\x06\xbaH\x03\xc8\x01\x01R\breplicas\"Y\n" +
	"\x1cGcpCloudRunContainerReplicas\x12\x1e\n" +
	"\x03min\x18\x01 \x01(\x05B\f\xbaH\x04\x1a\x02(\x00\x92\xa6\x1d\x010R\x03min\x12\x19\n" +
	"\x03max\x18\x02 \x01(\x05B\a\xbaH\x04\x1a\x02(\x00R\x03max\"Y\n" +
	"\x19GcpCloudRunContainerImage\x12\x1e\n" +
	"\x04repo\x18\x01 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x10\x01R\x04repo\x12\x1c\n" +
	"\x03tag\x18\x02 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x10\x01R\x03tag\"\xf3\x02\n" +
	"\x17GcpCloudRunContainerEnv\x12q\n" +
	"\tvariables\x18\x01 \x03(\v2S.project.planton.provider.gcp.gcpcloudrun.v1.GcpCloudRunContainerEnv.VariablesEntryR\tvariables\x12k\n" +
	"\asecrets\x18\x02 \x03(\v2Q.project.planton.provider.gcp.gcpcloudrun.v1.GcpCloudRunContainerEnv.SecretsEntryR\asecrets\x1a<\n" +
	"\x0eVariablesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a:\n" +
	"\fSecretsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xef\x02\n" +
	"\x0eGcpCloudRunDns\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12p\n" +
	"\thostnames\x18\x02 \x03(\tBR\xbaHO\xd8\x01\x02\x92\x01I\x18\x01\"ErC2A^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$R\thostnames\x12!\n" +
	"\fmanaged_zone\x18\x03 \x01(\tR\vmanagedZone:\xad\x01\xbaH\xa9\x01\x1a\xa6\x01\n" +
	"\x1bdns.enabled-requires-fields\x12?hostnames and managed_zone must be set when dns.enabled is true\x1aF!this.enabled || (size(this.hostnames) > 0 && this.managed_zone != '')B\xfa\x02\n" +
	"/com.project.planton.provider.gcp.gcpcloudrun.v1B\tSpecProtoP\x01Zigithub.com/project-planton/project-planton/apis/project/planton/provider/gcp/gcpcloudrun/v1;gcpcloudrunv1\xa2\x02\x05PPPGG\xaa\x02+Project.Planton.Provider.Gcp.Gcpcloudrun.V1\xca\x02+Project\\Planton\\Provider\\Gcp\\Gcpcloudrun\\V1\xe2\x027Project\\Planton\\Provider\\Gcp\\Gcpcloudrun\\V1\\GPBMetadata\xea\x020Project::Planton::Provider::Gcp::Gcpcloudrun::V1b\x06proto3"

var (
	file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_rawDesc), len(file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_rawDescData
}

var file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_goTypes = []any{
	(*GcpCloudRunSpec)(nil),              // 0: project.planton.provider.gcp.gcpcloudrun.v1.GcpCloudRunSpec
	(*GcpCloudRunContainer)(nil),         // 1: project.planton.provider.gcp.gcpcloudrun.v1.GcpCloudRunContainer
	(*GcpCloudRunContainerReplicas)(nil), // 2: project.planton.provider.gcp.gcpcloudrun.v1.GcpCloudRunContainerReplicas
	(*GcpCloudRunContainerImage)(nil),    // 3: project.planton.provider.gcp.gcpcloudrun.v1.GcpCloudRunContainerImage
	(*GcpCloudRunContainerEnv)(nil),      // 4: project.planton.provider.gcp.gcpcloudrun.v1.GcpCloudRunContainerEnv
	(*GcpCloudRunDns)(nil),               // 5: project.planton.provider.gcp.gcpcloudrun.v1.GcpCloudRunDns
	nil,                                  // 6: project.planton.provider.gcp.gcpcloudrun.v1.GcpCloudRunContainerEnv.VariablesEntry
	nil,                                  // 7: project.planton.provider.gcp.gcpcloudrun.v1.GcpCloudRunContainerEnv.SecretsEntry
}
var file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.gcp.gcpcloudrun.v1.GcpCloudRunSpec.container:type_name -> project.planton.provider.gcp.gcpcloudrun.v1.GcpCloudRunContainer
	5, // 1: project.planton.provider.gcp.gcpcloudrun.v1.GcpCloudRunSpec.dns:type_name -> project.planton.provider.gcp.gcpcloudrun.v1.GcpCloudRunDns
	3, // 2: project.planton.provider.gcp.gcpcloudrun.v1.GcpCloudRunContainer.image:type_name -> project.planton.provider.gcp.gcpcloudrun.v1.GcpCloudRunContainerImage
	4, // 3: project.planton.provider.gcp.gcpcloudrun.v1.GcpCloudRunContainer.env:type_name -> project.planton.provider.gcp.gcpcloudrun.v1.GcpCloudRunContainerEnv
	2, // 4: project.planton.provider.gcp.gcpcloudrun.v1.GcpCloudRunContainer.replicas:type_name -> project.planton.provider.gcp.gcpcloudrun.v1.GcpCloudRunContainerReplicas
	6, // 5: project.planton.provider.gcp.gcpcloudrun.v1.GcpCloudRunContainerEnv.variables:type_name -> project.planton.provider.gcp.gcpcloudrun.v1.GcpCloudRunContainerEnv.VariablesEntry
	7, // 6: project.planton.provider.gcp.gcpcloudrun.v1.GcpCloudRunContainerEnv.secrets:type_name -> project.planton.provider.gcp.gcpcloudrun.v1.GcpCloudRunContainerEnv.SecretsEntry
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_init() }
func file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_init() {
	if File_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_rawDesc), len(file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto = out.File
	file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_goTypes = nil
	file_project_planton_provider_gcp_gcpcloudrun_v1_spec_proto_depIdxs = nil
}
