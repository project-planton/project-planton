// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/aws/awsecrrepo/v1/stack_outputs.proto

package awsecrrepov1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// aws-ecr-repo stack outputs
type AwsEcrRepoStackOutputs struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The repository name, matching spec.repository_name
	RepositoryName string `protobuf:"bytes,1,opt,name=repository_name,json=repositoryName,proto3" json:"repository_name,omitempty"`
	// The repository URL, e.g. "123456789012.dkr.ecr.us-east-1.amazonaws.com/my-repo"
	RepositoryUrl string `protobuf:"bytes,2,opt,name=repository_url,json=repositoryUrl,proto3" json:"repository_url,omitempty"`
	// The repository ARN, e.g. "arn:aws:ecr:us-east-1:123456789012:repository/my-repo"
	RepositoryArn string `protobuf:"bytes,3,opt,name=repository_arn,json=repositoryArn,proto3" json:"repository_arn,omitempty"`
	// The registry ID associated with this repository (i.e., the AWS Account ID)
	RegistryId    string `protobuf:"bytes,4,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsEcrRepoStackOutputs) Reset() {
	*x = AwsEcrRepoStackOutputs{}
	mi := &file_project_planton_provider_aws_awsecrrepo_v1_stack_outputs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsEcrRepoStackOutputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsEcrRepoStackOutputs) ProtoMessage() {}

func (x *AwsEcrRepoStackOutputs) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsecrrepo_v1_stack_outputs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsEcrRepoStackOutputs.ProtoReflect.Descriptor instead.
func (*AwsEcrRepoStackOutputs) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsecrrepo_v1_stack_outputs_proto_rawDescGZIP(), []int{0}
}

func (x *AwsEcrRepoStackOutputs) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *AwsEcrRepoStackOutputs) GetRepositoryUrl() string {
	if x != nil {
		return x.RepositoryUrl
	}
	return ""
}

func (x *AwsEcrRepoStackOutputs) GetRepositoryArn() string {
	if x != nil {
		return x.RepositoryArn
	}
	return ""
}

func (x *AwsEcrRepoStackOutputs) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

var File_project_planton_provider_aws_awsecrrepo_v1_stack_outputs_proto protoreflect.FileDescriptor

const file_project_planton_provider_aws_awsecrrepo_v1_stack_outputs_proto_rawDesc = "" +
	"\n" +
	">project/planton/provider/aws/awsecrrepo/v1/stack_outputs.proto\x12*project.planton.provider.aws.awsecrrepo.v1\"\xb0\x01\n" +
	"\x16AwsEcrRepoStackOutputs\x12'\n" +
	"\x0frepository_name\x18\x01 \x01(\tR\x0erepositoryName\x12%\n" +
	"\x0erepository_url\x18\x02 \x01(\tR\rrepositoryUrl\x12%\n" +
	"\x0erepository_arn\x18\x03 \x01(\tR\rrepositoryArn\x12\x1f\n" +
	"\vregistry_id\x18\x04 \x01(\tR\n" +
	"registryIdB\xfb\x02\n" +
	".com.project.planton.provider.aws.awsecrrepo.v1B\x11StackOutputsProtoP\x01Zggithub.com/project-planton/project-planton/apis/project/planton/provider/aws/awsecrrepo/v1;awsecrrepov1\xa2\x02\x05PPPAA\xaa\x02*Project.Planton.Provider.Aws.Awsecrrepo.V1\xca\x02*Project\\Planton\\Provider\\Aws\\Awsecrrepo\\V1\xe2\x026Project\\Planton\\Provider\\Aws\\Awsecrrepo\\V1\\GPBMetadata\xea\x02/Project::Planton::Provider::Aws::Awsecrrepo::V1b\x06proto3"

var (
	file_project_planton_provider_aws_awsecrrepo_v1_stack_outputs_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_awsecrrepo_v1_stack_outputs_proto_rawDescData []byte
)

func file_project_planton_provider_aws_awsecrrepo_v1_stack_outputs_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_awsecrrepo_v1_stack_outputs_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_awsecrrepo_v1_stack_outputs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awsecrrepo_v1_stack_outputs_proto_rawDesc), len(file_project_planton_provider_aws_awsecrrepo_v1_stack_outputs_proto_rawDesc)))
	})
	return file_project_planton_provider_aws_awsecrrepo_v1_stack_outputs_proto_rawDescData
}

var file_project_planton_provider_aws_awsecrrepo_v1_stack_outputs_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_provider_aws_awsecrrepo_v1_stack_outputs_proto_goTypes = []any{
	(*AwsEcrRepoStackOutputs)(nil), // 0: project.planton.provider.aws.awsecrrepo.v1.AwsEcrRepoStackOutputs
}
var file_project_planton_provider_aws_awsecrrepo_v1_stack_outputs_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_awsecrrepo_v1_stack_outputs_proto_init() }
func file_project_planton_provider_aws_awsecrrepo_v1_stack_outputs_proto_init() {
	if File_project_planton_provider_aws_awsecrrepo_v1_stack_outputs_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awsecrrepo_v1_stack_outputs_proto_rawDesc), len(file_project_planton_provider_aws_awsecrrepo_v1_stack_outputs_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_awsecrrepo_v1_stack_outputs_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_awsecrrepo_v1_stack_outputs_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_aws_awsecrrepo_v1_stack_outputs_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_awsecrrepo_v1_stack_outputs_proto = out.File
	file_project_planton_provider_aws_awsecrrepo_v1_stack_outputs_proto_goTypes = nil
	file_project_planton_provider_aws_awsecrrepo_v1_stack_outputs_proto_depIdxs = nil
}
