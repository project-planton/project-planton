// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/aws/awsecrrepo/v1/spec.proto

package awsecrrepov1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AwsEcrRepoSpec defines the configuration for creating an AWS ECR repository
// to store and manage Docker images. Most fields are optional, with recommended
// defaults aligned to best practices (immutable tags, scanning enabled, encryption).
type AwsEcrRepoSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// repositoryName is the name of the ECR repository. Must be unique within
	// the AWS account and region. Commonly includes the microservice or project name.
	// Example: "github.com/team-blue/my-microservice"
	RepositoryName string `protobuf:"bytes,1,opt,name=repository_name,json=repositoryName,proto3" json:"repository_name,omitempty"`
	// indicates whether image tags can be overwritten (MUTABLE) or not (IMMUTABLE).
	ImageImmutable bool `protobuf:"varint,2,opt,name=image_immutable,json=imageImmutable,proto3" json:"image_immutable,omitempty"`
	// encryptionType determines how ECR encrypts images at rest. Default is AES256,
	// using AWS-managed encryption. Use KMS to specify your own KMS key for compliance.
	// EncryptionType determines how images are encrypted at rest in ECR.
	// By default, AWS uses AES-256 (service-managed keys). Choose KMS to use
	// a customer-managed key (CMK).
	EncryptionType string `protobuf:"bytes,3,opt,name=encryption_type,json=encryptionType,proto3" json:"encryption_type,omitempty"`
	// kmsKeyId is the ARN or ID of a KMS key used when encryption_type = KMS.
	// If omitted, AWS uses the default service-managed key for ECR.
	// Ignored if encryption_type = AES256.
	KmsKeyId string `protobuf:"bytes,4,opt,name=kms_key_id,json=kmsKeyId,proto3" json:"kms_key_id,omitempty"`
	// forceDelete, if true, allows deleting the repository even when it contains
	// images (all images get removed on delete). By default, it is false, preventing
	// accidental data loss.
	ForceDelete   bool `protobuf:"varint,5,opt,name=force_delete,json=forceDelete,proto3" json:"force_delete,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsEcrRepoSpec) Reset() {
	*x = AwsEcrRepoSpec{}
	mi := &file_project_planton_provider_aws_awsecrrepo_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsEcrRepoSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsEcrRepoSpec) ProtoMessage() {}

func (x *AwsEcrRepoSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsecrrepo_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsEcrRepoSpec.ProtoReflect.Descriptor instead.
func (*AwsEcrRepoSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsecrrepo_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AwsEcrRepoSpec) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

func (x *AwsEcrRepoSpec) GetImageImmutable() bool {
	if x != nil {
		return x.ImageImmutable
	}
	return false
}

func (x *AwsEcrRepoSpec) GetEncryptionType() string {
	if x != nil {
		return x.EncryptionType
	}
	return ""
}

func (x *AwsEcrRepoSpec) GetKmsKeyId() string {
	if x != nil {
		return x.KmsKeyId
	}
	return ""
}

func (x *AwsEcrRepoSpec) GetForceDelete() bool {
	if x != nil {
		return x.ForceDelete
	}
	return false
}

var File_project_planton_provider_aws_awsecrrepo_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_aws_awsecrrepo_v1_spec_proto_rawDesc = "" +
	"\n" +
	"5project/planton/provider/aws/awsecrrepo/v1/spec.proto\x12*project.planton.provider.aws.awsecrrepo.v1\x1a\x1bbuf/validate/validate.proto\x1a,project/planton/shared/options/options.proto\"\xfc\x01\n" +
	"\x0eAwsEcrRepoSpec\x126\n" +
	"\x0frepository_name\x18\x01 \x01(\tB\r\xbaH\n" +
	"\xc8\x01\x01r\x05\x10\x02\x18\x80\x02R\x0erepositoryName\x12'\n" +
	"\x0fimage_immutable\x18\x02 \x01(\bR\x0eimageImmutable\x12H\n" +
	"\x0fencryption_type\x18\x03 \x01(\tB\x1f\xbaH\x12\xd8\x01\x02r\rR\x06AES256R\x03KMS\x8a\xa6\x1d\x06AES256R\x0eencryptionType\x12\x1c\n" +
	"\n" +
	"kms_key_id\x18\x04 \x01(\tR\bkmsKeyId\x12!\n" +
	"\fforce_delete\x18\x05 \x01(\bR\vforceDeleteB\xf3\x02\n" +
	".com.project.planton.provider.aws.awsecrrepo.v1B\tSpecProtoP\x01Zggithub.com/project-planton/project-planton/apis/project/planton/provider/aws/awsecrrepo/v1;awsecrrepov1\xa2\x02\x05PPPAA\xaa\x02*Project.Planton.Provider.Aws.Awsecrrepo.V1\xca\x02*Project\\Planton\\Provider\\Aws\\Awsecrrepo\\V1\xe2\x026Project\\Planton\\Provider\\Aws\\Awsecrrepo\\V1\\GPBMetadata\xea\x02/Project::Planton::Provider::Aws::Awsecrrepo::V1b\x06proto3"

var (
	file_project_planton_provider_aws_awsecrrepo_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_awsecrrepo_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_aws_awsecrrepo_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_awsecrrepo_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_awsecrrepo_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awsecrrepo_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awsecrrepo_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_aws_awsecrrepo_v1_spec_proto_rawDescData
}

var file_project_planton_provider_aws_awsecrrepo_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_provider_aws_awsecrrepo_v1_spec_proto_goTypes = []any{
	(*AwsEcrRepoSpec)(nil), // 0: project.planton.provider.aws.awsecrrepo.v1.AwsEcrRepoSpec
}
var file_project_planton_provider_aws_awsecrrepo_v1_spec_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_awsecrrepo_v1_spec_proto_init() }
func file_project_planton_provider_aws_awsecrrepo_v1_spec_proto_init() {
	if File_project_planton_provider_aws_awsecrrepo_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awsecrrepo_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awsecrrepo_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_awsecrrepo_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_awsecrrepo_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_aws_awsecrrepo_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_awsecrrepo_v1_spec_proto = out.File
	file_project_planton_provider_aws_awsecrrepo_v1_spec_proto_goTypes = nil
	file_project_planton_provider_aws_awsecrrepo_v1_spec_proto_depIdxs = nil
}
