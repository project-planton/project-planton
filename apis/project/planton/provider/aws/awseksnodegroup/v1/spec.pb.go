// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/aws/awseksnodegroup/v1/spec.proto

package awseksnodegroupv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/project-planton/project-planton/apis/project/planton/shared/foreignkey/v1"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CapacityType defines whether the node group uses on-demand or Spot instances.
type AwsEksNodeGroupCapacityType int32

const (
	// on_demand indicates the node group uses standard on-demand EC2 instances (default).
	AwsEksNodeGroupCapacityType_on_demand AwsEksNodeGroupCapacityType = 0
	// spot indicates the node group uses AWS Spot instances for the worker nodes.
	AwsEksNodeGroupCapacityType_spot AwsEksNodeGroupCapacityType = 1
)

// Enum value maps for AwsEksNodeGroupCapacityType.
var (
	AwsEksNodeGroupCapacityType_name = map[int32]string{
		0: "on_demand",
		1: "spot",
	}
	AwsEksNodeGroupCapacityType_value = map[string]int32{
		"on_demand": 0,
		"spot":      1,
	}
)

func (x AwsEksNodeGroupCapacityType) Enum() *AwsEksNodeGroupCapacityType {
	p := new(AwsEksNodeGroupCapacityType)
	*p = x
	return p
}

func (x AwsEksNodeGroupCapacityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AwsEksNodeGroupCapacityType) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_enumTypes[0].Descriptor()
}

func (AwsEksNodeGroupCapacityType) Type() protoreflect.EnumType {
	return &file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_enumTypes[0]
}

func (x AwsEksNodeGroupCapacityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AwsEksNodeGroupCapacityType.Descriptor instead.
func (AwsEksNodeGroupCapacityType) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_rawDescGZIP(), []int{0}
}

// AwsEksNodeGroupSpec captures the configuration for a managed EKS node group
// (EC2 worker node group) associated with an EKS cluster. It includes essential
// fields covering 80% use-cases, while cluster-level settings are defined in the
// AwsEksCluster resource.
type AwsEksNodeGroupSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// cluster_name is the name of the EKS cluster to attach this node group to.
	// The cluster must already exist (e.g., created by an AwsEksCluster resource).
	// If referencing an AwsEksCluster resource, this pulls its metadata.name.
	ClusterName *v1.StringValueOrRef `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// node_role_arn is the ARN of the IAM role to associate with the EC2 nodes.
	// This role must have the necessary EKS worker node policies. If referencing
	// an AwsIamRole resource, this uses its status.outputs.role_arn.
	NodeRoleArn *v1.StringValueOrRef `protobuf:"bytes,2,opt,name=node_role_arn,json=nodeRoleArn,proto3" json:"node_role_arn,omitempty"`
	// subnet_ids are the IDs of at least two subnets where the worker nodes will be launched.
	// Typically these are private subnets in the cluster's VPC to ensure high availability.
	// If referencing an AwsVpc resource, this defaults to its status.outputs.private_subnets[*].id.
	SubnetIds []*v1.StringValueOrRef `protobuf:"bytes,3,rep,name=subnet_ids,json=subnetIds,proto3" json:"subnet_ids,omitempty"`
	// instance_type is the EC2 instance type for the worker nodes.
	// Example values: "t3.small", "m5.xlarge". Must match the pattern "<family>.<size>",
	// e.g., a letter family and size like nano, micro, small, medium, large, xlarge or Nxlarge.
	InstanceType string `protobuf:"bytes,4,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	// scaling defines the auto-scaling configuration (min, max, desired node counts) for the node group.
	Scaling *AwsEksNodeGroupScalingConfig `protobuf:"bytes,5,opt,name=scaling,proto3" json:"scaling,omitempty"`
	// capacity_type specifies whether to use on-demand or Spot instances for this node group.
	// If not set, it defaults to on_demand.
	CapacityType AwsEksNodeGroupCapacityType `protobuf:"varint,6,opt,name=capacity_type,json=capacityType,proto3,enum=project.planton.provider.aws.awseksnodegroup.v1.AwsEksNodeGroupCapacityType" json:"capacity_type,omitempty"`
	// disk_size_gb is the EBS volume size (in GiB) for each node's root disk.
	// If omitted, it is recommended to use 100 GiB by default.
	DiskSizeGb int32 `protobuf:"varint,7,opt,name=disk_size_gb,json=diskSizeGb,proto3" json:"disk_size_gb,omitempty"`
	// ssh_key_name is the name of an existing EC2 Key Pair to enable SSH access to nodes.
	// If provided, nodes will allow SSH using this key. Max length is 255 characters.
	SshKeyName string `protobuf:"bytes,8,opt,name=ssh_key_name,json=sshKeyName,proto3" json:"ssh_key_name,omitempty"`
	// labels is a set of Kubernetes labels to apply to the node group (and its nodes).
	// Keys and values can be at most 63 characters each.
	Labels        map[string]string `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsEksNodeGroupSpec) Reset() {
	*x = AwsEksNodeGroupSpec{}
	mi := &file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsEksNodeGroupSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsEksNodeGroupSpec) ProtoMessage() {}

func (x *AwsEksNodeGroupSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsEksNodeGroupSpec.ProtoReflect.Descriptor instead.
func (*AwsEksNodeGroupSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AwsEksNodeGroupSpec) GetClusterName() *v1.StringValueOrRef {
	if x != nil {
		return x.ClusterName
	}
	return nil
}

func (x *AwsEksNodeGroupSpec) GetNodeRoleArn() *v1.StringValueOrRef {
	if x != nil {
		return x.NodeRoleArn
	}
	return nil
}

func (x *AwsEksNodeGroupSpec) GetSubnetIds() []*v1.StringValueOrRef {
	if x != nil {
		return x.SubnetIds
	}
	return nil
}

func (x *AwsEksNodeGroupSpec) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *AwsEksNodeGroupSpec) GetScaling() *AwsEksNodeGroupScalingConfig {
	if x != nil {
		return x.Scaling
	}
	return nil
}

func (x *AwsEksNodeGroupSpec) GetCapacityType() AwsEksNodeGroupCapacityType {
	if x != nil {
		return x.CapacityType
	}
	return AwsEksNodeGroupCapacityType_on_demand
}

func (x *AwsEksNodeGroupSpec) GetDiskSizeGb() int32 {
	if x != nil {
		return x.DiskSizeGb
	}
	return 0
}

func (x *AwsEksNodeGroupSpec) GetSshKeyName() string {
	if x != nil {
		return x.SshKeyName
	}
	return ""
}

func (x *AwsEksNodeGroupSpec) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// ScalingConfig defines the node group scaling constraints.
type AwsEksNodeGroupScalingConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// min_size is the minimum number of nodes to keep in the group (must be at least 1).
	MinSize int32 `protobuf:"varint,1,opt,name=min_size,json=minSize,proto3" json:"min_size,omitempty"`
	// max_size is the maximum number of nodes allowed in the group.
	// Must be >= min_size.
	MaxSize int32 `protobuf:"varint,2,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	// desired_size is the initial or target number of nodes for the group.
	// It should be between min_size and max_size (inclusive).
	DesiredSize   int32 `protobuf:"varint,3,opt,name=desired_size,json=desiredSize,proto3" json:"desired_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsEksNodeGroupScalingConfig) Reset() {
	*x = AwsEksNodeGroupScalingConfig{}
	mi := &file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsEksNodeGroupScalingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsEksNodeGroupScalingConfig) ProtoMessage() {}

func (x *AwsEksNodeGroupScalingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsEksNodeGroupScalingConfig.ProtoReflect.Descriptor instead.
func (*AwsEksNodeGroupScalingConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *AwsEksNodeGroupScalingConfig) GetMinSize() int32 {
	if x != nil {
		return x.MinSize
	}
	return 0
}

func (x *AwsEksNodeGroupScalingConfig) GetMaxSize() int32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *AwsEksNodeGroupScalingConfig) GetDesiredSize() int32 {
	if x != nil {
		return x.DesiredSize
	}
	return 0
}

var File_project_planton_provider_aws_awseksnodegroup_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_rawDesc = "" +
	"\n" +
	":project/planton/provider/aws/awseksnodegroup/v1/spec.proto\x12/project.planton.provider.aws.awseksnodegroup.v1\x1a\x1bbuf/validate/validate.proto\x1a6project/planton/shared/foreignkey/v1/foreign_key.proto\x1a,project/planton/shared/options/options.proto\"\xd7\a\n" +
	"\x13AwsEksNodeGroupSpec\x12w\n" +
	"\fcluster_name\x18\x01 \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB\x1c\xbaH\x03\xc8\x01\x01\x88\xd4a\xcf\x01\x92\xd4a\rmetadata.nameR\vclusterName\x12\x82\x01\n" +
	"\rnode_role_arn\x18\x02 \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB&\xbaH\x03\xc8\x01\x01\x88\xd4a\xd0\x01\x92\xd4a\x17status.outputs.role_arnR\vnodeRoleArn\x12\x90\x01\n" +
	"\n" +
	"subnet_ids\x18\x03 \x03(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB9\xbaH\b\xc8\x01\x01\x92\x01\x02\b\x02\x88\xd4a\xd9\x01\x92\xd4a%status.outputs.private_subnets.[*].idR\tsubnetIds\x12+\n" +
	"\rinstance_type\x18\x04 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\finstanceType\x12o\n" +
	"\ascaling\x18\x05 \x01(\v2M.project.planton.provider.aws.awseksnodegroup.v1.AwsEksNodeGroupScalingConfigB\x06\xbaH\x03\xc8\x01\x01R\ascaling\x12\x80\x01\n" +
	"\rcapacity_type\x18\x06 \x01(\x0e2L.project.planton.provider.aws.awseksnodegroup.v1.AwsEksNodeGroupCapacityTypeB\r\x92\xa6\x1d\ton_demandR\fcapacityType\x12)\n" +
	"\fdisk_size_gb\x18\a \x01(\x05B\a\x92\xa6\x1d\x03100R\n" +
	"diskSizeGb\x12*\n" +
	"\fssh_key_name\x18\b \x01(\tB\b\xbaH\x05r\x03\x18\xff\x01R\n" +
	"sshKeyName\x12|\n" +
	"\x06labels\x18\t \x03(\v2P.project.planton.provider.aws.awseksnodegroup.v1.AwsEksNodeGroupSpec.LabelsEntryB\x12\xbaH\x0f\x9a\x01\f\"\x04r\x02\x18?*\x04r\x02\x18?R\x06labels\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x92\x01\n" +
	"\x1cAwsEksNodeGroupScalingConfig\x12\"\n" +
	"\bmin_size\x18\x01 \x01(\x05B\a\xbaH\x04\x1a\x02(\x01R\aminSize\x12\"\n" +
	"\bmax_size\x18\x02 \x01(\x05B\a\xbaH\x04\x1a\x02(\x01R\amaxSize\x12*\n" +
	"\fdesired_size\x18\x03 \x01(\x05B\a\xbaH\x04\x1a\x02(\x01R\vdesiredSize*6\n" +
	"\x1bAwsEksNodeGroupCapacityType\x12\r\n" +
	"\ton_demand\x10\x00\x12\b\n" +
	"\x04spot\x10\x01B\x96\x03\n" +
	"3com.project.planton.provider.aws.awseksnodegroup.v1B\tSpecProtoP\x01Zqgithub.com/project-planton/project-planton/apis/project/planton/provider/aws/awseksnodegroup/v1;awseksnodegroupv1\xa2\x02\x05PPPAA\xaa\x02/Project.Planton.Provider.Aws.Awseksnodegroup.V1\xca\x02/Project\\Planton\\Provider\\Aws\\Awseksnodegroup\\V1\xe2\x02;Project\\Planton\\Provider\\Aws\\Awseksnodegroup\\V1\\GPBMetadata\xea\x024Project::Planton::Provider::Aws::Awseksnodegroup::V1b\x06proto3"

var (
	file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_rawDescData
}

var file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_goTypes = []any{
	(AwsEksNodeGroupCapacityType)(0),     // 0: project.planton.provider.aws.awseksnodegroup.v1.AwsEksNodeGroupCapacityType
	(*AwsEksNodeGroupSpec)(nil),          // 1: project.planton.provider.aws.awseksnodegroup.v1.AwsEksNodeGroupSpec
	(*AwsEksNodeGroupScalingConfig)(nil), // 2: project.planton.provider.aws.awseksnodegroup.v1.AwsEksNodeGroupScalingConfig
	nil,                                  // 3: project.planton.provider.aws.awseksnodegroup.v1.AwsEksNodeGroupSpec.LabelsEntry
	(*v1.StringValueOrRef)(nil),          // 4: project.planton.shared.foreignkey.v1.StringValueOrRef
}
var file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_depIdxs = []int32{
	4, // 0: project.planton.provider.aws.awseksnodegroup.v1.AwsEksNodeGroupSpec.cluster_name:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	4, // 1: project.planton.provider.aws.awseksnodegroup.v1.AwsEksNodeGroupSpec.node_role_arn:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	4, // 2: project.planton.provider.aws.awseksnodegroup.v1.AwsEksNodeGroupSpec.subnet_ids:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	2, // 3: project.planton.provider.aws.awseksnodegroup.v1.AwsEksNodeGroupSpec.scaling:type_name -> project.planton.provider.aws.awseksnodegroup.v1.AwsEksNodeGroupScalingConfig
	0, // 4: project.planton.provider.aws.awseksnodegroup.v1.AwsEksNodeGroupSpec.capacity_type:type_name -> project.planton.provider.aws.awseksnodegroup.v1.AwsEksNodeGroupCapacityType
	3, // 5: project.planton.provider.aws.awseksnodegroup.v1.AwsEksNodeGroupSpec.labels:type_name -> project.planton.provider.aws.awseksnodegroup.v1.AwsEksNodeGroupSpec.LabelsEntry
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_init() }
func file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_init() {
	if File_project_planton_provider_aws_awseksnodegroup_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_depIdxs,
		EnumInfos:         file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_enumTypes,
		MessageInfos:      file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_awseksnodegroup_v1_spec_proto = out.File
	file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_goTypes = nil
	file_project_planton_provider_aws_awseksnodegroup_v1_spec_proto_depIdxs = nil
}
