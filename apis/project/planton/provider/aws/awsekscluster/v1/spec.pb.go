// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/aws/awsekscluster/v1/spec.proto

package awseksclusterv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AwsEksClusterSpec defines the specification required to deploy an Amazon Elastic Kubernetes Service (EKS) cluster.
// This message encapsulates all configurations necessary for setting up an EKS cluster, including the AWS region
// where the cluster will be deployed,
// the VPC (Virtual Private Cloud) settings, and the management mode for worker nodes.
// Amazon EKS is a managed Kubernetes service that simplifies running Kubernetes on AWS without needing to install,
// operate, and maintain your own Kubernetes control plane or nodes.
// By providing this specification, users can automate the EKS cluster creation process with specified configurations,
// ensuring a consistent and repeatable setup for their AWS environment.
// This is particularly useful for organizations looking to deploy containerized applications in a scalable and
// highly available manner.
type AwsEksClusterSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The AWS region in which to create the EKS cluster.
	// This must be a valid AWS region where EKS is available.
	// Note: The EKS cluster will be recreated if this value is updated.
	// For a list of AWS regions, see: https://aws.amazon.com/about-aws/global-infrastructure/regions_az/
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// Security Groups for the EKS cluster
	SecurityGroups []string `protobuf:"bytes,2,rep,name=security_groups,json=securityGroups,proto3" json:"security_groups,omitempty"`
	// Subnets for the EKS cluster
	Subnets []string `protobuf:"bytes,3,rep,name=subnets,proto3" json:"subnets,omitempty"`
	// role arn for the EKS cluster
	RoleArn string `protobuf:"bytes,4,opt,name=role_arn,json=roleArn,proto3" json:"role_arn,omitempty"`
	// Worker Node Role ARN
	NodeRoleArn string `protobuf:"bytes,5,opt,name=node_role_arn,json=nodeRoleArn,proto3" json:"node_role_arn,omitempty"`
	// Instance type for the EKS worker nodes
	InstanceType string `protobuf:"bytes,6,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	// Desired size of the EKS worker node group
	DesiredSize int32 `protobuf:"varint,7,opt,name=desired_size,json=desiredSize,proto3" json:"desired_size,omitempty"`
	// Maximum size of the EKS worker node group
	MaxSize int32 `protobuf:"varint,8,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	// Minimum size of the EKS worker node group
	MinSize       int32             `protobuf:"varint,9,opt,name=min_size,json=minSize,proto3" json:"min_size,omitempty"`
	Tags          map[string]string `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsEksClusterSpec) Reset() {
	*x = AwsEksClusterSpec{}
	mi := &file_project_planton_provider_aws_awsekscluster_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsEksClusterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsEksClusterSpec) ProtoMessage() {}

func (x *AwsEksClusterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsekscluster_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsEksClusterSpec.ProtoReflect.Descriptor instead.
func (*AwsEksClusterSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsekscluster_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AwsEksClusterSpec) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AwsEksClusterSpec) GetSecurityGroups() []string {
	if x != nil {
		return x.SecurityGroups
	}
	return nil
}

func (x *AwsEksClusterSpec) GetSubnets() []string {
	if x != nil {
		return x.Subnets
	}
	return nil
}

func (x *AwsEksClusterSpec) GetRoleArn() string {
	if x != nil {
		return x.RoleArn
	}
	return ""
}

func (x *AwsEksClusterSpec) GetNodeRoleArn() string {
	if x != nil {
		return x.NodeRoleArn
	}
	return ""
}

func (x *AwsEksClusterSpec) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *AwsEksClusterSpec) GetDesiredSize() int32 {
	if x != nil {
		return x.DesiredSize
	}
	return 0
}

func (x *AwsEksClusterSpec) GetMaxSize() int32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *AwsEksClusterSpec) GetMinSize() int32 {
	if x != nil {
		return x.MinSize
	}
	return 0
}

func (x *AwsEksClusterSpec) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

var File_project_planton_provider_aws_awsekscluster_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_aws_awsekscluster_v1_spec_proto_rawDesc = "" +
	"\n" +
	"8project/planton/provider/aws/awsekscluster/v1/spec.proto\x12-project.planton.provider.aws.awsekscluster.v1\x1a\x1bbuf/validate/validate.proto\x1a8project/planton/provider/aws/awsekscluster/v1/enum.proto\"\xd4\x03\n" +
	"\x11AwsEksClusterSpec\x12\x1e\n" +
	"\x06region\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x06region\x12'\n" +
	"\x0fsecurity_groups\x18\x02 \x03(\tR\x0esecurityGroups\x12\x18\n" +
	"\asubnets\x18\x03 \x03(\tR\asubnets\x12\x19\n" +
	"\brole_arn\x18\x04 \x01(\tR\aroleArn\x12\"\n" +
	"\rnode_role_arn\x18\x05 \x01(\tR\vnodeRoleArn\x12+\n" +
	"\rinstance_type\x18\x06 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\finstanceType\x12!\n" +
	"\fdesired_size\x18\a \x01(\x05R\vdesiredSize\x12\x19\n" +
	"\bmax_size\x18\b \x01(\x05R\amaxSize\x12\x19\n" +
	"\bmin_size\x18\t \x01(\x05R\aminSize\x12^\n" +
	"\x04tags\x18\n" +
	" \x03(\v2J.project.planton.provider.aws.awsekscluster.v1.AwsEksClusterSpec.TagsEntryR\x04tags\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x88\x03\n" +
	"1com.project.planton.provider.aws.awsekscluster.v1B\tSpecProtoP\x01Zmgithub.com/project-planton/project-planton/apis/project/planton/provider/aws/awsekscluster/v1;awseksclusterv1\xa2\x02\x05PPPAA\xaa\x02-Project.Planton.Provider.Aws.Awsekscluster.V1\xca\x02-Project\\Planton\\Provider\\Aws\\Awsekscluster\\V1\xe2\x029Project\\Planton\\Provider\\Aws\\Awsekscluster\\V1\\GPBMetadata\xea\x022Project::Planton::Provider::Aws::Awsekscluster::V1b\x06proto3"

var (
	file_project_planton_provider_aws_awsekscluster_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_awsekscluster_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_aws_awsekscluster_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_awsekscluster_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_awsekscluster_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awsekscluster_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awsekscluster_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_aws_awsekscluster_v1_spec_proto_rawDescData
}

var file_project_planton_provider_aws_awsekscluster_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_project_planton_provider_aws_awsekscluster_v1_spec_proto_goTypes = []any{
	(*AwsEksClusterSpec)(nil), // 0: project.planton.provider.aws.awsekscluster.v1.AwsEksClusterSpec
	nil,                       // 1: project.planton.provider.aws.awsekscluster.v1.AwsEksClusterSpec.TagsEntry
}
var file_project_planton_provider_aws_awsekscluster_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.aws.awsekscluster.v1.AwsEksClusterSpec.tags:type_name -> project.planton.provider.aws.awsekscluster.v1.AwsEksClusterSpec.TagsEntry
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_awsekscluster_v1_spec_proto_init() }
func file_project_planton_provider_aws_awsekscluster_v1_spec_proto_init() {
	if File_project_planton_provider_aws_awsekscluster_v1_spec_proto != nil {
		return
	}
	file_project_planton_provider_aws_awsekscluster_v1_enum_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awsekscluster_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awsekscluster_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_awsekscluster_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_awsekscluster_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_aws_awsekscluster_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_awsekscluster_v1_spec_proto = out.File
	file_project_planton_provider_aws_awsekscluster_v1_spec_proto_goTypes = nil
	file_project_planton_provider_aws_awsekscluster_v1_spec_proto_depIdxs = nil
}
