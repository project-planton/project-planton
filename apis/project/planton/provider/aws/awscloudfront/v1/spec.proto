syntax = "proto3";

package project.planton.provider.aws.awscloudfront.v1;

import "buf/validate/validate.proto";

// AwsCloudFrontSpec captures common fields used to configure a CloudFront distribution.
message AwsCloudFrontSpec {
  // Whether the distribution is enabled.
  bool enabled = 1;

  // Aliases (CNAMEs) for the distribution, e.g., "cdn.example.com".
  repeated string aliases = 2 [
    (buf.validate.field).repeated.unique = true,
    (buf.validate.field).repeated.items = {
      string: {
        pattern: "^[A-Za-z0-9\\-\\.]+\\.[A-Za-z]{2,}$"
      }
    }
  ];

  // ACM certificate ARN for custom domains in the us-east-1 region.
  string certificate_arn = 3 [
    (buf.validate.field).string.pattern = "^$|^arn:aws:acm:us-east-1:[0-9]{12}:certificate/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$"
  ];

  // Price class for edge locations.
  enum PriceClass {
    PRICE_CLASS_UNSPECIFIED = 0;
    PRICE_CLASS_100 = 1;
    PRICE_CLASS_200 = 2;
    PRICE_CLASS_ALL = 3;
  }
  PriceClass price_class = 4 [(buf.validate.field).enum.defined_only = true];

  // Origin definition.
  message Origin {
    // DNS name of the origin, e.g., "my-bucket.s3.amazonaws.com".
    string domain_name = 1 [
      (buf.validate.field).string.min_len = 1,
      (buf.validate.field).string.pattern = "^[A-Za-z0-9\\-\\.]+\\.[A-Za-z]{2,}$"
    ];

    // Optional origin path that CloudFront appends to requests.
    string origin_path = 2 [
      (buf.validate.field).string.pattern = "^$|^/[A-Za-z0-9\\-\\_\\/\\.]*$"
    ];

    // Whether this origin is used as the default origin for the distribution.
    // Exactly one origin must be marked as default.
    bool is_default = 3;
  }

  // List of origins available to the distribution.
  // Must contain at least one origin with exactly one marked as default.
  repeated Origin origins = 5 [(buf.validate.field).repeated.min_items = 1];

  // Default root object, e.g., "index.html".
  string default_root_object = 6 [
    (buf.validate.field).string.pattern = "^[A-Za-z0-9\\-\\.\\_]*$"
  ];

  // Conditional validations
  option (buf.validate.message).cel = {
    id: "aliases_require_cert",
    message: "certificate_arn must be set when aliases are provided",
    expression: "this.aliases.size() == 0 || this.certificate_arn != \"\""
  };

  option (buf.validate.message).cel = {
    id: "exactly_one_default_origin",
    message: "exactly one origin must be marked as default",
    expression: "this.origins.filter(o, o.is_default).size() == 1"
  };
}


