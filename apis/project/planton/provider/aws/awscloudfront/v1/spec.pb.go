// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/aws/awscloudfront/v1/spec.proto

package awscloudfrontv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AwsCloudFrontSpec_PriceClass int32

const (
	AwsCloudFrontSpec_PRICE_CLASS_UNSPECIFIED AwsCloudFrontSpec_PriceClass = 0
	AwsCloudFrontSpec_PRICE_CLASS_ALL         AwsCloudFrontSpec_PriceClass = 1 // All edge locations
	AwsCloudFrontSpec_PRICE_CLASS_200         AwsCloudFrontSpec_PriceClass = 2 // Most locations (excludes highest-cost)
	AwsCloudFrontSpec_PRICE_CLASS_100         AwsCloudFrontSpec_PriceClass = 3 // US, Canada & Europe only
)

// Enum value maps for AwsCloudFrontSpec_PriceClass.
var (
	AwsCloudFrontSpec_PriceClass_name = map[int32]string{
		0: "PRICE_CLASS_UNSPECIFIED",
		1: "PRICE_CLASS_ALL",
		2: "PRICE_CLASS_200",
		3: "PRICE_CLASS_100",
	}
	AwsCloudFrontSpec_PriceClass_value = map[string]int32{
		"PRICE_CLASS_UNSPECIFIED": 0,
		"PRICE_CLASS_ALL":         1,
		"PRICE_CLASS_200":         2,
		"PRICE_CLASS_100":         3,
	}
)

func (x AwsCloudFrontSpec_PriceClass) Enum() *AwsCloudFrontSpec_PriceClass {
	p := new(AwsCloudFrontSpec_PriceClass)
	*p = x
	return p
}

func (x AwsCloudFrontSpec_PriceClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AwsCloudFrontSpec_PriceClass) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_provider_aws_awscloudfront_v1_spec_proto_enumTypes[0].Descriptor()
}

func (AwsCloudFrontSpec_PriceClass) Type() protoreflect.EnumType {
	return &file_project_planton_provider_aws_awscloudfront_v1_spec_proto_enumTypes[0]
}

func (x AwsCloudFrontSpec_PriceClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AwsCloudFrontSpec_PriceClass.Descriptor instead.
func (AwsCloudFrontSpec_PriceClass) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awscloudfront_v1_spec_proto_rawDescGZIP(), []int{0, 0}
}

type AwsCloudFrontSpec_ViewerProtocolPolicy int32

const (
	AwsCloudFrontSpec_VIEWER_PROTOCOL_POLICY_UNSPECIFIED AwsCloudFrontSpec_ViewerProtocolPolicy = 0
	AwsCloudFrontSpec_ALLOW_ALL                          AwsCloudFrontSpec_ViewerProtocolPolicy = 1 // Accept HTTP or HTTPS
	AwsCloudFrontSpec_HTTPS_ONLY                         AwsCloudFrontSpec_ViewerProtocolPolicy = 2 // Require HTTPS
	AwsCloudFrontSpec_REDIRECT_TO_HTTPS                  AwsCloudFrontSpec_ViewerProtocolPolicy = 3 // Redirect HTTP to HTTPS
)

// Enum value maps for AwsCloudFrontSpec_ViewerProtocolPolicy.
var (
	AwsCloudFrontSpec_ViewerProtocolPolicy_name = map[int32]string{
		0: "VIEWER_PROTOCOL_POLICY_UNSPECIFIED",
		1: "ALLOW_ALL",
		2: "HTTPS_ONLY",
		3: "REDIRECT_TO_HTTPS",
	}
	AwsCloudFrontSpec_ViewerProtocolPolicy_value = map[string]int32{
		"VIEWER_PROTOCOL_POLICY_UNSPECIFIED": 0,
		"ALLOW_ALL":                          1,
		"HTTPS_ONLY":                         2,
		"REDIRECT_TO_HTTPS":                  3,
	}
)

func (x AwsCloudFrontSpec_ViewerProtocolPolicy) Enum() *AwsCloudFrontSpec_ViewerProtocolPolicy {
	p := new(AwsCloudFrontSpec_ViewerProtocolPolicy)
	*p = x
	return p
}

func (x AwsCloudFrontSpec_ViewerProtocolPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AwsCloudFrontSpec_ViewerProtocolPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_provider_aws_awscloudfront_v1_spec_proto_enumTypes[1].Descriptor()
}

func (AwsCloudFrontSpec_ViewerProtocolPolicy) Type() protoreflect.EnumType {
	return &file_project_planton_provider_aws_awscloudfront_v1_spec_proto_enumTypes[1]
}

func (x AwsCloudFrontSpec_ViewerProtocolPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AwsCloudFrontSpec_ViewerProtocolPolicy.Descriptor instead.
func (AwsCloudFrontSpec_ViewerProtocolPolicy) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awscloudfront_v1_spec_proto_rawDescGZIP(), []int{0, 1}
}

type AwsCloudFrontSpec_EventType int32

const (
	AwsCloudFrontSpec_EVENT_TYPE_UNSPECIFIED AwsCloudFrontSpec_EventType = 0
	AwsCloudFrontSpec_VIEWER_REQUEST         AwsCloudFrontSpec_EventType = 1
	AwsCloudFrontSpec_VIEWER_RESPONSE        AwsCloudFrontSpec_EventType = 2
	AwsCloudFrontSpec_ORIGIN_REQUEST         AwsCloudFrontSpec_EventType = 3
	AwsCloudFrontSpec_ORIGIN_RESPONSE        AwsCloudFrontSpec_EventType = 4
)

// Enum value maps for AwsCloudFrontSpec_EventType.
var (
	AwsCloudFrontSpec_EventType_name = map[int32]string{
		0: "EVENT_TYPE_UNSPECIFIED",
		1: "VIEWER_REQUEST",
		2: "VIEWER_RESPONSE",
		3: "ORIGIN_REQUEST",
		4: "ORIGIN_RESPONSE",
	}
	AwsCloudFrontSpec_EventType_value = map[string]int32{
		"EVENT_TYPE_UNSPECIFIED": 0,
		"VIEWER_REQUEST":         1,
		"VIEWER_RESPONSE":        2,
		"ORIGIN_REQUEST":         3,
		"ORIGIN_RESPONSE":        4,
	}
)

func (x AwsCloudFrontSpec_EventType) Enum() *AwsCloudFrontSpec_EventType {
	p := new(AwsCloudFrontSpec_EventType)
	*p = x
	return p
}

func (x AwsCloudFrontSpec_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AwsCloudFrontSpec_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_provider_aws_awscloudfront_v1_spec_proto_enumTypes[2].Descriptor()
}

func (AwsCloudFrontSpec_EventType) Type() protoreflect.EnumType {
	return &file_project_planton_provider_aws_awscloudfront_v1_spec_proto_enumTypes[2]
}

func (x AwsCloudFrontSpec_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AwsCloudFrontSpec_EventType.Descriptor instead.
func (AwsCloudFrontSpec_EventType) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awscloudfront_v1_spec_proto_rawDescGZIP(), []int{0, 2}
}

type AwsCloudFrontSpec_MinimumProtocolVersion int32

const (
	AwsCloudFrontSpec_MIN_PROTOCOL_VERSION_UNSPECIFIED AwsCloudFrontSpec_MinimumProtocolVersion = 0
	AwsCloudFrontSpec_SSLV3                            AwsCloudFrontSpec_MinimumProtocolVersion = 1
	AwsCloudFrontSpec_TLSV1                            AwsCloudFrontSpec_MinimumProtocolVersion = 2
	AwsCloudFrontSpec_TLSV1_2016                       AwsCloudFrontSpec_MinimumProtocolVersion = 3
	AwsCloudFrontSpec_TLSV1_1_2016                     AwsCloudFrontSpec_MinimumProtocolVersion = 4
	AwsCloudFrontSpec_TLSV1_2_2018                     AwsCloudFrontSpec_MinimumProtocolVersion = 5
)

// Enum value maps for AwsCloudFrontSpec_MinimumProtocolVersion.
var (
	AwsCloudFrontSpec_MinimumProtocolVersion_name = map[int32]string{
		0: "MIN_PROTOCOL_VERSION_UNSPECIFIED",
		1: "SSLV3",
		2: "TLSV1",
		3: "TLSV1_2016",
		4: "TLSV1_1_2016",
		5: "TLSV1_2_2018",
	}
	AwsCloudFrontSpec_MinimumProtocolVersion_value = map[string]int32{
		"MIN_PROTOCOL_VERSION_UNSPECIFIED": 0,
		"SSLV3":                            1,
		"TLSV1":                            2,
		"TLSV1_2016":                       3,
		"TLSV1_1_2016":                     4,
		"TLSV1_2_2018":                     5,
	}
)

func (x AwsCloudFrontSpec_MinimumProtocolVersion) Enum() *AwsCloudFrontSpec_MinimumProtocolVersion {
	p := new(AwsCloudFrontSpec_MinimumProtocolVersion)
	*p = x
	return p
}

func (x AwsCloudFrontSpec_MinimumProtocolVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AwsCloudFrontSpec_MinimumProtocolVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_provider_aws_awscloudfront_v1_spec_proto_enumTypes[3].Descriptor()
}

func (AwsCloudFrontSpec_MinimumProtocolVersion) Type() protoreflect.EnumType {
	return &file_project_planton_provider_aws_awscloudfront_v1_spec_proto_enumTypes[3]
}

func (x AwsCloudFrontSpec_MinimumProtocolVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AwsCloudFrontSpec_MinimumProtocolVersion.Descriptor instead.
func (AwsCloudFrontSpec_MinimumProtocolVersion) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awscloudfront_v1_spec_proto_rawDescGZIP(), []int{0, 3}
}

type AwsCloudFrontSpec_RestrictionType int32

const (
	AwsCloudFrontSpec_RESTRICTION_TYPE_UNSPECIFIED AwsCloudFrontSpec_RestrictionType = 0
	AwsCloudFrontSpec_NONE                         AwsCloudFrontSpec_RestrictionType = 1 // No geographic restrictions
	AwsCloudFrontSpec_WHITELIST                    AwsCloudFrontSpec_RestrictionType = 2 // Allow only specified locations
	AwsCloudFrontSpec_BLACKLIST                    AwsCloudFrontSpec_RestrictionType = 3 // Block specified locations
)

// Enum value maps for AwsCloudFrontSpec_RestrictionType.
var (
	AwsCloudFrontSpec_RestrictionType_name = map[int32]string{
		0: "RESTRICTION_TYPE_UNSPECIFIED",
		1: "NONE",
		2: "WHITELIST",
		3: "BLACKLIST",
	}
	AwsCloudFrontSpec_RestrictionType_value = map[string]int32{
		"RESTRICTION_TYPE_UNSPECIFIED": 0,
		"NONE":                         1,
		"WHITELIST":                    2,
		"BLACKLIST":                    3,
	}
)

func (x AwsCloudFrontSpec_RestrictionType) Enum() *AwsCloudFrontSpec_RestrictionType {
	p := new(AwsCloudFrontSpec_RestrictionType)
	*p = x
	return p
}

func (x AwsCloudFrontSpec_RestrictionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AwsCloudFrontSpec_RestrictionType) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_provider_aws_awscloudfront_v1_spec_proto_enumTypes[4].Descriptor()
}

func (AwsCloudFrontSpec_RestrictionType) Type() protoreflect.EnumType {
	return &file_project_planton_provider_aws_awscloudfront_v1_spec_proto_enumTypes[4]
}

func (x AwsCloudFrontSpec_RestrictionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AwsCloudFrontSpec_RestrictionType.Descriptor instead.
func (AwsCloudFrontSpec_RestrictionType) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awscloudfront_v1_spec_proto_rawDescGZIP(), []int{0, 4}
}

// Specification for an Amazon CloudFront distribution.
type AwsCloudFrontSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Friendly name for the distribution.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Enables or disables the distribution.
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Alternative domain names (CNAMEs) for the distribution.
	Aliases []string `protobuf:"bytes,3,rep,name=aliases,proto3" json:"aliases,omitempty"`
	// Optional user-supplied description.
	Comment string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	// Billing tier that controls which edge locations are used.
	PriceClass AwsCloudFrontSpec_PriceClass `protobuf:"varint,5,opt,name=price_class,json=priceClass,proto3,enum=project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec_PriceClass" json:"price_class,omitempty"`
	// One or more origin servers from which CloudFront pulls content.
	Origins []*AwsCloudFrontSpec_Origin `protobuf:"bytes,6,rep,name=origins,proto3" json:"origins,omitempty"`
	// Behavior applied when no other cache behavior matches.
	DefaultCacheBehavior *AwsCloudFrontSpec_DefaultCacheBehavior `protobuf:"bytes,7,opt,name=default_cache_behavior,json=defaultCacheBehavior,proto3" json:"default_cache_behavior,omitempty"`
	// Ordered list of path-based cache behaviors.
	OrderedCacheBehaviors []*AwsCloudFrontSpec_CacheBehavior `protobuf:"bytes,8,rep,name=ordered_cache_behaviors,json=orderedCacheBehaviors,proto3" json:"ordered_cache_behaviors,omitempty"`
	// SSL/TLS certificate settings for HTTPS viewers.
	ViewerCertificate *AwsCloudFrontSpec_ViewerCertificate `protobuf:"bytes,9,opt,name=viewer_certificate,json=viewerCertificate,proto3" json:"viewer_certificate,omitempty"`
	// Access-log delivery to Amazon S3.
	Logging *AwsCloudFrontSpec_LoggingConfig `protobuf:"bytes,10,opt,name=logging,proto3" json:"logging,omitempty"`
	// Geo restrictions and related rules.
	Restrictions *AwsCloudFrontSpec_Restrictions `protobuf:"bytes,11,opt,name=restrictions,proto3" json:"restrictions,omitempty"`
	// Arbitrary resource tags.
	Tags          map[string]string `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsCloudFrontSpec) Reset() {
	*x = AwsCloudFrontSpec{}
	mi := &file_project_planton_provider_aws_awscloudfront_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsCloudFrontSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsCloudFrontSpec) ProtoMessage() {}

func (x *AwsCloudFrontSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awscloudfront_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsCloudFrontSpec.ProtoReflect.Descriptor instead.
func (*AwsCloudFrontSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awscloudfront_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AwsCloudFrontSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AwsCloudFrontSpec) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AwsCloudFrontSpec) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *AwsCloudFrontSpec) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *AwsCloudFrontSpec) GetPriceClass() AwsCloudFrontSpec_PriceClass {
	if x != nil {
		return x.PriceClass
	}
	return AwsCloudFrontSpec_PRICE_CLASS_UNSPECIFIED
}

func (x *AwsCloudFrontSpec) GetOrigins() []*AwsCloudFrontSpec_Origin {
	if x != nil {
		return x.Origins
	}
	return nil
}

func (x *AwsCloudFrontSpec) GetDefaultCacheBehavior() *AwsCloudFrontSpec_DefaultCacheBehavior {
	if x != nil {
		return x.DefaultCacheBehavior
	}
	return nil
}

func (x *AwsCloudFrontSpec) GetOrderedCacheBehaviors() []*AwsCloudFrontSpec_CacheBehavior {
	if x != nil {
		return x.OrderedCacheBehaviors
	}
	return nil
}

func (x *AwsCloudFrontSpec) GetViewerCertificate() *AwsCloudFrontSpec_ViewerCertificate {
	if x != nil {
		return x.ViewerCertificate
	}
	return nil
}

func (x *AwsCloudFrontSpec) GetLogging() *AwsCloudFrontSpec_LoggingConfig {
	if x != nil {
		return x.Logging
	}
	return nil
}

func (x *AwsCloudFrontSpec) GetRestrictions() *AwsCloudFrontSpec_Restrictions {
	if x != nil {
		return x.Restrictions
	}
	return nil
}

func (x *AwsCloudFrontSpec) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Origin server definition.
type AwsCloudFrontSpec_Origin struct {
	state              protoimpl.MessageState                `protogen:"open.v1"`
	Id                 string                                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                                      // Unique identifier within the distribution
	DomainName         string                                `protobuf:"bytes,2,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`                                                                                    // DNS name of the origin
	OriginPath         string                                `protobuf:"bytes,3,opt,name=origin_path,json=originPath,proto3" json:"origin_path,omitempty"`                                                                                    // Optional URI path prefix
	CustomHeaders      map[string]string                     `protobuf:"bytes,4,rep,name=custom_headers,json=customHeaders,proto3" json:"custom_headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Headers to forward to the origin
	S3OriginConfig     *AwsCloudFrontSpec_S3OriginConfig     `protobuf:"bytes,5,opt,name=s3_origin_config,json=s3OriginConfig,proto3" json:"s3_origin_config,omitempty"`                                                                      // S3-specific settings
	CustomOriginConfig *AwsCloudFrontSpec_CustomOriginConfig `protobuf:"bytes,6,opt,name=custom_origin_config,json=customOriginConfig,proto3" json:"custom_origin_config,omitempty"`                                                          // Non-S3 settings
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AwsCloudFrontSpec_Origin) Reset() {
	*x = AwsCloudFrontSpec_Origin{}
	mi := &file_project_planton_provider_aws_awscloudfront_v1_spec_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsCloudFrontSpec_Origin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsCloudFrontSpec_Origin) ProtoMessage() {}

func (x *AwsCloudFrontSpec_Origin) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awscloudfront_v1_spec_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsCloudFrontSpec_Origin.ProtoReflect.Descriptor instead.
func (*AwsCloudFrontSpec_Origin) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awscloudfront_v1_spec_proto_rawDescGZIP(), []int{0, 1}
}

func (x *AwsCloudFrontSpec_Origin) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AwsCloudFrontSpec_Origin) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *AwsCloudFrontSpec_Origin) GetOriginPath() string {
	if x != nil {
		return x.OriginPath
	}
	return ""
}

func (x *AwsCloudFrontSpec_Origin) GetCustomHeaders() map[string]string {
	if x != nil {
		return x.CustomHeaders
	}
	return nil
}

func (x *AwsCloudFrontSpec_Origin) GetS3OriginConfig() *AwsCloudFrontSpec_S3OriginConfig {
	if x != nil {
		return x.S3OriginConfig
	}
	return nil
}

func (x *AwsCloudFrontSpec_Origin) GetCustomOriginConfig() *AwsCloudFrontSpec_CustomOriginConfig {
	if x != nil {
		return x.CustomOriginConfig
	}
	return nil
}

// Settings for an S3 origin.
type AwsCloudFrontSpec_S3OriginConfig struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	OriginAccessControlEnabled bool                   `protobuf:"varint,1,opt,name=origin_access_control_enabled,json=originAccessControlEnabled,proto3" json:"origin_access_control_enabled,omitempty"`
	OriginAccessIdentity       string                 `protobuf:"bytes,2,opt,name=origin_access_identity,json=originAccessIdentity,proto3" json:"origin_access_identity,omitempty"` // OAI identifier if used
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *AwsCloudFrontSpec_S3OriginConfig) Reset() {
	*x = AwsCloudFrontSpec_S3OriginConfig{}
	mi := &file_project_planton_provider_aws_awscloudfront_v1_spec_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsCloudFrontSpec_S3OriginConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsCloudFrontSpec_S3OriginConfig) ProtoMessage() {}

func (x *AwsCloudFrontSpec_S3OriginConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awscloudfront_v1_spec_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsCloudFrontSpec_S3OriginConfig.ProtoReflect.Descriptor instead.
func (*AwsCloudFrontSpec_S3OriginConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awscloudfront_v1_spec_proto_rawDescGZIP(), []int{0, 2}
}

func (x *AwsCloudFrontSpec_S3OriginConfig) GetOriginAccessControlEnabled() bool {
	if x != nil {
		return x.OriginAccessControlEnabled
	}
	return false
}

func (x *AwsCloudFrontSpec_S3OriginConfig) GetOriginAccessIdentity() string {
	if x != nil {
		return x.OriginAccessIdentity
	}
	return ""
}

// Settings for a custom (non-S3) origin.
type AwsCloudFrontSpec_CustomOriginConfig struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ProtocolPolicy         string                 `protobuf:"bytes,1,opt,name=protocol_policy,json=protocolPolicy,proto3" json:"protocol_policy,omitempty"`                            // http-only | https-only | match-viewer
	HttpPort               int32                  `protobuf:"varint,2,opt,name=http_port,json=httpPort,proto3" json:"http_port,omitempty"`                                             // Default 80
	HttpsPort              int32                  `protobuf:"varint,3,opt,name=https_port,json=httpsPort,proto3" json:"https_port,omitempty"`                                          // Default 443
	OriginSslProtocols     string                 `protobuf:"bytes,4,opt,name=origin_ssl_protocols,json=originSslProtocols,proto3" json:"origin_ssl_protocols,omitempty"`              // Supported TLS versions
	OriginReadTimeout      int32                  `protobuf:"varint,5,opt,name=origin_read_timeout,json=originReadTimeout,proto3" json:"origin_read_timeout,omitempty"`                // Seconds to wait for origin response
	OriginKeepaliveTimeout int32                  `protobuf:"varint,6,opt,name=origin_keepalive_timeout,json=originKeepaliveTimeout,proto3" json:"origin_keepalive_timeout,omitempty"` // Seconds to keep idle connection
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *AwsCloudFrontSpec_CustomOriginConfig) Reset() {
	*x = AwsCloudFrontSpec_CustomOriginConfig{}
	mi := &file_project_planton_provider_aws_awscloudfront_v1_spec_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsCloudFrontSpec_CustomOriginConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsCloudFrontSpec_CustomOriginConfig) ProtoMessage() {}

func (x *AwsCloudFrontSpec_CustomOriginConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awscloudfront_v1_spec_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsCloudFrontSpec_CustomOriginConfig.ProtoReflect.Descriptor instead.
func (*AwsCloudFrontSpec_CustomOriginConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awscloudfront_v1_spec_proto_rawDescGZIP(), []int{0, 3}
}

func (x *AwsCloudFrontSpec_CustomOriginConfig) GetProtocolPolicy() string {
	if x != nil {
		return x.ProtocolPolicy
	}
	return ""
}

func (x *AwsCloudFrontSpec_CustomOriginConfig) GetHttpPort() int32 {
	if x != nil {
		return x.HttpPort
	}
	return 0
}

func (x *AwsCloudFrontSpec_CustomOriginConfig) GetHttpsPort() int32 {
	if x != nil {
		return x.HttpsPort
	}
	return 0
}

func (x *AwsCloudFrontSpec_CustomOriginConfig) GetOriginSslProtocols() string {
	if x != nil {
		return x.OriginSslProtocols
	}
	return ""
}

func (x *AwsCloudFrontSpec_CustomOriginConfig) GetOriginReadTimeout() int32 {
	if x != nil {
		return x.OriginReadTimeout
	}
	return 0
}

func (x *AwsCloudFrontSpec_CustomOriginConfig) GetOriginKeepaliveTimeout() int32 {
	if x != nil {
		return x.OriginKeepaliveTimeout
	}
	return 0
}

// Path-based cache behavior.
type AwsCloudFrontSpec_CacheBehavior struct {
	state                   protoimpl.MessageState                   `protogen:"open.v1"`
	PathPattern             string                                   `protobuf:"bytes,1,opt,name=path_pattern,json=pathPattern,proto3" json:"path_pattern,omitempty"`            // Pattern (e.g. images/*)
	TargetOriginId          string                                   `protobuf:"bytes,2,opt,name=target_origin_id,json=targetOriginId,proto3" json:"target_origin_id,omitempty"` // Referenced origin ID
	ViewerProtocolPolicy    AwsCloudFrontSpec_ViewerProtocolPolicy   `protobuf:"varint,3,opt,name=viewer_protocol_policy,json=viewerProtocolPolicy,proto3,enum=project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec_ViewerProtocolPolicy" json:"viewer_protocol_policy,omitempty"`
	AllowedMethods          []string                                 `protobuf:"bytes,4,rep,name=allowed_methods,json=allowedMethods,proto3" json:"allowed_methods,omitempty"`                                // Forwarded HTTP verbs
	Compress                bool                                     `protobuf:"varint,5,opt,name=compress,proto3" json:"compress,omitempty"`                                                                 // Enable automatic compression
	CachePolicyId           string                                   `protobuf:"bytes,6,opt,name=cache_policy_id,json=cachePolicyId,proto3" json:"cache_policy_id,omitempty"`                                 // Cache policy identifier
	OriginRequestPolicyId   string                                   `protobuf:"bytes,7,opt,name=origin_request_policy_id,json=originRequestPolicyId,proto3" json:"origin_request_policy_id,omitempty"`       // Origin request policy ID
	ResponseHeadersPolicyId string                                   `protobuf:"bytes,8,opt,name=response_headers_policy_id,json=responseHeadersPolicyId,proto3" json:"response_headers_policy_id,omitempty"` // Response headers policy ID
	FunctionAssociations    []*AwsCloudFrontSpec_FunctionAssociation `protobuf:"bytes,9,rep,name=function_associations,json=functionAssociations,proto3" json:"function_associations,omitempty"`              // Edge functions
	SmoothStreaming         bool                                     `protobuf:"varint,10,opt,name=smooth_streaming,json=smoothStreaming,proto3" json:"smooth_streaming,omitempty"`                           // Enable Smooth Streaming
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *AwsCloudFrontSpec_CacheBehavior) Reset() {
	*x = AwsCloudFrontSpec_CacheBehavior{}
	mi := &file_project_planton_provider_aws_awscloudfront_v1_spec_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsCloudFrontSpec_CacheBehavior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsCloudFrontSpec_CacheBehavior) ProtoMessage() {}

func (x *AwsCloudFrontSpec_CacheBehavior) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awscloudfront_v1_spec_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsCloudFrontSpec_CacheBehavior.ProtoReflect.Descriptor instead.
func (*AwsCloudFrontSpec_CacheBehavior) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awscloudfront_v1_spec_proto_rawDescGZIP(), []int{0, 4}
}

func (x *AwsCloudFrontSpec_CacheBehavior) GetPathPattern() string {
	if x != nil {
		return x.PathPattern
	}
	return ""
}

func (x *AwsCloudFrontSpec_CacheBehavior) GetTargetOriginId() string {
	if x != nil {
		return x.TargetOriginId
	}
	return ""
}

func (x *AwsCloudFrontSpec_CacheBehavior) GetViewerProtocolPolicy() AwsCloudFrontSpec_ViewerProtocolPolicy {
	if x != nil {
		return x.ViewerProtocolPolicy
	}
	return AwsCloudFrontSpec_VIEWER_PROTOCOL_POLICY_UNSPECIFIED
}

func (x *AwsCloudFrontSpec_CacheBehavior) GetAllowedMethods() []string {
	if x != nil {
		return x.AllowedMethods
	}
	return nil
}

func (x *AwsCloudFrontSpec_CacheBehavior) GetCompress() bool {
	if x != nil {
		return x.Compress
	}
	return false
}

func (x *AwsCloudFrontSpec_CacheBehavior) GetCachePolicyId() string {
	if x != nil {
		return x.CachePolicyId
	}
	return ""
}

func (x *AwsCloudFrontSpec_CacheBehavior) GetOriginRequestPolicyId() string {
	if x != nil {
		return x.OriginRequestPolicyId
	}
	return ""
}

func (x *AwsCloudFrontSpec_CacheBehavior) GetResponseHeadersPolicyId() string {
	if x != nil {
		return x.ResponseHeadersPolicyId
	}
	return ""
}

func (x *AwsCloudFrontSpec_CacheBehavior) GetFunctionAssociations() []*AwsCloudFrontSpec_FunctionAssociation {
	if x != nil {
		return x.FunctionAssociations
	}
	return nil
}

func (x *AwsCloudFrontSpec_CacheBehavior) GetSmoothStreaming() bool {
	if x != nil {
		return x.SmoothStreaming
	}
	return false
}

// Default cache behavior (no path pattern).
type AwsCloudFrontSpec_DefaultCacheBehavior struct {
	state                   protoimpl.MessageState                   `protogen:"open.v1"`
	TargetOriginId          string                                   `protobuf:"bytes,1,opt,name=target_origin_id,json=targetOriginId,proto3" json:"target_origin_id,omitempty"`
	ViewerProtocolPolicy    AwsCloudFrontSpec_ViewerProtocolPolicy   `protobuf:"varint,2,opt,name=viewer_protocol_policy,json=viewerProtocolPolicy,proto3,enum=project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec_ViewerProtocolPolicy" json:"viewer_protocol_policy,omitempty"`
	AllowedMethods          []string                                 `protobuf:"bytes,3,rep,name=allowed_methods,json=allowedMethods,proto3" json:"allowed_methods,omitempty"`
	Compress                bool                                     `protobuf:"varint,4,opt,name=compress,proto3" json:"compress,omitempty"`
	CachePolicyId           string                                   `protobuf:"bytes,5,opt,name=cache_policy_id,json=cachePolicyId,proto3" json:"cache_policy_id,omitempty"`
	OriginRequestPolicyId   string                                   `protobuf:"bytes,6,opt,name=origin_request_policy_id,json=originRequestPolicyId,proto3" json:"origin_request_policy_id,omitempty"`
	ResponseHeadersPolicyId string                                   `protobuf:"bytes,7,opt,name=response_headers_policy_id,json=responseHeadersPolicyId,proto3" json:"response_headers_policy_id,omitempty"`
	FunctionAssociations    []*AwsCloudFrontSpec_FunctionAssociation `protobuf:"bytes,8,rep,name=function_associations,json=functionAssociations,proto3" json:"function_associations,omitempty"`
	SmoothStreaming         bool                                     `protobuf:"varint,9,opt,name=smooth_streaming,json=smoothStreaming,proto3" json:"smooth_streaming,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *AwsCloudFrontSpec_DefaultCacheBehavior) Reset() {
	*x = AwsCloudFrontSpec_DefaultCacheBehavior{}
	mi := &file_project_planton_provider_aws_awscloudfront_v1_spec_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsCloudFrontSpec_DefaultCacheBehavior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsCloudFrontSpec_DefaultCacheBehavior) ProtoMessage() {}

func (x *AwsCloudFrontSpec_DefaultCacheBehavior) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awscloudfront_v1_spec_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsCloudFrontSpec_DefaultCacheBehavior.ProtoReflect.Descriptor instead.
func (*AwsCloudFrontSpec_DefaultCacheBehavior) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awscloudfront_v1_spec_proto_rawDescGZIP(), []int{0, 5}
}

func (x *AwsCloudFrontSpec_DefaultCacheBehavior) GetTargetOriginId() string {
	if x != nil {
		return x.TargetOriginId
	}
	return ""
}

func (x *AwsCloudFrontSpec_DefaultCacheBehavior) GetViewerProtocolPolicy() AwsCloudFrontSpec_ViewerProtocolPolicy {
	if x != nil {
		return x.ViewerProtocolPolicy
	}
	return AwsCloudFrontSpec_VIEWER_PROTOCOL_POLICY_UNSPECIFIED
}

func (x *AwsCloudFrontSpec_DefaultCacheBehavior) GetAllowedMethods() []string {
	if x != nil {
		return x.AllowedMethods
	}
	return nil
}

func (x *AwsCloudFrontSpec_DefaultCacheBehavior) GetCompress() bool {
	if x != nil {
		return x.Compress
	}
	return false
}

func (x *AwsCloudFrontSpec_DefaultCacheBehavior) GetCachePolicyId() string {
	if x != nil {
		return x.CachePolicyId
	}
	return ""
}

func (x *AwsCloudFrontSpec_DefaultCacheBehavior) GetOriginRequestPolicyId() string {
	if x != nil {
		return x.OriginRequestPolicyId
	}
	return ""
}

func (x *AwsCloudFrontSpec_DefaultCacheBehavior) GetResponseHeadersPolicyId() string {
	if x != nil {
		return x.ResponseHeadersPolicyId
	}
	return ""
}

func (x *AwsCloudFrontSpec_DefaultCacheBehavior) GetFunctionAssociations() []*AwsCloudFrontSpec_FunctionAssociation {
	if x != nil {
		return x.FunctionAssociations
	}
	return nil
}

func (x *AwsCloudFrontSpec_DefaultCacheBehavior) GetSmoothStreaming() bool {
	if x != nil {
		return x.SmoothStreaming
	}
	return false
}

// Maps a function to a CloudFront event.
type AwsCloudFrontSpec_FunctionAssociation struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	FunctionArn   string                      `protobuf:"bytes,1,opt,name=function_arn,json=functionArn,proto3" json:"function_arn,omitempty"`                                                                           // ARN of CloudFront Function or Lambda@Edge version
	EventType     AwsCloudFrontSpec_EventType `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3,enum=project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec_EventType" json:"event_type,omitempty"` // Triggering event
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsCloudFrontSpec_FunctionAssociation) Reset() {
	*x = AwsCloudFrontSpec_FunctionAssociation{}
	mi := &file_project_planton_provider_aws_awscloudfront_v1_spec_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsCloudFrontSpec_FunctionAssociation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsCloudFrontSpec_FunctionAssociation) ProtoMessage() {}

func (x *AwsCloudFrontSpec_FunctionAssociation) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awscloudfront_v1_spec_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsCloudFrontSpec_FunctionAssociation.ProtoReflect.Descriptor instead.
func (*AwsCloudFrontSpec_FunctionAssociation) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awscloudfront_v1_spec_proto_rawDescGZIP(), []int{0, 6}
}

func (x *AwsCloudFrontSpec_FunctionAssociation) GetFunctionArn() string {
	if x != nil {
		return x.FunctionArn
	}
	return ""
}

func (x *AwsCloudFrontSpec_FunctionAssociation) GetEventType() AwsCloudFrontSpec_EventType {
	if x != nil {
		return x.EventType
	}
	return AwsCloudFrontSpec_EVENT_TYPE_UNSPECIFIED
}

// HTTPS certificate configuration.
type AwsCloudFrontSpec_ViewerCertificate struct {
	state                        protoimpl.MessageState                   `protogen:"open.v1"`
	CloudfrontDefaultCertificate bool                                     `protobuf:"varint,1,opt,name=cloudfront_default_certificate,json=cloudfrontDefaultCertificate,proto3" json:"cloudfront_default_certificate,omitempty"`                                                                           // Use *.cloudfront.net cert
	AcmCertificateArn            string                                   `protobuf:"bytes,2,opt,name=acm_certificate_arn,json=acmCertificateArn,proto3" json:"acm_certificate_arn,omitempty"`                                                                                                             // ACM cert ARN (us-east-1)
	IamCertificateId             string                                   `protobuf:"bytes,3,opt,name=iam_certificate_id,json=iamCertificateId,proto3" json:"iam_certificate_id,omitempty"`                                                                                                                // IAM cert ID
	MinimumProtocolVersion       AwsCloudFrontSpec_MinimumProtocolVersion `protobuf:"varint,4,opt,name=minimum_protocol_version,json=minimumProtocolVersion,proto3,enum=project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec_MinimumProtocolVersion" json:"minimum_protocol_version,omitempty"` // TLS floor
	SniOnly                      bool                                     `protobuf:"varint,5,opt,name=sni_only,json=sniOnly,proto3" json:"sni_only,omitempty"`                                                                                                                                            // Use SNI (true) or dedicated IP (false)
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *AwsCloudFrontSpec_ViewerCertificate) Reset() {
	*x = AwsCloudFrontSpec_ViewerCertificate{}
	mi := &file_project_planton_provider_aws_awscloudfront_v1_spec_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsCloudFrontSpec_ViewerCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsCloudFrontSpec_ViewerCertificate) ProtoMessage() {}

func (x *AwsCloudFrontSpec_ViewerCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awscloudfront_v1_spec_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsCloudFrontSpec_ViewerCertificate.ProtoReflect.Descriptor instead.
func (*AwsCloudFrontSpec_ViewerCertificate) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awscloudfront_v1_spec_proto_rawDescGZIP(), []int{0, 7}
}

func (x *AwsCloudFrontSpec_ViewerCertificate) GetCloudfrontDefaultCertificate() bool {
	if x != nil {
		return x.CloudfrontDefaultCertificate
	}
	return false
}

func (x *AwsCloudFrontSpec_ViewerCertificate) GetAcmCertificateArn() string {
	if x != nil {
		return x.AcmCertificateArn
	}
	return ""
}

func (x *AwsCloudFrontSpec_ViewerCertificate) GetIamCertificateId() string {
	if x != nil {
		return x.IamCertificateId
	}
	return ""
}

func (x *AwsCloudFrontSpec_ViewerCertificate) GetMinimumProtocolVersion() AwsCloudFrontSpec_MinimumProtocolVersion {
	if x != nil {
		return x.MinimumProtocolVersion
	}
	return AwsCloudFrontSpec_MIN_PROTOCOL_VERSION_UNSPECIFIED
}

func (x *AwsCloudFrontSpec_ViewerCertificate) GetSniOnly() bool {
	if x != nil {
		return x.SniOnly
	}
	return false
}

// Standard access-log configuration.
type AwsCloudFrontSpec_LoggingConfig struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Enabled        bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`                                     // Enable/disable logging
	Bucket         string                 `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`                                        // Target S3 bucket (DNS format)
	Prefix         string                 `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`                                        // Object key prefix
	IncludeCookies bool                   `protobuf:"varint,4,opt,name=include_cookies,json=includeCookies,proto3" json:"include_cookies,omitempty"` // Log cookies
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AwsCloudFrontSpec_LoggingConfig) Reset() {
	*x = AwsCloudFrontSpec_LoggingConfig{}
	mi := &file_project_planton_provider_aws_awscloudfront_v1_spec_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsCloudFrontSpec_LoggingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsCloudFrontSpec_LoggingConfig) ProtoMessage() {}

func (x *AwsCloudFrontSpec_LoggingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awscloudfront_v1_spec_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsCloudFrontSpec_LoggingConfig.ProtoReflect.Descriptor instead.
func (*AwsCloudFrontSpec_LoggingConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awscloudfront_v1_spec_proto_rawDescGZIP(), []int{0, 8}
}

func (x *AwsCloudFrontSpec_LoggingConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AwsCloudFrontSpec_LoggingConfig) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *AwsCloudFrontSpec_LoggingConfig) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *AwsCloudFrontSpec_LoggingConfig) GetIncludeCookies() bool {
	if x != nil {
		return x.IncludeCookies
	}
	return false
}

// Distribution-level restrictions wrapper.
type AwsCloudFrontSpec_Restrictions struct {
	state          protoimpl.MessageState            `protogen:"open.v1"`
	GeoRestriction *AwsCloudFrontSpec_GeoRestriction `protobuf:"bytes,1,opt,name=geo_restriction,json=geoRestriction,proto3" json:"geo_restriction,omitempty"` // Country-based rules
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AwsCloudFrontSpec_Restrictions) Reset() {
	*x = AwsCloudFrontSpec_Restrictions{}
	mi := &file_project_planton_provider_aws_awscloudfront_v1_spec_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsCloudFrontSpec_Restrictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsCloudFrontSpec_Restrictions) ProtoMessage() {}

func (x *AwsCloudFrontSpec_Restrictions) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awscloudfront_v1_spec_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsCloudFrontSpec_Restrictions.ProtoReflect.Descriptor instead.
func (*AwsCloudFrontSpec_Restrictions) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awscloudfront_v1_spec_proto_rawDescGZIP(), []int{0, 9}
}

func (x *AwsCloudFrontSpec_Restrictions) GetGeoRestriction() *AwsCloudFrontSpec_GeoRestriction {
	if x != nil {
		return x.GeoRestriction
	}
	return nil
}

// Geographic restriction definition.
type AwsCloudFrontSpec_GeoRestriction struct {
	state           protoimpl.MessageState            `protogen:"open.v1"`
	RestrictionType AwsCloudFrontSpec_RestrictionType `protobuf:"varint,1,opt,name=restriction_type,json=restrictionType,proto3,enum=project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec_RestrictionType" json:"restriction_type,omitempty"` // None | Whitelist | Blacklist
	Locations       []string                          `protobuf:"bytes,2,rep,name=locations,proto3" json:"locations,omitempty"`                                                                                                                          // ISO-3166-1 alpha-2 country codes
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AwsCloudFrontSpec_GeoRestriction) Reset() {
	*x = AwsCloudFrontSpec_GeoRestriction{}
	mi := &file_project_planton_provider_aws_awscloudfront_v1_spec_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsCloudFrontSpec_GeoRestriction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsCloudFrontSpec_GeoRestriction) ProtoMessage() {}

func (x *AwsCloudFrontSpec_GeoRestriction) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awscloudfront_v1_spec_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsCloudFrontSpec_GeoRestriction.ProtoReflect.Descriptor instead.
func (*AwsCloudFrontSpec_GeoRestriction) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awscloudfront_v1_spec_proto_rawDescGZIP(), []int{0, 10}
}

func (x *AwsCloudFrontSpec_GeoRestriction) GetRestrictionType() AwsCloudFrontSpec_RestrictionType {
	if x != nil {
		return x.RestrictionType
	}
	return AwsCloudFrontSpec_RESTRICTION_TYPE_UNSPECIFIED
}

func (x *AwsCloudFrontSpec_GeoRestriction) GetLocations() []string {
	if x != nil {
		return x.Locations
	}
	return nil
}

var File_project_planton_provider_aws_awscloudfront_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_aws_awscloudfront_v1_spec_proto_rawDesc = "" +
	"\n" +
	"8project/planton/provider/aws/awscloudfront/v1/spec.proto\x12-project.planton.provider.aws.awscloudfront.v1\x1a\x1bbuf/validate/validate.proto\"\x895\n" +
	"\x11AwsCloudFrontSpec\x12\x1e\n" +
	"\x04name\x18\x01 \x01(\tB\n" +
	"\xbaH\ar\x05\x10\x01\x18\xff\x01R\x04name\x12\x18\n" +
	"\aenabled\x18\x02 \x01(\bR\aenabled\x12S\n" +
	"\aaliases\x18\x03 \x03(\tB9\xbaH6\x92\x013\x10d\"/r-2+^([a-zA-Z0-9][-a-zA-Z0-9]*\\.)+[a-zA-Z]{2,}$R\aaliases\x12\"\n" +
	"\acomment\x18\x04 \x01(\tB\b\xbaH\x05r\x03\x18\x80\x01R\acomment\x12v\n" +
	"\vprice_class\x18\x05 \x01(\x0e2K.project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.PriceClassB\b\xbaH\x05\x82\x01\x02 \x00R\n" +
	"priceClass\x12m\n" +
	"\aorigins\x18\x06 \x03(\v2G.project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.OriginB\n" +
	"\xbaH\a\x92\x01\x04\b\x01\x10\x19R\aorigins\x12\x8b\x01\n" +
	"\x16default_cache_behavior\x18\a \x01(\v2U.project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.DefaultCacheBehaviorR\x14defaultCacheBehavior\x12\x90\x01\n" +
	"\x17ordered_cache_behaviors\x18\b \x03(\v2N.project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.CacheBehaviorB\b\xbaH\x05\x92\x01\x02\x102R\x15orderedCacheBehaviors\x12\x81\x01\n" +
	"\x12viewer_certificate\x18\t \x01(\v2R.project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.ViewerCertificateR\x11viewerCertificate\x12h\n" +
	"\alogging\x18\n" +
	" \x01(\v2N.project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.LoggingConfigR\alogging\x12q\n" +
	"\frestrictions\x18\v \x01(\v2M.project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.RestrictionsR\frestrictions\x12h\n" +
	"\x04tags\x18\f \x03(\v2J.project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.TagsEntryB\b\xbaH\x05\x9a\x01\x02\x102R\x04tags\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a\xb8\x06\n" +
	"\x06Origin\x12,\n" +
	"\x02id\x18\x01 \x01(\tB\x1c\xbaH\x19r\x17\x10\x01\x18@2\x11^[A-Za-z0-9._-]+$R\x02id\x12S\n" +
	"\vdomain_name\x18\x02 \x01(\tB2\xbaH/r-2+^([a-zA-Z0-9][-a-zA-Z0-9]*\\.)+[a-zA-Z]{2,}$R\n" +
	"domainName\x120\n" +
	"\vorigin_path\x18\x03 \x01(\tB\x0f\xbaH\fr\n" +
	"2\b^(/.*)?$R\n" +
	"originPath\x12\x8b\x01\n" +
	"\x0ecustom_headers\x18\x04 \x03(\v2Z.project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.Origin.CustomHeadersEntryB\b\xbaH\x05\x9a\x01\x02\x102R\rcustomHeaders\x12y\n" +
	"\x10s3_origin_config\x18\x05 \x01(\v2O.project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.S3OriginConfigR\x0es3OriginConfig\x12\x85\x01\n" +
	"\x14custom_origin_config\x18\x06 \x01(\v2S.project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.CustomOriginConfigR\x12customOriginConfig\x1a@\n" +
	"\x12CustomHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:\xa5\x01\xbaH\xa1\x01\x1a\x9e\x01\n" +
	"\x0fone_origin_type\x12Cexactly one of s3_origin_config or custom_origin_config must be set\x1aF(this.s3_origin_config != null) != (this.custom_origin_config != null)\x1a\xca\x03\n" +
	"\x0eS3OriginConfig\x12A\n" +
	"\x1dorigin_access_control_enabled\x18\x01 \x01(\bR\x1aoriginAccessControlEnabled\x12m\n" +
	"\x16origin_access_identity\x18\x02 \x01(\tB7\xbaH4r220^origin-access-identity/cloudfront/[A-Za-z0-9]+$R\x14originAccessIdentity:\x85\x02\xbaH\x81\x02\x1a\xfe\x01\n" +
	"\x11oac_oai_exclusive\x12rWhen origin_access_control_enabled is true, origin_access_identity must be empty; when false, it must be non-empty\x1authis.origin_access_control_enabled ? this.origin_access_identity.size() == 0 : this.origin_access_identity.size() > 0\x1a\xfb\x02\n" +
	"\x12CustomOriginConfig\x12S\n" +
	"\x0fprotocol_policy\x18\x01 \x01(\tB*\xbaH'r%R\thttp-onlyR\n" +
	"https-onlyR\fmatch-viewerR\x0eprotocolPolicy\x12(\n" +
	"\thttp_port\x18\x02 \x01(\x05B\v\xbaH\b\x1a\x06\x18\xff\xff\x03(\x01R\bhttpPort\x12*\n" +
	"\n" +
	"https_port\x18\x03 \x01(\x05B\v\xbaH\b\x1a\x06\x18\xff\xff\x03(\x01R\thttpsPort\x12:\n" +
	"\x14origin_ssl_protocols\x18\x04 \x01(\tB\b\xbaH\x05r\x03\x18\x80\x01R\x12originSslProtocols\x129\n" +
	"\x13origin_read_timeout\x18\x05 \x01(\x05B\t\xbaH\x06\x1a\x04\x18<(\x01R\x11originReadTimeout\x12C\n" +
	"\x18origin_keepalive_timeout\x18\x06 \x01(\x05B\t\xbaH\x06\x1a\x04\x18<(\x01R\x16originKeepaliveTimeout\x1a\xd2\x05\n" +
	"\rCacheBehavior\x12*\n" +
	"\fpath_pattern\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\vpathPattern\x121\n" +
	"\x10target_origin_id\x18\x02 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x0etargetOriginId\x12\x95\x01\n" +
	"\x16viewer_protocol_policy\x18\x03 \x01(\x0e2U.project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.ViewerProtocolPolicyB\b\xbaH\x05\x82\x01\x02 \x00R\x14viewerProtocolPolicy\x121\n" +
	"\x0fallowed_methods\x18\x04 \x03(\tB\b\xbaH\x05\x92\x01\x02\b\x01R\x0eallowedMethods\x12\x1a\n" +
	"\bcompress\x18\x05 \x01(\bR\bcompress\x120\n" +
	"\x0fcache_policy_id\x18\x06 \x01(\tB\b\xbaH\x05r\x03\x18\x80\x01R\rcachePolicyId\x12A\n" +
	"\x18origin_request_policy_id\x18\a \x01(\tB\b\xbaH\x05r\x03\x18\x80\x01R\x15originRequestPolicyId\x12E\n" +
	"\x1aresponse_headers_policy_id\x18\b \x01(\tB\b\xbaH\x05r\x03\x18\x80\x01R\x17responseHeadersPolicyId\x12\x93\x01\n" +
	"\x15function_associations\x18\t \x03(\v2T.project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.FunctionAssociationB\b\xbaH\x05\x92\x01\x02\x10\n" +
	"R\x14functionAssociations\x12)\n" +
	"\x10smooth_streaming\x18\n" +
	" \x01(\bR\x0fsmoothStreaming\x1a\xad\x05\n" +
	"\x14DefaultCacheBehavior\x121\n" +
	"\x10target_origin_id\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x0etargetOriginId\x12\x95\x01\n" +
	"\x16viewer_protocol_policy\x18\x02 \x01(\x0e2U.project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.ViewerProtocolPolicyB\b\xbaH\x05\x82\x01\x02 \x00R\x14viewerProtocolPolicy\x121\n" +
	"\x0fallowed_methods\x18\x03 \x03(\tB\b\xbaH\x05\x92\x01\x02\b\x01R\x0eallowedMethods\x12\x1a\n" +
	"\bcompress\x18\x04 \x01(\bR\bcompress\x120\n" +
	"\x0fcache_policy_id\x18\x05 \x01(\tB\b\xbaH\x05r\x03\x18\x80\x01R\rcachePolicyId\x12A\n" +
	"\x18origin_request_policy_id\x18\x06 \x01(\tB\b\xbaH\x05r\x03\x18\x80\x01R\x15originRequestPolicyId\x12E\n" +
	"\x1aresponse_headers_policy_id\x18\a \x01(\tB\b\xbaH\x05r\x03\x18\x80\x01R\x17responseHeadersPolicyId\x12\x93\x01\n" +
	"\x15function_associations\x18\b \x03(\v2T.project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.FunctionAssociationB\b\xbaH\x05\x92\x01\x02\x10\n" +
	"R\x14functionAssociations\x12)\n" +
	"\x10smooth_streaming\x18\t \x01(\bR\x0fsmoothStreaming\x1a\xcd\x01\n" +
	"\x13FunctionAssociation\x12A\n" +
	"\ffunction_arn\x18\x01 \x01(\tB\x1e\xbaH\x1br\x19\x10\x012\x15^arn:[A-Za-z0-9:_-]+$R\vfunctionArn\x12s\n" +
	"\n" +
	"event_type\x18\x02 \x01(\x0e2J.project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.EventTypeB\b\xbaH\x05\x82\x01\x02 \x00R\teventType\x1a\x84\x06\n" +
	"\x11ViewerCertificate\x12D\n" +
	"\x1ecloudfront_default_certificate\x18\x01 \x01(\bR\x1ccloudfrontDefaultCertificate\x12T\n" +
	"\x13acm_certificate_arn\x18\x02 \x01(\tB$\xbaH!r\x1f2\x1d^arn:.*acm.*:[A-Za-z0-9:_-]+$R\x11acmCertificateArn\x126\n" +
	"\x12iam_certificate_id\x18\x03 \x01(\tB\b\xbaH\x05r\x03\x18\x80\x01R\x10iamCertificateId\x12\x9b\x01\n" +
	"\x18minimum_protocol_version\x18\x04 \x01(\x0e2W.project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.MinimumProtocolVersionB\b\xbaH\x05\x82\x01\x02 \x00R\x16minimumProtocolVersion\x12\x19\n" +
	"\bsni_only\x18\x05 \x01(\bR\asniOnly:\xe1\x02\xbaH\xdd\x02\x1a\xda\x02\n" +
	"\x11viewer_cert_logic\x12}If cloudfront_default_certificate is true, ACM and IAM cert IDs must be empty; otherwise exactly one of them must be provided\x1a\xc5\x01this.cloudfront_default_certificate ? (this.acm_certificate_arn.size() == 0 && this.iam_certificate_id.size() == 0) : ((this.acm_certificate_arn.size() > 0) != (this.iam_certificate_id.size() > 0))\x1a\xd8\x02\n" +
	"\rLoggingConfig\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12,\n" +
	"\x06bucket\x18\x02 \x01(\tB\x14\xbaH\x11r\x0f2\r^[a-z0-9.-]+$R\x06bucket\x12 \n" +
	"\x06prefix\x18\x03 \x01(\tB\b\xbaH\x05r\x03\x18\x80\bR\x06prefix\x12'\n" +
	"\x0finclude_cookies\x18\x04 \x01(\bR\x0eincludeCookies:\xb3\x01\xbaH\xaf\x01\x1a\xac\x01\n" +
	"\x17logging_bucket_required\x12PWhen logging is enabled, bucket must be set; when disabled, bucket must be empty\x1a?this.enabled ? this.bucket.size() > 0 : this.bucket.size() == 0\x1a\x88\x01\n" +
	"\fRestrictions\x12x\n" +
	"\x0fgeo_restriction\x18\x01 \x01(\v2O.project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.GeoRestrictionR\x0egeoRestriction\x1a\xa9\x03\n" +
	"\x0eGeoRestriction\x12\x85\x01\n" +
	"\x10restriction_type\x18\x01 \x01(\x0e2P.project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.RestrictionTypeB\b\xbaH\x05\x82\x01\x02 \x00R\x0frestrictionType\x127\n" +
	"\tlocations\x18\x02 \x03(\tB\x19\xbaH\x16\x92\x01\x13\x10\xc8\x01\"\x0er\f2\n" +
	"^[A-Z]{2}$R\tlocations:\xd5\x01\xbaH\xd1\x01\x1a\xce\x01\n" +
	"\x13geo_locations_rules\x12bLocations must be empty when restriction_type is NONE, otherwise at least one location is required\x1aSthis.restriction_type == 1 ? this.locations.size() == 0 : this.locations.size() > 0\"h\n" +
	"\n" +
	"PriceClass\x12\x1b\n" +
	"\x17PRICE_CLASS_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fPRICE_CLASS_ALL\x10\x01\x12\x13\n" +
	"\x0fPRICE_CLASS_200\x10\x02\x12\x13\n" +
	"\x0fPRICE_CLASS_100\x10\x03\"t\n" +
	"\x14ViewerProtocolPolicy\x12&\n" +
	"\"VIEWER_PROTOCOL_POLICY_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tALLOW_ALL\x10\x01\x12\x0e\n" +
	"\n" +
	"HTTPS_ONLY\x10\x02\x12\x15\n" +
	"\x11REDIRECT_TO_HTTPS\x10\x03\"y\n" +
	"\tEventType\x12\x1a\n" +
	"\x16EVENT_TYPE_UNSPECIFIED\x10\x00\x12\x12\n" +
	"\x0eVIEWER_REQUEST\x10\x01\x12\x13\n" +
	"\x0fVIEWER_RESPONSE\x10\x02\x12\x12\n" +
	"\x0eORIGIN_REQUEST\x10\x03\x12\x13\n" +
	"\x0fORIGIN_RESPONSE\x10\x04\"\x88\x01\n" +
	"\x16MinimumProtocolVersion\x12$\n" +
	" MIN_PROTOCOL_VERSION_UNSPECIFIED\x10\x00\x12\t\n" +
	"\x05SSLV3\x10\x01\x12\t\n" +
	"\x05TLSV1\x10\x02\x12\x0e\n" +
	"\n" +
	"TLSV1_2016\x10\x03\x12\x10\n" +
	"\fTLSV1_1_2016\x10\x04\x12\x10\n" +
	"\fTLSV1_2_2018\x10\x05\"[\n" +
	"\x0fRestrictionType\x12 \n" +
	"\x1cRESTRICTION_TYPE_UNSPECIFIED\x10\x00\x12\b\n" +
	"\x04NONE\x10\x01\x12\r\n" +
	"\tWHITELIST\x10\x02\x12\r\n" +
	"\tBLACKLIST\x10\x03B\x88\x03\n" +
	"1com.project.planton.provider.aws.awscloudfront.v1B\tSpecProtoP\x01Zmgithub.com/project-planton/project-planton/apis/project/planton/provider/aws/awscloudfront/v1;awscloudfrontv1\xa2\x02\x05PPPAA\xaa\x02-Project.Planton.Provider.Aws.Awscloudfront.V1\xca\x02-Project\\Planton\\Provider\\Aws\\Awscloudfront\\V1\xe2\x029Project\\Planton\\Provider\\Aws\\Awscloudfront\\V1\\GPBMetadata\xea\x022Project::Planton::Provider::Aws::Awscloudfront::V1b\x06proto3"

var (
	file_project_planton_provider_aws_awscloudfront_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_awscloudfront_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_aws_awscloudfront_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_awscloudfront_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_awscloudfront_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awscloudfront_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awscloudfront_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_aws_awscloudfront_v1_spec_proto_rawDescData
}

var file_project_planton_provider_aws_awscloudfront_v1_spec_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_project_planton_provider_aws_awscloudfront_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_project_planton_provider_aws_awscloudfront_v1_spec_proto_goTypes = []any{
	(AwsCloudFrontSpec_PriceClass)(0),              // 0: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.PriceClass
	(AwsCloudFrontSpec_ViewerProtocolPolicy)(0),    // 1: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.ViewerProtocolPolicy
	(AwsCloudFrontSpec_EventType)(0),               // 2: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.EventType
	(AwsCloudFrontSpec_MinimumProtocolVersion)(0),  // 3: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.MinimumProtocolVersion
	(AwsCloudFrontSpec_RestrictionType)(0),         // 4: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.RestrictionType
	(*AwsCloudFrontSpec)(nil),                      // 5: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec
	nil,                                            // 6: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.TagsEntry
	(*AwsCloudFrontSpec_Origin)(nil),               // 7: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.Origin
	(*AwsCloudFrontSpec_S3OriginConfig)(nil),       // 8: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.S3OriginConfig
	(*AwsCloudFrontSpec_CustomOriginConfig)(nil),   // 9: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.CustomOriginConfig
	(*AwsCloudFrontSpec_CacheBehavior)(nil),        // 10: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.CacheBehavior
	(*AwsCloudFrontSpec_DefaultCacheBehavior)(nil), // 11: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.DefaultCacheBehavior
	(*AwsCloudFrontSpec_FunctionAssociation)(nil),  // 12: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.FunctionAssociation
	(*AwsCloudFrontSpec_ViewerCertificate)(nil),    // 13: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.ViewerCertificate
	(*AwsCloudFrontSpec_LoggingConfig)(nil),        // 14: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.LoggingConfig
	(*AwsCloudFrontSpec_Restrictions)(nil),         // 15: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.Restrictions
	(*AwsCloudFrontSpec_GeoRestriction)(nil),       // 16: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.GeoRestriction
	nil,                                            // 17: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.Origin.CustomHeadersEntry
}
var file_project_planton_provider_aws_awscloudfront_v1_spec_proto_depIdxs = []int32{
	0,  // 0: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.price_class:type_name -> project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.PriceClass
	7,  // 1: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.origins:type_name -> project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.Origin
	11, // 2: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.default_cache_behavior:type_name -> project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.DefaultCacheBehavior
	10, // 3: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.ordered_cache_behaviors:type_name -> project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.CacheBehavior
	13, // 4: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.viewer_certificate:type_name -> project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.ViewerCertificate
	14, // 5: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.logging:type_name -> project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.LoggingConfig
	15, // 6: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.restrictions:type_name -> project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.Restrictions
	6,  // 7: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.tags:type_name -> project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.TagsEntry
	17, // 8: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.Origin.custom_headers:type_name -> project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.Origin.CustomHeadersEntry
	8,  // 9: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.Origin.s3_origin_config:type_name -> project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.S3OriginConfig
	9,  // 10: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.Origin.custom_origin_config:type_name -> project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.CustomOriginConfig
	1,  // 11: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.CacheBehavior.viewer_protocol_policy:type_name -> project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.ViewerProtocolPolicy
	12, // 12: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.CacheBehavior.function_associations:type_name -> project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.FunctionAssociation
	1,  // 13: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.DefaultCacheBehavior.viewer_protocol_policy:type_name -> project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.ViewerProtocolPolicy
	12, // 14: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.DefaultCacheBehavior.function_associations:type_name -> project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.FunctionAssociation
	2,  // 15: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.FunctionAssociation.event_type:type_name -> project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.EventType
	3,  // 16: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.ViewerCertificate.minimum_protocol_version:type_name -> project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.MinimumProtocolVersion
	16, // 17: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.Restrictions.geo_restriction:type_name -> project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.GeoRestriction
	4,  // 18: project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.GeoRestriction.restriction_type:type_name -> project.planton.provider.aws.awscloudfront.v1.AwsCloudFrontSpec.RestrictionType
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_awscloudfront_v1_spec_proto_init() }
func file_project_planton_provider_aws_awscloudfront_v1_spec_proto_init() {
	if File_project_planton_provider_aws_awscloudfront_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awscloudfront_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awscloudfront_v1_spec_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_awscloudfront_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_awscloudfront_v1_spec_proto_depIdxs,
		EnumInfos:         file_project_planton_provider_aws_awscloudfront_v1_spec_proto_enumTypes,
		MessageInfos:      file_project_planton_provider_aws_awscloudfront_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_awscloudfront_v1_spec_proto = out.File
	file_project_planton_provider_aws_awscloudfront_v1_spec_proto_goTypes = nil
	file_project_planton_provider_aws_awscloudfront_v1_spec_proto_depIdxs = nil
}
