// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/provider/aws/awsrdsinstance/v1/stack_outputs.proto

package awsrdsinstancev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// aws_rds_instance stack outputs
type AwsRdsInstanceStackOutputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The DNS endpoint of the RDS instance, which is used to connect to the database.
	RdsInstanceEndpoint string `protobuf:"bytes,1,opt,name=rds_instance_endpoint,json=rdsInstanceEndpoint,proto3" json:"rds_instance_endpoint,omitempty"`
	// The unique identifier of the RDS instance in AWS, used for referencing the instance in API calls and other operations.
	RdsInstanceId string `protobuf:"bytes,2,opt,name=rds_instance_id,json=rdsInstanceId,proto3" json:"rds_instance_id,omitempty"`
	// The Amazon Resource Name (ARN) of the RDS instance, which is a unique identifier that allows access and management of the instance.
	RdsInstanceArn string `protobuf:"bytes,3,opt,name=rds_instance_arn,json=rdsInstanceArn,proto3" json:"rds_instance_arn,omitempty"`
	// The public or private IP address or DNS address of the RDS instance, which applications use to communicate with the database.
	RdsInstanceAddress string `protobuf:"bytes,4,opt,name=rds_instance_address,json=rdsInstanceAddress,proto3" json:"rds_instance_address,omitempty"`
	// The name of the subnet group associated with the RDS instance, which defines the VPC subnets in which the instance is deployed.
	RdsSubnetGroup string `protobuf:"bytes,5,opt,name=rds_subnet_group,json=rdsSubnetGroup,proto3" json:"rds_subnet_group,omitempty"`
	// The security group associated with the RDS instance, which controls inbound and outbound traffic rules for the instance.
	RdsSecurityGroup string `protobuf:"bytes,6,opt,name=rds_security_group,json=rdsSecurityGroup,proto3" json:"rds_security_group,omitempty"`
	// The parameter group assigned to the RDS instance, which contains configuration settings for managing the database engine.
	RdsParameterGroup string `protobuf:"bytes,7,opt,name=rds_parameter_group,json=rdsParameterGroup,proto3" json:"rds_parameter_group,omitempty"`
	// The options group assigned to the RDS instance.
	RdsOptionsGroup string `protobuf:"bytes,8,opt,name=rds_options_group,json=rdsOptionsGroup,proto3" json:"rds_options_group,omitempty"`
}

func (x *AwsRdsInstanceStackOutputs) Reset() {
	*x = AwsRdsInstanceStackOutputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsrdsinstance_v1_stack_outputs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsRdsInstanceStackOutputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsRdsInstanceStackOutputs) ProtoMessage() {}

func (x *AwsRdsInstanceStackOutputs) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsrdsinstance_v1_stack_outputs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsRdsInstanceStackOutputs.ProtoReflect.Descriptor instead.
func (*AwsRdsInstanceStackOutputs) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsrdsinstance_v1_stack_outputs_proto_rawDescGZIP(), []int{0}
}

func (x *AwsRdsInstanceStackOutputs) GetRdsInstanceEndpoint() string {
	if x != nil {
		return x.RdsInstanceEndpoint
	}
	return ""
}

func (x *AwsRdsInstanceStackOutputs) GetRdsInstanceId() string {
	if x != nil {
		return x.RdsInstanceId
	}
	return ""
}

func (x *AwsRdsInstanceStackOutputs) GetRdsInstanceArn() string {
	if x != nil {
		return x.RdsInstanceArn
	}
	return ""
}

func (x *AwsRdsInstanceStackOutputs) GetRdsInstanceAddress() string {
	if x != nil {
		return x.RdsInstanceAddress
	}
	return ""
}

func (x *AwsRdsInstanceStackOutputs) GetRdsSubnetGroup() string {
	if x != nil {
		return x.RdsSubnetGroup
	}
	return ""
}

func (x *AwsRdsInstanceStackOutputs) GetRdsSecurityGroup() string {
	if x != nil {
		return x.RdsSecurityGroup
	}
	return ""
}

func (x *AwsRdsInstanceStackOutputs) GetRdsParameterGroup() string {
	if x != nil {
		return x.RdsParameterGroup
	}
	return ""
}

func (x *AwsRdsInstanceStackOutputs) GetRdsOptionsGroup() string {
	if x != nil {
		return x.RdsOptionsGroup
	}
	return ""
}

var File_project_planton_provider_aws_awsrdsinstance_v1_stack_outputs_proto protoreflect.FileDescriptor

var file_project_planton_provider_aws_awsrdsinstance_v1_stack_outputs_proto_rawDesc = []byte{
	0x0a, 0x42, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x61,
	0x77, 0x73, 0x72, 0x64, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61,
	0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x72, 0x64, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x22, 0x88, 0x03, 0x0a, 0x1a, 0x41, 0x77, 0x73, 0x52, 0x64, 0x73, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x64, 0x73, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x72, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x61, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x64, 0x73, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x64, 0x73,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x72,
	0x64, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x64, 0x73, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x64, 0x73, 0x5f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x72, 0x64, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x72, 0x64, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x64, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x72, 0x64, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x97, 0x03, 0x0a, 0x32, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x72, 0x64, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x11, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x6f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x61, 0x77, 0x73, 0x72, 0x64, 0x73,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x77, 0x73, 0x72,
	0x64, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x05, 0x50,
	0x50, 0x50, 0x41, 0x41, 0xaa, 0x02, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x41, 0x77, 0x73, 0x2e, 0x41, 0x77, 0x73, 0x72, 0x64, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5c, 0x41, 0x77, 0x73, 0x5c, 0x41, 0x77, 0x73, 0x72, 0x64, 0x73, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x3a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5c, 0x41, 0x77, 0x73, 0x5c, 0x41, 0x77, 0x73, 0x72, 0x64, 0x73, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x33, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x3a, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x3a, 0x3a, 0x41, 0x77, 0x73, 0x3a, 0x3a, 0x41, 0x77, 0x73, 0x72, 0x64, 0x73, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_project_planton_provider_aws_awsrdsinstance_v1_stack_outputs_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_awsrdsinstance_v1_stack_outputs_proto_rawDescData = file_project_planton_provider_aws_awsrdsinstance_v1_stack_outputs_proto_rawDesc
)

func file_project_planton_provider_aws_awsrdsinstance_v1_stack_outputs_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_awsrdsinstance_v1_stack_outputs_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_awsrdsinstance_v1_stack_outputs_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_provider_aws_awsrdsinstance_v1_stack_outputs_proto_rawDescData)
	})
	return file_project_planton_provider_aws_awsrdsinstance_v1_stack_outputs_proto_rawDescData
}

var file_project_planton_provider_aws_awsrdsinstance_v1_stack_outputs_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_provider_aws_awsrdsinstance_v1_stack_outputs_proto_goTypes = []any{
	(*AwsRdsInstanceStackOutputs)(nil), // 0: project.planton.provider.aws.awsrdsinstance.v1.AwsRdsInstanceStackOutputs
}
var file_project_planton_provider_aws_awsrdsinstance_v1_stack_outputs_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_awsrdsinstance_v1_stack_outputs_proto_init() }
func file_project_planton_provider_aws_awsrdsinstance_v1_stack_outputs_proto_init() {
	if File_project_planton_provider_aws_awsrdsinstance_v1_stack_outputs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_provider_aws_awsrdsinstance_v1_stack_outputs_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AwsRdsInstanceStackOutputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_provider_aws_awsrdsinstance_v1_stack_outputs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_awsrdsinstance_v1_stack_outputs_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_awsrdsinstance_v1_stack_outputs_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_aws_awsrdsinstance_v1_stack_outputs_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_awsrdsinstance_v1_stack_outputs_proto = out.File
	file_project_planton_provider_aws_awsrdsinstance_v1_stack_outputs_proto_rawDesc = nil
	file_project_planton_provider_aws_awsrdsinstance_v1_stack_outputs_proto_goTypes = nil
	file_project_planton_provider_aws_awsrdsinstance_v1_stack_outputs_proto_depIdxs = nil
}
