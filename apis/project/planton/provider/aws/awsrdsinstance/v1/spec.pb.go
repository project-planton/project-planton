// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/aws/awsrdsinstance/v1/spec.proto

package awsrdsinstancev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/project-planton/project-planton/apis/project/planton/shared/foreignkey/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AwsRdsInstanceSpec defines the minimal configuration to create a single AWS RDS DB instance
// (engines like postgres, mysql, mariadb, oracle, sqlserver). It focuses on essential 80/20 fields
// for networking, engine selection, instance sizing, and credentials. Validations are intentionally
// omitted in this rule; a later rule will add them.
type AwsRdsInstanceSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Subnets for the DB subnet group. Provide at least two private subnets for high availability.
	// Alternatively, provide an existing DB subnet group name via db_subnet_group_name.
	SubnetIds []*v1.StringValueOrRef `protobuf:"bytes,1,rep,name=subnet_ids,json=subnetIds,proto3" json:"subnet_ids,omitempty"`
	// Name of an existing DB subnet group to use instead of specifying subnet_ids.
	DbSubnetGroupName *v1.StringValueOrRef `protobuf:"bytes,2,opt,name=db_subnet_group_name,json=dbSubnetGroupName,proto3" json:"db_subnet_group_name,omitempty"`
	// Security groups to associate with the instance's network interface.
	SecurityGroupIds []*v1.StringValueOrRef `protobuf:"bytes,3,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	// Database engine (e.g., "postgres", "mysql", "mariadb", "oracle-se2", "sqlserver-ex").
	Engine string `protobuf:"bytes,4,opt,name=engine,proto3" json:"engine,omitempty"`
	// Desired engine version (e.g., "14.10" for Postgres, or a version string appropriate to the engine).
	EngineVersion string `protobuf:"bytes,5,opt,name=engine_version,json=engineVersion,proto3" json:"engine_version,omitempty"`
	// Instance class (size), e.g., "db.t3.micro", "db.m6g.large".
	InstanceClass string `protobuf:"bytes,6,opt,name=instance_class,json=instanceClass,proto3" json:"instance_class,omitempty"`
	// Allocated storage size in GiB for the primary storage.
	AllocatedStorageGb int32 `protobuf:"varint,7,opt,name=allocated_storage_gb,json=allocatedStorageGb,proto3" json:"allocated_storage_gb,omitempty"`
	// Enable storage encryption for the instance.
	StorageEncrypted bool `protobuf:"varint,8,opt,name=storage_encrypted,json=storageEncrypted,proto3" json:"storage_encrypted,omitempty"`
	// Customer-managed KMS key ARN/alias for storage encryption when enabled.
	KmsKeyId *v1.StringValueOrRef `protobuf:"bytes,9,opt,name=kms_key_id,json=kmsKeyId,proto3" json:"kms_key_id,omitempty"`
	// Master user credentials. When using platform-managed secrets, a later rule will define validations.
	Username string `protobuf:"bytes,10,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,11,opt,name=password,proto3" json:"password,omitempty"`
	// Database port.
	Port int32 `protobuf:"varint,12,opt,name=port,proto3" json:"port,omitempty"`
	// Whether the instance has a public IP address.
	PubliclyAccessible bool `protobuf:"varint,13,opt,name=publicly_accessible,json=publiclyAccessible,proto3" json:"publicly_accessible,omitempty"`
	// Whether to deploy the instance in Multi-AZ mode.
	MultiAz bool `protobuf:"varint,14,opt,name=multi_az,json=multiAz,proto3" json:"multi_az,omitempty"`
	// Optional parameter group name to associate with the instance.
	ParameterGroupName string `protobuf:"bytes,15,opt,name=parameter_group_name,json=parameterGroupName,proto3" json:"parameter_group_name,omitempty"`
	// Optional option group name to associate with the instance (for certain engines).
	OptionGroupName string `protobuf:"bytes,16,opt,name=option_group_name,json=optionGroupName,proto3" json:"option_group_name,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AwsRdsInstanceSpec) Reset() {
	*x = AwsRdsInstanceSpec{}
	mi := &file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsRdsInstanceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsRdsInstanceSpec) ProtoMessage() {}

func (x *AwsRdsInstanceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsRdsInstanceSpec.ProtoReflect.Descriptor instead.
func (*AwsRdsInstanceSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AwsRdsInstanceSpec) GetSubnetIds() []*v1.StringValueOrRef {
	if x != nil {
		return x.SubnetIds
	}
	return nil
}

func (x *AwsRdsInstanceSpec) GetDbSubnetGroupName() *v1.StringValueOrRef {
	if x != nil {
		return x.DbSubnetGroupName
	}
	return nil
}

func (x *AwsRdsInstanceSpec) GetSecurityGroupIds() []*v1.StringValueOrRef {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *AwsRdsInstanceSpec) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *AwsRdsInstanceSpec) GetEngineVersion() string {
	if x != nil {
		return x.EngineVersion
	}
	return ""
}

func (x *AwsRdsInstanceSpec) GetInstanceClass() string {
	if x != nil {
		return x.InstanceClass
	}
	return ""
}

func (x *AwsRdsInstanceSpec) GetAllocatedStorageGb() int32 {
	if x != nil {
		return x.AllocatedStorageGb
	}
	return 0
}

func (x *AwsRdsInstanceSpec) GetStorageEncrypted() bool {
	if x != nil {
		return x.StorageEncrypted
	}
	return false
}

func (x *AwsRdsInstanceSpec) GetKmsKeyId() *v1.StringValueOrRef {
	if x != nil {
		return x.KmsKeyId
	}
	return nil
}

func (x *AwsRdsInstanceSpec) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AwsRdsInstanceSpec) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AwsRdsInstanceSpec) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AwsRdsInstanceSpec) GetPubliclyAccessible() bool {
	if x != nil {
		return x.PubliclyAccessible
	}
	return false
}

func (x *AwsRdsInstanceSpec) GetMultiAz() bool {
	if x != nil {
		return x.MultiAz
	}
	return false
}

func (x *AwsRdsInstanceSpec) GetParameterGroupName() string {
	if x != nil {
		return x.ParameterGroupName
	}
	return ""
}

func (x *AwsRdsInstanceSpec) GetOptionGroupName() string {
	if x != nil {
		return x.OptionGroupName
	}
	return ""
}

var File_project_planton_provider_aws_awsrdsinstance_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_rawDesc = "" +
	"\n" +
	"9project/planton/provider/aws/awsrdsinstance/v1/spec.proto\x12.project.planton.provider.aws.awsrdsinstance.v1\x1a\x1bbuf/validate/validate.proto\x1a6project/planton/shared/foreignkey/v1/foreign_key.proto\"\xa9\t\n" +
	"\x12AwsRdsInstanceSpec\x12\x85\x01\n" +
	"\n" +
	"subnet_ids\x18\x01 \x03(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB.\x88\xd4a\xd9\x01\x92\xd4a%status.outputs.private_subnets.[*].idR\tsubnetIds\x12g\n" +
	"\x14db_subnet_group_name\x18\x02 \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefR\x11dbSubnetGroupName\x12\x8f\x01\n" +
	"\x12security_group_ids\x18\x03 \x03(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB)\x88\xd4a\xd7\x01\x92\xd4a status.outputs.security_group_idR\x10securityGroupIds\x12\x1f\n" +
	"\x06engine\x18\x04 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x06engine\x12.\n" +
	"\x0eengine_version\x18\x05 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\rengineVersion\x125\n" +
	"\x0einstance_class\x18\x06 \x01(\tB\x0e\xbaH\vr\t\x10\x012\x05^db\\.R\rinstanceClass\x129\n" +
	"\x14allocated_storage_gb\x18\a \x01(\x05B\a\xbaH\x04\x1a\x02 \x00R\x12allocatedStorageGb\x12+\n" +
	"\x11storage_encrypted\x18\b \x01(\bR\x10storageEncrypted\x12u\n" +
	"\n" +
	"kms_key_id\x18\t \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB\x1f\x88\xd4a\xdc\x01\x92\xd4a\x16status.outputs.key_arnR\bkmsKeyId\x12#\n" +
	"\busername\x18\n" +
	" \x01(\tB\a\xbaH\x04r\x02\x10\x01R\busername\x12#\n" +
	"\bpassword\x18\v \x01(\tB\a\xbaH\x04r\x02\x10\x01R\bpassword\x12\x1f\n" +
	"\x04port\x18\f \x01(\x05B\v\xbaH\b\x1a\x06\x18\xff\xff\x03(\x00R\x04port\x12/\n" +
	"\x13publicly_accessible\x18\r \x01(\bR\x12publiclyAccessible\x12\x19\n" +
	"\bmulti_az\x18\x0e \x01(\bR\amultiAz\x120\n" +
	"\x14parameter_group_name\x18\x0f \x01(\tR\x12parameterGroupName\x12*\n" +
	"\x11option_group_name\x18\x10 \x01(\tR\x0foptionGroupName:\x93\x01\xbaH\x8f\x01\x1a\x8c\x01\n" +
	"\x10subnets_or_group\x127Provide either subnet_ids (>=2) or db_subnet_group_name\x1a?(this.subnet_ids.size() >= 2) || has(this.db_subnet_group_name)B\x8f\x03\n" +
	"2com.project.planton.provider.aws.awsrdsinstance.v1B\tSpecProtoP\x01Zogithub.com/project-planton/project-planton/apis/project/planton/provider/aws/awsrdsinstance/v1;awsrdsinstancev1\xa2\x02\x05PPPAA\xaa\x02.Project.Planton.Provider.Aws.Awsrdsinstance.V1\xca\x02.Project\\Planton\\Provider\\Aws\\Awsrdsinstance\\V1\xe2\x02:Project\\Planton\\Provider\\Aws\\Awsrdsinstance\\V1\\GPBMetadata\xea\x023Project::Planton::Provider::Aws::Awsrdsinstance::V1b\x06proto3"

var (
	file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_rawDescData
}

var file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_goTypes = []any{
	(*AwsRdsInstanceSpec)(nil),  // 0: project.planton.provider.aws.awsrdsinstance.v1.AwsRdsInstanceSpec
	(*v1.StringValueOrRef)(nil), // 1: project.planton.shared.foreignkey.v1.StringValueOrRef
}
var file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.aws.awsrdsinstance.v1.AwsRdsInstanceSpec.subnet_ids:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	1, // 1: project.planton.provider.aws.awsrdsinstance.v1.AwsRdsInstanceSpec.db_subnet_group_name:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	1, // 2: project.planton.provider.aws.awsrdsinstance.v1.AwsRdsInstanceSpec.security_group_ids:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	1, // 3: project.planton.provider.aws.awsrdsinstance.v1.AwsRdsInstanceSpec.kms_key_id:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_init() }
func file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_init() {
	if File_project_planton_provider_aws_awsrdsinstance_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_awsrdsinstance_v1_spec_proto = out.File
	file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_goTypes = nil
	file_project_planton_provider_aws_awsrdsinstance_v1_spec_proto_depIdxs = nil
}
