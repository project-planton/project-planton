// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/aws/awsstaticwebsite/v1/spec.proto

package awsstaticwebsitev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/project-planton/project-planton/apis/project/planton/shared/foreignkey/v1"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AwsStaticWebsiteSpec defines an 80/20 specification for deploying a production-ready static website on AWS,
// backed by S3 and optionally fronted by CloudFront with Route53 DNS and ACM TLS. We intentionally expose the
// most common knobs developers modify: domain aliases, TLS, cache TTLs, SPA routing, index/error pages, logging,
// and minimal S3 and CloudFront settings, while hiding long-tail settings.
type AwsStaticWebsiteSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Enable a CloudFront CDN in front of the S3 website. Recommended for production.
	EnableCdn bool `protobuf:"varint,1,opt,name=enable_cdn,json=enableCdn,proto3" json:"enable_cdn,omitempty"`
	// Route53 hosted zone where DNS records will be created for the specified domain aliases.
	Route53ZoneId *v1.StringValueOrRef `protobuf:"bytes,2,opt,name=route53_zone_id,json=route53ZoneId,proto3" json:"route53_zone_id,omitempty"`
	// Domain names (aliases) for the website (e.g., "app.example.com"). When provided with enable_cdn=true,
	// a certificate is required (from ACM) and DNS records are created in the zone.
	DomainAliases []string `protobuf:"bytes,3,rep,name=domain_aliases,json=domainAliases,proto3" json:"domain_aliases,omitempty"`
	// ACM certificate ARN used for TLS on CloudFront when domain_aliases are set.
	CertificateArn *v1.StringValueOrRef `protobuf:"bytes,4,opt,name=certificate_arn,json=certificateArn,proto3" json:"certificate_arn,omitempty"`
	// S3 bucket to host website content. If omitted, a bucket will be created with a context-derived name.
	ContentBucketArn *v1.StringValueOrRef `protobuf:"bytes,5,opt,name=content_bucket_arn,json=contentBucketArn,proto3" json:"content_bucket_arn,omitempty"`
	// Optional prefix in the content bucket where website assets are located (e.g., "site/").
	ContentPrefix string `protobuf:"bytes,6,opt,name=content_prefix,json=contentPrefix,proto3" json:"content_prefix,omitempty"`
	// Treat the site as a Single Page Application: rewrite all 404s to index_document.
	IsSpa bool `protobuf:"varint,7,opt,name=is_spa,json=isSpa,proto3" json:"is_spa,omitempty"`
	// Index and error documents for the website.
	IndexDocument string `protobuf:"bytes,8,opt,name=index_document,json=indexDocument,proto3" json:"index_document,omitempty"`
	ErrorDocument string `protobuf:"bytes,9,opt,name=error_document,json=errorDocument,proto3" json:"error_document,omitempty"`
	// Simple global cache TTL overrides for CDN. These map to default behavior TTLs.
	DefaultTtlSeconds int32 `protobuf:"varint,10,opt,name=default_ttl_seconds,json=defaultTtlSeconds,proto3" json:"default_ttl_seconds,omitempty"`
	MaxTtlSeconds     int32 `protobuf:"varint,11,opt,name=max_ttl_seconds,json=maxTtlSeconds,proto3" json:"max_ttl_seconds,omitempty"`
	MinTtlSeconds     int32 `protobuf:"varint,12,opt,name=min_ttl_seconds,json=minTtlSeconds,proto3" json:"min_ttl_seconds,omitempty"`
	// Enable gzip/brotli compression and IPv6 on the CDN when enabled.
	Compress    bool `protobuf:"varint,13,opt,name=compress,proto3" json:"compress,omitempty"`
	Ipv6Enabled bool `protobuf:"varint,14,opt,name=ipv6_enabled,json=ipv6Enabled,proto3" json:"ipv6_enabled,omitempty"`
	// Price class for CloudFront. Controls the set of edge locations used.
	PriceClass string `protobuf:"bytes,15,opt,name=price_class,json=priceClass,proto3" json:"price_class,omitempty"`
	// Access logging for S3 and CDN.
	Logging *AwsStaticWebsiteLogging `protobuf:"bytes,16,opt,name=logging,proto3" json:"logging,omitempty"`
	// Optional tags applied to created resources (bucket, distribution).
	Tags          map[string]string `protobuf:"bytes,17,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsStaticWebsiteSpec) Reset() {
	*x = AwsStaticWebsiteSpec{}
	mi := &file_project_planton_provider_aws_awsstaticwebsite_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsStaticWebsiteSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsStaticWebsiteSpec) ProtoMessage() {}

func (x *AwsStaticWebsiteSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsstaticwebsite_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsStaticWebsiteSpec.ProtoReflect.Descriptor instead.
func (*AwsStaticWebsiteSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsstaticwebsite_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AwsStaticWebsiteSpec) GetEnableCdn() bool {
	if x != nil {
		return x.EnableCdn
	}
	return false
}

func (x *AwsStaticWebsiteSpec) GetRoute53ZoneId() *v1.StringValueOrRef {
	if x != nil {
		return x.Route53ZoneId
	}
	return nil
}

func (x *AwsStaticWebsiteSpec) GetDomainAliases() []string {
	if x != nil {
		return x.DomainAliases
	}
	return nil
}

func (x *AwsStaticWebsiteSpec) GetCertificateArn() *v1.StringValueOrRef {
	if x != nil {
		return x.CertificateArn
	}
	return nil
}

func (x *AwsStaticWebsiteSpec) GetContentBucketArn() *v1.StringValueOrRef {
	if x != nil {
		return x.ContentBucketArn
	}
	return nil
}

func (x *AwsStaticWebsiteSpec) GetContentPrefix() string {
	if x != nil {
		return x.ContentPrefix
	}
	return ""
}

func (x *AwsStaticWebsiteSpec) GetIsSpa() bool {
	if x != nil {
		return x.IsSpa
	}
	return false
}

func (x *AwsStaticWebsiteSpec) GetIndexDocument() string {
	if x != nil {
		return x.IndexDocument
	}
	return ""
}

func (x *AwsStaticWebsiteSpec) GetErrorDocument() string {
	if x != nil {
		return x.ErrorDocument
	}
	return ""
}

func (x *AwsStaticWebsiteSpec) GetDefaultTtlSeconds() int32 {
	if x != nil {
		return x.DefaultTtlSeconds
	}
	return 0
}

func (x *AwsStaticWebsiteSpec) GetMaxTtlSeconds() int32 {
	if x != nil {
		return x.MaxTtlSeconds
	}
	return 0
}

func (x *AwsStaticWebsiteSpec) GetMinTtlSeconds() int32 {
	if x != nil {
		return x.MinTtlSeconds
	}
	return 0
}

func (x *AwsStaticWebsiteSpec) GetCompress() bool {
	if x != nil {
		return x.Compress
	}
	return false
}

func (x *AwsStaticWebsiteSpec) GetIpv6Enabled() bool {
	if x != nil {
		return x.Ipv6Enabled
	}
	return false
}

func (x *AwsStaticWebsiteSpec) GetPriceClass() string {
	if x != nil {
		return x.PriceClass
	}
	return ""
}

func (x *AwsStaticWebsiteSpec) GetLogging() *AwsStaticWebsiteLogging {
	if x != nil {
		return x.Logging
	}
	return nil
}

func (x *AwsStaticWebsiteSpec) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// AwsStaticWebsiteLogging configures server access logging destinations.
type AwsStaticWebsiteLogging struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Enable access logging for S3 website bucket requests.
	S3Enabled         bool                 `protobuf:"varint,1,opt,name=s3_enabled,json=s3Enabled,proto3" json:"s3_enabled,omitempty"`
	S3TargetBucketArn *v1.StringValueOrRef `protobuf:"bytes,2,opt,name=s3_target_bucket_arn,json=s3TargetBucketArn,proto3" json:"s3_target_bucket_arn,omitempty"`
	S3TargetPrefix    string               `protobuf:"bytes,3,opt,name=s3_target_prefix,json=s3TargetPrefix,proto3" json:"s3_target_prefix,omitempty"`
	// Enable access logging for CloudFront requests.
	CdnEnabled    bool `protobuf:"varint,4,opt,name=cdn_enabled,json=cdnEnabled,proto3" json:"cdn_enabled,omitempty"` // If needed in future, we can support S3 destination for CF logs similarly.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsStaticWebsiteLogging) Reset() {
	*x = AwsStaticWebsiteLogging{}
	mi := &file_project_planton_provider_aws_awsstaticwebsite_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsStaticWebsiteLogging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsStaticWebsiteLogging) ProtoMessage() {}

func (x *AwsStaticWebsiteLogging) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsstaticwebsite_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsStaticWebsiteLogging.ProtoReflect.Descriptor instead.
func (*AwsStaticWebsiteLogging) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsstaticwebsite_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *AwsStaticWebsiteLogging) GetS3Enabled() bool {
	if x != nil {
		return x.S3Enabled
	}
	return false
}

func (x *AwsStaticWebsiteLogging) GetS3TargetBucketArn() *v1.StringValueOrRef {
	if x != nil {
		return x.S3TargetBucketArn
	}
	return nil
}

func (x *AwsStaticWebsiteLogging) GetS3TargetPrefix() string {
	if x != nil {
		return x.S3TargetPrefix
	}
	return ""
}

func (x *AwsStaticWebsiteLogging) GetCdnEnabled() bool {
	if x != nil {
		return x.CdnEnabled
	}
	return false
}

var File_project_planton_provider_aws_awsstaticwebsite_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_aws_awsstaticwebsite_v1_spec_proto_rawDesc = "" +
	"\n" +
	";project/planton/provider/aws/awsstaticwebsite/v1/spec.proto\x120project.planton.provider.aws.awsstaticwebsite.v1\x1a\x1bbuf/validate/validate.proto\x1a6project/planton/shared/foreignkey/v1/foreign_key.proto\x1a,project/planton/shared/options/options.proto\"\xeb\v\n" +
	"\x14AwsStaticWebsiteSpec\x12'\n" +
	"\n" +
	"enable_cdn\x18\x01 \x01(\bB\b\x92\xa6\x1d\x04trueR\tenableCdn\x12\x7f\n" +
	"\x0froute53_zone_id\x18\x02 \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB\x1f\x88\xd4a\xd4\x01\x92\xd4a\x16status.outputs.zone_idR\rroute53ZoneId\x12/\n" +
	"\x0edomain_aliases\x18\x03 \x03(\tB\b\xbaH\x05\x92\x01\x02\x18\x01R\rdomainAliases\x12\x81\x01\n" +
	"\x0fcertificate_arn\x18\x04 \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB \x88\xd4a\xc9\x01\x92\xd4a\x17status.outputs.cert_arnR\x0ecertificateArn\x12\x88\x01\n" +
	"\x12content_bucket_arn\x18\x05 \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB\"\x88\xd4a\xd5\x01\x92\xd4a\x19status.outputs.bucket_arnR\x10contentBucketArn\x12%\n" +
	"\x0econtent_prefix\x18\x06 \x01(\tR\rcontentPrefix\x12\x15\n" +
	"\x06is_spa\x18\a \x01(\bR\x05isSpa\x125\n" +
	"\x0eindex_document\x18\b \x01(\tB\x0e\x92\xa6\x1d\n" +
	"index.htmlR\rindexDocument\x125\n" +
	"\x0eerror_document\x18\t \x01(\tB\x0e\x92\xa6\x1d\n" +
	"error.htmlR\rerrorDocument\x12>\n" +
	"\x13default_ttl_seconds\x18\n" +
	" \x01(\x05B\x0e\xbaH\x04\x1a\x02(\x00\x92\xa6\x1d\x03300R\x11defaultTtlSeconds\x128\n" +
	"\x0fmax_ttl_seconds\x18\v \x01(\x05B\x10\xbaH\x04\x1a\x02(\x00\x92\xa6\x1d\x0586400R\rmaxTtlSeconds\x124\n" +
	"\x0fmin_ttl_seconds\x18\f \x01(\x05B\f\xbaH\x04\x1a\x02(\x00\x92\xa6\x1d\x010R\rminTtlSeconds\x12$\n" +
	"\bcompress\x18\r \x01(\bB\b\x92\xa6\x1d\x04trueR\bcompress\x12+\n" +
	"\fipv6_enabled\x18\x0e \x01(\bB\b\x92\xa6\x1d\x04trueR\vipv6Enabled\x12k\n" +
	"\vprice_class\x18\x0f \x01(\tBJ\xbaH5\xd8\x01\x01r0R\x0ePriceClass_100R\x0ePriceClass_200R\x0ePriceClass_All\x92\xa6\x1d\x0ePriceClass_100R\n" +
	"priceClass\x12c\n" +
	"\alogging\x18\x10 \x01(\v2I.project.planton.provider.aws.awsstaticwebsite.v1.AwsStaticWebsiteLoggingR\alogging\x12d\n" +
	"\x04tags\x18\x11 \x03(\v2P.project.planton.provider.aws.awsstaticwebsite.v1.AwsStaticWebsiteSpec.TagsEntryR\x04tags\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:\xc8\x01\xbaH\xc4\x01\x1a\xc1\x01\n" +
	"\x18cdn_aliases_require_cert\x12Scertificate_arn must be set when enable_cdn is true and domain_aliases are provided\x1aP!this.enable_cdn || this.domain_aliases.size() == 0 || has(this.certificate_arn)\"\x91\x02\n" +
	"\x17AwsStaticWebsiteLogging\x12\x1d\n" +
	"\n" +
	"s3_enabled\x18\x01 \x01(\bR\ts3Enabled\x12\x8b\x01\n" +
	"\x14s3_target_bucket_arn\x18\x02 \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB\"\x88\xd4a\xd5\x01\x92\xd4a\x19status.outputs.bucket_arnR\x11s3TargetBucketArn\x12(\n" +
	"\x10s3_target_prefix\x18\x03 \x01(\tR\x0es3TargetPrefix\x12\x1f\n" +
	"\vcdn_enabled\x18\x04 \x01(\bR\n" +
	"cdnEnabledB\x9d\x03\n" +
	"4com.project.planton.provider.aws.awsstaticwebsite.v1B\tSpecProtoP\x01Zsgithub.com/project-planton/project-planton/apis/project/planton/provider/aws/awsstaticwebsite/v1;awsstaticwebsitev1\xa2\x02\x05PPPAA\xaa\x020Project.Planton.Provider.Aws.Awsstaticwebsite.V1\xca\x020Project\\Planton\\Provider\\Aws\\Awsstaticwebsite\\V1\xe2\x02<Project\\Planton\\Provider\\Aws\\Awsstaticwebsite\\V1\\GPBMetadata\xea\x025Project::Planton::Provider::Aws::Awsstaticwebsite::V1b\x06proto3"

var (
	file_project_planton_provider_aws_awsstaticwebsite_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_awsstaticwebsite_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_aws_awsstaticwebsite_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_awsstaticwebsite_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_awsstaticwebsite_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awsstaticwebsite_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awsstaticwebsite_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_aws_awsstaticwebsite_v1_spec_proto_rawDescData
}

var file_project_planton_provider_aws_awsstaticwebsite_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_project_planton_provider_aws_awsstaticwebsite_v1_spec_proto_goTypes = []any{
	(*AwsStaticWebsiteSpec)(nil),    // 0: project.planton.provider.aws.awsstaticwebsite.v1.AwsStaticWebsiteSpec
	(*AwsStaticWebsiteLogging)(nil), // 1: project.planton.provider.aws.awsstaticwebsite.v1.AwsStaticWebsiteLogging
	nil,                             // 2: project.planton.provider.aws.awsstaticwebsite.v1.AwsStaticWebsiteSpec.TagsEntry
	(*v1.StringValueOrRef)(nil),     // 3: project.planton.shared.foreignkey.v1.StringValueOrRef
}
var file_project_planton_provider_aws_awsstaticwebsite_v1_spec_proto_depIdxs = []int32{
	3, // 0: project.planton.provider.aws.awsstaticwebsite.v1.AwsStaticWebsiteSpec.route53_zone_id:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	3, // 1: project.planton.provider.aws.awsstaticwebsite.v1.AwsStaticWebsiteSpec.certificate_arn:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	3, // 2: project.planton.provider.aws.awsstaticwebsite.v1.AwsStaticWebsiteSpec.content_bucket_arn:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	1, // 3: project.planton.provider.aws.awsstaticwebsite.v1.AwsStaticWebsiteSpec.logging:type_name -> project.planton.provider.aws.awsstaticwebsite.v1.AwsStaticWebsiteLogging
	2, // 4: project.planton.provider.aws.awsstaticwebsite.v1.AwsStaticWebsiteSpec.tags:type_name -> project.planton.provider.aws.awsstaticwebsite.v1.AwsStaticWebsiteSpec.TagsEntry
	3, // 5: project.planton.provider.aws.awsstaticwebsite.v1.AwsStaticWebsiteLogging.s3_target_bucket_arn:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_awsstaticwebsite_v1_spec_proto_init() }
func file_project_planton_provider_aws_awsstaticwebsite_v1_spec_proto_init() {
	if File_project_planton_provider_aws_awsstaticwebsite_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awsstaticwebsite_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awsstaticwebsite_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_awsstaticwebsite_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_awsstaticwebsite_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_aws_awsstaticwebsite_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_awsstaticwebsite_v1_spec_proto = out.File
	file_project_planton_provider_aws_awsstaticwebsite_v1_spec_proto_goTypes = nil
	file_project_planton_provider_aws_awsstaticwebsite_v1_spec_proto_depIdxs = nil
}
