// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/aws/awsroute53zone/v1/spec.proto

package awsroute53zonev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	dnsrecordtype "github.com/project-planton/project-planton/apis/project/planton/shared/networking/enums/dnsrecordtype"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AwsRoute53ZoneSpec defines the specification required to create and manage a Route53 DNS Zone in AWS.
// This message encapsulates the configurations necessary for setting up DNS records within the zone,
// allowing you to specify multiple DNS records of various types.
// AWS Route53 is a scalable and highly available Domain Name System (DNS) web service that can be used
// to route users to internet applications by translating domain names into IP addresses.
// This specification helps in automating the creation and management of DNS records within a Route53 zone,
// ensuring that your domain names are correctly mapped to your resources.
type AwsRoute53ZoneSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The DNS records that are added to the zone.
	// Each record represents a DNS resource record, such as A, AAAA, CNAME, MX, TXT, etc.
	// These records define how your domain or subdomains are routed to your resources.
	Records       []*Route53DnsRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsRoute53ZoneSpec) Reset() {
	*x = AwsRoute53ZoneSpec{}
	mi := &file_project_planton_provider_aws_awsroute53zone_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsRoute53ZoneSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsRoute53ZoneSpec) ProtoMessage() {}

func (x *AwsRoute53ZoneSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsroute53zone_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsRoute53ZoneSpec.ProtoReflect.Descriptor instead.
func (*AwsRoute53ZoneSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsroute53zone_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AwsRoute53ZoneSpec) GetRecords() []*Route53DnsRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

// Route53DnsRecord represents a DNS resource record in the Route53 zone.
// It defines the type of DNS record, the domain name, the values associated with the record,
// and the Time To Live (TTL) for caching purposes.
// This message allows you to specify detailed DNS configurations for your domain,
// enabling fine-grained control over how your domain name resolves.
type Route53DnsRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The DNS record type.
	// This specifies the type of DNS record, such as A, AAAA, CNAME, MX, TXT, etc.
	// The record type determines how the DNS query is processed and what kind of data is returned.
	RecordType dnsrecordtype.DnsRecordType `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3,enum=project.planton.shared.networking.enums.dnsrecordtype.DnsRecordType" json:"record_type,omitempty"`
	// The name of the DNS record, e.g., "example.com." or "dev.example.com.".
	// This is the domain name or subdomain for which the DNS record applies.
	// The value should always end with a dot, following DNS standards to denote a fully qualified domain name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The values for the DNS record.
	// This field contains the data associated with the DNS record type.
	// For example, for an A record, it would be the IP address(es) the domain resolves to.
	// If the record type is CNAME, each value in the list should end with a dot to denote a fully qualified domain name.
	Values []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	// The Time To Live (TTL) for the DNS record, in seconds.
	// TTL specifies how long DNS resolvers should cache the DNS record before querying again.
	TtlSeconds    int32 `protobuf:"varint,4,opt,name=ttl_seconds,json=ttlSeconds,proto3" json:"ttl_seconds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Route53DnsRecord) Reset() {
	*x = Route53DnsRecord{}
	mi := &file_project_planton_provider_aws_awsroute53zone_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Route53DnsRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route53DnsRecord) ProtoMessage() {}

func (x *Route53DnsRecord) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsroute53zone_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route53DnsRecord.ProtoReflect.Descriptor instead.
func (*Route53DnsRecord) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsroute53zone_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *Route53DnsRecord) GetRecordType() dnsrecordtype.DnsRecordType {
	if x != nil {
		return x.RecordType
	}
	return dnsrecordtype.DnsRecordType(0)
}

func (x *Route53DnsRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Route53DnsRecord) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Route53DnsRecord) GetTtlSeconds() int32 {
	if x != nil {
		return x.TtlSeconds
	}
	return 0
}

var File_project_planton_provider_aws_awsroute53zone_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_aws_awsroute53zone_v1_spec_proto_rawDesc = "" +
	"\n" +
	"9project/planton/provider/aws/awsroute53zone/v1/spec.proto\x12.project.planton.provider.aws.awsroute53zone.v1\x1a\x1bbuf/validate/validate.proto\x1aKproject/planton/shared/networking/enums/dnsrecordtype/dns_record_type.proto\"p\n" +
	"\x12AwsRoute53ZoneSpec\x12Z\n" +
	"\arecords\x18\x01 \x03(\v2@.project.planton.provider.aws.awsroute53zone.v1.Route53DnsRecordR\arecords\"\x93\x02\n" +
	"\x10Route53DnsRecord\x12m\n" +
	"\vrecord_type\x18\x01 \x01(\x0e2D.project.planton.shared.networking.enums.dnsrecordtype.DnsRecordTypeB\x06\xbaH\x03\xc8\x01\x01R\n" +
	"recordType\x12W\n" +
	"\x04name\x18\x02 \x01(\tBC\xbaH@\xc8\x01\x01r;29^(?:\\*\\.[A-Za-z0-9\\-\\.]+|[A-Za-z0-9\\-\\.]+\\.[A-Za-z]{2,})$R\x04name\x12\x16\n" +
	"\x06values\x18\x03 \x03(\tR\x06values\x12\x1f\n" +
	"\vttl_seconds\x18\x04 \x01(\x05R\n" +
	"ttlSecondsB\x8f\x03\n" +
	"2com.project.planton.provider.aws.awsroute53zone.v1B\tSpecProtoP\x01Zogithub.com/project-planton/project-planton/apis/project/planton/provider/aws/awsroute53zone/v1;awsroute53zonev1\xa2\x02\x05PPPAA\xaa\x02.Project.Planton.Provider.Aws.Awsroute53zone.V1\xca\x02.Project\\Planton\\Provider\\Aws\\Awsroute53zone\\V1\xe2\x02:Project\\Planton\\Provider\\Aws\\Awsroute53zone\\V1\\GPBMetadata\xea\x023Project::Planton::Provider::Aws::Awsroute53zone::V1b\x06proto3"

var (
	file_project_planton_provider_aws_awsroute53zone_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_awsroute53zone_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_aws_awsroute53zone_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_awsroute53zone_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_awsroute53zone_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awsroute53zone_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awsroute53zone_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_aws_awsroute53zone_v1_spec_proto_rawDescData
}

var file_project_planton_provider_aws_awsroute53zone_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_project_planton_provider_aws_awsroute53zone_v1_spec_proto_goTypes = []any{
	(*AwsRoute53ZoneSpec)(nil),       // 0: project.planton.provider.aws.awsroute53zone.v1.AwsRoute53ZoneSpec
	(*Route53DnsRecord)(nil),         // 1: project.planton.provider.aws.awsroute53zone.v1.Route53DnsRecord
	(dnsrecordtype.DnsRecordType)(0), // 2: project.planton.shared.networking.enums.dnsrecordtype.DnsRecordType
}
var file_project_planton_provider_aws_awsroute53zone_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.aws.awsroute53zone.v1.AwsRoute53ZoneSpec.records:type_name -> project.planton.provider.aws.awsroute53zone.v1.Route53DnsRecord
	2, // 1: project.planton.provider.aws.awsroute53zone.v1.Route53DnsRecord.record_type:type_name -> project.planton.shared.networking.enums.dnsrecordtype.DnsRecordType
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_awsroute53zone_v1_spec_proto_init() }
func file_project_planton_provider_aws_awsroute53zone_v1_spec_proto_init() {
	if File_project_planton_provider_aws_awsroute53zone_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awsroute53zone_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awsroute53zone_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_awsroute53zone_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_awsroute53zone_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_aws_awsroute53zone_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_awsroute53zone_v1_spec_proto = out.File
	file_project_planton_provider_aws_awsroute53zone_v1_spec_proto_goTypes = nil
	file_project_planton_provider_aws_awsroute53zone_v1_spec_proto_depIdxs = nil
}
