// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/provider/aws/awssecuritygroup/v1/spec.proto

package awssecuritygroupv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AwsSecurityGroupSpec defines the primary configuration for creating an AWS EC2 Security Group in a specified VPC.
type AwsSecurityGroupSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// vpc_id is the ID of the VPC where this Security Group will be created.
	// Example: "vpc-12345abcde"
	// This field is required because every Security Group must belong to one VPC.
	VpcId string `protobuf:"bytes,1,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	// name is the name of the Security Group. If omitted, one may be auto-generated.
	// Must be unique within the VPC.
	// Recommendation: Use a meaningful name for easier identification in the AWS console.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// description provides a short explanation of this Security Group’s purpose.
	// This field is required by AWS and cannot be modified once created without a replacement.
	// Example: "Allows inbound HTTP and SSH for web tier"
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// ingress_rules define the inbound traffic rules for this Security Group.
	// If empty, inbound traffic is fully restricted (deny all).
	IngressRules []*SecurityGroupRule `protobuf:"bytes,4,rep,name=ingress_rules,json=ingressRules,proto3" json:"ingress_rules,omitempty"`
	// egress_rules define the outbound traffic rules for this Security Group.
	// If empty, AWS defaults to allow all outbound traffic unless configured otherwise.
	EgressRules []*SecurityGroupRule `protobuf:"bytes,5,rep,name=egress_rules,json=egressRules,proto3" json:"egress_rules,omitempty"`
}

func (x *AwsSecurityGroupSpec) Reset() {
	*x = AwsSecurityGroupSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awssecuritygroup_v1_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsSecurityGroupSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsSecurityGroupSpec) ProtoMessage() {}

func (x *AwsSecurityGroupSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awssecuritygroup_v1_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsSecurityGroupSpec.ProtoReflect.Descriptor instead.
func (*AwsSecurityGroupSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awssecuritygroup_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AwsSecurityGroupSpec) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *AwsSecurityGroupSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AwsSecurityGroupSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AwsSecurityGroupSpec) GetIngressRules() []*SecurityGroupRule {
	if x != nil {
		return x.IngressRules
	}
	return nil
}

func (x *AwsSecurityGroupSpec) GetEgressRules() []*SecurityGroupRule {
	if x != nil {
		return x.EgressRules
	}
	return nil
}

// SecurityGroupRule represents a single inbound or outbound rule in the Security Group.
// For ingress, fill in sources (cidrs or source_security_group_ids).
// For egress, fill in destinations (cidrs or destination_security_group_ids).
type SecurityGroupRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// protocol indicates the protocol for the rule.
	// Common values: "tcp", "udp", "icmp", or "-1" (all protocols).
	Protocol string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// from_port is the starting port in the range.
	// For single-port rules, from_port == to_port.
	// Use 0 when specifying all ports (with protocol = -1) or for ICMP types.
	FromPort int32 `protobuf:"varint,2,opt,name=from_port,json=fromPort,proto3" json:"from_port,omitempty"`
	// to_port is the ending port in the range.
	// For single-port rules, to_port == from_port.
	// Use 0 when specifying all ports (with protocol = -1) or for ICMP codes.
	ToPort int32 `protobuf:"varint,3,opt,name=to_port,json=toPort,proto3" json:"to_port,omitempty"`
	// ipv4_cidrs is the list of IPv4 CIDR blocks allowed (ingress) or targeted (egress).
	// Examples: "10.0.0.0/16", "0.0.0.0/0"
	// If empty, no IPv4 CIDRs are included in this rule.
	Ipv4Cidrs []string `protobuf:"bytes,4,rep,name=ipv4_cidrs,json=ipv4Cidrs,proto3" json:"ipv4_cidrs,omitempty"`
	// ipv6_cidrs is the list of IPv6 CIDR blocks allowed or targeted.
	// Example: "::/0"
	// If empty, no IPv6 CIDRs are included in this rule.
	Ipv6Cidrs []string `protobuf:"bytes,5,rep,name=ipv6_cidrs,json=ipv6Cidrs,proto3" json:"ipv6_cidrs,omitempty"`
	// source_security_group_ids is the list of Security Group IDs that can send traffic (for ingress).
	// Typically used for internal traffic between resources. For egress, this field is less common.
	SourceSecurityGroupIds []string `protobuf:"bytes,6,rep,name=source_security_group_ids,json=sourceSecurityGroupIds,proto3" json:"source_security_group_ids,omitempty"`
	// destination_security_group_ids is the list of Security Group IDs that receive traffic (for egress).
	// Not typically used for ingress. Useful for restricting outbound traffic to specific groups.
	DestinationSecurityGroupIds []string `protobuf:"bytes,7,rep,name=destination_security_group_ids,json=destinationSecurityGroupIds,proto3" json:"destination_security_group_ids,omitempty"`
	// self_reference indicates whether to allow traffic from/to the same Security Group.
	// This is equivalent to referencing the group’s own ID.
	SelfReference bool `protobuf:"varint,8,opt,name=self_reference,json=selfReference,proto3" json:"self_reference,omitempty"`
	// rule_description is an optional explanation of this specific rule,
	// aiding in clarity and maintenance. Max 255 chars recommended.
	RuleDescription string `protobuf:"bytes,9,opt,name=rule_description,json=ruleDescription,proto3" json:"rule_description,omitempty"`
}

func (x *SecurityGroupRule) Reset() {
	*x = SecurityGroupRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awssecuritygroup_v1_spec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityGroupRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityGroupRule) ProtoMessage() {}

func (x *SecurityGroupRule) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awssecuritygroup_v1_spec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityGroupRule.ProtoReflect.Descriptor instead.
func (*SecurityGroupRule) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awssecuritygroup_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *SecurityGroupRule) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *SecurityGroupRule) GetFromPort() int32 {
	if x != nil {
		return x.FromPort
	}
	return 0
}

func (x *SecurityGroupRule) GetToPort() int32 {
	if x != nil {
		return x.ToPort
	}
	return 0
}

func (x *SecurityGroupRule) GetIpv4Cidrs() []string {
	if x != nil {
		return x.Ipv4Cidrs
	}
	return nil
}

func (x *SecurityGroupRule) GetIpv6Cidrs() []string {
	if x != nil {
		return x.Ipv6Cidrs
	}
	return nil
}

func (x *SecurityGroupRule) GetSourceSecurityGroupIds() []string {
	if x != nil {
		return x.SourceSecurityGroupIds
	}
	return nil
}

func (x *SecurityGroupRule) GetDestinationSecurityGroupIds() []string {
	if x != nil {
		return x.DestinationSecurityGroupIds
	}
	return nil
}

func (x *SecurityGroupRule) GetSelfReference() bool {
	if x != nil {
		return x.SelfReference
	}
	return false
}

func (x *SecurityGroupRule) GetRuleDescription() string {
	if x != nil {
		return x.RuleDescription
	}
	return ""
}

var File_project_planton_provider_aws_awssecuritygroup_v1_spec_proto protoreflect.FileDescriptor

var file_project_planton_provider_aws_awssecuritygroup_v1_spec_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x61,
	0x77, 0x73, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x30, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x1a,
	0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x84, 0x04, 0x0a, 0x14, 0x41,
	0x77, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x1d, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x76, 0x70, 0x63,
	0x49, 0x64, 0x12, 0x74, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x60, 0xba, 0x48, 0x5d, 0xba, 0x01, 0x5a, 0x0a, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x32, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x20, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64,
	0x20, 0x32, 0x35, 0x35, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x1a,
	0x11, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69, 0x73, 0x29, 0x20, 0x3c, 0x3d, 0x20, 0x32,
	0x35, 0x35, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x62,
	0xba, 0x48, 0x5f, 0xba, 0x01, 0x59, 0x0a, 0x18, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x2a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x75,
	0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x20, 0x32, 0x35,
	0x35, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x11, 0x73, 0x69,
	0x7a, 0x65, 0x28, 0x74, 0x68, 0x69, 0x73, 0x29, 0x20, 0x3c, 0x3d, 0x20, 0x32, 0x35, 0x35, 0xc8,
	0x01, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x68, 0x0a, 0x0d, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x0c, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61,
	0x77, 0x73, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x0b, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x22, 0xe9, 0x03, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x6f, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x76, 0x34, 0x43, 0x69, 0x64, 0x72, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x76, 0x36, 0x43, 0x69, 0x64, 0x72, 0x73, 0x12,
	0x39, 0x0a, 0x19, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x16, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x1b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x66, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x10, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x69, 0xba, 0x48, 0x66, 0xba, 0x01, 0x63, 0x0a, 0x1d, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x2f, 0x52, 0x75, 0x6c, 0x65, 0x20, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20,
	0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x20, 0x32, 0x35, 0x35, 0x20, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x11, 0x73, 0x69, 0x7a, 0x65, 0x28,
	0x74, 0x68, 0x69, 0x73, 0x29, 0x20, 0x3c, 0x3d, 0x20, 0x32, 0x35, 0x35, 0x52, 0x0f, 0x72, 0x75,
	0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x9d, 0x03,
	0x0a, 0x34, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61,
	0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x73, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x77,
	0x73, 0x2f, 0x61, 0x77, 0x73, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x77, 0x73, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x76, 0x31, 0xa2, 0x02, 0x05, 0x50, 0x50, 0x50, 0x41, 0x41,
	0xaa, 0x02, 0x30, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x77, 0x73, 0x2e,
	0x41, 0x77, 0x73, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x30, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x41,
	0x77, 0x73, 0x5c, 0x41, 0x77, 0x73, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x3c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5c, 0x41, 0x77, 0x73, 0x5c, 0x41, 0x77, 0x73, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x35, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a,
	0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x3a, 0x3a, 0x41, 0x77, 0x73, 0x3a, 0x3a, 0x41, 0x77, 0x73, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_project_planton_provider_aws_awssecuritygroup_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_awssecuritygroup_v1_spec_proto_rawDescData = file_project_planton_provider_aws_awssecuritygroup_v1_spec_proto_rawDesc
)

func file_project_planton_provider_aws_awssecuritygroup_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_awssecuritygroup_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_awssecuritygroup_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_provider_aws_awssecuritygroup_v1_spec_proto_rawDescData)
	})
	return file_project_planton_provider_aws_awssecuritygroup_v1_spec_proto_rawDescData
}

var file_project_planton_provider_aws_awssecuritygroup_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_project_planton_provider_aws_awssecuritygroup_v1_spec_proto_goTypes = []any{
	(*AwsSecurityGroupSpec)(nil), // 0: project.planton.provider.aws.awssecuritygroup.v1.AwsSecurityGroupSpec
	(*SecurityGroupRule)(nil),    // 1: project.planton.provider.aws.awssecuritygroup.v1.SecurityGroupRule
}
var file_project_planton_provider_aws_awssecuritygroup_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.aws.awssecuritygroup.v1.AwsSecurityGroupSpec.ingress_rules:type_name -> project.planton.provider.aws.awssecuritygroup.v1.SecurityGroupRule
	1, // 1: project.planton.provider.aws.awssecuritygroup.v1.AwsSecurityGroupSpec.egress_rules:type_name -> project.planton.provider.aws.awssecuritygroup.v1.SecurityGroupRule
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_awssecuritygroup_v1_spec_proto_init() }
func file_project_planton_provider_aws_awssecuritygroup_v1_spec_proto_init() {
	if File_project_planton_provider_aws_awssecuritygroup_v1_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_provider_aws_awssecuritygroup_v1_spec_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AwsSecurityGroupSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awssecuritygroup_v1_spec_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*SecurityGroupRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_provider_aws_awssecuritygroup_v1_spec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_awssecuritygroup_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_awssecuritygroup_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_aws_awssecuritygroup_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_awssecuritygroup_v1_spec_proto = out.File
	file_project_planton_provider_aws_awssecuritygroup_v1_spec_proto_rawDesc = nil
	file_project_planton_provider_aws_awssecuritygroup_v1_spec_proto_goTypes = nil
	file_project_planton_provider_aws_awssecuritygroup_v1_spec_proto_depIdxs = nil
}
