syntax = "proto3";

package project.planton.provider.aws.awslambda.v1;

import "buf/validate/validate.proto";
import "project/planton/shared/foreignkey/v1/foreign_key.proto";

// AwsLambdaSpec defines the desired configuration for an AWS Lambda function.
//
// Supported code packaging models:
// - Zip/S3: Provide an archive in S3 via `code.s3` and set `runtime` and `handler`.
// - Container image: Provide an ECR image via `code.image_uri`. In this mode `runtime`
//   and `handler` are defined by the image and are ignored here.
//
// Notes:
// - This spec intentionally contains no validations or CEL rules; those are added later.
// - Credentials, region, and deployment workflow live outside this spec in stack inputs.
message AwsLambdaSpec {
  // Human-readable function name shown in the AWS Console and APIs.
  // Must be unique per account/region. If omitted, the platform may derive a
  // stable name from the resource metadata (e.g., org, environment, resource name).
  // Allowed characters and length are enforced by AWS; keep it concise and DNS-like.
  string function_name = 1 [(buf.validate.field).string.min_len = 1];

  // Free-form description visible in the AWS Console to document the purpose
  // and behavior of the function. Useful for operational context and search.
  string description = 2;

  // Execution role for the function. Accepts a direct role ARN (value) or a reference
  // to another resource that surfaces a role ARN in its outputs (e.g., AwsIamRole).
  project.planton.shared.foreignkey.v1.StringValueOrRef role_arn = 3 [
    (buf.validate.field).required = true,
    (project.planton.shared.foreignkey.v1.default_kind) = AwsIamRole,
    (project.planton.shared.foreignkey.v1.default_kind_field_path) = "status.outputs.role_arn"
  ];

  // Language/runtime for zip/S3 deployments. Ignored for container image code.
  // Examples: "nodejs18.x", "python3.11", "java21", "go1.x", "dotnet8", "ruby3.3", "provided.al2".
  // Use "provided.al2" for custom runtimes or native binaries packaged in the zip.
  string runtime = 4;

  // Entrypoint for zip/S3 deployments. Format is language-specific, e.g.:
  // - Node.js:    "index.handler"
  // - Python:     "module.function"
  // - Java:       "package.Class::method"
  // - .NET:       "Assembly::Namespace.Class::Method"
  // - Go/custom:  usually "bootstrap" when using a custom runtime
  // Ignored for container image code where the image CMD/ENTRYPOINT defines it.
  string handler = 5;

  // Memory allocation in megabytes. CPU, network, and some I/O scale with this
  // value. Choose the smallest value that meets performance goals to control cost.
  // Typical AWS-supported range is 128–10240 MB.
  int32 memory_mb = 6;

  // Maximum execution time per invocation in seconds. Set slightly higher than
  // the worst-case expected runtime. Typical AWS-supported range is 1–900 seconds.
  int32 timeout_seconds = 7;

  // Hard limit on concurrent executions for this function. Behavior:
  // - Omit or set to -1 to use the unreserved account pool (no dedicated cap).
  // - Set to 0 to effectively disable invocations (useful for maintenance).
  // - Set to a positive integer to reserve that many concurrent executions.
  int32 reserved_concurrency = 8;

  // Key/value environment variables available to the function at runtime.
  // Avoid embedding sensitive values directly; prefer external secret sources.
  // When `kms_key_arn` is set, AWS encrypts these at rest using the specified key.
  map<string, string> environment = 9;

  // Subnets in which the Lambda function will create network interfaces.
  // Typically private subnets. Provide at least two across different AZs for HA.
  // Accepts either literal subnet IDs (value) or references to other resources
  // that expose subnet IDs via their status/outputs.
  repeated project.planton.shared.foreignkey.v1.StringValueOrRef subnets = 10 [
    (project.planton.shared.foreignkey.v1.default_kind) = AwsVpc
  ];

  // Security groups attached to the Lambda ENIs. Ensure outbound rules allow
  // access to required services (e.g., databases, AWS endpoints, the Internet
  // via NAT if needed). Accepts either literal security group IDs (value) or
  // references to a resource that provides a security group ID output.
  repeated project.planton.shared.foreignkey.v1.StringValueOrRef security_groups = 11 [
    (project.planton.shared.foreignkey.v1.default_kind) = AwsSecurityGroup,
    (project.planton.shared.foreignkey.v1.default_kind_field_path) = "status.outputs.security_group_id"
  ];

  // Processor architecture of the execution environment. Use ARM64 for better
  // price/performance when your language/runtime supports it; use X86_64 for
  // legacy dependencies or runtimes not available on ARM64.
  Architecture architecture = 12 [
    (buf.validate.field).enum.defined_only = true
  ];

  // Layer ARNs to include. Accepts direct ARNs (value) or references to resources
  // that provide layer ARNs as outputs. Up to five layers may be attached; order matters.
  repeated project.planton.shared.foreignkey.v1.StringValueOrRef layer_arns = 13;

  // Customer-managed KMS key used to encrypt environment variables at rest.
  // Accepts a direct key ARN (value) or a reference to a KMS key resource output.
  project.planton.shared.foreignkey.v1.StringValueOrRef kms_key_arn = 14 [
    (project.planton.shared.foreignkey.v1.default_kind) = AwsKmsKey,
    (project.planton.shared.foreignkey.v1.default_kind_field_path) = "status.outputs.key_arn"
  ];

  // Source of the function code. Select the type and populate the corresponding
  // fields below. Validation is applied downstream to ensure consistency.
  CodeSourceType code_source_type = 15 [
    (buf.validate.field).enum.defined_only = true
  ];

  // S3 location of the deployment package (zip archive) for zip-based code.
  // The archive should contain your compiled artifacts and the handler.
  // Prefer a bucket in the same region as the function to avoid cross-region copies.
  S3Code s3 = 16;

  // Reference to an image stored in ECR for container-based code. The image
  // defines the runtime and handler via its entrypoint/CMD. Example:
  // "123456789012.dkr.ecr.us-east-1.amazonaws.com/repo:tag".
  string image_uri = 17;

  // Message-level validations tying fields together.
  option (buf.validate.message).cel = {
    id: "code_source_type_required",
    message: "code_source_type must be set",
    expression: "this.code_source_type != 0"
  };

  option (buf.validate.message).cel = {
    id: "role_required",
    message: "role_arn must be provided as a value or reference",
    expression: "has(this.role_arn) && (has(this.role_arn.value) || has(this.role_arn.value_from))"
  };

  option (buf.validate.message).cel = {
    id: "s3_requires_runtime_handler_and_excludes_image",
    message: "when code_source_type is S3, set s3, runtime, and handler; image_uri must be empty",
    expression: "this.code_source_type != 1 || (has(this.s3) && this.image_uri == '' && this.runtime != '' && this.handler != '')"
  };

  option (buf.validate.message).cel = {
    id: "image_requires_image_uri_and_excludes_s3",
    message: "when code_source_type is IMAGE, set image_uri and do not set s3",
    expression: "this.code_source_type != 2 || (this.image_uri != '' && !has(this.s3))"
  };

  option (buf.validate.message).cel = {
    id: "memory_range_or_default",
    message: "memory_mb must be between 128 and 10240 when set",
    expression: "this.memory_mb == 0 || (this.memory_mb >= 128 && this.memory_mb <= 10240)"
  };

  option (buf.validate.message).cel = {
    id: "timeout_range_or_default",
    message: "timeout_seconds must be between 1 and 900 when set",
    expression: "this.timeout_seconds == 0 || (this.timeout_seconds >= 1 && this.timeout_seconds <= 900)"
  };

  option (buf.validate.message).cel = {
    id: "reserved_concurrency_semantics",
    message: "reserved_concurrency must be -1, 0, or a positive integer",
    expression: "this.reserved_concurrency == -1 || this.reserved_concurrency == 0 || this.reserved_concurrency > 0"
  };
}

// S3Code describes the S3 location for a zip-based deployment package.
// Use this when publishing code as an archive rather than a container image.
message S3Code {
  // S3 bucket name that contains the deployment package. Prefer a bucket in
  // the same AWS region as the Lambda function for faster, cheaper deployments.
  string bucket = 1 [(buf.validate.field).string.min_len = 1];

  // S3 object key (path) to the deployment package zip.
  string key = 2 [(buf.validate.field).string.min_len = 1];

  // Optional object version to pin a specific artifact when versioning is enabled.
  string object_version = 3;
}

// Architecture enumerates supported CPU architectures for Lambda.
enum Architecture {
  // Let the platform or provider default select the architecture.
  ARCHITECTURE_UNSPECIFIED = 0;
  // 64-bit x86. Choose this for compatibility with x86-only dependencies.
  X86_64 = 1;
  // 64-bit ARM. Often offers better price/performance when supported.
  ARM64 = 2;
}

// Message-level validations moved inside AWSLambdaSpec.

// CodeSourceType identifies how the function code is supplied.
enum CodeSourceType {
  CODE_SOURCE_TYPE_UNSPECIFIED = 0;
  // Code is provided as a zip archive in S3; use the `s3` field and set
  // `runtime` and `handler` accordingly.
  CODE_SOURCE_TYPE_S3 = 1;
  // Code is provided as a container image in ECR; set `image_uri`. The image
  // defines runtime and handler, so `runtime` and `handler` here are ignored.
  CODE_SOURCE_TYPE_IMAGE = 2;
}


