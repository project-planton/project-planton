// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/aws/awslambda/v1/spec.proto

package awslambdav1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/project-planton/project-planton/apis/project/planton/shared/foreignkey/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Architecture enumerates supported CPU architectures for Lambda.
type Architecture int32

const (
	// Let the platform or provider default select the architecture.
	Architecture_ARCHITECTURE_UNSPECIFIED Architecture = 0
	// 64-bit x86. Choose this for compatibility with x86-only dependencies.
	Architecture_X86_64 Architecture = 1
	// 64-bit ARM. Often offers better price/performance when supported.
	Architecture_ARM64 Architecture = 2
)

// Enum value maps for Architecture.
var (
	Architecture_name = map[int32]string{
		0: "ARCHITECTURE_UNSPECIFIED",
		1: "X86_64",
		2: "ARM64",
	}
	Architecture_value = map[string]int32{
		"ARCHITECTURE_UNSPECIFIED": 0,
		"X86_64":                   1,
		"ARM64":                    2,
	}
)

func (x Architecture) Enum() *Architecture {
	p := new(Architecture)
	*p = x
	return p
}

func (x Architecture) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Architecture) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_provider_aws_awslambda_v1_spec_proto_enumTypes[0].Descriptor()
}

func (Architecture) Type() protoreflect.EnumType {
	return &file_project_planton_provider_aws_awslambda_v1_spec_proto_enumTypes[0]
}

func (x Architecture) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Architecture.Descriptor instead.
func (Architecture) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDescGZIP(), []int{0}
}

// CodeSourceType identifies how the function code is supplied.
type CodeSourceType int32

const (
	CodeSourceType_CODE_SOURCE_TYPE_UNSPECIFIED CodeSourceType = 0
	// Code is provided as a zip archive in S3; use the `s3` field and set
	// `runtime` and `handler` accordingly.
	CodeSourceType_CODE_SOURCE_TYPE_S3 CodeSourceType = 1
	// Code is provided as a container image in ECR; set `image_uri`. The image
	// defines runtime and handler, so `runtime` and `handler` here are ignored.
	CodeSourceType_CODE_SOURCE_TYPE_IMAGE CodeSourceType = 2
)

// Enum value maps for CodeSourceType.
var (
	CodeSourceType_name = map[int32]string{
		0: "CODE_SOURCE_TYPE_UNSPECIFIED",
		1: "CODE_SOURCE_TYPE_S3",
		2: "CODE_SOURCE_TYPE_IMAGE",
	}
	CodeSourceType_value = map[string]int32{
		"CODE_SOURCE_TYPE_UNSPECIFIED": 0,
		"CODE_SOURCE_TYPE_S3":          1,
		"CODE_SOURCE_TYPE_IMAGE":       2,
	}
)

func (x CodeSourceType) Enum() *CodeSourceType {
	p := new(CodeSourceType)
	*p = x
	return p
}

func (x CodeSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodeSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_provider_aws_awslambda_v1_spec_proto_enumTypes[1].Descriptor()
}

func (CodeSourceType) Type() protoreflect.EnumType {
	return &file_project_planton_provider_aws_awslambda_v1_spec_proto_enumTypes[1]
}

func (x CodeSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodeSourceType.Descriptor instead.
func (CodeSourceType) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDescGZIP(), []int{1}
}

// AwsLambdaSpec defines the desired configuration for an AWS Lambda function.
//
// Supported code packaging models:
//   - Zip/S3: Provide an archive in S3 via `code.s3` and set `runtime` and `handler`.
//   - Container image: Provide an ECR image via `code.image_uri`. In this mode `runtime`
//     and `handler` are defined by the image and are ignored here.
//
// Notes:
// - This spec intentionally contains no validations or CEL rules; those are added later.
// - Credentials, region, and deployment workflow live outside this spec in stack inputs.
type AwsLambdaSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Human-readable function name shown in the AWS Console and APIs.
	// Must be unique per account/region. If omitted, the platform may derive a
	// stable name from the resource metadata (e.g., org, environment, resource name).
	// Allowed characters and length are enforced by AWS; keep it concise and DNS-like.
	FunctionName string `protobuf:"bytes,1,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	// Free-form description visible in the AWS Console to document the purpose
	// and behavior of the function. Useful for operational context and search.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Execution role for the function. Accepts a direct role ARN (value) or a reference
	// to another resource that surfaces a role ARN in its outputs (e.g., AwsIamRole).
	RoleArn *v1.StringValueOrRef `protobuf:"bytes,3,opt,name=role_arn,json=roleArn,proto3" json:"role_arn,omitempty"`
	// Language/runtime for zip/S3 deployments. Ignored for container image code.
	// Examples: "nodejs18.x", "python3.11", "java21", "go1.x", "dotnet8", "ruby3.3", "provided.al2".
	// Use "provided.al2" for custom runtimes or native binaries packaged in the zip.
	Runtime string `protobuf:"bytes,4,opt,name=runtime,proto3" json:"runtime,omitempty"`
	// Entrypoint for zip/S3 deployments. Format is language-specific, e.g.:
	// - Node.js:    "index.handler"
	// - Python:     "module.function"
	// - Java:       "package.Class::method"
	// - .NET:       "Assembly::Namespace.Class::Method"
	// - Go/custom:  usually "bootstrap" when using a custom runtime
	// Ignored for container image code where the image CMD/ENTRYPOINT defines it.
	Handler string `protobuf:"bytes,5,opt,name=handler,proto3" json:"handler,omitempty"`
	// Memory allocation in megabytes. CPU, network, and some I/O scale with this
	// value. Choose the smallest value that meets performance goals to control cost.
	// Typical AWS-supported range is 128–10240 MB.
	MemoryMb int32 `protobuf:"varint,6,opt,name=memory_mb,json=memoryMb,proto3" json:"memory_mb,omitempty"`
	// Maximum execution time per invocation in seconds. Set slightly higher than
	// the worst-case expected runtime. Typical AWS-supported range is 1–900 seconds.
	TimeoutSeconds int32 `protobuf:"varint,7,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	// Hard limit on concurrent executions for this function. Behavior:
	// - Omit or set to -1 to use the unreserved account pool (no dedicated cap).
	// - Set to 0 to effectively disable invocations (useful for maintenance).
	// - Set to a positive integer to reserve that many concurrent executions.
	ReservedConcurrency int32 `protobuf:"varint,8,opt,name=reserved_concurrency,json=reservedConcurrency,proto3" json:"reserved_concurrency,omitempty"`
	// Key/value environment variables available to the function at runtime.
	// Avoid embedding sensitive values directly; prefer external secret sources.
	// When `kms_key_arn` is set, AWS encrypts these at rest using the specified key.
	Environment map[string]string `protobuf:"bytes,9,rep,name=environment,proto3" json:"environment,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Subnets in which the Lambda function will create network interfaces.
	// Typically private subnets. Provide at least two across different AZs for HA.
	// Accepts either literal subnet IDs (value) or references to other resources
	// that expose subnet IDs via their status/outputs.
	Subnets []*v1.StringValueOrRef `protobuf:"bytes,10,rep,name=subnets,proto3" json:"subnets,omitempty"`
	// Security groups attached to the Lambda ENIs. Ensure outbound rules allow
	// access to required services (e.g., databases, AWS endpoints, the Internet
	// via NAT if needed). Accepts either literal security group IDs (value) or
	// references to a resource that provides a security group ID output.
	SecurityGroups []*v1.StringValueOrRef `protobuf:"bytes,11,rep,name=security_groups,json=securityGroups,proto3" json:"security_groups,omitempty"`
	// Processor architecture of the execution environment. Use ARM64 for better
	// price/performance when your language/runtime supports it; use X86_64 for
	// legacy dependencies or runtimes not available on ARM64.
	Architecture Architecture `protobuf:"varint,12,opt,name=architecture,proto3,enum=project.planton.provider.aws.awslambda.v1.Architecture" json:"architecture,omitempty"`
	// Layer ARNs to include. Accepts direct ARNs (value) or references to resources
	// that provide layer ARNs as outputs. Up to five layers may be attached; order matters.
	LayerArns []*v1.StringValueOrRef `protobuf:"bytes,13,rep,name=layer_arns,json=layerArns,proto3" json:"layer_arns,omitempty"`
	// Customer-managed KMS key used to encrypt environment variables at rest.
	// Accepts a direct key ARN (value) or a reference to a KMS key resource output.
	KmsKeyArn *v1.StringValueOrRef `protobuf:"bytes,14,opt,name=kms_key_arn,json=kmsKeyArn,proto3" json:"kms_key_arn,omitempty"`
	// Source of the function code. Select the type and populate the corresponding
	// fields below. Validation is applied downstream to ensure consistency.
	CodeSourceType CodeSourceType `protobuf:"varint,15,opt,name=code_source_type,json=codeSourceType,proto3,enum=project.planton.provider.aws.awslambda.v1.CodeSourceType" json:"code_source_type,omitempty"`
	// S3 location of the deployment package (zip archive) for zip-based code.
	// The archive should contain your compiled artifacts and the handler.
	// Prefer a bucket in the same region as the function to avoid cross-region copies.
	S3 *S3Code `protobuf:"bytes,16,opt,name=s3,proto3" json:"s3,omitempty"`
	// Reference to an image stored in ECR for container-based code. The image
	// defines the runtime and handler via its entrypoint/CMD. Example:
	// "123456789012.dkr.ecr.us-east-1.amazonaws.com/repo:tag".
	ImageUri      string `protobuf:"bytes,17,opt,name=image_uri,json=imageUri,proto3" json:"image_uri,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsLambdaSpec) Reset() {
	*x = AwsLambdaSpec{}
	mi := &file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsLambdaSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsLambdaSpec) ProtoMessage() {}

func (x *AwsLambdaSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsLambdaSpec.ProtoReflect.Descriptor instead.
func (*AwsLambdaSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AwsLambdaSpec) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *AwsLambdaSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AwsLambdaSpec) GetRoleArn() *v1.StringValueOrRef {
	if x != nil {
		return x.RoleArn
	}
	return nil
}

func (x *AwsLambdaSpec) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *AwsLambdaSpec) GetHandler() string {
	if x != nil {
		return x.Handler
	}
	return ""
}

func (x *AwsLambdaSpec) GetMemoryMb() int32 {
	if x != nil {
		return x.MemoryMb
	}
	return 0
}

func (x *AwsLambdaSpec) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *AwsLambdaSpec) GetReservedConcurrency() int32 {
	if x != nil {
		return x.ReservedConcurrency
	}
	return 0
}

func (x *AwsLambdaSpec) GetEnvironment() map[string]string {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *AwsLambdaSpec) GetSubnets() []*v1.StringValueOrRef {
	if x != nil {
		return x.Subnets
	}
	return nil
}

func (x *AwsLambdaSpec) GetSecurityGroups() []*v1.StringValueOrRef {
	if x != nil {
		return x.SecurityGroups
	}
	return nil
}

func (x *AwsLambdaSpec) GetArchitecture() Architecture {
	if x != nil {
		return x.Architecture
	}
	return Architecture_ARCHITECTURE_UNSPECIFIED
}

func (x *AwsLambdaSpec) GetLayerArns() []*v1.StringValueOrRef {
	if x != nil {
		return x.LayerArns
	}
	return nil
}

func (x *AwsLambdaSpec) GetKmsKeyArn() *v1.StringValueOrRef {
	if x != nil {
		return x.KmsKeyArn
	}
	return nil
}

func (x *AwsLambdaSpec) GetCodeSourceType() CodeSourceType {
	if x != nil {
		return x.CodeSourceType
	}
	return CodeSourceType_CODE_SOURCE_TYPE_UNSPECIFIED
}

func (x *AwsLambdaSpec) GetS3() *S3Code {
	if x != nil {
		return x.S3
	}
	return nil
}

func (x *AwsLambdaSpec) GetImageUri() string {
	if x != nil {
		return x.ImageUri
	}
	return ""
}

// S3Code describes the S3 location for a zip-based deployment package.
// Use this when publishing code as an archive rather than a container image.
type S3Code struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// S3 bucket name that contains the deployment package. Prefer a bucket in
	// the same AWS region as the Lambda function for faster, cheaper deployments.
	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// S3 object key (path) to the deployment package zip.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// Optional object version to pin a specific artifact when versioning is enabled.
	ObjectVersion string `protobuf:"bytes,3,opt,name=object_version,json=objectVersion,proto3" json:"object_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *S3Code) Reset() {
	*x = S3Code{}
	mi := &file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3Code) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Code) ProtoMessage() {}

func (x *S3Code) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Code.ProtoReflect.Descriptor instead.
func (*S3Code) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *S3Code) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *S3Code) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *S3Code) GetObjectVersion() string {
	if x != nil {
		return x.ObjectVersion
	}
	return ""
}

var File_project_planton_provider_aws_awslambda_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDesc = "" +
	"\n" +
	"4project/planton/provider/aws/awslambda/v1/spec.proto\x12)project.planton.provider.aws.awslambda.v1\x1a\x1bbuf/validate/validate.proto\x1a6project/planton/shared/foreignkey/v1/foreign_key.proto\"\xb1\x12\n" +
	"\rAwsLambdaSpec\x12,\n" +
	"\rfunction_name\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\ffunctionName\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12y\n" +
	"\brole_arn\x18\x03 \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB&\xbaH\x03\xc8\x01\x01\x88\xd4a\xd0\x01\x92\xd4a\x17status.outputs.role_arnR\aroleArn\x12\x18\n" +
	"\aruntime\x18\x04 \x01(\tR\aruntime\x12\x18\n" +
	"\ahandler\x18\x05 \x01(\tR\ahandler\x12\x1b\n" +
	"\tmemory_mb\x18\x06 \x01(\x05R\bmemoryMb\x12'\n" +
	"\x0ftimeout_seconds\x18\a \x01(\x05R\x0etimeoutSeconds\x121\n" +
	"\x14reserved_concurrency\x18\b \x01(\x05R\x13reservedConcurrency\x12k\n" +
	"\venvironment\x18\t \x03(\v2I.project.planton.provider.aws.awslambda.v1.AwsLambdaSpec.EnvironmentEntryR\venvironment\x12W\n" +
	"\asubnets\x18\n" +
	" \x03(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB\x05\x88\xd4a\xd9\x01R\asubnets\x12\x8a\x01\n" +
	"\x0fsecurity_groups\x18\v \x03(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB)\x88\xd4a\xd7\x01\x92\xd4a status.outputs.security_group_idR\x0esecurityGroups\x12e\n" +
	"\farchitecture\x18\f \x01(\x0e27.project.planton.provider.aws.awslambda.v1.ArchitectureB\b\xbaH\x05\x82\x01\x02\x10\x01R\farchitecture\x12U\n" +
	"\n" +
	"layer_arns\x18\r \x03(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefR\tlayerArns\x12w\n" +
	"\vkms_key_arn\x18\x0e \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB\x1f\x88\xd4a\xdc\x01\x92\xd4a\x16status.outputs.key_arnR\tkmsKeyArn\x12m\n" +
	"\x10code_source_type\x18\x0f \x01(\x0e29.project.planton.provider.aws.awslambda.v1.CodeSourceTypeB\b\xbaH\x05\x82\x01\x02\x10\x01R\x0ecodeSourceType\x12A\n" +
	"\x02s3\x18\x10 \x01(\v21.project.planton.provider.aws.awslambda.v1.S3CodeR\x02s3\x12\x1b\n" +
	"\timage_uri\x18\x11 \x01(\tR\bimageUri\x1a>\n" +
	"\x10EnvironmentEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:\x8e\b\xbaH\x8a\b\x1aU\n" +
	"\x19code_source_type_required\x12\x1ccode_source_type must be set\x1a\x1athis.code_source_type != 0\x1a\xf6\x01\n" +
	".s3_requires_runtime_handler_and_excludes_image\x12Rwhen code_source_type is S3, set s3, runtime, and handler; image_uri must be empty\x1apthis.code_source_type != 1 || (has(this.s3) && this.image_uri == '' && this.runtime != '' && this.handler != '')\x1a\xb2\x01\n" +
	"(image_requires_image_uri_and_excludes_s3\x12?when code_source_type is IMAGE, set image_uri and do not set s3\x1aEthis.code_source_type != 2 || (this.image_uri != '' && !has(this.s3))\x1a\x96\x01\n" +
	"\x17memory_range_or_default\x120memory_mb must be between 128 and 10240 when set\x1aIthis.memory_mb == 0 || (this.memory_mb >= 128 && this.memory_mb <= 10240)\x1a\xa7\x01\n" +
	"\x18timeout_range_or_default\x122timeout_seconds must be between 1 and 900 when set\x1aWthis.timeout_seconds == 0 || (this.timeout_seconds >= 1 && this.timeout_seconds <= 900)\x1a\xbf\x01\n" +
	"\x1ereserved_concurrency_semantics\x129reserved_concurrency must be -1, 0, or a positive integer\x1abthis.reserved_concurrency == -1 || this.reserved_concurrency == 0 || this.reserved_concurrency > 0\"k\n" +
	"\x06S3Code\x12\x1f\n" +
	"\x06bucket\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x06bucket\x12\x19\n" +
	"\x03key\x18\x02 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\x03key\x12%\n" +
	"\x0eobject_version\x18\x03 \x01(\tR\robjectVersion*C\n" +
	"\fArchitecture\x12\x1c\n" +
	"\x18ARCHITECTURE_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06X86_64\x10\x01\x12\t\n" +
	"\x05ARM64\x10\x02*g\n" +
	"\x0eCodeSourceType\x12 \n" +
	"\x1cCODE_SOURCE_TYPE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13CODE_SOURCE_TYPE_S3\x10\x01\x12\x1a\n" +
	"\x16CODE_SOURCE_TYPE_IMAGE\x10\x02B\xec\x02\n" +
	"-com.project.planton.provider.aws.awslambda.v1B\tSpecProtoP\x01Zegithub.com/project-planton/project-planton/apis/project/planton/provider/aws/awslambda/v1;awslambdav1\xa2\x02\x05PPPAA\xaa\x02)Project.Planton.Provider.Aws.Awslambda.V1\xca\x02)Project\\Planton\\Provider\\Aws\\Awslambda\\V1\xe2\x025Project\\Planton\\Provider\\Aws\\Awslambda\\V1\\GPBMetadata\xea\x02.Project::Planton::Provider::Aws::Awslambda::V1b\x06proto3"

var (
	file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDescData
}

var file_project_planton_provider_aws_awslambda_v1_spec_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_project_planton_provider_aws_awslambda_v1_spec_proto_goTypes = []any{
	(Architecture)(0),           // 0: project.planton.provider.aws.awslambda.v1.Architecture
	(CodeSourceType)(0),         // 1: project.planton.provider.aws.awslambda.v1.CodeSourceType
	(*AwsLambdaSpec)(nil),       // 2: project.planton.provider.aws.awslambda.v1.AwsLambdaSpec
	(*S3Code)(nil),              // 3: project.planton.provider.aws.awslambda.v1.S3Code
	nil,                         // 4: project.planton.provider.aws.awslambda.v1.AwsLambdaSpec.EnvironmentEntry
	(*v1.StringValueOrRef)(nil), // 5: project.planton.shared.foreignkey.v1.StringValueOrRef
}
var file_project_planton_provider_aws_awslambda_v1_spec_proto_depIdxs = []int32{
	5, // 0: project.planton.provider.aws.awslambda.v1.AwsLambdaSpec.role_arn:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	4, // 1: project.planton.provider.aws.awslambda.v1.AwsLambdaSpec.environment:type_name -> project.planton.provider.aws.awslambda.v1.AwsLambdaSpec.EnvironmentEntry
	5, // 2: project.planton.provider.aws.awslambda.v1.AwsLambdaSpec.subnets:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	5, // 3: project.planton.provider.aws.awslambda.v1.AwsLambdaSpec.security_groups:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	0, // 4: project.planton.provider.aws.awslambda.v1.AwsLambdaSpec.architecture:type_name -> project.planton.provider.aws.awslambda.v1.Architecture
	5, // 5: project.planton.provider.aws.awslambda.v1.AwsLambdaSpec.layer_arns:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	5, // 6: project.planton.provider.aws.awslambda.v1.AwsLambdaSpec.kms_key_arn:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	1, // 7: project.planton.provider.aws.awslambda.v1.AwsLambdaSpec.code_source_type:type_name -> project.planton.provider.aws.awslambda.v1.CodeSourceType
	3, // 8: project.planton.provider.aws.awslambda.v1.AwsLambdaSpec.s3:type_name -> project.planton.provider.aws.awslambda.v1.S3Code
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_awslambda_v1_spec_proto_init() }
func file_project_planton_provider_aws_awslambda_v1_spec_proto_init() {
	if File_project_planton_provider_aws_awslambda_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awslambda_v1_spec_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_awslambda_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_awslambda_v1_spec_proto_depIdxs,
		EnumInfos:         file_project_planton_provider_aws_awslambda_v1_spec_proto_enumTypes,
		MessageInfos:      file_project_planton_provider_aws_awslambda_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_awslambda_v1_spec_proto = out.File
	file_project_planton_provider_aws_awslambda_v1_spec_proto_goTypes = nil
	file_project_planton_provider_aws_awslambda_v1_spec_proto_depIdxs = nil
}
