// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/aws/awsdynamodb/v1/spec.proto

package awsdynamodbv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AwsDynamodbSpec defines the specification required to deploy an AWS DynamoDB resource, encapsulating all
// configurations for the DynamoDB table and related settings.
type AwsDynamodbSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Table name. If provided, the bucket will be created with this name instead of generating the name from the context
	TableName string `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	// Controls how you are charged for read and write throughput and how you manage
	// capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults
	// to `PROVISIONED`.
	BillingMode string `protobuf:"bytes,2,opt,name=billing_mode,json=billingMode,proto3" json:"billing_mode,omitempty"`
	// Attribute to use as the hash (partition) key. Must also be defined as an `attribute`.
	HashKey *AwsDynamodbTableAttribute `protobuf:"bytes,3,opt,name=hash_key,json=hashKey,proto3" json:"hash_key,omitempty"`
	// Attribute to use as the range (sort) key. Must also be defined as an `attribute`, see below.
	RangeKey *AwsDynamodbTableAttribute `protobuf:"bytes,4,opt,name=range_key,json=rangeKey,proto3" json:"range_key,omitempty"`
	// Whether Streams are enabled.
	EnableStreams bool `protobuf:"varint,5,opt,name=enable_streams,json=enableStreams,proto3" json:"enable_streams,omitempty"`
	// When an item in the table is modified, StreamViewType determines what information
	// is written to the table's stream. Valid values are
	// `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
	StreamViewType string `protobuf:"bytes,6,opt,name=stream_view_type,json=streamViewType,proto3" json:"stream_view_type,omitempty"`
	// Encryption at rest options. AWS DynamoDB tables are automatically
	// encrypted at rest with an AWS-owned Customer Master Key if this argument
	// isn't specified.
	ServerSideEncryption *AwsDynamodbTableServerSideEncryption `protobuf:"bytes,7,opt,name=server_side_encryption,json=serverSideEncryption,proto3" json:"server_side_encryption,omitempty"`
	// Enable point-in-time recovery options.
	PointInTimeRecovery *AwsDynamodbTablePointInTimeRecovery `protobuf:"bytes,8,opt,name=point_in_time_recovery,json=pointInTimeRecovery,proto3" json:"point_in_time_recovery,omitempty"`
	// Configuration block for TTL.
	Ttl *AwsDynamodbTableTtl `protobuf:"bytes,9,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// Dynamodb auto scale config
	AutoScale *AwsDynamodbAutoScaleCapacity `protobuf:"bytes,10,opt,name=auto_scale,json=autoScale,proto3" json:"auto_scale,omitempty"`
	// Set of nested attribute definitions. Only required for `hashKey` and `rangeKey` attributes.
	Attributes []*AwsDynamodbTableAttribute `protobuf:"bytes,11,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// Describe a GSI for the table; subject to the normal limits on the number of GSIs, projected attributes, etc.
	GlobalSecondaryIndexes []*AwsDynamodbTableGlobalSecondaryIndex `protobuf:"bytes,12,rep,name=global_secondary_indexes,json=globalSecondaryIndexes,proto3" json:"global_secondary_indexes,omitempty"`
	// Describe an LSI on the table; these can only be allocated _at creation_
	// so you cannot change this definition after you have created the resource.
	LocalSecondaryIndexes []*AwsDynamodbTableLocalSecondaryIndex `protobuf:"bytes,13,rep,name=local_secondary_indexes,json=localSecondaryIndexes,proto3" json:"local_secondary_indexes,omitempty"`
	// Configuration block(s) with [DynamoDB Global Tables V2 (version 2019.11.21)]
	// (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html) replication configurations.
	ReplicaRegionNames []string `protobuf:"bytes,14,rep,name=replica_region_names,json=replicaRegionNames,proto3" json:"replica_region_names,omitempty"`
	// Import Amazon S3 data into a new table. See below.
	ImportTable   *AwsDynamodbTableImport `protobuf:"bytes,15,opt,name=import_table,json=importTable,proto3" json:"import_table,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsDynamodbSpec) Reset() {
	*x = AwsDynamodbSpec{}
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsDynamodbSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsDynamodbSpec) ProtoMessage() {}

func (x *AwsDynamodbSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsDynamodbSpec.ProtoReflect.Descriptor instead.
func (*AwsDynamodbSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AwsDynamodbSpec) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *AwsDynamodbSpec) GetBillingMode() string {
	if x != nil {
		return x.BillingMode
	}
	return ""
}

func (x *AwsDynamodbSpec) GetHashKey() *AwsDynamodbTableAttribute {
	if x != nil {
		return x.HashKey
	}
	return nil
}

func (x *AwsDynamodbSpec) GetRangeKey() *AwsDynamodbTableAttribute {
	if x != nil {
		return x.RangeKey
	}
	return nil
}

func (x *AwsDynamodbSpec) GetEnableStreams() bool {
	if x != nil {
		return x.EnableStreams
	}
	return false
}

func (x *AwsDynamodbSpec) GetStreamViewType() string {
	if x != nil {
		return x.StreamViewType
	}
	return ""
}

func (x *AwsDynamodbSpec) GetServerSideEncryption() *AwsDynamodbTableServerSideEncryption {
	if x != nil {
		return x.ServerSideEncryption
	}
	return nil
}

func (x *AwsDynamodbSpec) GetPointInTimeRecovery() *AwsDynamodbTablePointInTimeRecovery {
	if x != nil {
		return x.PointInTimeRecovery
	}
	return nil
}

func (x *AwsDynamodbSpec) GetTtl() *AwsDynamodbTableTtl {
	if x != nil {
		return x.Ttl
	}
	return nil
}

func (x *AwsDynamodbSpec) GetAutoScale() *AwsDynamodbAutoScaleCapacity {
	if x != nil {
		return x.AutoScale
	}
	return nil
}

func (x *AwsDynamodbSpec) GetAttributes() []*AwsDynamodbTableAttribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *AwsDynamodbSpec) GetGlobalSecondaryIndexes() []*AwsDynamodbTableGlobalSecondaryIndex {
	if x != nil {
		return x.GlobalSecondaryIndexes
	}
	return nil
}

func (x *AwsDynamodbSpec) GetLocalSecondaryIndexes() []*AwsDynamodbTableLocalSecondaryIndex {
	if x != nil {
		return x.LocalSecondaryIndexes
	}
	return nil
}

func (x *AwsDynamodbSpec) GetReplicaRegionNames() []string {
	if x != nil {
		return x.ReplicaRegionNames
	}
	return nil
}

func (x *AwsDynamodbSpec) GetImportTable() *AwsDynamodbTableImport {
	if x != nil {
		return x.ImportTable
	}
	return nil
}

// AwsDynamodbTableServerSideEncryption configures the server-side encryption settings for the DynamoDB table,
// allowing the specification of whether encryption is enabled and the KMS key ARN to use for encryption.
type AwsDynamodbTableServerSideEncryption struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether or not to enable encryption at rest using an AWS managed KMS customer master key (CMK).
	// If `enabled` is `false` then server-side encryption is set to
	// AWS-_owned_ key (shown as `DEFAULT` in the AWS console).
	// Potentially confusingly, if `enabled` is `true` and no `kmsKeyArn` is specified then
	// server-side encryption is set to the _default_ KMS-_managed_ key (shown as `KMS` in the AWS console).
	// The [AWS KMS documentation](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html)
	// explains the difference between AWS-_owned_ and KMS-_managed_ keys.
	IsEnabled bool `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	// ARN of the CMK that should be used for the AWS KMS encryption.
	// This argument should only be used if the key is different from the default KMS-managed DynamoDB key,
	// `alias/aws/dynamodb`.
	// **Note:** This attribute will _not_ be populated with the ARN of _default_ keys.
	KmsKeyArn     string `protobuf:"bytes,2,opt,name=kms_key_arn,json=kmsKeyArn,proto3" json:"kms_key_arn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsDynamodbTableServerSideEncryption) Reset() {
	*x = AwsDynamodbTableServerSideEncryption{}
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsDynamodbTableServerSideEncryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsDynamodbTableServerSideEncryption) ProtoMessage() {}

func (x *AwsDynamodbTableServerSideEncryption) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsDynamodbTableServerSideEncryption.ProtoReflect.Descriptor instead.
func (*AwsDynamodbTableServerSideEncryption) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *AwsDynamodbTableServerSideEncryption) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *AwsDynamodbTableServerSideEncryption) GetKmsKeyArn() string {
	if x != nil {
		return x.KmsKeyArn
	}
	return ""
}

// AwsDynamodbTableTtl specifies the Time to Live (TTL) settings for the DynamoDB table, allowing you to define an
// attribute that DynamoDB will use to automatically delete expired items.
type AwsDynamodbTableTtl struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether TTL is enabled. Default value is `false`.
	IsEnabled bool `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	// Name of the table attribute to store the TTL timestamp in.
	// Required if `enabled` is `true`, must not be set otherwise.
	AttributeName string `protobuf:"bytes,2,opt,name=attribute_name,json=attributeName,proto3" json:"attribute_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsDynamodbTableTtl) Reset() {
	*x = AwsDynamodbTableTtl{}
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsDynamodbTableTtl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsDynamodbTableTtl) ProtoMessage() {}

func (x *AwsDynamodbTableTtl) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsDynamodbTableTtl.ProtoReflect.Descriptor instead.
func (*AwsDynamodbTableTtl) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *AwsDynamodbTableTtl) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *AwsDynamodbTableTtl) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

// AwsDynamodbTableAttribute defines an attribute for the DynamoDB table, specifying the attribute's name and data
// type, which is used in key schemas and indexes.
type AwsDynamodbTableAttribute struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the attribute
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Attribute type. Valid values are `S` (string), `N` (number), `B` (binary).
	Type          string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsDynamodbTableAttribute) Reset() {
	*x = AwsDynamodbTableAttribute{}
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsDynamodbTableAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsDynamodbTableAttribute) ProtoMessage() {}

func (x *AwsDynamodbTableAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsDynamodbTableAttribute.ProtoReflect.Descriptor instead.
func (*AwsDynamodbTableAttribute) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescGZIP(), []int{3}
}

func (x *AwsDynamodbTableAttribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AwsDynamodbTableAttribute) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// AwsDynamodbTableGlobalSecondaryIndex defines a global secondary index (GSI) for the DynamoDB table, allowing
// queries on alternative key attributes and providing additional read/write capacity configurations.
type AwsDynamodbTableGlobalSecondaryIndex struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the index.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// One of `ALL`, `INCLUDE` or `KEYS_ONLY` where
	// `ALL` projects every attribute into the index,
	// `KEYS_ONLY` projects  into the index only the table and index hashKey and sortKey attributes ,
	// `INCLUDE` projects into the index all of the attributes that are defined in `nonKeyAttributes`
	// in addition to the attributes that that`KEYS_ONLY` project.
	ProjectionType string `protobuf:"bytes,2,opt,name=projection_type,json=projectionType,proto3" json:"projection_type,omitempty"`
	// Only required with `INCLUDE` as a projection type; a list of attributes to project into the index.
	// These do not need to be defined as attributes on the table.
	NonKeyAttributes []string `protobuf:"bytes,3,rep,name=non_key_attributes,json=nonKeyAttributes,proto3" json:"non_key_attributes,omitempty"`
	// Name of the hash key in the index; must be defined as an attribute in the resource.
	HashKey string `protobuf:"bytes,4,opt,name=hash_key,json=hashKey,proto3" json:"hash_key,omitempty"`
	// Name of the range key; must be defined
	RangeKey string `protobuf:"bytes,5,opt,name=range_key,json=rangeKey,proto3" json:"range_key,omitempty"`
	// Number of read units for this index. Must be set if billingMode is set to PROVISIONED.
	ReadCapacity int32 `protobuf:"varint,6,opt,name=read_capacity,json=readCapacity,proto3" json:"read_capacity,omitempty"`
	// Number of write units for this index. Must be set if billingMode is set to PROVISIONED.
	WriteCapacity int32 `protobuf:"varint,7,opt,name=write_capacity,json=writeCapacity,proto3" json:"write_capacity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsDynamodbTableGlobalSecondaryIndex) Reset() {
	*x = AwsDynamodbTableGlobalSecondaryIndex{}
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsDynamodbTableGlobalSecondaryIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsDynamodbTableGlobalSecondaryIndex) ProtoMessage() {}

func (x *AwsDynamodbTableGlobalSecondaryIndex) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsDynamodbTableGlobalSecondaryIndex.ProtoReflect.Descriptor instead.
func (*AwsDynamodbTableGlobalSecondaryIndex) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescGZIP(), []int{4}
}

func (x *AwsDynamodbTableGlobalSecondaryIndex) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AwsDynamodbTableGlobalSecondaryIndex) GetProjectionType() string {
	if x != nil {
		return x.ProjectionType
	}
	return ""
}

func (x *AwsDynamodbTableGlobalSecondaryIndex) GetNonKeyAttributes() []string {
	if x != nil {
		return x.NonKeyAttributes
	}
	return nil
}

func (x *AwsDynamodbTableGlobalSecondaryIndex) GetHashKey() string {
	if x != nil {
		return x.HashKey
	}
	return ""
}

func (x *AwsDynamodbTableGlobalSecondaryIndex) GetRangeKey() string {
	if x != nil {
		return x.RangeKey
	}
	return ""
}

func (x *AwsDynamodbTableGlobalSecondaryIndex) GetReadCapacity() int32 {
	if x != nil {
		return x.ReadCapacity
	}
	return 0
}

func (x *AwsDynamodbTableGlobalSecondaryIndex) GetWriteCapacity() int32 {
	if x != nil {
		return x.WriteCapacity
	}
	return 0
}

// AwsDynamodbTableLocalSecondaryIndex defines a local secondary index (LSI) for the DynamoDB table,
// allowing alternative sort keys for queries on the primary hash key, which must be defined at table creation.
type AwsDynamodbTableLocalSecondaryIndex struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the index.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// One of `ALL`, `INCLUDE` or `KEYS_ONLY` where
	// `ALL` projects every attribute into the index,
	// `KEYS_ONLY` projects  into the index only the table and index hashKey and sortKey attributes ,
	// `INCLUDE` projects into the index all of the attributes that are defined in `nonKeyAttributes` in addition to
	// the attributes that that`KEYS_ONLY` project.
	ProjectionType string `protobuf:"bytes,2,opt,name=projection_type,json=projectionType,proto3" json:"projection_type,omitempty"`
	// Only required with `INCLUDE` as a projection type; a list of attributes to project into the index.
	// These do not need to be defined as attributes on the table.
	NonKeyAttributes []string `protobuf:"bytes,3,rep,name=non_key_attributes,json=nonKeyAttributes,proto3" json:"non_key_attributes,omitempty"`
	// Name of the range key; must be defined
	RangeKey      string `protobuf:"bytes,4,opt,name=range_key,json=rangeKey,proto3" json:"range_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsDynamodbTableLocalSecondaryIndex) Reset() {
	*x = AwsDynamodbTableLocalSecondaryIndex{}
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsDynamodbTableLocalSecondaryIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsDynamodbTableLocalSecondaryIndex) ProtoMessage() {}

func (x *AwsDynamodbTableLocalSecondaryIndex) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsDynamodbTableLocalSecondaryIndex.ProtoReflect.Descriptor instead.
func (*AwsDynamodbTableLocalSecondaryIndex) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescGZIP(), []int{5}
}

func (x *AwsDynamodbTableLocalSecondaryIndex) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AwsDynamodbTableLocalSecondaryIndex) GetProjectionType() string {
	if x != nil {
		return x.ProjectionType
	}
	return ""
}

func (x *AwsDynamodbTableLocalSecondaryIndex) GetNonKeyAttributes() []string {
	if x != nil {
		return x.NonKeyAttributes
	}
	return nil
}

func (x *AwsDynamodbTableLocalSecondaryIndex) GetRangeKey() string {
	if x != nil {
		return x.RangeKey
	}
	return ""
}

// AwsDynamodbTablePointInTimeRecovery configures point-in-time recovery settings for the DynamoDB table, allowing
// restoration of the table to any point in time within the last 35 days.
type AwsDynamodbTablePointInTimeRecovery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether to enable point-in-time recovery. It can take 10 minutes to enable for
	// new tables. If the `pointInTimeRecovery` block is not provided,
	// this defaults to `false`.
	IsEnabled     bool `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsDynamodbTablePointInTimeRecovery) Reset() {
	*x = AwsDynamodbTablePointInTimeRecovery{}
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsDynamodbTablePointInTimeRecovery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsDynamodbTablePointInTimeRecovery) ProtoMessage() {}

func (x *AwsDynamodbTablePointInTimeRecovery) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsDynamodbTablePointInTimeRecovery.ProtoReflect.Descriptor instead.
func (*AwsDynamodbTablePointInTimeRecovery) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescGZIP(), []int{6}
}

func (x *AwsDynamodbTablePointInTimeRecovery) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

// AwsDynamodbTableImport defines settings to import data from Amazon S3 into a new DynamoDB table, including
// compression type, data format, and source S3 bucket information.
type AwsDynamodbTableImport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type of compression to be used on the input coming from the imported table.
	// Valid values are `GZIP`, `ZSTD` and `NONE`.
	InputCompressionType string `protobuf:"bytes,1,opt,name=input_compression_type,json=inputCompressionType,proto3" json:"input_compression_type,omitempty"`
	// The format of the source data.
	// Valid values are `CSV`, `DYNAMODB_JSON`, and `ION`.
	InputFormat string `protobuf:"bytes,2,opt,name=input_format,json=inputFormat,proto3" json:"input_format,omitempty"`
	// Describe the format options for the data that was imported into the target table.
	// There is one value, `csv`.
	InputFormatOptions *AwsDynamodbTableImportInputFormatOptions `protobuf:"bytes,3,opt,name=input_format_options,json=inputFormatOptions,proto3" json:"input_format_options,omitempty"`
	// Values for the S3 bucket the source file is imported from.
	S3BucketSource *AwsDynamodbTableImportS3BucketSource `protobuf:"bytes,4,opt,name=s3_bucket_source,json=s3BucketSource,proto3" json:"s3_bucket_source,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AwsDynamodbTableImport) Reset() {
	*x = AwsDynamodbTableImport{}
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsDynamodbTableImport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsDynamodbTableImport) ProtoMessage() {}

func (x *AwsDynamodbTableImport) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsDynamodbTableImport.ProtoReflect.Descriptor instead.
func (*AwsDynamodbTableImport) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescGZIP(), []int{7}
}

func (x *AwsDynamodbTableImport) GetInputCompressionType() string {
	if x != nil {
		return x.InputCompressionType
	}
	return ""
}

func (x *AwsDynamodbTableImport) GetInputFormat() string {
	if x != nil {
		return x.InputFormat
	}
	return ""
}

func (x *AwsDynamodbTableImport) GetInputFormatOptions() *AwsDynamodbTableImportInputFormatOptions {
	if x != nil {
		return x.InputFormatOptions
	}
	return nil
}

func (x *AwsDynamodbTableImport) GetS3BucketSource() *AwsDynamodbTableImportS3BucketSource {
	if x != nil {
		return x.S3BucketSource
	}
	return nil
}

// AwsDynamodbTableImportInputFormatOptions specifies additional format options for the data being imported, such as
// CSV format settings.
type AwsDynamodbTableImportInputFormatOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This block contains the processing options for the CSV file being imported:
	Csv           *AwsDynamodbTableImportInputFormatOptionsCsv `protobuf:"bytes,1,opt,name=csv,proto3" json:"csv,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsDynamodbTableImportInputFormatOptions) Reset() {
	*x = AwsDynamodbTableImportInputFormatOptions{}
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsDynamodbTableImportInputFormatOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsDynamodbTableImportInputFormatOptions) ProtoMessage() {}

func (x *AwsDynamodbTableImportInputFormatOptions) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsDynamodbTableImportInputFormatOptions.ProtoReflect.Descriptor instead.
func (*AwsDynamodbTableImportInputFormatOptions) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescGZIP(), []int{8}
}

func (x *AwsDynamodbTableImportInputFormatOptions) GetCsv() *AwsDynamodbTableImportInputFormatOptionsCsv {
	if x != nil {
		return x.Csv
	}
	return nil
}

// AwsDynamodbTableImportInputFormatOptionsCsv defines the CSV format options for the data being imported,
// including delimiter and headers.
type AwsDynamodbTableImportInputFormatOptionsCsv struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The delimiter used for separating items in the CSV file being imported.
	Delimiter string `protobuf:"bytes,1,opt,name=delimiter,proto3" json:"delimiter,omitempty"`
	// List of the headers used to specify a common header for all source CSV files being imported.
	Headers       []string `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsDynamodbTableImportInputFormatOptionsCsv) Reset() {
	*x = AwsDynamodbTableImportInputFormatOptionsCsv{}
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsDynamodbTableImportInputFormatOptionsCsv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsDynamodbTableImportInputFormatOptionsCsv) ProtoMessage() {}

func (x *AwsDynamodbTableImportInputFormatOptionsCsv) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsDynamodbTableImportInputFormatOptionsCsv.ProtoReflect.Descriptor instead.
func (*AwsDynamodbTableImportInputFormatOptionsCsv) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescGZIP(), []int{9}
}

func (x *AwsDynamodbTableImportInputFormatOptionsCsv) GetDelimiter() string {
	if x != nil {
		return x.Delimiter
	}
	return ""
}

func (x *AwsDynamodbTableImportInputFormatOptionsCsv) GetHeaders() []string {
	if x != nil {
		return x.Headers
	}
	return nil
}

// AwsDynamodbTableImportS3BucketSource specifies the S3 bucket source from which data is imported into the
// DynamoDB table, including bucket name, owner account, and key prefix.
type AwsDynamodbTableImportS3BucketSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The S3 bucket that is being imported from.
	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// The account number of the S3 bucket that is being imported from.
	BucketOwner string `protobuf:"bytes,2,opt,name=bucket_owner,json=bucketOwner,proto3" json:"bucket_owner,omitempty"`
	// The key prefix shared by all S3 Objects that are being imported.
	KeyPrefix     string `protobuf:"bytes,3,opt,name=key_prefix,json=keyPrefix,proto3" json:"key_prefix,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsDynamodbTableImportS3BucketSource) Reset() {
	*x = AwsDynamodbTableImportS3BucketSource{}
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsDynamodbTableImportS3BucketSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsDynamodbTableImportS3BucketSource) ProtoMessage() {}

func (x *AwsDynamodbTableImportS3BucketSource) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsDynamodbTableImportS3BucketSource.ProtoReflect.Descriptor instead.
func (*AwsDynamodbTableImportS3BucketSource) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescGZIP(), []int{10}
}

func (x *AwsDynamodbTableImportS3BucketSource) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *AwsDynamodbTableImportS3BucketSource) GetBucketOwner() string {
	if x != nil {
		return x.BucketOwner
	}
	return ""
}

func (x *AwsDynamodbTableImportS3BucketSource) GetKeyPrefix() string {
	if x != nil {
		return x.KeyPrefix
	}
	return ""
}

// AwsDynamodbAutoScaleCapacity configures the auto-scaling settings for the DynamoDB table's read and write
// capacity units, including minimum and maximum capacity and target utilization.
type AwsDynamodbAutoScaleCapacity struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	IsEnabled bool                   `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	// auto scale capacity for read
	ReadCapacity *AutoScaleCapacity `protobuf:"bytes,2,opt,name=read_capacity,json=readCapacity,proto3" json:"read_capacity,omitempty"`
	// auto scale capacity for write
	WriteCapacity *AutoScaleCapacity `protobuf:"bytes,3,opt,name=write_capacity,json=writeCapacity,proto3" json:"write_capacity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsDynamodbAutoScaleCapacity) Reset() {
	*x = AwsDynamodbAutoScaleCapacity{}
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsDynamodbAutoScaleCapacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsDynamodbAutoScaleCapacity) ProtoMessage() {}

func (x *AwsDynamodbAutoScaleCapacity) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsDynamodbAutoScaleCapacity.ProtoReflect.Descriptor instead.
func (*AwsDynamodbAutoScaleCapacity) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescGZIP(), []int{11}
}

func (x *AwsDynamodbAutoScaleCapacity) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *AwsDynamodbAutoScaleCapacity) GetReadCapacity() *AutoScaleCapacity {
	if x != nil {
		return x.ReadCapacity
	}
	return nil
}

func (x *AwsDynamodbAutoScaleCapacity) GetWriteCapacity() *AutoScaleCapacity {
	if x != nil {
		return x.WriteCapacity
	}
	return nil
}

// AutoScaleCapacity defines the auto-scaling capacity settings, specifying minimum and maximum capacity units and
// the target utilization percentage for scaling.
type AutoScaleCapacity struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Min capacity of the scalable target.
	MinCapacity int32 `protobuf:"varint,1,opt,name=min_capacity,json=minCapacity,proto3" json:"min_capacity,omitempty"`
	// Max capacity of the scalable target.
	MaxCapacity int32 `protobuf:"varint,2,opt,name=max_capacity,json=maxCapacity,proto3" json:"max_capacity,omitempty"`
	// target capacity utilization percentage
	TargetUtilization float64 `protobuf:"fixed64,3,opt,name=target_utilization,json=targetUtilization,proto3" json:"target_utilization,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AutoScaleCapacity) Reset() {
	*x = AutoScaleCapacity{}
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoScaleCapacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoScaleCapacity) ProtoMessage() {}

func (x *AutoScaleCapacity) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoScaleCapacity.ProtoReflect.Descriptor instead.
func (*AutoScaleCapacity) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescGZIP(), []int{12}
}

func (x *AutoScaleCapacity) GetMinCapacity() int32 {
	if x != nil {
		return x.MinCapacity
	}
	return 0
}

func (x *AutoScaleCapacity) GetMaxCapacity() int32 {
	if x != nil {
		return x.MaxCapacity
	}
	return 0
}

func (x *AutoScaleCapacity) GetTargetUtilization() float64 {
	if x != nil {
		return x.TargetUtilization
	}
	return 0
}

var File_project_planton_provider_aws_awsdynamodb_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDesc = "" +
	"\n" +
	"6project/planton/provider/aws/awsdynamodb/v1/spec.proto\x12+project.planton.provider.aws.awsdynamodb.v1\x1a\x1bbuf/validate/validate.proto\x1a,project/planton/shared/options/options.proto\"\xdd\v\n" +
	"\x0fAwsDynamodbSpec\x12%\n" +
	"\n" +
	"table_name\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\ttableName\x12X\n" +
	"\fbilling_mode\x18\x02 \x01(\tB5\xbaH#\xd8\x01\x01r\x1eR\vPROVISIONEDR\x0fPAY_PER_REQUEST\x8a\xa6\x1d\vPROVISIONEDR\vbillingMode\x12i\n" +
	"\bhash_key\x18\x03 \x01(\v2F.project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableAttributeB\x06\xbaH\x03\xc8\x01\x01R\ahashKey\x12c\n" +
	"\trange_key\x18\x04 \x01(\v2F.project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableAttributeR\brangeKey\x12%\n" +
	"\x0eenable_streams\x18\x05 \x01(\bR\renableStreams\x12g\n" +
	"\x10stream_view_type\x18\x06 \x01(\tB=\xbaH:\xd8\x01\x01r5R\tNEW_IMAGER\tOLD_IMAGER\x12NEW_AND_OLD_IMAGESR\tKEYS_ONLYR\x0estreamViewType\x12\x87\x01\n" +
	"\x16server_side_encryption\x18\a \x01(\v2Q.project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableServerSideEncryptionR\x14serverSideEncryption\x12\x85\x01\n" +
	"\x16point_in_time_recovery\x18\b \x01(\v2P.project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTablePointInTimeRecoveryR\x13pointInTimeRecovery\x12R\n" +
	"\x03ttl\x18\t \x01(\v2@.project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableTtlR\x03ttl\x12h\n" +
	"\n" +
	"auto_scale\x18\n" +
	" \x01(\v2I.project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbAutoScaleCapacityR\tautoScale\x12f\n" +
	"\n" +
	"attributes\x18\v \x03(\v2F.project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableAttributeR\n" +
	"attributes\x12\x8b\x01\n" +
	"\x18global_secondary_indexes\x18\f \x03(\v2Q.project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableGlobalSecondaryIndexR\x16globalSecondaryIndexes\x12\x88\x01\n" +
	"\x17local_secondary_indexes\x18\r \x03(\v2P.project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableLocalSecondaryIndexR\x15localSecondaryIndexes\x120\n" +
	"\x14replica_region_names\x18\x0e \x03(\tR\x12replicaRegionNames\x12f\n" +
	"\fimport_table\x18\x0f \x01(\v2C.project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableImportR\vimportTable\"e\n" +
	"$AwsDynamodbTableServerSideEncryption\x12\x1d\n" +
	"\n" +
	"is_enabled\x18\x01 \x01(\bR\tisEnabled\x12\x1e\n" +
	"\vkms_key_arn\x18\x02 \x01(\tR\tkmsKeyArn\"[\n" +
	"\x13AwsDynamodbTableTtl\x12\x1d\n" +
	"\n" +
	"is_enabled\x18\x01 \x01(\bR\tisEnabled\x12%\n" +
	"\x0eattribute_name\x18\x02 \x01(\tR\rattributeName\"^\n" +
	"\x19AwsDynamodbTableAttribute\x12\x1a\n" +
	"\x04name\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12%\n" +
	"\x04type\x18\x02 \x01(\tB\x11\xbaH\x0e\xc8\x01\x01r\tR\x01SR\x01NR\x01BR\x04type\"\xb5\x02\n" +
	"$AwsDynamodbTableGlobalSecondaryIndex\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12G\n" +
	"\x0fprojection_type\x18\x02 \x01(\tB\x1e\xbaH\x1br\x19R\x03ALLR\tKEYS_ONLYR\aINCLUDER\x0eprojectionType\x12,\n" +
	"\x12non_key_attributes\x18\x03 \x03(\tR\x10nonKeyAttributes\x12\x19\n" +
	"\bhash_key\x18\x04 \x01(\tR\ahashKey\x12\x1b\n" +
	"\trange_key\x18\x05 \x01(\tR\brangeKey\x12#\n" +
	"\rread_capacity\x18\x06 \x01(\x05R\freadCapacity\x12%\n" +
	"\x0ewrite_capacity\x18\a \x01(\x05R\rwriteCapacity\"\xcd\x01\n" +
	"#AwsDynamodbTableLocalSecondaryIndex\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12G\n" +
	"\x0fprojection_type\x18\x02 \x01(\tB\x1e\xbaH\x1br\x19R\x03ALLR\tKEYS_ONLYR\aINCLUDER\x0eprojectionType\x12,\n" +
	"\x12non_key_attributes\x18\x03 \x03(\tR\x10nonKeyAttributes\x12\x1b\n" +
	"\trange_key\x18\x04 \x01(\tR\brangeKey\"D\n" +
	"#AwsDynamodbTablePointInTimeRecovery\x12\x1d\n" +
	"\n" +
	"is_enabled\x18\x01 \x01(\bR\tisEnabled\"\xb1\x03\n" +
	"\x16AwsDynamodbTableImport\x12M\n" +
	"\x16input_compression_type\x18\x01 \x01(\tB\x17\xbaH\x14r\x12R\x04GZIPR\x04ZSTDR\x04NONER\x14inputCompressionType\x12A\n" +
	"\finput_format\x18\x02 \x01(\tB\x1e\xbaH\x1br\x19R\x03CSVR\rDYNAMODB_JSONR\x03IONR\vinputFormat\x12\x87\x01\n" +
	"\x14input_format_options\x18\x03 \x01(\v2U.project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableImportInputFormatOptionsR\x12inputFormatOptions\x12{\n" +
	"\x10s3_bucket_source\x18\x04 \x01(\v2Q.project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableImportS3BucketSourceR\x0es3BucketSource\"\x96\x01\n" +
	"(AwsDynamodbTableImportInputFormatOptions\x12j\n" +
	"\x03csv\x18\x01 \x01(\v2X.project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableImportInputFormatOptionsCsvR\x03csv\"e\n" +
	"+AwsDynamodbTableImportInputFormatOptionsCsv\x12\x1c\n" +
	"\tdelimiter\x18\x01 \x01(\tR\tdelimiter\x12\x18\n" +
	"\aheaders\x18\x02 \x03(\tR\aheaders\"\x80\x01\n" +
	"$AwsDynamodbTableImportS3BucketSource\x12\x16\n" +
	"\x06bucket\x18\x01 \x01(\tR\x06bucket\x12!\n" +
	"\fbucket_owner\x18\x02 \x01(\tR\vbucketOwner\x12\x1d\n" +
	"\n" +
	"key_prefix\x18\x03 \x01(\tR\tkeyPrefix\"\x89\x02\n" +
	"\x1cAwsDynamodbAutoScaleCapacity\x12\x1d\n" +
	"\n" +
	"is_enabled\x18\x01 \x01(\bR\tisEnabled\x12c\n" +
	"\rread_capacity\x18\x02 \x01(\v2>.project.planton.provider.aws.awsdynamodb.v1.AutoScaleCapacityR\freadCapacity\x12e\n" +
	"\x0ewrite_capacity\x18\x03 \x01(\v2>.project.planton.provider.aws.awsdynamodb.v1.AutoScaleCapacityR\rwriteCapacity\"\x88\x01\n" +
	"\x11AutoScaleCapacity\x12!\n" +
	"\fmin_capacity\x18\x01 \x01(\x05R\vminCapacity\x12!\n" +
	"\fmax_capacity\x18\x02 \x01(\x05R\vmaxCapacity\x12-\n" +
	"\x12target_utilization\x18\x03 \x01(\x01R\x11targetUtilizationB\xfa\x02\n" +
	"/com.project.planton.provider.aws.awsdynamodb.v1B\tSpecProtoP\x01Zigithub.com/project-planton/project-planton/apis/project/planton/provider/aws/awsdynamodb/v1;awsdynamodbv1\xa2\x02\x05PPPAA\xaa\x02+Project.Planton.Provider.Aws.Awsdynamodb.V1\xca\x02+Project\\Planton\\Provider\\Aws\\Awsdynamodb\\V1\xe2\x027Project\\Planton\\Provider\\Aws\\Awsdynamodb\\V1\\GPBMetadata\xea\x020Project::Planton::Provider::Aws::Awsdynamodb::V1b\x06proto3"

var (
	file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDescData
}

var file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_goTypes = []any{
	(*AwsDynamodbSpec)(nil),                             // 0: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbSpec
	(*AwsDynamodbTableServerSideEncryption)(nil),        // 1: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableServerSideEncryption
	(*AwsDynamodbTableTtl)(nil),                         // 2: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableTtl
	(*AwsDynamodbTableAttribute)(nil),                   // 3: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableAttribute
	(*AwsDynamodbTableGlobalSecondaryIndex)(nil),        // 4: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableGlobalSecondaryIndex
	(*AwsDynamodbTableLocalSecondaryIndex)(nil),         // 5: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableLocalSecondaryIndex
	(*AwsDynamodbTablePointInTimeRecovery)(nil),         // 6: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTablePointInTimeRecovery
	(*AwsDynamodbTableImport)(nil),                      // 7: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableImport
	(*AwsDynamodbTableImportInputFormatOptions)(nil),    // 8: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableImportInputFormatOptions
	(*AwsDynamodbTableImportInputFormatOptionsCsv)(nil), // 9: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableImportInputFormatOptionsCsv
	(*AwsDynamodbTableImportS3BucketSource)(nil),        // 10: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableImportS3BucketSource
	(*AwsDynamodbAutoScaleCapacity)(nil),                // 11: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbAutoScaleCapacity
	(*AutoScaleCapacity)(nil),                           // 12: project.planton.provider.aws.awsdynamodb.v1.AutoScaleCapacity
}
var file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_depIdxs = []int32{
	3,  // 0: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbSpec.hash_key:type_name -> project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableAttribute
	3,  // 1: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbSpec.range_key:type_name -> project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableAttribute
	1,  // 2: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbSpec.server_side_encryption:type_name -> project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableServerSideEncryption
	6,  // 3: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbSpec.point_in_time_recovery:type_name -> project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTablePointInTimeRecovery
	2,  // 4: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbSpec.ttl:type_name -> project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableTtl
	11, // 5: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbSpec.auto_scale:type_name -> project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbAutoScaleCapacity
	3,  // 6: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbSpec.attributes:type_name -> project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableAttribute
	4,  // 7: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbSpec.global_secondary_indexes:type_name -> project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableGlobalSecondaryIndex
	5,  // 8: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbSpec.local_secondary_indexes:type_name -> project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableLocalSecondaryIndex
	7,  // 9: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbSpec.import_table:type_name -> project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableImport
	8,  // 10: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableImport.input_format_options:type_name -> project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableImportInputFormatOptions
	10, // 11: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableImport.s3_bucket_source:type_name -> project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableImportS3BucketSource
	9,  // 12: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableImportInputFormatOptions.csv:type_name -> project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbTableImportInputFormatOptionsCsv
	12, // 13: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbAutoScaleCapacity.read_capacity:type_name -> project.planton.provider.aws.awsdynamodb.v1.AutoScaleCapacity
	12, // 14: project.planton.provider.aws.awsdynamodb.v1.AwsDynamodbAutoScaleCapacity.write_capacity:type_name -> project.planton.provider.aws.awsdynamodb.v1.AutoScaleCapacity
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_init() }
func file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_init() {
	if File_project_planton_provider_aws_awsdynamodb_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_awsdynamodb_v1_spec_proto = out.File
	file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_goTypes = nil
	file_project_planton_provider_aws_awsdynamodb_v1_spec_proto_depIdxs = nil
}
