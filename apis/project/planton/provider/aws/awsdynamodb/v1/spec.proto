syntax = "proto3";

package project.planton.provider.aws.awsdynamodb.v1;

import "buf/validate/validate.proto";

option go_package = "project/planton/provider/aws/awsdynamodb/v1;awsdynamodbv1";

// Desired configuration of an Amazon DynamoDB table.
message AwsDynamodbSpec {
  // Name of the DynamoDB table.  If omitted, a name may be auto-generated.
  string table_name = 1 [
    (buf.validate.field).string = {
      pattern: "^[A-Za-z0-9_.-]+$",
      min_len: 3,
      max_len: 255,
      ignore_empty: true
    }
  ];

  // Billing strategy for capacity consumption.
  BillingMode billing_mode = 2 [
    (buf.validate.field).enum = {
      defined_only: true,
      not_in: [0]         // BILLING_MODE_UNSPECIFIED not allowed
    }
  ];

  // Provisioned read capacity (ignored when billing_mode = PAY_PER_REQUEST).
  int64 read_capacity_units = 3 [
    (buf.validate.field).int64 = {
      gte: 0
    }
  ];

  // Provisioned write capacity (ignored when billing_mode = PAY_PER_REQUEST).
  int64 write_capacity_units = 4 [
    (buf.validate.field).int64 = {
      gte: 0
    }
  ];

  // Definitions for every attribute referenced by the table or its indexes.
  repeated AttributeDefinition attribute_definitions = 5 [
    (buf.validate.field).repeated = {min_items: 1}
  ];

  // Attribute to use as the partition (hash) key.
  string hash_key = 6 [
    (buf.validate.field).string = {
      pattern: "^[A-Za-z0-9_.-]+$",
      min_len: 1,
      max_len: 255
    }
  ];

  // Optional attribute to use as the sort (range) key.
  optional string range_key = 7 [
    (buf.validate.field).string = {
      pattern: "^[A-Za-z0-9_.-]+$",
      min_len: 1,
      max_len: 255,
      ignore_empty: true
    }
  ];

  // Global secondary indexes to create.
  repeated GlobalSecondaryIndex global_secondary_indexes = 8 [
    (buf.validate.field).repeated = {max_items: 20}
  ];

  // Local secondary indexes to create.
  repeated LocalSecondaryIndex local_secondary_indexes = 9 [
    (buf.validate.field).repeated = {max_items: 5}
  ];

  // DynamoDB Streams configuration.
  optional StreamSpecification stream_specification = 10 [
    (buf.validate.field).required = false
  ];

  // Item Time-to-Live configuration.
  optional TimeToLiveSpecification ttl_specification = 11 [
    (buf.validate.field).required = false
  ];

  // Server-side encryption configuration.
  optional ServerSideEncryptionSpecification sse_specification = 12 [
    (buf.validate.field).required = false
  ];

  // Enables point-in-time recovery (continuous backups).
  optional bool point_in_time_recovery_enabled = 13;

  // Storage cost tier for the table.
  TableClass table_class = 14 [
    (buf.validate.field).enum = {defined_only: true}
  ];

  // Prevents accidental table deletion.
  optional bool deletion_protection_enabled = 15;

  // Resource tags.
  map<string, string> tags = 16 [
    (buf.validate.field).map = {
      keys:   {string: {min_len: 1, max_len: 128}},
      values: {string: {max_len: 256}}
    }
  ];
}

// ───────────────────────────────────────────────────────────────────────────────
// Enumerations
// ───────────────────────────────────────────────────────────────────────────────

// Capacity billing modes.
enum BillingMode {
  BILLING_MODE_UNSPECIFIED = 0;
  PROVISIONED              = 1;
  PAY_PER_REQUEST          = 2;
}

// DynamoDB attribute data types.
enum AttributeType {
  ATTRIBUTE_TYPE_UNSPECIFIED = 0;
  STRING                     = 1; // "S"
  NUMBER                     = 2; // "N"
  BINARY                     = 3; // "B"
}

// Index projection types.
enum ProjectionType {
  PROJECTION_TYPE_UNSPECIFIED = 0;
  ALL                         = 1;
  KEYS_ONLY                   = 2;
  INCLUDE                     = 3;
}

// DynamoDB Stream view types.
enum StreamViewType {
  STREAM_VIEW_TYPE_UNSPECIFIED = 0;
  NEW_IMAGE                    = 1;
  OLD_IMAGE                    = 2;
  NEW_AND_OLD_IMAGES           = 3;
  KEYS_ONLY                    = 4;
}

// Available table classes.
enum TableClass {
  TABLE_CLASS_UNSPECIFIED      = 0;
  STANDARD                     = 1;
  STANDARD_INFREQUENT_ACCESS   = 2;
}

// ───────────────────────────────────────────────────────────────────────────────
// Supporting messages
// ───────────────────────────────────────────────────────────────────────────────

// Definition of a single attribute.
message AttributeDefinition {
  // Attribute name.
  string name = 1 [
    (buf.validate.field).string = {
      pattern: "^[A-Za-z0-9_.-]+$",
      min_len: 1,
      max_len: 255
    }
  ];
  // Attribute data type (S, N, B).
  AttributeType type = 2 [
    (buf.validate.field).enum = {
      defined_only: true,
      not_in: [0]   // ATTRIBUTE_TYPE_UNSPECIFIED not allowed
    }
  ];
}

// Projection configuration used by indexes.
message Projection {
  // Projection granularity.
  ProjectionType type = 1 [
    (buf.validate.field).enum = {
      defined_only: true,
      not_in: [0]   // PROJECTION_TYPE_UNSPECIFIED not allowed
    }
  ];
  // Attributes to include when type == INCLUDE.
  repeated string non_key_attributes = 2 [
    (buf.validate.field).repeated = {max_items: 20},
    (buf.validate.field).string   = {
      pattern: "^[A-Za-z0-9_.-]+$",
      min_len: 1,
      max_len: 255
    }
  ];
}

// Configuration for a global secondary index (GSI).
message GlobalSecondaryIndex {
  string name = 1 [
    (buf.validate.field).string = {
      pattern: "^[A-Za-z0-9_.-]+$",
      min_len: 3,
      max_len: 255
    }
  ];
  // Partition key of the index.
  string hash_key = 2 [
    (buf.validate.field).string = {
      pattern: "^[A-Za-z0-9_.-]+$",
      min_len: 1,
      max_len: 255
    }
  ];
  // Optional sort key of the index.
  optional string range_key = 3 [
    (buf.validate.field).string = {
      pattern: "^[A-Za-z0-9_.-]+$",
      min_len: 1,
      max_len: 255,
      ignore_empty: true
    }
  ];
  // What is projected into the index.
  Projection projection = 4 [
    (buf.validate.field).required = true
  ];
  // Provisioned capacity for the index (ignored for on-demand tables).
  int64 read_capacity_units = 5 [
    (buf.validate.field).int64 = {gte: 0}
  ];
  int64 write_capacity_units = 6 [
    (buf.validate.field).int64 = {gte: 0}
  ];
}

// Configuration for a local secondary index (LSI).
message LocalSecondaryIndex {
  string name = 1 [
    (buf.validate.field).string = {
      pattern: "^[A-Za-z0-9_.-]+$",
      min_len: 3,
      max_len: 255
    }
  ];
  // Sort key for the index (must share table’s partition key).
  string range_key = 2 [
    (buf.validate.field).string = {
      pattern: "^[A-Za-z0-9_.-]+$",
      min_len: 1,
      max_len: 255
    }
  ];
  // Projection options.
  Projection projection = 3 [
    (buf.validate.field).required = true
  ];
}

// DynamoDB Streams configuration.
message StreamSpecification {
  bool enabled = 1;
  // Data model for the stream.
  StreamViewType view_type = 2 [
    (buf.validate.field).enum = {defined_only: true}
  ];
}

// Item Time-to-Live (TTL) configuration.
message TimeToLiveSpecification {
  bool enabled = 1;
  // Attribute holding the expiration epoch seconds.
  string attribute_name = 2 [
    (buf.validate.field).string = {
      pattern: "^[A-Za-z0-9_.-]+$",
      min_len: 1,
      max_len: 255,
      ignore_empty: true
    }
  ];
}

// Server-side encryption (SSE) settings.
message ServerSideEncryptionSpecification {
  bool enabled = 1;
  // ARN of a customer-managed KMS key (optional).
  string kms_key_arn = 2 [
    (buf.validate.field).string = {
      pattern: "^arn:aws[a-zA-Z-]*:kms:[a-z0-9-]+:[0-9]{12}:key/[A-Za-z0-9-]+$",
      ignore_empty: true
    }
  ];
}