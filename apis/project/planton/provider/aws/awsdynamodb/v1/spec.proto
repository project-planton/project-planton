syntax = "proto3";

package project.planton.provider.aws.awsdynamodb.v1;

import "buf/validate/validate.proto";

//-------------------------------------------------------------------------------
// AwsDynamodbSpec
//-------------------------------------------------------------------------------
// Describes the desired state of an Amazon DynamoDB table.  The schema attempts
// to cover ~80 % of real-world configuration needs while remaining concise.
//-------------------------------------------------------------------------------
message AwsDynamodbSpec {
  // Friendly, unique table name (must be unique per AWS account/region).
  string table_name = 1 [
    (buf.validate.field).string = {
      min_len: 3
      max_len: 255
      pattern: "^[A-Za-z0-9_.-]+$"
    }
  ];

  // All attributes referenced by the table or any secondary index.
  repeated AttributeDefinition attribute_definitions = 2 [
    (buf.validate.field).repeated = {min_items: 1, unique: true}
  ];

  // Composite primary key: partition (hash) key required, sort (range) key optional.
  KeySchema key_schema = 3 [
    (buf.validate.field).message = {required: true}
  ];

  // Capacity-billing model.
  BillingMode billing_mode = 4 [
    (buf.validate.field).enum = {defined_only: true, not_in: [0]}
  ];

  // Provisioned throughput (only used when billing_mode == PROVISIONED).
  ProvisionedThroughput provisioned_throughput = 5 [
    (buf.validate.field).message = {}
  ];

  // Global secondary indexes (GSI) to create.
  repeated GlobalSecondaryIndex global_secondary_indexes = 6 [
    (buf.validate.field).repeated = {unique: true}
  ];

  // Local secondary indexes (LSI) to create.
  repeated LocalSecondaryIndex local_secondary_indexes = 7 [
    (buf.validate.field).repeated = {unique: true}
  ];

  // DynamoDB Streams configuration.
  StreamSpecification stream_specification = 8 [
    (buf.validate.field).message = {}
  ];

  // Time-to-live configuration.
  TtlSpecification ttl = 9 [
    (buf.validate.field).message = {}
  ];

  // Continuous backups / point-in-time recovery.
  PointInTimeRecovery point_in_time_recovery = 10 [
    (buf.validate.field).message = {}
  ];

  // Server-side encryption.
  SseSpecification server_side_encryption = 11 [
    (buf.validate.field).message = {}
  ];

  // Table storage class (STANDARD or STANDARD_INFREQUENT_ACCESS).
  TableClass table_class = 12 [
    (buf.validate.field).enum = {defined_only: true}
  ];

  // Prevents accidental deletion of the table when set to true.
  bool deletion_protection_enabled = 13 [
    (buf.validate.field).bool = {}
  ];

  // AWS resource tags applied to the table and its secondary indexes.
  repeated Tag tags = 14 [
    (buf.validate.field).repeated = {unique: true}
  ];

  // Auto-scaling policies for provisioned capacity.
  AutoScalingSpecification auto_scaling = 15 [
    (buf.validate.field).message = {}
  ];
}

//-------------------------------------------------------------------------------
// Attribute & Key-Schema
//-------------------------------------------------------------------------------
message AttributeDefinition {
  string name = 1 [
    (buf.validate.field).string = {min_len: 1, pattern: "^[A-Za-z0-9_.-]+$"}
  ];

  enum AttributeType {
    ATTRIBUTE_TYPE_UNSPECIFIED = 0;
    S = 1; // String
    N = 2; // Number
    B = 3; // Binary
  }
  AttributeType type = 2 [
    (buf.validate.field).enum = {defined_only: true, not_in: [0]}
  ];
}

message KeySchema {
  // Required partition (hash) key.
  string hash_key = 1 [
    (buf.validate.field).string = {min_len: 1, pattern: "^[A-Za-z0-9_.-]+$"}
  ];

  // Optional sort (range) key.
  string range_key = 2 [
    (buf.validate.field).string = {}
  ];
}

//-------------------------------------------------------------------------------
// Capacity & Billing
//-------------------------------------------------------------------------------
enum BillingMode {
  BILLING_MODE_UNSPECIFIED = 0;
  PROVISIONED = 1;
  PAY_PER_REQUEST = 2;
}

message ProvisionedThroughput {
  int64 read_capacity_units  = 1 [
    (buf.validate.field).int64 = {gt: 0, lte: 40000}
  ];
  int64 write_capacity_units = 2 [
    (buf.validate.field).int64 = {gt: 0, lte: 40000}
  ];
}

//-------------------------------------------------------------------------------
// Secondary Indexes
//-------------------------------------------------------------------------------
message Projection {
  enum ProjectionType {
    PROJECTION_TYPE_UNSPECIFIED = 0;
    ALL        = 1;
    KEYS_ONLY  = 2;
    INCLUDE    = 3;
  }
  ProjectionType type = 1 [
    (buf.validate.field).enum = {defined_only: true, not_in: [0]}
  ];

  // Used only when type == INCLUDE.
  repeated string non_key_attributes = 2 [
    (buf.validate.field).repeated = {}
  ];
}

message GlobalSecondaryIndex {
  string name = 1 [
    (buf.validate.field).string = {min_len: 3, max_len: 255, pattern: "^[A-Za-z0-9_.-]+$"}
  ];
  KeySchema key_schema = 2 [
    (buf.validate.field).message = {required: true}
  ];
  Projection projection = 3 [
    (buf.validate.field).message = {required: true}
  ];
  // Optional, applies when billing_mode == PROVISIONED.
  ProvisionedThroughput provisioned_throughput = 4 [
    (buf.validate.field).message = {}
  ];
}

message LocalSecondaryIndex {
  string name = 1 [
    (buf.validate.field).string = {min_len: 3, max_len: 255, pattern: "^[A-Za-z0-9_.-]+$"}
  ];
  // Must use the same hash_key as the table; range_key must differ.
  KeySchema key_schema = 2 [
    (buf.validate.field).message = {required: true}
  ];
  Projection projection = 3 [
    (buf.validate.field).message = {required: true}
  ];
}

//-------------------------------------------------------------------------------
// Streams, TTL, Backups, Encryption
//-------------------------------------------------------------------------------
message StreamSpecification {
  bool enabled = 1 [
    (buf.validate.field).bool = {}
  ];
  enum StreamViewType {
    STREAM_VIEW_TYPE_UNSPECIFIED = 0;
    KEYS_ONLY          = 1;
    NEW_IMAGE          = 2;
    OLD_IMAGE          = 3;
    NEW_AND_OLD_IMAGES = 4;
  }
  StreamViewType view_type = 2 [
    (buf.validate.field).enum = {defined_only: true}
  ];
}

message TtlSpecification {
  bool   enabled         = 1 [
    (buf.validate.field).bool = {}
  ];
  string attribute_name  = 2 [
    (buf.validate.field).string = {min_len: 1, pattern: "^[A-Za-z0-9_.-]+$"}
  ];
}

message PointInTimeRecovery {
  bool enabled = 1 [
    (buf.validate.field).bool = {}
  ];
}

message SseSpecification {
  bool enabled = 1 [
    (buf.validate.field).bool = {}
  ];

  enum SseType {
    SSE_TYPE_UNSPECIFIED = 0;
    AES256 = 1; // AWS owned CMK
    KMS    = 2; // Customer managed CMK
  }
  SseType sse_type = 2 [
    (buf.validate.field).enum = {defined_only: true}
  ];

  // ARN of a customer managed KMS key (required when sse_type == KMS).
  string kms_key_arn = 3 [
    (buf.validate.field).string = {
      pattern: "^(|arn:aws:kms:[a-z0-9-]+:[0-9]{12}:key/[A-Za-z0-9-]+)$"
    }
  ];
}

enum TableClass {
  TABLE_CLASS_UNSPECIFIED      = 0;
  STANDARD                     = 1;
  STANDARD_INFREQUENT_ACCESS   = 2;
}

//-------------------------------------------------------------------------------
// Tagging
//-------------------------------------------------------------------------------
message Tag {
  string key   = 1 [
    (buf.validate.field).string = {min_len: 1, max_len: 128}
  ];
  string value = 2 [
    (buf.validate.field).string = {max_len: 256}
  ];
}

//-------------------------------------------------------------------------------
// Auto-Scaling (Provisioned Only)
//-------------------------------------------------------------------------------
message AutoScalingSpecification {
  CapacityAutoScaling read_capacity  = 1 [
    (buf.validate.field).message = {}
  ];
  CapacityAutoScaling write_capacity = 2 [
    (buf.validate.field).message = {}
  ];
}

message CapacityAutoScaling {
  int64 min_capacity               = 1 [
    (buf.validate.field).int64 = {gte: 0}
  ];
  int64 max_capacity               = 2 [
    (buf.validate.field).int64 = {gt: 0}
  ];
  int32 target_utilization_percent = 3 [ // e.g. 70
    (buf.validate.field).int32 = {gte: 20, lte: 90}
  ];
}