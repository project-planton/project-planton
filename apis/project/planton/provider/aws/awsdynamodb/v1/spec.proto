syntax = "proto3";

package project.planton.provider.aws.awsdynamodb.v1;

import "buf/validate/validate.proto";

// AwsDynamodbSpec defines the desired configuration of an Amazon DynamoDB table.
message AwsDynamodbSpec {
  // Unique name of the DynamoDB table (per AWS account & region).
  string table_name = 1 [
    (buf.validate.field).string = {
      min_len: 3,
      max_len: 255,
      pattern: "^[A-Za-z0-9_.-]{3,255}$"
    },
    (buf.validate.field).required = true
  ];

  // Set of attribute definitions referenced by keys and indexes.
  repeated AttributeDefinition attributes = 2 [
    (buf.validate.field).repeated = { min_items: 1, max_items: 20 },
    (buf.validate.field).required = true
  ];

  // Name of the primary partition (hash) key.
  string partition_key = 3 [
    (buf.validate.field).string = {
      min_len: 1,
      max_len: 255,
      pattern: "^[A-Za-z0-9_.-]+$"
    },
    (buf.validate.field).required = true
  ];

  // Optional name of the primary sort (range) key; leave empty if the table is simple-key.
  string sort_key = 4 [
    (buf.validate.field).string = {
      min_len: 1,
      max_len: 255,
      pattern: "^[A-Za-z0-9_.-]+$"
    }
  ];

  // Table-level billing mode.
  BillingMode billing_mode = 5 [
    (buf.validate.field).enum = { not_in: [0] },
    (buf.validate.field).required = true
  ];

  // Read capacity units when billing_mode == PROVISIONED.
  int64 provisioned_read_capacity = 6;

  // Write capacity units when billing_mode == PROVISIONED.
  int64 provisioned_write_capacity = 7;

  // Optional auto-scaling settings for provisioned throughput.
  AutoscalingConfig autoscaling = 8;

  // Local secondary indexes (max 5) that share the same partition key.
  repeated LocalSecondaryIndex local_secondary_indexes = 9 [
    (buf.validate.field).repeated = { max_items: 5 }
  ];

  // Global secondary indexes providing additional access patterns.
  repeated GlobalSecondaryIndex global_secondary_indexes = 10 [
    (buf.validate.field).repeated = { max_items: 20 }
  ];

  // Enables DynamoDB Streams for the table.
  bool stream_enabled = 11;

  // Determines what information is written to the stream (required when stream_enabled).
  StreamViewType stream_view_type = 12;

  // Name of the attribute used for automatic item expiration (TTL); empty to disable TTL.
  string ttl_attribute_name = 13 [
    (buf.validate.field).string = {
      max_len: 255,
      pattern: "^[A-Za-z0-9_.-]*$"
    }
  ];

  // Enables continuous backups for point-in-time recovery.
  bool point_in_time_recovery_enabled = 14;

  // Server-side encryption configuration.
  ServerSideEncryption encryption = 15;

  // Storage class of the table.
  TableClass table_class = 16;

  // Protects the table from accidental deletion.
  bool deletion_protection_enabled = 17;

  // Enables contributor insights for analyzing traffic patterns.
  bool contributor_insights_enabled = 18;

  // Metadata tags applied to the table.
  repeated Tag tags = 19 [
    (buf.validate.field).repeated = { max_items: 50 }
  ];

  // --- Message-level rules ---------------------------------------------------
  option (buf.validate.message).cel = {
    id: "billing_mode_capacity",
    expression: "(this.billing_mode == 1) ? (this.provisioned_read_capacity > 0 && this.provisioned_write_capacity > 0) : (this.billing_mode == 2) ? (this.provisioned_read_capacity == 0 && this.provisioned_write_capacity == 0) : true",
    message: "When billing_mode is PROVISIONED, read/write capacity must be > 0; when PAY_PER_REQUEST they must be 0 or unset."
  };

  option (buf.validate.message).cel = {
    id: "stream_consistency",
    expression: "this.stream_enabled ? this.stream_view_type != 0 : this.stream_view_type == 0",
    message: "stream_view_type must be specified when stream_enabled is true, and unset when false."
  };

  option (buf.validate.message).cel = {
    id: "lsi_requires_sort_key",
    expression: "this.local_secondary_indexes.size() == 0 || this.sort_key != \"\"",
    message: "A table must define a sort_key when local secondary indexes are specified."
  };
}

// Defines a DynamoDB attribute (column) and its scalar data type.
message AttributeDefinition {
  string name = 1 [
    (buf.validate.field).string = {
      min_len: 1,
      max_len: 255,
      pattern: "^[A-Za-z0-9_.-]+$"
    },
    (buf.validate.field).required = true
  ]; // Attribute (column) name.

  AttributeType type = 2 [
    (buf.validate.field).enum = { not_in: [0] },
    (buf.validate.field).required = true
  ]; // Scalar type: S (string), N (number), B (binary).
}

// Billing options available for a table or global secondary index.
enum BillingMode {
  BILLING_MODE_UNSPECIFIED = 0;
  PROVISIONED = 1;      // Fixed RCUs/WCUs with optional auto-scaling.
  PAY_PER_REQUEST = 2;  // On-demand capacity.
}

// Scalar attribute data types supported by DynamoDB.
enum AttributeType {
  ATTRIBUTE_TYPE_UNSPECIFIED = 0;
  STRING = 1; // "S"
  NUMBER = 2; // "N"
  BINARY = 3; // "B"
}

// Server-side encryption settings.
message ServerSideEncryption {
  bool enabled = 1;

  string kms_key_arn = 2 [
    (buf.validate.field).string = {
      max_len: 2048,
      pattern: "^arn:[a-z0-9-]+:kms:[a-z0-9-]+:[0-9]{12}:key/[A-Za-z0-9-]+$"
    }
  ]; // Optional customer-managed KMS key ARN.
}

// Auto-scaling configuration for provisioned capacity.
message AutoscalingConfig {
  bool enabled = 1;

  int64 min_read_capacity = 2 [ (buf.validate.field).int64 = { gte: 0 } ];
  int64 max_read_capacity = 3 [ (buf.validate.field).int64 = { gte: 0 } ];
  int64 min_write_capacity = 4 [ (buf.validate.field).int64 = { gte: 0 } ];
  int64 max_write_capacity = 5 [ (buf.validate.field).int64 = { gte: 0 } ];
  int32 target_utilization_percent = 6;

  option (buf.validate.message).cel = {
    id: "autoscaling_enabled_capacities",
    expression: "!this.enabled || (this.min_read_capacity > 0 && this.max_read_capacity > 0 && this.min_write_capacity > 0 && this.max_write_capacity > 0 && this.min_read_capacity <= this.max_read_capacity && this.min_write_capacity <= this.max_write_capacity && this.target_utilization_percent >= 10 && this.target_utilization_percent <= 90)",
    message: "When autoscaling is enabled all min/max capacities must be >0 and min<=max; utilization must be 10-90%."
  };
}

// Specification for a local secondary index.
message LocalSecondaryIndex {
  string name = 1 [
    (buf.validate.field).string = {
      min_len: 3,
      max_len: 255,
      pattern: "^[A-Za-z0-9_.-]{3,255}$"
    },
    (buf.validate.field).required = true
  ];

  string sort_key = 2 [
    (buf.validate.field).string = {
      min_len: 1,
      max_len: 255,
      pattern: "^[A-Za-z0-9_.-]+$"
    },
    (buf.validate.field).required = true
  ];

  Projection projection = 3 [ (buf.validate.field).required = true ]; // Attributes projected into the index.
}

// Specification for a global secondary index.
message GlobalSecondaryIndex {
  string name = 1 [
    (buf.validate.field).string = {
      min_len: 3,
      max_len: 255,
      pattern: "^[A-Za-z0-9_.-]{3,255}$"
    },
    (buf.validate.field).required = true
  ];

  string partition_key = 2 [
    (buf.validate.field).string = {
      min_len: 1,
      max_len: 255,
      pattern: "^[A-Za-z0-9_.-]+$"
    },
    (buf.validate.field).required = true
  ];

  string sort_key = 3 [
    (buf.validate.field).string = {
      min_len: 1,
      max_len: 255,
      pattern: "^[A-Za-z0-9_.-]+$"
    }
  ];

  BillingMode billing_mode = 4;

  int64 provisioned_read_capacity = 5;
  int64 provisioned_write_capacity = 6;

  AutoscalingConfig autoscaling = 7;
  Projection projection = 8 [ (buf.validate.field).required = true ];

  option (buf.validate.message).cel = {
    id: "gsi_billing_capacity",
    expression: "(this.billing_mode == 1) ? (this.provisioned_read_capacity > 0 && this.provisioned_write_capacity > 0) : (this.billing_mode == 2 || this.billing_mode == 0) ? (this.provisioned_read_capacity == 0 && this.provisioned_write_capacity == 0) : true",
    message: "For a GSI: when billing_mode is PROVISIONED, capacities must be >0; when PAY_PER_REQUEST or UNSPECIFIED they must be 0 or unset."
  };
}

// Controls which attributes are copied from the source table into an index.
message Projection {
  ProjectionType type = 1 [ (buf.validate.field).enum = { not_in: [0] }, (buf.validate.field).required = true ];

  repeated string non_key_attributes = 2 [
    (buf.validate.field).repeated = { max_items: 20 },
    (buf.validate.field).string = {
      min_len: 1,
      max_len: 255,
      pattern: "^[A-Za-z0-9_.-]+$"
    }
  ];

  option (buf.validate.message).cel = {
    id: "projection_include_attributes",
    expression: "this.type == 3 ? this.non_key_attributes.size() > 0 : this.non_key_attributes.size() == 0",
    message: "non_key_attributes must be set only when projection type is INCLUDE."
  };
}

// Projection strategies for an index.
enum ProjectionType {
  PROJECTION_TYPE_UNSPECIFIED = 0;
  ALL = 1; // All attributes.
  KEYS_ONLY_PROJECTION = 2; // Only key attributes (renamed to avoid duplicate symbol).
  INCLUDE = 3; // Specific non-key attributes.
}

// View types for DynamoDB Streams.
enum StreamViewType {
  STREAM_VIEW_TYPE_UNSPECIFIED = 0;
  NEW_IMAGE = 1; // Only the new item image.
  OLD_IMAGE = 2; // Only the old item image.
  NEW_AND_OLD_IMAGES = 3; // Both the new and the old images of the item.
  KEYS_ONLY = 4; // Only the key attributes of the modified item.
}

// Storage classes for DynamoDB tables.
enum TableClass {
  TABLE_CLASS_UNSPECIFIED = 0;
  STANDARD = 1; // Standard storage class.
  STANDARD_INFREQUENT_ACCESS = 2; // Lower-cost infrequent access class.
}

// Simple key/value tag.
message Tag {
  string key = 1 [
    (buf.validate.field).string = {
      min_len: 1,
      max_len: 128,
      pattern: "^[A-Za-z0-9_.:/=+@-]+$"
    },
    (buf.validate.field).required = true
  ];

  string value = 2 [
    (buf.validate.field).string = {
      max_len: 256,
      pattern: "^[A-Za-z0-9_.:/=+@-]*$"
    }
  ];
}