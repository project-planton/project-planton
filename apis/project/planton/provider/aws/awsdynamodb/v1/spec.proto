syntax = "proto3";

package project.planton.provider.aws.awsdynamodb.v1;

// AwsDynamodbSpec defines the desired state of an Amazon DynamoDB table.
message AwsDynamodbSpec {
  // Human-readable table name (must be unique within an AWS account & region).
  string table_name = 1;

  // Billing model that determines how you pay for read/write throughput.
  BillingMode billing_mode = 2;

  // Provisioned read capacity units; used only when billing_mode = PROVISIONED.
  int64 read_capacity_units = 3;

  // Provisioned write capacity units; used only when billing_mode = PROVISIONED.
  int64 write_capacity_units = 4;

  // Attribute definitions for the table and all indexes.
  repeated AttributeDefinition attribute_definitions = 5;

  // Key schema for the table (HASH and optional RANGE key).
  repeated KeySchemaElement key_schema = 6;

  // Optional global secondary indexes to create on the table.
  repeated GlobalSecondaryIndex global_secondary_indexes = 7;

  // Optional local secondary indexes to create on the table.
  repeated LocalSecondaryIndex local_secondary_indexes = 8;

  // Configuration for DynamoDB Streams.
  StreamSpecification stream_specification = 9;

  // Time-to-live (TTL) settings for automatic item expiration.
  TimeToLiveSpecification ttl = 10;

  // Server-side encryption settings.
  SSESpecification sse_specification = 11;

  // Enables point-in-time recovery (continuous backups).
  bool point_in_time_recovery_enabled = 12;

  // Storage class of the table (standard or infrequent-access).
  TableClass table_class = 13;

  // Prevents accidental deletion of the table when enabled.
  bool deletion_protection_enabled = 14;

  // Resource tags for cost allocation and access control.
  repeated Tag tags = 15;

  // AWS region where the table will be created.
  string region = 16;
}

// -----------------------------
// Supporting types & enums
// -----------------------------

// How you are charged for read/write throughput.
enum BillingMode {
  BILLING_MODE_UNSPECIFIED = 0;
  PROVISIONED = 1;        // RCU/WCU explicitly configured.
  PAY_PER_REQUEST = 2;    // On-demand (autoscaled) capacity.
}

// Data type of an attribute.
enum AttributeType {
  ATTRIBUTE_TYPE_UNSPECIFIED = 0;
  STRING = 1;  // UTF-8 encoded string ("S").
  NUMBER = 2;  // Numeric value ("N").
  BINARY = 3;  // Binary data ("B").
}

// Role of an attribute within a key schema.
enum KeyType {
  KEY_TYPE_UNSPECIFIED = 0;
  HASH = 1;   // Partition key.
  RANGE = 2;  // Sort key.
}

// Projection type for secondary index.
enum ProjectionType {
  PROJECTION_TYPE_UNSPECIFIED = 0;
  ALL = 1;          // All table attributes.
  KEYS_ONLY = 2;    // Only primary & index keys.
  INCLUDE = 3;      // Specified non-key attributes.
}

// Table storage class.
enum TableClass {
  TABLE_CLASS_UNSPECIFIED = 0;
  STANDARD = 1;
  STANDARD_INFREQUENT_ACCESS = 2;
}

// -----------------------------
// Complex structures
// -----------------------------

// Defines an attribute used in the table or an index.
message AttributeDefinition {
  // Attribute name (case-sensitive).
  string attribute_name = 1;
  // Data type of the attribute.
  AttributeType attribute_type = 2;
}

// Describes a single key element (HASH or RANGE).
message KeySchemaElement {
  string attribute_name = 1;  // Name of the attribute.
  KeyType key_type = 2;       // Whether HASH or RANGE key.
}

// Projection definition for secondary indexes.
message Projection {
  ProjectionType projection_type = 1;          // The projection type.
  repeated string non_key_attributes = 2;      // Attributes to include when projection_type = INCLUDE.
}

// Definition of a global secondary index.
message GlobalSecondaryIndex {
  string index_name = 1;                       // Index name.
  repeated KeySchemaElement key_schema = 2;    // Index key schema.
  Projection projection = 3;                   // Attributes projected into the index.
  BillingMode billing_mode = 4;                // Billing mode for the index.
  int64 read_capacity_units = 5;               // Provisioned RCU (if applicable).
  int64 write_capacity_units = 6;              // Provisioned WCU (if applicable).
}

// Definition of a local secondary index.
message LocalSecondaryIndex {
  string index_name = 1;                       // Index name.
  repeated KeySchemaElement key_schema = 2;    // Index key schema (same HASH, different RANGE).
  Projection projection = 3;                   // Attributes projected into the index.
}

// Configuration for DynamoDB Streams.
message StreamSpecification {
  bool enabled = 1;                 // Enables or disables streams.
  StreamViewType view_type = 2;     // Type of data written to the stream.

  // Stream view type.
  enum StreamViewType {
    STREAM_VIEW_TYPE_UNSPECIFIED = 0;
    NEW_IMAGE = 1;              // Item after modification.
    OLD_IMAGE = 2;              // Item before modification.
    NEW_AND_OLD_IMAGES = 3;     // Both before & after images.
    KEYS_ONLY = 4;              // Only the item keys.
  }
}

// Time-to-live specification.
message TimeToLiveSpecification {
  bool enabled = 1;                 // Enables or disables TTL.
  string attribute_name = 2;        // Attribute that stores the expiration timestamp.
}

// Server-side encryption specification.
message SSESpecification {
  bool enabled = 1;                 // Enables or disables SSE.
  string kms_master_key_arn = 2;    // Optional customer managed KMS key ARN.
}

// Key-value tag pair.
message Tag {
  string key = 1;                   // Tag key (case-sensitive).
  string value = 2;                 // Tag value (case-sensitive).
}