syntax = "proto3";

package project.planton.provider.aws.awsdynamodb.v1;

// AwsDynamodbSpec defines the desired state of an Amazon DynamoDB table.
message AwsDynamodbSpec {
  // Name of the DynamoDB table.
  string table_name = 1;

  // Billing mode for the table: PROVISIONED or PAY_PER_REQUEST.
  BillingMode billing_mode = 2;

  // Provisioned read capacity units (ignored when billing_mode is PAY_PER_REQUEST).
  int64 read_capacity_units = 3;

  // Provisioned write capacity units (ignored when billing_mode is PAY_PER_REQUEST).
  int64 write_capacity_units = 4;

  // Attribute definitions for the table's key schema and indexes.
  repeated AttributeDefinition attribute_definitions = 5;

  // Primary key schema elements (partition and optional sort keys).
  repeated KeySchemaElement key_schema = 6;

  // Local secondary indexes attached to the table.
  repeated LocalSecondaryIndex local_secondary_indexes = 7;

  // Global secondary indexes attached to the table.
  repeated GlobalSecondaryIndex global_secondary_indexes = 8;

  // List of tags to apply to the table.
  repeated Tag tags = 9;

  // Enables Time to Live (TTL) on the specified attribute.
  optional TTLSpecification ttl = 10;

  // Stream specification for DynamoDB Streams.
  optional StreamSpecification stream_specification = 11;

  // Server-side encryption specification.
  optional SSESpecification sse_specification = 12;

  // Enables point-in-time recovery (continuous backups).
  bool point_in_time_recovery = 13;

  // Enables table deletion protection.
  bool deletion_protection = 14;

  // Configuration for Global Table replication across regions.
  repeated ReplicaSpecification replicas = 15;
}

// Billing modes supported by DynamoDB.
enum BillingMode {
  BILLING_MODE_UNSPECIFIED = 0;
  PROVISIONED = 1;
  PAY_PER_REQUEST = 2;
}

// Defines an attribute used in the table or indexes.
message AttributeDefinition {
  // Attribute name.
  string name = 1;

  // Attribute data type: S (string), N (number), B (binary).
  AttributeType type = 2;
}

// Scalar attribute data types.
enum AttributeType {
  ATTRIBUTE_TYPE_UNSPECIFIED = 0;
  S = 1;
  N = 2;
  B = 3;
}

// Identifies a key element in a key schema.
message KeySchemaElement {
  // Attribute name for the key element.
  string attribute_name = 1;

  // Role of the key element: HASH (partition key) or RANGE (sort key).
  KeyType key_type = 2;
}

// Key element roles.
enum KeyType {
  KEY_TYPE_UNSPECIFIED = 0;
  HASH = 1;   // Partition key
  RANGE = 2;  // Sort key
}

// Local secondary index definition.
message LocalSecondaryIndex {
  // Index name.
  string index_name = 1;

  // Key schema for the index (must reuse table partition key).
  repeated KeySchemaElement key_schema = 2;

  // Projection configuration.
  Projection projection = 3;
}

// Global secondary index definition.
message GlobalSecondaryIndex {
  // Index name.
  string index_name = 1;

  // Key schema for the index (partition key and optional sort key).
  repeated KeySchemaElement key_schema = 2;

  // Projection configuration.
  Projection projection = 3;

  // Provisioned read capacity units (ignored when billing_mode is PAY_PER_REQUEST).
  int64 read_capacity_units = 4;

  // Provisioned write capacity units (ignored when billing_mode is PAY_PER_REQUEST).
  int64 write_capacity_units = 5;
}

// Projection settings for an index.
message Projection {
  // Projection type: ALL, KEYS_ONLY, or INCLUDE.
  enum ProjectionType {
    PROJECTION_TYPE_UNSPECIFIED = 0;
    ALL = 1;
    KEYS_ONLY = 2;
    INCLUDE = 3;
  }
  ProjectionType projection_type = 1;

  // Non-key attributes to include when projection_type is INCLUDE.
  repeated string non_key_attributes = 2;
}

// Key/value tag pair.
message Tag {
  // Tag key.
  string key = 1;

  // Tag value.
  string value = 2;
}

// Time-to-live specification.
message TTLSpecification {
  // Enables TTL when true.
  bool enabled = 1;

  // Name of the attribute that stores TTL epoch timestamp.
  string attribute_name = 2;
}

// Stream settings for the table.
message StreamSpecification {
  // When true, streams are enabled.
  bool enabled = 1;

  // Specifies what information is written to the stream.
  StreamViewType view_type = 2;
}

// Types of data that can be written to a stream.
enum StreamViewType {
  STREAM_VIEW_TYPE_UNSPECIFIED = 0;
  NEW_IMAGE = 1;
  OLD_IMAGE = 2;
  NEW_AND_OLD_IMAGES = 3;
  KEYS_ONLY = 4;
}

// Server-side encryption settings.
message SSESpecification {
  // When true, server-side encryption is enabled.
  bool enabled = 1;

  // Type of key used for encryption: AWS_OWNED, AWS_MANAGED, or CUSTOMER_MANAGED.
  SSEType sse_type = 2;

  // ARN of the customer managed KMS key (required when sse_type is CUSTOMER_MANAGED).
  string kms_key_arn = 3;
}

// Encryption key types.
enum SSEType {
  SSE_TYPE_UNSPECIFIED = 0;
  AWS_OWNED = 1;       // DynamoDB-owned key (default)
  AWS_MANAGED = 2;     // AWS managed key in KMS
  CUSTOMER_MANAGED = 3; // Customer managed KMS key
}

// Configuration for a regional replica in a Global Table.
message ReplicaSpecification {
  // AWS region for the replica.
  string region = 1;

  // Overrides for table-level settings in the replica.
  optional ReplicaOverride override = 2;
}

// Per-replica overrides.
message ReplicaOverride {
  // Enables point-in-time recovery on the replica.
  bool point_in_time_recovery = 1;

  // Overrides encryption settings for the replica.
  optional SSESpecification sse_specification = 2;
}