syntax = "proto3";

package project.planton.provider.aws.awsdynamodb.v1;

import "buf/validate/validate.proto";

// AwsDynamodbSpec defines the desired state of an Amazon DynamoDB table.
// It tries to cover â‰ˆ80 % of the configuration surface that users most often
// need when provisioning tables via infrastructure-as-code.
message AwsDynamodbSpec {
  // ---------------------------------------------------------------------------
  // Basic table settings
  // ---------------------------------------------------------------------------

  // Logical name of the table. Must be unique per AWS account & region.
  string table_name = 1 [
    (buf.validate.field).string.min_len = 3,
    (buf.validate.field).required      = true
  ];

  // Billing mode for read / write capacity consumption.
  enum BillingMode {
    BILLING_MODE_UNSPECIFIED = 0;
    // User defines provisioned throughput values (RCU / WCU).
    PROVISIONED              = 1;
    // Fully on-demand (a.k.a. PAY_PER_REQUEST). No capacity numbers needed.
    PAY_PER_REQUEST          = 2;
  }
  BillingMode billing_mode = 2 [
    (buf.validate.field).enum.defined_only = true,
    (buf.validate.field).required          = true
  ];

  // Provisioned throughput for the table (only used when billing_mode=PROVISIONED).
  message ProvisionedThroughput {
    // Number of read capacity units.
    int64 read_capacity_units  = 1 [
      (buf.validate.field).int64.gt = 0
    ];
    // Number of write capacity units.
    int64 write_capacity_units = 2 [
      (buf.validate.field).int64.gt = 0
    ];
  }
  ProvisionedThroughput provisioned_throughput = 3 [
    (buf.validate.field).message              = {},
    (buf.validate.field).ignore_empty         = true
  ];

  // ---------------------------------------------------------------------------
  // Attributes & key schema
  // ---------------------------------------------------------------------------

  // Attribute (column) definitions referenced by the key schema & indexes.
  message AttributeDefinition {
    // Attribute (column) name.
    string name = 1 [
      (buf.validate.field).string.min_len = 1,
      (buf.validate.field).required       = true
    ];

    // DynamoDB scalar type.
    enum AttributeType {
      ATTRIBUTE_TYPE_UNSPECIFIED = 0;
      STRING                     = 1; // "S"
      NUMBER                     = 2; // "N"
      BINARY                     = 3; // "B"
    }
    AttributeType type = 2 [
      (buf.validate.field).enum.defined_only = true,
      (buf.validate.field).required          = true
    ];
  }
  repeated AttributeDefinition attribute_definitions = 4 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.unique    = true
  ];

  // Key schema describing the HASH (partition) and optional RANGE (sort) keys.
  message KeySchemaElement {
    // Name of an attribute present in attribute_definitions.
    string attribute_name = 1 [
      (buf.validate.field).string.min_len = 1,
      (buf.validate.field).required       = true
    ];

    enum KeyType {
      KEY_TYPE_UNSPECIFIED = 0;
      HASH                 = 1; // Partition key
      RANGE                = 2; // Sort key
    }
    KeyType key_type = 2 [
      (buf.validate.field).enum.defined_only = true,
      (buf.validate.field).required          = true
    ];
  }
  repeated KeySchemaElement key_schema = 5 [
    (buf.validate.field).repeated.min_items = 1,
    (buf.validate.field).repeated.unique    = true
  ];

  // ---------------------------------------------------------------------------
  // Indexes
  // ---------------------------------------------------------------------------

  // Projection settings shared by GSI/LSI.
  message Projection {
    enum ProjectionType {
      PROJECTION_TYPE_UNSPECIFIED = 0;
      ALL                         = 1;
      KEYS_ONLY                   = 2;
      INCLUDE                     = 3; // Specify non-key attributes.
    }
    ProjectionType type = 1 [
      (buf.validate.field).enum.defined_only = true,
      (buf.validate.field).required          = true
    ];
    // Only used when type = INCLUDE.
    repeated string non_key_attributes = 2 [
      (buf.validate.field).repeated = {
        items: { string: { min_len: 1 } },
        unique: true
      },
      (buf.validate.field).ignore_empty = true
    ];
  }

  // Global secondary index definition.
  message GlobalSecondaryIndex {
    // Index name (unique per table).
    string name = 1 [
      (buf.validate.field).string.min_len = 3,
      (buf.validate.field).required       = true
    ];

    // Hash and (optional) range keys for the index.
    repeated KeySchemaElement key_schema = 2 [
      (buf.validate.field).repeated.min_items = 1,
      (buf.validate.field).repeated.unique    = true
    ];

    // Data projection.
    Projection projection = 3 [
      (buf.validate.field).message  = {},
      (buf.validate.field).required = true
    ];

    // Throughput for the index when table billing_mode = PROVISIONED.
    ProvisionedThroughput provisioned_throughput = 4 [
      (buf.validate.field).message      = {},
      (buf.validate.field).ignore_empty = true
    ];
  }
  repeated GlobalSecondaryIndex global_secondary_indexes = 6 [
    (buf.validate.field).repeated.unique = true
  ];

  // Local secondary index definition (shares partition key with the table).
  message LocalSecondaryIndex {
    string name = 1 [
      (buf.validate.field).string.min_len = 3,
      (buf.validate.field).required       = true
    ];
    repeated KeySchemaElement key_schema = 2 [
      (buf.validate.field).repeated.min_items = 2,
      (buf.validate.field).repeated.unique    = true
    ];
    Projection projection = 3 [
      (buf.validate.field).message  = {},
      (buf.validate.field).required = true
    ];
  }
  repeated LocalSecondaryIndex local_secondary_indexes = 7 [
    (buf.validate.field).repeated.unique = true
  ];

  // ---------------------------------------------------------------------------
  // Streaming & TTL
  // ---------------------------------------------------------------------------

  // Enable DynamoDB Streams on the table.
  bool stream_enabled = 8 [
    (buf.validate.field).bool = {}
  ];

  // Stream view type (only relevant when stream_enabled = true).
  enum StreamViewType {
    STREAM_VIEW_TYPE_UNSPECIFIED = 0;
    NEW_IMAGE                    = 1;
    OLD_IMAGE                    = 2;
    NEW_AND_OLD_IMAGES           = 3;
    KEYS_ONLY                    = 4;
  }
  StreamViewType stream_view_type = 9 [
    (buf.validate.field).enum.defined_only = true,
    (buf.validate.field).ignore_empty      = true
  ];

  // Time-to-live (TTL) configuration.
  message TimeToLiveSpecification {
    // Toggle TTL for the table.
    bool enabled = 1 [
      (buf.validate.field).bool = {}
    ];
    // Name of the attribute that stores the expiry timestamp.
    string attribute_name = 2 [
      (buf.validate.field).string.min_len = 1,
      (buf.validate.field).ignore_empty   = true
    ];
  }
  TimeToLiveSpecification ttl_specification = 10 [
    (buf.validate.field).message      = {},
    (buf.validate.field).ignore_empty = true
  ];

  // ---------------------------------------------------------------------------
  // Data protection & security
  // ---------------------------------------------------------------------------

  // Point-in-time recovery (continuous backups).
  bool point_in_time_recovery_enabled = 11 [
    (buf.validate.field).bool = {}
  ];

  // Server-side encryption settings.
  message ServerSideEncryption {
    // Turn SSE on/off. Default in AWS is "enabled".
    bool enabled = 1 [
      (buf.validate.field).bool = {}
    ];

    enum SseType {
      SSE_TYPE_UNSPECIFIED = 0;
      AWS_OWNED_KMS        = 1; // "AES256"
      CUSTOMER_MANAGED_KMS = 2; // Specific AWS KMS key.
    }
    SseType sse_type = 2 [
      (buf.validate.field).enum.defined_only = true,
      (buf.validate.field).ignore_empty      = true
    ];

    // ARN of the customer managed KMS key (required when sse_type=CUSTOMER_MANAGED_KMS).
    string kms_key_arn = 3 [
      (buf.validate.field).string.min_len = 20,
      (buf.validate.field).ignore_empty   = true
    ];
  }
  ServerSideEncryption server_side_encryption = 12 [
    (buf.validate.field).message      = {},
    (buf.validate.field).ignore_empty = true
  ];

  // ---------------------------------------------------------------------------
  // Capacity auto-scaling (optional quality-of-life feature)
  // ---------------------------------------------------------------------------

  message AutoScalingSettings {
    bool enabled = 1 [
      (buf.validate.field).bool = {}
    ];
    // Minimum and maximum provisioned capacity units DynamoDB may dial between.
    int64 min_capacity = 2 [
      (buf.validate.field).int64.gt = 0,
      (buf.validate.field).ignore_empty = true
    ];
    int64 max_capacity = 3 [
      (buf.validate.field).int64.gt = 0,
      (buf.validate.field).ignore_empty = true
    ];
    // Target utilization percentage (e.g. 70).
    int32 target_utilization_percent = 4 [
      (buf.validate.field).int32.gte = 1,
      (buf.validate.field).int32.lte = 100,
      (buf.validate.field).ignore_empty = true
    ];
  }
  AutoScalingSettings read_capacity_auto_scaling = 13 [
    (buf.validate.field).message      = {},
    (buf.validate.field).ignore_empty = true
  ];
  AutoScalingSettings write_capacity_auto_scaling = 14 [
    (buf.validate.field).message      = {},
    (buf.validate.field).ignore_empty = true
  ];

  // ---------------------------------------------------------------------------
  // Additional options
  // ---------------------------------------------------------------------------

  // Table class (STANDARD is default; SIA trades cost for higher access latency).
  enum TableClass {
    TABLE_CLASS_UNSPECIFIED       = 0;
    STANDARD                      = 1;
    STANDARD_INFREQUENT_ACCESS    = 2;
  }
  TableClass table_class = 15 [
    (buf.validate.field).enum.defined_only = true,
    (buf.validate.field).ignore_empty      = true
  ];

  // Replicate table to multiple regions (Global Tables V2).
  // Provide a list of AWS region codes, e.g. ["us-west-2","eu-central-1"].
  repeated string replica_regions = 16 [
    (buf.validate.field).repeated = {
      unique: true,
      items: { string: { pattern: "^[a-z]{2}-[a-z]+-[0-9]+$", min_len: 5 } }
    }
  ];

  // Resource tags applied to the table.
  map<string, string> tags = 17 [
    (buf.validate.field).map = {
      keys:   { string: { min_len: 1 } },
      values: { string: { min_len: 1 } }
    }
  ];
}