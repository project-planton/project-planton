syntax = "proto3";

package project.planton.provider.aws.awsdynamodb.v1;

import "buf/validate/validate.proto";

// AwsDynamodbSpec describes the desired state of an Amazon DynamoDB table.
message AwsDynamodbSpec {
  // AWS Region where the table will be created (e.g. "us-east-1").
  string region = 1 [
    (buf.validate.field).string = {
      min_len: 1,
      max_len: 32,
      pattern: "^[a-z]{2}-[a-z]+-[0-9]+$"
    }
  ];

  // Name of the DynamoDB table (must be unique within an AWS account/region).
  string table_name = 2 [
    (buf.validate.field).string = {
      min_len: 3,
      max_len: 255,
      pattern: "^[A-Za-z0-9_.-]+$"
    }
  ];

  // Definitions of the attributes used in keys and indexes.
  repeated Attribute attributes = 3 [
    (buf.validate.field).repeated = {
      min_items: 1,
      items: { message: { required: true } }
    }
  ];

  // Primary (partition) key attribute name.
  string hash_key = 4 [
    (buf.validate.field).string = {
      min_len: 1,
      max_len: 255,
      pattern: "^[A-Za-z0-9_.-]+$"
    }
  ];

  // Optional sort key attribute name.
  string range_key = 5 [
    (buf.validate.field).string = {
      ignore_empty: true,
      min_len: 1,
      max_len: 255,
      pattern: "^[A-Za-z0-9_.-]+$"
    }
  ];

  // Billing strategy for read/write capacity.
  BillingMode billing_mode = 6 [
    (buf.validate.field).enum = {
      defined_only: true,
      not_in: [0] // BILLING_MODE_UNSPECIFIED not allowed
    }
  ];

  // Throughput settings (only used with PROVISIONED billing mode).
  ProvisionedThroughput provisioned_throughput = 7 [
    (buf.validate.field).message = {}
  ];

  // Local secondary indexes (max 5 per table).
  repeated LocalSecondaryIndex local_secondary_indexes = 8 [
    (buf.validate.field).repeated = {
      max_items: 5,
      items: { message: { required: true } }
    }
  ];

  // Global secondary indexes.
  repeated GlobalSecondaryIndex global_secondary_indexes = 9 [
    (buf.validate.field).repeated = {
      max_items: 20,
      items: { message: { required: true } }
    }
  ];

  // Stream configuration for the table.
  StreamSpecification stream_specification = 10 [
    (buf.validate.field).message = {}
  ];

  // Time-to-live (TTL) configuration.
  TTLSpecification ttl_specification = 11 [
    (buf.validate.field).message = {}
  ];

  // Server-side encryption configuration.
  ServerSideEncryptionSpec sse_specification = 12 [
    (buf.validate.field).message = {}
  ];

  // Enable point-in-time recovery (PITR) for continuous backups.
  bool point_in_time_recovery_enabled = 13 [
    (buf.validate.field).bool = {}
  ];

  // Prevent accidental deletion of the table when set to true.
  bool deletion_protection_enabled = 14 [
    (buf.validate.field).bool = {}
  ];

  // Storage class of the table (STANDARD or STANDARD_INFREQUENT_ACCESS).
  TableClass table_class = 15 [
    (buf.validate.field).enum = {
      defined_only: true,
      not_in: [0] // TABLE_CLASS_UNSPECIFIED not allowed
    }
  ];

  // Tags to apply to the table resource.
  map<string, string> tags = 16 [
    (buf.validate.field).map = {
      keys:   { string: { min_len: 1, max_len: 128 } },
      values: { string: { min_len: 1, max_len: 256 } }
    }
  ];

  // List of replica regions to create a global table.
  repeated Replica replica_regions = 17 [
    (buf.validate.field).repeated = {
      items: { message: { required: true } }
    }
  ];

  // -------- Nested types ---------------------------------------------------

  // Supported billing modes.
  enum BillingMode {
    BILLING_MODE_UNSPECIFIED = 0;
    PROVISIONED              = 1; // Fixed read/write capacity units.
    PAY_PER_REQUEST          = 2; // On-demand capacity.
  }

  // Table storage classes.
  enum TableClass {
    TABLE_CLASS_UNSPECIFIED      = 0;
    STANDARD                     = 1; // Default.
    STANDARD_INFREQUENT_ACCESS   = 2; // Lower-cost, infrequent access.
  }

  // Attribute definition.
  message Attribute {
    // Name of the attribute.
    string name = 1 [
      (buf.validate.field).string = {
        min_len: 1,
        max_len: 255,
        pattern: "^[A-Za-z0-9_.-]+$"
      }
    ];

    // Data type of the attribute.
    AttributeType type = 2 [
      (buf.validate.field).enum = {
        defined_only: true,
        not_in: [0] // ATTRIBUTE_TYPE_UNSPECIFIED not allowed
      }
    ];

    enum AttributeType {
      ATTRIBUTE_TYPE_UNSPECIFIED = 0;
      S = 1; // String
      N = 2; // Number
      B = 3; // Binary
    }
  }

  // Provisioned throughput settings.
  message ProvisionedThroughput {
    // Read capacity units.
    int64 read_capacity_units = 1 [
      (buf.validate.field).int64 = { gte: 1, lte: 40000 }
    ];

    // Write capacity units.
    int64 write_capacity_units = 2 [
      (buf.validate.field).int64 = { gte: 1, lte: 40000 }
    ];
  }

  // Projection settings for an index.
  message Projection {
    // How attributes are projected into the index.
    ProjectionType projection_type = 1 [
      (buf.validate.field).enum = {
        defined_only: true,
        not_in: [0] // PROJECTION_TYPE_UNSPECIFIED not allowed
      }
    ];

    // List of non-key attributes to include when projection_type == INCLUDE.
    repeated string non_key_attributes = 2 [
      (buf.validate.field).repeated = {
        max_items: 20,
        items: { string: { min_len: 1, max_len: 255 } }
      }
    ];

    enum ProjectionType {
      PROJECTION_TYPE_UNSPECIFIED = 0;
      ALL         = 1; // All attributes.
      KEYS_ONLY   = 2; // Only key attributes.
      INCLUDE     = 3; // Only specified attributes.
    }
  }

  // Definition of a local secondary index.
  message LocalSecondaryIndex {
    // Index name.
    string name = 1 [
      (buf.validate.field).string = {
        min_len: 3,
        max_len: 255,
        pattern: "^[A-Za-z0-9_.-]+$"
      }
    ];

    // Sort key attribute for the index.
    string range_key = 2 [
      (buf.validate.field).string = {
        min_len: 1,
        max_len: 255,
        pattern: "^[A-Za-z0-9_.-]+$"
      }
    ];

    // Projection details.
    Projection projection = 3 [
      (buf.validate.field).message = { required: true }
    ];
  }

  // Definition of a global secondary index.
  message GlobalSecondaryIndex {
    // Index name.
    string name = 1 [
      (buf.validate.field).string = {
        min_len: 3,
        max_len: 255,
        pattern: "^[A-Za-z0-9_.-]+$"
      }
    ];

    // Partition key attribute.
    string hash_key = 2 [
      (buf.validate.field).string = {
        min_len: 1,
        max_len: 255,
        pattern: "^[A-Za-z0-9_.-]+$"
      }
    ];

    // Optional sort key attribute.
    string range_key = 3 [
      (buf.validate.field).string = {
        ignore_empty: true,
        min_len: 1,
        max_len: 255,
        pattern: "^[A-Za-z0-9_.-]+$"
      }
    ];

    // Billing mode override (inherits from table when UNSPECIFIED).
    BillingMode billing_mode = 4 [
      (buf.validate.field).enum = { defined_only: true }
    ];

    // Throughput settings (only for PROVISIONED mode).
    ProvisionedThroughput provisioned_throughput = 5 [
      (buf.validate.field).message = {}
    ];

    // Projection details.
    Projection projection = 6 [
      (buf.validate.field).message = { required: true }
    ];
  }

  // Stream configuration for a table.
  message StreamSpecification {
    // Enable or disable streams.
    bool enabled = 1 [
      (buf.validate.field).bool = {}
    ];

    // Type of view written to the stream.
    StreamViewType view_type = 2 [
      (buf.validate.field).enum = { defined_only: true }
    ];

    enum StreamViewType {
      STREAM_VIEW_TYPE_UNSPECIFIED = 0;
      KEYS_ONLY               = 1;
      NEW_IMAGE               = 2;
      OLD_IMAGE               = 3;
      NEW_AND_OLD_IMAGES      = 4;
    }
  }

  // Time-to-live configuration.
  message TTLSpecification {
    // Enable or disable TTL.
    bool enabled = 1 [
      (buf.validate.field).bool = {}
    ];

    // Attribute that stores expiration time as Unix epoch seconds.
    string attribute_name = 2 [
      (buf.validate.field).string = {
        ignore_empty: true,
        min_len: 1,
        max_len: 255,
        pattern: "^[A-Za-z0-9_.-]+$"
      }
    ];
  }

  // Server-side encryption settings.
  message ServerSideEncryptionSpec {
    // Enable or disable SSE.
    bool enabled = 1 [
      (buf.validate.field).bool = {}
    ];

    // ARN of the KMS key to use (empty to use the AWS-managed key).
    string kms_key_arn = 2 [
      (buf.validate.field).string = {
        ignore_empty: true,
        pattern: "^arn:aws:kms:[a-z0-9-]+:[0-9]{12}:key/[A-Za-z0-9-]+$"
      }
    ];
  }

  // Replica region for a global table.
  message Replica {
    // AWS region for the replica (e.g. "eu-west-1").
    string region = 1 [
      (buf.validate.field).string = {
        min_len: 1,
        max_len: 32,
        pattern: "^[a-z]{2}-[a-z]+-[0-9]+$"
      }
    ];
  }
}