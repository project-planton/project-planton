syntax = "proto3";

package project.planton.provider.aws.awsdynamodb.v1;

import "buf/validate/validate.proto";

// AwsDynamodbSpec defines the specification required to deploy an AWS DynamoDB table.
// This message encapsulates all configurations necessary for setting up a DynamoDB table,
// including table name, billing mode, and key schema configuration.
// Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable
// performance with seamless scalability. It supports both document and key-value data models.
// With this specification, you can automate the creation and configuration of DynamoDB tables,
// ensuring that your database resources are correctly set up according to your requirements.
message AwsDynamodbSpec {
  // The name of the DynamoDB table.
  // Must be unique within the AWS account and region.
  // Table names are case-sensitive and must be between 3 and 255 characters long.
  string table_name = 1 [(buf.validate.field).string.min_len = 3, (buf.validate.field).string.max_len = 255];

  // The AWS region where the DynamoDB table will be created.
  // This must be a valid AWS region where DynamoDB is available.
  string aws_region = 2 [(buf.validate.field).string.min_len = 1];

  // The billing mode for the DynamoDB table.
  // PROVISIONED: Pay for provisioned read and write capacity units.
  // PAY_PER_REQUEST: Pay only for the requests you make.
  BillingMode billing_mode = 3 [(buf.validate.field).enum.defined_only = true];

  // The name of the partition key (hash key) for the table.
  // This is the primary key that uniquely identifies each item in the table.
  string partition_key_name = 4 [(buf.validate.field).string.min_len = 1];

  // The data type of the partition key.
  // STRING: String data type.
  // NUMBER: Numeric data type.
  // BINARY: Binary data type.
  AttributeType partition_key_type = 5 [(buf.validate.field).enum.defined_only = true];

  // The name of the sort key (range key) for the table, if applicable.
  // Optional secondary key that allows items with the same partition key to be sorted.
  string sort_key_name = 6;

  // The data type of the sort key, if applicable.
  // STRING: String data type.
  // NUMBER: Numeric data type.
  // BINARY: Binary data type.
  AttributeType sort_key_type = 7;

  // The number of read capacity units for provisioned billing mode.
  // Only required when billing_mode is PROVISIONED.
  int32 read_capacity_units = 8 [(buf.validate.field).int32.gte = 0];

  // The number of write capacity units for provisioned billing mode.
  // Only required when billing_mode is PROVISIONED.
  int32 write_capacity_units = 9 [(buf.validate.field).int32.gte = 0];

  // Flag to enable point-in-time recovery for the table.
  // When enabled, allows you to restore the table to any point in time within the last 35 days.
  bool point_in_time_recovery_enabled = 10;

  // Flag to enable server-side encryption for the table.
  // When enabled, all data in the table is encrypted at rest using AWS managed keys.
  bool server_side_encryption_enabled = 11;

  option (buf.validate.message).cel = {
    id: "billing_mode_capacity_validation",
    message: "read_capacity_units and write_capacity_units must be > 0 when billing_mode is PROVISIONED, and must be 0 when billing_mode is PAY_PER_REQUEST",
    expression: "this.billing_mode == 1 ? (this.read_capacity_units > 0 && this.write_capacity_units > 0) : (this.read_capacity_units == 0 && this.write_capacity_units == 0)"
  };

  option (buf.validate.message).cel = {
    id: "partition_key_required",
    message: "partition_key_type must not be UNSPECIFIED when partition_key_name is provided",
    expression: "this.partition_key_type != 0"
  };

  option (buf.validate.message).cel = {
    id: "sort_key_consistency",
    message: "sort_key_type must not be UNSPECIFIED when sort_key_name is provided, and sort_key_type must be UNSPECIFIED when sort_key_name is empty",
    expression: "(this.sort_key_name == \"\" && this.sort_key_type == 0) || (this.sort_key_name != \"\" && this.sort_key_type != 0)"
  };
}

// BillingMode defines the billing mode for a DynamoDB table.
enum BillingMode {
  // Unspecified billing mode.
  BILLING_MODE_UNSPECIFIED = 0;
  // Pay for provisioned read and write capacity units.
  BILLING_MODE_PROVISIONED = 1;
  // Pay only for the requests you make.
  BILLING_MODE_PAY_PER_REQUEST = 2;
}

// AttributeType defines the data type for DynamoDB table attributes.
enum AttributeType {
  // Unspecified attribute type.
  ATTRIBUTE_TYPE_UNSPECIFIED = 0;
  // String data type.
  ATTRIBUTE_TYPE_STRING = 1;
  // Numeric data type.
  ATTRIBUTE_TYPE_NUMBER = 2;
  // Binary data type.
  ATTRIBUTE_TYPE_BINARY = 3;
}
