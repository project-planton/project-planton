// Code generated by project-planton. DO NOT EDIT.
//
// This file contains helper functions that translate the protobuf enum
// values defined under
//   github.com/project-planton/project-planton/apis/project/planton/provider/aws/awsdynamodb/v1
// into the exact string literals expected by the AWS SDK / Cloud Control
// API when creating or updating DynamoDB resources via Pulumi.
//
// Keeping all enum-to-string conversions in a single place makes it harder
// to introduce subtle drift between proto definitions and AWS constants
// and provides a natural choke-point for validation.

package awsdynamodb

import (
    "fmt"

    awsdynamodbpb "github.com/project-planton/project-planton/apis/project/planton/provider/aws/awsdynamodb/v1"
)

// AttributeTypeToAWS converts an AttributeType enum into the single-character
// DynamoDB scalar type understood by the AWS API ("S", "N", or "B").
func AttributeTypeToAWS(t awsdynamodbpb.AttributeType) (string, error) {
    switch t {
    case awsdynamodbpb.AttributeType_STRING:
        return "S", nil
    case awsdynamodbpb.AttributeType_NUMBER:
        return "N", nil
    case awsdynamodbpb.AttributeType_BINARY:
        return "B", nil
    case awsdynamodbpb.AttributeType_ATTRIBUTE_TYPE_UNSPECIFIED:
        fallthrough
    default:
        return "", fmt.Errorf("unsupported AttributeType %v", t)
    }
}

// KeyTypeToAWS maps the KeyType enum to its AWS literal ("HASH" / "RANGE").
func KeyTypeToAWS(t awsdynamodbpb.KeyType) (string, error) {
    switch t {
    case awsdynamodbpb.KeyType_HASH:
        return "HASH", nil
    case awsdynamodbpb.KeyType_RANGE:
        return "RANGE", nil
    case awsdynamodbpb.KeyType_KEY_TYPE_UNSPECIFIED:
        fallthrough
    default:
        return "", fmt.Errorf("unsupported KeyType %v", t)
    }
}

// BillingModeToAWS converts the BillingMode enum into the AWS literal
// ("PROVISIONED" / "PAY_PER_REQUEST").
func BillingModeToAWS(m awsdynamodbpb.BillingMode) (string, error) {
    switch m {
    case awsdynamodbpb.BillingMode_PROVISIONED:
        return "PROVISIONED", nil
    case awsdynamodbpb.BillingMode_PAY_PER_REQUEST:
        return "PAY_PER_REQUEST", nil
    case awsdynamodbpb.BillingMode_BILLING_MODE_UNSPECIFIED:
        fallthrough
    default:
        return "", fmt.Errorf("unsupported BillingMode %v", m)
    }
}

// ProjectionTypeToAWS maps ProjectionType enums to their AWS literals
// ("ALL", "KEYS_ONLY", "INCLUDE").
func ProjectionTypeToAWS(p awsdynamodbpb.ProjectionType) (string, error) {
    switch p {
    case awsdynamodbpb.ProjectionType_ALL:
        return "ALL", nil
    case awsdynamodbpb.ProjectionType_KEYS_ONLY:
        return "KEYS_ONLY", nil
    case awsdynamodbpb.ProjectionType_INCLUDE:
        return "INCLUDE", nil
    case awsdynamodbpb.ProjectionType_PROJECTION_TYPE_UNSPECIFIED:
        fallthrough
    default:
        return "", fmt.Errorf("unsupported ProjectionType %v", p)
    }
}

// StreamViewTypeToAWS converts StreamViewType enums into the AWS literal.
// The proto renames the AWS value "KEYS_ONLY" to "STREAM_KEYS_ONLY" to keep
// non-conflicting enum names, so we translate it back here.
func StreamViewTypeToAWS(v awsdynamodbpb.StreamViewType) (string, error) {
    switch v {
    case awsdynamodbpb.StreamViewType_NEW_IMAGE:
        return "NEW_IMAGE", nil
    case awsdynamodbpb.StreamViewType_OLD_IMAGE:
        return "OLD_IMAGE", nil
    case awsdynamodbpb.StreamViewType_NEW_AND_OLD_IMAGES:
        return "NEW_AND_OLD_IMAGES", nil
    case awsdynamodbpb.StreamViewType_STREAM_KEYS_ONLY:
        return "KEYS_ONLY", nil
    case awsdynamodbpb.StreamViewType_STREAM_VIEW_TYPE_UNSPECIFIED:
        fallthrough
    default:
        return "", fmt.Errorf("unsupported StreamViewType %v", v)
    }
}

// SSETypeToAWS converts the SSEType enum into the AWS literal ("AES256" / "KMS").
func SSETypeToAWS(t awsdynamodbpb.SSEType) (string, error) {
    switch t {
    case awsdynamodbpb.SSEType_AES256:
        return "AES256", nil
    case awsdynamodbpb.SSEType_KMS:
        return "KMS", nil
    case awsdynamodbpb.SSEType_SSE_TYPE_UNSPECIFIED:
        fallthrough
    default:
        return "", fmt.Errorf("unsupported SSEType %v", t)
    }
}

// -----------------------------------------------------------------------------
// Helper utilities
// -----------------------------------------------------------------------------

// Ptr returns a pointer to v.  Helpful when populating optional fields of AWS
// SDK structs.  It is defined here to keep all tiny helpers close to the enum
// translators that use them, while avoiding a dependency on generics helpers
// in other packages.
func Ptr[T any](v T) *T { return &v }
