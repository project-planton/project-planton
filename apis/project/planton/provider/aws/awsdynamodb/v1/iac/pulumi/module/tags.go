// Code generated by Project Planton. DO NOT EDIT.
//
// tags.go contains helper utilities that take a user-supplied set of tags
// and merge them with the mandatory system tags that Project Planton always
// attaches to every AWS resource it manages.  The helpers return the final
// tag map in Pulumi’s native `pulumi.StringMap` form so it can be passed to
// the `Tags` (or `tags`) argument that most Pulumi AWS resources expose.
//
// Behavioural rules
//   • System tags always win – if a user provides a tag with the same key as
//     a system tag, the system tag’s value overwrites the user value.
//   • Empty keys or values are ignored because AWS rejects them and they
//     would cause perpetual diffs between preview and apply.
//
// Typical usage in stack code:
//
//     table, err := dynamodb.NewTable(ctx, name, &dynamodb.TableArgs{
//         Name: pulumi.String(name),
//         Tags: awsdynamodb.MergeTags(ctx, map[string]string{
//             "environment": "production",
//             "team":        "payments",
//         }),
//     })
//     if err != nil { ... }
//
// The helper keeps stack code short, guarantees consistency, and ensures
// compliance with the tagging guidelines baked into the platform.
package awsdynamodb

import (
    "github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// MergeTags returns a pulumi.StringMap that contains the caller-supplied tags
// plus a predefined set of system tags.  User tags may be nil.  Any duplicate
// keys will be overwritten by the system value to guarantee that mandatory
// tags are present and immutable.
func MergeTags(ctx *pulumi.Context, userTags map[string]string) pulumi.StringMap {
    merged := pulumi.StringMap{}

    // 1. Copy user tags first so that system tags can overwrite them if needed.
    for k, v := range userTags {
        if k == "" || v == "" {
            // Skip invalid entries – AWS does not allow empty tag keys/values.
            continue
        }
        merged[k] = pulumi.String(v)
    }

    // 2. Inject mandatory system tags.
    for k, v := range systemTags(ctx) {
        merged[k] = pulumi.String(v)
    }

    return merged
}

// systemTags builds the set of tags that Project Planton enforces on every
// resource.  Keeping them in a separate function makes it easier to extend or
// unit-test.
func systemTags(ctx *pulumi.Context) map[string]string {
    return map[string]string{
        // Technical identifiers – help with programmatic discovery.
        "pulumi:project": ctx.Project(),
        "pulumi:stack":   ctx.Stack(),

        // High-level ownership – useful for cost allocation reports.
        "managed-by": "pulumi",

        // Feel free to add new keys here (e.g., platform version, Git commit).
    }
}
