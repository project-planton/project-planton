// Code generated by project-planton â€“ DO NOT EDIT.
//
// Helpers for translating the SSE (server-side encryption) part of the
// AwsDynamodbSpec protobuf into Pulumi-compatible input arguments.
//
// The DynamoDB table resource in the Pulumi AWS provider models SSE through the
// `ServerSideEncryption` (TableServerSideEncryption) block which only needs the
// `enabled` flag and, when a customer managed key is requested, the CMK ARN. The
// protobuf specification is more explicit (it lets the user choose between the
// AWS-owned key and a customer managed KMS key), so we need a small adapter that
// hides those differences from the rest of the Pulumi program.
//
// The public helper exposed here returns two values:
//   1. The Pulumi input that can be assigned to TableArgs.ServerSideEncryption.
//      It is nil when encryption is disabled so the caller can pass it directly
//      without any additional checks.
//   2. The ARN of the CMK when KMS encryption is selected.  This allows the
//      calling code to expose the ARN as a stack output while staying agnostic
//      of the concrete SSE type requested by the user.
//
// All validation of the incoming protobuf message is already performed by the
// Planton control-plane through buf-validate CEL rules, therefore this function
// can assume a well-formed specification.
package awsdynamodb

import (
    awsdynamodbpb "github.com/project-planton/project-planton/apis/project/planton/provider/aws/awsdynamodb/v1"

    "github.com/pulumi/pulumi-aws/sdk/v5/go/aws/dynamodb"
    "github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// toServerSideEncryption converts the protobuf representation of server-side
// encryption into the Pulumi input expected by aws.dynamodb.Table.
//
// If encryption is disabled the first return value is nil and the second one is
// an empty string.  When the specification requests a customer managed CMK, the
// ARN is propagated through the second return value so the caller can surface
// it via stack outputs.
func toServerSideEncryption(_ *pulumi.Context, spec *awsdynamodbpb.SSESpecification) (dynamodb.TableServerSideEncryptionPtrInput, string) {
    // Nothing to do when the specification is absent or encryption is disabled.
    if spec == nil || !spec.Enabled {
        return nil, ""
    }

    sseArgs := &dynamodb.TableServerSideEncryptionArgs{
        Enabled: pulumi.Bool(true),
    }

    var kmsArn string
    if spec.GetSseType() == awsdynamodbpb.SSEType_KMS {
        // buf-validate ensures the ARN is non-empty in this scenario.
        sseArgs.KmsKeyArn = pulumi.String(spec.GetKmsMasterKeyId())
        kmsArn = spec.GetKmsMasterKeyId()
    }

    return sseArgs, kmsArn
}
