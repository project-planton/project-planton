// Code generated by project-planton scaffolding; DO NOT EDIT.
//
// locals.go centralises values that are shared across all resources in the
// stack (region, naming conventions, common tags …).  Putting them in a single
// place dramatically reduces the amount of boiler-plate in the individual
// component constructors and keeps the stack code DRY.
package main

import (
    "fmt"

    aws "github.com/pulumi/pulumi-aws/sdk/v5/go/aws"
    "github.com/pulumi/pulumi/sdk/v3/go/pulumi"
    "github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
)

// Locals groups every non-resource value that should be available to the stack
// during the deployment.
//
// Typical usage in a component implementation:
//
//   locals, err := NewLocals(ctx)
//   if err != nil { return err }
//
//   tableName := locals.Prefixed("events")
//   tags      := locals.MergeTags(pulumi.StringMap{"Component": pulumi.String("ddb")})
//
//   … create resources using tableName and tags …
//
// Locals intentionally carries Pulumi *Output* values (e.g. Region).  This
// makes sure that any downstream resource depending on them is correctly
// registered in the Pulumi dependency graph.
type Locals struct {
    // Pulumi project name (e.g. "infrastructure").  This is always known at
    // planning time, therefore a plain string is sufficient.
    Project string
    // Pulumi stack name (e.g. "dev", "prod").
    Stack string

    // AWS region where the stack is deployed.  This is read from the resolved
    // AWS provider (and can differ from the region configured in the profile
    // used to run Pulumi).
    Region pulumi.StringOutput

    // Common prefix prepended to every physical resource name.  The prefix can
    // be configured via Pulumi configuration under the key "namePrefix".  If
    // the key is not present, the default is "<project>-<stack>-".
    NamePrefix string

    // Default tags applied to every AWS resource created by the stack.  The
    // tags can be provided via Pulumi configuration with the key "tags" and
    // must be a map[string]string.  Additional tags can be merged at call
    // sites with the MergeTags helper.
    Tags pulumi.StringMap
}

const (
    // cfgKeyNamePrefix is the Pulumi configuration key used to override the
    // default naming prefix.
    cfgKeyNamePrefix = "namePrefix"
    // cfgKeyTags is the Pulumi configuration key under which a map[string]string
    // of default tags can be supplied.
    cfgKeyTags = "tags"
)

// NewLocals reads the current Pulumi configuration and initialises a Locals
// instance.  It should be called once per stack and the resulting object shared
// with every component that requires it.
func NewLocals(ctx *pulumi.Context) (*Locals, error) {
    // ---------------------------------------------------------------------
    // Pulumi-wide identifiers (always known at plan time).
    // ---------------------------------------------------------------------
    project := ctx.Project()
    stack := ctx.Stack()

    // ---------------------------------------------------------------------
    // Resolve AWS region from the provider so that it works regardless of the
    // auth method in use (profile, environment variables, AssumeRole, …).
    // ---------------------------------------------------------------------
    region := aws.GetRegionOutput(ctx, nil).Name()

    // ---------------------------------------------------------------------
    // Read optional configuration values
    // ---------------------------------------------------------------------
    cfg := config.New(ctx, "") // empty namespace = current project

    // ----- naming prefix --------------------------------------------------
    prefix := cfg.Get(cfgKeyNamePrefix)
    if prefix == "" {
        prefix = fmt.Sprintf("%s-%s-", project, stack)
    }

    // ----- default tags ---------------------------------------------------
    var rawTags map[string]string
    if err := cfg.TryObject(cfgKeyTags, &rawTags); err != nil {
        return nil, fmt.Errorf("parsing %q config: %w", cfgKeyTags, err)
    }

    tags := pulumi.StringMap{}
    for k, v := range rawTags {
        tags[k] = pulumi.String(v)
    }

    // Pulumi-specific tags (can be overridden by user-defined ones above).
    // They are useful for traceability in the AWS console.
    defaultPulumiTags := pulumi.StringMap{
        "pulumi:project": pulumi.String(project),
        "pulumi:stack":   pulumi.String(stack),
    }

    for k, v := range defaultPulumiTags {
        if _, exists := tags[k]; !exists {
            tags[k] = v
        }
    }

    return &Locals{
        Project:    project,
        Stack:      stack,
        Region:     region,
        NamePrefix: prefix,
        Tags:       tags,
    }, nil
}

// Prefixed returns a physical name prefixed with Locals.NamePrefix.  This is a
// convenience helper that ensures a consistent naming scheme across all
// resources.
func (l *Locals) Prefixed(name string) string {
    return fmt.Sprintf("%s%s", l.NamePrefix, name)
}

// MergeTags combines the default stack-wide tags with the provided map.  Keys
// present in both maps are overwritten by the value from extra.
func (l *Locals) MergeTags(extra pulumi.StringMap) pulumi.StringMap {
    merged := pulumi.StringMap{}

    // copy default tags first
    for k, v := range l.Tags {
        merged[k] = v
    }

    // apply/overwrite with extra
    for k, v := range extra {
        merged[k] = v
    }

    return merged
}
