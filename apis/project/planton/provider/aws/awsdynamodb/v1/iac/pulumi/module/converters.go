// Code generated by project-planton IaC scaffolder. DO NOT EDIT.
//
// This file provides helper functions that translate the protobuf-based
// AwsDynamodb specification into the input types expected by the Pulumi AWS
// provider.  Only enum / struct conversions that are widely reused across the
// stack implementation live here, keeping the higher-level resource creation
// code clean and focused on orchestration.

package module

import (
    "github.com/pkg/errors"

    "github.com/pulumi/pulumi-aws/sdk/v5/go/aws/dynamodb"
    "github.com/pulumi/pulumi/sdk/v3/go/pulumi"

    awsdynamodbpb "github.com/project-planton/project-planton/apis/project/planton/provider/aws/awsdynamodb/v1"
)

// convertAttributeType maps the proto AttributeType enum to the one-letter
// string identifiers expected by AWS (and therefore Pulumi):
//   STRING -> "S", NUMBER -> "N", BINARY -> "B".
func convertAttributeType(t awsdynamodbpb.AttributeType) (string, error) {
    switch t {
    case awsdynamodbpb.AttributeType_STRING:
        return "S", nil
    case awsdynamodbpb.AttributeType_NUMBER:
        return "N", nil
    case awsdynamodbpb.AttributeType_BINARY:
        return "B", nil
    default:
        return "", errors.Errorf("unsupported AttributeType %v", t)
    }
}

// convertBillingMode converts the proto BillingMode into the exact strings
// accepted by Pulumi (“PROVISIONED”|“PAY_PER_REQUEST”).
func convertBillingMode(m awsdynamodbpb.BillingMode) (string, error) {
    switch m {
    case awsdynamodbpb.BillingMode_PROVISIONED:
        return "PROVISIONED", nil
    case awsdynamodbpb.BillingMode_PAY_PER_REQUEST:
        return "PAY_PER_REQUEST", nil
    default:
        return "", errors.Errorf("unsupported BillingMode %v", m)
    }
}

// convertStreamViewType translates StreamViewType to the AWS strings.
func convertStreamViewType(v awsdynamodbpb.StreamViewType) (string, error) {
    switch v {
    case awsdynamodbpb.StreamViewType_NEW_IMAGE:
        return "NEW_IMAGE", nil
    case awsdynamodbpb.StreamViewType_OLD_IMAGE:
        return "OLD_IMAGE", nil
    case awsdynamodbpb.StreamViewType_NEW_AND_OLD_IMAGES:
        return "NEW_AND_OLD_IMAGES", nil
    case awsdynamodbpb.StreamViewType_STREAM_KEYS_ONLY:
        // AWS names this value "KEYS_ONLY".
        return "KEYS_ONLY", nil
    default:
        return "", errors.Errorf("unsupported StreamViewType %v", v)
    }
}

// convertProjectionType converts ProjectionType to its string form.
func convertProjectionType(p awsdynamodbpb.ProjectionType) (string, error) {
    switch p {
    case awsdynamodbpb.ProjectionType_ALL:
        return "ALL", nil
    case awsdynamodbpb.ProjectionType_KEYS_ONLY:
        return "KEYS_ONLY", nil
    case awsdynamodbpb.ProjectionType_INCLUDE:
        return "INCLUDE", nil
    default:
        return "", errors.Errorf("unsupported ProjectionType %v", p)
    }
}

// convertSSEType converts the proto SSEType to the AWS string.
func convertSSEType(t awsdynamodbpb.SSEType) (string, error) {
    switch t {
    case awsdynamodbpb.SSEType_AES256:
        return "AES256", nil
    case awsdynamodbpb.SSEType_KMS:
        return "KMS", nil
    default:
        return "", errors.Errorf("unsupported SSEType %v", t)
    }
}

// toPulumiAttributes converts the proto AttributeDefinition list to Pulumi
// TableAttribute inputs.
func toPulumiAttributes(attrs []*awsdynamodbpb.AttributeDefinition) ([]dynamodb.TableAttribute, error) {
    var result []dynamodb.TableAttribute
    for _, a := range attrs {
        if a == nil {
            continue
        }
        t, err := convertAttributeType(a.GetAttributeType())
        if err != nil {
            return nil, errors.Wrap(err, "attribute_definition")
        }
        result = append(result, dynamodb.TableAttribute{
            Name: pulumi.String(a.GetAttributeName()),
            Type: pulumi.String(t),
        })
    }
    return result, nil
}

// toPulumiGlobalSecondaryIndexes converts a list of proto GSIs into Pulumi
// TableGlobalSecondaryIndexArgs.
func toPulumiGlobalSecondaryIndexes(gs []*awsdynamodbpb.GlobalSecondaryIndex) ([]dynamodb.TableGlobalSecondaryIndexArgs, error) {
    var out []dynamodb.TableGlobalSecondaryIndexArgs

    for _, g := range gs {
        if g == nil {
            continue
        }

        var hashKey string
        var rangeKey *string
        for _, ks := range g.GetKeySchema() {
            switch ks.GetKeyType() {
            case awsdynamodbpb.KeyType_HASH:
                hashKey = ks.GetAttributeName()
            case awsdynamodbpb.KeyType_RANGE:
                rk := ks.GetAttributeName()
                rangeKey = &rk
            }
        }

        if hashKey == "" {
            return nil, errors.Errorf("GSI %q missing HASH key", g.GetIndexName())
        }

        projType, err := convertProjectionType(g.GetProjection().GetProjectionType())
        if err != nil {
            return nil, errors.Wrapf(err, "gsi %q projection_type", g.GetIndexName())
        }

        gsi := dynamodb.TableGlobalSecondaryIndexArgs{
            Name:            pulumi.String(g.GetIndexName()),
            HashKey:         pulumi.String(hashKey),
            ProjectionType:  pulumi.StringPtr(projType),
            NonKeyAttributes: pulumi.ToStringArray(g.GetProjection().GetNonKeyAttributes()),
        }

        if rangeKey != nil {
            gsi.RangeKey = pulumi.StringPtr(*rangeKey)
        }

        // Capacity settings only present when table billing mode is PROVISIONED.
        if pt := g.GetProvisionedThroughput(); pt != nil {
            gsi.ReadCapacity = pulumi.IntPtr(int(pt.GetReadCapacityUnits()))
            gsi.WriteCapacity = pulumi.IntPtr(int(pt.GetWriteCapacityUnits()))
        }

        out = append(out, gsi)
    }

    return out, nil
}

// toPulumiLocalSecondaryIndexes converts proto LSIs into Pulumi args.
func toPulumiLocalSecondaryIndexes(ls []*awsdynamodbpb.LocalSecondaryIndex) ([]dynamodb.TableLocalSecondaryIndexArgs, error) {
    var out []dynamodb.TableLocalSecondaryIndexArgs

    for _, l := range ls {
        if l == nil {
            continue
        }

        var rangeKey string
        for _, ks := range l.GetKeySchema() {
            if ks.GetKeyType() == awsdynamodbpb.KeyType_RANGE {
                rangeKey = ks.GetAttributeName()
                break
            }
        }
        if rangeKey == "" {
            return nil, errors.Errorf("LSI %q missing RANGE key", l.GetIndexName())
        }

        projType, err := convertProjectionType(l.GetProjection().GetProjectionType())
        if err != nil {
            return nil, errors.Wrapf(err, "lsi %q projection_type", l.GetIndexName())
        }

        lsi := dynamodb.TableLocalSecondaryIndexArgs{
            Name:            pulumi.String(l.GetIndexName()),
            RangeKey:        pulumi.String(rangeKey),
            ProjectionType:  pulumi.StringPtr(projType),
            NonKeyAttributes: pulumi.ToStringArray(l.GetProjection().GetNonKeyAttributes()),
        }
        out = append(out, lsi)
    }

    return out, nil
}

// toPulumiSseSpecification transforms the proto SSESpecification into Pulumi
// args. A nil spec or a disabled configuration returns nil.
func toPulumiSseSpecification(spec *awsdynamodbpb.SSESpecification) (*dynamodb.TableSseSpecificationArgs, error) {
    if spec == nil || !spec.GetEnabled() {
        return nil, nil
    }

    sseType, err := convertSSEType(spec.GetSseType())
    if err != nil {
        return nil, errors.Wrap(err, "sse_specification")
    }

    args := &dynamodb.TableSseSpecificationArgs{
        Enabled: pulumi.BoolPtr(true),
        SseType: pulumi.StringPtr(sseType),
    }

    if spec.GetSseType() == awsdynamodbpb.SSEType_KMS {
        args.KmsMasterKeyId = pulumi.StringPtr(spec.GetKmsMasterKeyId())
    }

    return args, nil
}

// toPulumiTtl converts the proto TTL spec to Pulumi args.  Returns nil when TTL
// is disabled or spec is nil.
func toPulumiTtl(ttl *awsdynamodbpb.TimeToLiveSpecification) *dynamodb.TableTtlArgs {
    if ttl == nil || !ttl.GetTtlEnabled() {
        return nil
    }
    return &dynamodb.TableTtlArgs{
        Enabled:       pulumi.Bool(true),
        AttributeName: pulumi.String(ttl.GetAttributeName()),
    }
}

// toPulumiStreamSpecification converts the proto StreamSpecification into
// Pulumi args. Returns nil when streams are disabled or spec is nil.
func toPulumiStreamSpecification(s *awsdynamodbpb.StreamSpecification) (*dynamodb.TableStreamSpecificationArgs, error) {
    if s == nil || !s.GetStreamEnabled() {
        return nil, nil
    }

    viewType, err := convertStreamViewType(s.GetStreamViewType())
    if err != nil {
        return nil, errors.Wrap(err, "stream_specification")
    }

    return &dynamodb.TableStreamSpecificationArgs{
        StreamEnabled:  pulumi.BoolPtr(true),
        StreamViewType: pulumi.StringPtr(viewType),
    }, nil
}
