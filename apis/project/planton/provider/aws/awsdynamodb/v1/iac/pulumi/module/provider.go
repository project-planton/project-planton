// Code generated by project-planton scaffolding tool; DO NOT EDIT.
//
// provider.go defines a thin helper that materialises an AWS provider from an
// AwsCredentialSpec and registers it in the Pulumi graph. Having a dedicated
// helper keeps the stacks that consume the provider succinct and makes it easy
// to share a single, consistently-configured provider between multiple
// resources.

package provider

import (
    "github.com/pulumi/pulumi-aws/sdk/v5/go/aws"
    "github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AwsCredentialSpec captures the minimal set of fields required to authenticate
// against AWS.  The struct intentionally mirrors the shape used by the Pulumi
// AWS provider so that adding / removing fields is trivial.
//
// NOTE: The real project most likely has this message generated from a protobuf
// definition that lives in a different module.  The local re-declaration keeps
// this file self-contained and eliminates the need for consumers to import
// additional packages when they only want to stand-up the provider.  Replace it
// with the generated counterpart as soon as it becomes available.
//
// All fields are optional; unset values fall back to the standard AWS
// resolution chain (environment variables, shared credentials file, IAM role
// attached to the execution environment, …).
//
// See https://www.pulumi.com/registry/packages/aws/api-docs/#authentication for
// the full set of supported authentication mechanisms.
//
//nolint:revive // field names follow AWS nomenclature intentionally.
type AwsCredentialSpec struct {
    Region          string // e.g. "us-east-1"
    Profile         string // Name of a profile in ~/.aws/credentials
    AccessKeyID     string // AWS_ACCESS_KEY_ID
    SecretAccessKey string // AWS_SECRET_ACCESS_KEY
    SessionToken    string // AWS_SESSION_TOKEN (for STS / IAM roles)
}

// New instantiates an aws.Provider from the supplied credentials and returns a
// handle that can be used as a pulumi.ProviderResourceOption in subsequent
// resource declarations.
//
// A typical usage pattern inside a Pulumi program is:
//
//   provider, err := provider.New(ctx, "aws-provider", creds)
//   if err != nil { ... }
//
//   // All resources created with `pulumi.Provider(provider)` will use the
//   // explicitly-configured credentials instead of the ambient ones.
//   _, err = dynamodb.NewTable(ctx, "my-table", &dynamodb.TableArgs{ … }, pulumi.Provider(provider))
//
func New(ctx *pulumi.Context, name string, creds AwsCredentialSpec) (*aws.Provider, error) {
    args := &aws.ProviderArgs{}

    // Populate args only when a value has been provided; leaving the field nil
    // tells the provider to rely on its default discovery behaviour for that
    // attribute.  This prevents accidentally overriding an otherwise valid
    // ambient configuration with an empty string.
    if creds.Region != "" {
        args.Region = pulumi.StringPtr(creds.Region)
    }
    if creds.Profile != "" {
        args.Profile = pulumi.StringPtr(creds.Profile)
    }
    if creds.AccessKeyID != "" {
        args.AccessKey = pulumi.StringPtr(creds.AccessKeyID)
    }
    if creds.SecretAccessKey != "" {
        args.SecretKey = pulumi.StringPtr(creds.SecretAccessKey)
    }
    if creds.SessionToken != "" {
        args.Token = pulumi.StringPtr(creds.SessionToken)
    }

    provider, err := aws.NewProvider(ctx, name, args)
    if err != nil {
        return nil, err
    }

    return provider, nil
}
