// Code generated by project-planton scaffolding. DO NOT EDIT.
//
// provider.go
//
// Purpose: Materialises a Pulumi AWS provider instance from an AwsCredentialSpec and
// exposes helper utilities so that the same provider can be propagated to every
// downstream resource – ensuring they are all created in the same AWS account
// and region irrespective of whatever credentials might exist in the ambient
// environment.
//
// The minified credential struct declared here purposely contains only the
// fields that are relevant for initialising the Pulumi AWS provider.  Any other
// provider-specific options can be added later without touching the rest of the
// deployment code.
package main

import (
    "fmt"

    aws "github.com/pulumi/pulumi-aws/sdk/v5/go/aws"
    "github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AwsCredentialSpec captures the minimal credential knobs we need in order to
// initialise a Pulumi AWS provider.  The schema matches (a subset of) the
// pulumi-aws ProviderArgs fields so that the struct can be passed almost 1:1
// when constructing the provider.
//
// NOTE: In real setups this spec would usually be generated from a protobuf
// definition that lives next to the rest of the Project-Planton API.  A local
// copy is inlined here so that this file compiles in isolation inside the Go
// module produced by the code-gen pipeline.
//
// All fields are optional except Region.  When neither a profile nor an access
// key pair is supplied the provider will fall back to the usual AWS SDK chain
// (env vars, shared credentials file, IAM role, …).
//
// Field tags use both `json` and `pulumi` so that the same struct can be
// surfaced to language SDKs that rely on either tag when marshalling user
// inputs.
type AwsCredentialSpec struct {
    // Region in which resources should be created – e.g. "us-east-1".
    Region string `json:"region" pulumi:"region"`

    // Long-lived profile name from ~/.aws/credentials.
    Profile string `json:"profile,omitempty" pulumi:"profile"`

    // Short-lived or static credential pair.  SecretAccessKey must accompany
    // AccessKeyID when one of them is non-empty.
    AccessKeyID     string `json:"accessKeyId,omitempty" pulumi:"accessKeyId"`
    SecretAccessKey string `json:"secretAccessKey,omitempty" pulumi:"secretAccessKey"`
    SessionToken    string `json:"sessionToken,omitempty" pulumi:"sessionToken"`

    // Optional role to assume.  When specified the provider will perform a
    // sts:AssumeRole call with the default credentials and then use the
    // resulting temporary credentials for all future requests.
    AssumeRoleArn string `json:"assumeRoleArn,omitempty" pulumi:"assumeRoleArn"`
}

// Validate performs a minimal sanity check on the spec before it is consumed by
// NewAwsProvider.  Only the structural requirements are checked here; the AWS
// SDK will do the heavy-lifting of validating whether the credentials are
// actually valid when it first tries to talk to the control-plane.
func (spec *AwsCredentialSpec) Validate() error {
    if spec == nil {
        return fmt.Errorf("aws credential spec cannot be nil")
    }
    if spec.Region == "" {
        return fmt.Errorf("credential spec: region must be provided")
    }

    // When either the access key ID or secret is provided, ensure the other one
    // is present as well.  (SessionToken is optional and only required for
    // temporary credentials.)
    if (spec.AccessKeyID == "") != (spec.SecretAccessKey == "") {
        return fmt.Errorf("credential spec: accessKeyId and secretAccessKey must be provided together or left empty together")
    }

    return nil
}

// NewAwsProvider materialises a pulumi-aws Provider using the information found
// in spec.  The returned provider can then be propagated to all resources via
// pulumi.Provider(...).  Passing the same provider instance throughout the
// stack makes the program deterministic and avoids accidentally mixing up
// credentials from the ambient environment.
//
// An optional list of ResourceOptions can be supplied (e.g. pulumi.Parent) to
// influence how Pulumi treats the provider itself.
func NewAwsProvider(ctx *pulumi.Context, name string, spec *AwsCredentialSpec, opts ...pulumi.ResourceOption) (*aws.Provider, error) {
    // Validate incoming spec early so users get instant feedback.
    if err := spec.Validate(); err != nil {
        return nil, err
    }

    // Populate provider arguments based on the spec.
    args := &aws.ProviderArgs{
        Region: pulumi.String(spec.Region),
    }

    // Only set optional arguments when the user explicitly supplied them.  This
    // way we let the AWS SDK fall back to its default search path when nothing
    // is configured.
    if spec.Profile != "" {
        args.Profile = pulumi.String(spec.Profile)
    }
    if spec.AccessKeyID != "" {
        args.AccessKey = pulumi.String(spec.AccessKeyID)
        args.SecretKey = pulumi.String(spec.SecretAccessKey)
    }
    if spec.SessionToken != "" {
        args.Token = pulumi.String(spec.SessionToken)
    }
    if spec.AssumeRoleArn != "" {
        args.AssumeRole = aws.ProviderAssumeRoleArgs{
            RoleArn: pulumi.String(spec.AssumeRoleArn),
        }
    }

    return aws.NewProvider(ctx, name, args, opts...)
}

// ProviderOptions is a convenience helper that converts a provider instance
// into a slice of ResourceOptions containing pulumi.Provider(provider).  It is
// handy when you need to append the provider to an existing options slice.
func ProviderOptions(provider *aws.Provider) []pulumi.ResourceOption {
    if provider == nil {
        return nil
    }
    return []pulumi.ResourceOption{pulumi.Provider(provider)}
}
