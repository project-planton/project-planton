// Code generated by project-planton scaffolder. DO NOT EDIT.

package module

import (
    "github.com/pkg/errors"
    awsprovider "github.com/pulumi/pulumi-aws/sdk/v5/go/aws"
    "github.com/pulumi/pulumi/sdk/v3/go/pulumi"

    awscredspb "github.com/project-planton/project-planton/apis/project/planton/credential/awscredential/v1"
)

// ConfigureAwsProvider instantiates a Pulumi AWS provider based on the supplied
// AwsCredentialSpec. The optional region argument takes precedence over any
// region that might be embedded inside the credential spec. The returned
// provider should be passed to all downstream resource constructors via
// pulumi.Provider(opts).
func ConfigureAwsProvider(ctx *pulumi.Context, creds *awscredspb.AwsCredentialSpec, region string) (*awsprovider.Provider, error) {
    if creds == nil {
        return nil, errors.New("aws credentials are required but nil was provided")
    }

    // Build provider arguments dynamically so that we only set the values that
    // are actually present in the credentials. This avoids overriding Pulumi / AWS
    // environmental detection logic when a value is intentionally omitted.
    args := &awsprovider.ProviderArgs{}

    // Access/secret keys.
    if v := creds.GetAccessKeyId(); v != "" {
        args.AccessKey = pulumi.StringPtr(v)
    }
    if v := creds.GetSecretAccessKey(); v != "" {
        args.SecretKey = pulumi.StringPtr(v)
    }
    if v := creds.GetSessionToken(); v != "" {
        args.Token = pulumi.StringPtr(v)
    }

    // Region – explicit parameter takes precedence, then fall back to the
    // credential spec, finally to the default AWS resolution chain.
    if region == "" {
        region = creds.GetRegion()
    }
    if region != "" {
        args.Region = pulumi.StringPtr(region)
    }

    // Named profile (optional).
    if v := creds.GetProfile(); v != "" {
        args.Profile = pulumi.StringPtr(v)
    }

    // Assume-role support, if provided in the spec.
    if ar := creds.GetAssumeRole(); ar != nil {
        // Only set AssumeRole when a RoleArn is present – it is the only field
        // required by the AWS provider and therefore a good indicator of intent.
        if roleArn := ar.GetRoleArn(); roleArn != "" {
            assumeArgs := &awsprovider.ProviderAssumeRoleArgs{
                RoleArn: pulumi.String(roleArn),
            }
            if v := ar.GetExternalId(); v != "" {
                assumeArgs.ExternalId = pulumi.StringPtr(v)
            }
            if v := ar.GetSessionName(); v != "" {
                assumeArgs.SessionName = pulumi.StringPtr(v)
            }
            args.AssumeRole = assumeArgs
        }
    }

    provider, err := awsprovider.NewProvider(ctx, "aws", args)
    if err != nil {
        return nil, errors.Wrap(err, "creating AWS provider")
    }

    return provider, nil
}
