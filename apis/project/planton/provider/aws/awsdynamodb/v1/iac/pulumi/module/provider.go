// Code generated by project-planton scaffolder. DO NOT EDIT.
//
// This file contains helper logic for building a scoped Pulumi AWS provider
// instance from the credential specification passed in the stack-input. A
// dedicated provider (as opposed to relying on the default environment
// provider) guarantees that all downstream resources use the exact set of
// credentials and configuration defined by the caller and that multiple AWS
// credentials can safely coexist inside the same Pulumi program.

package module

import (
    "github.com/pkg/errors"
    "github.com/pulumi/pulumi-aws/sdk/v5/go/aws"
    "github.com/pulumi/pulumi/sdk/v3/go/pulumi"

    awscredsv1 "github.com/project-planton/project-planton/apis/project/planton/credential/awscredential/v1"
)

// buildAWSProvider creates an aws.Provider using the values coming from the
// AwsCredentialSpec message. The returned provider must be passed to every
// downstream AWS resource via pulumi.Provider(awsProvider).
//
// The function applies the following mapping rules:
//   * spec.region           -> aws.ProviderArgs.Region
//   * spec.access_key_id    -> aws.ProviderArgs.AccessKey
//   * spec.secret_access_key-> aws.ProviderArgs.SecretKey
//   * spec.session_token    -> aws.ProviderArgs.Token
//   * spec.profile          -> aws.ProviderArgs.Profile
//
// All fields are optional except region: when region is not provided an error
// is returned because most AWS resources (including DynamoDB) require it.
func buildAWSProvider(ctx *pulumi.Context, spec *awscredsv1.AwsCredentialSpec) (*aws.Provider, error) {
    if spec == nil {
        return nil, errors.New("aws credential spec must be provided")
    }

    region := spec.GetRegion()
    if region == "" {
        return nil, errors.New("aws credential spec: region must be specified")
    }

    args := &aws.ProviderArgs{
        Region: pulumi.StringPtr(region),
    }

    // The Access/Secret keys are optional. When omitted Pulumi falls back to
    // the default AWS credential resolution chain (env / profile / metadata).
    if ak := spec.GetAccessKeyId(); ak != "" {
        args.AccessKey = pulumi.StringPtr(ak)
    }
    if sk := spec.GetSecretAccessKey(); sk != "" {
        args.SecretKey = pulumi.StringPtr(sk)
    }
    if tok := spec.GetSessionToken(); tok != "" {
        args.Token = pulumi.StringPtr(tok)
    }
    if profile := spec.GetProfile(); profile != "" {
        args.Profile = pulumi.StringPtr(profile)
    }

    provider, err := aws.NewProvider(ctx, "aws", args)
    if err != nil {
        return nil, errors.Wrap(err, "creating AWS provider")
    }

    return provider, nil
}
