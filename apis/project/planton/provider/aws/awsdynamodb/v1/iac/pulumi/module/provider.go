// Code generated by project-planton scaffold. DO NOT EDIT.
//
// provider.go contains the helper that materialises an
// aws.Provider instance from an AwsCredentialSpec and attaches it
// to the current Pulumi stack.  Isolating this logic makes it easy
// for the rest of the program to obtain a fully-initialised provider
// and, if necessary, pass it downstream through pulumi.Provider()
// options.
package main

import (
	"fmt"

	awspb "github.com/project-planton/project-planton/apis/project/planton/provider/aws/v1"
	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// NewAwsProvider builds a pulumi-aws provider from the supplied credential
// specification. The resulting provider is registered as a resource so that
// Pulumi can track its configuration and replay it deterministically on
// subsequent runs.
//
// Usage:
//   prov, err := NewAwsProvider(ctx, "aws", creds, pulumi.Parent(someRes))
//   if err != nil { ... }
//
//   s3Bucket, err := s3.NewBucket(ctx, "example", &s3.BucketArgs{}, pulumi.Provider(prov))
func NewAwsProvider(
	ctx *pulumi.Context,
	name string,
	spec *awspb.AwsCredentialSpec,
	opts ...pulumi.ResourceOption,
) (*aws.Provider, error) {
	if ctx == nil {
		return nil, fmt.Errorf("pulumi.Context must not be nil")
	}
	if spec == nil {
		return nil, fmt.Errorf("AwsCredentialSpec must not be nil")
	}

	// Translate the proto-based credential spec into Pulumi input types.
	args := &aws.ProviderArgs{}

	// Basic static credentials – only populate the fields when values are
	// provided so that we do not clobber alternative auth mechanisms (e.g.
	// IAM roles for service accounts).
	if v := spec.GetAccessKeyId(); v != "" {
		args.AccessKey = pulumi.StringPtr(v)
	}
	if v := spec.GetSecretAccessKey(); v != "" {
		args.SecretKey = pulumi.StringPtr(v)
	}
	if v := spec.GetSessionToken(); v != "" {
		args.Token = pulumi.StringPtr(v)
	}

	// Profile-based configuration.
	if v := spec.GetProfile(); v != "" {
		args.Profile = pulumi.StringPtr(v)
	}

	// Region. If the spec leaves the region empty we deliberately keep the
	// field unset so that the AWS SDK falls back to its default resolution
	// chain (environment variables, shared config files, IMDS, …).
	if v := spec.GetRegion(); v != "" {
		args.Region = pulumi.StringPtr(v)
	}

	// Optional assume-role settings.
	if ar := spec.GetAssumeRole(); ar != nil {
		// Only proceed when a role ARN is present – the AWS provider will emit a
		// validation error otherwise.
		if roleArn := ar.GetRoleArn(); roleArn != "" {
			assumeRoleArgs := &aws.ProviderAssumeRoleArgs{
				RoleArn: pulumi.String(roleArn),
			}
			if ext := ar.GetExternalId(); ext != "" {
				assumeRoleArgs.ExternalId = pulumi.StringPtr(ext)
			}
			if duration := ar.GetDurationSeconds(); duration > 0 {
				assumeRoleArgs.Duration = pulumi.IntPtr(int(duration))
			}
			args.AssumeRole = aws.ProviderAssumeRolePtr(assumeRoleArgs)
		}
	}

	prov, err := aws.NewProvider(ctx, name, args, opts...)
	if err != nil {
		return nil, fmt.Errorf("creating AWS provider: %w", err)
	}
	return prov, nil
}

// ProviderOption returns a pulumi.ResourceOption that pins the supplied AWS
// provider to child resources – useful when the provider has been created at
// the stack level and needs to be re-used by multiple components.
func ProviderOption(p *aws.Provider) pulumi.ResourceOption {
	return pulumi.Provider(p)
}
