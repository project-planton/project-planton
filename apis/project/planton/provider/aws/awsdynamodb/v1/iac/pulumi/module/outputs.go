// Code generated by project-Planton. DO NOT EDIT.
//
// This file defines well-known constant names for the stack outputs that are
// produced when an AwsDynamodb table is provisioned via Pulumi.  Having a
// centralised list of constants avoids typos in the various stacks that
// consume these outputs.  The helper Register function provides a convenient
// way to export the outputs from a Pulumi stack in an idiomatic fashion.

package awsdynamodb

import "github.com/pulumi/pulumi/sdk/v3/go/pulumi"

// The canonical keys used in Pulumi stack exports.  They are an exact, 1-to-1
// mirror of the fields defined in the AwsDynamodbStackOutputs protobuf.
const (
    // table_arn — fully-qualified Amazon Resource Name of the table.
    OutputTableArn = "table_arn"

    // table_name — name of the DynamoDB table (may include runtime suffixes).
    OutputTableName = "table_name"

    // table_id — AWS-assigned unique identifier of the table.
    OutputTableID = "table_id"

    // stream — the current DynamoDB Streams object (see OutputStream* for
    // nested fields).
    OutputStream = "stream"

    // kms_key_arn — ARN of the customer-managed KMS key when SSE uses a CMK.
    OutputKmsKeyArn = "kms_key_arn"

    // global_secondary_index_names — names of provisioned GSIs.
    OutputGlobalSecondaryIndexNames = "global_secondary_index_names"

    // local_secondary_index_names — names of provisioned LSIs.
    OutputLocalSecondaryIndexNames = "local_secondary_index_names"
)

// Register exports the provided outputs using the supplied Pulumi context.  The
// typical usage pattern is:
//
//   err := outputs.Register(ctx, pulumi.Map{
//       outputs.OutputTableArn: table.Arn,
//       outputs.OutputTableName: table.Name,
//       // … additional outputs …
//   })
//
// It is deliberately thin: it validates nothing and simply forwards each key to
// ctx.Export so that individual stacks retain full control over which outputs
// they expose.
func Register(ctx *pulumi.Context, outs pulumi.Map) error {
    for k, v := range outs {
        ctx.Export(k, v)
    }
    return nil
}
