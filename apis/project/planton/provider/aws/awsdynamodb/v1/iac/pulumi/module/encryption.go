// Code generated by Project Planton. DO NOT EDIT.

package module

import (
    "fmt"

    "github.com/pkg/errors"
    "github.com/pulumi/pulumi-aws/sdk/v6/go/aws/dynamodb"
    "github.com/pulumi/pulumi-aws/sdk/v6/go/aws/kms"
    "github.com/pulumi/pulumi/sdk/v3/go/pulumi"

    awsdynamodbpb "github.com/project-planton/project-planton/apis/project/planton/provider/aws/awsdynamodb/v1"
)

// configureEncryption reads the SSE specification from the target spec, creates the
// required KMS key when the encryption type is KMS and no CMK ARN has been
// provided, populates the corresponding field on the DynamoDB TableArgs and
// returns the CMK ARN (if any) so it can be exported by the stack.
func configureEncryption(
    ctx *pulumi.Context,
    locals *Locals,
    tblArgs *dynamodb.TableArgs,
    provider pulumi.ProviderResource,
) (pulumi.StringPtrOutput, error) {
    // Ensure defensive zero-value return is always valid.
    var kmsArn pulumi.StringPtrOutput

    var spec *awsdynamodbpb.AwsDynamodbSpec
    if locals != nil && locals.Target != nil {
        spec = locals.Target.Spec
    }
    if spec == nil {
        // Nothing to configure – leave defaults.
        return kmsArn, nil
    }

    sse := spec.SseSpecification
    if sse == nil || !sse.Enabled {
        // Server-side encryption disabled.
        return kmsArn, nil
    }

    // Helper for provider-aware options.
    opts := []pulumi.ResourceOption{}
    if provider != nil {
        opts = append(opts, pulumi.Provider(provider))
    }

    switch sse.SseType {
    case awsdynamodbpb.SSEType_AES256:
        // AWS-managed key (AES256 / DynamoDB default).
        tblArgs.ServerSideEncryption = &dynamodb.TableServerSideEncryptionArgs{
            Enabled: pulumi.Bool(true),
            SseType: pulumi.String("AES256"),
        }
    case awsdynamodbpb.SSEType_KMS:
        var keyArn pulumi.StringInput

        if sse.KmsMasterKeyId != "" {
            // Caller supplied an existing CMK ARN.
            keyArn = pulumi.String(sse.KmsMasterKeyId)
        } else {
            // No CMK provided – create a dedicated key for the table.
            keyName := fmt.Sprintf("%s-dynamodb-kms", spec.TableName)
            key, err := kms.NewKey(ctx, keyName, &kms.KeyArgs{
                Description: pulumi.String("CMK for DynamoDB table encryption"),
                Tags:        pulumi.ToStringMap(spec.Tags),
            }, opts...)
            if err != nil {
                return kmsArn, errors.Wrap(err, "creating KMS key for DynamoDB encryption")
            }
            keyArn = key.Arn()
        }

        tblArgs.ServerSideEncryption = &dynamodb.TableServerSideEncryptionArgs{
            Enabled:   pulumi.Bool(true),
            SseType:   pulumi.String("KMS"),
            KmsKeyArn: keyArn.ToStringPtrOutput(),
        }

        kmsArn = keyArn.ToStringPtrOutput()

        // Persist for later export.
        locals.KmsKeyArn = "" // zero until resolved at runtime
    default:
        // Fallback – treat as disabled to satisfy the provider.
        return kmsArn, nil
    }

    return kmsArn, nil
}
