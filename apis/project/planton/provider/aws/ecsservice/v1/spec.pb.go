// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/provider/aws/ecsservice/v1/spec.proto

package ecsservicev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EcsServiceSpec captures the minimal fields needed to deploy a Fargate-based ECS service
// into an existing ECS cluster. It focuses on the 80-20 use case:
// a single-container service with essential resource and networking configs.
type EcsServiceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cluster_name is the name or ARN of the ECS cluster where this service will run.
	// This must already exist (created by a separate EcsCluster resource or otherwise).
	// Example: "my-mixed-cluster" or "arn:aws:ecs:us-east-1:123456789012:cluster/my-mixed-cluster"
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// service_name is a unique identifier for the ECS service within the cluster.
	// Must be unique per ECS cluster; recommended length is 3–63 characters.
	// Example: "my-ecs-service"
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// image is the container image URI (e.g., an ECR or Docker Hub path).
	// Example: "amazonlinux:2" or "123456789012.dkr.ecr.us-east-1.amazonaws.com/myapp:latest"
	Image string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	// container_port is the port inside the container that should be exposed to receive traffic.
	// This is optional if the service doesn't need inbound requests (e.g., a background worker).
	// Example: 80 for HTTP
	ContainerPort int32 `protobuf:"varint,4,opt,name=container_port,json=containerPort,proto3" json:"container_port,omitempty"`
	// desired_count is the number of task replicas to run for this service.
	// Defaults to 1 if not specified; higher values improve availability at increased cost.
	DesiredCount int32 `protobuf:"varint,5,opt,name=desired_count,json=desiredCount,proto3" json:"desired_count,omitempty"`
	// cpu is the amount of vCPU (in CPU units) to allocate for the entire task.
	// Valid Fargate values include 256, 512, 1024, 2048, etc., subject to ECS constraints.
	// Example: 512
	Cpu int32 `protobuf:"varint,6,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// memory is the total MiB of RAM for the task.
	// Valid values depend on CPU. For example, 512 CPU can pair with 1024–4096 MiB.
	// Example: 1024
	Memory int32 `protobuf:"varint,7,opt,name=memory,proto3" json:"memory,omitempty"`
	// subnets is a list of VPC subnet IDs where the Fargate tasks will run.
	// Typically private subnets for production, often at least two for high availability.
	Subnets []string `protobuf:"bytes,8,rep,name=subnets,proto3" json:"subnets,omitempty"`
	// security_groups is a list of security group IDs to apply to each task's ENI.
	// If not provided, ECS may use the default VPC security group, which is not ideal for production.
	SecurityGroups []string `protobuf:"bytes,9,rep,name=security_groups,json=securityGroups,proto3" json:"security_groups,omitempty"`
	// assign_public_ip indicates whether to assign a public IP to the Fargate task ENI.
	// Default is false for most production services behind a load balancer or NAT.
	AssignPublicIp bool `protobuf:"varint,10,opt,name=assign_public_ip,json=assignPublicIp,proto3" json:"assign_public_ip,omitempty"`
	// task_execution_role_arn is the IAM role used by ECS to pull private images and write logs.
	// If omitted, a default "ecsTaskExecutionRole" may be assumed, but it must already exist.
	// Example: "arn:aws:iam::123456789012:role/ecsTaskExecutionRole"
	TaskExecutionRoleArn string `protobuf:"bytes,11,opt,name=task_execution_role_arn,json=taskExecutionRoleArn,proto3" json:"task_execution_role_arn,omitempty"`
	// task_role_arn is the IAM role your container uses if it needs AWS permissions.
	// Omit if your container does not call AWS APIs.
	// Example: "arn:aws:iam::123456789012:role/myAppTaskRole"
	TaskRoleArn string `protobuf:"bytes,12,opt,name=task_role_arn,json=taskRoleArn,proto3" json:"task_role_arn,omitempty"`
	// environment defines optional environment variables for the container.
	// If secrets are needed, consider referencing AWS Secrets Manager or SSM.
	Environment []*EcsServiceSpec_EnvironmentVar `protobuf:"bytes,13,rep,name=environment,proto3" json:"environment,omitempty"`
}

func (x *EcsServiceSpec) Reset() {
	*x = EcsServiceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_ecsservice_v1_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcsServiceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcsServiceSpec) ProtoMessage() {}

func (x *EcsServiceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_ecsservice_v1_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcsServiceSpec.ProtoReflect.Descriptor instead.
func (*EcsServiceSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_ecsservice_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *EcsServiceSpec) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *EcsServiceSpec) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *EcsServiceSpec) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *EcsServiceSpec) GetContainerPort() int32 {
	if x != nil {
		return x.ContainerPort
	}
	return 0
}

func (x *EcsServiceSpec) GetDesiredCount() int32 {
	if x != nil {
		return x.DesiredCount
	}
	return 0
}

func (x *EcsServiceSpec) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *EcsServiceSpec) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *EcsServiceSpec) GetSubnets() []string {
	if x != nil {
		return x.Subnets
	}
	return nil
}

func (x *EcsServiceSpec) GetSecurityGroups() []string {
	if x != nil {
		return x.SecurityGroups
	}
	return nil
}

func (x *EcsServiceSpec) GetAssignPublicIp() bool {
	if x != nil {
		return x.AssignPublicIp
	}
	return false
}

func (x *EcsServiceSpec) GetTaskExecutionRoleArn() string {
	if x != nil {
		return x.TaskExecutionRoleArn
	}
	return ""
}

func (x *EcsServiceSpec) GetTaskRoleArn() string {
	if x != nil {
		return x.TaskRoleArn
	}
	return ""
}

func (x *EcsServiceSpec) GetEnvironment() []*EcsServiceSpec_EnvironmentVar {
	if x != nil {
		return x.Environment
	}
	return nil
}

// EnvironmentVar is an individual environment variable.
type EcsServiceSpec_EnvironmentVar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the environment variable key, e.g. "REDIS_URL".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// value is the environment variable value, which can be plain text or a placeholder for a secret.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EcsServiceSpec_EnvironmentVar) Reset() {
	*x = EcsServiceSpec_EnvironmentVar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_ecsservice_v1_spec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcsServiceSpec_EnvironmentVar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcsServiceSpec_EnvironmentVar) ProtoMessage() {}

func (x *EcsServiceSpec_EnvironmentVar) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_ecsservice_v1_spec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcsServiceSpec_EnvironmentVar.ProtoReflect.Descriptor instead.
func (*EcsServiceSpec_EnvironmentVar) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_ecsservice_v1_spec_proto_rawDescGZIP(), []int{0, 0}
}

func (x *EcsServiceSpec_EnvironmentVar) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EcsServiceSpec_EnvironmentVar) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_project_planton_provider_aws_ecsservice_v1_spec_proto protoreflect.FileDescriptor

var file_project_planton_provider_aws_ecsservice_v1_spec_proto_rawDesc = []byte{
	0x0a, 0x35, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x65,
	0x63, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x65, 0x63, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90,
	0x06, 0x0a, 0x0e, 0x45, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x29, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x8c, 0x01, 0x0a,
	0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x69, 0xba, 0x48, 0x66, 0xba, 0x01, 0x60, 0x0a, 0x13, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x24, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6d,
	0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x33, 0x2d, 0x36, 0x33, 0x20, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x23, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69,
	0x73, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x33, 0x20, 0x26, 0x26, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x28,
	0x74, 0x68, 0x69, 0x73, 0x29, 0x20, 0x3c, 0x3d, 0x20, 0x36, 0x33, 0xc8, 0x01, 0x01, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x2a, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x05, 0x92, 0xa6, 0x1d, 0x01, 0x31, 0x52, 0x0c,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x03,
	0x63, 0x70, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x1e, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x92,
	0x01, 0x02, 0x18, 0x01, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x31, 0x0a,
	0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x18, 0x01,
	0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x33, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x09, 0x92, 0xa6, 0x1d, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x49, 0x70, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x12, 0x22, 0x0a, 0x0d,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e,
	0x12, 0x6b, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x61, 0x77, 0x73, 0x2e, 0x65, 0x63, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72,
	0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x42, 0x0a,
	0x0e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x12,
	0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0xf3, 0x02, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x65, 0x63, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x67, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x77, 0x73, 0x2f,
	0x65, 0x63, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x65, 0x63,
	0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x05, 0x50, 0x50, 0x50,
	0x41, 0x45, 0xaa, 0x02, 0x2a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x77,
	0x73, 0x2e, 0x45, 0x63, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x2a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x41, 0x77, 0x73, 0x5c, 0x45,
	0x63, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x36, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x41, 0x77, 0x73, 0x5c, 0x45, 0x63, 0x73, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x2f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a,
	0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x3a, 0x3a, 0x41, 0x77, 0x73, 0x3a, 0x3a, 0x45, 0x63, 0x73, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_project_planton_provider_aws_ecsservice_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_ecsservice_v1_spec_proto_rawDescData = file_project_planton_provider_aws_ecsservice_v1_spec_proto_rawDesc
)

func file_project_planton_provider_aws_ecsservice_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_ecsservice_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_ecsservice_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_provider_aws_ecsservice_v1_spec_proto_rawDescData)
	})
	return file_project_planton_provider_aws_ecsservice_v1_spec_proto_rawDescData
}

var file_project_planton_provider_aws_ecsservice_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_project_planton_provider_aws_ecsservice_v1_spec_proto_goTypes = []any{
	(*EcsServiceSpec)(nil),                // 0: project.planton.provider.aws.ecsservice.v1.EcsServiceSpec
	(*EcsServiceSpec_EnvironmentVar)(nil), // 1: project.planton.provider.aws.ecsservice.v1.EcsServiceSpec.EnvironmentVar
}
var file_project_planton_provider_aws_ecsservice_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.aws.ecsservice.v1.EcsServiceSpec.environment:type_name -> project.planton.provider.aws.ecsservice.v1.EcsServiceSpec.EnvironmentVar
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_ecsservice_v1_spec_proto_init() }
func file_project_planton_provider_aws_ecsservice_v1_spec_proto_init() {
	if File_project_planton_provider_aws_ecsservice_v1_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_provider_aws_ecsservice_v1_spec_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*EcsServiceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_ecsservice_v1_spec_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*EcsServiceSpec_EnvironmentVar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_provider_aws_ecsservice_v1_spec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_ecsservice_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_ecsservice_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_aws_ecsservice_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_ecsservice_v1_spec_proto = out.File
	file_project_planton_provider_aws_ecsservice_v1_spec_proto_rawDesc = nil
	file_project_planton_provider_aws_ecsservice_v1_spec_proto_goTypes = nil
	file_project_planton_provider_aws_ecsservice_v1_spec_proto_depIdxs = nil
}
