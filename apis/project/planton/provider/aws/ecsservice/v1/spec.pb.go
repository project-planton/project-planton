// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/provider/aws/ecsservice/v1/spec.proto

package ecsservicev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EcsServiceLaunchType enumerates the possible ways to run ECS tasks.
type EcsServiceLaunchType int32

const (
	// ECS_LAUNCH_TYPE_UNSPECIFIED means the field was not specified; the system treats it as FARGATE by default.
	EcsServiceLaunchType_ecs_launch_type_unspecified EcsServiceLaunchType = 0
	// FARGATE runs tasks using AWS Fargate (serverless).
	EcsServiceLaunchType_fargate EcsServiceLaunchType = 1
	// EC2 runs tasks on user-managed Amazon EC2 instances.
	EcsServiceLaunchType_ec2 EcsServiceLaunchType = 2
)

// Enum value maps for EcsServiceLaunchType.
var (
	EcsServiceLaunchType_name = map[int32]string{
		0: "ecs_launch_type_unspecified",
		1: "fargate",
		2: "ec2",
	}
	EcsServiceLaunchType_value = map[string]int32{
		"ecs_launch_type_unspecified": 0,
		"fargate":                     1,
		"ec2":                         2,
	}
)

func (x EcsServiceLaunchType) Enum() *EcsServiceLaunchType {
	p := new(EcsServiceLaunchType)
	*p = x
	return p
}

func (x EcsServiceLaunchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EcsServiceLaunchType) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_provider_aws_ecsservice_v1_spec_proto_enumTypes[0].Descriptor()
}

func (EcsServiceLaunchType) Type() protoreflect.EnumType {
	return &file_project_planton_provider_aws_ecsservice_v1_spec_proto_enumTypes[0]
}

func (x EcsServiceLaunchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EcsServiceLaunchType.Descriptor instead.
func (EcsServiceLaunchType) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_ecsservice_v1_spec_proto_rawDescGZIP(), []int{0}
}

// EcsServiceSpec defines the configuration for deploying a containerized application on AWS ECS.
// This covers both Fargate (serverless) and EC2 (self-managed) launch types by exposing a 'launch_type' field.
type EcsServiceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// launch_type specifies whether to run on FARGATE or EC2.
	// By default, if not provided, we treat it as FARGATE (serverless).
	// Valid values are ["FARGATE", "EC2"].
	LaunchType EcsServiceLaunchType `protobuf:"varint,1,opt,name=launch_type,json=launchType,proto3,enum=project.planton.provider.aws.ecsservice.v1.EcsServiceLaunchType" json:"launch_type,omitempty"`
	// cluster_name indicates the name or ARN of the ECS cluster to deploy into.
	// If empty, the platform may choose a default cluster (e.g., derived from environment).
	ClusterName string `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// container_image is the Docker image for your service, e.g.,
	// "123456789012.dkr.ecr.us-east-1.amazonaws.com/myapp:latest" or "nginx:latest".
	// This is required, as ECS must know what container image to run.
	ContainerImage string `protobuf:"bytes,3,opt,name=container_image,json=containerImage,proto3" json:"container_image,omitempty"`
	// container_port is the port on which the application listens inside the container.
	// Co-pilot will show "8080" as a recommended placeholder, but the user can override.
	ContainerPort int32 `protobuf:"varint,4,opt,name=container_port,json=containerPort,proto3" json:"container_port,omitempty"`
	// cpu is the number of CPU units for the ECS task.
	// For Fargate, allowed values include 256, 512, 1024, etc.
	// Co-pilot will suggest "256" as a starting value.
	Cpu int32 `protobuf:"varint,5,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// memory is the amount of memory (in MiB) for the ECS task.
	// For Fargate, 512, 1024, and similar increments are valid combos.
	// Co-pilot will suggest "512" by default, but the user can override.
	Memory int32 `protobuf:"varint,6,opt,name=memory,proto3" json:"memory,omitempty"`
	// desired_count is the desired number of running tasks for this service.
	// Co-pilot will propose "1" by default.
	DesiredCount int32 `protobuf:"varint,7,opt,name=desired_count,json=desiredCount,proto3" json:"desired_count,omitempty"`
	// environment_variables is a map of key/value pairs for non-sensitive config,
	// injected as container environment variables. Example: {"LOG_LEVEL": "debug"}.
	EnvironmentVariables map[string]string `protobuf:"bytes,8,rep,name=environment_variables,json=environmentVariables,proto3" json:"environment_variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// secret_variables is a map of key/value references to AWS Secrets Manager or SSM
	// for sensitive data, e.g. {"DB_PASSWORD": "arn:aws:ssm:us-east-1:..."}.
	// The platform resolves these references into secure environment variables at runtime.
	SecretVariables map[string]string `protobuf:"bytes,9,rep,name=secret_variables,json=secretVariables,proto3" json:"secret_variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// network defines VPC, subnet, and security group configuration for this ECS service.
	// If empty, the platform may provide sensible defaults (e.g., a shared VPC).
	Network *EcsServiceNetwork `protobuf:"bytes,10,opt,name=network,proto3" json:"network,omitempty"`
	// ingress controls how the service is exposed externally (via ALB, domain, etc.)
	// or whether it remains private (is_public=false).
	Ingress *EcsServiceIngress `protobuf:"bytes,11,opt,name=ingress,proto3" json:"ingress,omitempty"`
	// auto_scaling optionally configures horizontal scaling (min/max tasks).
	// If is_enabled=false, the service runs at the desired_count only.
	AutoScaling *EcsServiceAutoScaling `protobuf:"bytes,12,opt,name=auto_scaling,json=autoScaling,proto3" json:"auto_scaling,omitempty"`
}

func (x *EcsServiceSpec) Reset() {
	*x = EcsServiceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_ecsservice_v1_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcsServiceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcsServiceSpec) ProtoMessage() {}

func (x *EcsServiceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_ecsservice_v1_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcsServiceSpec.ProtoReflect.Descriptor instead.
func (*EcsServiceSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_ecsservice_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *EcsServiceSpec) GetLaunchType() EcsServiceLaunchType {
	if x != nil {
		return x.LaunchType
	}
	return EcsServiceLaunchType_ecs_launch_type_unspecified
}

func (x *EcsServiceSpec) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *EcsServiceSpec) GetContainerImage() string {
	if x != nil {
		return x.ContainerImage
	}
	return ""
}

func (x *EcsServiceSpec) GetContainerPort() int32 {
	if x != nil {
		return x.ContainerPort
	}
	return 0
}

func (x *EcsServiceSpec) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *EcsServiceSpec) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *EcsServiceSpec) GetDesiredCount() int32 {
	if x != nil {
		return x.DesiredCount
	}
	return 0
}

func (x *EcsServiceSpec) GetEnvironmentVariables() map[string]string {
	if x != nil {
		return x.EnvironmentVariables
	}
	return nil
}

func (x *EcsServiceSpec) GetSecretVariables() map[string]string {
	if x != nil {
		return x.SecretVariables
	}
	return nil
}

func (x *EcsServiceSpec) GetNetwork() *EcsServiceNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *EcsServiceSpec) GetIngress() *EcsServiceIngress {
	if x != nil {
		return x.Ingress
	}
	return nil
}

func (x *EcsServiceSpec) GetAutoScaling() *EcsServiceAutoScaling {
	if x != nil {
		return x.AutoScaling
	}
	return nil
}

// EcsServiceNetwork defines VPC, subnet, and security group settings for the ECS tasks.
type EcsServiceNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// vpc_id is the ID of the VPC where tasks will run (e.g. "vpc-0123456789abcdef0").
	// If left empty, the platform may pick a default VPC.
	VpcId string `protobuf:"bytes,1,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	// subnet_ids is a list of subnet IDs where tasks will run.
	// Typically private subnets for production or public if you want direct internet traffic.
	SubnetIds []string `protobuf:"bytes,2,rep,name=subnet_ids,json=subnetIds,proto3" json:"subnet_ids,omitempty"`
	// security_group_ids is a list of security groups attached to each task's ENI.
	// If omitted, a default security group might be assigned.
	SecurityGroupIds []string `protobuf:"bytes,3,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	// assign_public_ip indicates whether to allocate a public IP for tasks (Fargate in a public subnet).
	AssignPublicIp bool `protobuf:"varint,4,opt,name=assign_public_ip,json=assignPublicIp,proto3" json:"assign_public_ip,omitempty"`
}

func (x *EcsServiceNetwork) Reset() {
	*x = EcsServiceNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_ecsservice_v1_spec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcsServiceNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcsServiceNetwork) ProtoMessage() {}

func (x *EcsServiceNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_ecsservice_v1_spec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcsServiceNetwork.ProtoReflect.Descriptor instead.
func (*EcsServiceNetwork) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_ecsservice_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *EcsServiceNetwork) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *EcsServiceNetwork) GetSubnetIds() []string {
	if x != nil {
		return x.SubnetIds
	}
	return nil
}

func (x *EcsServiceNetwork) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *EcsServiceNetwork) GetAssignPublicIp() bool {
	if x != nil {
		return x.AssignPublicIp
	}
	return false
}

// EcsServiceIngress defines how a service is exposed externally via AWS load balancers or domains.
type EcsServiceIngress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// is_public indicates if the service is internet-facing. If false, the service might be internal-only.
	IsPublic bool `protobuf:"varint,1,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	// domain_name is an optional fully qualified domain, e.g. "api.example.com".
	// If omitted, the platform may provide a default LB DNS or keep it internal.
	DomainName string `protobuf:"bytes,2,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	// path is the optional path for path-based routing (e.g., "/api/*").
	// If omitted, default is "/" routing for the entire domain.
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// health_check_path is where the ALB health check probes. If empty, defaults to "/".
	HealthCheckPath string `protobuf:"bytes,4,opt,name=health_check_path,json=healthCheckPath,proto3" json:"health_check_path,omitempty"`
}

func (x *EcsServiceIngress) Reset() {
	*x = EcsServiceIngress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_ecsservice_v1_spec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcsServiceIngress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcsServiceIngress) ProtoMessage() {}

func (x *EcsServiceIngress) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_ecsservice_v1_spec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcsServiceIngress.ProtoReflect.Descriptor instead.
func (*EcsServiceIngress) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_ecsservice_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *EcsServiceIngress) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *EcsServiceIngress) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *EcsServiceIngress) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *EcsServiceIngress) GetHealthCheckPath() string {
	if x != nil {
		return x.HealthCheckPath
	}
	return ""
}

// EcsServiceAutoScaling configures optional horizontal scaling based on CPU usage, memory usage, or other metrics.
type EcsServiceAutoScaling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// is_enabled determines if auto-scaling is active.
	// When false, the service remains at "desired_count" tasks.
	IsEnabled bool `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	// min_count is the minimum number of tasks to run under auto-scaling.
	// If 0 is valid, you can run zero tasks, but that means no requests are served.
	MinCount int32 `protobuf:"varint,2,opt,name=min_count,json=minCount,proto3" json:"min_count,omitempty"`
	// max_count is the maximum number of tasks.
	// If you set it too high, you could scale out significantly based on usage.
	MaxCount int32 `protobuf:"varint,3,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
}

func (x *EcsServiceAutoScaling) Reset() {
	*x = EcsServiceAutoScaling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_ecsservice_v1_spec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcsServiceAutoScaling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcsServiceAutoScaling) ProtoMessage() {}

func (x *EcsServiceAutoScaling) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_ecsservice_v1_spec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcsServiceAutoScaling.ProtoReflect.Descriptor instead.
func (*EcsServiceAutoScaling) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_ecsservice_v1_spec_proto_rawDescGZIP(), []int{3}
}

func (x *EcsServiceAutoScaling) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *EcsServiceAutoScaling) GetMinCount() int32 {
	if x != nil {
		return x.MinCount
	}
	return 0
}

func (x *EcsServiceAutoScaling) GetMaxCount() int32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

var File_project_planton_provider_aws_ecsservice_v1_spec_proto protoreflect.FileDescriptor

var file_project_planton_provider_aws_ecsservice_v1_spec_proto_rawDesc = []byte{
	0x0a, 0x35, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x65,
	0x63, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x65, 0x63, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa0,
	0x08, 0x0a, 0x0e, 0x45, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x6e, 0x0a, 0x0b, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x65, 0x63, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x8a, 0xa6, 0x1d, 0x07, 0x46, 0x41,
	0x52, 0x47, 0x41, 0x54, 0x45, 0x52, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x92, 0xa6, 0x1d, 0x04, 0x38, 0x30, 0x38, 0x30, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x03,
	0x63, 0x70, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0x92, 0xa6, 0x1d, 0x03, 0x32,
	0x35, 0x36, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x1f, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0x92, 0xa6, 0x1d, 0x03, 0x35, 0x31, 0x32,
	0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x05, 0x92, 0xa6, 0x1d, 0x01, 0x31, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x15, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x61, 0x77, 0x73, 0x2e, 0x65, 0x63, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x7a, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x65, 0x63, 0x73, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x65, 0x63, 0x73,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x63, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x57, 0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x65, 0x63, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x64,
	0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x61, 0x77, 0x73, 0x2e, 0x65, 0x63, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x6f,
	0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x1a, 0x47, 0x0a, 0x19, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a,
	0x14, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xa1, 0x01, 0x0a, 0x11, 0x45, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x49, 0x70, 0x22, 0x91, 0x01, 0x0a, 0x11, 0x45, 0x63, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a,
	0x11, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x22, 0x70, 0x0a, 0x15, 0x45, 0x63, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0x4d, 0x0a, 0x14, 0x45,
	0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x65, 0x63, 0x73, 0x5f, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x66, 0x61, 0x72, 0x67, 0x61, 0x74, 0x65, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x65, 0x63, 0x32, 0x10, 0x02, 0x42, 0xf3, 0x02, 0x0a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e,
	0x65, 0x63, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x53,
	0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x67, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x65, 0x63, 0x73, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x65, 0x63, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x76, 0x31, 0xa2, 0x02, 0x05, 0x50, 0x50, 0x50, 0x41, 0x45, 0xaa, 0x02, 0x2a, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x77, 0x73, 0x2e, 0x45, 0x63, 0x73, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x2a, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5c, 0x41, 0x77, 0x73, 0x5c, 0x45, 0x63, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x36, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5c, 0x41, 0x77, 0x73, 0x5c, 0x45, 0x63, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x2f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3a, 0x3a, 0x41, 0x77, 0x73,
	0x3a, 0x3a, 0x45, 0x63, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_project_planton_provider_aws_ecsservice_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_ecsservice_v1_spec_proto_rawDescData = file_project_planton_provider_aws_ecsservice_v1_spec_proto_rawDesc
)

func file_project_planton_provider_aws_ecsservice_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_ecsservice_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_ecsservice_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_provider_aws_ecsservice_v1_spec_proto_rawDescData)
	})
	return file_project_planton_provider_aws_ecsservice_v1_spec_proto_rawDescData
}

var file_project_planton_provider_aws_ecsservice_v1_spec_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_project_planton_provider_aws_ecsservice_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_project_planton_provider_aws_ecsservice_v1_spec_proto_goTypes = []any{
	(EcsServiceLaunchType)(0),     // 0: project.planton.provider.aws.ecsservice.v1.EcsServiceLaunchType
	(*EcsServiceSpec)(nil),        // 1: project.planton.provider.aws.ecsservice.v1.EcsServiceSpec
	(*EcsServiceNetwork)(nil),     // 2: project.planton.provider.aws.ecsservice.v1.EcsServiceNetwork
	(*EcsServiceIngress)(nil),     // 3: project.planton.provider.aws.ecsservice.v1.EcsServiceIngress
	(*EcsServiceAutoScaling)(nil), // 4: project.planton.provider.aws.ecsservice.v1.EcsServiceAutoScaling
	nil,                           // 5: project.planton.provider.aws.ecsservice.v1.EcsServiceSpec.EnvironmentVariablesEntry
	nil,                           // 6: project.planton.provider.aws.ecsservice.v1.EcsServiceSpec.SecretVariablesEntry
}
var file_project_planton_provider_aws_ecsservice_v1_spec_proto_depIdxs = []int32{
	0, // 0: project.planton.provider.aws.ecsservice.v1.EcsServiceSpec.launch_type:type_name -> project.planton.provider.aws.ecsservice.v1.EcsServiceLaunchType
	5, // 1: project.planton.provider.aws.ecsservice.v1.EcsServiceSpec.environment_variables:type_name -> project.planton.provider.aws.ecsservice.v1.EcsServiceSpec.EnvironmentVariablesEntry
	6, // 2: project.planton.provider.aws.ecsservice.v1.EcsServiceSpec.secret_variables:type_name -> project.planton.provider.aws.ecsservice.v1.EcsServiceSpec.SecretVariablesEntry
	2, // 3: project.planton.provider.aws.ecsservice.v1.EcsServiceSpec.network:type_name -> project.planton.provider.aws.ecsservice.v1.EcsServiceNetwork
	3, // 4: project.planton.provider.aws.ecsservice.v1.EcsServiceSpec.ingress:type_name -> project.planton.provider.aws.ecsservice.v1.EcsServiceIngress
	4, // 5: project.planton.provider.aws.ecsservice.v1.EcsServiceSpec.auto_scaling:type_name -> project.planton.provider.aws.ecsservice.v1.EcsServiceAutoScaling
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_ecsservice_v1_spec_proto_init() }
func file_project_planton_provider_aws_ecsservice_v1_spec_proto_init() {
	if File_project_planton_provider_aws_ecsservice_v1_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_provider_aws_ecsservice_v1_spec_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*EcsServiceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_ecsservice_v1_spec_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*EcsServiceNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_ecsservice_v1_spec_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*EcsServiceIngress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_ecsservice_v1_spec_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*EcsServiceAutoScaling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_provider_aws_ecsservice_v1_spec_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_ecsservice_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_ecsservice_v1_spec_proto_depIdxs,
		EnumInfos:         file_project_planton_provider_aws_ecsservice_v1_spec_proto_enumTypes,
		MessageInfos:      file_project_planton_provider_aws_ecsservice_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_ecsservice_v1_spec_proto = out.File
	file_project_planton_provider_aws_ecsservice_v1_spec_proto_rawDesc = nil
	file_project_planton_provider_aws_ecsservice_v1_spec_proto_goTypes = nil
	file_project_planton_provider_aws_ecsservice_v1_spec_proto_depIdxs = nil
}
