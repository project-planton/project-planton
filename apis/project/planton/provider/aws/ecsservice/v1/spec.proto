syntax = "proto3";

package project.planton.provider.aws.ecsservice.v1;

import "buf/validate/validate.proto";
import "project/planton/shared/options/options.proto";

// EcsServiceSpec captures the minimal fields needed to deploy a Fargate-based ECS service
// into an existing ECS cluster. It focuses on the 80-20 use case:
// a single-container service with essential resource and networking configs.
message EcsServiceSpec {
  // cluster_name is the name or ARN of the ECS cluster where this service will run.
  // This must already exist (created by a separate EcsCluster resource or otherwise).
  // Example: "my-mixed-cluster" or "arn:aws:ecs:us-east-1:123456789012:cluster/my-mixed-cluster"
  string cluster_name = 1 [
    (buf.validate.field).required = true
  ];

  // service_name is a unique identifier for the ECS service within the cluster.
  // Must be unique per ECS cluster; recommended length is 3–63 characters.
  // Example: "my-ecs-service"
  string service_name = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).cel = {
      id: "service_name_length",
      expression: "size(this) >= 3 && size(this) <= 63",
      message: "service_name must be 3-63 characters"
    }
  ];

  // image is the container image URI (e.g., an ECR or Docker Hub path).
  // Example: "amazonlinux:2" or "123456789012.dkr.ecr.us-east-1.amazonaws.com/myapp:latest"
  string image = 3 [
    (buf.validate.field).required = true
  ];

  // container_port is the port inside the container that should be exposed to receive traffic.
  // This is optional if the service doesn't need inbound requests (e.g., a background worker).
  // Example: 80 for HTTP
  int32 container_port = 4;

  // desired_count is the number of task replicas to run for this service.
  // Defaults to 1 if not specified; higher values improve availability at increased cost.
  int32 desired_count = 5 [
    (project.planton.shared.options.recommended_default) = "1"
  ];

  // cpu is the amount of vCPU (in CPU units) to allocate for the entire task.
  // Valid Fargate values include 256, 512, 1024, 2048, etc., subject to ECS constraints.
  // Example: 512
  int32 cpu = 6 [
    (buf.validate.field).required = true
  ];

  // memory is the total MiB of RAM for the task.
  // Valid values depend on CPU. For example, 512 CPU can pair with 1024–4096 MiB.
  // Example: 1024
  int32 memory = 7 [
    (buf.validate.field).required = true
  ];

  // subnets is a list of VPC subnet IDs where the Fargate tasks will run.
  // Typically private subnets for production, often at least two for high availability.
  repeated string subnets = 8 [
    (buf.validate.field).required = true,
    (buf.validate.field).repeated = {
      unique: true
    }
  ];

  // security_groups is a list of security group IDs to apply to each task's ENI.
  // If not provided, ECS may use the default VPC security group, which is not ideal for production.
  repeated string security_groups = 9 [
    (buf.validate.field).repeated = {
      unique: true
    }
  ];

  // assign_public_ip indicates whether to assign a public IP to the Fargate task ENI.
  // Default is false for most production services behind a load balancer or NAT.
  bool assign_public_ip = 10 [
    (project.planton.shared.options.recommended_default) = "false"
  ];

  // task_execution_role_arn is the IAM role used by ECS to pull private images and write logs.
  // If omitted, a default "ecsTaskExecutionRole" may be assumed, but it must already exist.
  // Example: "arn:aws:iam::123456789012:role/ecsTaskExecutionRole"
  string task_execution_role_arn = 11;

  // task_role_arn is the IAM role your container uses if it needs AWS permissions.
  // Omit if your container does not call AWS APIs.
  // Example: "arn:aws:iam::123456789012:role/myAppTaskRole"
  string task_role_arn = 12;

  // environment defines optional environment variables for the container.
  // If secrets are needed, consider referencing AWS Secrets Manager or SSM.
  repeated EnvironmentVar environment = 13;

  // EnvironmentVar is an individual environment variable.
  message EnvironmentVar {
    // name is the environment variable key, e.g. "REDIS_URL".
    string name = 1 [
      (buf.validate.field).required = true
    ];

    // value is the environment variable value, which can be plain text or a placeholder for a secret.
    string value = 2;
  }
}
