// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/aws/awsec2instance/v1/spec.proto

package awsec2instancev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/project-planton/project-planton/apis/project/planton/shared/foreignkey/v1"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Defines the possible connection methods for accessing the EC2 instance.
type AwsEc2InstanceConnectionMethod int32

const (
	// Use AWS Systems Manager (Session Manager) for instance access.
	// This is the default method, which does not require an SSH key but does require an IAM role for SSM.
	AwsEc2InstanceConnectionMethod_SSM AwsEc2InstanceConnectionMethod = 0
	// Use a bastion host or direct SSH with a key pair to access the instance.
	// Requires a key_name to be specified for the instance.
	AwsEc2InstanceConnectionMethod_BASTION AwsEc2InstanceConnectionMethod = 1
	// Use AWS EC2 Instance Connect for temporary SSH key access.
	// Also requires a key_name for the instance (keys are injected on-demand).
	AwsEc2InstanceConnectionMethod_INSTANCE_CONNECT AwsEc2InstanceConnectionMethod = 2
)

// Enum value maps for AwsEc2InstanceConnectionMethod.
var (
	AwsEc2InstanceConnectionMethod_name = map[int32]string{
		0: "SSM",
		1: "BASTION",
		2: "INSTANCE_CONNECT",
	}
	AwsEc2InstanceConnectionMethod_value = map[string]int32{
		"SSM":              0,
		"BASTION":          1,
		"INSTANCE_CONNECT": 2,
	}
)

func (x AwsEc2InstanceConnectionMethod) Enum() *AwsEc2InstanceConnectionMethod {
	p := new(AwsEc2InstanceConnectionMethod)
	*p = x
	return p
}

func (x AwsEc2InstanceConnectionMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AwsEc2InstanceConnectionMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_provider_aws_awsec2instance_v1_spec_proto_enumTypes[0].Descriptor()
}

func (AwsEc2InstanceConnectionMethod) Type() protoreflect.EnumType {
	return &file_project_planton_provider_aws_awsec2instance_v1_spec_proto_enumTypes[0]
}

func (x AwsEc2InstanceConnectionMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AwsEc2InstanceConnectionMethod.Descriptor instead.
func (AwsEc2InstanceConnectionMethod) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsec2instance_v1_spec_proto_rawDescGZIP(), []int{0}
}

// AwsEc2InstanceSpec defines the user configuration for launching a single EC2 virtual machine instance in a private subnet.
// It encapsulates essential parameters like the AMI ID, instance type, networking and security settings, and connectivity method (SSM or SSH).
// The spec follows the 80/20 rule, exposing only the most commonly needed fields for a typical production scenario.
// This includes specifying the target subnet (usually a private subnet in an existing VPC) and security groups for networking,
// selecting an AMI and instance type for the VM, and choosing a connection method (Session Manager or SSH) which determines
// required fields for access (either an IAM instance profile for SSM or an SSH key pair).
// Optional fields cover user data scripts and instance-level configurations like EBS optimization and termination protection.
// By keeping the API minimal and focused, this resource can be easily composed with other resources (like VPCs, security groups, and IAM roles)
// to deploy an EC2 instance according to typical infrastructure patterns.
type AwsEc2InstanceSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name of the EC2 instance.
	InstanceName string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	// Amazon Machine Image ID to use for launching the instance.
	// This is the unique identifier of the OS image (AMI) that the EC2 will run.
	// Example: "ami-0abcdef1234567890" for an Ubuntu or Amazon Linux image.
	AmiId string `protobuf:"bytes,2,opt,name=ami_id,json=amiId,proto3" json:"ami_id,omitempty"`
	// EC2 instance type (flavor) determining vCPU count and memory.
	// Example: "t3.small" (2 vCPUs, 2 GiB RAM) or "m5.large" (2 vCPUs, 8 GiB RAM).
	InstanceType string `protobuf:"bytes,3,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	// Reference to the target subnet where this instance will reside.
	// This should be a private subnet within an existing VPC.
	// The default kind expects an AwsVpc resource, using one of its private subnet IDs.
	SubnetId *v1.StringValueOrRef `protobuf:"bytes,4,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	// One or more security group IDs to attach to the instance's network interface.
	// These security groups control inbound/outbound traffic for the instance.
	// Typically includes at least one security group for application or SSH access.
	SecurityGroupIds []*v1.StringValueOrRef `protobuf:"bytes,5,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	// Method for connecting to the instance for administration or SSH access.
	// - SSM: Use AWS Systems Manager Session Manager (no SSH key needed, requires an IAM instance profile with SSM permissions).
	// - BASTION: Use a traditional SSH method with a key pair (requires a key_name for the EC2 instance).
	// - INSTANCE_CONNECT: Use AWS EC2 Instance Connect (temporary key injection, also requires a key_name).
	ConnectionMethod AwsEc2InstanceConnectionMethod `protobuf:"varint,6,opt,name=connection_method,json=connectionMethod,proto3,enum=project.planton.provider.aws.awsec2instance.v1.AwsEc2InstanceConnectionMethod" json:"connection_method,omitempty"`
	// The ARN of an IAM instance profile to attach to the EC2 instance.
	// This profile should include an IAM role with necessary permissions (for example, SSM Session Manager access if using SSM).
	// **Required if** connection_method is SSM; optional otherwise.
	IamInstanceProfileArn *v1.StringValueOrRef `protobuf:"bytes,7,opt,name=iam_instance_profile_arn,json=iamInstanceProfileArn,proto3" json:"iam_instance_profile_arn,omitempty"`
	// The name of an EC2 Key Pair to associate with the instance for SSH access.
	// This is the key pair name as created in AWS (not the public key material).
	// **Required if** connection_method is BASTION or INSTANCE_CONNECT; not used for SSM.
	KeyName string `protobuf:"bytes,8,opt,name=key_name,json=keyName,proto3" json:"key_name,omitempty"`
	// Size of the root EBS volume in GiB.
	// This defines the storage capacity for the instance's root filesystem.
	// Defaults to 30 GiB if not specified.
	RootVolumeSizeGb int32 `protobuf:"varint,9,opt,name=root_volume_size_gb,json=rootVolumeSizeGb,proto3" json:"root_volume_size_gb,omitempty"`
	// Map of tags to apply to the EC2 instance.
	// Tags are key-value pairs for metadata and organization of AWS resources (e.g., {"env": "production", "app": "web"}).
	Tags map[string]string `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// User data script to provide when launching the instance (cloud-init or shell script).
	// This can be a plaintext or base64-encoded string, up to 32 KiB.
	// Use this to perform initial configuration on boot (install packages, configure software, etc.).
	UserData string `protobuf:"bytes,11,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"`
	// Enable EBS optimization for the instance (if supported by the instance type).
	// When true, the instance uses dedicated throughput for EBS I/O, which can improve performance for I/O-intensive workloads.
	EbsOptimized bool `protobuf:"varint,12,opt,name=ebs_optimized,json=ebsOptimized,proto3" json:"ebs_optimized,omitempty"`
	// If true, prevents the instance from being terminated via the AWS API (enables termination protection).
	// This adds a safety measure against accidental deletion of the instance.
	DisableApiTermination bool `protobuf:"varint,13,opt,name=disable_api_termination,json=disableApiTermination,proto3" json:"disable_api_termination,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *AwsEc2InstanceSpec) Reset() {
	*x = AwsEc2InstanceSpec{}
	mi := &file_project_planton_provider_aws_awsec2instance_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsEc2InstanceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsEc2InstanceSpec) ProtoMessage() {}

func (x *AwsEc2InstanceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsec2instance_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsEc2InstanceSpec.ProtoReflect.Descriptor instead.
func (*AwsEc2InstanceSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsec2instance_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AwsEc2InstanceSpec) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *AwsEc2InstanceSpec) GetAmiId() string {
	if x != nil {
		return x.AmiId
	}
	return ""
}

func (x *AwsEc2InstanceSpec) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *AwsEc2InstanceSpec) GetSubnetId() *v1.StringValueOrRef {
	if x != nil {
		return x.SubnetId
	}
	return nil
}

func (x *AwsEc2InstanceSpec) GetSecurityGroupIds() []*v1.StringValueOrRef {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *AwsEc2InstanceSpec) GetConnectionMethod() AwsEc2InstanceConnectionMethod {
	if x != nil {
		return x.ConnectionMethod
	}
	return AwsEc2InstanceConnectionMethod_SSM
}

func (x *AwsEc2InstanceSpec) GetIamInstanceProfileArn() *v1.StringValueOrRef {
	if x != nil {
		return x.IamInstanceProfileArn
	}
	return nil
}

func (x *AwsEc2InstanceSpec) GetKeyName() string {
	if x != nil {
		return x.KeyName
	}
	return ""
}

func (x *AwsEc2InstanceSpec) GetRootVolumeSizeGb() int32 {
	if x != nil {
		return x.RootVolumeSizeGb
	}
	return 0
}

func (x *AwsEc2InstanceSpec) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AwsEc2InstanceSpec) GetUserData() string {
	if x != nil {
		return x.UserData
	}
	return ""
}

func (x *AwsEc2InstanceSpec) GetEbsOptimized() bool {
	if x != nil {
		return x.EbsOptimized
	}
	return false
}

func (x *AwsEc2InstanceSpec) GetDisableApiTermination() bool {
	if x != nil {
		return x.DisableApiTermination
	}
	return false
}

var File_project_planton_provider_aws_awsec2instance_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_aws_awsec2instance_v1_spec_proto_rawDesc = "" +
	"\n" +
	"9project/planton/provider/aws/awsec2instance/v1/spec.proto\x12.project.planton.provider.aws.awsec2instance.v1\x1a\x1bbuf/validate/validate.proto\x1a6project/planton/shared/foreignkey/v1/foreign_key.proto\x1a,project/planton/shared/options/options.proto\"\xbc\f\n" +
	"\x12AwsEc2InstanceSpec\x12/\n" +
	"\rinstance_name\x18\x01 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x10\x01R\finstanceName\x12(\n" +
	"\x06ami_id\x18\x02 \x01(\tB\x11\xbaH\x0e\xc8\x01\x01r\t\x10\x012\x05^ami-R\x05amiId\x12/\n" +
	"\rinstance_type\x18\x03 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x10\x01R\finstanceType\x12\x85\x01\n" +
	"\tsubnet_id\x18\x04 \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB0\xbaH\x03\xc8\x01\x01\x88\xd4a\xd9\x01\x92\xd4a!status.outputs.private_subnets.idR\bsubnetId\x12\x9a\x01\n" +
	"\x12security_group_ids\x18\x05 \x03(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB4\xbaH\b\xc8\x01\x01\x92\x01\x02\b\x01\x88\xd4a\xd7\x01\x92\xd4a status.outputs.security_group_idR\x10securityGroupIds\x12\x8c\x01\n" +
	"\x11connection_method\x18\x06 \x01(\x0e2N.project.planton.provider.aws.awsec2instance.v1.AwsEc2InstanceConnectionMethodB\x0f\xbaH\x05\x82\x01\x02\x10\x01\x8a\xa6\x1d\x03SSMR\x10connectionMethod\x12\x91\x01\n" +
	"\x18iam_instance_profile_arn\x18\a \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB \x88\xd4a\xd0\x01\x92\xd4a\x17status.outputs.role_arnR\x15iamInstanceProfileArn\x12\x19\n" +
	"\bkey_name\x18\b \x01(\tR\akeyName\x12<\n" +
	"\x13root_volume_size_gb\x18\t \x01(\x05B\r\xbaH\x04\x1a\x02 \x00\x8a\xa6\x1d\x0230R\x10rootVolumeSizeGb\x12`\n" +
	"\x04tags\x18\n" +
	" \x03(\v2L.project.planton.provider.aws.awsec2instance.v1.AwsEc2InstanceSpec.TagsEntryR\x04tags\x12&\n" +
	"\tuser_data\x18\v \x01(\tB\t\xbaH\x06r\x04(\x80\x80\x02R\buserData\x12#\n" +
	"\rebs_optimized\x18\f \x01(\bR\febsOptimized\x126\n" +
	"\x17disable_api_termination\x18\r \x01(\bR\x15disableApiTermination\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01:\xd8\x03\xbaH\xd4\x03\x1a\x90\x02\n" +
	"\x18ssm_requires_iam_profile\x12Biam_instance_profile_arn must be set when connection_method is SSM\x1a\xaf\x01this.connection_method == 0 ? ((has(this.iam_instance_profile_arn.value) && this.iam_instance_profile_arn.value != \"\") || has(this.iam_instance_profile_arn.value_from)) : true\x1a\xbe\x01\n" +
	"\x15ssh_requires_key_name\x12Jkey_name must be set when connection_method is BASTION or INSTANCE_CONNECT\x1aY(this.connection_method == 1 || this.connection_method == 2) ? this.key_name != \"\" : true*L\n" +
	"\x1eAwsEc2InstanceConnectionMethod\x12\a\n" +
	"\x03SSM\x10\x00\x12\v\n" +
	"\aBASTION\x10\x01\x12\x14\n" +
	"\x10INSTANCE_CONNECT\x10\x02B\x8f\x03\n" +
	"2com.project.planton.provider.aws.awsec2instance.v1B\tSpecProtoP\x01Zogithub.com/project-planton/project-planton/apis/project/planton/provider/aws/awsec2instance/v1;awsec2instancev1\xa2\x02\x05PPPAA\xaa\x02.Project.Planton.Provider.Aws.Awsec2instance.V1\xca\x02.Project\\Planton\\Provider\\Aws\\Awsec2instance\\V1\xe2\x02:Project\\Planton\\Provider\\Aws\\Awsec2instance\\V1\\GPBMetadata\xea\x023Project::Planton::Provider::Aws::Awsec2instance::V1b\x06proto3"

var (
	file_project_planton_provider_aws_awsec2instance_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_awsec2instance_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_aws_awsec2instance_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_awsec2instance_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_awsec2instance_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awsec2instance_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awsec2instance_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_aws_awsec2instance_v1_spec_proto_rawDescData
}

var file_project_planton_provider_aws_awsec2instance_v1_spec_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_project_planton_provider_aws_awsec2instance_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_project_planton_provider_aws_awsec2instance_v1_spec_proto_goTypes = []any{
	(AwsEc2InstanceConnectionMethod)(0), // 0: project.planton.provider.aws.awsec2instance.v1.AwsEc2InstanceConnectionMethod
	(*AwsEc2InstanceSpec)(nil),          // 1: project.planton.provider.aws.awsec2instance.v1.AwsEc2InstanceSpec
	nil,                                 // 2: project.planton.provider.aws.awsec2instance.v1.AwsEc2InstanceSpec.TagsEntry
	(*v1.StringValueOrRef)(nil),         // 3: project.planton.shared.foreignkey.v1.StringValueOrRef
}
var file_project_planton_provider_aws_awsec2instance_v1_spec_proto_depIdxs = []int32{
	3, // 0: project.planton.provider.aws.awsec2instance.v1.AwsEc2InstanceSpec.subnet_id:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	3, // 1: project.planton.provider.aws.awsec2instance.v1.AwsEc2InstanceSpec.security_group_ids:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	0, // 2: project.planton.provider.aws.awsec2instance.v1.AwsEc2InstanceSpec.connection_method:type_name -> project.planton.provider.aws.awsec2instance.v1.AwsEc2InstanceConnectionMethod
	3, // 3: project.planton.provider.aws.awsec2instance.v1.AwsEc2InstanceSpec.iam_instance_profile_arn:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	2, // 4: project.planton.provider.aws.awsec2instance.v1.AwsEc2InstanceSpec.tags:type_name -> project.planton.provider.aws.awsec2instance.v1.AwsEc2InstanceSpec.TagsEntry
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_awsec2instance_v1_spec_proto_init() }
func file_project_planton_provider_aws_awsec2instance_v1_spec_proto_init() {
	if File_project_planton_provider_aws_awsec2instance_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awsec2instance_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awsec2instance_v1_spec_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_awsec2instance_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_awsec2instance_v1_spec_proto_depIdxs,
		EnumInfos:         file_project_planton_provider_aws_awsec2instance_v1_spec_proto_enumTypes,
		MessageInfos:      file_project_planton_provider_aws_awsec2instance_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_awsec2instance_v1_spec_proto = out.File
	file_project_planton_provider_aws_awsec2instance_v1_spec_proto_goTypes = nil
	file_project_planton_provider_aws_awsec2instance_v1_spec_proto_depIdxs = nil
}
