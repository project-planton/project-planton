syntax = "proto3";

package project.planton.provider.aws.awsec2instance.v1;

import "buf/validate/validate.proto";
import "project/planton/shared/foreignkey/v1/foreign_key.proto";
import "project/planton/shared/options/options.proto";

// AwsEc2InstanceSpec defines the user configuration for launching a single EC2 virtual machine instance in a private subnet.
// It encapsulates essential parameters like the AMI ID, instance type, networking and security settings, and connectivity method (SSM or SSH).
// The spec follows the 80/20 rule, exposing only the most commonly needed fields for a typical production scenario.
// This includes specifying the target subnet (usually a private subnet in an existing VPC) and security groups for networking,
// selecting an AMI and instance type for the VM, and choosing a connection method (Session Manager or SSH) which determines
// required fields for access (either an IAM instance profile for SSM or an SSH key pair).
// Optional fields cover user data scripts and instance-level configurations like EBS optimization and termination protection.
// By keeping the API minimal and focused, this resource can be easily composed with other resources (like VPCs, security groups, and IAM roles)
// to deploy an EC2 instance according to typical infrastructure patterns.
message AwsEc2InstanceSpec {
  //name of the EC2 instance.
  string instance_name = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1
  ];
  // Amazon Machine Image ID to use for launching the instance.
  // This is the unique identifier of the OS image (AMI) that the EC2 will run.
  // Example: "ami-0abcdef1234567890" for an Ubuntu or Amazon Linux image.
  string ami_id = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.pattern = "^ami-"
  ];

  // EC2 instance type (flavor) determining vCPU count and memory.
  // Example: "t3.small" (2 vCPUs, 2 GiB RAM) or "m5.large" (2 vCPUs, 8 GiB RAM).
  string instance_type = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.min_len = 1
  ];

  // Reference to the target subnet where this instance will reside.
  // This should be a private subnet within an existing VPC.
  // The default kind expects an AwsVpc resource, using one of its private subnet IDs.
  project.planton.shared.foreignkey.v1.StringValueOrRef subnet_id = 4 [
    (buf.validate.field).required = true,
    (project.planton.shared.foreignkey.v1.default_kind) = AwsVpc,
    (project.planton.shared.foreignkey.v1.default_kind_field_path) = "status.outputs.private_subnets.id"
  ];

  // One or more security group IDs to attach to the instance's network interface.
  // These security groups control inbound/outbound traffic for the instance.
  // Typically includes at least one security group for application or SSH access.
  repeated project.planton.shared.foreignkey.v1.StringValueOrRef security_group_ids = 5 [
    (buf.validate.field).required = true,
    (buf.validate.field).repeated.min_items = 1,
    (project.planton.shared.foreignkey.v1.default_kind) = AwsSecurityGroup,
    (project.planton.shared.foreignkey.v1.default_kind_field_path) = "status.outputs.security_group_id"
  ];

  // Method for connecting to the instance for administration or SSH access.
  // - SSM: Use AWS Systems Manager Session Manager (no SSH key needed, requires an IAM instance profile with SSM permissions).
  // - BASTION: Use a traditional SSH method with a key pair (requires a key_name for the EC2 instance).
  // - INSTANCE_CONNECT: Use AWS EC2 Instance Connect (temporary key injection, also requires a key_name).
  optional AwsEc2InstanceConnectionMethod connection_method = 6 [
    (project.planton.shared.options.default) = "SSM",
    (buf.validate.field).enum.defined_only = true
  ];

  // The ARN of an IAM instance profile to attach to the EC2 instance.
  // This profile should include an IAM role with necessary permissions (for example, SSM Session Manager access if using SSM).
  // **Required if** connection_method is SSM; optional otherwise.
  project.planton.shared.foreignkey.v1.StringValueOrRef iam_instance_profile_arn = 7 [
    (project.planton.shared.foreignkey.v1.default_kind) = AwsIamRole,
    (project.planton.shared.foreignkey.v1.default_kind_field_path) = "status.outputs.role_arn"
  ];

  // The name of an EC2 Key Pair to associate with the instance for SSH access.
  // This is the key pair name as created in AWS (not the public key material).
  // **Required if** connection_method is BASTION or INSTANCE_CONNECT; not used for SSM.
  string key_name = 8;

  // Size of the root EBS volume in GiB.
  // This defines the storage capacity for the instance's root filesystem.
  // Defaults to 30 GiB if not specified.
  optional int32 root_volume_size_gb = 9 [
    (project.planton.shared.options.default) = "30",
    (buf.validate.field).int32.gt = 0
  ];

  // Map of tags to apply to the EC2 instance.
  // Tags are key-value pairs for metadata and organization of AWS resources (e.g., {"env": "production", "app": "web"}).
  map<string, string> tags = 10;

  // User data script to provide when launching the instance (cloud-init or shell script).
  // This can be a plaintext or base64-encoded string, up to 32 KiB.
  // Use this to perform initial configuration on boot (install packages, configure software, etc.).
  string user_data = 11 [(buf.validate.field).string.max_bytes = 32768];

  // Enable EBS optimization for the instance (if supported by the instance type).
  // When true, the instance uses dedicated throughput for EBS I/O, which can improve performance for I/O-intensive workloads.
  bool ebs_optimized = 12;

  // If true, prevents the instance from being terminated via the AWS API (enables termination protection).
  // This adds a safety measure against accidental deletion of the instance.
  bool disable_api_termination = 13;

  option (buf.validate.message).cel = {
    id: "ssm_requires_iam_profile"
    message: "iam_instance_profile_arn must be set when connection_method is SSM"
    expression: "this.connection_method == 0 ? ((has(this.iam_instance_profile_arn.value) && this.iam_instance_profile_arn.value != \"\") || has(this.iam_instance_profile_arn.value_from)) : true"
  };

  option (buf.validate.message).cel = {
    id: "ssh_requires_key_name"
    message: "key_name must be set when connection_method is BASTION or INSTANCE_CONNECT"
    expression: "(this.connection_method == 1 || this.connection_method == 2) ? this.key_name != \"\" : true"
  };
}

// Defines the possible connection methods for accessing the EC2 instance.
enum AwsEc2InstanceConnectionMethod {
  // Use AWS Systems Manager (Session Manager) for instance access.
  // This is the default method, which does not require an SSH key but does require an IAM role for SSM.
  SSM = 0;

  // Use a bastion host or direct SSH with a key pair to access the instance.
  // Requires a key_name to be specified for the instance.
  BASTION = 1;

  // Use AWS EC2 Instance Connect for temporary SSH key access.
  // Also requires a key_name for the instance (keys are injected on-demand).
  INSTANCE_CONNECT = 2;
}
