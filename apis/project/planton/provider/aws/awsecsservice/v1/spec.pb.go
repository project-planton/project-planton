// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/aws/awsecsservice/v1/spec.proto

package awsecsservicev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AwsEcsServiceSpec captures the minimal fields needed to deploy a Fargate-based ECS service
// into an existing ECS cluster. It focuses on an 80/20 approach with an ALB-based ingress
// that can be path-based or hostname-based.
type AwsEcsServiceSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// cluster_arn is the ARN of the ECS cluster where this service will run.
	// This must already exist (created by a separate EcsCluster resource or otherwise).
	// Example: "arn:aws:ecs:us-east-1:123456789012:cluster/my-mixed-cluster"
	ClusterArn string `protobuf:"bytes,1,opt,name=cluster_arn,json=clusterArn,proto3" json:"cluster_arn,omitempty"`
	// AWS ECS Service container configuration.
	Container *AwsEcsServiceContainer `protobuf:"bytes,2,opt,name=container,proto3" json:"container,omitempty"`
	// ECS service network configuration.
	Network *AwsEcsServiceNetwork `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	// IAM configuration for the ECS service.
	Iam *AwsEcsServiceIam `protobuf:"bytes,4,opt,name=iam,proto3" json:"iam,omitempty"`
	// alb defines how an ALB fronts traffic to this ECS service, supporting path- or hostname-based routing.
	Alb           *AwsEcsServiceAlb `protobuf:"bytes,5,opt,name=alb,proto3" json:"alb,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsEcsServiceSpec) Reset() {
	*x = AwsEcsServiceSpec{}
	mi := &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsEcsServiceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsEcsServiceSpec) ProtoMessage() {}

func (x *AwsEcsServiceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsEcsServiceSpec.ProtoReflect.Descriptor instead.
func (*AwsEcsServiceSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AwsEcsServiceSpec) GetClusterArn() string {
	if x != nil {
		return x.ClusterArn
	}
	return ""
}

func (x *AwsEcsServiceSpec) GetContainer() *AwsEcsServiceContainer {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *AwsEcsServiceSpec) GetNetwork() *AwsEcsServiceNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *AwsEcsServiceSpec) GetIam() *AwsEcsServiceIam {
	if x != nil {
		return x.Iam
	}
	return nil
}

func (x *AwsEcsServiceSpec) GetAlb() *AwsEcsServiceAlb {
	if x != nil {
		return x.Alb
	}
	return nil
}

// AwsEcsServiceContainer is a wrapper for the container spec.
type AwsEcsServiceContainer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// container image
	Image *AwsEcsServiceContainerImage `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// container environment variables, secrets, and environment files
	Env *AwsEcsServiceContainerEnv `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	// container_port is the port inside the container that should be exposed to receive traffic.
	// This is optional if the service doesn't need inbound requests (e.g., a background worker).
	// Example: 80 for HTTP
	Port int32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// replicas is the number of task replicas to run for this service.
	// higher values improve availability at increased cost.
	Replicas int32 `protobuf:"varint,4,opt,name=replicas,proto3" json:"replicas,omitempty"`
	// cpu is the amount of vCPU (in CPU units) to allocate for the entire task.
	// Valid Fargate values include 256, 512, 1024, 2048, etc., subject to ECS constraints.
	// Example: 512
	Cpu int32 `protobuf:"varint,5,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// memory is the total MiB of RAM for the task.
	// Valid values depend on CPU. For example, 512 CPU can pair with 1024â€“4096 MiB.
	// Example: 1024
	Memory int32 `protobuf:"varint,6,opt,name=memory,proto3" json:"memory,omitempty"`
	// logging controls whether CloudWatch log configuration is injected automatically.
	Logging       *AwsEcsServiceContainerLogging `protobuf:"bytes,7,opt,name=logging,proto3" json:"logging,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsEcsServiceContainer) Reset() {
	*x = AwsEcsServiceContainer{}
	mi := &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsEcsServiceContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsEcsServiceContainer) ProtoMessage() {}

func (x *AwsEcsServiceContainer) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsEcsServiceContainer.ProtoReflect.Descriptor instead.
func (*AwsEcsServiceContainer) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *AwsEcsServiceContainer) GetImage() *AwsEcsServiceContainerImage {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *AwsEcsServiceContainer) GetEnv() *AwsEcsServiceContainerEnv {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *AwsEcsServiceContainer) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AwsEcsServiceContainer) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *AwsEcsServiceContainer) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *AwsEcsServiceContainer) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *AwsEcsServiceContainer) GetLogging() *AwsEcsServiceContainerLogging {
	if x != nil {
		return x.Logging
	}
	return nil
}

// AwsEcsServiceContainerLogging controls CloudWatch logging for the container.
type AwsEcsServiceContainerLogging struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true (default), the module auto-creates a CloudWatch Log Group
	// named "/ecs/<serviceName>" with 30-day retention and configures
	// the awslogs driver.
	Enabled       bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsEcsServiceContainerLogging) Reset() {
	*x = AwsEcsServiceContainerLogging{}
	mi := &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsEcsServiceContainerLogging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsEcsServiceContainerLogging) ProtoMessage() {}

func (x *AwsEcsServiceContainerLogging) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsEcsServiceContainerLogging.ProtoReflect.Descriptor instead.
func (*AwsEcsServiceContainerLogging) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *AwsEcsServiceContainerLogging) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// AwsEcsServiceContainerImage represents the container image information.
type AwsEcsServiceContainerImage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The repository of the image (e.g., "gcr.io/project/image").
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	// The tag of the image (e.g., "latest" or "1.0.0").
	Tag           string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsEcsServiceContainerImage) Reset() {
	*x = AwsEcsServiceContainerImage{}
	mi := &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsEcsServiceContainerImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsEcsServiceContainerImage) ProtoMessage() {}

func (x *AwsEcsServiceContainerImage) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsEcsServiceContainerImage.ProtoReflect.Descriptor instead.
func (*AwsEcsServiceContainerImage) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDescGZIP(), []int{3}
}

func (x *AwsEcsServiceContainerImage) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *AwsEcsServiceContainerImage) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

// AwsEcsServiceContainerEnv is a wrapper for environment variables, secrets, and files.
type AwsEcsServiceContainerEnv struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// map of environment variables to be set in the container.
	// The key is the name of the variable, and the value is the value to be set.
	Variables map[string]string `protobuf:"bytes,1,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// map of environment secrets to be set in the container.
	// The key is the name of the variable, and the value is the value to be set.
	// The value can be a plaintext value or a reference to a secret in AWS Secrets Manager or SSM Parameter Store.
	Secrets map[string]string `protobuf:"bytes,2,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// s3_files is a list of S3 URIs whose contents are loaded as environment variables
	// via the ECS "environmentFiles" feature.
	S3Files       []string `protobuf:"bytes,3,rep,name=s3_files,json=s3Files,proto3" json:"s3_files,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsEcsServiceContainerEnv) Reset() {
	*x = AwsEcsServiceContainerEnv{}
	mi := &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsEcsServiceContainerEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsEcsServiceContainerEnv) ProtoMessage() {}

func (x *AwsEcsServiceContainerEnv) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsEcsServiceContainerEnv.ProtoReflect.Descriptor instead.
func (*AwsEcsServiceContainerEnv) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDescGZIP(), []int{4}
}

func (x *AwsEcsServiceContainerEnv) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *AwsEcsServiceContainerEnv) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *AwsEcsServiceContainerEnv) GetS3Files() []string {
	if x != nil {
		return x.S3Files
	}
	return nil
}

// AwsEcsServiceNetwork defines the networking configuration for the ECS service.
type AwsEcsServiceNetwork struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// subnets is a list of VPC subnet IDs where the Fargate tasks will run.
	// Typically private subnets for production, often at least two for high availability.
	Subnets []string `protobuf:"bytes,1,rep,name=subnets,proto3" json:"subnets,omitempty"`
	// security_groups is a list of security group IDs to apply to each task's ENI.
	// If not provided, ECS may use the default VPC security group, which is not ideal for production.
	SecurityGroups []string `protobuf:"bytes,2,rep,name=security_groups,json=securityGroups,proto3" json:"security_groups,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AwsEcsServiceNetwork) Reset() {
	*x = AwsEcsServiceNetwork{}
	mi := &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsEcsServiceNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsEcsServiceNetwork) ProtoMessage() {}

func (x *AwsEcsServiceNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsEcsServiceNetwork.ProtoReflect.Descriptor instead.
func (*AwsEcsServiceNetwork) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDescGZIP(), []int{5}
}

func (x *AwsEcsServiceNetwork) GetSubnets() []string {
	if x != nil {
		return x.Subnets
	}
	return nil
}

func (x *AwsEcsServiceNetwork) GetSecurityGroups() []string {
	if x != nil {
		return x.SecurityGroups
	}
	return nil
}

// AWS ECS Service IAM configuration
type AwsEcsServiceIam struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// task_execution_role_arn is the IAM role used by ECS to pull private images and write logs.
	// If omitted, a default "ecsTaskExecutionRole" may be assumed, but it must already exist.
	// Example: "arn:aws:iam::123456789012:role/ecsTaskExecutionRole"
	TaskExecutionRoleArn string `protobuf:"bytes,1,opt,name=task_execution_role_arn,json=taskExecutionRoleArn,proto3" json:"task_execution_role_arn,omitempty"`
	// task_role_arn is the IAM role your container uses if it needs AWS permissions.
	// Omit if your container does not call AWS APIs.
	// Example: "arn:aws:iam::123456789012:role/myAppTaskRole"
	TaskRoleArn   string `protobuf:"bytes,2,opt,name=task_role_arn,json=taskRoleArn,proto3" json:"task_role_arn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsEcsServiceIam) Reset() {
	*x = AwsEcsServiceIam{}
	mi := &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsEcsServiceIam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsEcsServiceIam) ProtoMessage() {}

func (x *AwsEcsServiceIam) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsEcsServiceIam.ProtoReflect.Descriptor instead.
func (*AwsEcsServiceIam) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDescGZIP(), []int{6}
}

func (x *AwsEcsServiceIam) GetTaskExecutionRoleArn() string {
	if x != nil {
		return x.TaskExecutionRoleArn
	}
	return ""
}

func (x *AwsEcsServiceIam) GetTaskRoleArn() string {
	if x != nil {
		return x.TaskRoleArn
	}
	return ""
}

// AwsEcsServiceAlb indicates how an ALB fronts this ECS service, supporting path- or hostname-based routing.
type AwsEcsServiceAlb struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// enabled controls whether an ALB is used. If false, no ALB is attached.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// arn is the ARN of the ALB. Required if enabled = true.
	Arn string `protobuf:"bytes,2,opt,name=arn,proto3" json:"arn,omitempty"`
	// routingType can be "path" or "hostname" if enabled.
	// If "path", specify a path (e.g. "/my-service").
	// If "hostname", specify a hostname (e.g. "api.example.com").
	RoutingType string `protobuf:"bytes,3,opt,name=routing_type,json=routingType,proto3" json:"routing_type,omitempty"`
	// path is used if routingType = "path".
	Path string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	// hostname is used if routingType = "hostname".
	Hostname string `protobuf:"bytes,5,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// listener_port is the port on the ALB to forward traffic to.
	ListenerPort  int32 `protobuf:"varint,6,opt,name=listener_port,json=listenerPort,proto3" json:"listener_port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsEcsServiceAlb) Reset() {
	*x = AwsEcsServiceAlb{}
	mi := &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsEcsServiceAlb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsEcsServiceAlb) ProtoMessage() {}

func (x *AwsEcsServiceAlb) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsEcsServiceAlb.ProtoReflect.Descriptor instead.
func (*AwsEcsServiceAlb) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDescGZIP(), []int{7}
}

func (x *AwsEcsServiceAlb) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AwsEcsServiceAlb) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

func (x *AwsEcsServiceAlb) GetRoutingType() string {
	if x != nil {
		return x.RoutingType
	}
	return ""
}

func (x *AwsEcsServiceAlb) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *AwsEcsServiceAlb) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *AwsEcsServiceAlb) GetListenerPort() int32 {
	if x != nil {
		return x.ListenerPort
	}
	return 0
}

var File_project_planton_provider_aws_awsecsservice_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDesc = "" +
	"\n" +
	"8project/planton/provider/aws/awsecsservice/v1/spec.proto\x12-project.planton.provider.aws.awsecsservice.v1\x1a\x1bbuf/validate/validate.proto\x1a,project/planton/shared/options/options.proto\"\xb6\x03\n" +
	"\x11AwsEcsServiceSpec\x12'\n" +
	"\vcluster_arn\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\n" +
	"clusterArn\x12k\n" +
	"\tcontainer\x18\x02 \x01(\v2E.project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainerB\x06\xbaH\x03\xc8\x01\x01R\tcontainer\x12e\n" +
	"\anetwork\x18\x03 \x01(\v2C.project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceNetworkB\x06\xbaH\x03\xc8\x01\x01R\anetwork\x12Q\n" +
	"\x03iam\x18\x04 \x01(\v2?.project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceIamR\x03iam\x12Q\n" +
	"\x03alb\x18\x05 \x01(\v2?.project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceAlbR\x03alb\"\xaf\x03\n" +
	"\x16AwsEcsServiceContainer\x12`\n" +
	"\x05image\x18\x01 \x01(\v2J.project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainerImageR\x05image\x12Z\n" +
	"\x03env\x18\x02 \x01(\v2H.project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainerEnvR\x03env\x12\x12\n" +
	"\x04port\x18\x03 \x01(\x05R\x04port\x12!\n" +
	"\breplicas\x18\x04 \x01(\x05B\x05\x92\xa6\x1d\x011R\breplicas\x12\x18\n" +
	"\x03cpu\x18\x05 \x01(\x05B\x06\xbaH\x03\xc8\x01\x01R\x03cpu\x12\x1e\n" +
	"\x06memory\x18\x06 \x01(\x05B\x06\xbaH\x03\xc8\x01\x01R\x06memory\x12f\n" +
	"\alogging\x18\a \x01(\v2L.project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainerLoggingR\alogging\"C\n" +
	"\x1dAwsEcsServiceContainerLogging\x12\"\n" +
	"\aenabled\x18\x01 \x01(\bB\b\x92\xa6\x1d\x04trueR\aenabled\"C\n" +
	"\x1bAwsEcsServiceContainerImage\x12\x12\n" +
	"\x04repo\x18\x01 \x01(\tR\x04repo\x12\x10\n" +
	"\x03tag\x18\x02 \x01(\tR\x03tag\"\xa2\x03\n" +
	"\x19AwsEcsServiceContainerEnv\x12u\n" +
	"\tvariables\x18\x01 \x03(\v2W.project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainerEnv.VariablesEntryR\tvariables\x12o\n" +
	"\asecrets\x18\x02 \x03(\v2U.project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainerEnv.SecretsEntryR\asecrets\x12#\n" +
	"\bs3_files\x18\x03 \x03(\tB\b\xbaH\x05\x92\x01\x02\x18\x01R\as3Files\x1a<\n" +
	"\x0eVariablesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a:\n" +
	"\fSecretsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"p\n" +
	"\x14AwsEcsServiceNetwork\x12%\n" +
	"\asubnets\x18\x01 \x03(\tB\v\xbaH\b\xc8\x01\x01\x92\x01\x02\x18\x01R\asubnets\x121\n" +
	"\x0fsecurity_groups\x18\x02 \x03(\tB\b\xbaH\x05\x92\x01\x02\x18\x01R\x0esecurityGroups\"m\n" +
	"\x10AwsEcsServiceIam\x125\n" +
	"\x17task_execution_role_arn\x18\x01 \x01(\tR\x14taskExecutionRoleArn\x12\"\n" +
	"\rtask_role_arn\x18\x02 \x01(\tR\vtaskRoleArn\"\xdb\x01\n" +
	"\x10AwsEcsServiceAlb\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12\x10\n" +
	"\x03arn\x18\x02 \x01(\tR\x03arn\x128\n" +
	"\frouting_type\x18\x03 \x01(\tB\x15\xbaH\x12r\x10R\x04pathR\bhostnameR\vroutingType\x12\x12\n" +
	"\x04path\x18\x04 \x01(\tR\x04path\x12\x1a\n" +
	"\bhostname\x18\x05 \x01(\tR\bhostname\x121\n" +
	"\rlistener_port\x18\x06 \x01(\x05B\f\xbaH\x03\xc8\x01\x01\x92\xa6\x1d\x0280R\flistenerPortB\x88\x03\n" +
	"1com.project.planton.provider.aws.awsecsservice.v1B\tSpecProtoP\x01Zmgithub.com/project-planton/project-planton/apis/project/planton/provider/aws/awsecsservice/v1;awsecsservicev1\xa2\x02\x05PPPAA\xaa\x02-Project.Planton.Provider.Aws.Awsecsservice.V1\xca\x02-Project\\Planton\\Provider\\Aws\\Awsecsservice\\V1\xe2\x029Project\\Planton\\Provider\\Aws\\Awsecsservice\\V1\\GPBMetadata\xea\x022Project::Planton::Provider::Aws::Awsecsservice::V1b\x06proto3"

var (
	file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDescData
}

var file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_project_planton_provider_aws_awsecsservice_v1_spec_proto_goTypes = []any{
	(*AwsEcsServiceSpec)(nil),             // 0: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceSpec
	(*AwsEcsServiceContainer)(nil),        // 1: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainer
	(*AwsEcsServiceContainerLogging)(nil), // 2: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainerLogging
	(*AwsEcsServiceContainerImage)(nil),   // 3: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainerImage
	(*AwsEcsServiceContainerEnv)(nil),     // 4: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainerEnv
	(*AwsEcsServiceNetwork)(nil),          // 5: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceNetwork
	(*AwsEcsServiceIam)(nil),              // 6: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceIam
	(*AwsEcsServiceAlb)(nil),              // 7: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceAlb
	nil,                                   // 8: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainerEnv.VariablesEntry
	nil,                                   // 9: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainerEnv.SecretsEntry
}
var file_project_planton_provider_aws_awsecsservice_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceSpec.container:type_name -> project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainer
	5, // 1: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceSpec.network:type_name -> project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceNetwork
	6, // 2: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceSpec.iam:type_name -> project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceIam
	7, // 3: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceSpec.alb:type_name -> project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceAlb
	3, // 4: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainer.image:type_name -> project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainerImage
	4, // 5: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainer.env:type_name -> project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainerEnv
	2, // 6: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainer.logging:type_name -> project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainerLogging
	8, // 7: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainerEnv.variables:type_name -> project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainerEnv.VariablesEntry
	9, // 8: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainerEnv.secrets:type_name -> project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainerEnv.SecretsEntry
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_awsecsservice_v1_spec_proto_init() }
func file_project_planton_provider_aws_awsecsservice_v1_spec_proto_init() {
	if File_project_planton_provider_aws_awsecsservice_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_awsecsservice_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_awsecsservice_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_awsecsservice_v1_spec_proto = out.File
	file_project_planton_provider_aws_awsecsservice_v1_spec_proto_goTypes = nil
	file_project_planton_provider_aws_awsecsservice_v1_spec_proto_depIdxs = nil
}
