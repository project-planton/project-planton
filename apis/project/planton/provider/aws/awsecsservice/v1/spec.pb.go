// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/provider/aws/awsecsservice/v1/spec.proto

package awsecsservicev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AwsEcsServiceAlbRoutingType int32

const (
	AwsEcsServiceAlbRoutingType_aws_ecs_service_alb_routing_type_unspecified AwsEcsServiceAlbRoutingType = 0
	// Path-based routing (e.g., "/my-service")
	AwsEcsServiceAlbRoutingType_path AwsEcsServiceAlbRoutingType = 1
	// Hostname-based routing (e.g., "api.example.com")
	AwsEcsServiceAlbRoutingType_hostname AwsEcsServiceAlbRoutingType = 2
)

// Enum value maps for AwsEcsServiceAlbRoutingType.
var (
	AwsEcsServiceAlbRoutingType_name = map[int32]string{
		0: "aws_ecs_service_alb_routing_type_unspecified",
		1: "path",
		2: "hostname",
	}
	AwsEcsServiceAlbRoutingType_value = map[string]int32{
		"aws_ecs_service_alb_routing_type_unspecified": 0,
		"path":     1,
		"hostname": 2,
	}
)

func (x AwsEcsServiceAlbRoutingType) Enum() *AwsEcsServiceAlbRoutingType {
	p := new(AwsEcsServiceAlbRoutingType)
	*p = x
	return p
}

func (x AwsEcsServiceAlbRoutingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AwsEcsServiceAlbRoutingType) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_provider_aws_awsecsservice_v1_spec_proto_enumTypes[0].Descriptor()
}

func (AwsEcsServiceAlbRoutingType) Type() protoreflect.EnumType {
	return &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_enumTypes[0]
}

func (x AwsEcsServiceAlbRoutingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AwsEcsServiceAlbRoutingType.Descriptor instead.
func (AwsEcsServiceAlbRoutingType) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDescGZIP(), []int{0}
}

// AwsEcsServiceSpec captures the minimal fields needed to deploy a Fargate-based ECS service
// into an existing ECS cluster. It focuses on an 80/20 approach with an ALB-based ingress
// that can be path-based or hostname-based.
type AwsEcsServiceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cluster_arn is the ARN of the ECS cluster where this service will run.
	// This must already exist (created by a separate EcsCluster resource or otherwise).
	// Example: "arn:aws:ecs:us-east-1:123456789012:cluster/my-mixed-cluster"
	ClusterArn string `protobuf:"bytes,1,opt,name=cluster_arn,json=clusterArn,proto3" json:"cluster_arn,omitempty"`
	// AWS ECS Service container configuration.
	Container *AwsEcsServiceContainer `protobuf:"bytes,2,opt,name=container,proto3" json:"container,omitempty"`
	// ECS service network configuration.
	Network *AwsEcsServiceNetwork `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	// IAM configuration for the ECS service.
	Iam *AwsEcsServiceIam `protobuf:"bytes,4,opt,name=iam,proto3" json:"iam,omitempty"`
	// alb defines how an ALB fronts traffic to this ECS service, supporting path- or hostname-based routing.
	Alb *AwsEcsServiceAlb `protobuf:"bytes,5,opt,name=alb,proto3" json:"alb,omitempty"`
}

func (x *AwsEcsServiceSpec) Reset() {
	*x = AwsEcsServiceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsEcsServiceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsEcsServiceSpec) ProtoMessage() {}

func (x *AwsEcsServiceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsEcsServiceSpec.ProtoReflect.Descriptor instead.
func (*AwsEcsServiceSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AwsEcsServiceSpec) GetClusterArn() string {
	if x != nil {
		return x.ClusterArn
	}
	return ""
}

func (x *AwsEcsServiceSpec) GetContainer() *AwsEcsServiceContainer {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *AwsEcsServiceSpec) GetNetwork() *AwsEcsServiceNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *AwsEcsServiceSpec) GetIam() *AwsEcsServiceIam {
	if x != nil {
		return x.Iam
	}
	return nil
}

func (x *AwsEcsServiceSpec) GetAlb() *AwsEcsServiceAlb {
	if x != nil {
		return x.Alb
	}
	return nil
}

// AwsEcsServiceContainer is a wrapper for the container spec.
type AwsEcsServiceContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// container image
	Image *AwsEcsServiceContainerImage `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// container environment variables and secrets
	Env *AwsEcsServiceContainerEnv `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	// container_port is the port inside the container that should be exposed to receive traffic.
	// This is optional if the service doesn't need inbound requests (e.g., a background worker).
	// Example: 80 for HTTP
	Port int32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// replicas is the number of task replicas to run for this service.
	// higher values improve availability at increased cost.
	Replicas int32 `protobuf:"varint,4,opt,name=replicas,proto3" json:"replicas,omitempty"`
	// cpu is the amount of vCPU (in CPU units) to allocate for the entire task.
	// Valid Fargate values include 256, 512, 1024, 2048, etc., subject to ECS constraints.
	// Example: 512
	Cpu int32 `protobuf:"varint,5,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// memory is the total MiB of RAM for the task.
	// Valid values depend on CPU. For example, 512 CPU can pair with 1024â€“4096 MiB.
	// Example: 1024
	Memory int32 `protobuf:"varint,6,opt,name=memory,proto3" json:"memory,omitempty"`
}

func (x *AwsEcsServiceContainer) Reset() {
	*x = AwsEcsServiceContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsEcsServiceContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsEcsServiceContainer) ProtoMessage() {}

func (x *AwsEcsServiceContainer) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsEcsServiceContainer.ProtoReflect.Descriptor instead.
func (*AwsEcsServiceContainer) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *AwsEcsServiceContainer) GetImage() *AwsEcsServiceContainerImage {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *AwsEcsServiceContainer) GetEnv() *AwsEcsServiceContainerEnv {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *AwsEcsServiceContainer) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AwsEcsServiceContainer) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *AwsEcsServiceContainer) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *AwsEcsServiceContainer) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

// AwsEcsServiceContainerImage represents the container image information.
type AwsEcsServiceContainerImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The repository of the image (e.g., "gcr.io/project/image").
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	// The tag of the image (e.g., "latest" or "1.0.0").
	Tag string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *AwsEcsServiceContainerImage) Reset() {
	*x = AwsEcsServiceContainerImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsEcsServiceContainerImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsEcsServiceContainerImage) ProtoMessage() {}

func (x *AwsEcsServiceContainerImage) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsEcsServiceContainerImage.ProtoReflect.Descriptor instead.
func (*AwsEcsServiceContainerImage) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *AwsEcsServiceContainerImage) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *AwsEcsServiceContainerImage) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

// AwsEcsServiceContainerEnv is a wrapper for environment variables and secrets.
type AwsEcsServiceContainerEnv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// map of environment variables to be set in the container.
	// The key is the name of the variable, and the value is the value to be set.
	Variables map[string]string `protobuf:"bytes,1,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// map of environment secrets to be set in the container.
	// The key is the name of the variable, and the value is the value to be set.
	// The value can be a plaintext value or a reference to a secret in AWS Secrets Manager or SSM Parameter Store.
	Secrets map[string]string `protobuf:"bytes,2,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AwsEcsServiceContainerEnv) Reset() {
	*x = AwsEcsServiceContainerEnv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsEcsServiceContainerEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsEcsServiceContainerEnv) ProtoMessage() {}

func (x *AwsEcsServiceContainerEnv) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsEcsServiceContainerEnv.ProtoReflect.Descriptor instead.
func (*AwsEcsServiceContainerEnv) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDescGZIP(), []int{3}
}

func (x *AwsEcsServiceContainerEnv) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *AwsEcsServiceContainerEnv) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

// AwsEcsServiceNetwork defines the networking configuration for the ECS service.
type AwsEcsServiceNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// subnets is a list of VPC subnet IDs where the Fargate tasks will run.
	// Typically private subnets for production, often at least two for high availability.
	Subnets []string `protobuf:"bytes,1,rep,name=subnets,proto3" json:"subnets,omitempty"`
	// security_groups is a list of security group IDs to apply to each task's ENI.
	// If not provided, ECS may use the default VPC security group, which is not ideal for production.
	SecurityGroups []string `protobuf:"bytes,2,rep,name=security_groups,json=securityGroups,proto3" json:"security_groups,omitempty"`
}

func (x *AwsEcsServiceNetwork) Reset() {
	*x = AwsEcsServiceNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsEcsServiceNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsEcsServiceNetwork) ProtoMessage() {}

func (x *AwsEcsServiceNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsEcsServiceNetwork.ProtoReflect.Descriptor instead.
func (*AwsEcsServiceNetwork) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDescGZIP(), []int{4}
}

func (x *AwsEcsServiceNetwork) GetSubnets() []string {
	if x != nil {
		return x.Subnets
	}
	return nil
}

func (x *AwsEcsServiceNetwork) GetSecurityGroups() []string {
	if x != nil {
		return x.SecurityGroups
	}
	return nil
}

// AWS ECS Service IAM configuration
type AwsEcsServiceIam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// task_execution_role_arn is the IAM role used by ECS to pull private images and write logs.
	// If omitted, a default "ecsTaskExecutionRole" may be assumed, but it must already exist.
	// Example: "arn:aws:iam::123456789012:role/ecsTaskExecutionRole"
	TaskExecutionRoleArn string `protobuf:"bytes,1,opt,name=task_execution_role_arn,json=taskExecutionRoleArn,proto3" json:"task_execution_role_arn,omitempty"`
	// task_role_arn is the IAM role your container uses if it needs AWS permissions.
	// Omit if your container does not call AWS APIs.
	// Example: "arn:aws:iam::123456789012:role/myAppTaskRole"
	TaskRoleArn string `protobuf:"bytes,2,opt,name=task_role_arn,json=taskRoleArn,proto3" json:"task_role_arn,omitempty"`
}

func (x *AwsEcsServiceIam) Reset() {
	*x = AwsEcsServiceIam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsEcsServiceIam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsEcsServiceIam) ProtoMessage() {}

func (x *AwsEcsServiceIam) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsEcsServiceIam.ProtoReflect.Descriptor instead.
func (*AwsEcsServiceIam) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDescGZIP(), []int{5}
}

func (x *AwsEcsServiceIam) GetTaskExecutionRoleArn() string {
	if x != nil {
		return x.TaskExecutionRoleArn
	}
	return ""
}

func (x *AwsEcsServiceIam) GetTaskRoleArn() string {
	if x != nil {
		return x.TaskRoleArn
	}
	return ""
}

// AwsEcsServiceAlb indicates how an ALB fronts this ECS service, supporting path- or hostname-based routing.
type AwsEcsServiceAlb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enabled controls whether an ALB is used. If false, no ALB is attached.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// arn is the ARN of the ALB. Required if enabled = true.
	Arn string `protobuf:"bytes,2,opt,name=arn,proto3" json:"arn,omitempty"`
	// routingType can be "PATH" or "HOSTNAME" if enabled.
	// If "PATH", specify a path (e.g. "/my-service").
	// If "HOSTNAME", specify a hostname (e.g. "api.example.com").
	RoutingType AwsEcsServiceAlbRoutingType `protobuf:"varint,3,opt,name=routing_type,json=routingType,proto3,enum=project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceAlbRoutingType" json:"routing_type,omitempty"`
	// path is used if routingType = "path".
	Path string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	// hostname is used if routingType = "hostname".
	Hostname string `protobuf:"bytes,5,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *AwsEcsServiceAlb) Reset() {
	*x = AwsEcsServiceAlb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsEcsServiceAlb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsEcsServiceAlb) ProtoMessage() {}

func (x *AwsEcsServiceAlb) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsEcsServiceAlb.ProtoReflect.Descriptor instead.
func (*AwsEcsServiceAlb) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDescGZIP(), []int{6}
}

func (x *AwsEcsServiceAlb) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AwsEcsServiceAlb) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

func (x *AwsEcsServiceAlb) GetRoutingType() AwsEcsServiceAlbRoutingType {
	if x != nil {
		return x.RoutingType
	}
	return AwsEcsServiceAlbRoutingType_aws_ecs_service_alb_routing_type_unspecified
}

func (x *AwsEcsServiceAlb) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *AwsEcsServiceAlb) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

var File_project_planton_provider_aws_awsecsservice_v1_spec_proto protoreflect.FileDescriptor

var file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDesc = []byte{
	0x0a, 0x38, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x61,
	0x77, 0x73, 0x65, 0x63, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2d, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x65, 0x63, 0x73, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x03, 0x0a, 0x11, 0x41, 0x77, 0x73, 0x45, 0x63, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x27, 0x0a, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x72, 0x6e, 0x12, 0x6b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x65, 0x63, 0x73, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x45, 0x63, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x12, 0x65, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73,
	0x2e, 0x61, 0x77, 0x73, 0x65, 0x63, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x77, 0x73, 0x45, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x51, 0x0a, 0x03, 0x69, 0x61, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x65, 0x63, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x45, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x61, 0x6d, 0x52, 0x03, 0x69, 0x61, 0x6d, 0x12, 0x51, 0x0a, 0x03, 0x61, 0x6c,
	0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x65, 0x63, 0x73, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x45, 0x63, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x62, 0x52, 0x03, 0x61, 0x6c, 0x62, 0x22, 0xc7, 0x02,
	0x0a, 0x16, 0x41, 0x77, 0x73, 0x45, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x60, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x65, 0x63, 0x73, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x45, 0x63, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x5a, 0x0a, 0x03, 0x65, 0x6e,
	0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x65, 0x63, 0x73, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x45, 0x63, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x6e,
	0x76, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x08, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x05, 0x92, 0xa6,
	0x1d, 0x01, 0x31, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x18, 0x0a,
	0x03, 0x63, 0x70, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x1e, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0x43, 0x0a, 0x1b, 0x41, 0x77, 0x73, 0x45, 0x63,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0xfd, 0x02, 0x0a,
	0x19, 0x41, 0x77, 0x73, 0x45, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x12, 0x75, 0x0a, 0x09, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73,
	0x65, 0x63, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77,
	0x73, 0x45, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x12, 0x6f, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x55, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77,
	0x73, 0x2e, 0x61, 0x77, 0x73, 0x65, 0x63, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x45, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x2e, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x70, 0x0a, 0x14,
	0x41, 0x77, 0x73, 0x45, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x25, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x92, 0x01, 0x02,
	0x18, 0x01, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x0f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x18, 0x01, 0x52, 0x0e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x6d,
	0x0a, 0x10, 0x41, 0x77, 0x73, 0x45, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x61, 0x6d, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x72, 0x6e, 0x22, 0xdd, 0x01,
	0x0a, 0x10, 0x41, 0x77, 0x73, 0x45, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x6c, 0x62, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x72, 0x6e, 0x12, 0x6d,
	0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x65, 0x63, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x45, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x6c, 0x62, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x67, 0x0a,
	0x1b, 0x41, 0x77, 0x73, 0x45, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c,
	0x62, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x2c,
	0x61, 0x77, 0x73, 0x5f, 0x65, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x6c, 0x62, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x10, 0x02, 0x42, 0x88, 0x03, 0x0a, 0x31, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x65,
	0x63, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x53, 0x70,
	0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x6d, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x61, 0x77, 0x73, 0x65, 0x63, 0x73, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x77, 0x73, 0x65, 0x63, 0x73, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x05, 0x50, 0x50, 0x50, 0x41, 0x41,
	0xaa, 0x02, 0x2d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x77, 0x73, 0x2e,
	0x41, 0x77, 0x73, 0x65, 0x63, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x2d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x41, 0x77, 0x73, 0x5c,
	0x41, 0x77, 0x73, 0x65, 0x63, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x39, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x41, 0x77, 0x73, 0x5c,
	0x41, 0x77, 0x73, 0x65, 0x63, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x32, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a,
	0x3a, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3a, 0x3a, 0x41, 0x77, 0x73, 0x3a, 0x3a,
	0x41, 0x77, 0x73, 0x65, 0x63, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDescData = file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDesc
)

func file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDescData)
	})
	return file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDescData
}

var file_project_planton_provider_aws_awsecsservice_v1_spec_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_project_planton_provider_aws_awsecsservice_v1_spec_proto_goTypes = []any{
	(AwsEcsServiceAlbRoutingType)(0),    // 0: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceAlbRoutingType
	(*AwsEcsServiceSpec)(nil),           // 1: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceSpec
	(*AwsEcsServiceContainer)(nil),      // 2: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainer
	(*AwsEcsServiceContainerImage)(nil), // 3: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainerImage
	(*AwsEcsServiceContainerEnv)(nil),   // 4: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainerEnv
	(*AwsEcsServiceNetwork)(nil),        // 5: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceNetwork
	(*AwsEcsServiceIam)(nil),            // 6: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceIam
	(*AwsEcsServiceAlb)(nil),            // 7: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceAlb
	nil,                                 // 8: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainerEnv.VariablesEntry
	nil,                                 // 9: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainerEnv.SecretsEntry
}
var file_project_planton_provider_aws_awsecsservice_v1_spec_proto_depIdxs = []int32{
	2, // 0: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceSpec.container:type_name -> project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainer
	5, // 1: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceSpec.network:type_name -> project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceNetwork
	6, // 2: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceSpec.iam:type_name -> project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceIam
	7, // 3: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceSpec.alb:type_name -> project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceAlb
	3, // 4: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainer.image:type_name -> project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainerImage
	4, // 5: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainer.env:type_name -> project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainerEnv
	8, // 6: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainerEnv.variables:type_name -> project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainerEnv.VariablesEntry
	9, // 7: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainerEnv.secrets:type_name -> project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceContainerEnv.SecretsEntry
	0, // 8: project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceAlb.routing_type:type_name -> project.planton.provider.aws.awsecsservice.v1.AwsEcsServiceAlbRoutingType
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_awsecsservice_v1_spec_proto_init() }
func file_project_planton_provider_aws_awsecsservice_v1_spec_proto_init() {
	if File_project_planton_provider_aws_awsecsservice_v1_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AwsEcsServiceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AwsEcsServiceContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AwsEcsServiceContainerImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*AwsEcsServiceContainerEnv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*AwsEcsServiceNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*AwsEcsServiceIam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*AwsEcsServiceAlb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_awsecsservice_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_awsecsservice_v1_spec_proto_depIdxs,
		EnumInfos:         file_project_planton_provider_aws_awsecsservice_v1_spec_proto_enumTypes,
		MessageInfos:      file_project_planton_provider_aws_awsecsservice_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_awsecsservice_v1_spec_proto = out.File
	file_project_planton_provider_aws_awsecsservice_v1_spec_proto_rawDesc = nil
	file_project_planton_provider_aws_awsecsservice_v1_spec_proto_goTypes = nil
	file_project_planton_provider_aws_awsecsservice_v1_spec_proto_depIdxs = nil
}
