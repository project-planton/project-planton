syntax = "proto3";

package project.planton.provider.aws.awsecsservice.v1;

import "buf/validate/validate.proto";
import "project/planton/shared/options/options.proto";

// AwsEcsServiceSpec captures the minimal fields needed to deploy a Fargate-based ECS service
// into an existing ECS cluster. It focuses on an 80/20 approach with an ALB-based ingress
// that can be path-based or hostname-based.
message AwsEcsServiceSpec {
  // cluster_arn is the ARN of the ECS cluster where this service will run.
  // This must already exist (created by a separate EcsCluster resource or otherwise).
  // Example: "arn:aws:ecs:us-east-1:123456789012:cluster/my-mixed-cluster"
  string cluster_arn = 1 [
    (buf.validate.field).required = true
  ];

  // AWS ECS Service container configuration.
  AwsEcsServiceContainer container = 2 [
    (buf.validate.field).required = true
  ];

  // ECS service network configuration.
  AwsEcsServiceNetwork network = 3 [
    (buf.validate.field).required = true
  ];

  // IAM configuration for the ECS service.
  AwsEcsServiceIam iam = 4;

  // alb defines how an ALB fronts traffic to this ECS service, supporting path- or hostname-based routing.
  AwsEcsServiceAlb alb = 5;
}

// AwsEcsServiceContainer is a wrapper for the container spec.
message AwsEcsServiceContainer {
  // container image
  AwsEcsServiceContainerImage image = 1;

  // container environment variables and secrets
  AwsEcsServiceContainerEnv env = 2;

  // container_port is the port inside the container that should be exposed to receive traffic.
  // This is optional if the service doesn't need inbound requests (e.g., a background worker).
  // Example: 80 for HTTP
  int32 port = 3;

  // replicas is the number of task replicas to run for this service.
  // higher values improve availability at increased cost.
  int32 replicas = 4 [
    (project.planton.shared.options.recommended_default) = "1"
  ];

  // cpu is the amount of vCPU (in CPU units) to allocate for the entire task.
  // Valid Fargate values include 256, 512, 1024, 2048, etc., subject to ECS constraints.
  // Example: 512
  int32 cpu = 5 [
    (buf.validate.field).required = true
  ];

  // memory is the total MiB of RAM for the task.
  // Valid values depend on CPU. For example, 512 CPU can pair with 1024â€“4096 MiB.
  // Example: 1024
  int32 memory = 6 [
    (buf.validate.field).required = true
  ];
}

// AwsEcsServiceContainerImage represents the container image information.
message AwsEcsServiceContainerImage {
  // The repository of the image (e.g., "gcr.io/project/image").
  string repo = 1;

  // The tag of the image (e.g., "latest" or "1.0.0").
  string tag = 2;
}

// AwsEcsServiceContainerEnv is a wrapper for environment variables and secrets.
message AwsEcsServiceContainerEnv {
  // map of environment variables to be set in the container.
  // The key is the name of the variable, and the value is the value to be set.
  map<string, string> variables = 1;

  // map of environment secrets to be set in the container.
  // The key is the name of the variable, and the value is the value to be set.
  // The value can be a plaintext value or a reference to a secret in AWS Secrets Manager or SSM Parameter Store.
  map<string, string> secrets = 2;
}

// AwsEcsServiceNetwork defines the networking configuration for the ECS service.
message AwsEcsServiceNetwork {
  // subnets is a list of VPC subnet IDs where the Fargate tasks will run.
  // Typically private subnets for production, often at least two for high availability.
  repeated string subnets = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).repeated = {
      unique: true
    }
  ];

  // security_groups is a list of security group IDs to apply to each task's ENI.
  // If not provided, ECS may use the default VPC security group, which is not ideal for production.
  repeated string security_groups = 2 [
    (buf.validate.field).repeated = {
      unique: true
    }
  ];
}

// AWS ECS Service IAM configuration
message AwsEcsServiceIam {
  // task_execution_role_arn is the IAM role used by ECS to pull private images and write logs.
  // If omitted, a default "ecsTaskExecutionRole" may be assumed, but it must already exist.
  // Example: "arn:aws:iam::123456789012:role/ecsTaskExecutionRole"
  string task_execution_role_arn = 1;

  // task_role_arn is the IAM role your container uses if it needs AWS permissions.
  // Omit if your container does not call AWS APIs.
  // Example: "arn:aws:iam::123456789012:role/myAppTaskRole"
  string task_role_arn = 2;
}

enum AwsEcsServiceAlbRoutingType {
  aws_ecs_service_alb_routing_type_unspecified = 0;
  //Path-based routing (e.g., "/my-service")
  path = 1;
  // Hostname-based routing (e.g., "api.example.com")
  hostname = 2;
}

// AwsEcsServiceAlb indicates how an ALB fronts this ECS service, supporting path- or hostname-based routing.
message AwsEcsServiceAlb {
  // enabled controls whether an ALB is used. If false, no ALB is attached.
  bool enabled = 1;

  // arn is the ARN of the ALB. Required if enabled = true.
  string arn = 2;

  // routingType can be "PATH" or "HOSTNAME" if enabled.
  // If "PATH", specify a path (e.g. "/my-service").
  // If "HOSTNAME", specify a hostname (e.g. "api.example.com").
  AwsEcsServiceAlbRoutingType routing_type = 3;

  // path is used if routingType = "path".
  string path = 4;

  // hostname is used if routingType = "hostname".
  string hostname = 5;
}
