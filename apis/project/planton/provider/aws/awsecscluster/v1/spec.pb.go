// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/aws/awsecscluster/v1/spec.proto

package awsecsclusterv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AwsAwsEcsClusterSpec defines the minimal configuration for creating
// an AWS ECS cluster that supports Fargate workloads in production.
type AwsEcsClusterSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// enable_container_insights determines whether to enable CloudWatch
	// Container Insights for this cluster. This is highly recommended
	// for production monitoring, though it incurs CloudWatch costs.
	// If omitted, it is recommended to be "true".
	EnableContainerInsights bool `protobuf:"varint,1,opt,name=enable_container_insights,json=enableContainerInsights,proto3" json:"enable_container_insights,omitempty"`
	// capacity_providers is a list of capacity providers attached
	// to this cluster. For a Fargate-only cluster, typically ["FARGATE"]
	// or ["FARGATE", "FARGATE_SPOT"] for optional Spot usage.
	CapacityProviders []string `protobuf:"bytes,2,rep,name=capacity_providers,json=capacityProviders,proto3" json:"capacity_providers,omitempty"`
	// enable_execute_command controls whether ECS Exec is allowed on
	// tasks in this cluster, letting you exec into running containers
	// for debugging or operational tasks. Defaults to false.
	EnableExecuteCommand bool `protobuf:"varint,3,opt,name=enable_execute_command,json=enableExecuteCommand,proto3" json:"enable_execute_command,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *AwsEcsClusterSpec) Reset() {
	*x = AwsEcsClusterSpec{}
	mi := &file_project_planton_provider_aws_awsecscluster_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsEcsClusterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsEcsClusterSpec) ProtoMessage() {}

func (x *AwsEcsClusterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsecscluster_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsEcsClusterSpec.ProtoReflect.Descriptor instead.
func (*AwsEcsClusterSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsecscluster_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AwsEcsClusterSpec) GetEnableContainerInsights() bool {
	if x != nil {
		return x.EnableContainerInsights
	}
	return false
}

func (x *AwsEcsClusterSpec) GetCapacityProviders() []string {
	if x != nil {
		return x.CapacityProviders
	}
	return nil
}

func (x *AwsEcsClusterSpec) GetEnableExecuteCommand() bool {
	if x != nil {
		return x.EnableExecuteCommand
	}
	return false
}

var File_project_planton_provider_aws_awsecscluster_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_aws_awsecscluster_v1_spec_proto_rawDesc = "" +
	"\n" +
	"8project/planton/provider/aws/awsecscluster/v1/spec.proto\x12-project.planton.provider.aws.awsecscluster.v1\x1a\x1bbuf/validate/validate.proto\x1a,project/planton/shared/options/options.proto\"\xe3\x01\n" +
	"\x11AwsEcsClusterSpec\x12D\n" +
	"\x19enable_container_insights\x18\x01 \x01(\bB\b\x92\xa6\x1d\x04trueR\x17enableContainerInsights\x12R\n" +
	"\x12capacity_providers\x18\x02 \x03(\tB#\xbaH \x92\x01\x1d\x18\x01\"\x19r\x17R\aFARGATER\fFARGATE_SPOTR\x11capacityProviders\x124\n" +
	"\x16enable_execute_command\x18\x03 \x01(\bR\x14enableExecuteCommandB\x88\x03\n" +
	"1com.project.planton.provider.aws.awsecscluster.v1B\tSpecProtoP\x01Zmgithub.com/project-planton/project-planton/apis/project/planton/provider/aws/awsecscluster/v1;awsecsclusterv1\xa2\x02\x05PPPAA\xaa\x02-Project.Planton.Provider.Aws.Awsecscluster.V1\xca\x02-Project\\Planton\\Provider\\Aws\\Awsecscluster\\V1\xe2\x029Project\\Planton\\Provider\\Aws\\Awsecscluster\\V1\\GPBMetadata\xea\x022Project::Planton::Provider::Aws::Awsecscluster::V1b\x06proto3"

var (
	file_project_planton_provider_aws_awsecscluster_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_awsecscluster_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_aws_awsecscluster_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_awsecscluster_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_awsecscluster_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awsecscluster_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awsecscluster_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_aws_awsecscluster_v1_spec_proto_rawDescData
}

var file_project_planton_provider_aws_awsecscluster_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_provider_aws_awsecscluster_v1_spec_proto_goTypes = []any{
	(*AwsEcsClusterSpec)(nil), // 0: project.planton.provider.aws.awsecscluster.v1.AwsEcsClusterSpec
}
var file_project_planton_provider_aws_awsecscluster_v1_spec_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_awsecscluster_v1_spec_proto_init() }
func file_project_planton_provider_aws_awsecscluster_v1_spec_proto_init() {
	if File_project_planton_provider_aws_awsecscluster_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awsecscluster_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awsecscluster_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_awsecscluster_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_awsecscluster_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_aws_awsecscluster_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_awsecscluster_v1_spec_proto = out.File
	file_project_planton_provider_aws_awsecscluster_v1_spec_proto_goTypes = nil
	file_project_planton_provider_aws_awsecscluster_v1_spec_proto_depIdxs = nil
}
