syntax = "proto3";
package project.planton.provider.aws.awsclientvpn.v1;

import "buf/validate/validate.proto";
import "project/planton/shared/foreignkey/v1/foreign_key.proto";
import "project/planton/shared/options/options.proto";

// AwsClientVpnSpec defines the configuration for an AWS Client VPN endpoint,
// which enables secure OpenVPN access for clients into an AWS VPC. Developers can use
// a Client VPN endpoint to connect from their laptops or remote networks to resources
// within a private VPC (for example, to access an EC2-hosted database). This specification
// covers the common settings needed for deploying a Client VPN, focusing on the 80% use case
// (certificate-based authentication for mutual TLS, single VPC, basic logging and networking options).
message AwsClientVpnSpec {
  // (Optional) A human-friendly description for the Client VPN endpoint. This is stored for clarity and is typically visible in the AWS Console as the description of the endpoint.
  string description = 1;

  // The target AWS VPC in which to create the Client VPN endpoint. This should reference
  // an existing AwsVpc resource. The Client VPN will be attached to this VPC's network.
  // **Must** be a VPC in the same AWS region as the provided credentials.
  project.planton.shared.foreignkey.v1.StringValueOrRef vpc_id = 2 [
    (buf.validate.field).required = true,
    (project.planton.shared.foreignkey.v1.default_kind) = AwsVpc,
    (project.planton.shared.foreignkey.v1.default_kind_field_path) = "status.outputs.vpc_id"
  ];

  // The list of subnet IDs in the above VPC to associate as target networks for the Client VPN.
  // Each subnet association enables VPN clients to access resources in that subnet’s Availability Zone.
  // At least one subnet ID is required (the first association will activate the endpoint). All subnets must belong to the given VPC.
  repeated project.planton.shared.foreignkey.v1.StringValueOrRef subnets = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).repeated.min_items = 1,
    (project.planton.shared.foreignkey.v1.default_kind) = AwsVpc
  ];

  // The IPv4 address range, in CIDR notation, from which to assign client IP addresses. For example, "10.0.0.0/22".
  // This client CIDR block must not overlap with the VPC’s CIDR or any routes in the VPC.
  // It defines the pool of IPs that VPN clients will receive. Note: The CIDR block size must be between /22 (inclusive) and /12 (inclusive).
  string client_cidr_block = 4 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.pattern = "^([0-9]{1,3}\\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$"
  ];

  // The authentication method for clients connecting to this VPN endpoint.
  // defaults to `certificate` (mutual TLS authentication using client certificates).
  AwsClientVpnAuthenticationType authentication_type = 5 [(buf.validate.field).enum.defined_only = true];

  // The ARN of the ACM server certificate to use for the Client VPN endpoint. This TLS certificate is presented by the VPN server to clients upon connection.
  // The certificate must be present in AWS Certificate Manager in the same region. This field is **required** for establishing the VPN (mutual TLS requires a server cert, and user-based auth still needs a server certificate for encryption).
  project.planton.shared.foreignkey.v1.StringValueOrRef server_certificate_arn = 6 [
    (buf.validate.field).required = true,
    (project.planton.shared.foreignkey.v1.default_kind) = AwsCertManagerCert,
    (project.planton.shared.foreignkey.v1.default_kind_field_path) = "status.outputs.cert_arn"
  ];

  // A list of IPv4 network CIDR ranges that VPN clients are authorized to access through this endpoint.
  // Typically, these correspond to private subnet ranges within the VPC (e.g., "10.0.0.0/16") or other networks.
  // For each CIDR here, an authorization rule will be created to allow clients to access that network.
  // If omitted, no default authorization rule is set (clients would not have access to any network until one is added).
  repeated string cidr_authorization_rules = 7 [(buf.validate.field).repeated.unique = true];

  // Enables or disables split-tunnel routing for the VPN. When `false`, only traffic destined for the above authorized CIDRs (internal networks) will go through the VPN, while all other Internet traffic stays local to the client.
  // When `true` (full-tunnel), all client traffic is routed through the VPN. Default is `false` (split-tunnel enabled) to limit VPN to internal traffic.
  bool disable_split_tunnel = 8;

  // The port number on which the Client VPN endpoint will accept connections. The default (443) is commonly used for OpenVPN over TLS.
  // Using port 443 allows VPN traffic to more easily traverse corporate firewalls.
  // If a different port (e.g., 1194) is needed, it can be specified here.
  optional int32 vpn_port = 9 [(project.planton.shared.options.default) = "443"];

  // The transport protocol for VPN connections. Can be `tcp` or `udp`.
  AwsClientVpnTransportProtocol transport_protocol = 10 [
    (buf.validate.field).enum.defined_only = true,
    (project.planton.shared.options.recommended_default) = "tcp"
  ];

  // The CloudWatch Logs group name for VPN connection logs. If specified, connection logging is enabled for this Client VPN endpoint.
  // The VPN service will send connection events to the given log group (a log stream is created automatically if not provided).
  // If left blank, connection logging is disabled.
  string log_group_name = 11;

  // (Optional) One or more security group IDs to apply to the Client VPN endpoint's network associations.
  // These security groups control traffic between VPN clients and VPC resources.
  // If not provided, the VPC’s default security group will be applied to the Client VPN endpoint.
  // If provided, ensure the security group rules allow the intended traffic (for example, allowing inbound traffic from clients to target services).
  // By default, Project Planton may create a dedicated security group for the endpoint if none are specified.
  repeated project.planton.shared.foreignkey.v1.StringValueOrRef security_groups = 12 [
    (project.planton.shared.foreignkey.v1.default_kind) = AwsSecurityGroup,
    (project.planton.shared.foreignkey.v1.default_kind_field_path) = "status.outputs.security_group_id"
  ];

  // (Optional) Custom DNS server IP addresses for VPN clients. Up to two IP addresses can be specified.
  // If set, connected clients will use these DNS servers for name resolution while connected. If not set, clients default to the VPC’s DNS (AmazonProvidedDNS) for name resolution.
  repeated string dns_servers = 13 [
    (buf.validate.field).repeated.max_items = 2,
    (buf.validate.field).repeated.unique = true
  ];

  option (buf.validate.message).cel = {
    id: "vpn_port_allowed"
    message: "vpn_port must be 443 (TCP) or 1194 (UDP) when set"
    expression: "this.vpn_port == 0 || this.vpn_port in [443, 1194]"
  };

  option (buf.validate.message).cel = {
    id: "protocol_port_pairing"
    message: "when both are set, transport_protocol must match vpn_port (TCP↔443, UDP↔1194)"
    expression: "this.vpn_port == 0 || this.transport_protocol == 0 || (this.transport_protocol == 2 && this.vpn_port == 443) || (this.transport_protocol == 1 && this.vpn_port == 1194)"
  };

  option (buf.validate.message).cel = {
    id: "auth_supported"
    message: "only certificate-based authentication is supported in v1"
    expression: "this.authentication_type == 0"
  };

  option (buf.validate.message).cel = {
    id: "cidr_auth_rules_format"
    message: "each cidr_authorization_rules entry must be a valid IPv4 CIDR"
    expression: "this.cidr_authorization_rules.all(c, c.matches(\"^([0-9]{1,3}\\\\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$\"))"
  };

  option (buf.validate.message).cel = {
    id: "dns_servers_format"
    message: "dns_servers must be valid IPv4 addresses (max 2)"
    expression: "this.dns_servers.all(s, s.matches(\"^([0-9]{1,3}\\\\.){3}[0-9]{1,3}$\"))"
  };
}

// The authentication method for clients. Supported values:
// - `certificate`: Mutual TLS authentication using client certificates (default).
// - `directory_service`: Active Directory username/password authentication.
// - `cognito`: Federated authentication using AWS Cognito (SAML-based).
// By default, **certificate-based** authentication is used, which requires clients to present a certificate signed by a trusted CA.
enum AwsClientVpnAuthenticationType {
  certificate = 0;
  directory = 2;
  cognito = 3;
}

// The transport protocol for VPN sessions. Can be `tcp` or `udp`.
// By default, TCP is used (often chosen for reliability and to avoid UDP being blocked), though UDP may offer lower latency for VPN traffic.
enum AwsClientVpnTransportProtocol {
  aws_client_vpn_transport_protocol_unspecified = 0;
  udp = 1;
  tcp = 2;
}
