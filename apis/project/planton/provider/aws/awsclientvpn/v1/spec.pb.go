// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/aws/awsclientvpn/v1/spec.proto

package awsclientvpnv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/project-planton/project-planton/apis/project/planton/shared/foreignkey/v1"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The authentication method for clients. Supported values:
// - `certificate`: Mutual TLS authentication using client certificates (default).
// - `directory_service`: Active Directory username/password authentication.
// - `cognito`: Federated authentication using AWS Cognito (SAML-based).
// By default, **certificate-based** authentication is used, which requires clients to present a certificate signed by a trusted CA.
type AwsClientVpnAuthenticationType int32

const (
	AwsClientVpnAuthenticationType_certificate AwsClientVpnAuthenticationType = 0
	AwsClientVpnAuthenticationType_directory   AwsClientVpnAuthenticationType = 2
	AwsClientVpnAuthenticationType_cognito     AwsClientVpnAuthenticationType = 3
)

// Enum value maps for AwsClientVpnAuthenticationType.
var (
	AwsClientVpnAuthenticationType_name = map[int32]string{
		0: "certificate",
		2: "directory",
		3: "cognito",
	}
	AwsClientVpnAuthenticationType_value = map[string]int32{
		"certificate": 0,
		"directory":   2,
		"cognito":     3,
	}
)

func (x AwsClientVpnAuthenticationType) Enum() *AwsClientVpnAuthenticationType {
	p := new(AwsClientVpnAuthenticationType)
	*p = x
	return p
}

func (x AwsClientVpnAuthenticationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AwsClientVpnAuthenticationType) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_enumTypes[0].Descriptor()
}

func (AwsClientVpnAuthenticationType) Type() protoreflect.EnumType {
	return &file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_enumTypes[0]
}

func (x AwsClientVpnAuthenticationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AwsClientVpnAuthenticationType.Descriptor instead.
func (AwsClientVpnAuthenticationType) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_rawDescGZIP(), []int{0}
}

// The transport protocol for VPN sessions. Can be `tcp` or `udp`.
// By default, TCP is used (often chosen for reliability and to avoid UDP being blocked), though UDP may offer lower latency for VPN traffic.
type AwsClientVpnTransportProtocol int32

const (
	AwsClientVpnTransportProtocol_aws_client_vpn_transport_protocol_unspecified AwsClientVpnTransportProtocol = 0
	AwsClientVpnTransportProtocol_udp                                           AwsClientVpnTransportProtocol = 1
	AwsClientVpnTransportProtocol_tcp                                           AwsClientVpnTransportProtocol = 2
)

// Enum value maps for AwsClientVpnTransportProtocol.
var (
	AwsClientVpnTransportProtocol_name = map[int32]string{
		0: "aws_client_vpn_transport_protocol_unspecified",
		1: "udp",
		2: "tcp",
	}
	AwsClientVpnTransportProtocol_value = map[string]int32{
		"aws_client_vpn_transport_protocol_unspecified": 0,
		"udp": 1,
		"tcp": 2,
	}
)

func (x AwsClientVpnTransportProtocol) Enum() *AwsClientVpnTransportProtocol {
	p := new(AwsClientVpnTransportProtocol)
	*p = x
	return p
}

func (x AwsClientVpnTransportProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AwsClientVpnTransportProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_enumTypes[1].Descriptor()
}

func (AwsClientVpnTransportProtocol) Type() protoreflect.EnumType {
	return &file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_enumTypes[1]
}

func (x AwsClientVpnTransportProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AwsClientVpnTransportProtocol.Descriptor instead.
func (AwsClientVpnTransportProtocol) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_rawDescGZIP(), []int{1}
}

// AwsClientVpnSpec defines the configuration for an AWS Client VPN endpoint,
// which enables secure OpenVPN access for clients into an AWS VPC. Developers can use
// a Client VPN endpoint to connect from their laptops or remote networks to resources
// within a private VPC (for example, to access an EC2-hosted database). This specification
// covers the common settings needed for deploying a Client VPN, focusing on the 80% use case
// (certificate-based authentication for mutual TLS, single VPC, basic logging and networking options).
type AwsClientVpnSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// (Optional) A human-friendly description for the Client VPN endpoint. This is stored for clarity and is typically visible in the AWS Console as the description of the endpoint.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// The target AWS VPC in which to create the Client VPN endpoint. This should reference
	// an existing AwsVpc resource. The Client VPN will be attached to this VPC's network.
	// **Must** be a VPC in the same AWS region as the provided credentials.
	VpcId *v1.StringValueOrRef `protobuf:"bytes,2,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	// The list of subnet IDs in the above VPC to associate as target networks for the Client VPN.
	// Each subnet association enables VPN clients to access resources in that subnet’s Availability Zone.
	// At least one subnet ID is required (the first association will activate the endpoint). All subnets must belong to the given VPC.
	Subnets []*v1.StringValueOrRef `protobuf:"bytes,3,rep,name=subnets,proto3" json:"subnets,omitempty"`
	// The IPv4 address range, in CIDR notation, from which to assign client IP addresses. For example, "10.0.0.0/22".
	// This client CIDR block must not overlap with the VPC’s CIDR or any routes in the VPC.
	// It defines the pool of IPs that VPN clients will receive. Note: The CIDR block size must be between /22 (inclusive) and /12 (inclusive).
	ClientCidrBlock string `protobuf:"bytes,4,opt,name=client_cidr_block,json=clientCidrBlock,proto3" json:"client_cidr_block,omitempty"`
	// The authentication method for clients connecting to this VPN endpoint.
	// defaults to `certificate` (mutual TLS authentication using client certificates).
	AuthenticationType AwsClientVpnAuthenticationType `protobuf:"varint,5,opt,name=authentication_type,json=authenticationType,proto3,enum=project.planton.provider.aws.awsclientvpn.v1.AwsClientVpnAuthenticationType" json:"authentication_type,omitempty"`
	// The ARN of the ACM server certificate to use for the Client VPN endpoint. This TLS certificate is presented by the VPN server to clients upon connection.
	// The certificate must be present in AWS Certificate Manager in the same region. This field is **required** for establishing the VPN (mutual TLS requires a server cert, and user-based auth still needs a server certificate for encryption).
	ServerCertificateArn *v1.StringValueOrRef `protobuf:"bytes,6,opt,name=server_certificate_arn,json=serverCertificateArn,proto3" json:"server_certificate_arn,omitempty"`
	// A list of IPv4 network CIDR ranges that VPN clients are authorized to access through this endpoint.
	// Typically, these correspond to private subnet ranges within the VPC (e.g., "10.0.0.0/16") or other networks.
	// For each CIDR here, an authorization rule will be created to allow clients to access that network.
	// If omitted, no default authorization rule is set (clients would not have access to any network until one is added).
	CidrAuthorizationRules []string `protobuf:"bytes,7,rep,name=cidr_authorization_rules,json=cidrAuthorizationRules,proto3" json:"cidr_authorization_rules,omitempty"`
	// Enables or disables split-tunnel routing for the VPN. When `false`, only traffic destined for the above authorized CIDRs (internal networks) will go through the VPN, while all other Internet traffic stays local to the client.
	// When `true` (full-tunnel), all client traffic is routed through the VPN. Default is `false` (split-tunnel enabled) to limit VPN to internal traffic.
	DisableSplitTunnel bool `protobuf:"varint,8,opt,name=disable_split_tunnel,json=disableSplitTunnel,proto3" json:"disable_split_tunnel,omitempty"`
	// The port number on which the Client VPN endpoint will accept connections. The default (443) is commonly used for OpenVPN over TLS.
	// Using port 443 allows VPN traffic to more easily traverse corporate firewalls.
	// If a different port (e.g., 1194) is needed, it can be specified here.
	VpnPort *int32 `protobuf:"varint,9,opt,name=vpn_port,json=vpnPort,proto3,oneof" json:"vpn_port,omitempty"`
	// The transport protocol for VPN connections. Can be `tcp` or `udp`.
	TransportProtocol AwsClientVpnTransportProtocol `protobuf:"varint,10,opt,name=transport_protocol,json=transportProtocol,proto3,enum=project.planton.provider.aws.awsclientvpn.v1.AwsClientVpnTransportProtocol" json:"transport_protocol,omitempty"`
	// The CloudWatch Logs group name for VPN connection logs. If specified, connection logging is enabled for this Client VPN endpoint.
	// The VPN service will send connection events to the given log group (a log stream is created automatically if not provided).
	// If left blank, connection logging is disabled.
	LogGroupName string `protobuf:"bytes,11,opt,name=log_group_name,json=logGroupName,proto3" json:"log_group_name,omitempty"`
	// (Optional) One or more security group IDs to apply to the Client VPN endpoint's network associations.
	// These security groups control traffic between VPN clients and VPC resources.
	// If not provided, the VPC’s default security group will be applied to the Client VPN endpoint.
	// If provided, ensure the security group rules allow the intended traffic (for example, allowing inbound traffic from clients to target services).
	// By default, Project Planton may create a dedicated security group for the endpoint if none are specified.
	SecurityGroups []*v1.StringValueOrRef `protobuf:"bytes,12,rep,name=security_groups,json=securityGroups,proto3" json:"security_groups,omitempty"`
	// (Optional) Custom DNS server IP addresses for VPN clients. Up to two IP addresses can be specified.
	// If set, connected clients will use these DNS servers for name resolution while connected. If not set, clients default to the VPC’s DNS (AmazonProvidedDNS) for name resolution.
	DnsServers    []string `protobuf:"bytes,13,rep,name=dns_servers,json=dnsServers,proto3" json:"dns_servers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsClientVpnSpec) Reset() {
	*x = AwsClientVpnSpec{}
	mi := &file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsClientVpnSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsClientVpnSpec) ProtoMessage() {}

func (x *AwsClientVpnSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsClientVpnSpec.ProtoReflect.Descriptor instead.
func (*AwsClientVpnSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AwsClientVpnSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AwsClientVpnSpec) GetVpcId() *v1.StringValueOrRef {
	if x != nil {
		return x.VpcId
	}
	return nil
}

func (x *AwsClientVpnSpec) GetSubnets() []*v1.StringValueOrRef {
	if x != nil {
		return x.Subnets
	}
	return nil
}

func (x *AwsClientVpnSpec) GetClientCidrBlock() string {
	if x != nil {
		return x.ClientCidrBlock
	}
	return ""
}

func (x *AwsClientVpnSpec) GetAuthenticationType() AwsClientVpnAuthenticationType {
	if x != nil {
		return x.AuthenticationType
	}
	return AwsClientVpnAuthenticationType_certificate
}

func (x *AwsClientVpnSpec) GetServerCertificateArn() *v1.StringValueOrRef {
	if x != nil {
		return x.ServerCertificateArn
	}
	return nil
}

func (x *AwsClientVpnSpec) GetCidrAuthorizationRules() []string {
	if x != nil {
		return x.CidrAuthorizationRules
	}
	return nil
}

func (x *AwsClientVpnSpec) GetDisableSplitTunnel() bool {
	if x != nil {
		return x.DisableSplitTunnel
	}
	return false
}

func (x *AwsClientVpnSpec) GetVpnPort() int32 {
	if x != nil && x.VpnPort != nil {
		return *x.VpnPort
	}
	return 0
}

func (x *AwsClientVpnSpec) GetTransportProtocol() AwsClientVpnTransportProtocol {
	if x != nil {
		return x.TransportProtocol
	}
	return AwsClientVpnTransportProtocol_aws_client_vpn_transport_protocol_unspecified
}

func (x *AwsClientVpnSpec) GetLogGroupName() string {
	if x != nil {
		return x.LogGroupName
	}
	return ""
}

func (x *AwsClientVpnSpec) GetSecurityGroups() []*v1.StringValueOrRef {
	if x != nil {
		return x.SecurityGroups
	}
	return nil
}

func (x *AwsClientVpnSpec) GetDnsServers() []string {
	if x != nil {
		return x.DnsServers
	}
	return nil
}

var File_project_planton_provider_aws_awsclientvpn_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_rawDesc = "" +
	"\n" +
	"7project/planton/provider/aws/awsclientvpn/v1/spec.proto\x12,project.planton.provider.aws.awsclientvpn.v1\x1a\x1bbuf/validate/validate.proto\x1a6project/planton/shared/foreignkey/v1/foreign_key.proto\x1a,project/planton/shared/options/options.proto\"\x91\x10\n" +
	"\x10AwsClientVpnSpec\x12 \n" +
	"\vdescription\x18\x01 \x01(\tR\vdescription\x12s\n" +
	"\x06vpc_id\x18\x02 \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB$\xbaH\x03\xc8\x01\x01\x88\xd4a\xd9\x01\x92\xd4a\x15status.outputs.vpc_idR\x05vpcId\x12b\n" +
	"\asubnets\x18\x03 \x03(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB\x10\xbaH\b\xc8\x01\x01\x92\x01\x02\b\x01\x88\xd4a\xd9\x01R\asubnets\x12m\n" +
	"\x11client_cidr_block\x18\x04 \x01(\tBA\xbaH>\xc8\x01\x01r927^([0-9]{1,3}\\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$R\x0fclientCidrBlock\x12\x87\x01\n" +
	"\x13authentication_type\x18\x05 \x01(\x0e2L.project.planton.provider.aws.awsclientvpn.v1.AwsClientVpnAuthenticationTypeB\b\xbaH\x05\x82\x01\x02\x10\x01R\x12authenticationType\x12\x94\x01\n" +
	"\x16server_certificate_arn\x18\x06 \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB&\xbaH\x03\xc8\x01\x01\x88\xd4a\xc9\x01\x92\xd4a\x17status.outputs.cert_arnR\x14serverCertificateArn\x12B\n" +
	"\x18cidr_authorization_rules\x18\a \x03(\tB\b\xbaH\x05\x92\x01\x02\x18\x01R\x16cidrAuthorizationRules\x120\n" +
	"\x14disable_split_tunnel\x18\b \x01(\bR\x12disableSplitTunnel\x12'\n" +
	"\bvpn_port\x18\t \x01(\x05B\a\x8a\xa6\x1d\x03443H\x00R\avpnPort\x88\x01\x01\x12\x8b\x01\n" +
	"\x12transport_protocol\x18\n" +
	" \x01(\x0e2K.project.planton.provider.aws.awsclientvpn.v1.AwsClientVpnTransportProtocolB\x0f\xbaH\x05\x82\x01\x02\x10\x01\x92\xa6\x1d\x03tcpR\x11transportProtocol\x12$\n" +
	"\x0elog_group_name\x18\v \x01(\tR\flogGroupName\x12\x8a\x01\n" +
	"\x0fsecurity_groups\x18\f \x03(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB)\x88\xd4a\xd7\x01\x92\xd4a status.outputs.security_group_idR\x0esecurityGroups\x12+\n" +
	"\vdns_servers\x18\r \x03(\tB\n" +
	"\xbaH\a\x92\x01\x04\x10\x02\x18\x01R\n" +
	"dnsServers:\xd7\x06\xbaH\xd3\x06\x1ay\n" +
	"\x10vpn_port_allowed\x121vpn_port must be 443 (TCP) or 1194 (UDP) when set\x1a2this.vpn_port == 0 || this.vpn_port in [443, 1194]\x1a\x94\x02\n" +
	"\x15protocol_port_pairing\x12Qwhen both are set, transport_protocol must match vpn_port (TCP↔443, UDP↔1194)\x1a\xa7\x01this.vpn_port == 0 || this.transport_protocol == 0 || (this.transport_protocol == 2 && this.vpn_port == 443) || (this.transport_protocol == 1 && this.vpn_port == 1194)\x1ai\n" +
	"\x0eauth_supported\x128only certificate-based authentication is supported in v1\x1a\x1dthis.authentication_type == 0\x1a\xc4\x01\n" +
	"\x16cidr_auth_rules_format\x12=each cidr_authorization_rules entry must be a valid IPv4 CIDR\x1akthis.cidr_authorization_rules.all(c, c.matches(\"^([0-9]{1,3}\\\\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$\"))\x1a\x8c\x01\n" +
	"\x12dns_servers_format\x120dns_servers must be valid IPv4 addresses (max 2)\x1aDthis.dns_servers.all(s, s.matches(\"^([0-9]{1,3}\\\\.){3}[0-9]{1,3}$\"))B\v\n" +
	"\t_vpn_port*M\n" +
	"\x1eAwsClientVpnAuthenticationType\x12\x0f\n" +
	"\vcertificate\x10\x00\x12\r\n" +
	"\tdirectory\x10\x02\x12\v\n" +
	"\acognito\x10\x03*d\n" +
	"\x1dAwsClientVpnTransportProtocol\x121\n" +
	"-aws_client_vpn_transport_protocol_unspecified\x10\x00\x12\a\n" +
	"\x03udp\x10\x01\x12\a\n" +
	"\x03tcp\x10\x02B\x81\x03\n" +
	"0com.project.planton.provider.aws.awsclientvpn.v1B\tSpecProtoP\x01Zkgithub.com/project-planton/project-planton/apis/project/planton/provider/aws/awsclientvpn/v1;awsclientvpnv1\xa2\x02\x05PPPAA\xaa\x02,Project.Planton.Provider.Aws.Awsclientvpn.V1\xca\x02,Project\\Planton\\Provider\\Aws\\Awsclientvpn\\V1\xe2\x028Project\\Planton\\Provider\\Aws\\Awsclientvpn\\V1\\GPBMetadata\xea\x021Project::Planton::Provider::Aws::Awsclientvpn::V1b\x06proto3"

var (
	file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_rawDescData
}

var file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_goTypes = []any{
	(AwsClientVpnAuthenticationType)(0), // 0: project.planton.provider.aws.awsclientvpn.v1.AwsClientVpnAuthenticationType
	(AwsClientVpnTransportProtocol)(0),  // 1: project.planton.provider.aws.awsclientvpn.v1.AwsClientVpnTransportProtocol
	(*AwsClientVpnSpec)(nil),            // 2: project.planton.provider.aws.awsclientvpn.v1.AwsClientVpnSpec
	(*v1.StringValueOrRef)(nil),         // 3: project.planton.shared.foreignkey.v1.StringValueOrRef
}
var file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_depIdxs = []int32{
	3, // 0: project.planton.provider.aws.awsclientvpn.v1.AwsClientVpnSpec.vpc_id:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	3, // 1: project.planton.provider.aws.awsclientvpn.v1.AwsClientVpnSpec.subnets:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	0, // 2: project.planton.provider.aws.awsclientvpn.v1.AwsClientVpnSpec.authentication_type:type_name -> project.planton.provider.aws.awsclientvpn.v1.AwsClientVpnAuthenticationType
	3, // 3: project.planton.provider.aws.awsclientvpn.v1.AwsClientVpnSpec.server_certificate_arn:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	1, // 4: project.planton.provider.aws.awsclientvpn.v1.AwsClientVpnSpec.transport_protocol:type_name -> project.planton.provider.aws.awsclientvpn.v1.AwsClientVpnTransportProtocol
	3, // 5: project.planton.provider.aws.awsclientvpn.v1.AwsClientVpnSpec.security_groups:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_init() }
func file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_init() {
	if File_project_planton_provider_aws_awsclientvpn_v1_spec_proto != nil {
		return
	}
	file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_depIdxs,
		EnumInfos:         file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_enumTypes,
		MessageInfos:      file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_awsclientvpn_v1_spec_proto = out.File
	file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_goTypes = nil
	file_project_planton_provider_aws_awsclientvpn_v1_spec_proto_depIdxs = nil
}
