// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/aws/awsclientvpn/v1/stack_outputs.proto

package awsclientvpnv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AwsClientVpnStackOutputs captures the output values obtained after provisioning the AWS Client VPN endpoint.
// These outputs include identifiers needed for connecting to or managing the VPN, and can be referenced by other resources if necessary.
type AwsClientVpnStackOutputs struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The AWS-assigned identifier for the Client VPN endpoint (e.g., "cvpn-endpoint-012345abcdeEXAMPLE").
	// Use this ID for any AWS CLI or API operations on the Client VPN, and to retrieve or revoke the client configuration file.
	ClientVpnEndpointId string `protobuf:"bytes,1,opt,name=client_vpn_endpoint_id,json=clientVpnEndpointId,proto3" json:"client_vpn_endpoint_id,omitempty"`
	// The ID of the security group applied to the Client VPN endpoint’s target network associations.
	// If the spec did not provide any security_group_ids, this will be the ID of the security group that Project Planton created (or the VPC default).
	// This security group governs traffic between VPN clients and VPC resources.
	SecurityGroupId string `protobuf:"bytes,2,opt,name=security_group_id,json=securityGroupId,proto3" json:"security_group_id,omitempty"`
	// A map of subnet association IDs for each associated target subnet.
	// Each key in the map is a subnet ID (from the spec’s subnet_ids list), and the value is the corresponding AWS association ID (e.g., "cvpn-assoc-0abcd1234efgh5678") for that subnet’s association with the Client VPN endpoint.
	// These IDs can be used to reference or manage specific target network associations (for example, if removing an association later).
	SubnetAssociationIds map[string]string `protobuf:"bytes,3,rep,name=subnet_association_ids,json=subnetAssociationIds,proto3" json:"subnet_association_ids,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The DNS name clients use to connect to the Client VPN endpoint.
	EndpointDnsName string `protobuf:"bytes,4,opt,name=endpoint_dns_name,json=endpointDnsName,proto3" json:"endpoint_dns_name,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AwsClientVpnStackOutputs) Reset() {
	*x = AwsClientVpnStackOutputs{}
	mi := &file_project_planton_provider_aws_awsclientvpn_v1_stack_outputs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsClientVpnStackOutputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsClientVpnStackOutputs) ProtoMessage() {}

func (x *AwsClientVpnStackOutputs) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsclientvpn_v1_stack_outputs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsClientVpnStackOutputs.ProtoReflect.Descriptor instead.
func (*AwsClientVpnStackOutputs) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsclientvpn_v1_stack_outputs_proto_rawDescGZIP(), []int{0}
}

func (x *AwsClientVpnStackOutputs) GetClientVpnEndpointId() string {
	if x != nil {
		return x.ClientVpnEndpointId
	}
	return ""
}

func (x *AwsClientVpnStackOutputs) GetSecurityGroupId() string {
	if x != nil {
		return x.SecurityGroupId
	}
	return ""
}

func (x *AwsClientVpnStackOutputs) GetSubnetAssociationIds() map[string]string {
	if x != nil {
		return x.SubnetAssociationIds
	}
	return nil
}

func (x *AwsClientVpnStackOutputs) GetEndpointDnsName() string {
	if x != nil {
		return x.EndpointDnsName
	}
	return ""
}

var File_project_planton_provider_aws_awsclientvpn_v1_stack_outputs_proto protoreflect.FileDescriptor

const file_project_planton_provider_aws_awsclientvpn_v1_stack_outputs_proto_rawDesc = "" +
	"\n" +
	"@project/planton/provider/aws/awsclientvpn/v1/stack_outputs.proto\x12,project.planton.provider.aws.awsclientvpn.v1\"\x89\x03\n" +
	"\x18AwsClientVpnStackOutputs\x123\n" +
	"\x16client_vpn_endpoint_id\x18\x01 \x01(\tR\x13clientVpnEndpointId\x12*\n" +
	"\x11security_group_id\x18\x02 \x01(\tR\x0fsecurityGroupId\x12\x96\x01\n" +
	"\x16subnet_association_ids\x18\x03 \x03(\v2`.project.planton.provider.aws.awsclientvpn.v1.AwsClientVpnStackOutputs.SubnetAssociationIdsEntryR\x14subnetAssociationIds\x12*\n" +
	"\x11endpoint_dns_name\x18\x04 \x01(\tR\x0fendpointDnsName\x1aG\n" +
	"\x19SubnetAssociationIdsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x89\x03\n" +
	"0com.project.planton.provider.aws.awsclientvpn.v1B\x11StackOutputsProtoP\x01Zkgithub.com/project-planton/project-planton/apis/project/planton/provider/aws/awsclientvpn/v1;awsclientvpnv1\xa2\x02\x05PPPAA\xaa\x02,Project.Planton.Provider.Aws.Awsclientvpn.V1\xca\x02,Project\\Planton\\Provider\\Aws\\Awsclientvpn\\V1\xe2\x028Project\\Planton\\Provider\\Aws\\Awsclientvpn\\V1\\GPBMetadata\xea\x021Project::Planton::Provider::Aws::Awsclientvpn::V1b\x06proto3"

var (
	file_project_planton_provider_aws_awsclientvpn_v1_stack_outputs_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_awsclientvpn_v1_stack_outputs_proto_rawDescData []byte
)

func file_project_planton_provider_aws_awsclientvpn_v1_stack_outputs_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_awsclientvpn_v1_stack_outputs_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_awsclientvpn_v1_stack_outputs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awsclientvpn_v1_stack_outputs_proto_rawDesc), len(file_project_planton_provider_aws_awsclientvpn_v1_stack_outputs_proto_rawDesc)))
	})
	return file_project_planton_provider_aws_awsclientvpn_v1_stack_outputs_proto_rawDescData
}

var file_project_planton_provider_aws_awsclientvpn_v1_stack_outputs_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_project_planton_provider_aws_awsclientvpn_v1_stack_outputs_proto_goTypes = []any{
	(*AwsClientVpnStackOutputs)(nil), // 0: project.planton.provider.aws.awsclientvpn.v1.AwsClientVpnStackOutputs
	nil,                              // 1: project.planton.provider.aws.awsclientvpn.v1.AwsClientVpnStackOutputs.SubnetAssociationIdsEntry
}
var file_project_planton_provider_aws_awsclientvpn_v1_stack_outputs_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.aws.awsclientvpn.v1.AwsClientVpnStackOutputs.subnet_association_ids:type_name -> project.planton.provider.aws.awsclientvpn.v1.AwsClientVpnStackOutputs.SubnetAssociationIdsEntry
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_awsclientvpn_v1_stack_outputs_proto_init() }
func file_project_planton_provider_aws_awsclientvpn_v1_stack_outputs_proto_init() {
	if File_project_planton_provider_aws_awsclientvpn_v1_stack_outputs_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awsclientvpn_v1_stack_outputs_proto_rawDesc), len(file_project_planton_provider_aws_awsclientvpn_v1_stack_outputs_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_awsclientvpn_v1_stack_outputs_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_awsclientvpn_v1_stack_outputs_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_aws_awsclientvpn_v1_stack_outputs_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_awsclientvpn_v1_stack_outputs_proto = out.File
	file_project_planton_provider_aws_awsclientvpn_v1_stack_outputs_proto_goTypes = nil
	file_project_planton_provider_aws_awsclientvpn_v1_stack_outputs_proto_depIdxs = nil
}
