syntax = "proto3";

package project.planton.provider.aws.awsrdscluster.v1;

import "buf/validate/validate.proto";
import "project/planton/shared/foreignkey/v1/foreign_key.proto";
import "project/planton/shared/options/options.proto";

// AwsRdsClusterSpec defines the specification required to deploy an AWS RDS DB Cluster
// (commonly Amazon Aurora MySQL/PostgreSQL, or Multi-AZ DB Cluster). It focuses on
// the cluster-level configuration. Instance-level settings (class, monitoring, etc.)
// are modeled separately by instance resources.
message AwsRdsClusterSpec {
  // subnet_ids is the list of subnet IDs used by the DB subnet group for the cluster.
  // Provide at least two subnets in distinct Availability Zones for high availability.
  repeated project.planton.shared.foreignkey.v1.StringValueOrRef subnet_ids = 1 [
    (project.planton.shared.foreignkey.v1.default_kind) = AwsVpc,
    (project.planton.shared.foreignkey.v1.default_kind_field_path) = "status.outputs.private_subnets.[*].id"
  ];

  // Optional name of an existing DB subnet group to use instead of providing subnet_ids.
  project.planton.shared.foreignkey.v1.StringValueOrRef db_subnet_group_name = 2;

  // vpc_security_group_ids are additional security groups attached to the cluster.
  repeated project.planton.shared.foreignkey.v1.StringValueOrRef security_group_ids = 3 [
    (project.planton.shared.foreignkey.v1.default_kind) = AwsSecurityGroup,
    (project.planton.shared.foreignkey.v1.default_kind_field_path) = "status.outputs.security_group_id"
  ];

  // allowed_cidr_blocks are IPv4 CIDRs to allow ingress to the cluster SG (if created/managed here).
  // Example: "10.0.0.0/16", "0.0.0.0/0"
  repeated string allowed_cidr_blocks = 4 [
    (buf.validate.field).repeated.items.string.pattern = "^(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}/(?:[0-9]|[12]\\d|3[0-2])$",
    (buf.validate.field).repeated.unique = true
  ];

  // associate_security_group_ids lists existing SGs to associate (alongside any created/managed SG).
  repeated project.planton.shared.foreignkey.v1.StringValueOrRef associate_security_group_ids = 5 [
    (project.planton.shared.foreignkey.v1.default_kind) = AwsSecurityGroup,
    (project.planton.shared.foreignkey.v1.default_kind_field_path) = "status.outputs.security_group_id"
  ];

  // database_name is the name of the initial database to create in the cluster.
  string database_name = 6;

  // manage_master_user_password, when true, lets RDS manage the master user password in AWS Secrets Manager.
  bool manage_master_user_password = 7 [(planton.shared.options.recommended_default) = "true"];

  // master_user_secret_kms_key_id is the KMS key identifier (ARN/alias) for encrypting the managed secret.
  project.planton.shared.foreignkey.v1.StringValueOrRef master_user_secret_kms_key_id = 8 [
    (project.planton.shared.foreignkey.v1.default_kind) = AwsKmsKey,
    (project.planton.shared.foreignkey.v1.default_kind_field_path) = "status.outputs.key_arn"
  ];

  // username is the master database user name.
  optional string username = 9 [(planton.shared.options.default) = "master"];

  // password is the master user password. Cannot be set when manage_master_user_password is true.
  string password = 10;

  // port on which the cluster accepts connections.
  int32 port = 11 [
    (buf.validate.field).int32.gte = 0,
    (buf.validate.field).int32.lte = 65535
  ];

  // engine for the cluster. Examples: "aurora-mysql", "aurora-postgresql".
  string engine = 12 [(buf.validate.field).required = true];

  // engine_version to deploy. Example: "8.0.mysql_aurora.3.05.2" or "14.6" for Aurora PostgreSQL.
  string engine_version = 13 [(buf.validate.field).required = true];

  // storage_encrypted indicates whether to enable storage encryption for the cluster.
  bool storage_encrypted = 14;

  // kms_key_id KMS key ARN to use for storage encryption when storage_encrypted is true.
  project.planton.shared.foreignkey.v1.StringValueOrRef kms_key_id = 15 [
    (project.planton.shared.foreignkey.v1.default_kind) = AwsKmsKey,
    (project.planton.shared.foreignkey.v1.default_kind_field_path) = "status.outputs.key_arn"
  ];

  // enabled_cloudwatch_logs_exports lists database logs to export to CloudWatch Logs.
  // Aurora MySQL: [audit, error, general, slowquery]
  // Aurora PostgreSQL: [postgresql, upgrade]
  repeated string enabled_cloudwatch_logs_exports = 16 [(buf.validate.field).repeated.unique = true];

  // deletion_protection prevents accidental deletion.
  bool deletion_protection = 17;

  // preferred_maintenance_window in UTC, format 'ddd:hh24:mi-ddd:hh24:mi'.
  string preferred_maintenance_window = 18 [(buf.validate.field).string.pattern = "^(mon|tue|wed|thu|fri|sat|sun):([01][0-9]|2[0-3]):[0-5][0-9]-(mon|tue|wed|thu|fri|sat|sun):([01][0-9]|2[0-3]):[0-5][0-9]$"];

  // backup_retention_period in days (> 0 to enable automated backups).
  int32 backup_retention_period = 19 [
    (buf.validate.field).int32.gte = 0,
    (buf.validate.field).int32.lte = 35
  ];

  // preferred_backup_window in UTC, format 'hh24:mi-hh24:mi'. Must not overlap maintenance window.
  string preferred_backup_window = 20 [(buf.validate.field).string.pattern = "^([01][0-9]|2[0-3]):[0-5][0-9]-([01][0-9]|2[0-3]):[0-5][0-9]$"];

  // copy_tags_to_snapshot copies tags from the cluster to snapshots.
  bool copy_tags_to_snapshot = 21;

  // skip_final_snapshot controls whether a final snapshot is created before cluster deletion.
  bool skip_final_snapshot = 22;

  // final_snapshot_identifier is the identifier to use for the final snapshot when skip_final_snapshot is false.
  string final_snapshot_identifier = 23;

  // iam_database_authentication_enabled enables mapping of IAM users/roles to database logins.
  bool iam_database_authentication_enabled = 24;

  // enable_http_endpoint enables the Data API for Aurora Serverless (where supported).
  bool enable_http_endpoint = 25;

  // serverless_v2_scaling controls Aurora Serverless v2 capacity scaling (if supported by engine/engine_version).
  AwsRdsClusterServerlessV2ScalingConfiguration serverless_v2_scaling = 26;

  // snapshot_identifier creates the cluster from the specified snapshot, when provided.
  string snapshot_identifier = 27;

  // replication_source_identifier creates a read replica of another cluster when provided (ARN or identifier).
  string replication_source_identifier = 28;

  // db_cluster_parameter_group_name is the cluster-level parameter group to associate.
  string db_cluster_parameter_group_name = 29;

  // cluster-level parameters to apply (depends on DB family).
  repeated AwsRdsClusterParameter parameters = 30;

  // vpc_id for the cluster networking context (optional; generally derivable from subnet_ids/subnet group).
  project.planton.shared.foreignkey.v1.StringValueOrRef vpc_id = 31 [
    (project.planton.shared.foreignkey.v1.default_kind) = AwsVpc,
    (project.planton.shared.foreignkey.v1.default_kind_field_path) = "status.outputs.vpc_id"
  ];

  // Optional engine mode. For Aurora Serverless v1 use "serverless"; otherwise "provisioned".
  string engine_mode = 32;

  // storage_type for Aurora (if supported): "aurora" or "aurora-iopt1".
  string storage_type = 33 [
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE,
    (buf.validate.field).string = {
      in: [
        "aurora",
        "aurora-iopt1"
      ]
    }
  ];

  // Conditional validations
  option (buf.validate.message).cel = {
    id: "final_snapshot_id_required_when_not_skipping"
    message: "final_snapshot_identifier must be set when skip_final_snapshot is false"
    expression: "this.skip_final_snapshot ? true : this.final_snapshot_identifier != \"\""
  };

  option (buf.validate.message).cel = {
    id: "subnets_or_group"
    message: "Provide either subnet_ids (>=2) or db_subnet_group_name"
    expression: "(this.subnet_ids.size() >= 2) || has(this.db_subnet_group_name)"
  };

  option (buf.validate.message).cel = {
    id: "password_mutual_exclusion"
    message: "password cannot be set when manage_master_user_password is true"
    expression: "this.manage_master_user_password ? this.password == \"\" : true"
  };

  option (buf.validate.message).cel = {
    id: "engine_mode_allowed"
    message: "engine_mode, if set, must be 'serverless' or 'provisioned'"
    expression: "this.engine_mode == \"\" || this.engine_mode == \"serverless\" || this.engine_mode == \"provisioned\""
  };

  option (buf.validate.message).cel = {
    id: "logs_exports_match_engine"
    message: "enabled_cloudwatch_logs_exports must match engine family"
    expression: "this.engine.startsWith(\"aurora-mysql\") ? this.enabled_cloudwatch_logs_exports.all(x, x == \"audit\" || x == \"error\" || x == \"general\" || x == \"slowquery\") : (this.engine.startsWith(\"aurora-postgresql\") ? this.enabled_cloudwatch_logs_exports.all(x, x == \"postgresql\" || x == \"upgrade\") : true)"
  };
}

// AwsRdsClusterParameter represents a cluster parameter to apply via the DB cluster parameter group.
message AwsRdsClusterParameter {
  // apply_method is either "immediate" (default) or "pending-reboot".
  string apply_method = 1;
  // name of the parameter.
  string name = 2;
  // value of the parameter.
  string value = 3;
}

// AwsRdsClusterServerlessV2ScalingConfiguration configures Aurora Serverless v2 capacity scaling.
message AwsRdsClusterServerlessV2ScalingConfiguration {
  // min_capacity is the minimum ACU.
  double min_capacity = 1 [(buf.validate.field).double.gt = 0];
  // max_capacity is the maximum ACU.
  double max_capacity = 2;

  option (buf.validate.message).cel = {
    id: "serverless_v2_scaling_bounds"
    message: "max_capacity must be >= min_capacity when both are set"
    expression: "this.max_capacity == 0.0 || this.max_capacity >= this.min_capacity"
  };
}
