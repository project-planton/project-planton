// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/provider/aws/awsrdscluster/v1/documentation.proto

//# Overview
//
//The AWS RDS Cluster API resource offers a consistent and streamlined interface for deploying and managing Amazon RDS (Relational Database Service) clusters within our cloud infrastructure. By abstracting the complexities of RDS configurations, this resource enables you to define your database clusters effortlessly while ensuring consistency and compliance across different environments.
//
//## Why We Created This API Resource
//
//Managing RDS clusters can be intricate due to the multitude of configuration options, networking setups, and best practices that need to be considered. To simplify this process and promote a standardized approach, we developed this API resource. It allows you to:
//
//- **Simplify Deployment**: Easily configure and deploy RDS clusters without delving into low-level AWS details.
//- **Ensure Consistency**: Maintain uniform configurations across different environments and clusters.
//- **Enhance Productivity**: Reduce the time and effort required to set up RDS clusters, allowing you to focus on application development.
//
//## Key Features
//
//### Environment Integration
//
//- **Environment Info**: Seamlessly integrates with our environment management system to deploy clusters within specific environments.
//- **Stack Job Settings**: Supports custom stack job settings for infrastructure-as-code deployments.
//
//### AWS Credential Management
//
//- **AWS Credential ID**: Utilizes specified AWS credentials to ensure secure and authorized deployments.
//
//### Customizable Cluster Specifications
//
//- **Engine Configuration**: Specify the database engine (`e.g., aurora, aurora-mysql, aurora-postgresql`), engine version, and engine mode (`global`, `multimaster`, `parallelquery`, `provisioned`, `serverless`).
//- **Instance Type**: Choose the EC2 instance type for the RDS cluster instances to optimize performance and cost.
//- **Cluster Size**: Define the number of instances in the cluster to meet your availability and scalability requirements.
//- **Database Credentials**: Configure master username and password or enable AWS Secrets Manager for password management.
//
//### Networking and Security
//
//- **VPC Integration**: Deploy the RDS cluster within a specified VPC, using subnet groups and security groups for network isolation.
//- **Subnet Configuration**: Provide subnet IDs or a DB subnet group name to control where the cluster instances are deployed.
//- **Security Groups**: Attach security groups to manage inbound and outbound traffic to the cluster.
//- **Public Accessibility**: Optionally make the database accessible from the public internet by setting `is_publicly_accessible`.
//
//### Storage and Encryption
//
//- **Storage Encryption**: Enable encryption at rest for the cluster and specify a custom KMS key if needed.
//- **Performance Insights**: Enable Performance Insights for advanced monitoring and specify a KMS key for encryption.
//
//### Backup and Maintenance
//
//- **Automated Backups**: Configure backup retention periods and backup windows to protect your data.
//- **Maintenance Window**: Specify a preferred maintenance window for system updates and patches.
//- **Final Snapshot**: Control whether a final snapshot is created before cluster deletion and enable deletion protection to prevent accidental deletions.
//
//### Monitoring and Logging
//
//- **CloudWatch Logs Export**: Enable exporting of database logs to CloudWatch Logs for centralized monitoring.
//- **Enhanced Monitoring**: Enable enhanced monitoring and specify the monitoring interval for deeper insights into cluster performance.
//- **Monitoring Role**: Automatically create an IAM role for enhanced monitoring if required.
//
//### Scaling Options
//
//- **Auto Scaling**: Configure auto-scaling policies to adjust the number of instances based on load.
//- **Policy Type**: Choose between `TargetTrackingScaling` and `StepScaling`.
//- **Metrics and Targets**: Define metrics and target values for scaling actions.
//- **Serverless Configurations**:
//- **Serverless v1**: Use `scaling_configuration` to set up auto-scaling properties for serverless clusters, including min/max capacity and auto-pause settings.
//- **Serverless v2**: Utilize `serverlessv2_scaling_configuration` for provisioning serverless v2 clusters with granular capacity settings.
//
//### Advanced Configurations
//
//- **IAM Database Authentication**: Enable IAM authentication for database access.
//- **Parameter Groups**: Specify custom cluster parameter group names and parameters for fine-tuned database settings.
//- **Major Version Upgrades**: Control whether major engine version upgrades are allowed.
//- **SSL/TLS Configuration**: Specify the CA certificate identifier for SSL connections.
//
//## Benefits
//
//- **Simplified Deployment**: Reduces the complexity involved in setting up RDS clusters with a user-friendly API.
//- **Consistency**: Ensures all clusters adhere to organizational standards for security, performance, and scalability.
//- **Scalability**: Leverages auto-scaling and serverless options to handle varying workloads efficiently.
//- **Security**: Integrates with AWS KMS, IAM, and VPCs to enhance security and compliance.
//- **Cost Optimization**: Allows fine-grained control over instance types, scaling policies, and storage options to optimize costs.
//- **Flexibility**: Provides extensive customization to meet specific application requirements without compromising best practices.

package awsrdsclusterv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_project_planton_provider_aws_awsrdscluster_v1_documentation_proto protoreflect.FileDescriptor

var file_project_planton_provider_aws_awsrdscluster_v1_documentation_proto_rawDesc = []byte{
	0x0a, 0x41, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x61,
	0x77, 0x73, 0x72, 0x64, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77,
	0x73, 0x2e, 0x61, 0x77, 0x73, 0x72, 0x64, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x42, 0x91, 0x03, 0x0a, 0x31, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x72, 0x64, 0x73, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x12, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x6d,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x61, 0x77, 0x73,
	0x72, 0x64, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x77,
	0x73, 0x72, 0x64, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x05,
	0x50, 0x50, 0x50, 0x41, 0x41, 0xaa, 0x02, 0x2d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x41, 0x77, 0x73, 0x2e, 0x41, 0x77, 0x73, 0x72, 0x64, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x2d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5c, 0x41, 0x77, 0x73, 0x5c, 0x41, 0x77, 0x73, 0x72, 0x64, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x39, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5c, 0x41, 0x77, 0x73, 0x5c, 0x41, 0x77, 0x73, 0x72, 0x64, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x32, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x3a, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3a, 0x3a,
	0x41, 0x77, 0x73, 0x3a, 0x3a, 0x41, 0x77, 0x73, 0x72, 0x64, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_project_planton_provider_aws_awsrdscluster_v1_documentation_proto_goTypes = []any{}
var file_project_planton_provider_aws_awsrdscluster_v1_documentation_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_awsrdscluster_v1_documentation_proto_init() }
func file_project_planton_provider_aws_awsrdscluster_v1_documentation_proto_init() {
	if File_project_planton_provider_aws_awsrdscluster_v1_documentation_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_provider_aws_awsrdscluster_v1_documentation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_awsrdscluster_v1_documentation_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_awsrdscluster_v1_documentation_proto_depIdxs,
	}.Build()
	File_project_planton_provider_aws_awsrdscluster_v1_documentation_proto = out.File
	file_project_planton_provider_aws_awsrdscluster_v1_documentation_proto_rawDesc = nil
	file_project_planton_provider_aws_awsrdscluster_v1_documentation_proto_goTypes = nil
	file_project_planton_provider_aws_awsrdscluster_v1_documentation_proto_depIdxs = nil
}
