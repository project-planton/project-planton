// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/aws/awsrdscluster/v1/spec.proto

package awsrdsclusterv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/project-planton/project-planton/apis/project/planton/shared/foreignkey/v1"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AwsRdsClusterSpec defines the specification required to deploy an AWS RDS DB Cluster
// (commonly Amazon Aurora MySQL/PostgreSQL, or Multi-AZ DB Cluster). It focuses on
// the cluster-level configuration. Instance-level settings (class, monitoring, etc.)
// are modeled separately by instance resources.
type AwsRdsClusterSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// subnet_ids is the list of subnet IDs used by the DB subnet group for the cluster.
	// Provide at least two subnets in distinct Availability Zones for high availability.
	SubnetIds []*v1.StringValueOrRef `protobuf:"bytes,1,rep,name=subnet_ids,json=subnetIds,proto3" json:"subnet_ids,omitempty"`
	// Optional name of an existing DB subnet group to use instead of providing subnet_ids.
	DbSubnetGroupName *v1.StringValueOrRef `protobuf:"bytes,2,opt,name=db_subnet_group_name,json=dbSubnetGroupName,proto3" json:"db_subnet_group_name,omitempty"`
	// vpc_security_group_ids are additional security groups attached to the cluster.
	SecurityGroupIds []*v1.StringValueOrRef `protobuf:"bytes,3,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	// allowed_cidr_blocks are IPv4 CIDRs to allow ingress to the cluster SG (if created/managed here).
	// Example: "10.0.0.0/16", "0.0.0.0/0"
	AllowedCidrBlocks []string `protobuf:"bytes,4,rep,name=allowed_cidr_blocks,json=allowedCidrBlocks,proto3" json:"allowed_cidr_blocks,omitempty"`
	// associate_security_group_ids lists existing SGs to associate (alongside any created/managed SG).
	AssociateSecurityGroupIds []*v1.StringValueOrRef `protobuf:"bytes,5,rep,name=associate_security_group_ids,json=associateSecurityGroupIds,proto3" json:"associate_security_group_ids,omitempty"`
	// database_name is the name of the initial database to create in the cluster.
	DatabaseName string `protobuf:"bytes,6,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	// manage_master_user_password, when true, lets RDS manage the master user password in AWS Secrets Manager.
	ManageMasterUserPassword bool `protobuf:"varint,7,opt,name=manage_master_user_password,json=manageMasterUserPassword,proto3" json:"manage_master_user_password,omitempty"`
	// master_user_secret_kms_key_id is the KMS key identifier (ARN/alias) for encrypting the managed secret.
	MasterUserSecretKmsKeyId *v1.StringValueOrRef `protobuf:"bytes,8,opt,name=master_user_secret_kms_key_id,json=masterUserSecretKmsKeyId,proto3" json:"master_user_secret_kms_key_id,omitempty"`
	// username is the master database user name.
	Username *string `protobuf:"bytes,9,opt,name=username,proto3,oneof" json:"username,omitempty"`
	// password is the master user password. Cannot be set when manage_master_user_password is true.
	Password string `protobuf:"bytes,10,opt,name=password,proto3" json:"password,omitempty"`
	// port on which the cluster accepts connections.
	Port int32 `protobuf:"varint,11,opt,name=port,proto3" json:"port,omitempty"`
	// engine for the cluster. Examples: "aurora-mysql", "aurora-postgresql".
	Engine string `protobuf:"bytes,12,opt,name=engine,proto3" json:"engine,omitempty"`
	// engine_version to deploy. Example: "8.0.mysql_aurora.3.05.2" or "14.6" for Aurora PostgreSQL.
	EngineVersion string `protobuf:"bytes,13,opt,name=engine_version,json=engineVersion,proto3" json:"engine_version,omitempty"`
	// storage_encrypted indicates whether to enable storage encryption for the cluster.
	StorageEncrypted bool `protobuf:"varint,14,opt,name=storage_encrypted,json=storageEncrypted,proto3" json:"storage_encrypted,omitempty"`
	// kms_key_id KMS key ARN to use for storage encryption when storage_encrypted is true.
	KmsKeyId *v1.StringValueOrRef `protobuf:"bytes,15,opt,name=kms_key_id,json=kmsKeyId,proto3" json:"kms_key_id,omitempty"`
	// enabled_cloudwatch_logs_exports lists database logs to export to CloudWatch Logs.
	// Aurora MySQL: [audit, error, general, slowquery]
	// Aurora PostgreSQL: [postgresql, upgrade]
	EnabledCloudwatchLogsExports []string `protobuf:"bytes,16,rep,name=enabled_cloudwatch_logs_exports,json=enabledCloudwatchLogsExports,proto3" json:"enabled_cloudwatch_logs_exports,omitempty"`
	// deletion_protection prevents accidental deletion.
	DeletionProtection bool `protobuf:"varint,17,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// preferred_maintenance_window in UTC, format 'ddd:hh24:mi-ddd:hh24:mi'.
	PreferredMaintenanceWindow string `protobuf:"bytes,18,opt,name=preferred_maintenance_window,json=preferredMaintenanceWindow,proto3" json:"preferred_maintenance_window,omitempty"`
	// backup_retention_period in days (> 0 to enable automated backups).
	BackupRetentionPeriod int32 `protobuf:"varint,19,opt,name=backup_retention_period,json=backupRetentionPeriod,proto3" json:"backup_retention_period,omitempty"`
	// preferred_backup_window in UTC, format 'hh24:mi-hh24:mi'. Must not overlap maintenance window.
	PreferredBackupWindow string `protobuf:"bytes,20,opt,name=preferred_backup_window,json=preferredBackupWindow,proto3" json:"preferred_backup_window,omitempty"`
	// copy_tags_to_snapshot copies tags from the cluster to snapshots.
	CopyTagsToSnapshot bool `protobuf:"varint,21,opt,name=copy_tags_to_snapshot,json=copyTagsToSnapshot,proto3" json:"copy_tags_to_snapshot,omitempty"`
	// skip_final_snapshot controls whether a final snapshot is created before cluster deletion.
	SkipFinalSnapshot bool `protobuf:"varint,22,opt,name=skip_final_snapshot,json=skipFinalSnapshot,proto3" json:"skip_final_snapshot,omitempty"`
	// final_snapshot_identifier is the identifier to use for the final snapshot when skip_final_snapshot is false.
	FinalSnapshotIdentifier string `protobuf:"bytes,23,opt,name=final_snapshot_identifier,json=finalSnapshotIdentifier,proto3" json:"final_snapshot_identifier,omitempty"`
	// iam_database_authentication_enabled enables mapping of IAM users/roles to database logins.
	IamDatabaseAuthenticationEnabled bool `protobuf:"varint,24,opt,name=iam_database_authentication_enabled,json=iamDatabaseAuthenticationEnabled,proto3" json:"iam_database_authentication_enabled,omitempty"`
	// enable_http_endpoint enables the Data API for Aurora Serverless (where supported).
	EnableHttpEndpoint bool `protobuf:"varint,25,opt,name=enable_http_endpoint,json=enableHttpEndpoint,proto3" json:"enable_http_endpoint,omitempty"`
	// serverless_v2_scaling controls Aurora Serverless v2 capacity scaling (if supported by engine/engine_version).
	ServerlessV2Scaling *AwsRdsClusterServerlessV2ScalingConfiguration `protobuf:"bytes,26,opt,name=serverless_v2_scaling,json=serverlessV2Scaling,proto3" json:"serverless_v2_scaling,omitempty"`
	// snapshot_identifier creates the cluster from the specified snapshot, when provided.
	SnapshotIdentifier string `protobuf:"bytes,27,opt,name=snapshot_identifier,json=snapshotIdentifier,proto3" json:"snapshot_identifier,omitempty"`
	// replication_source_identifier creates a read replica of another cluster when provided (ARN or identifier).
	ReplicationSourceIdentifier string `protobuf:"bytes,28,opt,name=replication_source_identifier,json=replicationSourceIdentifier,proto3" json:"replication_source_identifier,omitempty"`
	// db_cluster_parameter_group_name is the cluster-level parameter group to associate.
	DbClusterParameterGroupName string `protobuf:"bytes,29,opt,name=db_cluster_parameter_group_name,json=dbClusterParameterGroupName,proto3" json:"db_cluster_parameter_group_name,omitempty"`
	// cluster-level parameters to apply (depends on DB family).
	Parameters []*AwsRdsClusterParameter `protobuf:"bytes,30,rep,name=parameters,proto3" json:"parameters,omitempty"`
	// vpc_id for the cluster networking context (optional; generally derivable from subnet_ids/subnet group).
	VpcId *v1.StringValueOrRef `protobuf:"bytes,31,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	// Optional engine mode. For Aurora Serverless v1 use "serverless"; otherwise "provisioned".
	EngineMode string `protobuf:"bytes,32,opt,name=engine_mode,json=engineMode,proto3" json:"engine_mode,omitempty"`
	// storage_type for Aurora (if supported): "aurora" or "aurora-iopt1".
	StorageType   string `protobuf:"bytes,33,opt,name=storage_type,json=storageType,proto3" json:"storage_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsRdsClusterSpec) Reset() {
	*x = AwsRdsClusterSpec{}
	mi := &file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsRdsClusterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsRdsClusterSpec) ProtoMessage() {}

func (x *AwsRdsClusterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsRdsClusterSpec.ProtoReflect.Descriptor instead.
func (*AwsRdsClusterSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AwsRdsClusterSpec) GetSubnetIds() []*v1.StringValueOrRef {
	if x != nil {
		return x.SubnetIds
	}
	return nil
}

func (x *AwsRdsClusterSpec) GetDbSubnetGroupName() *v1.StringValueOrRef {
	if x != nil {
		return x.DbSubnetGroupName
	}
	return nil
}

func (x *AwsRdsClusterSpec) GetSecurityGroupIds() []*v1.StringValueOrRef {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *AwsRdsClusterSpec) GetAllowedCidrBlocks() []string {
	if x != nil {
		return x.AllowedCidrBlocks
	}
	return nil
}

func (x *AwsRdsClusterSpec) GetAssociateSecurityGroupIds() []*v1.StringValueOrRef {
	if x != nil {
		return x.AssociateSecurityGroupIds
	}
	return nil
}

func (x *AwsRdsClusterSpec) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *AwsRdsClusterSpec) GetManageMasterUserPassword() bool {
	if x != nil {
		return x.ManageMasterUserPassword
	}
	return false
}

func (x *AwsRdsClusterSpec) GetMasterUserSecretKmsKeyId() *v1.StringValueOrRef {
	if x != nil {
		return x.MasterUserSecretKmsKeyId
	}
	return nil
}

func (x *AwsRdsClusterSpec) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *AwsRdsClusterSpec) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AwsRdsClusterSpec) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AwsRdsClusterSpec) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *AwsRdsClusterSpec) GetEngineVersion() string {
	if x != nil {
		return x.EngineVersion
	}
	return ""
}

func (x *AwsRdsClusterSpec) GetStorageEncrypted() bool {
	if x != nil {
		return x.StorageEncrypted
	}
	return false
}

func (x *AwsRdsClusterSpec) GetKmsKeyId() *v1.StringValueOrRef {
	if x != nil {
		return x.KmsKeyId
	}
	return nil
}

func (x *AwsRdsClusterSpec) GetEnabledCloudwatchLogsExports() []string {
	if x != nil {
		return x.EnabledCloudwatchLogsExports
	}
	return nil
}

func (x *AwsRdsClusterSpec) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *AwsRdsClusterSpec) GetPreferredMaintenanceWindow() string {
	if x != nil {
		return x.PreferredMaintenanceWindow
	}
	return ""
}

func (x *AwsRdsClusterSpec) GetBackupRetentionPeriod() int32 {
	if x != nil {
		return x.BackupRetentionPeriod
	}
	return 0
}

func (x *AwsRdsClusterSpec) GetPreferredBackupWindow() string {
	if x != nil {
		return x.PreferredBackupWindow
	}
	return ""
}

func (x *AwsRdsClusterSpec) GetCopyTagsToSnapshot() bool {
	if x != nil {
		return x.CopyTagsToSnapshot
	}
	return false
}

func (x *AwsRdsClusterSpec) GetSkipFinalSnapshot() bool {
	if x != nil {
		return x.SkipFinalSnapshot
	}
	return false
}

func (x *AwsRdsClusterSpec) GetFinalSnapshotIdentifier() string {
	if x != nil {
		return x.FinalSnapshotIdentifier
	}
	return ""
}

func (x *AwsRdsClusterSpec) GetIamDatabaseAuthenticationEnabled() bool {
	if x != nil {
		return x.IamDatabaseAuthenticationEnabled
	}
	return false
}

func (x *AwsRdsClusterSpec) GetEnableHttpEndpoint() bool {
	if x != nil {
		return x.EnableHttpEndpoint
	}
	return false
}

func (x *AwsRdsClusterSpec) GetServerlessV2Scaling() *AwsRdsClusterServerlessV2ScalingConfiguration {
	if x != nil {
		return x.ServerlessV2Scaling
	}
	return nil
}

func (x *AwsRdsClusterSpec) GetSnapshotIdentifier() string {
	if x != nil {
		return x.SnapshotIdentifier
	}
	return ""
}

func (x *AwsRdsClusterSpec) GetReplicationSourceIdentifier() string {
	if x != nil {
		return x.ReplicationSourceIdentifier
	}
	return ""
}

func (x *AwsRdsClusterSpec) GetDbClusterParameterGroupName() string {
	if x != nil {
		return x.DbClusterParameterGroupName
	}
	return ""
}

func (x *AwsRdsClusterSpec) GetParameters() []*AwsRdsClusterParameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *AwsRdsClusterSpec) GetVpcId() *v1.StringValueOrRef {
	if x != nil {
		return x.VpcId
	}
	return nil
}

func (x *AwsRdsClusterSpec) GetEngineMode() string {
	if x != nil {
		return x.EngineMode
	}
	return ""
}

func (x *AwsRdsClusterSpec) GetStorageType() string {
	if x != nil {
		return x.StorageType
	}
	return ""
}

// AwsRdsClusterParameter represents a cluster parameter to apply via the DB cluster parameter group.
type AwsRdsClusterParameter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// apply_method is either "immediate" (default) or "pending-reboot".
	ApplyMethod string `protobuf:"bytes,1,opt,name=apply_method,json=applyMethod,proto3" json:"apply_method,omitempty"`
	// name of the parameter.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// value of the parameter.
	Value         string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsRdsClusterParameter) Reset() {
	*x = AwsRdsClusterParameter{}
	mi := &file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsRdsClusterParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsRdsClusterParameter) ProtoMessage() {}

func (x *AwsRdsClusterParameter) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsRdsClusterParameter.ProtoReflect.Descriptor instead.
func (*AwsRdsClusterParameter) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *AwsRdsClusterParameter) GetApplyMethod() string {
	if x != nil {
		return x.ApplyMethod
	}
	return ""
}

func (x *AwsRdsClusterParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AwsRdsClusterParameter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// AwsRdsClusterServerlessV2ScalingConfiguration configures Aurora Serverless v2 capacity scaling.
type AwsRdsClusterServerlessV2ScalingConfiguration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// min_capacity is the minimum ACU.
	MinCapacity float64 `protobuf:"fixed64,1,opt,name=min_capacity,json=minCapacity,proto3" json:"min_capacity,omitempty"`
	// max_capacity is the maximum ACU.
	MaxCapacity   float64 `protobuf:"fixed64,2,opt,name=max_capacity,json=maxCapacity,proto3" json:"max_capacity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsRdsClusterServerlessV2ScalingConfiguration) Reset() {
	*x = AwsRdsClusterServerlessV2ScalingConfiguration{}
	mi := &file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsRdsClusterServerlessV2ScalingConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsRdsClusterServerlessV2ScalingConfiguration) ProtoMessage() {}

func (x *AwsRdsClusterServerlessV2ScalingConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsRdsClusterServerlessV2ScalingConfiguration.ProtoReflect.Descriptor instead.
func (*AwsRdsClusterServerlessV2ScalingConfiguration) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *AwsRdsClusterServerlessV2ScalingConfiguration) GetMinCapacity() float64 {
	if x != nil {
		return x.MinCapacity
	}
	return 0
}

func (x *AwsRdsClusterServerlessV2ScalingConfiguration) GetMaxCapacity() float64 {
	if x != nil {
		return x.MaxCapacity
	}
	return 0
}

var File_project_planton_provider_aws_awsrdscluster_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_rawDesc = "" +
	"\n" +
	"8project/planton/provider/aws/awsrdscluster/v1/spec.proto\x12-project.planton.provider.aws.awsrdscluster.v1\x1a\x1bbuf/validate/validate.proto\x1a6project/planton/shared/foreignkey/v1/foreign_key.proto\x1a,project/planton/shared/options/options.proto\"\xab\x1e\n" +
	"\x11AwsRdsClusterSpec\x12\x85\x01\n" +
	"\n" +
	"subnet_ids\x18\x01 \x03(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB.\x88\xd4a\xd9\x01\x92\xd4a%status.outputs.private_subnets.[*].idR\tsubnetIds\x12g\n" +
	"\x14db_subnet_group_name\x18\x02 \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefR\x11dbSubnetGroupName\x12\x8f\x01\n" +
	"\x12security_group_ids\x18\x03 \x03(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB)\x88\xd4a\xd7\x01\x92\xd4a status.outputs.security_group_idR\x10securityGroupIds\x12\xa1\x01\n" +
	"\x13allowed_cidr_blocks\x18\x04 \x03(\tBq\xbaHn\x92\x01k\x18\x01\"gre2c^(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}/(?:[0-9]|[12]\\d|3[0-2])$R\x11allowedCidrBlocks\x12\xa2\x01\n" +
	"\x1cassociate_security_group_ids\x18\x05 \x03(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB)\x88\xd4a\xd7\x01\x92\xd4a status.outputs.security_group_idR\x19associateSecurityGroupIds\x12#\n" +
	"\rdatabase_name\x18\x06 \x01(\tR\fdatabaseName\x12G\n" +
	"\x1bmanage_master_user_password\x18\a \x01(\bB\b\x92\xa6\x1d\x04trueR\x18manageMasterUserPassword\x12\x98\x01\n" +
	"\x1dmaster_user_secret_kms_key_id\x18\b \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB\x1f\x88\xd4a\xdc\x01\x92\xd4a\x16status.outputs.key_arnR\x18masterUserSecretKmsKeyId\x12+\n" +
	"\busername\x18\t \x01(\tB\n" +
	"\x8a\xa6\x1d\x06masterH\x00R\busername\x88\x01\x01\x12\x1a\n" +
	"\bpassword\x18\n" +
	" \x01(\tR\bpassword\x12\x1f\n" +
	"\x04port\x18\v \x01(\x05B\v\xbaH\b\x1a\x06\x18\xff\xff\x03(\x00R\x04port\x12\x1e\n" +
	"\x06engine\x18\f \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x06engine\x12-\n" +
	"\x0eengine_version\x18\r \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\rengineVersion\x12+\n" +
	"\x11storage_encrypted\x18\x0e \x01(\bR\x10storageEncrypted\x12u\n" +
	"\n" +
	"kms_key_id\x18\x0f \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB\x1f\x88\xd4a\xdc\x01\x92\xd4a\x16status.outputs.key_arnR\bkmsKeyId\x12O\n" +
	"\x1fenabled_cloudwatch_logs_exports\x18\x10 \x03(\tB\b\xbaH\x05\x92\x01\x02\x18\x01R\x1cenabledCloudwatchLogsExports\x12/\n" +
	"\x13deletion_protection\x18\x11 \x01(\bR\x12deletionProtection\x12\xc3\x01\n" +
	"\x1cpreferred_maintenance_window\x18\x12 \x01(\tB\x80\x01\xbaH}r{2y^(mon|tue|wed|thu|fri|sat|sun):([01][0-9]|2[0-3]):[0-5][0-9]-(mon|tue|wed|thu|fri|sat|sun):([01][0-9]|2[0-3]):[0-5][0-9]$R\x1apreferredMaintenanceWindow\x12A\n" +
	"\x17backup_retention_period\x18\x13 \x01(\x05B\t\xbaH\x06\x1a\x04\x18#(\x00R\x15backupRetentionPeriod\x12|\n" +
	"\x17preferred_backup_window\x18\x14 \x01(\tBD\xbaHAr?2=^([01][0-9]|2[0-3]):[0-5][0-9]-([01][0-9]|2[0-3]):[0-5][0-9]$R\x15preferredBackupWindow\x121\n" +
	"\x15copy_tags_to_snapshot\x18\x15 \x01(\bR\x12copyTagsToSnapshot\x12.\n" +
	"\x13skip_final_snapshot\x18\x16 \x01(\bR\x11skipFinalSnapshot\x12:\n" +
	"\x19final_snapshot_identifier\x18\x17 \x01(\tR\x17finalSnapshotIdentifier\x12M\n" +
	"#iam_database_authentication_enabled\x18\x18 \x01(\bR iamDatabaseAuthenticationEnabled\x120\n" +
	"\x14enable_http_endpoint\x18\x19 \x01(\bR\x12enableHttpEndpoint\x12\x90\x01\n" +
	"\x15serverless_v2_scaling\x18\x1a \x01(\v2\\.project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterServerlessV2ScalingConfigurationR\x13serverlessV2Scaling\x12/\n" +
	"\x13snapshot_identifier\x18\x1b \x01(\tR\x12snapshotIdentifier\x12B\n" +
	"\x1dreplication_source_identifier\x18\x1c \x01(\tR\x1breplicationSourceIdentifier\x12D\n" +
	"\x1fdb_cluster_parameter_group_name\x18\x1d \x01(\tR\x1bdbClusterParameterGroupName\x12e\n" +
	"\n" +
	"parameters\x18\x1e \x03(\v2E.project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterParameterR\n" +
	"parameters\x12m\n" +
	"\x06vpc_id\x18\x1f \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB\x1e\x88\xd4a\xd9\x01\x92\xd4a\x15status.outputs.vpc_idR\x05vpcId\x12\x1f\n" +
	"\vengine_mode\x18  \x01(\tR\n" +
	"engineMode\x12A\n" +
	"\fstorage_type\x18! \x01(\tB\x1e\xbaH\x1b\xd8\x01\x01r\x16R\x06auroraR\faurora-iopt1R\vstorageType:\xa5\b\xbaH\xa1\b\x1a\xbf\x01\n" +
	",final_snapshot_id_required_when_not_skipping\x12Gfinal_snapshot_identifier must be set when skip_final_snapshot is false\x1aFthis.skip_final_snapshot ? true : this.final_snapshot_identifier != \"\"\x1a\x8c\x01\n" +
	"\x10subnets_or_group\x127Provide either subnet_ids (>=2) or db_subnet_group_name\x1a?(this.subnet_ids.size() >= 2) || has(this.db_subnet_group_name)\x1a\x9b\x01\n" +
	"\x19password_mutual_exclusion\x12?password cannot be set when manage_master_user_password is true\x1a=this.manage_master_user_password ? this.password == \"\" : true\x1a\xb2\x01\n" +
	"\x13engine_mode_allowed\x12:engine_mode, if set, must be 'serverless' or 'provisioned'\x1a_this.engine_mode == \"\" || this.engine_mode == \"serverless\" || this.engine_mode == \"provisioned\"\x1a\xfa\x02\n" +
	"\x19logs_exports_match_engine\x128enabled_cloudwatch_logs_exports must match engine family\x1a\xa2\x02this.engine.startsWith(\"aurora-mysql\") ? this.enabled_cloudwatch_logs_exports.all(x, x == \"audit\" || x == \"error\" || x == \"general\" || x == \"slowquery\") : (this.engine.startsWith(\"aurora-postgresql\") ? this.enabled_cloudwatch_logs_exports.all(x, x == \"postgresql\" || x == \"upgrade\") : true)B\v\n" +
	"\t_username\"e\n" +
	"\x16AwsRdsClusterParameter\x12!\n" +
	"\fapply_method\x18\x01 \x01(\tR\vapplyMethod\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x03 \x01(\tR\x05value\"\xa9\x02\n" +
	"-AwsRdsClusterServerlessV2ScalingConfiguration\x121\n" +
	"\fmin_capacity\x18\x01 \x01(\x01B\x0e\xbaH\v\x12\t!\x00\x00\x00\x00\x00\x00\x00\x00R\vminCapacity\x12!\n" +
	"\fmax_capacity\x18\x02 \x01(\x01R\vmaxCapacity:\xa1\x01\xbaH\x9d\x01\x1a\x9a\x01\n" +
	"\x1cserverless_v2_scaling_bounds\x126max_capacity must be >= min_capacity when both are set\x1aBthis.max_capacity == 0.0 || this.max_capacity >= this.min_capacityB\x88\x03\n" +
	"1com.project.planton.provider.aws.awsrdscluster.v1B\tSpecProtoP\x01Zmgithub.com/project-planton/project-planton/apis/project/planton/provider/aws/awsrdscluster/v1;awsrdsclusterv1\xa2\x02\x05PPPAA\xaa\x02-Project.Planton.Provider.Aws.Awsrdscluster.V1\xca\x02-Project\\Planton\\Provider\\Aws\\Awsrdscluster\\V1\xe2\x029Project\\Planton\\Provider\\Aws\\Awsrdscluster\\V1\\GPBMetadata\xea\x022Project::Planton::Provider::Aws::Awsrdscluster::V1b\x06proto3"

var (
	file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_rawDescData
}

var file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_goTypes = []any{
	(*AwsRdsClusterSpec)(nil),                             // 0: project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterSpec
	(*AwsRdsClusterParameter)(nil),                        // 1: project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterParameter
	(*AwsRdsClusterServerlessV2ScalingConfiguration)(nil), // 2: project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterServerlessV2ScalingConfiguration
	(*v1.StringValueOrRef)(nil),                           // 3: project.planton.shared.foreignkey.v1.StringValueOrRef
}
var file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_depIdxs = []int32{
	3, // 0: project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterSpec.subnet_ids:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	3, // 1: project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterSpec.db_subnet_group_name:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	3, // 2: project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterSpec.security_group_ids:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	3, // 3: project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterSpec.associate_security_group_ids:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	3, // 4: project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterSpec.master_user_secret_kms_key_id:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	3, // 5: project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterSpec.kms_key_id:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	2, // 6: project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterSpec.serverless_v2_scaling:type_name -> project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterServerlessV2ScalingConfiguration
	1, // 7: project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterSpec.parameters:type_name -> project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterParameter
	3, // 8: project.planton.provider.aws.awsrdscluster.v1.AwsRdsClusterSpec.vpc_id:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_init() }
func file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_init() {
	if File_project_planton_provider_aws_awsrdscluster_v1_spec_proto != nil {
		return
	}
	file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_awsrdscluster_v1_spec_proto = out.File
	file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_goTypes = nil
	file_project_planton_provider_aws_awsrdscluster_v1_spec_proto_depIdxs = nil
}
