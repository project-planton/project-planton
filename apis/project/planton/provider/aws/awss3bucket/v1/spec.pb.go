// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/aws/awss3bucket/v1/spec.proto

package awss3bucketv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AwsS3BucketSpec defines the specification required to deploy an AWS AWS S3 Bucket.
// This message encapsulates all configurations necessary for setting up an S3 bucket,
// including settings for public access and the AWS region where the bucket will be created.
// Amazon S3 (Simple Storage Service) provides object storage through a web service interface,
// allowing you to store and retrieve any amount of data from anywhere on the web.
// With this specification, you can automate the creation and configuration of S3 buckets,
// ensuring that your storage resources are correctly set up according to your requirements.
// This is particularly useful for managing large-scale storage needs, hosting static websites,
// or storing data for backup and archiving.
type AwsS3BucketSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Flag to indicate if the S3 bucket should have external (public) access.
	// When set to `true`, the bucket will be accessible publicly over the internet,
	// allowing anyone to access the objects stored within it.
	// When set to `false` (default), the bucket is private, and access is restricted
	// based on AWS Identity and Access Management (IAM) policies and bucket policies.
	// Public access should be used cautiously to avoid unintended data exposure.
	IsPublic bool `protobuf:"varint,1,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	// The AWS region where the S3 bucket will be created.
	// This must be a valid AWS region where S3 is available.
	// Specifying the region is important because it affects data latency and costs.
	// For a list of AWS regions, see: https://aws.amazon.com/about-aws/global-infrastructure/regions_az/
	AwsRegion     string `protobuf:"bytes,2,opt,name=aws_region,json=awsRegion,proto3" json:"aws_region,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsS3BucketSpec) Reset() {
	*x = AwsS3BucketSpec{}
	mi := &file_project_planton_provider_aws_awss3bucket_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsS3BucketSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsS3BucketSpec) ProtoMessage() {}

func (x *AwsS3BucketSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awss3bucket_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsS3BucketSpec.ProtoReflect.Descriptor instead.
func (*AwsS3BucketSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awss3bucket_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AwsS3BucketSpec) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *AwsS3BucketSpec) GetAwsRegion() string {
	if x != nil {
		return x.AwsRegion
	}
	return ""
}

var File_project_planton_provider_aws_awss3bucket_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_aws_awss3bucket_v1_spec_proto_rawDesc = "" +
	"\n" +
	"6project/planton/provider/aws/awss3bucket/v1/spec.proto\x12+project.planton.provider.aws.awss3bucket.v1\x1a\x1bbuf/validate/validate.proto\"V\n" +
	"\x0fAwsS3BucketSpec\x12\x1b\n" +
	"\tis_public\x18\x01 \x01(\bR\bisPublic\x12&\n" +
	"\n" +
	"aws_region\x18\x02 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\tawsRegionB\xfa\x02\n" +
	"/com.project.planton.provider.aws.awss3bucket.v1B\tSpecProtoP\x01Zigithub.com/project-planton/project-planton/apis/project/planton/provider/aws/awss3bucket/v1;awss3bucketv1\xa2\x02\x05PPPAA\xaa\x02+Project.Planton.Provider.Aws.Awss3bucket.V1\xca\x02+Project\\Planton\\Provider\\Aws\\Awss3bucket\\V1\xe2\x027Project\\Planton\\Provider\\Aws\\Awss3bucket\\V1\\GPBMetadata\xea\x020Project::Planton::Provider::Aws::Awss3bucket::V1b\x06proto3"

var (
	file_project_planton_provider_aws_awss3bucket_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_awss3bucket_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_aws_awss3bucket_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_awss3bucket_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_awss3bucket_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awss3bucket_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awss3bucket_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_aws_awss3bucket_v1_spec_proto_rawDescData
}

var file_project_planton_provider_aws_awss3bucket_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_provider_aws_awss3bucket_v1_spec_proto_goTypes = []any{
	(*AwsS3BucketSpec)(nil), // 0: project.planton.provider.aws.awss3bucket.v1.AwsS3BucketSpec
}
var file_project_planton_provider_aws_awss3bucket_v1_spec_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_awss3bucket_v1_spec_proto_init() }
func file_project_planton_provider_aws_awss3bucket_v1_spec_proto_init() {
	if File_project_planton_provider_aws_awss3bucket_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awss3bucket_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awss3bucket_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_awss3bucket_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_awss3bucket_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_aws_awss3bucket_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_awss3bucket_v1_spec_proto = out.File
	file_project_planton_provider_aws_awss3bucket_v1_spec_proto_goTypes = nil
	file_project_planton_provider_aws_awss3bucket_v1_spec_proto_depIdxs = nil
}
