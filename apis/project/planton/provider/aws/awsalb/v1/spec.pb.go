// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/aws/awsalb/v1/spec.proto

package awsalbv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/project-planton/project-planton/apis/project/planton/shared/foreignkey/v1"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AwsAlbSpec captures the essential fields to create an Application Load Balancer on AWS.
type AwsAlbSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// list of subnet IDs in which to create the ALB. AWS requires at least two subnets
	// for ALBs, which also ensures high availability across multiple Availability Zones.
	// Typically use private subnets for internal ALBs or public subnets for internet-facing ALBs.
	Subnets []string `protobuf:"bytes,1,rep,name=subnets,proto3" json:"subnets,omitempty"`
	// list of security group IDs to attach to the ALB.
	SecurityGroups []string `protobuf:"bytes,2,rep,name=security_groups,json=securityGroups,proto3" json:"security_groups,omitempty"`
	// indicates whether the ALB is internal or internet-facing.
	// If true, the ALB is internal; if false (or not set), it is internet-facing.
	Internal bool `protobuf:"varint,3,opt,name=internal,proto3" json:"internal,omitempty"`
	// indicates whether the ALB should have deletion protection enabled.
	// This prevents accidental deletion.
	DeleteProtectionEnabled bool `protobuf:"varint,5,opt,name=delete_protection_enabled,json=deleteProtectionEnabled,proto3" json:"delete_protection_enabled,omitempty"`
	// sets the idle timeout in seconds for connections to the ALB.
	// If omitted, AWS default is 60 seconds.
	IdleTimeoutSeconds int32 `protobuf:"varint,6,opt,name=idle_timeout_seconds,json=idleTimeoutSeconds,proto3" json:"idle_timeout_seconds,omitempty"`
	// dns configuration allows the resource to manage Route 53 DNS if enabled.
	Dns *AwsAlbDns `protobuf:"bytes,7,opt,name=dns,proto3" json:"dns,omitempty"`
	// ssl configuration allows a single toggle for SSL, plus a certificate ARN if enabled.
	Ssl           *AwsAlbSsl `protobuf:"bytes,8,opt,name=ssl,proto3" json:"ssl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsAlbSpec) Reset() {
	*x = AwsAlbSpec{}
	mi := &file_project_planton_provider_aws_awsalb_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsAlbSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsAlbSpec) ProtoMessage() {}

func (x *AwsAlbSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsalb_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsAlbSpec.ProtoReflect.Descriptor instead.
func (*AwsAlbSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsalb_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AwsAlbSpec) GetSubnets() []string {
	if x != nil {
		return x.Subnets
	}
	return nil
}

func (x *AwsAlbSpec) GetSecurityGroups() []string {
	if x != nil {
		return x.SecurityGroups
	}
	return nil
}

func (x *AwsAlbSpec) GetInternal() bool {
	if x != nil {
		return x.Internal
	}
	return false
}

func (x *AwsAlbSpec) GetDeleteProtectionEnabled() bool {
	if x != nil {
		return x.DeleteProtectionEnabled
	}
	return false
}

func (x *AwsAlbSpec) GetIdleTimeoutSeconds() int32 {
	if x != nil {
		return x.IdleTimeoutSeconds
	}
	return 0
}

func (x *AwsAlbSpec) GetDns() *AwsAlbDns {
	if x != nil {
		return x.Dns
	}
	return nil
}

func (x *AwsAlbSpec) GetSsl() *AwsAlbSsl {
	if x != nil {
		return x.Ssl
	}
	return nil
}

// AwsAlbDns defines the Route 53 DNS configuration for the ALB.
type AwsAlbDns struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// enabled, when set to true, indicates that the ALB resource
	// should create DNS records in Route 53.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// route53_zone_id is the Route 53 Hosted Zone ID where DNS records
	// will be created.
	Route53ZoneId string `protobuf:"bytes,2,opt,name=route53_zone_id,json=route53ZoneId,proto3" json:"route53_zone_id,omitempty"`
	// hostnames is a list of domain names (e.g., ["app.example.com"])
	// that will point to this ALB.
	Hostnames     []string `protobuf:"bytes,3,rep,name=hostnames,proto3" json:"hostnames,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsAlbDns) Reset() {
	*x = AwsAlbDns{}
	mi := &file_project_planton_provider_aws_awsalb_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsAlbDns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsAlbDns) ProtoMessage() {}

func (x *AwsAlbDns) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsalb_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsAlbDns.ProtoReflect.Descriptor instead.
func (*AwsAlbDns) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsalb_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *AwsAlbDns) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AwsAlbDns) GetRoute53ZoneId() string {
	if x != nil {
		return x.Route53ZoneId
	}
	return ""
}

func (x *AwsAlbDns) GetHostnames() []string {
	if x != nil {
		return x.Hostnames
	}
	return nil
}

// AwsAlbSsl defines a toggle for SSL, plus a certificate ARN required if enabled is true.
type AwsAlbSsl struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Enabled        bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	CertificateArn *v1.StringValueOrRef   `protobuf:"bytes,2,opt,name=certificate_arn,json=certificateArn,proto3" json:"certificate_arn,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AwsAlbSsl) Reset() {
	*x = AwsAlbSsl{}
	mi := &file_project_planton_provider_aws_awsalb_v1_spec_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsAlbSsl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsAlbSsl) ProtoMessage() {}

func (x *AwsAlbSsl) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsalb_v1_spec_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsAlbSsl.ProtoReflect.Descriptor instead.
func (*AwsAlbSsl) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsalb_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *AwsAlbSsl) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AwsAlbSsl) GetCertificateArn() *v1.StringValueOrRef {
	if x != nil {
		return x.CertificateArn
	}
	return nil
}

var File_project_planton_provider_aws_awsalb_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_aws_awsalb_v1_spec_proto_rawDesc = "" +
	"\n" +
	"1project/planton/provider/aws/awsalb/v1/spec.proto\x12&project.planton.provider.aws.awsalb.v1\x1a\x1bbuf/validate/validate.proto\x1a6project/planton/shared/foreignkey/v1/foreign_key.proto\x1a,project/planton/shared/options/options.proto\"\x84\x03\n" +
	"\n" +
	"AwsAlbSpec\x12'\n" +
	"\asubnets\x18\x01 \x03(\tB\r\xbaH\n" +
	"\xc8\x01\x01\x92\x01\x04\b\x02\x18\x01R\asubnets\x121\n" +
	"\x0fsecurity_groups\x18\x02 \x03(\tB\b\xbaH\x05\x92\x01\x02\x18\x01R\x0esecurityGroups\x12\x1a\n" +
	"\binternal\x18\x03 \x01(\bR\binternal\x12:\n" +
	"\x19delete_protection_enabled\x18\x05 \x01(\bR\x17deleteProtectionEnabled\x128\n" +
	"\x14idle_timeout_seconds\x18\x06 \x01(\x05B\x06\x92\xa6\x1d\x0260R\x12idleTimeoutSeconds\x12C\n" +
	"\x03dns\x18\a \x01(\v21.project.planton.provider.aws.awsalb.v1.AwsAlbDnsR\x03dns\x12C\n" +
	"\x03ssl\x18\b \x01(\v21.project.planton.provider.aws.awsalb.v1.AwsAlbSslR\x03ssl\"u\n" +
	"\tAwsAlbDns\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12&\n" +
	"\x0froute53_zone_id\x18\x02 \x01(\tR\rroute53ZoneId\x12&\n" +
	"\thostnames\x18\x03 \x03(\tB\b\xbaH\x05\x92\x01\x02\x18\x01R\thostnames\"\xc2\x02\n" +
	"\tAwsAlbSsl\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12_\n" +
	"\x0fcertificate_arn\x18\x02 \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefR\x0ecertificateArn:\xb9\x01\xbaH\xb5\x01\x1a\xb2\x01\n" +
	" cert_arn_required_if_ssl_enabled\x122certificate_arn must be set if ssl.enabled is true\x1aZ!this.enabled || (has(this.certificate_arn.value) || has(this.certificate_arn.value_from))B\xd7\x02\n" +
	"*com.project.planton.provider.aws.awsalb.v1B\tSpecProtoP\x01Z_github.com/project-planton/project-planton/apis/project/planton/provider/aws/awsalb/v1;awsalbv1\xa2\x02\x05PPPAA\xaa\x02&Project.Planton.Provider.Aws.Awsalb.V1\xca\x02&Project\\Planton\\Provider\\Aws\\Awsalb\\V1\xe2\x022Project\\Planton\\Provider\\Aws\\Awsalb\\V1\\GPBMetadata\xea\x02+Project::Planton::Provider::Aws::Awsalb::V1b\x06proto3"

var (
	file_project_planton_provider_aws_awsalb_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_awsalb_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_aws_awsalb_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_awsalb_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_awsalb_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awsalb_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awsalb_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_aws_awsalb_v1_spec_proto_rawDescData
}

var file_project_planton_provider_aws_awsalb_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_project_planton_provider_aws_awsalb_v1_spec_proto_goTypes = []any{
	(*AwsAlbSpec)(nil),          // 0: project.planton.provider.aws.awsalb.v1.AwsAlbSpec
	(*AwsAlbDns)(nil),           // 1: project.planton.provider.aws.awsalb.v1.AwsAlbDns
	(*AwsAlbSsl)(nil),           // 2: project.planton.provider.aws.awsalb.v1.AwsAlbSsl
	(*v1.StringValueOrRef)(nil), // 3: project.planton.shared.foreignkey.v1.StringValueOrRef
}
var file_project_planton_provider_aws_awsalb_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.aws.awsalb.v1.AwsAlbSpec.dns:type_name -> project.planton.provider.aws.awsalb.v1.AwsAlbDns
	2, // 1: project.planton.provider.aws.awsalb.v1.AwsAlbSpec.ssl:type_name -> project.planton.provider.aws.awsalb.v1.AwsAlbSsl
	3, // 2: project.planton.provider.aws.awsalb.v1.AwsAlbSsl.certificate_arn:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_awsalb_v1_spec_proto_init() }
func file_project_planton_provider_aws_awsalb_v1_spec_proto_init() {
	if File_project_planton_provider_aws_awsalb_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awsalb_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awsalb_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_awsalb_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_awsalb_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_aws_awsalb_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_awsalb_v1_spec_proto = out.File
	file_project_planton_provider_aws_awsalb_v1_spec_proto_goTypes = nil
	file_project_planton_provider_aws_awsalb_v1_spec_proto_depIdxs = nil
}
