// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/provider/aws/awsalb/v1/spec.proto

package awsalbv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AwsAlbSpec captures the essential fields to create an Application Load Balancer on AWS.
type AwsAlbSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// subnets is a list of subnet IDs in which to create the ALB.
	// Often private subnets for internal or public subnets for internet-facing.
	Subnets []string `protobuf:"bytes,1,rep,name=subnets,proto3" json:"subnets,omitempty"`
	// securityGroups is a list of security group IDs to attach to the ALB.
	SecurityGroups []string `protobuf:"bytes,2,rep,name=security_groups,json=securityGroups,proto3" json:"security_groups,omitempty"`
	// scheme indicates whether the ALB is internet-facing or internal.
	// Valid values: "internet-facing" or "internal".
	// If omitted, default to "internet-facing".
	Scheme string `protobuf:"bytes,3,opt,name=scheme,proto3" json:"scheme,omitempty"`
	// ipAddressType can be "ipv4" or "dualstack".
	// If omitted, default to "ipv4".
	IpAddressType string `protobuf:"bytes,4,opt,name=ip_address_type,json=ipAddressType,proto3" json:"ip_address_type,omitempty"`
	// enable_deletion_protection indicates whether the ALB should have deletion protection enabled.
	// This prevents accidental deletion.
	EnableDeletionProtection bool `protobuf:"varint,5,opt,name=enable_deletion_protection,json=enableDeletionProtection,proto3" json:"enable_deletion_protection,omitempty"`
	// idle_timeout_seconds sets the idle timeout in seconds for connections to the ALB.
	// If omitted, AWS default is 60 seconds.
	IdleTimeoutSeconds int32 `protobuf:"varint,6,opt,name=idle_timeout_seconds,json=idleTimeoutSeconds,proto3" json:"idle_timeout_seconds,omitempty"`
	// optional list of listeners. If empty, you'll have to define them separately
	// or rely on a separate resource that references this ALB.
	Listeners []*AwsAlbListener `protobuf:"bytes,7,rep,name=listeners,proto3" json:"listeners,omitempty"`
	// dns configuration allows the resource to manage Route 53 DNS if enabled.
	Dns *AwsAlbDns `protobuf:"bytes,8,opt,name=dns,proto3" json:"dns,omitempty"`
	// ssl configuration allows a single toggle for SSL, plus a certificate ARN if enabled.
	Ssl *AwsAlbSsl `protobuf:"bytes,9,opt,name=ssl,proto3" json:"ssl,omitempty"`
}

func (x *AwsAlbSpec) Reset() {
	*x = AwsAlbSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsalb_v1_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsAlbSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsAlbSpec) ProtoMessage() {}

func (x *AwsAlbSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsalb_v1_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsAlbSpec.ProtoReflect.Descriptor instead.
func (*AwsAlbSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsalb_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AwsAlbSpec) GetSubnets() []string {
	if x != nil {
		return x.Subnets
	}
	return nil
}

func (x *AwsAlbSpec) GetSecurityGroups() []string {
	if x != nil {
		return x.SecurityGroups
	}
	return nil
}

func (x *AwsAlbSpec) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *AwsAlbSpec) GetIpAddressType() string {
	if x != nil {
		return x.IpAddressType
	}
	return ""
}

func (x *AwsAlbSpec) GetEnableDeletionProtection() bool {
	if x != nil {
		return x.EnableDeletionProtection
	}
	return false
}

func (x *AwsAlbSpec) GetIdleTimeoutSeconds() int32 {
	if x != nil {
		return x.IdleTimeoutSeconds
	}
	return 0
}

func (x *AwsAlbSpec) GetListeners() []*AwsAlbListener {
	if x != nil {
		return x.Listeners
	}
	return nil
}

func (x *AwsAlbSpec) GetDns() *AwsAlbDns {
	if x != nil {
		return x.Dns
	}
	return nil
}

func (x *AwsAlbSpec) GetSsl() *AwsAlbSsl {
	if x != nil {
		return x.Ssl
	}
	return nil
}

// AwsAlbListener describes a single listener on the ALB.
type AwsAlbListener struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// protocol can be "HTTP" or "HTTPS".
	Protocol string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// port is the listener's port (80 for HTTP, 443 for HTTPS, etc.).
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// certificate_arn is required if protocol == "HTTPS".
	// e.g., "arn:aws:acm:us-east-1:123456789012:certificate/abcd1234..."
	CertificateArn string `protobuf:"bytes,3,opt,name=certificate_arn,json=certificateArn,proto3" json:"certificate_arn,omitempty"`
	// ssl_policy is the TLS security policy if using HTTPS.
	// e.g., "ELBSecurityPolicy-2016-08".
	SslPolicy string `protobuf:"bytes,4,opt,name=ssl_policy,json=sslPolicy,proto3" json:"ssl_policy,omitempty"`
}

func (x *AwsAlbListener) Reset() {
	*x = AwsAlbListener{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsalb_v1_spec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsAlbListener) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsAlbListener) ProtoMessage() {}

func (x *AwsAlbListener) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsalb_v1_spec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsAlbListener.ProtoReflect.Descriptor instead.
func (*AwsAlbListener) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsalb_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *AwsAlbListener) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *AwsAlbListener) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AwsAlbListener) GetCertificateArn() string {
	if x != nil {
		return x.CertificateArn
	}
	return ""
}

func (x *AwsAlbListener) GetSslPolicy() string {
	if x != nil {
		return x.SslPolicy
	}
	return ""
}

// AwsAlbDns defines the Route 53 DNS configuration for the ALB.
type AwsAlbDns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enabled, when set to true, indicates that the ALB resource
	// should create DNS records in Route 53.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// route53_zone_id is the Route 53 Hosted Zone ID where DNS records
	// will be created.
	Route53ZoneId string `protobuf:"bytes,2,opt,name=route53_zone_id,json=route53ZoneId,proto3" json:"route53_zone_id,omitempty"`
	// hostnames is a list of domain names (e.g., ["app.example.com"])
	// that will point to this ALB.
	Hostnames []string `protobuf:"bytes,3,rep,name=hostnames,proto3" json:"hostnames,omitempty"`
}

func (x *AwsAlbDns) Reset() {
	*x = AwsAlbDns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsalb_v1_spec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsAlbDns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsAlbDns) ProtoMessage() {}

func (x *AwsAlbDns) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsalb_v1_spec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsAlbDns.ProtoReflect.Descriptor instead.
func (*AwsAlbDns) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsalb_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *AwsAlbDns) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AwsAlbDns) GetRoute53ZoneId() string {
	if x != nil {
		return x.Route53ZoneId
	}
	return ""
}

func (x *AwsAlbDns) GetHostnames() []string {
	if x != nil {
		return x.Hostnames
	}
	return nil
}

// AwsAlbSsl defines a toggle for SSL, plus a certificate ARN required if enabled is true.
type AwsAlbSsl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled        bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	CertificateArn string `protobuf:"bytes,2,opt,name=certificate_arn,json=certificateArn,proto3" json:"certificate_arn,omitempty"`
}

func (x *AwsAlbSsl) Reset() {
	*x = AwsAlbSsl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_aws_awsalb_v1_spec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsAlbSsl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsAlbSsl) ProtoMessage() {}

func (x *AwsAlbSsl) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsalb_v1_spec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsAlbSsl.ProtoReflect.Descriptor instead.
func (*AwsAlbSsl) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsalb_v1_spec_proto_rawDescGZIP(), []int{3}
}

func (x *AwsAlbSsl) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AwsAlbSsl) GetCertificateArn() string {
	if x != nil {
		return x.CertificateArn
	}
	return ""
}

var File_project_planton_provider_aws_awsalb_v1_spec_proto protoreflect.FileDescriptor

var file_project_planton_provider_aws_awsalb_v1_spec_proto_rawDesc = []byte{
	0x0a, 0x31, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x61,
	0x77, 0x73, 0x61, 0x6c, 0x62, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x26, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77,
	0x73, 0x2e, 0x61, 0x77, 0x73, 0x61, 0x6c, 0x62, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xde, 0x04, 0x0a, 0x0a, 0x41, 0x77, 0x73, 0x41, 0x6c,
	0x62, 0x53, 0x70, 0x65, 0x63, 0x12, 0x25, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x92, 0x01,
	0x02, 0x18, 0x01, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x0f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x18, 0x01, 0x52,
	0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x4b, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x33, 0xba, 0x48, 0x1d, 0x72, 0x1b, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x2d, 0x66, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x92, 0xa6, 0x1d, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2d, 0x66, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0f,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xba, 0x48, 0x13, 0x72, 0x11, 0x52, 0x04, 0x69, 0x70,
	0x76, 0x34, 0x52, 0x09, 0x64, 0x75, 0x61, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x92, 0xa6, 0x1d,
	0x04, 0x69, 0x70, 0x76, 0x34, 0x52, 0x0d, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x1a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x09, 0x92, 0xa6, 0x1d, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x14, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0x92, 0xa6, 0x1d,
	0x02, 0x36, 0x30, 0x52, 0x12, 0x69, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x54, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x61, 0x6c, 0x62,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x41, 0x6c, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x43, 0x0a,
	0x03, 0x64, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x61, 0x6c, 0x62,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x41, 0x6c, 0x62, 0x44, 0x6e, 0x73, 0x52, 0x03, 0x64,
	0x6e, 0x73, 0x12, 0x43, 0x0a, 0x03, 0x73, 0x73, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61,
	0x77, 0x73, 0x61, 0x6c, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x41, 0x6c, 0x62, 0x53,
	0x73, 0x6c, 0x52, 0x03, 0x73, 0x73, 0x6c, 0x22, 0xa4, 0x01, 0x0a, 0x0e, 0x41, 0x77, 0x73, 0x41,
	0x6c, 0x62, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xba, 0x48,
	0x0f, 0x72, 0x0d, 0x52, 0x04, 0x48, 0x54, 0x54, 0x50, 0x52, 0x05, 0x48, 0x54, 0x54, 0x50, 0x53,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x72, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x73, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x73, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x76,
	0x0a, 0x09, 0x41, 0x77, 0x73, 0x41, 0x6c, 0x62, 0x44, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x09, 0x92, 0xa6,
	0x1d, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x35, 0x33, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x35, 0x33, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xfe, 0x01, 0x0a, 0x09, 0x41, 0x77, 0x73, 0x41, 0x6c,
	0x62, 0x53, 0x73, 0x6c, 0x12, 0x23, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x09, 0x92, 0xa6, 0x1d, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0xcb, 0x01, 0x0a, 0x0f, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0xa1, 0x01, 0xba, 0x48, 0x9d, 0x01, 0xba, 0x01, 0x99, 0x01, 0x0a, 0x20,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x73, 0x6c,
	0x12, 0x38, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72,
	0x6e, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x20, 0x69, 0x66, 0x20, 0x73, 0x73, 0x6c, 0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x20, 0x69, 0x73, 0x20, 0x74, 0x72, 0x75, 0x65, 0x1a, 0x3b, 0x28, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x3d, 0x3d, 0x20, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x29, 0x20, 0x7c, 0x7c, 0x20, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x28, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72,
	0x6e, 0x29, 0x20, 0x3e, 0x20, 0x30, 0x29, 0x52, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x41, 0x72, 0x6e, 0x42, 0xd7, 0x02, 0x0a, 0x2a, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x77, 0x73,
	0x61, 0x6c, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x5f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x77,
	0x73, 0x2f, 0x61, 0x77, 0x73, 0x61, 0x6c, 0x62, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x77, 0x73, 0x61,
	0x6c, 0x62, 0x76, 0x31, 0xa2, 0x02, 0x05, 0x50, 0x50, 0x50, 0x41, 0x41, 0xaa, 0x02, 0x26, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x77, 0x73, 0x2e, 0x41, 0x77, 0x73, 0x61,
	0x6c, 0x62, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x26, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5c, 0x41, 0x77, 0x73, 0x5c, 0x41, 0x77, 0x73, 0x61, 0x6c, 0x62, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x32, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x41, 0x77, 0x73, 0x5c, 0x41, 0x77,
	0x73, 0x61, 0x6c, 0x62, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x2b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x3a, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x3a, 0x3a, 0x41, 0x77, 0x73, 0x3a, 0x3a, 0x41, 0x77, 0x73, 0x61, 0x6c, 0x62, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_project_planton_provider_aws_awsalb_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_awsalb_v1_spec_proto_rawDescData = file_project_planton_provider_aws_awsalb_v1_spec_proto_rawDesc
)

func file_project_planton_provider_aws_awsalb_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_awsalb_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_awsalb_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_provider_aws_awsalb_v1_spec_proto_rawDescData)
	})
	return file_project_planton_provider_aws_awsalb_v1_spec_proto_rawDescData
}

var file_project_planton_provider_aws_awsalb_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_project_planton_provider_aws_awsalb_v1_spec_proto_goTypes = []any{
	(*AwsAlbSpec)(nil),     // 0: project.planton.provider.aws.awsalb.v1.AwsAlbSpec
	(*AwsAlbListener)(nil), // 1: project.planton.provider.aws.awsalb.v1.AwsAlbListener
	(*AwsAlbDns)(nil),      // 2: project.planton.provider.aws.awsalb.v1.AwsAlbDns
	(*AwsAlbSsl)(nil),      // 3: project.planton.provider.aws.awsalb.v1.AwsAlbSsl
}
var file_project_planton_provider_aws_awsalb_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.aws.awsalb.v1.AwsAlbSpec.listeners:type_name -> project.planton.provider.aws.awsalb.v1.AwsAlbListener
	2, // 1: project.planton.provider.aws.awsalb.v1.AwsAlbSpec.dns:type_name -> project.planton.provider.aws.awsalb.v1.AwsAlbDns
	3, // 2: project.planton.provider.aws.awsalb.v1.AwsAlbSpec.ssl:type_name -> project.planton.provider.aws.awsalb.v1.AwsAlbSsl
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_awsalb_v1_spec_proto_init() }
func file_project_planton_provider_aws_awsalb_v1_spec_proto_init() {
	if File_project_planton_provider_aws_awsalb_v1_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_provider_aws_awsalb_v1_spec_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AwsAlbSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsalb_v1_spec_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AwsAlbListener); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsalb_v1_spec_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AwsAlbDns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_aws_awsalb_v1_spec_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*AwsAlbSsl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_provider_aws_awsalb_v1_spec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_awsalb_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_awsalb_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_aws_awsalb_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_awsalb_v1_spec_proto = out.File
	file_project_planton_provider_aws_awsalb_v1_spec_proto_rawDesc = nil
	file_project_planton_provider_aws_awsalb_v1_spec_proto_goTypes = nil
	file_project_planton_provider_aws_awsalb_v1_spec_proto_depIdxs = nil
}
