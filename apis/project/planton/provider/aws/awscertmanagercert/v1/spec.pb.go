// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/aws/awscertmanagercert/v1/spec.proto

package awscertmanagercertv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/project-planton/project-planton/apis/project/planton/shared/foreignkey/v1"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AwsCertManagerCertSpec defines the fields needed to provision a public SSL certificate
// via AWS Certificate Manager (ACM) using DNS validation. We explicitly split the primary
// domain from any alternate domains for clarity.
type AwsCertManagerCertSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// primaryDomainName is a required field representing the main (apex or wildcard) domain name.
	// Examples include "example.com" or "*.example.com" (wildcard).
	// This domain will be set as the 'DomainName' in the AWS ACM certificate.
	//
	// The pattern enforces a domain-like structure, allowing an optional wildcard prefix.
	// The string is mandatory, so users must always supply a primary domain.
	PrimaryDomainName string `protobuf:"bytes,1,opt,name=primary_domain_name,json=primaryDomainName,proto3" json:"primary_domain_name,omitempty"`
	// alternateDomainNames is an optional list of Subject Alternative Names (SANs) for the certificate.
	// Each entry must follow the same pattern as primary_domain_name and cannot contain duplicates.
	// Primary domain should not be added to this list.
	AlternateDomainNames []string `protobuf:"bytes,2,rep,name=alternate_domain_names,json=alternateDomainNames,proto3" json:"alternate_domain_names,omitempty"`
	// route53_hosted_zone_id is the identifier of the Route53 hosted zone
	// where DNS validation records will be created automatically.
	// Must be a public hosted zone matching the domain names.
	// Example: "Z123456ABCXYZ".
	Route53HostedZoneId *v1.StringValueOrRef `protobuf:"bytes,3,opt,name=route53_hosted_zone_id,json=route53HostedZoneId,proto3" json:"route53_hosted_zone_id,omitempty"`
	// validation_method indicates how ACM verifies domain ownership.
	// By default, DNS is recommended.
	ValidationMethod string `protobuf:"bytes,4,opt,name=validation_method,json=validationMethod,proto3" json:"validation_method,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AwsCertManagerCertSpec) Reset() {
	*x = AwsCertManagerCertSpec{}
	mi := &file_project_planton_provider_aws_awscertmanagercert_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsCertManagerCertSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsCertManagerCertSpec) ProtoMessage() {}

func (x *AwsCertManagerCertSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awscertmanagercert_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsCertManagerCertSpec.ProtoReflect.Descriptor instead.
func (*AwsCertManagerCertSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awscertmanagercert_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AwsCertManagerCertSpec) GetPrimaryDomainName() string {
	if x != nil {
		return x.PrimaryDomainName
	}
	return ""
}

func (x *AwsCertManagerCertSpec) GetAlternateDomainNames() []string {
	if x != nil {
		return x.AlternateDomainNames
	}
	return nil
}

func (x *AwsCertManagerCertSpec) GetRoute53HostedZoneId() *v1.StringValueOrRef {
	if x != nil {
		return x.Route53HostedZoneId
	}
	return nil
}

func (x *AwsCertManagerCertSpec) GetValidationMethod() string {
	if x != nil {
		return x.ValidationMethod
	}
	return ""
}

var File_project_planton_provider_aws_awscertmanagercert_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_aws_awscertmanagercert_v1_spec_proto_rawDesc = "" +
	"\n" +
	"=project/planton/provider/aws/awscertmanagercert/v1/spec.proto\x122project.planton.provider.aws.awscertmanagercert.v1\x1a\x1bbuf/validate/validate.proto\x1a6project/planton/shared/foreignkey/v1/foreign_key.proto\x1a,project/planton/shared/options/options.proto\"\xc8\x03\n" +
	"\x16AwsCertManagerCertSpec\x12s\n" +
	"\x13primary_domain_name\x18\x01 \x01(\tBC\xbaH@\xc8\x01\x01r;29^(?:\\*\\.[A-Za-z0-9\\-\\.]+|[A-Za-z0-9\\-\\.]+\\.[A-Za-z]{2,})$R\x11primaryDomainName\x12}\n" +
	"\x16alternate_domain_names\x18\x02 \x03(\tBG\xbaHD\x92\x01A\x18\x01\"=r;29^(?:\\*\\.[A-Za-z0-9\\-\\.]+|[A-Za-z0-9\\-\\.]+\\.[A-Za-z]{2,})$R\x14alternateDomainNames\x12s\n" +
	"\x16route53_hosted_zone_id\x18\x03 \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB\x06\xbaH\x03\xc8\x01\x01R\x13route53HostedZoneId\x12E\n" +
	"\x11validation_method\x18\x04 \x01(\tB\x18\xbaH\x0er\fR\x03DNSR\x05EMAIL\x8a\xa6\x1d\x03DNSR\x10validationMethodB\xab\x03\n" +
	"6com.project.planton.provider.aws.awscertmanagercert.v1B\tSpecProtoP\x01Zwgithub.com/project-planton/project-planton/apis/project/planton/provider/aws/awscertmanagercert/v1;awscertmanagercertv1\xa2\x02\x05PPPAA\xaa\x022Project.Planton.Provider.Aws.Awscertmanagercert.V1\xca\x022Project\\Planton\\Provider\\Aws\\Awscertmanagercert\\V1\xe2\x02>Project\\Planton\\Provider\\Aws\\Awscertmanagercert\\V1\\GPBMetadata\xea\x027Project::Planton::Provider::Aws::Awscertmanagercert::V1b\x06proto3"

var (
	file_project_planton_provider_aws_awscertmanagercert_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_awscertmanagercert_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_aws_awscertmanagercert_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_awscertmanagercert_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_awscertmanagercert_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awscertmanagercert_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awscertmanagercert_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_aws_awscertmanagercert_v1_spec_proto_rawDescData
}

var file_project_planton_provider_aws_awscertmanagercert_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_provider_aws_awscertmanagercert_v1_spec_proto_goTypes = []any{
	(*AwsCertManagerCertSpec)(nil), // 0: project.planton.provider.aws.awscertmanagercert.v1.AwsCertManagerCertSpec
	(*v1.StringValueOrRef)(nil),    // 1: project.planton.shared.foreignkey.v1.StringValueOrRef
}
var file_project_planton_provider_aws_awscertmanagercert_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.aws.awscertmanagercert.v1.AwsCertManagerCertSpec.route53_hosted_zone_id:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_awscertmanagercert_v1_spec_proto_init() }
func file_project_planton_provider_aws_awscertmanagercert_v1_spec_proto_init() {
	if File_project_planton_provider_aws_awscertmanagercert_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awscertmanagercert_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awscertmanagercert_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_awscertmanagercert_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_awscertmanagercert_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_aws_awscertmanagercert_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_awscertmanagercert_v1_spec_proto = out.File
	file_project_planton_provider_aws_awscertmanagercert_v1_spec_proto_goTypes = nil
	file_project_planton_provider_aws_awscertmanagercert_v1_spec_proto_depIdxs = nil
}
