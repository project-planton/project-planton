// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/aws/awsvpc/v1/spec.proto

package awsvpcv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AwsVpcSpec defines the specification required to deploy an AWS Virtual Private Cloud (VPC).
// This message encapsulates all configurations necessary for setting up a VPC, including CIDR blocks,
// availability zones, subnets, and various networking features like NAT gateways, DNS hostnames, and DNS support.
// An AWS VPC allows you to create a virtual network in the AWS cloud, where you can launch AWS resources in a
// logically isolated section with complete control over your virtual networking environment.
// With VPC, you can define your own IP address range, create subnets, and configure route tables and network gateways.
// This specification helps in automating the VPC creation process with specified configurations, ensuring a consistent
// and repeatable setup for your AWS environment.
type AwsVpcSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The CIDR (Classless Inter-Domain Routing) block for the VPC.
	// This defines the IP address range for the VPC.
	// Example: "10.0.0.0/16" allows IP addresses from 10.0.0.0 to 10.0.255.255.
	VpcCidr string `protobuf:"bytes,1,opt,name=vpc_cidr,json=vpcCidr,proto3" json:"vpc_cidr,omitempty"`
	// The list of availability zones where the VPC will be spanned.
	// AWS regions are divided into multiple availability zones (AZs) for high availability.
	// Example: ["us-west-2a", "us-west-2b"] indicates that resources will be spread across these two AZs.
	AvailabilityZones []string `protobuf:"bytes,2,rep,name=availability_zones,json=availabilityZones,proto3" json:"availability_zones,omitempty"`
	// The number of subnets to be created in each availability zone.
	// Subnets are segments of the VPC's IP address range where you can place groups of isolated resources.
	SubnetsPerAvailabilityZone int32 `protobuf:"varint,3,opt,name=subnets_per_availability_zone,json=subnetsPerAvailabilityZone,proto3" json:"subnets_per_availability_zone,omitempty"`
	// The number of hosts (IP addresses) in each subnet.
	// This determines the size of each subnet's CIDR block.
	SubnetSize int32 `protobuf:"varint,4,opt,name=subnet_size,json=subnetSize,proto3" json:"subnet_size,omitempty"`
	// Toggle to enable or disable a NAT (Network Address Translation) gateway for private subnets created in the VPC.
	// A NAT gateway allows instances in a private subnet to connect to the internet or other AWS services, but prevents
	// the internet from initiating a connection with those instances.
	IsNatGatewayEnabled bool `protobuf:"varint,5,opt,name=is_nat_gateway_enabled,json=isNatGatewayEnabled,proto3" json:"is_nat_gateway_enabled,omitempty"`
	// Toggle to enable or disable DNS hostnames in the VPC.
	// When enabled, instances with public IP addresses receive corresponding public DNS hostnames.
	// See AWS documentation: https://docs.aws.amazon.com/vpc/latest/userguide/vpc-dns.html#vpc-dns-hostnames
	IsDnsHostnamesEnabled bool `protobuf:"varint,6,opt,name=is_dns_hostnames_enabled,json=isDnsHostnamesEnabled,proto3" json:"is_dns_hostnames_enabled,omitempty"`
	// Toggle to enable or disable DNS resolution in the VPC through the Amazon-provided DNS server.
	// When enabled, the Amazon DNS server resolves DNS hostnames for your instances.
	IsDnsSupportEnabled bool `protobuf:"varint,7,opt,name=is_dns_support_enabled,json=isDnsSupportEnabled,proto3" json:"is_dns_support_enabled,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *AwsVpcSpec) Reset() {
	*x = AwsVpcSpec{}
	mi := &file_project_planton_provider_aws_awsvpc_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsVpcSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsVpcSpec) ProtoMessage() {}

func (x *AwsVpcSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_aws_awsvpc_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsVpcSpec.ProtoReflect.Descriptor instead.
func (*AwsVpcSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_aws_awsvpc_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AwsVpcSpec) GetVpcCidr() string {
	if x != nil {
		return x.VpcCidr
	}
	return ""
}

func (x *AwsVpcSpec) GetAvailabilityZones() []string {
	if x != nil {
		return x.AvailabilityZones
	}
	return nil
}

func (x *AwsVpcSpec) GetSubnetsPerAvailabilityZone() int32 {
	if x != nil {
		return x.SubnetsPerAvailabilityZone
	}
	return 0
}

func (x *AwsVpcSpec) GetSubnetSize() int32 {
	if x != nil {
		return x.SubnetSize
	}
	return 0
}

func (x *AwsVpcSpec) GetIsNatGatewayEnabled() bool {
	if x != nil {
		return x.IsNatGatewayEnabled
	}
	return false
}

func (x *AwsVpcSpec) GetIsDnsHostnamesEnabled() bool {
	if x != nil {
		return x.IsDnsHostnamesEnabled
	}
	return false
}

func (x *AwsVpcSpec) GetIsDnsSupportEnabled() bool {
	if x != nil {
		return x.IsDnsSupportEnabled
	}
	return false
}

var File_project_planton_provider_aws_awsvpc_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_aws_awsvpc_v1_spec_proto_rawDesc = "" +
	"\n" +
	"1project/planton/provider/aws/awsvpc/v1/spec.proto\x12&project.planton.provider.aws.awsvpc.v1\x1a\x1bbuf/validate/validate.proto\x1a,project/planton/shared/options/options.proto\"\xff\x02\n" +
	"\n" +
	"AwsVpcSpec\x12!\n" +
	"\bvpc_cidr\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\avpcCidr\x12-\n" +
	"\x12availability_zones\x18\x02 \x03(\tR\x11availabilityZones\x12N\n" +
	"\x1dsubnets_per_availability_zone\x18\x03 \x01(\x05B\v\xbaH\x03\xc8\x01\x01\x92\xa6\x1d\x011R\x1asubnetsPerAvailabilityZone\x12,\n" +
	"\vsubnet_size\x18\x04 \x01(\x05B\v\xbaH\x03\xc8\x01\x01\x92\xa6\x1d\x011R\n" +
	"subnetSize\x123\n" +
	"\x16is_nat_gateway_enabled\x18\x05 \x01(\bR\x13isNatGatewayEnabled\x127\n" +
	"\x18is_dns_hostnames_enabled\x18\x06 \x01(\bR\x15isDnsHostnamesEnabled\x123\n" +
	"\x16is_dns_support_enabled\x18\a \x01(\bR\x13isDnsSupportEnabledB\xd7\x02\n" +
	"*com.project.planton.provider.aws.awsvpc.v1B\tSpecProtoP\x01Z_github.com/project-planton/project-planton/apis/project/planton/provider/aws/awsvpc/v1;awsvpcv1\xa2\x02\x05PPPAA\xaa\x02&Project.Planton.Provider.Aws.Awsvpc.V1\xca\x02&Project\\Planton\\Provider\\Aws\\Awsvpc\\V1\xe2\x022Project\\Planton\\Provider\\Aws\\Awsvpc\\V1\\GPBMetadata\xea\x02+Project::Planton::Provider::Aws::Awsvpc::V1b\x06proto3"

var (
	file_project_planton_provider_aws_awsvpc_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_aws_awsvpc_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_aws_awsvpc_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_aws_awsvpc_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_aws_awsvpc_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awsvpc_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awsvpc_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_aws_awsvpc_v1_spec_proto_rawDescData
}

var file_project_planton_provider_aws_awsvpc_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_provider_aws_awsvpc_v1_spec_proto_goTypes = []any{
	(*AwsVpcSpec)(nil), // 0: project.planton.provider.aws.awsvpc.v1.AwsVpcSpec
}
var file_project_planton_provider_aws_awsvpc_v1_spec_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_project_planton_provider_aws_awsvpc_v1_spec_proto_init() }
func file_project_planton_provider_aws_awsvpc_v1_spec_proto_init() {
	if File_project_planton_provider_aws_awsvpc_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_aws_awsvpc_v1_spec_proto_rawDesc), len(file_project_planton_provider_aws_awsvpc_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_aws_awsvpc_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_aws_awsvpc_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_aws_awsvpc_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_aws_awsvpc_v1_spec_proto = out.File
	file_project_planton_provider_aws_awsvpc_v1_spec_proto_goTypes = nil
	file_project_planton_provider_aws_awsvpc_v1_spec_proto_depIdxs = nil
}
