// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/azure/azurednszone/v1/spec.proto

package azurednszonev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	dnsrecordtype "github.com/project-planton/project-planton/apis/project/planton/shared/networking/enums/dnsrecordtype"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// **AzureDnsZoneSpec** defines the configuration for creating an Azure DNS Zone.
// This specifies the minimal parameters needed for an Azure DNS zone, including the DNS domain name
// and the Azure Resource Group in which the zone will reside. Optionally, DNS records can be provided.
type AzureDnsZoneSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The DNS zone name (e.g., "example.com"). Do not include a trailing dot.
	ZoneName string `protobuf:"bytes,1,opt,name=zone_name,json=zoneName,proto3" json:"zone_name,omitempty"`
	// The Azure Resource Group in which to create the DNS zone. This resource group must exist in the target subscription.
	ResourceGroup string `protobuf:"bytes,2,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
	// (Optional) DNS records to pre-populate in the zone. Each record includes type, name, values, and TTL.
	// If no records are provided, the zone will be created empty (common when external systems manage DNS records).
	Records       []*AzureDnsRecord `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AzureDnsZoneSpec) Reset() {
	*x = AzureDnsZoneSpec{}
	mi := &file_project_planton_provider_azure_azurednszone_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AzureDnsZoneSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureDnsZoneSpec) ProtoMessage() {}

func (x *AzureDnsZoneSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_azure_azurednszone_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureDnsZoneSpec.ProtoReflect.Descriptor instead.
func (*AzureDnsZoneSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_azure_azurednszone_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AzureDnsZoneSpec) GetZoneName() string {
	if x != nil {
		return x.ZoneName
	}
	return ""
}

func (x *AzureDnsZoneSpec) GetResourceGroup() string {
	if x != nil {
		return x.ResourceGroup
	}
	return ""
}

func (x *AzureDnsZoneSpec) GetRecords() []*AzureDnsRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

// **AzureDnsRecord** represents a DNS record to be added to the Azure DNS Zone.
// It includes the record type, the record name (usually a fully qualified domain name ending with a dot),
// one or more record values, and an optional TTL (Time To Live) in seconds.
type AzureDnsRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The DNS record type (e.g., A, AAAA, CNAME, TXT, MX).
	RecordType dnsrecordtype.DnsRecordType `protobuf:"varint,1,opt,name=record_type,json=recordType,proto3,enum=project.planton.shared.networking.enums.dnsrecordtype.DnsRecordType" json:"record_type,omitempty"`
	// The name of the DNS record. This can be a fully qualified domain name (ending with a dot, e.g., "www.example.com.")
	// or a relative name within the zone (e.g., "www" for "www.example.com"). An empty name "@" denotes the zone root.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The list of values for the DNS record. For example, IP addresses for A/AAAA records, or hostnames for CNAME records (each CNAME value should end with a dot).
	Values []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	// The Time To Live (TTL) for the DNS record, in seconds.
	TtlSeconds    *int32 `protobuf:"varint,4,opt,name=ttl_seconds,json=ttlSeconds,proto3,oneof" json:"ttl_seconds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AzureDnsRecord) Reset() {
	*x = AzureDnsRecord{}
	mi := &file_project_planton_provider_azure_azurednszone_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AzureDnsRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureDnsRecord) ProtoMessage() {}

func (x *AzureDnsRecord) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_azure_azurednszone_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureDnsRecord.ProtoReflect.Descriptor instead.
func (*AzureDnsRecord) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_azure_azurednszone_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *AzureDnsRecord) GetRecordType() dnsrecordtype.DnsRecordType {
	if x != nil {
		return x.RecordType
	}
	return dnsrecordtype.DnsRecordType(0)
}

func (x *AzureDnsRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AzureDnsRecord) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *AzureDnsRecord) GetTtlSeconds() int32 {
	if x != nil && x.TtlSeconds != nil {
		return *x.TtlSeconds
	}
	return 0
}

var File_project_planton_provider_azure_azurednszone_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_azure_azurednszone_v1_spec_proto_rawDesc = "" +
	"\n" +
	"9project/planton/provider/azure/azurednszone/v1/spec.proto\x12.project.planton.provider.azure.azurednszone.v1\x1a\x1bbuf/validate/validate.proto\x1aKproject/planton/shared/networking/enums/dnsrecordtype/dns_record_type.proto\x1a,project/planton/shared/options/options.proto\"\xb8\x02\n" +
	"\x10AzureDnsZoneSpec\x12\x9a\x01\n" +
	"\tzone_name\x18\x01 \x01(\tB}\xbaHz\xba\x01t\n" +
	"\tzone_name\x128Zone name must be a valid DNS domain (e.g., example.com)\x1a-this.matches('^(?:[a-z0-9-]+[.])+[a-z]{2,}$')\xc8\x01\x01R\bzoneName\x12-\n" +
	"\x0eresource_group\x18\x02 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\rresourceGroup\x12X\n" +
	"\arecords\x18\x03 \x03(\v2>.project.planton.provider.azure.azurednszone.v1.AzureDnsRecordR\arecords\"\xc8\x03\n" +
	"\x0eAzureDnsRecord\x12m\n" +
	"\vrecord_type\x18\x01 \x01(\x0e2D.project.planton.shared.networking.enums.dnsrecordtype.DnsRecordTypeB\x06\xbaH\x03\xc8\x01\x01R\n" +
	"recordType\x12\xe6\x01\n" +
	"\x04name\x18\x02 \x01(\tB\xd1\x01\xbaH\xcd\x01\xba\x01\xc6\x01\n" +
	"\vrecord_name\x12DRecord name should be a valid DNS name. Use a trailing dot for FQDN.\x1aqthis.matches('^(?:[*][.])?(?:[_a-z0-9](?:[_a-z0-9-]{0,61}[a-z0-9])?[.])+(?:[a-z](?:[a-z0-9-]{0,61}[a-z0-9])?)?$')\xc8\x01\x01R\x04name\x12 \n" +
	"\x06values\x18\x03 \x03(\tB\b\xbaH\x05\x92\x01\x02\b\x01R\x06values\x12,\n" +
	"\vttl_seconds\x18\x04 \x01(\x05B\x06\x8a\xa6\x1d\x0260H\x00R\n" +
	"ttlSeconds\x88\x01\x01B\x0e\n" +
	"\f_ttl_secondsB\x8d\x03\n" +
	"2com.project.planton.provider.azure.azurednszone.v1B\tSpecProtoP\x01Zmgithub.com/project-planton/project-planton/apis/project/planton/provider/azure/azurednszone/v1;azurednszonev1\xa2\x02\x05PPPAA\xaa\x02.Project.Planton.Provider.Azure.Azurednszone.V1\xca\x02.Project\\Planton\\Provider\\Azure\\Azurednszone\\V1\xe2\x02:Project\\Planton\\Provider\\Azure\\Azurednszone\\V1\\GPBMetadata\xea\x023Project::Planton::Provider::Azure::Azurednszone::V1b\x06proto3"

var (
	file_project_planton_provider_azure_azurednszone_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_azure_azurednszone_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_azure_azurednszone_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_azure_azurednszone_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_azure_azurednszone_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_azure_azurednszone_v1_spec_proto_rawDesc), len(file_project_planton_provider_azure_azurednszone_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_azure_azurednszone_v1_spec_proto_rawDescData
}

var file_project_planton_provider_azure_azurednszone_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_project_planton_provider_azure_azurednszone_v1_spec_proto_goTypes = []any{
	(*AzureDnsZoneSpec)(nil),         // 0: project.planton.provider.azure.azurednszone.v1.AzureDnsZoneSpec
	(*AzureDnsRecord)(nil),           // 1: project.planton.provider.azure.azurednszone.v1.AzureDnsRecord
	(dnsrecordtype.DnsRecordType)(0), // 2: project.planton.shared.networking.enums.dnsrecordtype.DnsRecordType
}
var file_project_planton_provider_azure_azurednszone_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.azure.azurednszone.v1.AzureDnsZoneSpec.records:type_name -> project.planton.provider.azure.azurednszone.v1.AzureDnsRecord
	2, // 1: project.planton.provider.azure.azurednszone.v1.AzureDnsRecord.record_type:type_name -> project.planton.shared.networking.enums.dnsrecordtype.DnsRecordType
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_project_planton_provider_azure_azurednszone_v1_spec_proto_init() }
func file_project_planton_provider_azure_azurednszone_v1_spec_proto_init() {
	if File_project_planton_provider_azure_azurednszone_v1_spec_proto != nil {
		return
	}
	file_project_planton_provider_azure_azurednszone_v1_spec_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_azure_azurednszone_v1_spec_proto_rawDesc), len(file_project_planton_provider_azure_azurednszone_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_azure_azurednszone_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_azure_azurednszone_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_azure_azurednszone_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_azure_azurednszone_v1_spec_proto = out.File
	file_project_planton_provider_azure_azurednszone_v1_spec_proto_goTypes = nil
	file_project_planton_provider_azure_azurednszone_v1_spec_proto_depIdxs = nil
}
