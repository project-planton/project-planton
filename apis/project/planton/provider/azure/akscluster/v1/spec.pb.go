// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/provider/azure/akscluster/v1/spec.proto

package aksclusterv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AksClusterSpec defines the specification required to deploy an Azure Kubernetes Service (AKS) cluster.
// This minimal spec covers essential production scenarios, including capacity, identity, networking, and autoscaling.
type AksClusterSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Azure region where the AKS cluster will be created (e.g., eastus, westeurope).
	// Must be a valid Azure region string.
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// The name of the existing Azure Resource Group where the AKS cluster will be provisioned.
	ResourceGroup string `protobuf:"bytes,2,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
	// The Kubernetes version to deploy (e.g., "1.28"). If not set, defaults to the latest supported version by Azure.
	KubernetesVersion string `protobuf:"bytes,3,opt,name=kubernetes_version,json=kubernetesVersion,proto3" json:"kubernetes_version,omitempty"`
	// The DNS prefix for the AKS API server endpoint. This must be unique within the Azure region.
	DnsPrefix string `protobuf:"bytes,4,opt,name=dns_prefix,json=dnsPrefix,proto3" json:"dns_prefix,omitempty"`
	// Flag to enable a private cluster, where the API server is exposed via internal IP.
	// Use true for production environments that require restricted access.
	IsPrivateCluster bool `protobuf:"varint,5,opt,name=is_private_cluster,json=isPrivateCluster,proto3" json:"is_private_cluster,omitempty"`
	// The name of the subnet in which to place the cluster's node pools (used with Azure CNI networking).
	// This subnet must exist within the virtual network provided to the cluster.
	SubnetId string `protobuf:"bytes,6,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	// The VM SKU for the default node pool (e.g., "Standard_D4s_v3").
	// Choose a SKU with at least 4 vCPUs and 4GiB memory for production workloads.
	NodeVmSize string `protobuf:"bytes,7,opt,name=node_vm_size,json=nodeVmSize,proto3" json:"node_vm_size,omitempty"`
	// The minimum number of nodes for the default node pool when autoscaling is enabled.
	MinNodeCount int32 `protobuf:"varint,8,opt,name=min_node_count,json=minNodeCount,proto3" json:"min_node_count,omitempty"`
	// The maximum number of nodes for the default node pool when autoscaling is enabled.
	MaxNodeCount int32 `protobuf:"varint,9,opt,name=max_node_count,json=maxNodeCount,proto3" json:"max_node_count,omitempty"`
	// SSH public key used to access the Linux VMs running the Kubernetes nodes.
	// This must be a valid SSH RSA public key string (starting with "ssh-rsa").
	SshPublicKey string `protobuf:"bytes,10,opt,name=ssh_public_key,json=sshPublicKey,proto3" json:"ssh_public_key,omitempty"`
	// Whether to enable Azure AD integration for Kubernetes API authentication.
	// When true, you must also set the admin group object IDs.
	EnableAzureAd bool `protobuf:"varint,11,opt,name=enable_azure_ad,json=enableAzureAd,proto3" json:"enable_azure_ad,omitempty"`
	// A list of Azure AD group object IDs that should have admin access to the cluster.
	// Required if enable_azure_ad is true.
	AadAdminGroupObjectIds []string `protobuf:"bytes,12,rep,name=aad_admin_group_object_ids,json=aadAdminGroupObjectIds,proto3" json:"aad_admin_group_object_ids,omitempty"`
	// Flag to enable Azure Monitor (Log Analytics) integration for container logs and metrics.
	// This is strongly recommended for production observability.
	EnableMonitoring bool `protobuf:"varint,13,opt,name=enable_monitoring,json=enableMonitoring,proto3" json:"enable_monitoring,omitempty"`
	// Optional Azure Log Analytics workspace ID to send logs to.
	// Required if enable_monitoring is true and you want to use an existing workspace.
	LogAnalyticsWorkspaceId string `protobuf:"bytes,14,opt,name=log_analytics_workspace_id,json=logAnalyticsWorkspaceId,proto3" json:"log_analytics_workspace_id,omitempty"`
	// Optional list of authorized public IP ranges to access the Kubernetes API server.
	// If not set, all IPs are allowed (0.0.0.0/0). Use to restrict access for security.
	AuthorizedIpRanges []string `protobuf:"bytes,15,rep,name=authorized_ip_ranges,json=authorizedIpRanges,proto3" json:"authorized_ip_ranges,omitempty"`
	// Optional name of the Azure Container Registry (ACR) that this cluster should be able to pull images from.
	// If set, the cluster identity will be granted pull permissions to this registry.
	AcrName string `protobuf:"bytes,16,opt,name=acr_name,json=acrName,proto3" json:"acr_name,omitempty"`
	// Optional list of tags to apply to the AKS cluster resource for cost tracking and governance.
	Tags map[string]string `protobuf:"bytes,17,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AksClusterSpec) Reset() {
	*x = AksClusterSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_azure_akscluster_v1_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AksClusterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AksClusterSpec) ProtoMessage() {}

func (x *AksClusterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_azure_akscluster_v1_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AksClusterSpec.ProtoReflect.Descriptor instead.
func (*AksClusterSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_azure_akscluster_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AksClusterSpec) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AksClusterSpec) GetResourceGroup() string {
	if x != nil {
		return x.ResourceGroup
	}
	return ""
}

func (x *AksClusterSpec) GetKubernetesVersion() string {
	if x != nil {
		return x.KubernetesVersion
	}
	return ""
}

func (x *AksClusterSpec) GetDnsPrefix() string {
	if x != nil {
		return x.DnsPrefix
	}
	return ""
}

func (x *AksClusterSpec) GetIsPrivateCluster() bool {
	if x != nil {
		return x.IsPrivateCluster
	}
	return false
}

func (x *AksClusterSpec) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *AksClusterSpec) GetNodeVmSize() string {
	if x != nil {
		return x.NodeVmSize
	}
	return ""
}

func (x *AksClusterSpec) GetMinNodeCount() int32 {
	if x != nil {
		return x.MinNodeCount
	}
	return 0
}

func (x *AksClusterSpec) GetMaxNodeCount() int32 {
	if x != nil {
		return x.MaxNodeCount
	}
	return 0
}

func (x *AksClusterSpec) GetSshPublicKey() string {
	if x != nil {
		return x.SshPublicKey
	}
	return ""
}

func (x *AksClusterSpec) GetEnableAzureAd() bool {
	if x != nil {
		return x.EnableAzureAd
	}
	return false
}

func (x *AksClusterSpec) GetAadAdminGroupObjectIds() []string {
	if x != nil {
		return x.AadAdminGroupObjectIds
	}
	return nil
}

func (x *AksClusterSpec) GetEnableMonitoring() bool {
	if x != nil {
		return x.EnableMonitoring
	}
	return false
}

func (x *AksClusterSpec) GetLogAnalyticsWorkspaceId() string {
	if x != nil {
		return x.LogAnalyticsWorkspaceId
	}
	return ""
}

func (x *AksClusterSpec) GetAuthorizedIpRanges() []string {
	if x != nil {
		return x.AuthorizedIpRanges
	}
	return nil
}

func (x *AksClusterSpec) GetAcrName() string {
	if x != nil {
		return x.AcrName
	}
	return ""
}

func (x *AksClusterSpec) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

var File_project_planton_provider_azure_akscluster_v1_spec_proto protoreflect.FileDescriptor

var file_project_planton_provider_azure_akscluster_v1_spec_proto_rawDesc = []byte{
	0x0a, 0x37, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x7a, 0x75, 0x72, 0x65,
	0x2f, 0x61, 0x6b, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2c, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x2e, 0x61, 0x6b, 0x73, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xdf, 0x07, 0x0a, 0x0e, 0x41, 0x6b, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x22, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72, 0x02, 0x10,
	0x03, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2d, 0x0a, 0x12,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0a, 0x64,
	0x6e, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x26, 0xba, 0x48, 0x23, 0xc8, 0x01, 0x01, 0x72, 0x1e, 0x32, 0x1c, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5d,
	0x7b, 0x32, 0x2c, 0x33, 0x30, 0x7d, 0x24, 0x52, 0x09, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x27, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0c, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x76, 0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x6e, 0x6f, 0x64,
	0x65, 0x56, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x1a, 0x02, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x69, 0x6e,
	0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x0e, 0x6d, 0x61, 0x78,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0a, 0xba, 0x48, 0x07, 0xc8, 0x01, 0x01, 0x1a, 0x02, 0x28, 0x01, 0x52, 0x0c, 0x6d,
	0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x0e, 0x73,
	0x73, 0x68, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x37, 0xba, 0x48, 0x34, 0xc8, 0x01, 0x01, 0x72, 0x2f, 0x32, 0x2d, 0x5e,
	0x73, 0x73, 0x68, 0x2d, 0x28, 0x72, 0x73, 0x61, 0x7c, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39,
	0x29, 0x5c, 0x73, 0x2b, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2b, 0x2f,
	0x3d, 0x5d, 0x2b, 0x28, 0x5c, 0x73, 0x2b, 0x2e, 0x2a, 0x29, 0x3f, 0x24, 0x52, 0x0c, 0x73, 0x73,
	0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65,
	0x41, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x61, 0x61, 0x64, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x61, 0x61, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x35,
	0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0x92, 0xa6, 0x1d, 0x04, 0x74,
	0x72, 0x75, 0x65, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x1a, 0x6c, 0x6f, 0x67, 0x5f, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6c, 0x6f, 0x67, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x5f, 0x69, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x70, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x5a, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x2e, 0x61,
	0x6b, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6b, 0x73,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x54, 0x61, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0xff, 0x02, 0x0a, 0x30, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x2e, 0x61, 0x6b, 0x73, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x53, 0x70, 0x65, 0x63, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x69, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x2f, 0x61, 0x6b, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x6b, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x76,
	0x31, 0xa2, 0x02, 0x05, 0x50, 0x50, 0x50, 0x41, 0x41, 0xaa, 0x02, 0x2c, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x2e, 0x41, 0x6b, 0x73, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x2c, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5c, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x5c, 0x41, 0x6b, 0x73, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x38, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5c, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x5c, 0x41, 0x6b, 0x73, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x31, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x3a, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3a,
	0x3a, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x3a, 0x3a, 0x41, 0x6b, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_project_planton_provider_azure_akscluster_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_azure_akscluster_v1_spec_proto_rawDescData = file_project_planton_provider_azure_akscluster_v1_spec_proto_rawDesc
)

func file_project_planton_provider_azure_akscluster_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_azure_akscluster_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_azure_akscluster_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_provider_azure_akscluster_v1_spec_proto_rawDescData)
	})
	return file_project_planton_provider_azure_akscluster_v1_spec_proto_rawDescData
}

var file_project_planton_provider_azure_akscluster_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_project_planton_provider_azure_akscluster_v1_spec_proto_goTypes = []any{
	(*AksClusterSpec)(nil), // 0: project.planton.provider.azure.akscluster.v1.AksClusterSpec
	nil,                    // 1: project.planton.provider.azure.akscluster.v1.AksClusterSpec.TagsEntry
}
var file_project_planton_provider_azure_akscluster_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.azure.akscluster.v1.AksClusterSpec.tags:type_name -> project.planton.provider.azure.akscluster.v1.AksClusterSpec.TagsEntry
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_project_planton_provider_azure_akscluster_v1_spec_proto_init() }
func file_project_planton_provider_azure_akscluster_v1_spec_proto_init() {
	if File_project_planton_provider_azure_akscluster_v1_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_provider_azure_akscluster_v1_spec_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AksClusterSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_provider_azure_akscluster_v1_spec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_azure_akscluster_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_azure_akscluster_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_azure_akscluster_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_azure_akscluster_v1_spec_proto = out.File
	file_project_planton_provider_azure_akscluster_v1_spec_proto_rawDesc = nil
	file_project_planton_provider_azure_akscluster_v1_spec_proto_goTypes = nil
	file_project_planton_provider_azure_akscluster_v1_spec_proto_depIdxs = nil
}
