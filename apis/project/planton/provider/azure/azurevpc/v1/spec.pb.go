// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/azure/azurevpc/v1/spec.proto

package azurevpcv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AzureVpcSpec defines the configuration for an Azure Virtual Network (VNet).
// This resource is typically used as the networking foundation for an AKS cluster.
// It includes a primary address space and a subnet for AKS nodes, with optional features
// like a NAT Gateway for outbound Internet access and Private DNS zone links for name resolution.
type AzureVpcSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The CIDR block defining the address space for the Virtual Network.
	// Example: "10.0.0.0/16" would allow IP addresses from 10.0.0.0 to 10.0.255.255.
	AddressSpaceCidr string `protobuf:"bytes,1,opt,name=address_space_cidr,json=addressSpaceCidr,proto3" json:"address_space_cidr,omitempty"`
	// The CIDR block for the primary subnet that AKS cluster nodes will use.
	// This should be a subset of the address_space_cidr range.
	// Example: "10.0.0.0/18" would allocate the first half of a /16 address space to the nodes subnet.
	NodesSubnetCidr string `protobuf:"bytes,2,opt,name=nodes_subnet_cidr,json=nodesSubnetCidr,proto3" json:"nodes_subnet_cidr,omitempty"`
	// Toggle to enable a NAT Gateway for the nodes subnet to allow outbound Internet connectivity.
	// If set to true, a NAT Gateway resource will be created and associated with the subnet.
	// Defaults to false (no NAT Gateway).
	IsNatGatewayEnabled bool `protobuf:"varint,3,opt,name=is_nat_gateway_enabled,json=isNatGatewayEnabled,proto3" json:"is_nat_gateway_enabled,omitempty"`
	// A list of Azure Private DNS zone resource IDs to link to this Virtual Network.
	// Each entry should be the full resource ID of an existing Private DNS zone that needs to be resolved within the VNet.
	// This field is optional and primarily for advanced scenarios.
	DnsPrivateZoneLinks []string `protobuf:"bytes,4,rep,name=dns_private_zone_links,json=dnsPrivateZoneLinks,proto3" json:"dns_private_zone_links,omitempty"`
	// Arbitrary tags to apply to the Virtual Network (and related resources like subnets).
	// Tags are key-value pairs for Azure resource tagging.
	Tags          map[string]string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AzureVpcSpec) Reset() {
	*x = AzureVpcSpec{}
	mi := &file_project_planton_provider_azure_azurevpc_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AzureVpcSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureVpcSpec) ProtoMessage() {}

func (x *AzureVpcSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_azure_azurevpc_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureVpcSpec.ProtoReflect.Descriptor instead.
func (*AzureVpcSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_azure_azurevpc_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AzureVpcSpec) GetAddressSpaceCidr() string {
	if x != nil {
		return x.AddressSpaceCidr
	}
	return ""
}

func (x *AzureVpcSpec) GetNodesSubnetCidr() string {
	if x != nil {
		return x.NodesSubnetCidr
	}
	return ""
}

func (x *AzureVpcSpec) GetIsNatGatewayEnabled() bool {
	if x != nil {
		return x.IsNatGatewayEnabled
	}
	return false
}

func (x *AzureVpcSpec) GetDnsPrivateZoneLinks() []string {
	if x != nil {
		return x.DnsPrivateZoneLinks
	}
	return nil
}

func (x *AzureVpcSpec) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

var File_project_planton_provider_azure_azurevpc_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_azure_azurevpc_v1_spec_proto_rawDesc = "" +
	"\n" +
	"5project/planton/provider/azure/azurevpc/v1/spec.proto\x12*project.planton.provider.azure.azurevpc.v1\x1a\x1bbuf/validate/validate.proto\x1a,project/planton/shared/options/options.proto\"\xf3\x02\n" +
	"\fAzureVpcSpec\x124\n" +
	"\x12address_space_cidr\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x10addressSpaceCidr\x122\n" +
	"\x11nodes_subnet_cidr\x18\x02 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x0fnodesSubnetCidr\x123\n" +
	"\x16is_nat_gateway_enabled\x18\x03 \x01(\bR\x13isNatGatewayEnabled\x123\n" +
	"\x16dns_private_zone_links\x18\x04 \x03(\tR\x13dnsPrivateZoneLinks\x12V\n" +
	"\x04tags\x18\x05 \x03(\v2B.project.planton.provider.azure.azurevpc.v1.AzureVpcSpec.TagsEntryR\x04tags\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\xf1\x02\n" +
	".com.project.planton.provider.azure.azurevpc.v1B\tSpecProtoP\x01Zegithub.com/project-planton/project-planton/apis/project/planton/provider/azure/azurevpc/v1;azurevpcv1\xa2\x02\x05PPPAA\xaa\x02*Project.Planton.Provider.Azure.Azurevpc.V1\xca\x02*Project\\Planton\\Provider\\Azure\\Azurevpc\\V1\xe2\x026Project\\Planton\\Provider\\Azure\\Azurevpc\\V1\\GPBMetadata\xea\x02/Project::Planton::Provider::Azure::Azurevpc::V1b\x06proto3"

var (
	file_project_planton_provider_azure_azurevpc_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_azure_azurevpc_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_azure_azurevpc_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_azure_azurevpc_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_azure_azurevpc_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_azure_azurevpc_v1_spec_proto_rawDesc), len(file_project_planton_provider_azure_azurevpc_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_azure_azurevpc_v1_spec_proto_rawDescData
}

var file_project_planton_provider_azure_azurevpc_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_project_planton_provider_azure_azurevpc_v1_spec_proto_goTypes = []any{
	(*AzureVpcSpec)(nil), // 0: project.planton.provider.azure.azurevpc.v1.AzureVpcSpec
	nil,                  // 1: project.planton.provider.azure.azurevpc.v1.AzureVpcSpec.TagsEntry
}
var file_project_planton_provider_azure_azurevpc_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.azure.azurevpc.v1.AzureVpcSpec.tags:type_name -> project.planton.provider.azure.azurevpc.v1.AzureVpcSpec.TagsEntry
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_project_planton_provider_azure_azurevpc_v1_spec_proto_init() }
func file_project_planton_provider_azure_azurevpc_v1_spec_proto_init() {
	if File_project_planton_provider_azure_azurevpc_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_azure_azurevpc_v1_spec_proto_rawDesc), len(file_project_planton_provider_azure_azurevpc_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_azure_azurevpc_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_azure_azurevpc_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_azure_azurevpc_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_azure_azurevpc_v1_spec_proto = out.File
	file_project_planton_provider_azure_azurevpc_v1_spec_proto_goTypes = nil
	file_project_planton_provider_azure_azurevpc_v1_spec_proto_depIdxs = nil
}
