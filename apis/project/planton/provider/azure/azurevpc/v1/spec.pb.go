// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/azure/azurevpc/v1/spec.proto

package azurevpcv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AzureVpcSpec defines the specification required to deploy an Azure Kubernetes Service (AKS) cluster.
// This minimal spec covers essential production scenarios, including capacity, identity, networking, and autoscaling.
type AzureVpcSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Azure region where the AKS cluster will be created (e.g., eastus, westeurope).
	// Must be a valid Azure region string.
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// The name of the existing Azure Resource Group where the AKS cluster will be provisioned.
	ResourceGroup string `protobuf:"bytes,2,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
	// The Kubernetes version to deploy (e.g., "1.28"). If not set, defaults to the latest supported version by Azure.
	KubernetesVersion string `protobuf:"bytes,3,opt,name=kubernetes_version,json=kubernetesVersion,proto3" json:"kubernetes_version,omitempty"`
	// The DNS prefix for the AKS API server endpoint. This must be unique within the Azure region.
	DnsPrefix string `protobuf:"bytes,4,opt,name=dns_prefix,json=dnsPrefix,proto3" json:"dns_prefix,omitempty"`
	// Flag to enable a private cluster, where the API server is exposed via internal IP.
	// Use true for production environments that require restricted access.
	IsPrivateCluster bool `protobuf:"varint,5,opt,name=is_private_cluster,json=isPrivateCluster,proto3" json:"is_private_cluster,omitempty"`
	// The name of the subnet in which to place the cluster's node pools (used with Azure CNI networking).
	// This subnet must exist within the virtual network provided to the cluster.
	SubnetId string `protobuf:"bytes,6,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	// The VM SKU for the default node pool (e.g., "Standard_D4s_v3").
	// Choose a SKU with at least 4 vCPUs and 4GiB memory for production workloads.
	NodeVmSize string `protobuf:"bytes,7,opt,name=node_vm_size,json=nodeVmSize,proto3" json:"node_vm_size,omitempty"`
	// The minimum number of nodes for the default node pool when autoscaling is enabled.
	MinNodeCount int32 `protobuf:"varint,8,opt,name=min_node_count,json=minNodeCount,proto3" json:"min_node_count,omitempty"`
	// The maximum number of nodes for the default node pool when autoscaling is enabled.
	MaxNodeCount int32 `protobuf:"varint,9,opt,name=max_node_count,json=maxNodeCount,proto3" json:"max_node_count,omitempty"`
	// SSH public key used to access the Linux VMs running the Kubernetes nodes.
	// This must be a valid SSH RSA public key string (starting with "ssh-rsa").
	SshPublicKey string `protobuf:"bytes,10,opt,name=ssh_public_key,json=sshPublicKey,proto3" json:"ssh_public_key,omitempty"`
	// Whether to enable Azure AD integration for Kubernetes API authentication.
	// When true, you must also set the admin group object IDs.
	EnableAzureAd bool `protobuf:"varint,11,opt,name=enable_azure_ad,json=enableAzureAd,proto3" json:"enable_azure_ad,omitempty"`
	// A list of Azure AD group object IDs that should have admin access to the cluster.
	// Required if enable_azure_ad is true.
	AadAdminGroupObjectIds []string `protobuf:"bytes,12,rep,name=aad_admin_group_object_ids,json=aadAdminGroupObjectIds,proto3" json:"aad_admin_group_object_ids,omitempty"`
	// Flag to enable Azure Monitor (Log Analytics) integration for container logs and metrics.
	// This is strongly recommended for production observability.
	EnableMonitoring bool `protobuf:"varint,13,opt,name=enable_monitoring,json=enableMonitoring,proto3" json:"enable_monitoring,omitempty"`
	// Optional Azure Log Analytics workspace ID to send logs to.
	// Required if enable_monitoring is true and you want to use an existing workspace.
	LogAnalyticsWorkspaceId string `protobuf:"bytes,14,opt,name=log_analytics_workspace_id,json=logAnalyticsWorkspaceId,proto3" json:"log_analytics_workspace_id,omitempty"`
	// Optional list of authorized public IP ranges to access the Kubernetes API server.
	// If not set, all IPs are allowed (0.0.0.0/0). Use to restrict access for security.
	AuthorizedIpRanges []string `protobuf:"bytes,15,rep,name=authorized_ip_ranges,json=authorizedIpRanges,proto3" json:"authorized_ip_ranges,omitempty"`
	// Optional name of the Azure Container Registry (ACR) that this cluster should be able to pull images from.
	// If set, the cluster identity will be granted pull permissions to this registry.
	AcrName string `protobuf:"bytes,16,opt,name=acr_name,json=acrName,proto3" json:"acr_name,omitempty"`
	// Optional list of tags to apply to the AKS cluster resource for cost tracking and governance.
	Tags          map[string]string `protobuf:"bytes,17,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AzureVpcSpec) Reset() {
	*x = AzureVpcSpec{}
	mi := &file_project_planton_provider_azure_azurevpc_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AzureVpcSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureVpcSpec) ProtoMessage() {}

func (x *AzureVpcSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_azure_azurevpc_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureVpcSpec.ProtoReflect.Descriptor instead.
func (*AzureVpcSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_azure_azurevpc_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AzureVpcSpec) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AzureVpcSpec) GetResourceGroup() string {
	if x != nil {
		return x.ResourceGroup
	}
	return ""
}

func (x *AzureVpcSpec) GetKubernetesVersion() string {
	if x != nil {
		return x.KubernetesVersion
	}
	return ""
}

func (x *AzureVpcSpec) GetDnsPrefix() string {
	if x != nil {
		return x.DnsPrefix
	}
	return ""
}

func (x *AzureVpcSpec) GetIsPrivateCluster() bool {
	if x != nil {
		return x.IsPrivateCluster
	}
	return false
}

func (x *AzureVpcSpec) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *AzureVpcSpec) GetNodeVmSize() string {
	if x != nil {
		return x.NodeVmSize
	}
	return ""
}

func (x *AzureVpcSpec) GetMinNodeCount() int32 {
	if x != nil {
		return x.MinNodeCount
	}
	return 0
}

func (x *AzureVpcSpec) GetMaxNodeCount() int32 {
	if x != nil {
		return x.MaxNodeCount
	}
	return 0
}

func (x *AzureVpcSpec) GetSshPublicKey() string {
	if x != nil {
		return x.SshPublicKey
	}
	return ""
}

func (x *AzureVpcSpec) GetEnableAzureAd() bool {
	if x != nil {
		return x.EnableAzureAd
	}
	return false
}

func (x *AzureVpcSpec) GetAadAdminGroupObjectIds() []string {
	if x != nil {
		return x.AadAdminGroupObjectIds
	}
	return nil
}

func (x *AzureVpcSpec) GetEnableMonitoring() bool {
	if x != nil {
		return x.EnableMonitoring
	}
	return false
}

func (x *AzureVpcSpec) GetLogAnalyticsWorkspaceId() string {
	if x != nil {
		return x.LogAnalyticsWorkspaceId
	}
	return ""
}

func (x *AzureVpcSpec) GetAuthorizedIpRanges() []string {
	if x != nil {
		return x.AuthorizedIpRanges
	}
	return nil
}

func (x *AzureVpcSpec) GetAcrName() string {
	if x != nil {
		return x.AcrName
	}
	return ""
}

func (x *AzureVpcSpec) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

var File_project_planton_provider_azure_azurevpc_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_azure_azurevpc_v1_spec_proto_rawDesc = "" +
	"\n" +
	"5project/planton/provider/azure/azurevpc/v1/spec.proto\x12*project.planton.provider.azure.azurevpc.v1\x1a\x1bbuf/validate/validate.proto\x1a,project/planton/shared/options/options.proto\"\xd9\a\n" +
	"\fAzureVpcSpec\x12\"\n" +
	"\x06region\x18\x01 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x10\x03R\x06region\x121\n" +
	"\x0eresource_group\x18\x02 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x10\x01R\rresourceGroup\x12-\n" +
	"\x12kubernetes_version\x18\x03 \x01(\tR\x11kubernetesVersion\x12E\n" +
	"\n" +
	"dns_prefix\x18\x04 \x01(\tB&\xbaH#\xc8\x01\x01r\x1e2\x1c^[a-zA-Z][a-zA-Z0-9-]{2,30}$R\tdnsPrefix\x12,\n" +
	"\x12is_private_cluster\x18\x05 \x01(\bR\x10isPrivateCluster\x12'\n" +
	"\tsubnet_id\x18\x06 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x10\x01R\bsubnetId\x12,\n" +
	"\fnode_vm_size\x18\a \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x10\x01R\n" +
	"nodeVmSize\x120\n" +
	"\x0emin_node_count\x18\b \x01(\x05B\n" +
	"\xbaH\a\xc8\x01\x01\x1a\x02(\x01R\fminNodeCount\x120\n" +
	"\x0emax_node_count\x18\t \x01(\x05B\n" +
	"\xbaH\a\xc8\x01\x01\x1a\x02(\x01R\fmaxNodeCount\x12]\n" +
	"\x0essh_public_key\x18\n" +
	" \x01(\tB7\xbaH4\xc8\x01\x01r/2-^ssh-(rsa|ed25519)\\s+[A-Za-z0-9+/=]+(\\s+.*)?$R\fsshPublicKey\x12&\n" +
	"\x0fenable_azure_ad\x18\v \x01(\bR\renableAzureAd\x12:\n" +
	"\x1aaad_admin_group_object_ids\x18\f \x03(\tR\x16aadAdminGroupObjectIds\x125\n" +
	"\x11enable_monitoring\x18\r \x01(\bB\b\x92\xa6\x1d\x04trueR\x10enableMonitoring\x12;\n" +
	"\x1alog_analytics_workspace_id\x18\x0e \x01(\tR\x17logAnalyticsWorkspaceId\x120\n" +
	"\x14authorized_ip_ranges\x18\x0f \x03(\tR\x12authorizedIpRanges\x12\x19\n" +
	"\bacr_name\x18\x10 \x01(\tR\aacrName\x12V\n" +
	"\x04tags\x18\x11 \x03(\v2B.project.planton.provider.azure.azurevpc.v1.AzureVpcSpec.TagsEntryR\x04tags\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\xf1\x02\n" +
	".com.project.planton.provider.azure.azurevpc.v1B\tSpecProtoP\x01Zegithub.com/project-planton/project-planton/apis/project/planton/provider/azure/azurevpc/v1;azurevpcv1\xa2\x02\x05PPPAA\xaa\x02*Project.Planton.Provider.Azure.Azurevpc.V1\xca\x02*Project\\Planton\\Provider\\Azure\\Azurevpc\\V1\xe2\x026Project\\Planton\\Provider\\Azure\\Azurevpc\\V1\\GPBMetadata\xea\x02/Project::Planton::Provider::Azure::Azurevpc::V1b\x06proto3"

var (
	file_project_planton_provider_azure_azurevpc_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_azure_azurevpc_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_azure_azurevpc_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_azure_azurevpc_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_azure_azurevpc_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_azure_azurevpc_v1_spec_proto_rawDesc), len(file_project_planton_provider_azure_azurevpc_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_azure_azurevpc_v1_spec_proto_rawDescData
}

var file_project_planton_provider_azure_azurevpc_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_project_planton_provider_azure_azurevpc_v1_spec_proto_goTypes = []any{
	(*AzureVpcSpec)(nil), // 0: project.planton.provider.azure.azurevpc.v1.AzureVpcSpec
	nil,                  // 1: project.planton.provider.azure.azurevpc.v1.AzureVpcSpec.TagsEntry
}
var file_project_planton_provider_azure_azurevpc_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.azure.azurevpc.v1.AzureVpcSpec.tags:type_name -> project.planton.provider.azure.azurevpc.v1.AzureVpcSpec.TagsEntry
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_project_planton_provider_azure_azurevpc_v1_spec_proto_init() }
func file_project_planton_provider_azure_azurevpc_v1_spec_proto_init() {
	if File_project_planton_provider_azure_azurevpc_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_azure_azurevpc_v1_spec_proto_rawDesc), len(file_project_planton_provider_azure_azurevpc_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_azure_azurevpc_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_azure_azurevpc_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_azure_azurevpc_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_azure_azurevpc_v1_spec_proto = out.File
	file_project_planton_provider_azure_azurevpc_v1_spec_proto_goTypes = nil
	file_project_planton_provider_azure_azurevpc_v1_spec_proto_depIdxs = nil
}
