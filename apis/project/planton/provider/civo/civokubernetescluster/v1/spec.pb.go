// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/civo/civokubernetescluster/v1/spec.proto

package civokubernetesclusterv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	civo "github.com/project-planton/project-planton/apis/project/planton/provider/civo"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/cloudresourcekind"
	v1 "github.com/project-planton/project-planton/apis/project/planton/shared/foreignkey/v1"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CivoKubernetesClusterSpec defines the specification for creating a managed Kubernetes cluster on Civo Cloud (K3s).
// It focuses on essential parameters for a production-grade cluster, following the 80/20 principle to expose only the most commonly used settings.
type CivoKubernetesClusterSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the Kubernetes cluster.
	// Constraints: Must be unique per account. No spaces allowed (alphanumeric and hyphens recommended). If left blank, a random name will be assigned.
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// The Civo region where the cluster will be created.
	// Determines where the cluster's control plane and nodes are provisioned.
	Region civo.CivoRegion `protobuf:"varint,2,opt,name=region,proto3,enum=project.planton.provider.civo.CivoRegion" json:"region,omitempty"`
	// The Kubernetes version to use for the cluster (semantic versioning).
	// Must be a supported version on Civo (e.g., "1.26.3").
	KubernetesVersion string `protobuf:"bytes,3,opt,name=kubernetes_version,json=kubernetesVersion,proto3" json:"kubernetes_version,omitempty"`
	// Reference to the Civo network where the cluster will reside.
	// This must be an existing network in the same region. The network's ID is used for the cluster's networking.
	Network *v1.StringValueOrRef `protobuf:"bytes,4,opt,name=network,proto3" json:"network,omitempty"`
	// Whether to enable a highly available control plane for the cluster.
	// If true (when supported), the cluster is created with multiple master nodes for increased availability.
	// Default: false.
	HighlyAvailable bool `protobuf:"varint,5,opt,name=highly_available,json=highlyAvailable,proto3" json:"highly_available,omitempty"`
	// Whether to enable automatic Kubernetes version patch upgrades for the cluster.
	// If true, the cluster will automatically upgrade to new patch releases of Kubernetes when available.
	AutoUpgrade bool `protobuf:"varint,6,opt,name=auto_upgrade,json=autoUpgrade,proto3" json:"auto_upgrade,omitempty"`
	// Whether to disable surge upgrades for the cluster.
	// If false (default), cluster upgrades may temporarily provision extra resources to minimize downtime during updates.
	DisableSurgeUpgrade bool `protobuf:"varint,7,opt,name=disable_surge_upgrade,json=disableSurgeUpgrade,proto3" json:"disable_surge_upgrade,omitempty"`
	// A list of tags to apply to the cluster.
	// Tags help organize and identify the cluster within Civo.
	Tags []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// Configuration for the cluster's default node pool.
	DefaultNodePool *CivoKubernetesClusterDefaultNodePool `protobuf:"bytes,9,opt,name=default_node_pool,json=defaultNodePool,proto3" json:"default_node_pool,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CivoKubernetesClusterSpec) Reset() {
	*x = CivoKubernetesClusterSpec{}
	mi := &file_project_planton_provider_civo_civokubernetescluster_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CivoKubernetesClusterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CivoKubernetesClusterSpec) ProtoMessage() {}

func (x *CivoKubernetesClusterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_civo_civokubernetescluster_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CivoKubernetesClusterSpec.ProtoReflect.Descriptor instead.
func (*CivoKubernetesClusterSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_civo_civokubernetescluster_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *CivoKubernetesClusterSpec) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CivoKubernetesClusterSpec) GetRegion() civo.CivoRegion {
	if x != nil {
		return x.Region
	}
	return civo.CivoRegion(0)
}

func (x *CivoKubernetesClusterSpec) GetKubernetesVersion() string {
	if x != nil {
		return x.KubernetesVersion
	}
	return ""
}

func (x *CivoKubernetesClusterSpec) GetNetwork() *v1.StringValueOrRef {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *CivoKubernetesClusterSpec) GetHighlyAvailable() bool {
	if x != nil {
		return x.HighlyAvailable
	}
	return false
}

func (x *CivoKubernetesClusterSpec) GetAutoUpgrade() bool {
	if x != nil {
		return x.AutoUpgrade
	}
	return false
}

func (x *CivoKubernetesClusterSpec) GetDisableSurgeUpgrade() bool {
	if x != nil {
		return x.DisableSurgeUpgrade
	}
	return false
}

func (x *CivoKubernetesClusterSpec) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CivoKubernetesClusterSpec) GetDefaultNodePool() *CivoKubernetesClusterDefaultNodePool {
	if x != nil {
		return x.DefaultNodePool
	}
	return nil
}

// Civo Kubernetes Cluster Default Node Pool
type CivoKubernetesClusterDefaultNodePool struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The instance size (node flavor) for each node in the default pool (e.g., "g4s.kube.medium").
	// This defines the CPU and memory for the nodes.
	Size string `protobuf:"bytes,1,opt,name=size,proto3" json:"size,omitempty"`
	// The number of nodes to provision in the default node pool.
	// Must be at least 1.
	NodeCount     uint32 `protobuf:"varint,2,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CivoKubernetesClusterDefaultNodePool) Reset() {
	*x = CivoKubernetesClusterDefaultNodePool{}
	mi := &file_project_planton_provider_civo_civokubernetescluster_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CivoKubernetesClusterDefaultNodePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CivoKubernetesClusterDefaultNodePool) ProtoMessage() {}

func (x *CivoKubernetesClusterDefaultNodePool) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_civo_civokubernetescluster_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CivoKubernetesClusterDefaultNodePool.ProtoReflect.Descriptor instead.
func (*CivoKubernetesClusterDefaultNodePool) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_civo_civokubernetescluster_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *CivoKubernetesClusterDefaultNodePool) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *CivoKubernetesClusterDefaultNodePool) GetNodeCount() uint32 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

var File_project_planton_provider_civo_civokubernetescluster_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_civo_civokubernetescluster_v1_spec_proto_rawDesc = "" +
	"\n" +
	"Aproject/planton/provider/civo/civokubernetescluster/v1/spec.proto\x126project.planton.provider.civo.civokubernetescluster.v1\x1a\x1bbuf/validate/validate.proto\x1a*project/planton/provider/civo/region.proto\x1aBproject/planton/shared/cloudresourcekind/cloud_resource_kind.proto\x1a6project/planton/shared/foreignkey/v1/foreign_key.proto\x1a,project/planton/shared/options/options.proto\"\xf8\x04\n" +
	"\x19CivoKubernetesClusterSpec\x12)\n" +
	"\fcluster_name\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\vclusterName\x12I\n" +
	"\x06region\x18\x02 \x01(\x0e2).project.planton.provider.civo.CivoRegionB\x06\xbaH\x03\xc8\x01\x01R\x06region\x125\n" +
	"\x12kubernetes_version\x18\x03 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x11kubernetesVersion\x12z\n" +
	"\anetwork\x18\x04 \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB(\xbaH\x03\xc8\x01\x01\x88\xd4a\xe7\v\x92\xd4a\x19status.outputs.network_idR\anetwork\x124\n" +
	"\x10highly_available\x18\x05 \x01(\bB\t\x92\xa6\x1d\x05falseR\x0fhighlyAvailable\x12!\n" +
	"\fauto_upgrade\x18\x06 \x01(\bR\vautoUpgrade\x122\n" +
	"\x15disable_surge_upgrade\x18\a \x01(\bR\x13disableSurgeUpgrade\x12\x12\n" +
	"\x04tags\x18\b \x03(\tR\x04tags\x12\x90\x01\n" +
	"\x11default_node_pool\x18\t \x01(\v2\\.project.planton.provider.civo.civokubernetescluster.v1.CivoKubernetesClusterDefaultNodePoolB\x06\xbaH\x03\xc8\x01\x01R\x0fdefaultNodePool\"m\n" +
	"$CivoKubernetesClusterDefaultNodePool\x12\x1a\n" +
	"\x04size\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04size\x12)\n" +
	"\n" +
	"node_count\x18\x02 \x01(\rB\n" +
	"\xbaH\a\xc8\x01\x01*\x02 \x00R\tnodeCountB\xc6\x03\n" +
	":com.project.planton.provider.civo.civokubernetescluster.v1B\tSpecProtoP\x01Z~github.com/project-planton/project-planton/apis/project/planton/provider/civo/civokubernetescluster/v1;civokubernetesclusterv1\xa2\x02\x05PPPCC\xaa\x026Project.Planton.Provider.Civo.Civokubernetescluster.V1\xca\x026Project\\Planton\\Provider\\Civo\\Civokubernetescluster\\V1\xe2\x02BProject\\Planton\\Provider\\Civo\\Civokubernetescluster\\V1\\GPBMetadata\xea\x02;Project::Planton::Provider::Civo::Civokubernetescluster::V1b\x06proto3"

var (
	file_project_planton_provider_civo_civokubernetescluster_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_civo_civokubernetescluster_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_civo_civokubernetescluster_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_civo_civokubernetescluster_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_civo_civokubernetescluster_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_civo_civokubernetescluster_v1_spec_proto_rawDesc), len(file_project_planton_provider_civo_civokubernetescluster_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_civo_civokubernetescluster_v1_spec_proto_rawDescData
}

var file_project_planton_provider_civo_civokubernetescluster_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_project_planton_provider_civo_civokubernetescluster_v1_spec_proto_goTypes = []any{
	(*CivoKubernetesClusterSpec)(nil),            // 0: project.planton.provider.civo.civokubernetescluster.v1.CivoKubernetesClusterSpec
	(*CivoKubernetesClusterDefaultNodePool)(nil), // 1: project.planton.provider.civo.civokubernetescluster.v1.CivoKubernetesClusterDefaultNodePool
	(civo.CivoRegion)(0),                         // 2: project.planton.provider.civo.CivoRegion
	(*v1.StringValueOrRef)(nil),                  // 3: project.planton.shared.foreignkey.v1.StringValueOrRef
}
var file_project_planton_provider_civo_civokubernetescluster_v1_spec_proto_depIdxs = []int32{
	2, // 0: project.planton.provider.civo.civokubernetescluster.v1.CivoKubernetesClusterSpec.region:type_name -> project.planton.provider.civo.CivoRegion
	3, // 1: project.planton.provider.civo.civokubernetescluster.v1.CivoKubernetesClusterSpec.network:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	1, // 2: project.planton.provider.civo.civokubernetescluster.v1.CivoKubernetesClusterSpec.default_node_pool:type_name -> project.planton.provider.civo.civokubernetescluster.v1.CivoKubernetesClusterDefaultNodePool
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_project_planton_provider_civo_civokubernetescluster_v1_spec_proto_init() }
func file_project_planton_provider_civo_civokubernetescluster_v1_spec_proto_init() {
	if File_project_planton_provider_civo_civokubernetescluster_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_civo_civokubernetescluster_v1_spec_proto_rawDesc), len(file_project_planton_provider_civo_civokubernetescluster_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_civo_civokubernetescluster_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_civo_civokubernetescluster_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_civo_civokubernetescluster_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_civo_civokubernetescluster_v1_spec_proto = out.File
	file_project_planton_provider_civo_civokubernetescluster_v1_spec_proto_goTypes = nil
	file_project_planton_provider_civo_civokubernetescluster_v1_spec_proto_depIdxs = nil
}
