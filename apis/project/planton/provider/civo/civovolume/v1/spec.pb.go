// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/civo/civovolume/v1/spec.proto

package civovolumev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	civo "github.com/project-planton/project-planton/apis/project/planton/provider/civo"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Supported filesystem types for formatting a Civo volume.
type CivoVolumeFilesystemType int32

const (
	CivoVolumeFilesystemType_NONE CivoVolumeFilesystemType = 0 // Do not format the volume (leave unformatted).
	CivoVolumeFilesystemType_EXT4 CivoVolumeFilesystemType = 1 // Format the volume with an ext4 filesystem.
	CivoVolumeFilesystemType_XFS  CivoVolumeFilesystemType = 2 // Format the volume with an XFS filesystem.
)

// Enum value maps for CivoVolumeFilesystemType.
var (
	CivoVolumeFilesystemType_name = map[int32]string{
		0: "NONE",
		1: "EXT4",
		2: "XFS",
	}
	CivoVolumeFilesystemType_value = map[string]int32{
		"NONE": 0,
		"EXT4": 1,
		"XFS":  2,
	}
)

func (x CivoVolumeFilesystemType) Enum() *CivoVolumeFilesystemType {
	p := new(CivoVolumeFilesystemType)
	*p = x
	return p
}

func (x CivoVolumeFilesystemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CivoVolumeFilesystemType) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_provider_civo_civovolume_v1_spec_proto_enumTypes[0].Descriptor()
}

func (CivoVolumeFilesystemType) Type() protoreflect.EnumType {
	return &file_project_planton_provider_civo_civovolume_v1_spec_proto_enumTypes[0]
}

func (x CivoVolumeFilesystemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CivoVolumeFilesystemType.Descriptor instead.
func (CivoVolumeFilesystemType) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_provider_civo_civovolume_v1_spec_proto_rawDescGZIP(), []int{0}
}

// CivoVolumeSpec defines the specification required to create a Civo block storage volume.
// A block storage volume provides expandable storage that can be attached to Civo instances.
// This specification focuses on essential parameters for volume creation, adhering to the 80/20 principle.
type CivoVolumeSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the volume. Must be lowercase letters, numbers, and hyphens only,
	// starting with a letter and ending with a letter or number. Maximum 64 characters.
	VolumeName string `protobuf:"bytes,1,opt,name=volume_name,json=volumeName,proto3" json:"volume_name,omitempty"`
	// The Civo region where the volume will be created.
	// Must match the region of any instance that will attach to this volume.
	Region civo.CivoRegion `protobuf:"varint,2,opt,name=region,proto3,enum=project.planton.provider.civo.CivoRegion" json:"region,omitempty"`
	// The size of the volume in GiB.
	// Constraints: between 1 and 16000 (inclusive).
	SizeGib uint32 `protobuf:"varint,3,opt,name=size_gib,json=sizeGib,proto3" json:"size_gib,omitempty"`
	// The initial filesystem to format the volume with.
	// Allowed values: ext4, xfs, or none (no pre-formatting). Default is none.
	FilesystemType CivoVolumeFilesystemType `protobuf:"varint,4,opt,name=filesystem_type,json=filesystemType,proto3,enum=project.planton.provider.civo.civovolume.v1.CivoVolumeFilesystemType" json:"filesystem_type,omitempty"`
	// An optional snapshot ID or reference to create this volume from.
	// If provided, the new volume will be created from the given snapshot (inheriting its region and minimum size).
	SnapshotId string `protobuf:"bytes,5,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
	// A list of tags to apply to the volume.
	// Tags must be unique and consist of letters, numbers, colons, dashes, or underscores.
	Tags          []string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CivoVolumeSpec) Reset() {
	*x = CivoVolumeSpec{}
	mi := &file_project_planton_provider_civo_civovolume_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CivoVolumeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CivoVolumeSpec) ProtoMessage() {}

func (x *CivoVolumeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_civo_civovolume_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CivoVolumeSpec.ProtoReflect.Descriptor instead.
func (*CivoVolumeSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_civo_civovolume_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *CivoVolumeSpec) GetVolumeName() string {
	if x != nil {
		return x.VolumeName
	}
	return ""
}

func (x *CivoVolumeSpec) GetRegion() civo.CivoRegion {
	if x != nil {
		return x.Region
	}
	return civo.CivoRegion(0)
}

func (x *CivoVolumeSpec) GetSizeGib() uint32 {
	if x != nil {
		return x.SizeGib
	}
	return 0
}

func (x *CivoVolumeSpec) GetFilesystemType() CivoVolumeFilesystemType {
	if x != nil {
		return x.FilesystemType
	}
	return CivoVolumeFilesystemType_NONE
}

func (x *CivoVolumeSpec) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

func (x *CivoVolumeSpec) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

var File_project_planton_provider_civo_civovolume_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_civo_civovolume_v1_spec_proto_rawDesc = "" +
	"\n" +
	"6project/planton/provider/civo/civovolume/v1/spec.proto\x12+project.planton.provider.civo.civovolume.v1\x1a\x1bbuf/validate/validate.proto\x1a*project/planton/provider/civo/region.proto\"\x9a\x03\n" +
	"\x0eCivoVolumeSpec\x12K\n" +
	"\vvolume_name\x18\x01 \x01(\tB*\xbaH'\xc8\x01\x01r\"\x10\x01\x18@2\x1c^[a-z]([a-z0-9-]*[a-z0-9])?$R\n" +
	"volumeName\x12I\n" +
	"\x06region\x18\x02 \x01(\x0e2).project.planton.provider.civo.CivoRegionB\x06\xbaH\x03\xc8\x01\x01R\x06region\x12(\n" +
	"\bsize_gib\x18\x03 \x01(\rB\r\xbaH\n" +
	"\xc8\x01\x01*\x05\x18\x80}(\x01R\asizeGib\x12n\n" +
	"\x0ffilesystem_type\x18\x04 \x01(\x0e2E.project.planton.provider.civo.civovolume.v1.CivoVolumeFilesystemTypeR\x0efilesystemType\x12\x1f\n" +
	"\vsnapshot_id\x18\x05 \x01(\tR\n" +
	"snapshotId\x125\n" +
	"\x04tags\x18\x06 \x03(\tB!\xbaH\x1e\x92\x01\x1b\x18\x01\"\x17r\x15\x18@2\x11^[A-Za-z0-9:_-]+$R\x04tags*7\n" +
	"\x18CivoVolumeFilesystemType\x12\b\n" +
	"\x04NONE\x10\x00\x12\b\n" +
	"\x04EXT4\x10\x01\x12\a\n" +
	"\x03XFS\x10\x02B\xf9\x02\n" +
	"/com.project.planton.provider.civo.civovolume.v1B\tSpecProtoP\x01Zhgithub.com/project-planton/project-planton/apis/project/planton/provider/civo/civovolume/v1;civovolumev1\xa2\x02\x05PPPCC\xaa\x02+Project.Planton.Provider.Civo.Civovolume.V1\xca\x02+Project\\Planton\\Provider\\Civo\\Civovolume\\V1\xe2\x027Project\\Planton\\Provider\\Civo\\Civovolume\\V1\\GPBMetadata\xea\x020Project::Planton::Provider::Civo::Civovolume::V1b\x06proto3"

var (
	file_project_planton_provider_civo_civovolume_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_civo_civovolume_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_civo_civovolume_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_civo_civovolume_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_civo_civovolume_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_civo_civovolume_v1_spec_proto_rawDesc), len(file_project_planton_provider_civo_civovolume_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_civo_civovolume_v1_spec_proto_rawDescData
}

var file_project_planton_provider_civo_civovolume_v1_spec_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_project_planton_provider_civo_civovolume_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_provider_civo_civovolume_v1_spec_proto_goTypes = []any{
	(CivoVolumeFilesystemType)(0), // 0: project.planton.provider.civo.civovolume.v1.CivoVolumeFilesystemType
	(*CivoVolumeSpec)(nil),        // 1: project.planton.provider.civo.civovolume.v1.CivoVolumeSpec
	(civo.CivoRegion)(0),          // 2: project.planton.provider.civo.CivoRegion
}
var file_project_planton_provider_civo_civovolume_v1_spec_proto_depIdxs = []int32{
	2, // 0: project.planton.provider.civo.civovolume.v1.CivoVolumeSpec.region:type_name -> project.planton.provider.civo.CivoRegion
	0, // 1: project.planton.provider.civo.civovolume.v1.CivoVolumeSpec.filesystem_type:type_name -> project.planton.provider.civo.civovolume.v1.CivoVolumeFilesystemType
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_project_planton_provider_civo_civovolume_v1_spec_proto_init() }
func file_project_planton_provider_civo_civovolume_v1_spec_proto_init() {
	if File_project_planton_provider_civo_civovolume_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_civo_civovolume_v1_spec_proto_rawDesc), len(file_project_planton_provider_civo_civovolume_v1_spec_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_civo_civovolume_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_civo_civovolume_v1_spec_proto_depIdxs,
		EnumInfos:         file_project_planton_provider_civo_civovolume_v1_spec_proto_enumTypes,
		MessageInfos:      file_project_planton_provider_civo_civovolume_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_civo_civovolume_v1_spec_proto = out.File
	file_project_planton_provider_civo_civovolume_v1_spec_proto_goTypes = nil
	file_project_planton_provider_civo_civovolume_v1_spec_proto_depIdxs = nil
}
