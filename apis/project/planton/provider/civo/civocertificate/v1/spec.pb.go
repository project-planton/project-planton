// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/civo/civocertificate/v1/spec.proto

package civocertificatev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CivoCertificateType represents the certificate source.
type CivoCertificateType int32

const (
	// A free, auto‑managed Let's Encrypt certificate.
	CivoCertificateType_letsEncrypt CivoCertificateType = 0
	// A user‑provided custom certificate.
	CivoCertificateType_custom CivoCertificateType = 1
)

// Enum value maps for CivoCertificateType.
var (
	CivoCertificateType_name = map[int32]string{
		0: "letsEncrypt",
		1: "custom",
	}
	CivoCertificateType_value = map[string]int32{
		"letsEncrypt": 0,
		"custom":      1,
	}
)

func (x CivoCertificateType) Enum() *CivoCertificateType {
	p := new(CivoCertificateType)
	*p = x
	return p
}

func (x CivoCertificateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CivoCertificateType) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_provider_civo_civocertificate_v1_spec_proto_enumTypes[0].Descriptor()
}

func (CivoCertificateType) Type() protoreflect.EnumType {
	return &file_project_planton_provider_civo_civocertificate_v1_spec_proto_enumTypes[0]
}

func (x CivoCertificateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CivoCertificateType.Descriptor instead.
func (CivoCertificateType) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_provider_civo_civocertificate_v1_spec_proto_rawDescGZIP(), []int{0}
}

// CivoCertificateSpec defines the fields required to create a TLS certificate in Civo.
type CivoCertificateSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// certificate_name is a unique, human‑readable identifier (≤ 64 chars).
	CertificateName string `protobuf:"bytes,1,opt,name=certificate_name,json=certificateName,proto3" json:"certificate_name,omitempty"`
	// type must align with the branch chosen in certificate_source.
	Type CivoCertificateType `protobuf:"varint,2,opt,name=type,proto3,enum=project.planton.provider.civo.civocertificate.v1.CivoCertificateType" json:"type,omitempty"`
	// Mutually exclusive parameter sets.
	//
	// Types that are valid to be assigned to CertificateSource:
	//
	//	*CivoCertificateSpec_LetsEncrypt
	//	*CivoCertificateSpec_Custom
	CertificateSource isCivoCertificateSpec_CertificateSource `protobuf_oneof:"certificate_source"`
	// Optional free‑form description (≤ 128 chars).
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Optional tags; must be unique and lowercase kebab.
	Tags          []string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CivoCertificateSpec) Reset() {
	*x = CivoCertificateSpec{}
	mi := &file_project_planton_provider_civo_civocertificate_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CivoCertificateSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CivoCertificateSpec) ProtoMessage() {}

func (x *CivoCertificateSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_civo_civocertificate_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CivoCertificateSpec.ProtoReflect.Descriptor instead.
func (*CivoCertificateSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_civo_civocertificate_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *CivoCertificateSpec) GetCertificateName() string {
	if x != nil {
		return x.CertificateName
	}
	return ""
}

func (x *CivoCertificateSpec) GetType() CivoCertificateType {
	if x != nil {
		return x.Type
	}
	return CivoCertificateType_letsEncrypt
}

func (x *CivoCertificateSpec) GetCertificateSource() isCivoCertificateSpec_CertificateSource {
	if x != nil {
		return x.CertificateSource
	}
	return nil
}

func (x *CivoCertificateSpec) GetLetsEncrypt() *CivoCertificateLetsEncryptParams {
	if x != nil {
		if x, ok := x.CertificateSource.(*CivoCertificateSpec_LetsEncrypt); ok {
			return x.LetsEncrypt
		}
	}
	return nil
}

func (x *CivoCertificateSpec) GetCustom() *CivoCertificateCustomParams {
	if x != nil {
		if x, ok := x.CertificateSource.(*CivoCertificateSpec_Custom); ok {
			return x.Custom
		}
	}
	return nil
}

func (x *CivoCertificateSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CivoCertificateSpec) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type isCivoCertificateSpec_CertificateSource interface {
	isCivoCertificateSpec_CertificateSource()
}

type CivoCertificateSpec_LetsEncrypt struct {
	LetsEncrypt *CivoCertificateLetsEncryptParams `protobuf:"bytes,3,opt,name=lets_encrypt,json=letsEncrypt,proto3,oneof"`
}

type CivoCertificateSpec_Custom struct {
	Custom *CivoCertificateCustomParams `protobuf:"bytes,4,opt,name=custom,proto3,oneof"`
}

func (*CivoCertificateSpec_LetsEncrypt) isCivoCertificateSpec_CertificateSource() {}

func (*CivoCertificateSpec_Custom) isCivoCertificateSpec_CertificateSource() {}

// Parameters specific to a Let's Encrypt certificate request.
type CivoCertificateLetsEncryptParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// domains is the list of FQDNs (or wildcard domains) to include.
	// At least one domain is required.
	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// disable_auto_renew controls automatic renewal of the Let's Encrypt certificate.
	DisableAutoRenew bool `protobuf:"varint,2,opt,name=disable_auto_renew,json=disableAutoRenew,proto3" json:"disable_auto_renew,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CivoCertificateLetsEncryptParams) Reset() {
	*x = CivoCertificateLetsEncryptParams{}
	mi := &file_project_planton_provider_civo_civocertificate_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CivoCertificateLetsEncryptParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CivoCertificateLetsEncryptParams) ProtoMessage() {}

func (x *CivoCertificateLetsEncryptParams) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_civo_civocertificate_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CivoCertificateLetsEncryptParams.ProtoReflect.Descriptor instead.
func (*CivoCertificateLetsEncryptParams) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_civo_civocertificate_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *CivoCertificateLetsEncryptParams) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *CivoCertificateLetsEncryptParams) GetDisableAutoRenew() bool {
	if x != nil {
		return x.DisableAutoRenew
	}
	return false
}

// Parameters specific to a custom (user‑supplied) certificate.
type CivoCertificateCustomParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// leaf_certificate is the PEM‑encoded public certificate.
	LeafCertificate string `protobuf:"bytes,1,opt,name=leaf_certificate,json=leafCertificate,proto3" json:"leaf_certificate,omitempty"`
	// private_key is the PEM‑encoded private key.
	PrivateKey string `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// certificate_chain is an optional PEM‑encoded intermediate chain.
	CertificateChain string `protobuf:"bytes,3,opt,name=certificate_chain,json=certificateChain,proto3" json:"certificate_chain,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CivoCertificateCustomParams) Reset() {
	*x = CivoCertificateCustomParams{}
	mi := &file_project_planton_provider_civo_civocertificate_v1_spec_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CivoCertificateCustomParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CivoCertificateCustomParams) ProtoMessage() {}

func (x *CivoCertificateCustomParams) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_civo_civocertificate_v1_spec_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CivoCertificateCustomParams.ProtoReflect.Descriptor instead.
func (*CivoCertificateCustomParams) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_civo_civocertificate_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *CivoCertificateCustomParams) GetLeafCertificate() string {
	if x != nil {
		return x.LeafCertificate
	}
	return ""
}

func (x *CivoCertificateCustomParams) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *CivoCertificateCustomParams) GetCertificateChain() string {
	if x != nil {
		return x.CertificateChain
	}
	return ""
}

var File_project_planton_provider_civo_civocertificate_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_civo_civocertificate_v1_spec_proto_rawDesc = "" +
	"\n" +
	";project/planton/provider/civo/civocertificate/v1/spec.proto\x120project.planton.provider.civo.civocertificate.v1\x1a\x1bbuf/validate/validate.proto\"\xff\x03\n" +
	"\x13CivoCertificateSpec\x127\n" +
	"\x10certificate_name\x18\x01 \x01(\tB\f\xbaH\t\xc8\x01\x01r\x04\x10\x01\x18@R\x0fcertificateName\x12f\n" +
	"\x04type\x18\x02 \x01(\x0e2E.project.planton.provider.civo.civocertificate.v1.CivoCertificateTypeB\v\xbaH\b\xc8\x01\x01\x82\x01\x02\x10\x01R\x04type\x12w\n" +
	"\flets_encrypt\x18\x03 \x01(\v2R.project.planton.provider.civo.civocertificate.v1.CivoCertificateLetsEncryptParamsH\x00R\vletsEncrypt\x12g\n" +
	"\x06custom\x18\x04 \x01(\v2M.project.planton.provider.civo.civocertificate.v1.CivoCertificateCustomParamsH\x00R\x06custom\x12*\n" +
	"\vdescription\x18\x05 \x01(\tB\b\xbaH\x05r\x03\x18\x80\x01R\vdescription\x12\x1c\n" +
	"\x04tags\x18\x06 \x03(\tB\b\xbaH\x05\x92\x01\x02\x18\x01R\x04tagsB\x1b\n" +
	"\x12certificate_source\x12\x05\xbaH\x02\b\x01\"\xb6\x01\n" +
	" CivoCertificateLetsEncryptParams\x12d\n" +
	"\adomains\x18\x01 \x03(\tBJ\xbaHG\xc8\x01\x01\x92\x01A\x18\x01\"=r;29^(?:\\*\\.[A-Za-z0-9\\-\\.]+|[A-Za-z0-9\\-\\.]+\\.[A-Za-z]{2,})$R\adomains\x12,\n" +
	"\x12disable_auto_renew\x18\x02 \x01(\bR\x10disableAutoRenew\"\xae\x01\n" +
	"\x1bCivoCertificateCustomParams\x125\n" +
	"\x10leaf_certificate\x18\x01 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x10\x01R\x0fleafCertificate\x12+\n" +
	"\vprivate_key\x18\x02 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x10\x01R\n" +
	"privateKey\x12+\n" +
	"\x11certificate_chain\x18\x03 \x01(\tR\x10certificateChain*2\n" +
	"\x13CivoCertificateType\x12\x0f\n" +
	"\vletsEncrypt\x10\x00\x12\n" +
	"\n" +
	"\x06custom\x10\x01B\x9c\x03\n" +
	"4com.project.planton.provider.civo.civocertificate.v1B\tSpecProtoP\x01Zrgithub.com/project-planton/project-planton/apis/project/planton/provider/civo/civocertificate/v1;civocertificatev1\xa2\x02\x05PPPCC\xaa\x020Project.Planton.Provider.Civo.Civocertificate.V1\xca\x020Project\\Planton\\Provider\\Civo\\Civocertificate\\V1\xe2\x02<Project\\Planton\\Provider\\Civo\\Civocertificate\\V1\\GPBMetadata\xea\x025Project::Planton::Provider::Civo::Civocertificate::V1b\x06proto3"

var (
	file_project_planton_provider_civo_civocertificate_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_civo_civocertificate_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_civo_civocertificate_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_civo_civocertificate_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_civo_civocertificate_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_civo_civocertificate_v1_spec_proto_rawDesc), len(file_project_planton_provider_civo_civocertificate_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_civo_civocertificate_v1_spec_proto_rawDescData
}

var file_project_planton_provider_civo_civocertificate_v1_spec_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_project_planton_provider_civo_civocertificate_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_project_planton_provider_civo_civocertificate_v1_spec_proto_goTypes = []any{
	(CivoCertificateType)(0),                 // 0: project.planton.provider.civo.civocertificate.v1.CivoCertificateType
	(*CivoCertificateSpec)(nil),              // 1: project.planton.provider.civo.civocertificate.v1.CivoCertificateSpec
	(*CivoCertificateLetsEncryptParams)(nil), // 2: project.planton.provider.civo.civocertificate.v1.CivoCertificateLetsEncryptParams
	(*CivoCertificateCustomParams)(nil),      // 3: project.planton.provider.civo.civocertificate.v1.CivoCertificateCustomParams
}
var file_project_planton_provider_civo_civocertificate_v1_spec_proto_depIdxs = []int32{
	0, // 0: project.planton.provider.civo.civocertificate.v1.CivoCertificateSpec.type:type_name -> project.planton.provider.civo.civocertificate.v1.CivoCertificateType
	2, // 1: project.planton.provider.civo.civocertificate.v1.CivoCertificateSpec.lets_encrypt:type_name -> project.planton.provider.civo.civocertificate.v1.CivoCertificateLetsEncryptParams
	3, // 2: project.planton.provider.civo.civocertificate.v1.CivoCertificateSpec.custom:type_name -> project.planton.provider.civo.civocertificate.v1.CivoCertificateCustomParams
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_project_planton_provider_civo_civocertificate_v1_spec_proto_init() }
func file_project_planton_provider_civo_civocertificate_v1_spec_proto_init() {
	if File_project_planton_provider_civo_civocertificate_v1_spec_proto != nil {
		return
	}
	file_project_planton_provider_civo_civocertificate_v1_spec_proto_msgTypes[0].OneofWrappers = []any{
		(*CivoCertificateSpec_LetsEncrypt)(nil),
		(*CivoCertificateSpec_Custom)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_civo_civocertificate_v1_spec_proto_rawDesc), len(file_project_planton_provider_civo_civocertificate_v1_spec_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_civo_civocertificate_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_civo_civocertificate_v1_spec_proto_depIdxs,
		EnumInfos:         file_project_planton_provider_civo_civocertificate_v1_spec_proto_enumTypes,
		MessageInfos:      file_project_planton_provider_civo_civocertificate_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_civo_civocertificate_v1_spec_proto = out.File
	file_project_planton_provider_civo_civocertificate_v1_spec_proto_goTypes = nil
	file_project_planton_provider_civo_civocertificate_v1_spec_proto_depIdxs = nil
}
