// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/cloudflare/cloudflareworker/v1/spec.proto

package cloudflareworkerv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/project-planton/project-planton/apis/project/planton/shared/foreignkey/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Supported usage models for Cloudflare Workers.
type CloudflareWorkerUsageModel int32

const (
	CloudflareWorkerUsageModel_BUNDLED CloudflareWorkerUsageModel = 0
	CloudflareWorkerUsageModel_UNBOUND CloudflareWorkerUsageModel = 1
)

// Enum value maps for CloudflareWorkerUsageModel.
var (
	CloudflareWorkerUsageModel_name = map[int32]string{
		0: "BUNDLED",
		1: "UNBOUND",
	}
	CloudflareWorkerUsageModel_value = map[string]int32{
		"BUNDLED": 0,
		"UNBOUND": 1,
	}
)

func (x CloudflareWorkerUsageModel) Enum() *CloudflareWorkerUsageModel {
	p := new(CloudflareWorkerUsageModel)
	*p = x
	return p
}

func (x CloudflareWorkerUsageModel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudflareWorkerUsageModel) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_enumTypes[0].Descriptor()
}

func (CloudflareWorkerUsageModel) Type() protoreflect.EnumType {
	return &file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_enumTypes[0]
}

func (x CloudflareWorkerUsageModel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloudflareWorkerUsageModel.Descriptor instead.
func (CloudflareWorkerUsageModel) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_rawDescGZIP(), []int{0}
}

// CloudflareWorkerSpec defines user-provided configuration for deploying a Cloudflare Worker.
type CloudflareWorkerSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A unique name for the Worker script (alphanumeric and hyphen characters only, no underscores).
	ScriptName string `protobuf:"bytes,1,opt,name=script_name,json=scriptName,proto3" json:"script_name,omitempty"`
	// Reference or literal path/URL to the Worker script code bundle.
	ScriptSource *v1.StringValueOrRef `protobuf:"bytes,2,opt,name=script_source,json=scriptSource,proto3" json:"script_source,omitempty"`
	// The Cloudflare account ID in which to create the worker.
	AccountId string `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// (Optional) One or more KV namespaces to bind to this Worker (referenced by CloudflareKVNamespace.namespace_id).
	KvBindings []*v1.ValueFromRef `protobuf:"bytes,4,rep,name=kv_bindings,json=kvBindings,proto3" json:"kv_bindings,omitempty"`
	// (Optional) URL pattern to attach this Worker to (must correspond to a domain under an existing CloudflareDnsZone).
	RoutePattern string `protobuf:"bytes,5,opt,name=route_pattern,json=routePattern,proto3" json:"route_pattern,omitempty"`
	// (Optional) Compatibility date for the Worker script (YYYY-MM-DD). If unset, defaults to today's date.
	CompatibilityDate string `protobuf:"bytes,6,opt,name=compatibility_date,json=compatibilityDate,proto3" json:"compatibility_date,omitempty"`
	// (Optional) Billing/usage model for the Worker. Defaults to BUNDLED if unspecified.
	UsageModel CloudflareWorkerUsageModel `protobuf:"varint,7,opt,name=usage_model,json=usageModel,proto3,enum=project.planton.provider.cloudflare.cloudflareworker.v1.CloudflareWorkerUsageModel" json:"usage_model,omitempty"`
	// Environment configuration supporting variables and secrets.
	// Variables become plain-text bindings in the Worker.
	// Secrets are uploaded via Cloudflare Workers Secrets API (encrypted at rest).
	Env           *CloudflareWorkerEnv `protobuf:"bytes,8,opt,name=env,proto3" json:"env,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloudflareWorkerSpec) Reset() {
	*x = CloudflareWorkerSpec{}
	mi := &file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudflareWorkerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudflareWorkerSpec) ProtoMessage() {}

func (x *CloudflareWorkerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudflareWorkerSpec.ProtoReflect.Descriptor instead.
func (*CloudflareWorkerSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *CloudflareWorkerSpec) GetScriptName() string {
	if x != nil {
		return x.ScriptName
	}
	return ""
}

func (x *CloudflareWorkerSpec) GetScriptSource() *v1.StringValueOrRef {
	if x != nil {
		return x.ScriptSource
	}
	return nil
}

func (x *CloudflareWorkerSpec) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CloudflareWorkerSpec) GetKvBindings() []*v1.ValueFromRef {
	if x != nil {
		return x.KvBindings
	}
	return nil
}

func (x *CloudflareWorkerSpec) GetRoutePattern() string {
	if x != nil {
		return x.RoutePattern
	}
	return ""
}

func (x *CloudflareWorkerSpec) GetCompatibilityDate() string {
	if x != nil {
		return x.CompatibilityDate
	}
	return ""
}

func (x *CloudflareWorkerSpec) GetUsageModel() CloudflareWorkerUsageModel {
	if x != nil {
		return x.UsageModel
	}
	return CloudflareWorkerUsageModel_BUNDLED
}

func (x *CloudflareWorkerSpec) GetEnv() *CloudflareWorkerEnv {
	if x != nil {
		return x.Env
	}
	return nil
}

// CloudflareWorkerEnv defines environment variables and secrets for a CloudflareWorker.
type CloudflareWorkerEnv struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Non-sensitive configuration (becomes plain-text bindings in the Worker).
	// Supports plain values or $variables-group/... references.
	// Example: LOG_LEVEL: "info"
	// Example: NAMESPACE: "$variables-group/temporal/namespace"
	Variables map[string]string `protobuf:"bytes,1,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Sensitive configuration (uploaded via Cloudflare Secrets API, encrypted at rest).
	// Supports plain values or $secrets-group/... references.
	// Example: API_KEY: "$secrets-group/external-apis/stripe-key"
	// Note: Secrets are uploaded separately from the worker version and are never logged.
	Secrets       map[string]string `protobuf:"bytes,2,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloudflareWorkerEnv) Reset() {
	*x = CloudflareWorkerEnv{}
	mi := &file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudflareWorkerEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudflareWorkerEnv) ProtoMessage() {}

func (x *CloudflareWorkerEnv) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudflareWorkerEnv.ProtoReflect.Descriptor instead.
func (*CloudflareWorkerEnv) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *CloudflareWorkerEnv) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *CloudflareWorkerEnv) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

var File_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_rawDesc = "" +
	"\n" +
	"Bproject/planton/provider/cloudflare/cloudflareworker/v1/spec.proto\x127project.planton.provider.cloudflare.cloudflareworker.v1\x1a\x1bbuf/validate/validate.proto\x1a6project/planton/shared/foreignkey/v1/foreign_key.proto\"\xae\x05\n" +
	"\x14CloudflareWorkerSpec\x12(\n" +
	"\vscript_name\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x10\x01R\n" +
	"scriptName\x12c\n" +
	"\rscript_source\x18\x02 \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB\x06\xbaH\x03\xc8\x01\x01R\fscriptSource\x12=\n" +
	"\n" +
	"account_id\x18\x03 \x01(\tB\x1e\xbaH\x1b\xc8\x01\x01r\x162\x11^[0-9a-fA-F]{32}$\x98\x01 R\taccountId\x12y\n" +
	"\vkv_bindings\x18\x04 \x03(\v22.project.planton.shared.foreignkey.v1.ValueFromRefB$\x88\xd4a\x89\x0e\x92\xd4a\x1bstatus.outputs.namespace_idR\n" +
	"kvBindings\x12#\n" +
	"\rroute_pattern\x18\x05 \x01(\tR\froutePattern\x12R\n" +
	"\x12compatibility_date\x18\x06 \x01(\tB#\xbaH r\x1e2\x1c^[0-9]{4}-[0-9]{2}-[0-9]{2}$R\x11compatibilityDate\x12t\n" +
	"\vusage_model\x18\a \x01(\x0e2S.project.planton.provider.cloudflare.cloudflareworker.v1.CloudflareWorkerUsageModelR\n" +
	"usageModel\x12^\n" +
	"\x03env\x18\b \x01(\v2L.project.planton.provider.cloudflare.cloudflareworker.v1.CloudflareWorkerEnvR\x03env\"\xff\x02\n" +
	"\x13CloudflareWorkerEnv\x12y\n" +
	"\tvariables\x18\x01 \x03(\v2[.project.planton.provider.cloudflare.cloudflareworker.v1.CloudflareWorkerEnv.VariablesEntryR\tvariables\x12s\n" +
	"\asecrets\x18\x02 \x03(\v2Y.project.planton.provider.cloudflare.cloudflareworker.v1.CloudflareWorkerEnv.SecretsEntryR\asecrets\x1a<\n" +
	"\x0eVariablesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a:\n" +
	"\fSecretsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01*6\n" +
	"\x1aCloudflareWorkerUsageModel\x12\v\n" +
	"\aBUNDLED\x10\x00\x12\v\n" +
	"\aUNBOUND\x10\x01B\xc7\x03\n" +
	";com.project.planton.provider.cloudflare.cloudflareworker.v1B\tSpecProtoP\x01Zzgithub.com/project-planton/project-planton/apis/project/planton/provider/cloudflare/cloudflareworker/v1;cloudflareworkerv1\xa2\x02\x05PPPCC\xaa\x027Project.Planton.Provider.Cloudflare.Cloudflareworker.V1\xca\x027Project\\Planton\\Provider\\Cloudflare\\Cloudflareworker\\V1\xe2\x02CProject\\Planton\\Provider\\Cloudflare\\Cloudflareworker\\V1\\GPBMetadata\xea\x02<Project::Planton::Provider::Cloudflare::Cloudflareworker::V1b\x06proto3"

var (
	file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_rawDesc), len(file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_rawDescData
}

var file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_goTypes = []any{
	(CloudflareWorkerUsageModel)(0), // 0: project.planton.provider.cloudflare.cloudflareworker.v1.CloudflareWorkerUsageModel
	(*CloudflareWorkerSpec)(nil),    // 1: project.planton.provider.cloudflare.cloudflareworker.v1.CloudflareWorkerSpec
	(*CloudflareWorkerEnv)(nil),     // 2: project.planton.provider.cloudflare.cloudflareworker.v1.CloudflareWorkerEnv
	nil,                             // 3: project.planton.provider.cloudflare.cloudflareworker.v1.CloudflareWorkerEnv.VariablesEntry
	nil,                             // 4: project.planton.provider.cloudflare.cloudflareworker.v1.CloudflareWorkerEnv.SecretsEntry
	(*v1.StringValueOrRef)(nil),     // 5: project.planton.shared.foreignkey.v1.StringValueOrRef
	(*v1.ValueFromRef)(nil),         // 6: project.planton.shared.foreignkey.v1.ValueFromRef
}
var file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_depIdxs = []int32{
	5, // 0: project.planton.provider.cloudflare.cloudflareworker.v1.CloudflareWorkerSpec.script_source:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	6, // 1: project.planton.provider.cloudflare.cloudflareworker.v1.CloudflareWorkerSpec.kv_bindings:type_name -> project.planton.shared.foreignkey.v1.ValueFromRef
	0, // 2: project.planton.provider.cloudflare.cloudflareworker.v1.CloudflareWorkerSpec.usage_model:type_name -> project.planton.provider.cloudflare.cloudflareworker.v1.CloudflareWorkerUsageModel
	2, // 3: project.planton.provider.cloudflare.cloudflareworker.v1.CloudflareWorkerSpec.env:type_name -> project.planton.provider.cloudflare.cloudflareworker.v1.CloudflareWorkerEnv
	3, // 4: project.planton.provider.cloudflare.cloudflareworker.v1.CloudflareWorkerEnv.variables:type_name -> project.planton.provider.cloudflare.cloudflareworker.v1.CloudflareWorkerEnv.VariablesEntry
	4, // 5: project.planton.provider.cloudflare.cloudflareworker.v1.CloudflareWorkerEnv.secrets:type_name -> project.planton.provider.cloudflare.cloudflareworker.v1.CloudflareWorkerEnv.SecretsEntry
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_init() }
func file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_init() {
	if File_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_rawDesc), len(file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_depIdxs,
		EnumInfos:         file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_enumTypes,
		MessageInfos:      file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto = out.File
	file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_goTypes = nil
	file_project_planton_provider_cloudflare_cloudflareworker_v1_spec_proto_depIdxs = nil
}
