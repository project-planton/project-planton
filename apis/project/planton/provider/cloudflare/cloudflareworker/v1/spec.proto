syntax = "proto3";

package project.planton.provider.cloudflare.cloudflareworker.v1;

import "buf/validate/validate.proto";
import "project/planton/shared/foreignkey/v1/foreign_key.proto";

// CloudflareWorkerSpec defines user-provided configuration for deploying a Cloudflare Worker.
message CloudflareWorkerSpec {
  // The Cloudflare account ID in which to create the worker.
  string account_id = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).string.len = 32,
    (buf.validate.field).string.pattern = "^[0-9a-fA-F]{32}$"
  ];

  // Worker script configuration
  CloudflareWorkerScript script = 2 [(buf.validate.field).required = true];

  // (Optional) One or more KV namespaces to bind to this Worker (referenced by CloudflareKVNamespace.namespace_id).
  repeated project.planton.shared.foreignkey.v1.ValueFromRef kv_bindings = 3 [
    (project.planton.shared.foreignkey.v1.default_kind) = CloudflareKvNamespace,
    (project.planton.shared.foreignkey.v1.default_kind_field_path) = "status.outputs.namespace_id"
  ];

  // (Optional) DNS configuration for attaching the Worker to a custom domain.
  CloudflareWorkerDns dns = 4;

  // (Optional) Compatibility date for the Worker script (YYYY-MM-DD). If unset, defaults to today's date.
  string compatibility_date = 5 [(buf.validate.field).string.pattern = "^[0-9]{4}-[0-9]{2}-[0-9]{2}$"];

  // Supported usage models for Cloudflare Workers.
  enum CloudflareWorkerUsageModel {
    BUNDLED = 0;
    UNBOUND = 1;
  }

  // (Optional) Billing/usage model for the Worker. Defaults to BUNDLED if unspecified.
  CloudflareWorkerUsageModel usage_model = 6;

  // Environment configuration supporting variables and secrets.
  // Variables become plain-text bindings in the Worker.
  // Secrets are uploaded via Cloudflare Workers Secrets API (encrypted at rest).
  CloudflareWorkerEnv env = 7;
}

// CloudflareWorkerEnv defines environment variables and secrets for a CloudflareWorker.
message CloudflareWorkerEnv {
  // Non-sensitive configuration (becomes plain-text bindings in the Worker).
  // Supports plain values or $variables-group/... references.
  // Example: LOG_LEVEL: "info"
  // Example: NAMESPACE: "$variables-group/temporal/namespace"
  map<string, string> variables = 1;

  // Sensitive configuration (uploaded via Cloudflare Secrets API, encrypted at rest).
  // Supports plain values or $secrets-group/... references.
  // Example: API_KEY: "$secrets-group/external-apis/stripe-key"
  // Note: Secrets are uploaded separately from the worker version and are never logged.
  map<string, string> secrets = 2;
}

// Cloudflare worker script configuration
message CloudflareWorkerScript {
  string name = 1 [(buf.validate.field).string.min_len = 1];
  CloudflareWorkerScriptBundleR2Object bundle = 2 [(buf.validate.field).required = true];
}

message CloudflareWorkerScriptBundleR2Object {
  string bucket = 1 [(buf.validate.field).required = true];
  string path = 2 [(buf.validate.field).required = true];
}

// CloudflareWorkerDns defines DNS configuration for attaching a Worker to a custom domain.
message CloudflareWorkerDns {
  // Enable or disable DNS/route configuration. Set to false to deploy worker without a route.
  bool enabled = 1;

  // The Cloudflare Zone ID where the Worker route will be created.
  string zone_id = 2 [(buf.validate.field).string.min_len = 1];

  // The fully qualified domain name where the Worker will be accessible (e.g., "git-webhooks.planton.live").
  // A DNS record will be created automatically for this hostname with proxy (orange cloud) enabled.
  string hostname = 3 [(buf.validate.field).string.min_len = 1];

  // (Optional) URL pattern to match incoming requests. If not specified, defaults to "hostname/*".
  // Examples: "git-webhooks.planton.live/*", "api.example.com/webhooks/*"
  string route_pattern = 4;
}
