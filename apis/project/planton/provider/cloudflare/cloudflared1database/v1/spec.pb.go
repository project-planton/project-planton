// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/cloudflare/cloudflared1database/v1/spec.proto

package cloudflared1databasev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enumeration of supported regions for Cloudflare D1 databases.
type CloudflareD1Region int32

const (
	CloudflareD1Region_cloudflare_d1_region_unspecified CloudflareD1Region = 0
	CloudflareD1Region_weur                             CloudflareD1Region = 1
	CloudflareD1Region_enw                              CloudflareD1Region = 2
	CloudflareD1Region_ape                              CloudflareD1Region = 3
	CloudflareD1Region_usw                              CloudflareD1Region = 4
)

// Enum value maps for CloudflareD1Region.
var (
	CloudflareD1Region_name = map[int32]string{
		0: "cloudflare_d1_region_unspecified",
		1: "weur",
		2: "enw",
		3: "ape",
		4: "usw",
	}
	CloudflareD1Region_value = map[string]int32{
		"cloudflare_d1_region_unspecified": 0,
		"weur":                             1,
		"enw":                              2,
		"ape":                              3,
		"usw":                              4,
	}
)

func (x CloudflareD1Region) Enum() *CloudflareD1Region {
	p := new(CloudflareD1Region)
	*p = x
	return p
}

func (x CloudflareD1Region) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudflareD1Region) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto_enumTypes[0].Descriptor()
}

func (CloudflareD1Region) Type() protoreflect.EnumType {
	return &file_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto_enumTypes[0]
}

func (x CloudflareD1Region) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloudflareD1Region.Descriptor instead.
func (CloudflareD1Region) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto_rawDescGZIP(), []int{0}
}

// CloudflareD1DatabaseSpec defines the essential configuration for creating a Cloudflare D1 database.
// This follows the 80/20 principle: only the most commonly used fields are exposed to keep the API simple.
type CloudflareD1DatabaseSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique name for the D1 database.
	DatabaseName string `protobuf:"bytes,1,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	// The Cloudflare account ID in which to create the database.
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The Cloudflare region where the D1 database will be hosted.
	// Allowed values include: WEUR, ENW, APE, USW. Defaults to WEUR if not specified.
	Region CloudflareD1Region `protobuf:"varint,3,opt,name=region,proto3,enum=project.planton.provider.cloudflare.cloudflared1database.v1.CloudflareD1Region" json:"region,omitempty"`
	// (Optional) Specify a primary key column name if an initial table migration is needed.
	PrimaryKey string `protobuf:"bytes,4,opt,name=primary_key,json=primaryKey,proto3" json:"primary_key,omitempty"`
	// (Optional) Enable a D1 preview branch for this database (for use in preview deployments). Defaults to false.
	PreviewBranch bool `protobuf:"varint,5,opt,name=preview_branch,json=previewBranch,proto3" json:"preview_branch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloudflareD1DatabaseSpec) Reset() {
	*x = CloudflareD1DatabaseSpec{}
	mi := &file_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudflareD1DatabaseSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudflareD1DatabaseSpec) ProtoMessage() {}

func (x *CloudflareD1DatabaseSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudflareD1DatabaseSpec.ProtoReflect.Descriptor instead.
func (*CloudflareD1DatabaseSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *CloudflareD1DatabaseSpec) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *CloudflareD1DatabaseSpec) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CloudflareD1DatabaseSpec) GetRegion() CloudflareD1Region {
	if x != nil {
		return x.Region
	}
	return CloudflareD1Region_cloudflare_d1_region_unspecified
}

func (x *CloudflareD1DatabaseSpec) GetPrimaryKey() string {
	if x != nil {
		return x.PrimaryKey
	}
	return ""
}

func (x *CloudflareD1DatabaseSpec) GetPreviewBranch() bool {
	if x != nil {
		return x.PreviewBranch
	}
	return false
}

var File_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto_rawDesc = "" +
	"\n" +
	"Fproject/planton/provider/cloudflare/cloudflared1database/v1/spec.proto\x12;project.planton.provider.cloudflare.cloudflared1database.v1\x1a\x1bbuf/validate/validate.proto\"\xab\x02\n" +
	"\x18CloudflareD1DatabaseSpec\x12/\n" +
	"\rdatabase_name\x18\x01 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x18@R\fdatabaseName\x12%\n" +
	"\n" +
	"account_id\x18\x02 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\taccountId\x12o\n" +
	"\x06region\x18\x03 \x01(\x0e2O.project.planton.provider.cloudflare.cloudflared1database.v1.CloudflareD1RegionB\x06\xbaH\x03\xc8\x01\x01R\x06region\x12\x1f\n" +
	"\vprimary_key\x18\x04 \x01(\tR\n" +
	"primaryKey\x12%\n" +
	"\x0epreview_branch\x18\x05 \x01(\bR\rpreviewBranch*_\n" +
	"\x12CloudflareD1Region\x12$\n" +
	" cloudflare_d1_region_unspecified\x10\x00\x12\b\n" +
	"\x04weur\x10\x01\x12\a\n" +
	"\x03enw\x10\x02\x12\a\n" +
	"\x03ape\x10\x03\x12\a\n" +
	"\x03usw\x10\x04B\xe4\x03\n" +
	"?com.project.planton.provider.cloudflare.cloudflared1database.v1B\tSpecProtoP\x01Z\x82\x01github.com/project-planton/project-planton/apis/project/planton/provider/cloudflare/cloudflared1database/v1;cloudflared1databasev1\xa2\x02\x05PPPCC\xaa\x02;Project.Planton.Provider.Cloudflare.Cloudflared1database.V1\xca\x02;Project\\Planton\\Provider\\Cloudflare\\Cloudflared1database\\V1\xe2\x02GProject\\Planton\\Provider\\Cloudflare\\Cloudflared1database\\V1\\GPBMetadata\xea\x02@Project::Planton::Provider::Cloudflare::Cloudflared1database::V1b\x06proto3"

var (
	file_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto_rawDesc), len(file_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto_rawDescData
}

var file_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto_goTypes = []any{
	(CloudflareD1Region)(0),          // 0: project.planton.provider.cloudflare.cloudflared1database.v1.CloudflareD1Region
	(*CloudflareD1DatabaseSpec)(nil), // 1: project.planton.provider.cloudflare.cloudflared1database.v1.CloudflareD1DatabaseSpec
}
var file_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto_depIdxs = []int32{
	0, // 0: project.planton.provider.cloudflare.cloudflared1database.v1.CloudflareD1DatabaseSpec.region:type_name -> project.planton.provider.cloudflare.cloudflared1database.v1.CloudflareD1Region
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto_init() }
func file_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto_init() {
	if File_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto_rawDesc), len(file_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto_depIdxs,
		EnumInfos:         file_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto_enumTypes,
		MessageInfos:      file_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto = out.File
	file_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto_goTypes = nil
	file_project_planton_provider_cloudflare_cloudflared1database_v1_spec_proto_depIdxs = nil
}
