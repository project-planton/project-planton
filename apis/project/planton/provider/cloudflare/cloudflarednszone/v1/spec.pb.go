// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/cloudflare/cloudflarednszone/v1/spec.proto

package cloudflarednszonev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Available Cloudflare zone plan options.
type CloudflareDnsZonePlan int32

const (
	// Free plan (default).
	CloudflareDnsZonePlan_FREE CloudflareDnsZonePlan = 0
	// Pro plan.
	CloudflareDnsZonePlan_PRO CloudflareDnsZonePlan = 1
	// Business plan.
	CloudflareDnsZonePlan_BUSINESS CloudflareDnsZonePlan = 2
	// Enterprise plan.
	CloudflareDnsZonePlan_ENTERPRISE CloudflareDnsZonePlan = 3
)

// Enum value maps for CloudflareDnsZonePlan.
var (
	CloudflareDnsZonePlan_name = map[int32]string{
		0: "FREE",
		1: "PRO",
		2: "BUSINESS",
		3: "ENTERPRISE",
	}
	CloudflareDnsZonePlan_value = map[string]int32{
		"FREE":       0,
		"PRO":        1,
		"BUSINESS":   2,
		"ENTERPRISE": 3,
	}
)

func (x CloudflareDnsZonePlan) Enum() *CloudflareDnsZonePlan {
	p := new(CloudflareDnsZonePlan)
	*p = x
	return p
}

func (x CloudflareDnsZonePlan) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudflareDnsZonePlan) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto_enumTypes[0].Descriptor()
}

func (CloudflareDnsZonePlan) Type() protoreflect.EnumType {
	return &file_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto_enumTypes[0]
}

func (x CloudflareDnsZonePlan) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloudflareDnsZonePlan.Descriptor instead.
func (CloudflareDnsZonePlan) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto_rawDescGZIP(), []int{0}
}

// **CloudflareDnsZoneSpec** defines the configuration for creating a Cloudflare DNS Zone.
// This message includes parameters needed to create and manage a DNS zone on Cloudflare,
// such as the zone's domain name, account context, and plan level.
type CloudflareDnsZoneSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The fully qualified domain name of the DNS zone (e.g., "example.com").
	ZoneName string `protobuf:"bytes,1,opt,name=zone_name,json=zoneName,proto3" json:"zone_name,omitempty"`
	// The Cloudflare account identifier under which to create the zone.
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The subscription plan for the zone (e.g., free, pro, business, enterprise).
	// Defaults to the Free plan if unspecified.
	Plan CloudflareDnsZonePlan `protobuf:"varint,3,opt,name=plan,proto3,enum=project.planton.provider.cloudflare.cloudflarednszone.v1.CloudflareDnsZonePlan" json:"plan,omitempty"`
	// Indicates if the zone is created in a paused state (DNS-only mode with no security or performance features).
	// If true, the zone will not receive Cloudflare's proxy/CDN services. Defaults to false.
	Paused bool `protobuf:"varint,4,opt,name=paused,proto3" json:"paused,omitempty"`
	// If true, new DNS records in this zone will default to being proxied (orange-cloud) through Cloudflare.
	// Defaults to false.
	DefaultProxied bool `protobuf:"varint,5,opt,name=default_proxied,json=defaultProxied,proto3" json:"default_proxied,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CloudflareDnsZoneSpec) Reset() {
	*x = CloudflareDnsZoneSpec{}
	mi := &file_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudflareDnsZoneSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudflareDnsZoneSpec) ProtoMessage() {}

func (x *CloudflareDnsZoneSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudflareDnsZoneSpec.ProtoReflect.Descriptor instead.
func (*CloudflareDnsZoneSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *CloudflareDnsZoneSpec) GetZoneName() string {
	if x != nil {
		return x.ZoneName
	}
	return ""
}

func (x *CloudflareDnsZoneSpec) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CloudflareDnsZoneSpec) GetPlan() CloudflareDnsZonePlan {
	if x != nil {
		return x.Plan
	}
	return CloudflareDnsZonePlan_FREE
}

func (x *CloudflareDnsZoneSpec) GetPaused() bool {
	if x != nil {
		return x.Paused
	}
	return false
}

func (x *CloudflareDnsZoneSpec) GetDefaultProxied() bool {
	if x != nil {
		return x.DefaultProxied
	}
	return false
}

var File_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto_rawDesc = "" +
	"\n" +
	"Cproject/planton/provider/cloudflare/cloudflarednszone/v1/spec.proto\x128project.planton.provider.cloudflare.cloudflarednszone.v1\x1a\x1bbuf/validate/validate.proto\"\xb7\x03\n" +
	"\x15CloudflareDnsZoneSpec\x12\xd0\x01\n" +
	"\tzone_name\x18\x01 \x01(\tB\xb2\x01\xbaH\xae\x01\xba\x01\xa7\x01\n" +
	"\tzone_name\x125zone_name must be a valid fully qualified domain name\x1acthis.matches('^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?[.])+(?:[a-z](?:[a-z0-9-]{0,61}[a-z0-9])?)$')\xc8\x01\x01R\bzoneName\x12%\n" +
	"\n" +
	"account_id\x18\x02 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\taccountId\x12c\n" +
	"\x04plan\x18\x03 \x01(\x0e2O.project.planton.provider.cloudflare.cloudflarednszone.v1.CloudflareDnsZonePlanR\x04plan\x12\x16\n" +
	"\x06paused\x18\x04 \x01(\bR\x06paused\x12'\n" +
	"\x0fdefault_proxied\x18\x05 \x01(\bR\x0edefaultProxied*H\n" +
	"\x15CloudflareDnsZonePlan\x12\b\n" +
	"\x04FREE\x10\x00\x12\a\n" +
	"\x03PRO\x10\x01\x12\f\n" +
	"\bBUSINESS\x10\x02\x12\x0e\n" +
	"\n" +
	"ENTERPRISE\x10\x03B\xce\x03\n" +
	"<com.project.planton.provider.cloudflare.cloudflarednszone.v1B\tSpecProtoP\x01Z|github.com/project-planton/project-planton/apis/project/planton/provider/cloudflare/cloudflarednszone/v1;cloudflarednszonev1\xa2\x02\x05PPPCC\xaa\x028Project.Planton.Provider.Cloudflare.Cloudflarednszone.V1\xca\x028Project\\Planton\\Provider\\Cloudflare\\Cloudflarednszone\\V1\xe2\x02DProject\\Planton\\Provider\\Cloudflare\\Cloudflarednszone\\V1\\GPBMetadata\xea\x02=Project::Planton::Provider::Cloudflare::Cloudflarednszone::V1b\x06proto3"

var (
	file_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto_rawDesc), len(file_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto_rawDescData
}

var file_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto_goTypes = []any{
	(CloudflareDnsZonePlan)(0),    // 0: project.planton.provider.cloudflare.cloudflarednszone.v1.CloudflareDnsZonePlan
	(*CloudflareDnsZoneSpec)(nil), // 1: project.planton.provider.cloudflare.cloudflarednszone.v1.CloudflareDnsZoneSpec
}
var file_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto_depIdxs = []int32{
	0, // 0: project.planton.provider.cloudflare.cloudflarednszone.v1.CloudflareDnsZoneSpec.plan:type_name -> project.planton.provider.cloudflare.cloudflarednszone.v1.CloudflareDnsZonePlan
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto_init() }
func file_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto_init() {
	if File_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto_rawDesc), len(file_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto_depIdxs,
		EnumInfos:         file_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto_enumTypes,
		MessageInfos:      file_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto = out.File
	file_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto_goTypes = nil
	file_project_planton_provider_cloudflare_cloudflarednszone_v1_spec_proto_depIdxs = nil
}
