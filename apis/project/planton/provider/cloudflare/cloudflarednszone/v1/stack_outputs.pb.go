// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/cloudflare/cloudflarednszone/v1/stack_outputs.proto

package cloudflarednszonev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CloudflareDnsZoneStackOutputs captures the output information after provisioning a DNS zone on Cloudflare.
type CloudflareDnsZoneStackOutputs struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The domain name of the DNS zone managed on Cloudflare.
	ZoneName string `protobuf:"bytes,1,opt,name=zone_name,json=zoneName,proto3" json:"zone_name,omitempty"`
	// The unique identifier of the DNS zone on Cloudflare (UUID).
	ZoneId string `protobuf:"bytes,2,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	// The list of nameserver addresses for the DNS zone.
	// These are the nameservers that should be set at the domain's registrar (e.g., ns0.cloudflare.com, ns1.cloudflare.com).
	NameServers   []string `protobuf:"bytes,3,rep,name=name_servers,json=nameServers,proto3" json:"name_servers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloudflareDnsZoneStackOutputs) Reset() {
	*x = CloudflareDnsZoneStackOutputs{}
	mi := &file_project_planton_provider_cloudflare_cloudflarednszone_v1_stack_outputs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudflareDnsZoneStackOutputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudflareDnsZoneStackOutputs) ProtoMessage() {}

func (x *CloudflareDnsZoneStackOutputs) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_cloudflare_cloudflarednszone_v1_stack_outputs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudflareDnsZoneStackOutputs.ProtoReflect.Descriptor instead.
func (*CloudflareDnsZoneStackOutputs) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_cloudflare_cloudflarednszone_v1_stack_outputs_proto_rawDescGZIP(), []int{0}
}

func (x *CloudflareDnsZoneStackOutputs) GetZoneName() string {
	if x != nil {
		return x.ZoneName
	}
	return ""
}

func (x *CloudflareDnsZoneStackOutputs) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *CloudflareDnsZoneStackOutputs) GetNameServers() []string {
	if x != nil {
		return x.NameServers
	}
	return nil
}

var File_project_planton_provider_cloudflare_cloudflarednszone_v1_stack_outputs_proto protoreflect.FileDescriptor

const file_project_planton_provider_cloudflare_cloudflarednszone_v1_stack_outputs_proto_rawDesc = "" +
	"\n" +
	"Lproject/planton/provider/cloudflare/cloudflarednszone/v1/stack_outputs.proto\x128project.planton.provider.cloudflare.cloudflarednszone.v1\"x\n" +
	"\x1dCloudflareDnsZoneStackOutputs\x12\x1b\n" +
	"\tzone_name\x18\x01 \x01(\tR\bzoneName\x12\x17\n" +
	"\azone_id\x18\x02 \x01(\tR\x06zoneId\x12!\n" +
	"\fname_servers\x18\x03 \x03(\tR\vnameServersB\xd6\x03\n" +
	"<com.project.planton.provider.cloudflare.cloudflarednszone.v1B\x11StackOutputsProtoP\x01Z|github.com/project-planton/project-planton/apis/project/planton/provider/cloudflare/cloudflarednszone/v1;cloudflarednszonev1\xa2\x02\x05PPPCC\xaa\x028Project.Planton.Provider.Cloudflare.Cloudflarednszone.V1\xca\x028Project\\Planton\\Provider\\Cloudflare\\Cloudflarednszone\\V1\xe2\x02DProject\\Planton\\Provider\\Cloudflare\\Cloudflarednszone\\V1\\GPBMetadata\xea\x02=Project::Planton::Provider::Cloudflare::Cloudflarednszone::V1b\x06proto3"

var (
	file_project_planton_provider_cloudflare_cloudflarednszone_v1_stack_outputs_proto_rawDescOnce sync.Once
	file_project_planton_provider_cloudflare_cloudflarednszone_v1_stack_outputs_proto_rawDescData []byte
)

func file_project_planton_provider_cloudflare_cloudflarednszone_v1_stack_outputs_proto_rawDescGZIP() []byte {
	file_project_planton_provider_cloudflare_cloudflarednszone_v1_stack_outputs_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_cloudflare_cloudflarednszone_v1_stack_outputs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_cloudflare_cloudflarednszone_v1_stack_outputs_proto_rawDesc), len(file_project_planton_provider_cloudflare_cloudflarednszone_v1_stack_outputs_proto_rawDesc)))
	})
	return file_project_planton_provider_cloudflare_cloudflarednszone_v1_stack_outputs_proto_rawDescData
}

var file_project_planton_provider_cloudflare_cloudflarednszone_v1_stack_outputs_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_provider_cloudflare_cloudflarednszone_v1_stack_outputs_proto_goTypes = []any{
	(*CloudflareDnsZoneStackOutputs)(nil), // 0: project.planton.provider.cloudflare.cloudflarednszone.v1.CloudflareDnsZoneStackOutputs
}
var file_project_planton_provider_cloudflare_cloudflarednszone_v1_stack_outputs_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_project_planton_provider_cloudflare_cloudflarednszone_v1_stack_outputs_proto_init() }
func file_project_planton_provider_cloudflare_cloudflarednszone_v1_stack_outputs_proto_init() {
	if File_project_planton_provider_cloudflare_cloudflarednszone_v1_stack_outputs_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_cloudflare_cloudflarednszone_v1_stack_outputs_proto_rawDesc), len(file_project_planton_provider_cloudflare_cloudflarednszone_v1_stack_outputs_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_cloudflare_cloudflarednszone_v1_stack_outputs_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_cloudflare_cloudflarednszone_v1_stack_outputs_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_cloudflare_cloudflarednszone_v1_stack_outputs_proto_msgTypes,
	}.Build()
	File_project_planton_provider_cloudflare_cloudflarednszone_v1_stack_outputs_proto = out.File
	file_project_planton_provider_cloudflare_cloudflarednszone_v1_stack_outputs_proto_goTypes = nil
	file_project_planton_provider_cloudflare_cloudflarednszone_v1_stack_outputs_proto_depIdxs = nil
}
