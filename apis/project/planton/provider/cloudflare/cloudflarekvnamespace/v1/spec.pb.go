// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/cloudflare/cloudflarekvnamespace/v1/spec.proto

package cloudflarekvnamespacev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CloudflareKvNamespaceSpec defines the essential configuration for creating a Workers KV namespace on Cloudflare.
// This follows the 80/20 principle: only the most commonly used fields are exposed to keep the API simple.
type CloudflareKvNamespaceSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A human-readable name for the KV namespace.
	// This name must be unique within the Cloudflare account.
	NamespaceName string `protobuf:"bytes,1,opt,name=namespace_name,json=namespaceName,proto3" json:"namespace_name,omitempty"`
	// (Optional) Default time-to-live for key-value entries, in seconds.
	// If set to 0 or left unset, keys will never expire by default (infinite TTL).
	// If set to a positive value, it should be at least 60 seconds (minimum enforced by Cloudflare for expiring keys).
	TtlSeconds int32 `protobuf:"varint,2,opt,name=ttl_seconds,json=ttlSeconds,proto3" json:"ttl_seconds,omitempty"`
	// (Optional) A short description of the namespace.
	// Useful for documentation or identifying the purpose of this KV store.
	Description   string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloudflareKvNamespaceSpec) Reset() {
	*x = CloudflareKvNamespaceSpec{}
	mi := &file_project_planton_provider_cloudflare_cloudflarekvnamespace_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudflareKvNamespaceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudflareKvNamespaceSpec) ProtoMessage() {}

func (x *CloudflareKvNamespaceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_cloudflare_cloudflarekvnamespace_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudflareKvNamespaceSpec.ProtoReflect.Descriptor instead.
func (*CloudflareKvNamespaceSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_cloudflare_cloudflarekvnamespace_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *CloudflareKvNamespaceSpec) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *CloudflareKvNamespaceSpec) GetTtlSeconds() int32 {
	if x != nil {
		return x.TtlSeconds
	}
	return 0
}

func (x *CloudflareKvNamespaceSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

var File_project_planton_provider_cloudflare_cloudflarekvnamespace_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_cloudflare_cloudflarekvnamespace_v1_spec_proto_rawDesc = "" +
	"\n" +
	"Gproject/planton/provider/cloudflare/cloudflarekvnamespace/v1/spec.proto\x12<project.planton.provider.cloudflare.cloudflarekvnamespace.v1\x1a\x1bbuf/validate/validate.proto\"\xa4\x01\n" +
	"\x19CloudflareKvNamespaceSpec\x121\n" +
	"\x0enamespace_name\x18\x01 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x18@R\rnamespaceName\x12(\n" +
	"\vttl_seconds\x18\x02 \x01(\x05B\a\xbaH\x04\x1a\x02(\x00R\n" +
	"ttlSeconds\x12*\n" +
	"\vdescription\x18\x03 \x01(\tB\b\xbaH\x05r\x03\x18\x80\x02R\vdescriptionB\xeb\x03\n" +
	"@com.project.planton.provider.cloudflare.cloudflarekvnamespace.v1B\tSpecProtoP\x01Z\x84\x01github.com/project-planton/project-planton/apis/project/planton/provider/cloudflare/cloudflarekvnamespace/v1;cloudflarekvnamespacev1\xa2\x02\x05PPPCC\xaa\x02<Project.Planton.Provider.Cloudflare.Cloudflarekvnamespace.V1\xca\x02<Project\\Planton\\Provider\\Cloudflare\\Cloudflarekvnamespace\\V1\xe2\x02HProject\\Planton\\Provider\\Cloudflare\\Cloudflarekvnamespace\\V1\\GPBMetadata\xea\x02AProject::Planton::Provider::Cloudflare::Cloudflarekvnamespace::V1b\x06proto3"

var (
	file_project_planton_provider_cloudflare_cloudflarekvnamespace_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_cloudflare_cloudflarekvnamespace_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_cloudflare_cloudflarekvnamespace_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_cloudflare_cloudflarekvnamespace_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_cloudflare_cloudflarekvnamespace_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_cloudflare_cloudflarekvnamespace_v1_spec_proto_rawDesc), len(file_project_planton_provider_cloudflare_cloudflarekvnamespace_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_cloudflare_cloudflarekvnamespace_v1_spec_proto_rawDescData
}

var file_project_planton_provider_cloudflare_cloudflarekvnamespace_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_provider_cloudflare_cloudflarekvnamespace_v1_spec_proto_goTypes = []any{
	(*CloudflareKvNamespaceSpec)(nil), // 0: project.planton.provider.cloudflare.cloudflarekvnamespace.v1.CloudflareKvNamespaceSpec
}
var file_project_planton_provider_cloudflare_cloudflarekvnamespace_v1_spec_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_project_planton_provider_cloudflare_cloudflarekvnamespace_v1_spec_proto_init() }
func file_project_planton_provider_cloudflare_cloudflarekvnamespace_v1_spec_proto_init() {
	if File_project_planton_provider_cloudflare_cloudflarekvnamespace_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_cloudflare_cloudflarekvnamespace_v1_spec_proto_rawDesc), len(file_project_planton_provider_cloudflare_cloudflarekvnamespace_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_cloudflare_cloudflarekvnamespace_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_cloudflare_cloudflarekvnamespace_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_cloudflare_cloudflarekvnamespace_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_cloudflare_cloudflarekvnamespace_v1_spec_proto = out.File
	file_project_planton_provider_cloudflare_cloudflarekvnamespace_v1_spec_proto_goTypes = nil
	file_project_planton_provider_cloudflare_cloudflarekvnamespace_v1_spec_proto_depIdxs = nil
}
