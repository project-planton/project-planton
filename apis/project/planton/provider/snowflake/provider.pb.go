// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/snowflake/provider.proto

package snowflake

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SnowflakeProviderConfig used for setting up Snowflake Pulumi provider
// These credentials are used to authenticate and configure integration with Snowflake, enabling automated infrastructure management and deployment.
// Typical use cases include creating and managing Snowflake databases, warehouses, and roles using Pulumi scripts.
// For more information on configuring Snowflake credentials with Pulumi, visit:
// https://www.pulumi.com/registry/packages/snowflake/installation-configuration/#configuring-credentials
type SnowflakeProviderConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// snowflake account
	// The Snowflake account identifier, which may include the full account URL or just the account name.
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// snowflake region
	// The Snowflake region, which specifies the location of the Snowflake instance.
	// Example values include 'us-west' or 'eu-central'.
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// snowflake username
	// The username used to authenticate with Snowflake.
	// Ensure the username follows Snowflake's naming conventions.
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// snowflake password
	// The password used to authenticate with Snowflake.
	// It is important to store this password securely and avoid hard-coding it in source code.
	Password      string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SnowflakeProviderConfig) Reset() {
	*x = SnowflakeProviderConfig{}
	mi := &file_project_planton_provider_snowflake_provider_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnowflakeProviderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnowflakeProviderConfig) ProtoMessage() {}

func (x *SnowflakeProviderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_snowflake_provider_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnowflakeProviderConfig.ProtoReflect.Descriptor instead.
func (*SnowflakeProviderConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_snowflake_provider_proto_rawDescGZIP(), []int{0}
}

func (x *SnowflakeProviderConfig) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *SnowflakeProviderConfig) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *SnowflakeProviderConfig) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SnowflakeProviderConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

var File_project_planton_provider_snowflake_provider_proto protoreflect.FileDescriptor

const file_project_planton_provider_snowflake_provider_proto_rawDesc = "" +
	"\n" +
	"1project/planton/provider/snowflake/provider.proto\x12\"project.planton.provider.snowflake\x1a\x1bbuf/validate/validate.proto\"\xa3\x01\n" +
	"\x17SnowflakeProviderConfig\x12 \n" +
	"\aaccount\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\aaccount\x12\x1e\n" +
	"\x06region\x18\x02 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x06region\x12\"\n" +
	"\busername\x18\x03 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\busername\x12\"\n" +
	"\bpassword\x18\x04 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\bpasswordB\xb7\x02\n" +
	"&com.project.planton.provider.snowflakeB\rProviderProtoP\x01ZRgithub.com/project-planton/project-planton/apis/project/planton/provider/snowflake\xa2\x02\x04PPPS\xaa\x02\"Project.Planton.Provider.Snowflake\xca\x02\"Project\\Planton\\Provider\\Snowflake\xe2\x02.Project\\Planton\\Provider\\Snowflake\\GPBMetadata\xea\x02%Project::Planton::Provider::Snowflakeb\x06proto3"

var (
	file_project_planton_provider_snowflake_provider_proto_rawDescOnce sync.Once
	file_project_planton_provider_snowflake_provider_proto_rawDescData []byte
)

func file_project_planton_provider_snowflake_provider_proto_rawDescGZIP() []byte {
	file_project_planton_provider_snowflake_provider_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_snowflake_provider_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_snowflake_provider_proto_rawDesc), len(file_project_planton_provider_snowflake_provider_proto_rawDesc)))
	})
	return file_project_planton_provider_snowflake_provider_proto_rawDescData
}

var file_project_planton_provider_snowflake_provider_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_provider_snowflake_provider_proto_goTypes = []any{
	(*SnowflakeProviderConfig)(nil), // 0: project.planton.provider.snowflake.SnowflakeProviderConfig
}
var file_project_planton_provider_snowflake_provider_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_project_planton_provider_snowflake_provider_proto_init() }
func file_project_planton_provider_snowflake_provider_proto_init() {
	if File_project_planton_provider_snowflake_provider_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_snowflake_provider_proto_rawDesc), len(file_project_planton_provider_snowflake_provider_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_snowflake_provider_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_snowflake_provider_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_snowflake_provider_proto_msgTypes,
	}.Build()
	File_project_planton_provider_snowflake_provider_proto = out.File
	file_project_planton_provider_snowflake_provider_proto_goTypes = nil
	file_project_planton_provider_snowflake_provider_proto_depIdxs = nil
}
