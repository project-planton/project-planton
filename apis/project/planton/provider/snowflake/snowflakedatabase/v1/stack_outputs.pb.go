// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/provider/snowflake/snowflakedatabase/v1/stack_outputs.proto

package snowflakedatabasev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// snowflake-database stack outputs
// https://www.pulumi.com/registry/packages/snowflakecloud/api-docs/kafkacluster/#outputs
type SnowflakeDatabaseStackOutputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The provider-assigned unique ID for this managed resource.
	// https://www.pulumi.com/registry/packages/snowflakecloud/api-docs/kafkacluster/#id_yaml
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The bootstrap endpoint used by Kafka clients to connect to the Kafka cluster. (e.g., SASL_SSL://pkc-00000.us-central1.gcp.snowflake.cloud:9092).
	// https://www.pulumi.com/registry/packages/snowflakecloud/api-docs/kafkacluster/#bootstrapendpoint_yaml
	BootstrapEndpoint string `protobuf:"bytes,2,opt,name=bootstrap_endpoint,json=bootstrapEndpoint,proto3" json:"bootstrap_endpoint,omitempty"`
	// The Snowflake Resource Name of the Kafka cluster,
	// for example, crn://snowflake.cloud/organization=1111aaaa-11aa-11aa-11aa-111111aaaaaa/environment=env-abc123/cloud-cluster=lkc-abc123.
	// https://www.pulumi.com/registry/packages/snowflakecloud/api-docs/kafkacluster/#rbaccrn_yaml
	Crn string `protobuf:"bytes,3,opt,name=crn,proto3" json:"crn,omitempty"`
	// The REST endpoint of the Kafka cluster (e.g., https://pkc-00000.us-central1.gcp.snowflake.cloud:443).
	// https://www.pulumi.com/registry/packages/snowflakecloud/api-docs/kafkacluster/#restendpoint_yaml
	RestEndpoint string `protobuf:"bytes,4,opt,name=rest_endpoint,json=restEndpoint,proto3" json:"rest_endpoint,omitempty"`
}

func (x *SnowflakeDatabaseStackOutputs) Reset() {
	*x = SnowflakeDatabaseStackOutputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_snowflake_snowflakedatabase_v1_stack_outputs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnowflakeDatabaseStackOutputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnowflakeDatabaseStackOutputs) ProtoMessage() {}

func (x *SnowflakeDatabaseStackOutputs) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_snowflake_snowflakedatabase_v1_stack_outputs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnowflakeDatabaseStackOutputs.ProtoReflect.Descriptor instead.
func (*SnowflakeDatabaseStackOutputs) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_snowflake_snowflakedatabase_v1_stack_outputs_proto_rawDescGZIP(), []int{0}
}

func (x *SnowflakeDatabaseStackOutputs) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SnowflakeDatabaseStackOutputs) GetBootstrapEndpoint() string {
	if x != nil {
		return x.BootstrapEndpoint
	}
	return ""
}

func (x *SnowflakeDatabaseStackOutputs) GetCrn() string {
	if x != nil {
		return x.Crn
	}
	return ""
}

func (x *SnowflakeDatabaseStackOutputs) GetRestEndpoint() string {
	if x != nil {
		return x.RestEndpoint
	}
	return ""
}

var File_project_planton_provider_snowflake_snowflakedatabase_v1_stack_outputs_proto protoreflect.FileDescriptor

var file_project_planton_provider_snowflake_snowflakedatabase_v1_stack_outputs_proto_rawDesc = []byte{
	0x0a, 0x4b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x73, 0x6e, 0x6f, 0x77, 0x66,
	0x6c, 0x61, 0x6b, 0x65, 0x2f, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x37, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b,
	0x65, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x22, 0x95, 0x01, 0x0a, 0x1d, 0x53, 0x6e, 0x6f, 0x77, 0x66,
	0x6c, 0x61, 0x6b, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x62, 0x6f, 0x6f, 0x74,
	0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x72, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x72, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0xd0,
	0x03, 0x0a, 0x3b, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c,
	0x61, 0x6b, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x11,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x7b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x73, 0x6e,
	0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x2f, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b,
	0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x6e, 0x6f,
	0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x76, 0x31,
	0xa2, 0x02, 0x05, 0x50, 0x50, 0x50, 0x53, 0x53, 0xaa, 0x02, 0x37, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x2e, 0x53, 0x6e,
	0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x37, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x53, 0x6e,
	0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x5c, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b,
	0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x43, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b,
	0x65, 0x5c, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x3c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x3a, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3a,
	0x3a, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x3a, 0x3a, 0x53, 0x6e, 0x6f, 0x77,
	0x66, 0x6c, 0x61, 0x6b, 0x65, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_project_planton_provider_snowflake_snowflakedatabase_v1_stack_outputs_proto_rawDescOnce sync.Once
	file_project_planton_provider_snowflake_snowflakedatabase_v1_stack_outputs_proto_rawDescData = file_project_planton_provider_snowflake_snowflakedatabase_v1_stack_outputs_proto_rawDesc
)

func file_project_planton_provider_snowflake_snowflakedatabase_v1_stack_outputs_proto_rawDescGZIP() []byte {
	file_project_planton_provider_snowflake_snowflakedatabase_v1_stack_outputs_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_snowflake_snowflakedatabase_v1_stack_outputs_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_provider_snowflake_snowflakedatabase_v1_stack_outputs_proto_rawDescData)
	})
	return file_project_planton_provider_snowflake_snowflakedatabase_v1_stack_outputs_proto_rawDescData
}

var file_project_planton_provider_snowflake_snowflakedatabase_v1_stack_outputs_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_provider_snowflake_snowflakedatabase_v1_stack_outputs_proto_goTypes = []any{
	(*SnowflakeDatabaseStackOutputs)(nil), // 0: project.planton.provider.snowflake.snowflakedatabase.v1.SnowflakeDatabaseStackOutputs
}
var file_project_planton_provider_snowflake_snowflakedatabase_v1_stack_outputs_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_project_planton_provider_snowflake_snowflakedatabase_v1_stack_outputs_proto_init() }
func file_project_planton_provider_snowflake_snowflakedatabase_v1_stack_outputs_proto_init() {
	if File_project_planton_provider_snowflake_snowflakedatabase_v1_stack_outputs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_provider_snowflake_snowflakedatabase_v1_stack_outputs_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SnowflakeDatabaseStackOutputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_provider_snowflake_snowflakedatabase_v1_stack_outputs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_snowflake_snowflakedatabase_v1_stack_outputs_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_snowflake_snowflakedatabase_v1_stack_outputs_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_snowflake_snowflakedatabase_v1_stack_outputs_proto_msgTypes,
	}.Build()
	File_project_planton_provider_snowflake_snowflakedatabase_v1_stack_outputs_proto = out.File
	file_project_planton_provider_snowflake_snowflakedatabase_v1_stack_outputs_proto_rawDesc = nil
	file_project_planton_provider_snowflake_snowflakedatabase_v1_stack_outputs_proto_goTypes = nil
	file_project_planton_provider_snowflake_snowflakedatabase_v1_stack_outputs_proto_depIdxs = nil
}
