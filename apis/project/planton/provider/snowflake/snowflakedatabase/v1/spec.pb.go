// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/snowflake/snowflakedatabase/v1/spec.proto

package snowflakedatabasev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// snowflake-database spec
type SnowflakeDatabaseSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The database parameter that specifies the default catalog to use for Iceberg tables
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#catalog_yaml
	// https://docs.snowflake.com/en/sql-reference/parameters#catalog
	Catalog string `protobuf:"bytes,1,opt,name=catalog,proto3" json:"catalog,omitempty"`
	// Specifies a comment for the database
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#comment_yaml
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	// Specifies the number of days for which Time Travel actions (CLONE and UNDROP) can be performed on the database,
	// as well as specifying the default Time Travel retention time for all schemas created in the database.
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#dataretentiontimeindays_yaml
	// https://docs.snowflake.com/en/user-guide/data-time-travel
	DataRetentionTimeInDays int32 `protobuf:"varint,3,opt,name=data_retention_time_in_days,json=dataRetentionTimeInDays,proto3" json:"data_retention_time_in_days,omitempty"`
	// Specifies a default collation specification for all schemas and tables added to the database.
	// It can be overridden on schema or table level.
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#defaultddlcollation_yaml
	// https://docs.snowflake.com/en/sql-reference/collation#label-collation-specification
	DefaultDdlCollation string `protobuf:"bytes,4,opt,name=default_ddl_collation,json=defaultDdlCollation,proto3" json:"default_ddl_collation,omitempty"`
	// Specifies whether to drop public schema on creation or not. Modifying the parameter after database is
	// already created won't have any effect.
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#droppublicschemaoncreation_yaml
	DropPublicSchemaOnCreation bool `protobuf:"varint,5,opt,name=drop_public_schema_on_creation,json=dropPublicSchemaOnCreation,proto3" json:"drop_public_schema_on_creation,omitempty"`
	// If true, enables stdout/stderr fast path logging for anonymous stored procedures.
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#enableconsoleoutput_yaml
	EnableConsoleOutput bool `protobuf:"varint,6,opt,name=enable_console_output,json=enableConsoleOutput,proto3" json:"enable_console_output,omitempty"`
	// The database parameter that specifies the default external volume to use for Iceberg tables
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#externalvolume_yaml
	// https://docs.snowflake.com/en/sql-reference/parameters#external-volume
	ExternalVolume string `protobuf:"bytes,7,opt,name=external_volume,json=externalVolume,proto3" json:"external_volume,omitempty"`
	// Specifies the database as transient. Transient databases do not have a Fail-safe period so they do not incur
	// additional storage costs once they leave Time Travel; however, this means they are also not protected by
	// Fail-safe in the event of a data loss.
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#istransient_yaml
	IsTransient bool `protobuf:"varint,8,opt,name=is_transient,json=isTransient,proto3" json:"is_transient,omitempty"`
	// Specifies the severity level of messages that should be ingested and made available in the active event table.
	// Valid options are: [TRACE DEBUG INFO WARN ERROR FATAL OFF]. Messages at the specified level (and at more severe levels) are ingested.
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#loglevel_yaml
	// https://docs.snowflake.com/en/sql-reference/parameters.html#label-log-level
	LogLevel string `protobuf:"bytes,9,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`
	// Object parameter that specifies the maximum number of days for which Snowflake can extend the data retention period
	// for tables in the database to prevent streams on the tables from becoming stale.
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#maxdataextensiontimeindays_yaml
	// https://docs.snowflake.com/en/sql-reference/parameters.html#label-max-data-extension-time-in-days
	MaxDataExtensionTimeInDays int32 `protobuf:"varint,10,opt,name=max_data_extension_time_in_days,json=maxDataExtensionTimeInDays,proto3" json:"max_data_extension_time_in_days,omitempty"`
	// Specifies the identifier for the database; must be unique for your account. As a best practice for Database
	// Replication and Failover, it is recommended to give each secondary database the same name as its primary database.
	// This practice supports referencing fully-qualified objects (i.e. '\n\n.\n\n.\n\n') by other objects in the
	// same database, such as querying a fully-qualified table name in a view. If a secondary database has a
	// different name from the primary database, then these object references would break in the secondary database.
	// Due to technical limitations (read more here), avoid using the following characters: |, ., (, ), "
	Name string `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	// If true, the case of quoted identifiers is ignored
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#quotedidentifiersignorecase_yaml
	// https://docs.snowflake.com/en/sql-reference/parameters#quoted-identifiers-ignore-case
	QuotedIdentifiersIgnoreCase bool `protobuf:"varint,12,opt,name=quoted_identifiers_ignore_case,json=quotedIdentifiersIgnoreCase,proto3" json:"quoted_identifiers_ignore_case,omitempty"`
	// Specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (ï¿½) in query results
	// for an Iceberg table. You can only set this parameter for tables that use an external Iceberg catalog
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#replaceinvalidcharacters_yaml
	// https://docs.snowflake.com/en/sql-reference/parameters#replace-invalid-characters
	ReplaceInvalidCharacters bool `protobuf:"varint,13,opt,name=replace_invalid_characters,json=replaceInvalidCharacters,proto3" json:"replace_invalid_characters,omitempty"`
	// The storage serialization policy for Iceberg tables that use Snowflake as the catalog.
	// Valid options are: [COMPATIBLE OPTIMIZED]. COMPATIBLE: Snowflake performs encoding and compression of data
	// files that ensures interoperability with third-party compute engines. OPTIMIZED: Snowflake performs encoding and
	// compression of data files that ensures the best table performance within Snowflake.
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#storageserializationpolicy_yaml
	// https://docs.snowflake.com/en/sql-reference/parameters#storage-serialization-policy
	StorageSerializationPolicy string `protobuf:"bytes,14,opt,name=storage_serialization_policy,json=storageSerializationPolicy,proto3" json:"storage_serialization_policy,omitempty"`
	// How many times a task must fail in a row before it is automatically suspended. 0 disables auto-suspending.
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#suspendtaskafternumfailures_yaml
	// https://docs.snowflake.com/en/sql-reference/parameters#suspend-task-after-num-failures
	SuspendTaskAfterNumFailures int32 `protobuf:"varint,15,opt,name=suspend_task_after_num_failures,json=suspendTaskAfterNumFailures,proto3" json:"suspend_task_after_num_failures,omitempty"`
	// Maximum automatic retries allowed for a user task
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#taskautoretryattempts_yaml
	// https://docs.snowflake.com/en/sql-reference/parameters#task-auto-retry-attempts
	TaskAutoRetryAttempts int32 `protobuf:"varint,16,opt,name=task_auto_retry_attempts,json=taskAutoRetryAttempts,proto3" json:"task_auto_retry_attempts,omitempty"`
	// Controls how trace events are ingested into the event table. Valid options are: [ALWAYS ON*EVENT OFF]
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#tracelevel_yaml
	// https://docs.snowflake.com/en/sql-reference/parameters.html#label-trace-level
	TraceLevel string `protobuf:"bytes,17,opt,name=trace_level,json=traceLevel,proto3" json:"trace_level,omitempty"`
	// snowflake database user task
	UserTask      *SnowflakeDatabaseUserTask `protobuf:"bytes,18,opt,name=user_task,json=userTask,proto3" json:"user_task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SnowflakeDatabaseSpec) Reset() {
	*x = SnowflakeDatabaseSpec{}
	mi := &file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnowflakeDatabaseSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnowflakeDatabaseSpec) ProtoMessage() {}

func (x *SnowflakeDatabaseSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnowflakeDatabaseSpec.ProtoReflect.Descriptor instead.
func (*SnowflakeDatabaseSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *SnowflakeDatabaseSpec) GetCatalog() string {
	if x != nil {
		return x.Catalog
	}
	return ""
}

func (x *SnowflakeDatabaseSpec) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SnowflakeDatabaseSpec) GetDataRetentionTimeInDays() int32 {
	if x != nil {
		return x.DataRetentionTimeInDays
	}
	return 0
}

func (x *SnowflakeDatabaseSpec) GetDefaultDdlCollation() string {
	if x != nil {
		return x.DefaultDdlCollation
	}
	return ""
}

func (x *SnowflakeDatabaseSpec) GetDropPublicSchemaOnCreation() bool {
	if x != nil {
		return x.DropPublicSchemaOnCreation
	}
	return false
}

func (x *SnowflakeDatabaseSpec) GetEnableConsoleOutput() bool {
	if x != nil {
		return x.EnableConsoleOutput
	}
	return false
}

func (x *SnowflakeDatabaseSpec) GetExternalVolume() string {
	if x != nil {
		return x.ExternalVolume
	}
	return ""
}

func (x *SnowflakeDatabaseSpec) GetIsTransient() bool {
	if x != nil {
		return x.IsTransient
	}
	return false
}

func (x *SnowflakeDatabaseSpec) GetLogLevel() string {
	if x != nil {
		return x.LogLevel
	}
	return ""
}

func (x *SnowflakeDatabaseSpec) GetMaxDataExtensionTimeInDays() int32 {
	if x != nil {
		return x.MaxDataExtensionTimeInDays
	}
	return 0
}

func (x *SnowflakeDatabaseSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SnowflakeDatabaseSpec) GetQuotedIdentifiersIgnoreCase() bool {
	if x != nil {
		return x.QuotedIdentifiersIgnoreCase
	}
	return false
}

func (x *SnowflakeDatabaseSpec) GetReplaceInvalidCharacters() bool {
	if x != nil {
		return x.ReplaceInvalidCharacters
	}
	return false
}

func (x *SnowflakeDatabaseSpec) GetStorageSerializationPolicy() string {
	if x != nil {
		return x.StorageSerializationPolicy
	}
	return ""
}

func (x *SnowflakeDatabaseSpec) GetSuspendTaskAfterNumFailures() int32 {
	if x != nil {
		return x.SuspendTaskAfterNumFailures
	}
	return 0
}

func (x *SnowflakeDatabaseSpec) GetTaskAutoRetryAttempts() int32 {
	if x != nil {
		return x.TaskAutoRetryAttempts
	}
	return 0
}

func (x *SnowflakeDatabaseSpec) GetTraceLevel() string {
	if x != nil {
		return x.TraceLevel
	}
	return ""
}

func (x *SnowflakeDatabaseSpec) GetUserTask() *SnowflakeDatabaseUserTask {
	if x != nil {
		return x.UserTask
	}
	return nil
}

// snowflake database user task
type SnowflakeDatabaseUserTask struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The initial size of warehouse to use for managed warehouses in the absence of history.
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#usertaskmanagedinitialwarehousesize_yaml
	// https://docs.snowflake.com/en/sql-reference/parameters#user-task-managed-initial-warehouse-size
	ManagedInitialWarehouseSize string `protobuf:"bytes,1,opt,name=managed_initial_warehouse_size,json=managedInitialWarehouseSize,proto3" json:"managed_initial_warehouse_size,omitempty"`
	// Minimum amount of time between Triggered Task executions in seconds.
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#usertaskminimumtriggerintervalinseconds_yaml
	MinimumTriggerIntervalInSeconds int32 `protobuf:"varint,2,opt,name=minimum_trigger_interval_in_seconds,json=minimumTriggerIntervalInSeconds,proto3" json:"minimum_trigger_interval_in_seconds,omitempty"`
	// User task execution timeout in milliseconds
	// https://www.pulumi.com/registry/packages/snowflake/api-docs/database/#usertasktimeoutms_yaml
	// https://docs.snowflake.com/en/sql-reference/parameters#user-task-timeout-ms
	TimeoutMs     int32 `protobuf:"varint,3,opt,name=timeout_ms,json=timeoutMs,proto3" json:"timeout_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SnowflakeDatabaseUserTask) Reset() {
	*x = SnowflakeDatabaseUserTask{}
	mi := &file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnowflakeDatabaseUserTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnowflakeDatabaseUserTask) ProtoMessage() {}

func (x *SnowflakeDatabaseUserTask) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnowflakeDatabaseUserTask.ProtoReflect.Descriptor instead.
func (*SnowflakeDatabaseUserTask) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *SnowflakeDatabaseUserTask) GetManagedInitialWarehouseSize() string {
	if x != nil {
		return x.ManagedInitialWarehouseSize
	}
	return ""
}

func (x *SnowflakeDatabaseUserTask) GetMinimumTriggerIntervalInSeconds() int32 {
	if x != nil {
		return x.MinimumTriggerIntervalInSeconds
	}
	return 0
}

func (x *SnowflakeDatabaseUserTask) GetTimeoutMs() int32 {
	if x != nil {
		return x.TimeoutMs
	}
	return 0
}

var File_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_rawDesc = "" +
	"\n" +
	"Bproject/planton/provider/snowflake/snowflakedatabase/v1/spec.proto\x127project.planton.provider.snowflake.snowflakedatabase.v1\"\xcd\a\n" +
	"\x15SnowflakeDatabaseSpec\x12\x18\n" +
	"\acatalog\x18\x01 \x01(\tR\acatalog\x12\x18\n" +
	"\acomment\x18\x02 \x01(\tR\acomment\x12<\n" +
	"\x1bdata_retention_time_in_days\x18\x03 \x01(\x05R\x17dataRetentionTimeInDays\x122\n" +
	"\x15default_ddl_collation\x18\x04 \x01(\tR\x13defaultDdlCollation\x12B\n" +
	"\x1edrop_public_schema_on_creation\x18\x05 \x01(\bR\x1adropPublicSchemaOnCreation\x122\n" +
	"\x15enable_console_output\x18\x06 \x01(\bR\x13enableConsoleOutput\x12'\n" +
	"\x0fexternal_volume\x18\a \x01(\tR\x0eexternalVolume\x12!\n" +
	"\fis_transient\x18\b \x01(\bR\visTransient\x12\x1b\n" +
	"\tlog_level\x18\t \x01(\tR\blogLevel\x12C\n" +
	"\x1fmax_data_extension_time_in_days\x18\n" +
	" \x01(\x05R\x1amaxDataExtensionTimeInDays\x12\x12\n" +
	"\x04name\x18\v \x01(\tR\x04name\x12C\n" +
	"\x1equoted_identifiers_ignore_case\x18\f \x01(\bR\x1bquotedIdentifiersIgnoreCase\x12<\n" +
	"\x1areplace_invalid_characters\x18\r \x01(\bR\x18replaceInvalidCharacters\x12@\n" +
	"\x1cstorage_serialization_policy\x18\x0e \x01(\tR\x1astorageSerializationPolicy\x12D\n" +
	"\x1fsuspend_task_after_num_failures\x18\x0f \x01(\x05R\x1bsuspendTaskAfterNumFailures\x127\n" +
	"\x18task_auto_retry_attempts\x18\x10 \x01(\x05R\x15taskAutoRetryAttempts\x12\x1f\n" +
	"\vtrace_level\x18\x11 \x01(\tR\n" +
	"traceLevel\x12o\n" +
	"\tuser_task\x18\x12 \x01(\v2R.project.planton.provider.snowflake.snowflakedatabase.v1.SnowflakeDatabaseUserTaskR\buserTask\"\xcd\x01\n" +
	"\x19SnowflakeDatabaseUserTask\x12C\n" +
	"\x1emanaged_initial_warehouse_size\x18\x01 \x01(\tR\x1bmanagedInitialWarehouseSize\x12L\n" +
	"#minimum_trigger_interval_in_seconds\x18\x02 \x01(\x05R\x1fminimumTriggerIntervalInSeconds\x12\x1d\n" +
	"\n" +
	"timeout_ms\x18\x03 \x01(\x05R\ttimeoutMsB\xc8\x03\n" +
	";com.project.planton.provider.snowflake.snowflakedatabase.v1B\tSpecProtoP\x01Z{github.com/project-planton/project-planton/apis/project/planton/provider/snowflake/snowflakedatabase/v1;snowflakedatabasev1\xa2\x02\x05PPPSS\xaa\x027Project.Planton.Provider.Snowflake.Snowflakedatabase.V1\xca\x027Project\\Planton\\Provider\\Snowflake\\Snowflakedatabase\\V1\xe2\x02CProject\\Planton\\Provider\\Snowflake\\Snowflakedatabase\\V1\\GPBMetadata\xea\x02<Project::Planton::Provider::Snowflake::Snowflakedatabase::V1b\x06proto3"

var (
	file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_rawDesc), len(file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_rawDescData
}

var file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_goTypes = []any{
	(*SnowflakeDatabaseSpec)(nil),     // 0: project.planton.provider.snowflake.snowflakedatabase.v1.SnowflakeDatabaseSpec
	(*SnowflakeDatabaseUserTask)(nil), // 1: project.planton.provider.snowflake.snowflakedatabase.v1.SnowflakeDatabaseUserTask
}
var file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.snowflake.snowflakedatabase.v1.SnowflakeDatabaseSpec.user_task:type_name -> project.planton.provider.snowflake.snowflakedatabase.v1.SnowflakeDatabaseUserTask
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_init() }
func file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_init() {
	if File_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_rawDesc), len(file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto = out.File
	file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_goTypes = nil
	file_project_planton_provider_snowflake_snowflakedatabase_v1_spec_proto_depIdxs = nil
}
