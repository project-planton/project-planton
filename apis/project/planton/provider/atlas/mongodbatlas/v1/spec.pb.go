// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/provider/atlas/mongodbatlas/v1/spec.proto

package mongodbatlasv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// mongodb-atlas spec
type MongodbAtlasSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cluster-config
	ClusterConfig *MongodbAtlasClusterConfig `protobuf:"bytes,1,opt,name=cluster_config,json=clusterConfig,proto3" json:"cluster_config,omitempty"`
}

func (x *MongodbAtlasSpec) Reset() {
	*x = MongodbAtlasSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_atlas_mongodbatlas_v1_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongodbAtlasSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbAtlasSpec) ProtoMessage() {}

func (x *MongodbAtlasSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_atlas_mongodbatlas_v1_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbAtlasSpec.ProtoReflect.Descriptor instead.
func (*MongodbAtlasSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_atlas_mongodbatlas_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *MongodbAtlasSpec) GetClusterConfig() *MongodbAtlasClusterConfig {
	if x != nil {
		return x.ClusterConfig
	}
	return nil
}

// mongodb-atlas cluster config
type MongodbAtlasClusterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID for the project to create the database user.
	// https://www.pulumi.com/registry/packages/mongodbatlas/api-docs/cluster/#projectid_yaml
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Specifies the type of the cluster that you want to modify. You cannot convert a sharded cluster deployment to a replica set deployment.
	// Accepted values include:
	// REPLICASET Replica set
	// SHARDED Sharded cluster
	// GEOSHARDED Global Cluster
	// https://www.pulumi.com/registry/packages/mongodbatlas/api-docs/cluster/#clustertype_yaml
	ClusterType string `protobuf:"bytes,2,opt,name=cluster_type,json=clusterType,proto3" json:"cluster_type,omitempty"`
	// Number of electable nodes for Atlas to deploy to the region. Electable nodes can become the primary and can facilitate local reads.
	// The total number of electableNodes across all replication spec regions must total 3, 5, or 7.
	// Specify 0 if you do not want any electable nodes in the region.
	// You cannot create electable nodes in a region if priority is 0.
	// https://www.pulumi.com/registry/packages/mongodbatlas/api-docs/cluster/#electablenodes_yaml
	ElectableNodes int32 `protobuf:"varint,3,opt,name=electable_nodes,json=electableNodes,proto3" json:"electable_nodes,omitempty"`
	// Election priority of the region. For regions with only read-only nodes, set this value to 0.
	// For regions where electable_nodes is at least 1, each region must have a priority of exactly one (1) less than the previous region. The first region must have a priority of 7. The lowest possible priority is 1.
	// The priority 7 region identifies the Preferred Region of the cluster. Atlas places the primary node in the Preferred Region. Priorities 1 through 7 are exclusive - no more than one region per cluster can be assigned a given priority.
	// Example: If you have three regions, their priorities would be 7, 6, and 5 respectively. If you added two more regions for supporting electable nodes, the priorities of those regions would be 4 and 3 respectively.
	// https://www.pulumi.com/registry/packages/mongodbatlas/api-docs/cluster/#priority_yaml
	Priority int32 `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	// Number of read-only nodes for Atlas to deploy to the region. Read-only nodes can never become the primary, but can facilitate local-reads. Specify 0 if you do not want any read-only nodes in the region.
	// https://www.pulumi.com/registry/packages/mongodbatlas/api-docs/cluster/#readonlynodes_yaml
	ReadOnlyNodes int32 `protobuf:"varint,5,opt,name=read_only_nodes,json=readOnlyNodes,proto3" json:"read_only_nodes,omitempty"`
	// enable or disable cloud backup
	CloudBackup bool `protobuf:"varint,6,opt,name=cloud_backup,json=cloudBackup,proto3" json:"cloud_backup,omitempty"`
	// auto scaling disk db enabled
	AutoScalingDiskGbEnabled bool `protobuf:"varint,7,opt,name=auto_scaling_disk_gb_enabled,json=autoScalingDiskGbEnabled,proto3" json:"auto_scaling_disk_gb_enabled,omitempty"`
	// Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: 4.4, 5.0, 6.0 or 7.0.
	// If omitted, Atlas deploys a cluster that runs MongoDB 7.0.
	// If provider_instance_size_name: M0, M2 or M5, Atlas deploys MongoDB 5.0.
	// Atlas always deploys the cluster with the latest stable release of the specified version
	// https://www.pulumi.com/registry/packages/mongodbatlas/api-docs/cluster/#mongodbmajorversion_yaml
	MongoDbMajorVersion string `protobuf:"bytes,8,opt,name=mongo_db_major_version,json=mongoDbMajorVersion,proto3" json:"mongo_db_major_version,omitempty"`
	// Cloud service provider on which the servers are provisioned.
	//
	// The possible values are:
	//
	// AWS - Amazon AWS
	// GCP - Google Cloud Platform
	// AZURE - Microsoft Azure
	// TENANT - A multi-tenant deployment on one of the supported cloud service providers. Only valid when providerSettings.instanceSizeName is either M2 or M5.
	// https://www.pulumi.com/registry/packages/mongodbatlas/api-docs/cluster/#providername_yaml
	ProviderName string `protobuf:"bytes,9,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	// https://www.pulumi.com/registry/packages/mongodbatlas/api-docs/cluster/#providerinstancesizename_yaml
	// Atlas provides different instance sizes, each with a default storage capacity and RAM size.
	// The instance size you select is used for all the data-bearing servers in your cluster.
	// https://www.pulumi.com/registry/packages/mongodbatlas/api-docs/cluster/#providerinstancesizename_yaml
	ProviderInstanceSizeName string `protobuf:"bytes,10,opt,name=provider_instance_size_name,json=providerInstanceSizeName,proto3" json:"provider_instance_size_name,omitempty"`
}

func (x *MongodbAtlasClusterConfig) Reset() {
	*x = MongodbAtlasClusterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_provider_atlas_mongodbatlas_v1_spec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MongodbAtlasClusterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbAtlasClusterConfig) ProtoMessage() {}

func (x *MongodbAtlasClusterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_atlas_mongodbatlas_v1_spec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbAtlasClusterConfig.ProtoReflect.Descriptor instead.
func (*MongodbAtlasClusterConfig) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_atlas_mongodbatlas_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *MongodbAtlasClusterConfig) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *MongodbAtlasClusterConfig) GetClusterType() string {
	if x != nil {
		return x.ClusterType
	}
	return ""
}

func (x *MongodbAtlasClusterConfig) GetElectableNodes() int32 {
	if x != nil {
		return x.ElectableNodes
	}
	return 0
}

func (x *MongodbAtlasClusterConfig) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *MongodbAtlasClusterConfig) GetReadOnlyNodes() int32 {
	if x != nil {
		return x.ReadOnlyNodes
	}
	return 0
}

func (x *MongodbAtlasClusterConfig) GetCloudBackup() bool {
	if x != nil {
		return x.CloudBackup
	}
	return false
}

func (x *MongodbAtlasClusterConfig) GetAutoScalingDiskGbEnabled() bool {
	if x != nil {
		return x.AutoScalingDiskGbEnabled
	}
	return false
}

func (x *MongodbAtlasClusterConfig) GetMongoDbMajorVersion() string {
	if x != nil {
		return x.MongoDbMajorVersion
	}
	return ""
}

func (x *MongodbAtlasClusterConfig) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *MongodbAtlasClusterConfig) GetProviderInstanceSizeName() string {
	if x != nil {
		return x.ProviderInstanceSizeName
	}
	return ""
}

var File_project_planton_provider_atlas_mongodbatlas_v1_spec_proto protoreflect.FileDescriptor

var file_project_planton_provider_atlas_mongodbatlas_v1_spec_proto_rawDesc = []byte{
	0x0a, 0x39, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x74, 0x6c, 0x61, 0x73,
	0x2f, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x67,
	0x6f, 0x64, 0x62, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x84, 0x01, 0x0a, 0x10, 0x4d, 0x6f, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x41, 0x74, 0x6c, 0x61, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x70, 0x0a,
	0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x41, 0x74,
	0x6c, 0x61, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0xc6, 0x03, 0x0a, 0x19, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x41, 0x74, 0x6c, 0x61, 0x73,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72,
	0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12,
	0x3e, 0x0a, 0x1c, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x67, 0x62, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x44, 0x69, 0x73, 0x6b, 0x47, 0x62, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x33, 0x0a, 0x16, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x5f, 0x64, 0x62, 0x5f, 0x6d, 0x61, 0x6a, 0x6f,
	0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x44, 0x62, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x8d, 0x03, 0x0a, 0x32, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e,
	0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x42,
	0x09, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x6d, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2f, 0x6d, 0x6f, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x6d, 0x6f, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x61, 0x74, 0x6c, 0x61, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x05, 0x50, 0x50,
	0x50, 0x41, 0x4d, 0xaa, 0x02, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x41,
	0x74, 0x6c, 0x61, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x61, 0x74, 0x6c, 0x61,
	0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c,
	0x41, 0x74, 0x6c, 0x61, 0x73, 0x5c, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x3a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5c, 0x41, 0x74, 0x6c, 0x61, 0x73, 0x5c, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x61, 0x74,
	0x6c, 0x61, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x33, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x3a, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3a,
	0x3a, 0x41, 0x74, 0x6c, 0x61, 0x73, 0x3a, 0x3a, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x61,
	0x74, 0x6c, 0x61, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_project_planton_provider_atlas_mongodbatlas_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_atlas_mongodbatlas_v1_spec_proto_rawDescData = file_project_planton_provider_atlas_mongodbatlas_v1_spec_proto_rawDesc
)

func file_project_planton_provider_atlas_mongodbatlas_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_atlas_mongodbatlas_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_atlas_mongodbatlas_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_provider_atlas_mongodbatlas_v1_spec_proto_rawDescData)
	})
	return file_project_planton_provider_atlas_mongodbatlas_v1_spec_proto_rawDescData
}

var file_project_planton_provider_atlas_mongodbatlas_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_project_planton_provider_atlas_mongodbatlas_v1_spec_proto_goTypes = []any{
	(*MongodbAtlasSpec)(nil),          // 0: project.planton.provider.atlas.mongodbatlas.v1.MongodbAtlasSpec
	(*MongodbAtlasClusterConfig)(nil), // 1: project.planton.provider.atlas.mongodbatlas.v1.MongodbAtlasClusterConfig
}
var file_project_planton_provider_atlas_mongodbatlas_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.atlas.mongodbatlas.v1.MongodbAtlasSpec.cluster_config:type_name -> project.planton.provider.atlas.mongodbatlas.v1.MongodbAtlasClusterConfig
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_project_planton_provider_atlas_mongodbatlas_v1_spec_proto_init() }
func file_project_planton_provider_atlas_mongodbatlas_v1_spec_proto_init() {
	if File_project_planton_provider_atlas_mongodbatlas_v1_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_provider_atlas_mongodbatlas_v1_spec_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*MongodbAtlasSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_provider_atlas_mongodbatlas_v1_spec_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*MongodbAtlasClusterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_provider_atlas_mongodbatlas_v1_spec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_atlas_mongodbatlas_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_atlas_mongodbatlas_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_atlas_mongodbatlas_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_atlas_mongodbatlas_v1_spec_proto = out.File
	file_project_planton_provider_atlas_mongodbatlas_v1_spec_proto_rawDesc = nil
	file_project_planton_provider_atlas_mongodbatlas_v1_spec_proto_goTypes = nil
	file_project_planton_provider_atlas_mongodbatlas_v1_spec_proto_depIdxs = nil
}
