syntax = "proto3";

package project.planton.provider.digitalocean.digitaloceankubernetescluster.v1;

import "buf/validate/validate.proto";
import "project/planton/provider/digitalocean/region.proto";
import "project/planton/shared/cloudresourcekind/cloud_resource_kind.proto";
import "project/planton/shared/foreignkey/v1/foreign_key.proto";
import "project/planton/shared/options/options.proto";

// DigitalOceanKubernetesClusterSpec defines the specification for creating a managed Kubernetes cluster on DigitalOcean.
// It focuses on essential parameters for a production-grade cluster, following the 80/20 principle to expose only the most commonly used settings.
message DigitalOceanKubernetesClusterSpec {
  // The name of the Kubernetes cluster. This will be the cluster's identifier in DigitalOcean.
  // Constraints: Must be unique per account. (A maximum length or character set may be enforced by DigitalOcean, e.g., alphanumeric and hyphens.)
  string cluster_name = 1 [
    (buf.validate.field).required = true
  ];

  // The DigitalOcean region where the cluster will be created.
  // Determines where the cluster's control plane and nodes are provisioned.
  DigitalOceanRegion region = 2 [
    (buf.validate.field).required = true
  ];

  // The Kubernetes version to use for the cluster (semantic versioning).
  // Must be a supported version on DigitalOcean (e.g., 1.22+).
  // Example: "1.26.3"
  string kubernetes_version = 3 [
    (buf.validate.field).required = true
  ];

  // Reference to the DigitalOcean VPC where the cluster's control plane will reside.
  // This must be an existing VPC in the same region. Only the VPC's name is needed; the system will resolve it to the VPC ID.
  project.planton.shared.foreignkey.v1.StringValueOrRef vpc = 4 [
    (buf.validate.field).required = true,
    (project.planton.shared.foreignkey.v1.default_kind) = DigitalOceanVpc,
    (project.planton.shared.foreignkey.v1.default_kind_field_path) = "metadata.name"
  ];

  // Whether to enable a highly available control plane for the cluster.
  // If true, the cluster is created with a High Availability control plane (multiple masters for increased uptime, additional cost).
  // Default: false.
  bool highly_available = 5 [
    (project.planton.shared.options.recommended_default) = "false"
  ];

  // Whether to enable automatic patch upgrades for the cluster.
  // If true, the cluster will automatically upgrade to new patch releases of Kubernetes when available.
  bool auto_upgrade = 6;

  // Whether to disable surge upgrades for the cluster.
  // If false(default), cluster upgrades will temporarily provision extra nodes to minimize downtime during updates.
  bool disable_surge_upgrade = 7;

  // A list of tags to apply to the cluster.
  // Tags help organize and identify the cluster within DigitalOcean.
  repeated string tags = 8;

  // Reference to the default node pool for the cluster.
  DigitalOceanKubernetesClusterDefaultNodePool default_node_pool = 9 [
    (buf.validate.field).required = true
  ];
}

// DigitalOcean Kubernetes Cluster Default Node Pool
message DigitalOceanKubernetesClusterDefaultNodePool {
  // The slug identifier for the Droplet size to use for each node (e.g., "s-4vcpu-8gb").
  // This defines the CPU and memory of the nodes in the pool.
  string size = 1 [
    (buf.validate.field).required = true
  ];

  // The number of nodes to provision in the pool.
  // Must be at least 1. If auto_scale is enabled, this acts as the initial desired node count.
  uint32 node_count = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).uint32.gt = 0
  ];

  // Enable auto-scaling for this node pool.
  // If true, the platform will manage node count between min_nodes and max_nodes.
  bool auto_scale = 3;

  // Minimum number of nodes when auto-scaling is enabled.
  // Required if auto_scale is true.
  uint32 min_nodes = 4;

  // Maximum number of nodes when auto-scaling is enabled.
  // Required if auto_scale is true.
  uint32 max_nodes = 5;
}
