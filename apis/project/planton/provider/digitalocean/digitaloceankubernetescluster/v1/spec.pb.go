// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/digitalocean/digitaloceankubernetescluster/v1/spec.proto

package digitaloceankubernetesclusterv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	digitalocean "github.com/project-planton/project-planton/apis/project/planton/provider/digitalocean"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/cloudresourcekind"
	v1 "github.com/project-planton/project-planton/apis/project/planton/shared/foreignkey/v1"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DigitalOceanKubernetesClusterSpec defines the specification for creating a managed Kubernetes cluster on DigitalOcean.
// It focuses on essential parameters for a production-grade cluster, following the 80/20 principle to expose only the most commonly used settings.
type DigitalOceanKubernetesClusterSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the Kubernetes cluster. This will be the cluster's identifier in DigitalOcean.
	// Constraints: Must be unique per account. (A maximum length or character set may be enforced by DigitalOcean, e.g., alphanumeric and hyphens.)
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// The DigitalOcean region where the cluster will be created.
	// Determines where the cluster's control plane and nodes are provisioned.
	Region digitalocean.DigitalOceanRegion `protobuf:"varint,2,opt,name=region,proto3,enum=project.planton.provider.digitalocean.DigitalOceanRegion" json:"region,omitempty"`
	// The Kubernetes version to use for the cluster (semantic versioning).
	// Must be a supported version on DigitalOcean (e.g., 1.22+).
	// Example: "1.26.3"
	KubernetesVersion string `protobuf:"bytes,3,opt,name=kubernetes_version,json=kubernetesVersion,proto3" json:"kubernetes_version,omitempty"`
	// Reference to the DigitalOcean VPC where the cluster's control plane will reside.
	// This must be an existing VPC in the same region. Only the VPC's name is needed; the system will resolve it to the VPC ID.
	Vpc *v1.StringValueOrRef `protobuf:"bytes,4,opt,name=vpc,proto3" json:"vpc,omitempty"`
	// Whether to enable a highly available control plane for the cluster.
	// If true, the cluster is created with a High Availability control plane (multiple masters for increased uptime, additional cost).
	// Default: false.
	HighlyAvailable bool `protobuf:"varint,5,opt,name=highly_available,json=highlyAvailable,proto3" json:"highly_available,omitempty"`
	// Whether to enable automatic patch upgrades for the cluster.
	// If true, the cluster will automatically upgrade to new patch releases of Kubernetes when available.
	AutoUpgrade bool `protobuf:"varint,6,opt,name=auto_upgrade,json=autoUpgrade,proto3" json:"auto_upgrade,omitempty"`
	// Whether to disable surge upgrades for the cluster.
	// If false(default), cluster upgrades will temporarily provision extra nodes to minimize downtime during updates.
	DisableSurgeUpgrade bool `protobuf:"varint,7,opt,name=disable_surge_upgrade,json=disableSurgeUpgrade,proto3" json:"disable_surge_upgrade,omitempty"`
	// A list of tags to apply to the cluster.
	// Tags help organize and identify the cluster within DigitalOcean.
	Tags          []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DigitalOceanKubernetesClusterSpec) Reset() {
	*x = DigitalOceanKubernetesClusterSpec{}
	mi := &file_project_planton_provider_digitalocean_digitaloceankubernetescluster_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DigitalOceanKubernetesClusterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalOceanKubernetesClusterSpec) ProtoMessage() {}

func (x *DigitalOceanKubernetesClusterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_digitalocean_digitaloceankubernetescluster_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalOceanKubernetesClusterSpec.ProtoReflect.Descriptor instead.
func (*DigitalOceanKubernetesClusterSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_digitalocean_digitaloceankubernetescluster_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *DigitalOceanKubernetesClusterSpec) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *DigitalOceanKubernetesClusterSpec) GetRegion() digitalocean.DigitalOceanRegion {
	if x != nil {
		return x.Region
	}
	return digitalocean.DigitalOceanRegion(0)
}

func (x *DigitalOceanKubernetesClusterSpec) GetKubernetesVersion() string {
	if x != nil {
		return x.KubernetesVersion
	}
	return ""
}

func (x *DigitalOceanKubernetesClusterSpec) GetVpc() *v1.StringValueOrRef {
	if x != nil {
		return x.Vpc
	}
	return nil
}

func (x *DigitalOceanKubernetesClusterSpec) GetHighlyAvailable() bool {
	if x != nil {
		return x.HighlyAvailable
	}
	return false
}

func (x *DigitalOceanKubernetesClusterSpec) GetAutoUpgrade() bool {
	if x != nil {
		return x.AutoUpgrade
	}
	return false
}

func (x *DigitalOceanKubernetesClusterSpec) GetDisableSurgeUpgrade() bool {
	if x != nil {
		return x.DisableSurgeUpgrade
	}
	return false
}

func (x *DigitalOceanKubernetesClusterSpec) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

var File_project_planton_provider_digitalocean_digitaloceankubernetescluster_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_digitalocean_digitaloceankubernetescluster_v1_spec_proto_rawDesc = "" +
	"\n" +
	"Qproject/planton/provider/digitalocean/digitaloceankubernetescluster/v1/spec.proto\x12Fproject.planton.provider.digitalocean.digitaloceankubernetescluster.v1\x1a\x1bbuf/validate/validate.proto\x1a2project/planton/provider/digitalocean/region.proto\x1aBproject/planton/shared/cloudresourcekind/cloud_resource_kind.proto\x1a6project/planton/shared/foreignkey/v1/foreign_key.proto\x1a,project/planton/shared/options/options.proto\"\xe9\x03\n" +
	"!DigitalOceanKubernetesClusterSpec\x12)\n" +
	"\fcluster_name\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\vclusterName\x12Y\n" +
	"\x06region\x18\x02 \x01(\x0e29.project.planton.provider.digitalocean.DigitalOceanRegionB\x06\xbaH\x03\xc8\x01\x01R\x06region\x125\n" +
	"\x12kubernetes_version\x18\x03 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x11kubernetesVersion\x12f\n" +
	"\x03vpc\x18\x04 \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB\x1c\xbaH\x03\xc8\x01\x01\x88\xd4a\xbc\t\x92\xd4a\rmetadata.nameR\x03vpc\x124\n" +
	"\x10highly_available\x18\x05 \x01(\bB\t\x92\xa6\x1d\x05falseR\x0fhighlyAvailable\x12!\n" +
	"\fauto_upgrade\x18\x06 \x01(\bR\vautoUpgrade\x122\n" +
	"\x15disable_surge_upgrade\x18\a \x01(\bR\x13disableSurgeUpgrade\x12\x12\n" +
	"\x04tags\x18\b \x03(\tR\x04tagsB\xaf\x04\n" +
	"Jcom.project.planton.provider.digitalocean.digitaloceankubernetescluster.v1B\tSpecProtoP\x01Z\x96\x01github.com/project-planton/project-planton/apis/project/planton/provider/digitalocean/digitaloceankubernetescluster/v1;digitaloceankubernetesclusterv1\xa2\x02\x05PPPDD\xaa\x02FProject.Planton.Provider.Digitalocean.Digitaloceankubernetescluster.V1\xca\x02FProject\\Planton\\Provider\\Digitalocean\\Digitaloceankubernetescluster\\V1\xe2\x02RProject\\Planton\\Provider\\Digitalocean\\Digitaloceankubernetescluster\\V1\\GPBMetadata\xea\x02KProject::Planton::Provider::Digitalocean::Digitaloceankubernetescluster::V1b\x06proto3"

var (
	file_project_planton_provider_digitalocean_digitaloceankubernetescluster_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_digitalocean_digitaloceankubernetescluster_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_digitalocean_digitaloceankubernetescluster_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_digitalocean_digitaloceankubernetescluster_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_digitalocean_digitaloceankubernetescluster_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_digitalocean_digitaloceankubernetescluster_v1_spec_proto_rawDesc), len(file_project_planton_provider_digitalocean_digitaloceankubernetescluster_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_digitalocean_digitaloceankubernetescluster_v1_spec_proto_rawDescData
}

var file_project_planton_provider_digitalocean_digitaloceankubernetescluster_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_provider_digitalocean_digitaloceankubernetescluster_v1_spec_proto_goTypes = []any{
	(*DigitalOceanKubernetesClusterSpec)(nil), // 0: project.planton.provider.digitalocean.digitaloceankubernetescluster.v1.DigitalOceanKubernetesClusterSpec
	(digitalocean.DigitalOceanRegion)(0),      // 1: project.planton.provider.digitalocean.DigitalOceanRegion
	(*v1.StringValueOrRef)(nil),               // 2: project.planton.shared.foreignkey.v1.StringValueOrRef
}
var file_project_planton_provider_digitalocean_digitaloceankubernetescluster_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.digitalocean.digitaloceankubernetescluster.v1.DigitalOceanKubernetesClusterSpec.region:type_name -> project.planton.provider.digitalocean.DigitalOceanRegion
	2, // 1: project.planton.provider.digitalocean.digitaloceankubernetescluster.v1.DigitalOceanKubernetesClusterSpec.vpc:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() {
	file_project_planton_provider_digitalocean_digitaloceankubernetescluster_v1_spec_proto_init()
}
func file_project_planton_provider_digitalocean_digitaloceankubernetescluster_v1_spec_proto_init() {
	if File_project_planton_provider_digitalocean_digitaloceankubernetescluster_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_digitalocean_digitaloceankubernetescluster_v1_spec_proto_rawDesc), len(file_project_planton_provider_digitalocean_digitaloceankubernetescluster_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_digitalocean_digitaloceankubernetescluster_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_digitalocean_digitaloceankubernetescluster_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_digitalocean_digitaloceankubernetescluster_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_digitalocean_digitaloceankubernetescluster_v1_spec_proto = out.File
	file_project_planton_provider_digitalocean_digitaloceankubernetescluster_v1_spec_proto_goTypes = nil
	file_project_planton_provider_digitalocean_digitaloceankubernetescluster_v1_spec_proto_depIdxs = nil
}
