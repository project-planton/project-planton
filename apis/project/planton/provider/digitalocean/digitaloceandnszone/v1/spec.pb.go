// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/digitalocean/digitaloceandnszone/v1/spec.proto

package digitaloceandnszonev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/project-planton/project-planton/apis/project/planton/shared/foreignkey/v1"
	dnsrecordtype "github.com/project-planton/project-planton/apis/project/planton/shared/networking/enums/dnsrecordtype"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DigitalOceanDnsZoneSpec defines the specification required to create a DNS zone (domain) on DigitalOcean.
// This allows you to manage DNS records for a given domain via DigitalOcean's DNS service, focusing on the essential parameters (80/20 principle).
type DigitalOceanDnsZoneSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The domain name for the DNS zone.
	// Must be a valid fully-qualified domain name (e.g., "example.com").
	DomainName string `protobuf:"bytes,1,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	// A list of DNS records to create within the zone (optional).
	// Each record includes its type, name, value(s), and TTL.
	Records       []*DigitalOceanDnsZoneRecord `protobuf:"bytes,2,rep,name=records,proto3" json:"records,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DigitalOceanDnsZoneSpec) Reset() {
	*x = DigitalOceanDnsZoneSpec{}
	mi := &file_project_planton_provider_digitalocean_digitaloceandnszone_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DigitalOceanDnsZoneSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalOceanDnsZoneSpec) ProtoMessage() {}

func (x *DigitalOceanDnsZoneSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_digitalocean_digitaloceandnszone_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalOceanDnsZoneSpec.ProtoReflect.Descriptor instead.
func (*DigitalOceanDnsZoneSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_digitalocean_digitaloceandnszone_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *DigitalOceanDnsZoneSpec) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *DigitalOceanDnsZoneSpec) GetRecords() []*DigitalOceanDnsZoneRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

// DnsRecord represents a DNS record entry to be created in the zone.
type DigitalOceanDnsZoneRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The host/name for the DNS record, relative to the zone.
	// For root records, use "@" to denote the zone itself.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The value or values for the DNS record.
	// - For A/AAAA: one or more IP address(es).
	// - For CNAME: the target domain name.
	// - For TXT: the text data (if multiple strings, they will be concatenated by DNS).
	// - For MX: typically one or more entries like "<priority> <mail-server-domain>".
	// Each value can be a literal or a reference to another resourceâ€™s output.
	Values []*v1.StringValueOrRef `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	// The time-to-live for this DNS record, in seconds.
	// Determines how long resolvers cache the record. Defaults to 3600 seconds (1 hour) if not set.
	TtlSeconds uint32 `protobuf:"varint,3,opt,name=ttl_seconds,json=ttlSeconds,proto3" json:"ttl_seconds,omitempty"`
	// The type of the DNS record.
	// This field is required and must be one of the supported record types.
	Type          dnsrecordtype.DnsRecordType `protobuf:"varint,4,opt,name=type,proto3,enum=project.planton.shared.networking.enums.dnsrecordtype.DnsRecordType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DigitalOceanDnsZoneRecord) Reset() {
	*x = DigitalOceanDnsZoneRecord{}
	mi := &file_project_planton_provider_digitalocean_digitaloceandnszone_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DigitalOceanDnsZoneRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalOceanDnsZoneRecord) ProtoMessage() {}

func (x *DigitalOceanDnsZoneRecord) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_digitalocean_digitaloceandnszone_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalOceanDnsZoneRecord.ProtoReflect.Descriptor instead.
func (*DigitalOceanDnsZoneRecord) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_digitalocean_digitaloceandnszone_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *DigitalOceanDnsZoneRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DigitalOceanDnsZoneRecord) GetValues() []*v1.StringValueOrRef {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *DigitalOceanDnsZoneRecord) GetTtlSeconds() uint32 {
	if x != nil {
		return x.TtlSeconds
	}
	return 0
}

func (x *DigitalOceanDnsZoneRecord) GetType() dnsrecordtype.DnsRecordType {
	if x != nil {
		return x.Type
	}
	return dnsrecordtype.DnsRecordType(0)
}

var File_project_planton_provider_digitalocean_digitaloceandnszone_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_digitalocean_digitaloceandnszone_v1_spec_proto_rawDesc = "" +
	"\n" +
	"Gproject/planton/provider/digitalocean/digitaloceandnszone/v1/spec.proto\x12<project.planton.provider.digitalocean.digitaloceandnszone.v1\x1a\x1bbuf/validate/validate.proto\x1a6project/planton/shared/foreignkey/v1/foreign_key.proto\x1aKproject/planton/shared/networking/enums/dnsrecordtype/dns_record_type.proto\x1a,project/planton/shared/options/options.proto\"\xdb\x01\n" +
	"\x17DigitalOceanDnsZoneSpec\x12M\n" +
	"\vdomain_name\x18\x01 \x01(\tB,\xbaH)\xc8\x01\x01r$2\"^(?:[A-Za-z0-9-]+\\.)+[A-Za-z]{2,}$R\n" +
	"domainName\x12q\n" +
	"\arecords\x18\x02 \x03(\v2W.project.planton.provider.digitalocean.digitaloceandnszone.v1.DigitalOceanDnsZoneRecordR\arecords\"\xa1\x02\n" +
	"\x19DigitalOceanDnsZoneRecord\x12\x1a\n" +
	"\x04name\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\x12[\n" +
	"\x06values\x18\x02 \x03(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB\v\xbaH\b\xc8\x01\x01\x92\x01\x02\b\x01R\x06values\x12)\n" +
	"\vttl_seconds\x18\x03 \x01(\rB\b\x92\xa6\x1d\x043600R\n" +
	"ttlSeconds\x12`\n" +
	"\x04type\x18\x04 \x01(\x0e2D.project.planton.shared.networking.enums.dnsrecordtype.DnsRecordTypeB\x06\xbaH\x03\xc8\x01\x01R\x04typeB\xe9\x03\n" +
	"@com.project.planton.provider.digitalocean.digitaloceandnszone.v1B\tSpecProtoP\x01Z\x82\x01github.com/project-planton/project-planton/apis/project/planton/provider/digitalocean/digitaloceandnszone/v1;digitaloceandnszonev1\xa2\x02\x05PPPDD\xaa\x02<Project.Planton.Provider.Digitalocean.Digitaloceandnszone.V1\xca\x02<Project\\Planton\\Provider\\Digitalocean\\Digitaloceandnszone\\V1\xe2\x02HProject\\Planton\\Provider\\Digitalocean\\Digitaloceandnszone\\V1\\GPBMetadata\xea\x02AProject::Planton::Provider::Digitalocean::Digitaloceandnszone::V1b\x06proto3"

var (
	file_project_planton_provider_digitalocean_digitaloceandnszone_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_digitalocean_digitaloceandnszone_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_digitalocean_digitaloceandnszone_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_digitalocean_digitaloceandnszone_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_digitalocean_digitaloceandnszone_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_digitalocean_digitaloceandnszone_v1_spec_proto_rawDesc), len(file_project_planton_provider_digitalocean_digitaloceandnszone_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_digitalocean_digitaloceandnszone_v1_spec_proto_rawDescData
}

var file_project_planton_provider_digitalocean_digitaloceandnszone_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_project_planton_provider_digitalocean_digitaloceandnszone_v1_spec_proto_goTypes = []any{
	(*DigitalOceanDnsZoneSpec)(nil),   // 0: project.planton.provider.digitalocean.digitaloceandnszone.v1.DigitalOceanDnsZoneSpec
	(*DigitalOceanDnsZoneRecord)(nil), // 1: project.planton.provider.digitalocean.digitaloceandnszone.v1.DigitalOceanDnsZoneRecord
	(*v1.StringValueOrRef)(nil),       // 2: project.planton.shared.foreignkey.v1.StringValueOrRef
	(dnsrecordtype.DnsRecordType)(0),  // 3: project.planton.shared.networking.enums.dnsrecordtype.DnsRecordType
}
var file_project_planton_provider_digitalocean_digitaloceandnszone_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.digitalocean.digitaloceandnszone.v1.DigitalOceanDnsZoneSpec.records:type_name -> project.planton.provider.digitalocean.digitaloceandnszone.v1.DigitalOceanDnsZoneRecord
	2, // 1: project.planton.provider.digitalocean.digitaloceandnszone.v1.DigitalOceanDnsZoneRecord.values:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	3, // 2: project.planton.provider.digitalocean.digitaloceandnszone.v1.DigitalOceanDnsZoneRecord.type:type_name -> project.planton.shared.networking.enums.dnsrecordtype.DnsRecordType
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_project_planton_provider_digitalocean_digitaloceandnszone_v1_spec_proto_init() }
func file_project_planton_provider_digitalocean_digitaloceandnszone_v1_spec_proto_init() {
	if File_project_planton_provider_digitalocean_digitaloceandnszone_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_digitalocean_digitaloceandnszone_v1_spec_proto_rawDesc), len(file_project_planton_provider_digitalocean_digitaloceandnszone_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_digitalocean_digitaloceandnszone_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_digitalocean_digitaloceandnszone_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_digitalocean_digitaloceandnszone_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_digitalocean_digitaloceandnszone_v1_spec_proto = out.File
	file_project_planton_provider_digitalocean_digitaloceandnszone_v1_spec_proto_goTypes = nil
	file_project_planton_provider_digitalocean_digitaloceandnszone_v1_spec_proto_depIdxs = nil
}
