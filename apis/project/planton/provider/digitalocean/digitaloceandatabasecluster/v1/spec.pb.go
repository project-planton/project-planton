// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/digitalocean/digitaloceandatabasecluster/v1/spec.proto

package digitaloceandatabaseclusterv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	digitalocean "github.com/project-planton/project-planton/apis/project/planton/provider/digitalocean"
	v1 "github.com/project-planton/project-planton/apis/project/planton/shared/foreignkey/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enumeration of supported database engines for DigitalOcean managed database clusters.
type DigitalOceanDatabaseEngine int32

const (
	DigitalOceanDatabaseEngine_digital_ocean_database_engine_unspecified DigitalOceanDatabaseEngine = 0
	DigitalOceanDatabaseEngine_postgres                                  DigitalOceanDatabaseEngine = 1
	DigitalOceanDatabaseEngine_mysql                                     DigitalOceanDatabaseEngine = 2
	DigitalOceanDatabaseEngine_redis                                     DigitalOceanDatabaseEngine = 3
	DigitalOceanDatabaseEngine_mongodb                                   DigitalOceanDatabaseEngine = 4
)

// Enum value maps for DigitalOceanDatabaseEngine.
var (
	DigitalOceanDatabaseEngine_name = map[int32]string{
		0: "digital_ocean_database_engine_unspecified",
		1: "postgres",
		2: "mysql",
		3: "redis",
		4: "mongodb",
	}
	DigitalOceanDatabaseEngine_value = map[string]int32{
		"digital_ocean_database_engine_unspecified": 0,
		"postgres": 1,
		"mysql":    2,
		"redis":    3,
		"mongodb":  4,
	}
)

func (x DigitalOceanDatabaseEngine) Enum() *DigitalOceanDatabaseEngine {
	p := new(DigitalOceanDatabaseEngine)
	*p = x
	return p
}

func (x DigitalOceanDatabaseEngine) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DigitalOceanDatabaseEngine) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto_enumTypes[0].Descriptor()
}

func (DigitalOceanDatabaseEngine) Type() protoreflect.EnumType {
	return &file_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto_enumTypes[0]
}

func (x DigitalOceanDatabaseEngine) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DigitalOceanDatabaseEngine.Descriptor instead.
func (DigitalOceanDatabaseEngine) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto_rawDescGZIP(), []int{0}
}

// DigitalOceanDatabaseClusterSpec defines the essential configuration for creating a managed database cluster on DigitalOcean.
// This follows the 80/20 principle: only the most commonly used fields are exposed to keep the API simple.
type DigitalOceanDatabaseClusterSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A human-readable name for the database cluster.
	// This name will be used as the cluster's identifier in DigitalOcean.
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// The database engine for the cluster.
	// Allowed values include: POSTGRES, MYSQL, REDIS, MONGODB.
	Engine DigitalOceanDatabaseEngine `protobuf:"varint,2,opt,name=engine,proto3,enum=project.planton.provider.digitalocean.digitaloceandatabasecluster.v1.DigitalOceanDatabaseEngine" json:"engine,omitempty"`
	// The engine version for the cluster.
	// For example, "14" for PostgreSQL 14, "8" for MySQL 8, etc.
	// Only major (and optionally minor) version numbers are expected.
	EngineVersion string `protobuf:"bytes,3,opt,name=engine_version,json=engineVersion,proto3" json:"engine_version,omitempty"`
	// The DigitalOcean region where the cluster will be created.
	// Determines the data center location for the cluster.
	Region digitalocean.DigitalOceanRegion `protobuf:"varint,4,opt,name=region,proto3,enum=project.planton.provider.digitalocean.DigitalOceanRegion" json:"region,omitempty"`
	// The slug identifier for the cluster's node size (e.g., "db-s-2vcpu-4gb").
	// This defines the CPU/memory resources for each node in the cluster.
	SizeSlug string `protobuf:"bytes,5,opt,name=size_slug,json=sizeSlug,proto3" json:"size_slug,omitempty"`
	// The number of nodes in the cluster. Allowed values are 1 to 3 for primary nodes.
	NodeCount uint32 `protobuf:"varint,6,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty"`
	// (Optional) Reference to a DigitalOcean VPC for the database cluster.
	// If provided, the cluster will be created within the specified private network.
	// Use a literal VPC UUID or a reference to a DigitalOceanVpc resource.
	Vpc *v1.StringValueOrRef `protobuf:"bytes,7,opt,name=vpc,proto3" json:"vpc,omitempty"`
	// (Optional) Custom storage size in GiB for the cluster.
	// If not set, the default storage for the chosen size_slug will be used.
	StorageGib uint32 `protobuf:"varint,8,opt,name=storage_gib,json=storageGib,proto3" json:"storage_gib,omitempty"`
	// (Optional) Whether to enable cluster access to public networking.
	// When false (default), no public connection is available; the cluster is accessible only via the VPC or DigitalOcean internal network.
	EnablePublicConnectivity bool `protobuf:"varint,9,opt,name=enable_public_connectivity,json=enablePublicConnectivity,proto3" json:"enable_public_connectivity,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *DigitalOceanDatabaseClusterSpec) Reset() {
	*x = DigitalOceanDatabaseClusterSpec{}
	mi := &file_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DigitalOceanDatabaseClusterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalOceanDatabaseClusterSpec) ProtoMessage() {}

func (x *DigitalOceanDatabaseClusterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalOceanDatabaseClusterSpec.ProtoReflect.Descriptor instead.
func (*DigitalOceanDatabaseClusterSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *DigitalOceanDatabaseClusterSpec) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *DigitalOceanDatabaseClusterSpec) GetEngine() DigitalOceanDatabaseEngine {
	if x != nil {
		return x.Engine
	}
	return DigitalOceanDatabaseEngine_digital_ocean_database_engine_unspecified
}

func (x *DigitalOceanDatabaseClusterSpec) GetEngineVersion() string {
	if x != nil {
		return x.EngineVersion
	}
	return ""
}

func (x *DigitalOceanDatabaseClusterSpec) GetRegion() digitalocean.DigitalOceanRegion {
	if x != nil {
		return x.Region
	}
	return digitalocean.DigitalOceanRegion(0)
}

func (x *DigitalOceanDatabaseClusterSpec) GetSizeSlug() string {
	if x != nil {
		return x.SizeSlug
	}
	return ""
}

func (x *DigitalOceanDatabaseClusterSpec) GetNodeCount() uint32 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

func (x *DigitalOceanDatabaseClusterSpec) GetVpc() *v1.StringValueOrRef {
	if x != nil {
		return x.Vpc
	}
	return nil
}

func (x *DigitalOceanDatabaseClusterSpec) GetStorageGib() uint32 {
	if x != nil {
		return x.StorageGib
	}
	return 0
}

func (x *DigitalOceanDatabaseClusterSpec) GetEnablePublicConnectivity() bool {
	if x != nil {
		return x.EnablePublicConnectivity
	}
	return false
}

var File_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto_rawDesc = "" +
	"\n" +
	"Oproject/planton/provider/digitalocean/digitaloceandatabasecluster/v1/spec.proto\x12Dproject.planton.provider.digitalocean.digitaloceandatabasecluster.v1\x1a\x1bbuf/validate/validate.proto\x1a2project/planton/provider/digitalocean/region.proto\x1a6project/planton/shared/foreignkey/v1/foreign_key.proto\"\x8f\x05\n" +
	"\x1fDigitalOceanDatabaseClusterSpec\x12-\n" +
	"\fcluster_name\x18\x01 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x18@R\vclusterName\x12\x80\x01\n" +
	"\x06engine\x18\x02 \x01(\x0e2`.project.planton.provider.digitalocean.digitaloceandatabasecluster.v1.DigitalOceanDatabaseEngineB\x06\xbaH\x03\xc8\x01\x01R\x06engine\x12D\n" +
	"\x0eengine_version\x18\x03 \x01(\tB\x1d\xbaH\x1a\xc8\x01\x01r\x152\x13^[0-9]+(\\.[0-9]+)?$R\rengineVersion\x12Y\n" +
	"\x06region\x18\x04 \x01(\x0e29.project.planton.provider.digitalocean.DigitalOceanRegionB\x06\xbaH\x03\xc8\x01\x01R\x06region\x12#\n" +
	"\tsize_slug\x18\x05 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\bsizeSlug\x12+\n" +
	"\n" +
	"node_count\x18\x06 \x01(\rB\f\xbaH\t\xc8\x01\x01*\x04\x18\x03(\x01R\tnodeCount\x12h\n" +
	"\x03vpc\x18\a \x01(\v26.project.planton.shared.foreignkey.v1.StringValueOrRefB\x1e\x88\xd4a\xbc\t\x92\xd4a\x15status.outputs.vpc_idR\x03vpc\x12\x1f\n" +
	"\vstorage_gib\x18\b \x01(\rR\n" +
	"storageGib\x12<\n" +
	"\x1aenable_public_connectivity\x18\t \x01(\bR\x18enablePublicConnectivity*|\n" +
	"\x1aDigitalOceanDatabaseEngine\x12-\n" +
	")digital_ocean_database_engine_unspecified\x10\x00\x12\f\n" +
	"\bpostgres\x10\x01\x12\t\n" +
	"\x05mysql\x10\x02\x12\t\n" +
	"\x05redis\x10\x03\x12\v\n" +
	"\amongodb\x10\x04B\xa1\x04\n" +
	"Hcom.project.planton.provider.digitalocean.digitaloceandatabasecluster.v1B\tSpecProtoP\x01Z\x92\x01github.com/project-planton/project-planton/apis/project/planton/provider/digitalocean/digitaloceandatabasecluster/v1;digitaloceandatabaseclusterv1\xa2\x02\x05PPPDD\xaa\x02DProject.Planton.Provider.Digitalocean.Digitaloceandatabasecluster.V1\xca\x02DProject\\Planton\\Provider\\Digitalocean\\Digitaloceandatabasecluster\\V1\xe2\x02PProject\\Planton\\Provider\\Digitalocean\\Digitaloceandatabasecluster\\V1\\GPBMetadata\xea\x02IProject::Planton::Provider::Digitalocean::Digitaloceandatabasecluster::V1b\x06proto3"

var (
	file_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto_rawDesc), len(file_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto_rawDescData
}

var file_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto_goTypes = []any{
	(DigitalOceanDatabaseEngine)(0),         // 0: project.planton.provider.digitalocean.digitaloceandatabasecluster.v1.DigitalOceanDatabaseEngine
	(*DigitalOceanDatabaseClusterSpec)(nil), // 1: project.planton.provider.digitalocean.digitaloceandatabasecluster.v1.DigitalOceanDatabaseClusterSpec
	(digitalocean.DigitalOceanRegion)(0),    // 2: project.planton.provider.digitalocean.DigitalOceanRegion
	(*v1.StringValueOrRef)(nil),             // 3: project.planton.shared.foreignkey.v1.StringValueOrRef
}
var file_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto_depIdxs = []int32{
	0, // 0: project.planton.provider.digitalocean.digitaloceandatabasecluster.v1.DigitalOceanDatabaseClusterSpec.engine:type_name -> project.planton.provider.digitalocean.digitaloceandatabasecluster.v1.DigitalOceanDatabaseEngine
	2, // 1: project.planton.provider.digitalocean.digitaloceandatabasecluster.v1.DigitalOceanDatabaseClusterSpec.region:type_name -> project.planton.provider.digitalocean.DigitalOceanRegion
	3, // 2: project.planton.provider.digitalocean.digitaloceandatabasecluster.v1.DigitalOceanDatabaseClusterSpec.vpc:type_name -> project.planton.shared.foreignkey.v1.StringValueOrRef
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() {
	file_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto_init()
}
func file_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto_init() {
	if File_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto_rawDesc), len(file_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto_depIdxs,
		EnumInfos:         file_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto_enumTypes,
		MessageInfos:      file_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto = out.File
	file_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto_goTypes = nil
	file_project_planton_provider_digitalocean_digitaloceandatabasecluster_v1_spec_proto_depIdxs = nil
}
