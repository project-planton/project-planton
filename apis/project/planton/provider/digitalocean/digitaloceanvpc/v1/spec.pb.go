// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/digitalocean/digitaloceanvpc/v1/spec.proto

package digitaloceanvpcv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	digitalocean "github.com/project-planton/project-planton/apis/project/planton/provider/digitalocean"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DigitalOceanVpcSpec defines the specification required to deploy a DigitalOcean Virtual Private Cloud (VPC).
// A DigitalOcean VPC allows you to create a private, isolated network for your Droplets and other resources,
// enabling secure communication within your infrastructure.
// This specification focuses on the essential parameters for creating a VPC, adhering to the 80/20 principle.
type DigitalOceanVpcSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A human-readable description for the VPC.
	// Constraints: Maximum 100 characters.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// The DigitalOcean region where the VPC will be created.
	// This determines the geographical location of the VPC.
	Region digitalocean.DigitalOceanRegion `protobuf:"varint,2,opt,name=region,proto3,enum=project.planton.provider.digitalocean.DigitalOceanRegion" json:"region,omitempty"`
	// The IP range for the VPC in CIDR notation.
	// Only /16, /20, or /24 CIDR blocks are supported for VPCs on DigitalOcean.
	// Example: "10.10.0.0/16"
	IpRangeCidr string `protobuf:"bytes,3,opt,name=ip_range_cidr,json=ipRangeCidr,proto3" json:"ip_range_cidr,omitempty"`
	// A boolean indicating whether this VPC should be set as the default for the specified region.
	// Only one VPC can be the default for a given region.
	// Default: false
	IsDefaultForRegion bool `protobuf:"varint,4,opt,name=is_default_for_region,json=isDefaultForRegion,proto3" json:"is_default_for_region,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DigitalOceanVpcSpec) Reset() {
	*x = DigitalOceanVpcSpec{}
	mi := &file_project_planton_provider_digitalocean_digitaloceanvpc_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DigitalOceanVpcSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalOceanVpcSpec) ProtoMessage() {}

func (x *DigitalOceanVpcSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_digitalocean_digitaloceanvpc_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalOceanVpcSpec.ProtoReflect.Descriptor instead.
func (*DigitalOceanVpcSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_digitalocean_digitaloceanvpc_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *DigitalOceanVpcSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DigitalOceanVpcSpec) GetRegion() digitalocean.DigitalOceanRegion {
	if x != nil {
		return x.Region
	}
	return digitalocean.DigitalOceanRegion(0)
}

func (x *DigitalOceanVpcSpec) GetIpRangeCidr() string {
	if x != nil {
		return x.IpRangeCidr
	}
	return ""
}

func (x *DigitalOceanVpcSpec) GetIsDefaultForRegion() bool {
	if x != nil {
		return x.IsDefaultForRegion
	}
	return false
}

var File_project_planton_provider_digitalocean_digitaloceanvpc_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_digitalocean_digitaloceanvpc_v1_spec_proto_rawDesc = "" +
	"\n" +
	"Cproject/planton/provider/digitalocean/digitaloceanvpc/v1/spec.proto\x128project.planton.provider.digitalocean.digitaloceanvpc.v1\x1a\x1bbuf/validate/validate.proto\x1a,project/planton/shared/options/options.proto\x1a2project/planton/provider/digitalocean/region.proto\"\xb1\x02\n" +
	"\x13DigitalOceanVpcSpec\x12)\n" +
	"\vdescription\x18\x01 \x01(\tB\a\xbaH\x04r\x02\x18dR\vdescription\x12Y\n" +
	"\x06region\x18\x02 \x01(\x0e29.project.planton.provider.digitalocean.DigitalOceanRegionB\x06\xbaH\x03\xc8\x01\x01R\x06region\x12V\n" +
	"\rip_range_cidr\x18\x03 \x01(\tB2\xbaH/\xc8\x01\x01r*2(^([0-9]{1,3}\\.){3}[0-9]{1,3}/(16|20|24)$R\vipRangeCidr\x12<\n" +
	"\x15is_default_for_region\x18\x04 \x01(\bB\t\x92\xa6\x1d\x05falseR\x12isDefaultForRegionB\xcc\x03\n" +
	"<com.project.planton.provider.digitalocean.digitaloceanvpc.v1B\tSpecProtoP\x01Zzgithub.com/project-planton/project-planton/apis/project/planton/provider/digitalocean/digitaloceanvpc/v1;digitaloceanvpcv1\xa2\x02\x05PPPDD\xaa\x028Project.Planton.Provider.Digitalocean.Digitaloceanvpc.V1\xca\x028Project\\Planton\\Provider\\Digitalocean\\Digitaloceanvpc\\V1\xe2\x02DProject\\Planton\\Provider\\Digitalocean\\Digitaloceanvpc\\V1\\GPBMetadata\xea\x02=Project::Planton::Provider::Digitalocean::Digitaloceanvpc::V1b\x06proto3"

var (
	file_project_planton_provider_digitalocean_digitaloceanvpc_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_digitalocean_digitaloceanvpc_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_digitalocean_digitaloceanvpc_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_digitalocean_digitaloceanvpc_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_digitalocean_digitaloceanvpc_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_digitalocean_digitaloceanvpc_v1_spec_proto_rawDesc), len(file_project_planton_provider_digitalocean_digitaloceanvpc_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_digitalocean_digitaloceanvpc_v1_spec_proto_rawDescData
}

var file_project_planton_provider_digitalocean_digitaloceanvpc_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_provider_digitalocean_digitaloceanvpc_v1_spec_proto_goTypes = []any{
	(*DigitalOceanVpcSpec)(nil),          // 0: project.planton.provider.digitalocean.digitaloceanvpc.v1.DigitalOceanVpcSpec
	(digitalocean.DigitalOceanRegion)(0), // 1: project.planton.provider.digitalocean.DigitalOceanRegion
}
var file_project_planton_provider_digitalocean_digitaloceanvpc_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.digitalocean.digitaloceanvpc.v1.DigitalOceanVpcSpec.region:type_name -> project.planton.provider.digitalocean.DigitalOceanRegion
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_project_planton_provider_digitalocean_digitaloceanvpc_v1_spec_proto_init() }
func file_project_planton_provider_digitalocean_digitaloceanvpc_v1_spec_proto_init() {
	if File_project_planton_provider_digitalocean_digitaloceanvpc_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_digitalocean_digitaloceanvpc_v1_spec_proto_rawDesc), len(file_project_planton_provider_digitalocean_digitaloceanvpc_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_digitalocean_digitaloceanvpc_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_digitalocean_digitaloceanvpc_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_digitalocean_digitaloceanvpc_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_digitalocean_digitaloceanvpc_v1_spec_proto = out.File
	file_project_planton_provider_digitalocean_digitaloceanvpc_v1_spec_proto_goTypes = nil
	file_project_planton_provider_digitalocean_digitaloceanvpc_v1_spec_proto_depIdxs = nil
}
