// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/digitalocean/digitaloceancertificate/v1/spec.proto

package digitaloceancertificatev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DigitalOceanCertificateType represents the certificate source.
type DigitalOceanCertificateType int32

const (
	// A free, auto‑managed Let's Encrypt certificate.
	DigitalOceanCertificateType_letsEncrypt DigitalOceanCertificateType = 0
	// A user‑provided custom certificate.
	DigitalOceanCertificateType_custom DigitalOceanCertificateType = 1
)

// Enum value maps for DigitalOceanCertificateType.
var (
	DigitalOceanCertificateType_name = map[int32]string{
		0: "letsEncrypt",
		1: "custom",
	}
	DigitalOceanCertificateType_value = map[string]int32{
		"letsEncrypt": 0,
		"custom":      1,
	}
)

func (x DigitalOceanCertificateType) Enum() *DigitalOceanCertificateType {
	p := new(DigitalOceanCertificateType)
	*p = x
	return p
}

func (x DigitalOceanCertificateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DigitalOceanCertificateType) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_enumTypes[0].Descriptor()
}

func (DigitalOceanCertificateType) Type() protoreflect.EnumType {
	return &file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_enumTypes[0]
}

func (x DigitalOceanCertificateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DigitalOceanCertificateType.Descriptor instead.
func (DigitalOceanCertificateType) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_rawDescGZIP(), []int{0}
}

// DigitalOceanCertificateSpec defines the fields required to create an SSL certificate in DigitalOcean.
type DigitalOceanCertificateSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// certificate_name is a unique, human‑readable identifier (≤ 64 chars).
	CertificateName string `protobuf:"bytes,1,opt,name=certificate_name,json=certificateName,proto3" json:"certificate_name,omitempty"`
	// type must align with the branch chosen in certificate_source.
	Type DigitalOceanCertificateType `protobuf:"varint,2,opt,name=type,proto3,enum=project.planton.provider.digitalocean.digitaloceancertificate.v1.DigitalOceanCertificateType" json:"type,omitempty"`
	// Mutually exclusive parameter sets.
	//
	// Types that are valid to be assigned to CertificateSource:
	//
	//	*DigitalOceanCertificateSpec_LetsEncrypt
	//	*DigitalOceanCertificateSpec_Custom
	CertificateSource isDigitalOceanCertificateSpec_CertificateSource `protobuf_oneof:"certificate_source"`
	// Optional free‑form description (≤ 128 chars).
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Optional tags; must be unique and lowercase kebab.
	Tags          []string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DigitalOceanCertificateSpec) Reset() {
	*x = DigitalOceanCertificateSpec{}
	mi := &file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DigitalOceanCertificateSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalOceanCertificateSpec) ProtoMessage() {}

func (x *DigitalOceanCertificateSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalOceanCertificateSpec.ProtoReflect.Descriptor instead.
func (*DigitalOceanCertificateSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *DigitalOceanCertificateSpec) GetCertificateName() string {
	if x != nil {
		return x.CertificateName
	}
	return ""
}

func (x *DigitalOceanCertificateSpec) GetType() DigitalOceanCertificateType {
	if x != nil {
		return x.Type
	}
	return DigitalOceanCertificateType_letsEncrypt
}

func (x *DigitalOceanCertificateSpec) GetCertificateSource() isDigitalOceanCertificateSpec_CertificateSource {
	if x != nil {
		return x.CertificateSource
	}
	return nil
}

func (x *DigitalOceanCertificateSpec) GetLetsEncrypt() *DigitalOceanCertificateLetsEncryptParams {
	if x != nil {
		if x, ok := x.CertificateSource.(*DigitalOceanCertificateSpec_LetsEncrypt); ok {
			return x.LetsEncrypt
		}
	}
	return nil
}

func (x *DigitalOceanCertificateSpec) GetCustom() *DigitalOceanCertificateCustomParams {
	if x != nil {
		if x, ok := x.CertificateSource.(*DigitalOceanCertificateSpec_Custom); ok {
			return x.Custom
		}
	}
	return nil
}

func (x *DigitalOceanCertificateSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DigitalOceanCertificateSpec) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type isDigitalOceanCertificateSpec_CertificateSource interface {
	isDigitalOceanCertificateSpec_CertificateSource()
}

type DigitalOceanCertificateSpec_LetsEncrypt struct {
	LetsEncrypt *DigitalOceanCertificateLetsEncryptParams `protobuf:"bytes,3,opt,name=lets_encrypt,json=letsEncrypt,proto3,oneof"`
}

type DigitalOceanCertificateSpec_Custom struct {
	Custom *DigitalOceanCertificateCustomParams `protobuf:"bytes,4,opt,name=custom,proto3,oneof"`
}

func (*DigitalOceanCertificateSpec_LetsEncrypt) isDigitalOceanCertificateSpec_CertificateSource() {}

func (*DigitalOceanCertificateSpec_Custom) isDigitalOceanCertificateSpec_CertificateSource() {}

// Parameters specific to a Let's Encrypt certificate request.
type DigitalOceanCertificateLetsEncryptParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// domains is the list of FQDNs (or wildcard domains) to include.
	// At least one domain is required.
	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
	// disable auto_renew controls automatic renewal of the Let's Encrypt certificate.
	DisableAutoRenew bool `protobuf:"varint,2,opt,name=disable_auto_renew,json=disableAutoRenew,proto3" json:"disable_auto_renew,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DigitalOceanCertificateLetsEncryptParams) Reset() {
	*x = DigitalOceanCertificateLetsEncryptParams{}
	mi := &file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DigitalOceanCertificateLetsEncryptParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalOceanCertificateLetsEncryptParams) ProtoMessage() {}

func (x *DigitalOceanCertificateLetsEncryptParams) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalOceanCertificateLetsEncryptParams.ProtoReflect.Descriptor instead.
func (*DigitalOceanCertificateLetsEncryptParams) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *DigitalOceanCertificateLetsEncryptParams) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *DigitalOceanCertificateLetsEncryptParams) GetDisableAutoRenew() bool {
	if x != nil {
		return x.DisableAutoRenew
	}
	return false
}

// Parameters specific to a custom (user‑supplied) certificate.
type DigitalOceanCertificateCustomParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// leaf_certificate is the PEM‑encoded public certificate.
	LeafCertificate string `protobuf:"bytes,1,opt,name=leaf_certificate,json=leafCertificate,proto3" json:"leaf_certificate,omitempty"`
	// private_key is the PEM‑encoded private key.
	PrivateKey string `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// certificate_chain is an optional PEM‑encoded intermediate chain.
	CertificateChain string `protobuf:"bytes,3,opt,name=certificate_chain,json=certificateChain,proto3" json:"certificate_chain,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DigitalOceanCertificateCustomParams) Reset() {
	*x = DigitalOceanCertificateCustomParams{}
	mi := &file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DigitalOceanCertificateCustomParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalOceanCertificateCustomParams) ProtoMessage() {}

func (x *DigitalOceanCertificateCustomParams) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalOceanCertificateCustomParams.ProtoReflect.Descriptor instead.
func (*DigitalOceanCertificateCustomParams) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *DigitalOceanCertificateCustomParams) GetLeafCertificate() string {
	if x != nil {
		return x.LeafCertificate
	}
	return ""
}

func (x *DigitalOceanCertificateCustomParams) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *DigitalOceanCertificateCustomParams) GetCertificateChain() string {
	if x != nil {
		return x.CertificateChain
	}
	return ""
}

var File_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_rawDesc = "" +
	"\n" +
	"Kproject/planton/provider/digitalocean/digitaloceancertificate/v1/spec.proto\x12@project.planton.provider.digitalocean.digitaloceancertificate.v1\x1a\x1bbuf/validate/validate.proto\"\xd0\x04\n" +
	"\x1bDigitalOceanCertificateSpec\x127\n" +
	"\x10certificate_name\x18\x01 \x01(\tB\f\xbaH\t\xc8\x01\x01r\x04\x10\x01\x18@R\x0fcertificateName\x12~\n" +
	"\x04type\x18\x02 \x01(\x0e2].project.planton.provider.digitalocean.digitaloceancertificate.v1.DigitalOceanCertificateTypeB\v\xbaH\b\xc8\x01\x01\x82\x01\x02\x10\x01R\x04type\x12\x8f\x01\n" +
	"\flets_encrypt\x18\x03 \x01(\v2j.project.planton.provider.digitalocean.digitaloceancertificate.v1.DigitalOceanCertificateLetsEncryptParamsH\x00R\vletsEncrypt\x12\x7f\n" +
	"\x06custom\x18\x04 \x01(\v2e.project.planton.provider.digitalocean.digitaloceancertificate.v1.DigitalOceanCertificateCustomParamsH\x00R\x06custom\x12*\n" +
	"\vdescription\x18\x05 \x01(\tB\b\xbaH\x05r\x03\x18\x80\x01R\vdescription\x12\x1c\n" +
	"\x04tags\x18\x06 \x03(\tB\b\xbaH\x05\x92\x01\x02\x18\x01R\x04tagsB\x1b\n" +
	"\x12certificate_source\x12\x05\xbaH\x02\b\x01\"\xbe\x01\n" +
	"(DigitalOceanCertificateLetsEncryptParams\x12d\n" +
	"\adomains\x18\x01 \x03(\tBJ\xbaHG\xc8\x01\x01\x92\x01A\x18\x01\"=r;29^(?:\\*\\.[A-Za-z0-9\\-\\.]+|[A-Za-z0-9\\-\\.]+\\.[A-Za-z]{2,})$R\adomains\x12,\n" +
	"\x12disable_auto_renew\x18\x02 \x01(\bR\x10disableAutoRenew\"\xb6\x01\n" +
	"#DigitalOceanCertificateCustomParams\x125\n" +
	"\x10leaf_certificate\x18\x01 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x10\x01R\x0fleafCertificate\x12+\n" +
	"\vprivate_key\x18\x02 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x10\x01R\n" +
	"privateKey\x12+\n" +
	"\x11certificate_chain\x18\x03 \x01(\tR\x10certificateChain*:\n" +
	"\x1bDigitalOceanCertificateType\x12\x0f\n" +
	"\vletsEncrypt\x10\x00\x12\n" +
	"\n" +
	"\x06custom\x10\x01B\x85\x04\n" +
	"Dcom.project.planton.provider.digitalocean.digitaloceancertificate.v1B\tSpecProtoP\x01Z\x8a\x01github.com/project-planton/project-planton/apis/project/planton/provider/digitalocean/digitaloceancertificate/v1;digitaloceancertificatev1\xa2\x02\x05PPPDD\xaa\x02@Project.Planton.Provider.Digitalocean.Digitaloceancertificate.V1\xca\x02@Project\\Planton\\Provider\\Digitalocean\\Digitaloceancertificate\\V1\xe2\x02LProject\\Planton\\Provider\\Digitalocean\\Digitaloceancertificate\\V1\\GPBMetadata\xea\x02EProject::Planton::Provider::Digitalocean::Digitaloceancertificate::V1b\x06proto3"

var (
	file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_rawDesc), len(file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_rawDescData
}

var file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_goTypes = []any{
	(DigitalOceanCertificateType)(0),                 // 0: project.planton.provider.digitalocean.digitaloceancertificate.v1.DigitalOceanCertificateType
	(*DigitalOceanCertificateSpec)(nil),              // 1: project.planton.provider.digitalocean.digitaloceancertificate.v1.DigitalOceanCertificateSpec
	(*DigitalOceanCertificateLetsEncryptParams)(nil), // 2: project.planton.provider.digitalocean.digitaloceancertificate.v1.DigitalOceanCertificateLetsEncryptParams
	(*DigitalOceanCertificateCustomParams)(nil),      // 3: project.planton.provider.digitalocean.digitaloceancertificate.v1.DigitalOceanCertificateCustomParams
}
var file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_depIdxs = []int32{
	0, // 0: project.planton.provider.digitalocean.digitaloceancertificate.v1.DigitalOceanCertificateSpec.type:type_name -> project.planton.provider.digitalocean.digitaloceancertificate.v1.DigitalOceanCertificateType
	2, // 1: project.planton.provider.digitalocean.digitaloceancertificate.v1.DigitalOceanCertificateSpec.lets_encrypt:type_name -> project.planton.provider.digitalocean.digitaloceancertificate.v1.DigitalOceanCertificateLetsEncryptParams
	3, // 2: project.planton.provider.digitalocean.digitaloceancertificate.v1.DigitalOceanCertificateSpec.custom:type_name -> project.planton.provider.digitalocean.digitaloceancertificate.v1.DigitalOceanCertificateCustomParams
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_init() }
func file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_init() {
	if File_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto != nil {
		return
	}
	file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_msgTypes[0].OneofWrappers = []any{
		(*DigitalOceanCertificateSpec_LetsEncrypt)(nil),
		(*DigitalOceanCertificateSpec_Custom)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_rawDesc), len(file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_depIdxs,
		EnumInfos:         file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_enumTypes,
		MessageInfos:      file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto = out.File
	file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_goTypes = nil
	file_project_planton_provider_digitalocean_digitaloceancertificate_v1_spec_proto_depIdxs = nil
}
