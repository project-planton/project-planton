// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/provider/digitalocean/digitaloceanfirewall/v1/spec.proto

package digitaloceanfirewallv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/project-planton/project-planton/apis/project/planton/provider/digitalocean"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/foreignkey/v1"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DigitalOceanFirewallSpec defines the user configuration for a DigitalOcean Droplet (VM).
type DigitalOceanFirewallSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the firewall for identification (must be unique per account/project).
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Inbound rules: traffic allowed *to* Droplets on specific ports from specified sources.
	InboundRules []*DigitalOceanFirewallInboundRule `protobuf:"bytes,2,rep,name=inbound_rules,json=inboundRules,proto3" json:"inbound_rules,omitempty"`
	// Outbound rules: traffic allowed *from* Droplets on specific ports to specified destinations.
	OutboundRules []*DigitalOceanFirewallOutboundRule `protobuf:"bytes,3,rep,name=outbound_rules,json=outboundRules,proto3" json:"outbound_rules,omitempty"`
	// The Droplet IDs to which this firewall is applied (max 10).
	// These Droplets will have the firewall's rules enforced.
	DropletIds []int64 `protobuf:"varint,4,rep,packed,name=droplet_ids,json=dropletIds,proto3" json:"droplet_ids,omitempty"`
	// The names of Droplet tags to which this firewall is applied (max 5).
	// Any Droplet with these tags will be protected by this firewall.
	Tags          []string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DigitalOceanFirewallSpec) Reset() {
	*x = DigitalOceanFirewallSpec{}
	mi := &file_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DigitalOceanFirewallSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalOceanFirewallSpec) ProtoMessage() {}

func (x *DigitalOceanFirewallSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalOceanFirewallSpec.ProtoReflect.Descriptor instead.
func (*DigitalOceanFirewallSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *DigitalOceanFirewallSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DigitalOceanFirewallSpec) GetInboundRules() []*DigitalOceanFirewallInboundRule {
	if x != nil {
		return x.InboundRules
	}
	return nil
}

func (x *DigitalOceanFirewallSpec) GetOutboundRules() []*DigitalOceanFirewallOutboundRule {
	if x != nil {
		return x.OutboundRules
	}
	return nil
}

func (x *DigitalOceanFirewallSpec) GetDropletIds() []int64 {
	if x != nil {
		return x.DropletIds
	}
	return nil
}

func (x *DigitalOceanFirewallSpec) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Definition of an inbound (ingress) firewall rule.
type DigitalOceanFirewallInboundRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// "tcp", "udp", or "icmp". Required.
	Protocol string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Ports to allow (e.g., "80", "8000-9000", or "1-65535"; empty or "1-65535" means all ports for tcp/udp).
	PortRange string `protobuf:"bytes,2,opt,name=port_range,json=portRange,proto3" json:"port_range,omitempty"`
	// IPv4 or IPv6 addresses or CIDR ranges (e.g., "192.0.2.0/24", "0.0.0.0/0").
	SourceAddresses []string `protobuf:"bytes,3,rep,name=source_addresses,json=sourceAddresses,proto3" json:"source_addresses,omitempty"`
	// IDs of Droplets from which traffic is allowed.
	SourceDropletIds []int64 `protobuf:"varint,4,rep,packed,name=source_droplet_ids,json=sourceDropletIds,proto3" json:"source_droplet_ids,omitempty"`
	// Names of Droplet tags; any Droplet with these tags is allowed.
	SourceTags []string `protobuf:"bytes,5,rep,name=source_tags,json=sourceTags,proto3" json:"source_tags,omitempty"`
	// IDs of Kubernetes clusters from which traffic is allowed.
	SourceKubernetesIds []string `protobuf:"bytes,6,rep,name=source_kubernetes_ids,json=sourceKubernetesIds,proto3" json:"source_kubernetes_ids,omitempty"`
	// IDs of Load Balancers from which traffic is allowed.
	SourceLoadBalancerUids []string `protobuf:"bytes,7,rep,name=source_load_balancer_uids,json=sourceLoadBalancerUids,proto3" json:"source_load_balancer_uids,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DigitalOceanFirewallInboundRule) Reset() {
	*x = DigitalOceanFirewallInboundRule{}
	mi := &file_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DigitalOceanFirewallInboundRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalOceanFirewallInboundRule) ProtoMessage() {}

func (x *DigitalOceanFirewallInboundRule) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalOceanFirewallInboundRule.ProtoReflect.Descriptor instead.
func (*DigitalOceanFirewallInboundRule) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *DigitalOceanFirewallInboundRule) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *DigitalOceanFirewallInboundRule) GetPortRange() string {
	if x != nil {
		return x.PortRange
	}
	return ""
}

func (x *DigitalOceanFirewallInboundRule) GetSourceAddresses() []string {
	if x != nil {
		return x.SourceAddresses
	}
	return nil
}

func (x *DigitalOceanFirewallInboundRule) GetSourceDropletIds() []int64 {
	if x != nil {
		return x.SourceDropletIds
	}
	return nil
}

func (x *DigitalOceanFirewallInboundRule) GetSourceTags() []string {
	if x != nil {
		return x.SourceTags
	}
	return nil
}

func (x *DigitalOceanFirewallInboundRule) GetSourceKubernetesIds() []string {
	if x != nil {
		return x.SourceKubernetesIds
	}
	return nil
}

func (x *DigitalOceanFirewallInboundRule) GetSourceLoadBalancerUids() []string {
	if x != nil {
		return x.SourceLoadBalancerUids
	}
	return nil
}

// Definition of an outbound (egress) firewall rule.
type DigitalOceanFirewallOutboundRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// "tcp", "udp", or "icmp". Required.
	Protocol string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Ports to allow (format as in inbound rules; required for tcp/udp).
	PortRange string `protobuf:"bytes,2,opt,name=port_range,json=portRange,proto3" json:"port_range,omitempty"`
	// IPv4/IPv6 addresses or CIDRs to which traffic is allowed.
	DestinationAddresses []string `protobuf:"bytes,3,rep,name=destination_addresses,json=destinationAddresses,proto3" json:"destination_addresses,omitempty"`
	// IDs of Droplets to which traffic is allowed.
	DestinationDropletIds []int64 `protobuf:"varint,4,rep,packed,name=destination_droplet_ids,json=destinationDropletIds,proto3" json:"destination_droplet_ids,omitempty"`
	// Names of Droplet tags whose members are allowed destinations.
	DestinationTags []string `protobuf:"bytes,5,rep,name=destination_tags,json=destinationTags,proto3" json:"destination_tags,omitempty"`
	// IDs of Kubernetes clusters to which traffic is allowed.
	DestinationKubernetesIds []string `protobuf:"bytes,6,rep,name=destination_kubernetes_ids,json=destinationKubernetesIds,proto3" json:"destination_kubernetes_ids,omitempty"`
	// IDs of Load Balancers which are allowed as destinations.
	DestinationLoadBalancerUids []string `protobuf:"bytes,7,rep,name=destination_load_balancer_uids,json=destinationLoadBalancerUids,proto3" json:"destination_load_balancer_uids,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *DigitalOceanFirewallOutboundRule) Reset() {
	*x = DigitalOceanFirewallOutboundRule{}
	mi := &file_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DigitalOceanFirewallOutboundRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalOceanFirewallOutboundRule) ProtoMessage() {}

func (x *DigitalOceanFirewallOutboundRule) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalOceanFirewallOutboundRule.ProtoReflect.Descriptor instead.
func (*DigitalOceanFirewallOutboundRule) Descriptor() ([]byte, []int) {
	return file_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *DigitalOceanFirewallOutboundRule) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *DigitalOceanFirewallOutboundRule) GetPortRange() string {
	if x != nil {
		return x.PortRange
	}
	return ""
}

func (x *DigitalOceanFirewallOutboundRule) GetDestinationAddresses() []string {
	if x != nil {
		return x.DestinationAddresses
	}
	return nil
}

func (x *DigitalOceanFirewallOutboundRule) GetDestinationDropletIds() []int64 {
	if x != nil {
		return x.DestinationDropletIds
	}
	return nil
}

func (x *DigitalOceanFirewallOutboundRule) GetDestinationTags() []string {
	if x != nil {
		return x.DestinationTags
	}
	return nil
}

func (x *DigitalOceanFirewallOutboundRule) GetDestinationKubernetesIds() []string {
	if x != nil {
		return x.DestinationKubernetesIds
	}
	return nil
}

func (x *DigitalOceanFirewallOutboundRule) GetDestinationLoadBalancerUids() []string {
	if x != nil {
		return x.DestinationLoadBalancerUids
	}
	return nil
}

var File_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto_rawDesc = "" +
	"\n" +
	"Hproject/planton/provider/digitalocean/digitaloceanfirewall/v1/spec.proto\x12=project.planton.provider.digitalocean.digitaloceanfirewall.v1\x1a\x1bbuf/validate/validate.proto\x1a6project/planton/shared/foreignkey/v1/foreign_key.proto\x1a,project/planton/shared/options/options.proto\x1a2project/planton/provider/digitalocean/region.proto\"\xf2\x02\n" +
	"\x18DigitalOceanFirewallSpec\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x83\x01\n" +
	"\rinbound_rules\x18\x02 \x03(\v2^.project.planton.provider.digitalocean.digitaloceanfirewall.v1.DigitalOceanFirewallInboundRuleR\finboundRules\x12\x86\x01\n" +
	"\x0eoutbound_rules\x18\x03 \x03(\v2_.project.planton.provider.digitalocean.digitaloceanfirewall.v1.DigitalOceanFirewallOutboundRuleR\routboundRules\x12\x1f\n" +
	"\vdroplet_ids\x18\x04 \x03(\x03R\n" +
	"dropletIds\x12\x12\n" +
	"\x04tags\x18\x05 \x03(\tR\x04tags\"\xc5\x02\n" +
	"\x1fDigitalOceanFirewallInboundRule\x12\x1a\n" +
	"\bprotocol\x18\x01 \x01(\tR\bprotocol\x12\x1d\n" +
	"\n" +
	"port_range\x18\x02 \x01(\tR\tportRange\x12)\n" +
	"\x10source_addresses\x18\x03 \x03(\tR\x0fsourceAddresses\x12,\n" +
	"\x12source_droplet_ids\x18\x04 \x03(\x03R\x10sourceDropletIds\x12\x1f\n" +
	"\vsource_tags\x18\x05 \x03(\tR\n" +
	"sourceTags\x122\n" +
	"\x15source_kubernetes_ids\x18\x06 \x03(\tR\x13sourceKubernetesIds\x129\n" +
	"\x19source_load_balancer_uids\x18\a \x03(\tR\x16sourceLoadBalancerUids\"\xf8\x02\n" +
	" DigitalOceanFirewallOutboundRule\x12\x1a\n" +
	"\bprotocol\x18\x01 \x01(\tR\bprotocol\x12\x1d\n" +
	"\n" +
	"port_range\x18\x02 \x01(\tR\tportRange\x123\n" +
	"\x15destination_addresses\x18\x03 \x03(\tR\x14destinationAddresses\x126\n" +
	"\x17destination_droplet_ids\x18\x04 \x03(\x03R\x15destinationDropletIds\x12)\n" +
	"\x10destination_tags\x18\x05 \x03(\tR\x0fdestinationTags\x12<\n" +
	"\x1adestination_kubernetes_ids\x18\x06 \x03(\tR\x18destinationKubernetesIds\x12C\n" +
	"\x1edestination_load_balancer_uids\x18\a \x03(\tR\x1bdestinationLoadBalancerUidsB\xf0\x03\n" +
	"Acom.project.planton.provider.digitalocean.digitaloceanfirewall.v1B\tSpecProtoP\x01Z\x84\x01github.com/project-planton/project-planton/apis/project/planton/provider/digitalocean/digitaloceanfirewall/v1;digitaloceanfirewallv1\xa2\x02\x05PPPDD\xaa\x02=Project.Planton.Provider.Digitalocean.Digitaloceanfirewall.V1\xca\x02=Project\\Planton\\Provider\\Digitalocean\\Digitaloceanfirewall\\V1\xe2\x02IProject\\Planton\\Provider\\Digitalocean\\Digitaloceanfirewall\\V1\\GPBMetadata\xea\x02BProject::Planton::Provider::Digitalocean::Digitaloceanfirewall::V1b\x06proto3"

var (
	file_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto_rawDescData []byte
)

func file_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto_rawDesc), len(file_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto_rawDescData
}

var file_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto_goTypes = []any{
	(*DigitalOceanFirewallSpec)(nil),         // 0: project.planton.provider.digitalocean.digitaloceanfirewall.v1.DigitalOceanFirewallSpec
	(*DigitalOceanFirewallInboundRule)(nil),  // 1: project.planton.provider.digitalocean.digitaloceanfirewall.v1.DigitalOceanFirewallInboundRule
	(*DigitalOceanFirewallOutboundRule)(nil), // 2: project.planton.provider.digitalocean.digitaloceanfirewall.v1.DigitalOceanFirewallOutboundRule
}
var file_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto_depIdxs = []int32{
	1, // 0: project.planton.provider.digitalocean.digitaloceanfirewall.v1.DigitalOceanFirewallSpec.inbound_rules:type_name -> project.planton.provider.digitalocean.digitaloceanfirewall.v1.DigitalOceanFirewallInboundRule
	2, // 1: project.planton.provider.digitalocean.digitaloceanfirewall.v1.DigitalOceanFirewallSpec.outbound_rules:type_name -> project.planton.provider.digitalocean.digitaloceanfirewall.v1.DigitalOceanFirewallOutboundRule
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto_init() }
func file_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto_init() {
	if File_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto_rawDesc), len(file_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto = out.File
	file_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto_goTypes = nil
	file_project_planton_provider_digitalocean_digitaloceanfirewall_v1_spec_proto_depIdxs = nil
}
