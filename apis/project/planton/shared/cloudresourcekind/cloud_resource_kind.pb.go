// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/shared/cloudresourcekind/cloud_resource_kind.proto

package cloudresourcekind

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CloudResourceKind int32

const (
	// 0: Default/unspecified
	CloudResourceKind_unspecified CloudResourceKind = 0
	// 1–49: Test/dev/custom
	CloudResourceKind_FirstTestCloudApiResource  CloudResourceKind = 1
	CloudResourceKind_SecondTestCloudApiResource CloudResourceKind = 2
	CloudResourceKind_ThirdTestCloudApiResource  CloudResourceKind = 3
	// 50–199: saas platform resources
	CloudResourceKind_ConfluentKafka    CloudResourceKind = 50
	CloudResourceKind_MongodbAtlas      CloudResourceKind = 51
	CloudResourceKind_SnowflakeDatabase CloudResourceKind = 52
	// 200–399: AWS resources
	CloudResourceKind_AwsAlb             CloudResourceKind = 200
	CloudResourceKind_AwsCertManagerCert CloudResourceKind = 201
	CloudResourceKind_AwsCloudFront      CloudResourceKind = 202
	CloudResourceKind_AwsDynamodb        CloudResourceKind = 203
	CloudResourceKind_AwsEcrRepo         CloudResourceKind = 204
	CloudResourceKind_AwsEcsCluster      CloudResourceKind = 205
	CloudResourceKind_AwsEcsService      CloudResourceKind = 206
	CloudResourceKind_AwsEksCluster      CloudResourceKind = 207
	CloudResourceKind_AwsIamRole         CloudResourceKind = 208
	CloudResourceKind_AwsLambda          CloudResourceKind = 209
	CloudResourceKind_AwsRdsCluster      CloudResourceKind = 210
	CloudResourceKind_AwsRdsInstance     CloudResourceKind = 211
	CloudResourceKind_AwsRoute53Zone     CloudResourceKind = 212
	CloudResourceKind_AwsS3Bucket        CloudResourceKind = 213
	CloudResourceKind_AwsSecretsManager  CloudResourceKind = 214
	CloudResourceKind_AwsSecurityGroup   CloudResourceKind = 215
	CloudResourceKind_AwsStaticWebsite   CloudResourceKind = 216
	CloudResourceKind_AwsVpc             CloudResourceKind = 217
	CloudResourceKind_AwsEksNodeGroup    CloudResourceKind = 218
	CloudResourceKind_AwsIamUser         CloudResourceKind = 219
	CloudResourceKind_AwsKmsKey          CloudResourceKind = 220
	CloudResourceKind_AwsEc2Instance     CloudResourceKind = 221
	CloudResourceKind_AwsClientVpn       CloudResourceKind = 222
	// 400–599: Azure resources
	CloudResourceKind_AzureAksCluster        CloudResourceKind = 400
	CloudResourceKind_AzureAksNodePool       CloudResourceKind = 401
	CloudResourceKind_AzureContainerRegistry CloudResourceKind = 402
	CloudResourceKind_AzureDnsZone           CloudResourceKind = 403
	CloudResourceKind_AzureKeyVault          CloudResourceKind = 404
	CloudResourceKind_AzureVpc               CloudResourceKind = 405
	CloudResourceKind_AzureNatGateway        CloudResourceKind = 406
	// 600–799: GCP resources
	CloudResourceKind_GcpArtifactRegistryRepo       CloudResourceKind = 600
	CloudResourceKind_GcpCloudCdn                   CloudResourceKind = 601
	CloudResourceKind_GcpCloudFunction              CloudResourceKind = 602
	CloudResourceKind_GcpCloudRun                   CloudResourceKind = 603
	CloudResourceKind_GcpCloudSql                   CloudResourceKind = 604
	CloudResourceKind_GcpDnsZone                    CloudResourceKind = 605
	CloudResourceKind_GcpGcsBucket                  CloudResourceKind = 606
	CloudResourceKind_GcpGkeAddonBundle             CloudResourceKind = 607
	CloudResourceKind_GcpGkeCluster                 CloudResourceKind = 608
	CloudResourceKind_GcpSecretsManager             CloudResourceKind = 609
	CloudResourceKind_GcpStaticWebsite              CloudResourceKind = 610
	CloudResourceKind_GcpProject                    CloudResourceKind = 611
	CloudResourceKind_GcpVpc                        CloudResourceKind = 612
	CloudResourceKind_GcpSubnetwork                 CloudResourceKind = 613
	CloudResourceKind_GcpRouterNat                  CloudResourceKind = 614
	CloudResourceKind_GcpGkeClusterCore             CloudResourceKind = 615
	CloudResourceKind_GcpGkeNodePool                CloudResourceKind = 616
	CloudResourceKind_GcpServiceAccount             CloudResourceKind = 617
	CloudResourceKind_GcpGkeWorkloadIdentityBinding CloudResourceKind = 618
	// 800–999: Kubernetes resources
	CloudResourceKind_ArgocdKubernetes           CloudResourceKind = 800
	CloudResourceKind_CronJobKubernetes          CloudResourceKind = 801
	CloudResourceKind_ElasticsearchKubernetes    CloudResourceKind = 802
	CloudResourceKind_GitlabKubernetes           CloudResourceKind = 803
	CloudResourceKind_GrafanaKubernetes          CloudResourceKind = 804
	CloudResourceKind_HelmRelease                CloudResourceKind = 805
	CloudResourceKind_JenkinsKubernetes          CloudResourceKind = 806
	CloudResourceKind_KafkaKubernetes            CloudResourceKind = 807
	CloudResourceKind_KeycloakKubernetes         CloudResourceKind = 808
	CloudResourceKind_KubernetesHttpEndpoint     CloudResourceKind = 809
	CloudResourceKind_LocustKubernetes           CloudResourceKind = 810
	CloudResourceKind_MicroserviceKubernetes     CloudResourceKind = 811
	CloudResourceKind_MongodbKubernetes          CloudResourceKind = 812
	CloudResourceKind_Neo4jKubernetes            CloudResourceKind = 813
	CloudResourceKind_OpenFgaKubernetes          CloudResourceKind = 814
	CloudResourceKind_PostgresKubernetes         CloudResourceKind = 815
	CloudResourceKind_PrometheusKubernetes       CloudResourceKind = 816
	CloudResourceKind_RedisKubernetes            CloudResourceKind = 817
	CloudResourceKind_SignozKubernetes           CloudResourceKind = 818
	CloudResourceKind_SolrKubernetes             CloudResourceKind = 819
	CloudResourceKind_StackJobRunnerKubernetes   CloudResourceKind = 820
	CloudResourceKind_TemporalKubernetes         CloudResourceKind = 821
	CloudResourceKind_NatsKubernetes             CloudResourceKind = 822
	CloudResourceKind_CertManagerKubernetes      CloudResourceKind = 823
	CloudResourceKind_ElasticOperatorKubernetes  CloudResourceKind = 824
	CloudResourceKind_ExternalDnsKubernetes      CloudResourceKind = 825
	CloudResourceKind_IngressNginxKubernetes     CloudResourceKind = 826
	CloudResourceKind_IstioKubernetes            CloudResourceKind = 827
	CloudResourceKind_KafkaOperatorKubernetes    CloudResourceKind = 828
	CloudResourceKind_PostgresOperatorKubernetes CloudResourceKind = 829
	CloudResourceKind_SolrOperatorKubernetes     CloudResourceKind = 830
	CloudResourceKind_ExternalSecretsKubernetes  CloudResourceKind = 831
	// 1200–1499: DigitalOcean resources
	CloudResourceKind_DigitalOceanAppPlatformService CloudResourceKind = 1200
	CloudResourceKind_DigitalOceanBucket             CloudResourceKind = 1201
	CloudResourceKind_DigitalOceanContainerRegistry  CloudResourceKind = 1202
	CloudResourceKind_DigitalOceanDatabaseCluster    CloudResourceKind = 1203
	CloudResourceKind_DigitalOceanDnsZone            CloudResourceKind = 1204
	CloudResourceKind_DigitalOceanDroplet            CloudResourceKind = 1205
	CloudResourceKind_DigitalOceanFirewall           CloudResourceKind = 1206
	CloudResourceKind_DigitalOceanFunction           CloudResourceKind = 1207
	CloudResourceKind_DigitalOceanKubernetesCluster  CloudResourceKind = 1208
	CloudResourceKind_DigitalOceanKubernetesNodePool CloudResourceKind = 1209
	CloudResourceKind_DigitalOceanLoadBalancer       CloudResourceKind = 1210
	CloudResourceKind_DigitalOceanVolume             CloudResourceKind = 1211
	CloudResourceKind_DigitalOceanVpc                CloudResourceKind = 1212
	CloudResourceKind_DigitalOceanCertificate        CloudResourceKind = 1213
	// 1500–1799: Civo resources
	CloudResourceKind_CivoBucket             CloudResourceKind = 1500
	CloudResourceKind_CivoCertificate        CloudResourceKind = 1501
	CloudResourceKind_CivoComputeInstance    CloudResourceKind = 1502
	CloudResourceKind_CivoDatabase           CloudResourceKind = 1503
	CloudResourceKind_CivoDnsZone            CloudResourceKind = 1504
	CloudResourceKind_CivoFirewall           CloudResourceKind = 1505
	CloudResourceKind_CivoIpAddress          CloudResourceKind = 1506
	CloudResourceKind_CivoKubernetesCluster  CloudResourceKind = 1507
	CloudResourceKind_CivoKubernetesNodePool CloudResourceKind = 1508
	CloudResourceKind_CivoLoadBalancer       CloudResourceKind = 1509
	CloudResourceKind_CivoVolume             CloudResourceKind = 1510
	CloudResourceKind_CivoVpc                CloudResourceKind = 1511
	// 1800–2099: Cloudflare resources
	CloudResourceKind_CloudflareDnsZone                    CloudResourceKind = 1800
	CloudResourceKind_CloudflareKvNamespace                CloudResourceKind = 1801
	CloudResourceKind_CloudflareR2Bucket                   CloudResourceKind = 1802
	CloudResourceKind_CloudflareWorker                     CloudResourceKind = 1803
	CloudResourceKind_CloudflareLoadBalancer               CloudResourceKind = 1804
	CloudResourceKind_CloudflareD1Database                 CloudResourceKind = 1805
	CloudResourceKind_CloudflareZeroTrustAccessApplication CloudResourceKind = 1806
)

// Enum value maps for CloudResourceKind.
var (
	CloudResourceKind_name = map[int32]string{
		0:    "unspecified",
		1:    "FirstTestCloudApiResource",
		2:    "SecondTestCloudApiResource",
		3:    "ThirdTestCloudApiResource",
		50:   "ConfluentKafka",
		51:   "MongodbAtlas",
		52:   "SnowflakeDatabase",
		200:  "AwsAlb",
		201:  "AwsCertManagerCert",
		202:  "AwsCloudFront",
		203:  "AwsDynamodb",
		204:  "AwsEcrRepo",
		205:  "AwsEcsCluster",
		206:  "AwsEcsService",
		207:  "AwsEksCluster",
		208:  "AwsIamRole",
		209:  "AwsLambda",
		210:  "AwsRdsCluster",
		211:  "AwsRdsInstance",
		212:  "AwsRoute53Zone",
		213:  "AwsS3Bucket",
		214:  "AwsSecretsManager",
		215:  "AwsSecurityGroup",
		216:  "AwsStaticWebsite",
		217:  "AwsVpc",
		218:  "AwsEksNodeGroup",
		219:  "AwsIamUser",
		220:  "AwsKmsKey",
		221:  "AwsEc2Instance",
		222:  "AwsClientVpn",
		400:  "AzureAksCluster",
		401:  "AzureAksNodePool",
		402:  "AzureContainerRegistry",
		403:  "AzureDnsZone",
		404:  "AzureKeyVault",
		405:  "AzureVpc",
		406:  "AzureNatGateway",
		600:  "GcpArtifactRegistryRepo",
		601:  "GcpCloudCdn",
		602:  "GcpCloudFunction",
		603:  "GcpCloudRun",
		604:  "GcpCloudSql",
		605:  "GcpDnsZone",
		606:  "GcpGcsBucket",
		607:  "GcpGkeAddonBundle",
		608:  "GcpGkeCluster",
		609:  "GcpSecretsManager",
		610:  "GcpStaticWebsite",
		611:  "GcpProject",
		612:  "GcpVpc",
		613:  "GcpSubnetwork",
		614:  "GcpRouterNat",
		615:  "GcpGkeClusterCore",
		616:  "GcpGkeNodePool",
		617:  "GcpServiceAccount",
		618:  "GcpGkeWorkloadIdentityBinding",
		800:  "ArgocdKubernetes",
		801:  "CronJobKubernetes",
		802:  "ElasticsearchKubernetes",
		803:  "GitlabKubernetes",
		804:  "GrafanaKubernetes",
		805:  "HelmRelease",
		806:  "JenkinsKubernetes",
		807:  "KafkaKubernetes",
		808:  "KeycloakKubernetes",
		809:  "KubernetesHttpEndpoint",
		810:  "LocustKubernetes",
		811:  "MicroserviceKubernetes",
		812:  "MongodbKubernetes",
		813:  "Neo4jKubernetes",
		814:  "OpenFgaKubernetes",
		815:  "PostgresKubernetes",
		816:  "PrometheusKubernetes",
		817:  "RedisKubernetes",
		818:  "SignozKubernetes",
		819:  "SolrKubernetes",
		820:  "StackJobRunnerKubernetes",
		821:  "TemporalKubernetes",
		822:  "NatsKubernetes",
		823:  "CertManagerKubernetes",
		824:  "ElasticOperatorKubernetes",
		825:  "ExternalDnsKubernetes",
		826:  "IngressNginxKubernetes",
		827:  "IstioKubernetes",
		828:  "KafkaOperatorKubernetes",
		829:  "PostgresOperatorKubernetes",
		830:  "SolrOperatorKubernetes",
		831:  "ExternalSecretsKubernetes",
		1200: "DigitalOceanAppPlatformService",
		1201: "DigitalOceanBucket",
		1202: "DigitalOceanContainerRegistry",
		1203: "DigitalOceanDatabaseCluster",
		1204: "DigitalOceanDnsZone",
		1205: "DigitalOceanDroplet",
		1206: "DigitalOceanFirewall",
		1207: "DigitalOceanFunction",
		1208: "DigitalOceanKubernetesCluster",
		1209: "DigitalOceanKubernetesNodePool",
		1210: "DigitalOceanLoadBalancer",
		1211: "DigitalOceanVolume",
		1212: "DigitalOceanVpc",
		1213: "DigitalOceanCertificate",
		1500: "CivoBucket",
		1501: "CivoCertificate",
		1502: "CivoComputeInstance",
		1503: "CivoDatabase",
		1504: "CivoDnsZone",
		1505: "CivoFirewall",
		1506: "CivoIpAddress",
		1507: "CivoKubernetesCluster",
		1508: "CivoKubernetesNodePool",
		1509: "CivoLoadBalancer",
		1510: "CivoVolume",
		1511: "CivoVpc",
		1800: "CloudflareDnsZone",
		1801: "CloudflareKvNamespace",
		1802: "CloudflareR2Bucket",
		1803: "CloudflareWorker",
		1804: "CloudflareLoadBalancer",
		1805: "CloudflareD1Database",
		1806: "CloudflareZeroTrustAccessApplication",
	}
	CloudResourceKind_value = map[string]int32{
		"unspecified":                          0,
		"FirstTestCloudApiResource":            1,
		"SecondTestCloudApiResource":           2,
		"ThirdTestCloudApiResource":            3,
		"ConfluentKafka":                       50,
		"MongodbAtlas":                         51,
		"SnowflakeDatabase":                    52,
		"AwsAlb":                               200,
		"AwsCertManagerCert":                   201,
		"AwsCloudFront":                        202,
		"AwsDynamodb":                          203,
		"AwsEcrRepo":                           204,
		"AwsEcsCluster":                        205,
		"AwsEcsService":                        206,
		"AwsEksCluster":                        207,
		"AwsIamRole":                           208,
		"AwsLambda":                            209,
		"AwsRdsCluster":                        210,
		"AwsRdsInstance":                       211,
		"AwsRoute53Zone":                       212,
		"AwsS3Bucket":                          213,
		"AwsSecretsManager":                    214,
		"AwsSecurityGroup":                     215,
		"AwsStaticWebsite":                     216,
		"AwsVpc":                               217,
		"AwsEksNodeGroup":                      218,
		"AwsIamUser":                           219,
		"AwsKmsKey":                            220,
		"AwsEc2Instance":                       221,
		"AwsClientVpn":                         222,
		"AzureAksCluster":                      400,
		"AzureAksNodePool":                     401,
		"AzureContainerRegistry":               402,
		"AzureDnsZone":                         403,
		"AzureKeyVault":                        404,
		"AzureVpc":                             405,
		"AzureNatGateway":                      406,
		"GcpArtifactRegistryRepo":              600,
		"GcpCloudCdn":                          601,
		"GcpCloudFunction":                     602,
		"GcpCloudRun":                          603,
		"GcpCloudSql":                          604,
		"GcpDnsZone":                           605,
		"GcpGcsBucket":                         606,
		"GcpGkeAddonBundle":                    607,
		"GcpGkeCluster":                        608,
		"GcpSecretsManager":                    609,
		"GcpStaticWebsite":                     610,
		"GcpProject":                           611,
		"GcpVpc":                               612,
		"GcpSubnetwork":                        613,
		"GcpRouterNat":                         614,
		"GcpGkeClusterCore":                    615,
		"GcpGkeNodePool":                       616,
		"GcpServiceAccount":                    617,
		"GcpGkeWorkloadIdentityBinding":        618,
		"ArgocdKubernetes":                     800,
		"CronJobKubernetes":                    801,
		"ElasticsearchKubernetes":              802,
		"GitlabKubernetes":                     803,
		"GrafanaKubernetes":                    804,
		"HelmRelease":                          805,
		"JenkinsKubernetes":                    806,
		"KafkaKubernetes":                      807,
		"KeycloakKubernetes":                   808,
		"KubernetesHttpEndpoint":               809,
		"LocustKubernetes":                     810,
		"MicroserviceKubernetes":               811,
		"MongodbKubernetes":                    812,
		"Neo4jKubernetes":                      813,
		"OpenFgaKubernetes":                    814,
		"PostgresKubernetes":                   815,
		"PrometheusKubernetes":                 816,
		"RedisKubernetes":                      817,
		"SignozKubernetes":                     818,
		"SolrKubernetes":                       819,
		"StackJobRunnerKubernetes":             820,
		"TemporalKubernetes":                   821,
		"NatsKubernetes":                       822,
		"CertManagerKubernetes":                823,
		"ElasticOperatorKubernetes":            824,
		"ExternalDnsKubernetes":                825,
		"IngressNginxKubernetes":               826,
		"IstioKubernetes":                      827,
		"KafkaOperatorKubernetes":              828,
		"PostgresOperatorKubernetes":           829,
		"SolrOperatorKubernetes":               830,
		"ExternalSecretsKubernetes":            831,
		"DigitalOceanAppPlatformService":       1200,
		"DigitalOceanBucket":                   1201,
		"DigitalOceanContainerRegistry":        1202,
		"DigitalOceanDatabaseCluster":          1203,
		"DigitalOceanDnsZone":                  1204,
		"DigitalOceanDroplet":                  1205,
		"DigitalOceanFirewall":                 1206,
		"DigitalOceanFunction":                 1207,
		"DigitalOceanKubernetesCluster":        1208,
		"DigitalOceanKubernetesNodePool":       1209,
		"DigitalOceanLoadBalancer":             1210,
		"DigitalOceanVolume":                   1211,
		"DigitalOceanVpc":                      1212,
		"DigitalOceanCertificate":              1213,
		"CivoBucket":                           1500,
		"CivoCertificate":                      1501,
		"CivoComputeInstance":                  1502,
		"CivoDatabase":                         1503,
		"CivoDnsZone":                          1504,
		"CivoFirewall":                         1505,
		"CivoIpAddress":                        1506,
		"CivoKubernetesCluster":                1507,
		"CivoKubernetesNodePool":               1508,
		"CivoLoadBalancer":                     1509,
		"CivoVolume":                           1510,
		"CivoVpc":                              1511,
		"CloudflareDnsZone":                    1800,
		"CloudflareKvNamespace":                1801,
		"CloudflareR2Bucket":                   1802,
		"CloudflareWorker":                     1803,
		"CloudflareLoadBalancer":               1804,
		"CloudflareD1Database":                 1805,
		"CloudflareZeroTrustAccessApplication": 1806,
	}
)

func (x CloudResourceKind) Enum() *CloudResourceKind {
	p := new(CloudResourceKind)
	*p = x
	return p
}

func (x CloudResourceKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudResourceKind) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_enumTypes[0].Descriptor()
}

func (CloudResourceKind) Type() protoreflect.EnumType {
	return &file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_enumTypes[0]
}

func (x CloudResourceKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloudResourceKind.Descriptor instead.
func (CloudResourceKind) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_rawDescGZIP(), []int{0}
}

// api-resource-kind cloud-resource meta
type CloudResourceKindMeta struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// cloud-resource provider
	Provider CloudResourceProvider `protobuf:"varint,1,opt,name=provider,proto3,enum=project.planton.shared.cloudresourcekind.CloudResourceProvider" json:"provider,omitempty"`
	// cloud-resource id-prefix
	IdPrefix string `protobuf:"bytes,2,opt,name=id_prefix,json=idPrefix,proto3" json:"id_prefix,omitempty"`
	// flag indicating whether the cloud-resource kind can be used to launch a service.
	IsServiceKind bool `protobuf:"varint,3,opt,name=is_service_kind,json=isServiceKind,proto3" json:"is_service_kind,omitempty"`
	// kubernetes metadata. only applicable when provider is kubernetes
	KubernetesMeta *KubernetesCloudResourceKindMeta `protobuf:"bytes,4,opt,name=kubernetes_meta,json=kubernetesMeta,proto3" json:"kubernetes_meta,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CloudResourceKindMeta) Reset() {
	*x = CloudResourceKindMeta{}
	mi := &file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudResourceKindMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudResourceKindMeta) ProtoMessage() {}

func (x *CloudResourceKindMeta) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudResourceKindMeta.ProtoReflect.Descriptor instead.
func (*CloudResourceKindMeta) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_rawDescGZIP(), []int{0}
}

func (x *CloudResourceKindMeta) GetProvider() CloudResourceProvider {
	if x != nil {
		return x.Provider
	}
	return CloudResourceProvider_cloud_resource_provider_unspecified
}

func (x *CloudResourceKindMeta) GetIdPrefix() string {
	if x != nil {
		return x.IdPrefix
	}
	return ""
}

func (x *CloudResourceKindMeta) GetIsServiceKind() bool {
	if x != nil {
		return x.IsServiceKind
	}
	return false
}

func (x *CloudResourceKindMeta) GetKubernetesMeta() *KubernetesCloudResourceKindMeta {
	if x != nil {
		return x.KubernetesMeta
	}
	return nil
}

// kubernetes cloud-resource kind meta
type KubernetesCloudResourceKindMeta struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// prefix to be used for kubernetes namespace
	// this is only applicable when provider is kubernetes
	NamespacePrefix string `protobuf:"bytes,1,opt,name=namespace_prefix,json=namespacePrefix,proto3" json:"namespace_prefix,omitempty"`
	// category of the kubernetes cloud-resource kind
	Category      KubernetesCloudResourceType `protobuf:"varint,2,opt,name=category,proto3,enum=project.planton.shared.cloudresourcekind.KubernetesCloudResourceType" json:"category,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KubernetesCloudResourceKindMeta) Reset() {
	*x = KubernetesCloudResourceKindMeta{}
	mi := &file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubernetesCloudResourceKindMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesCloudResourceKindMeta) ProtoMessage() {}

func (x *KubernetesCloudResourceKindMeta) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesCloudResourceKindMeta.ProtoReflect.Descriptor instead.
func (*KubernetesCloudResourceKindMeta) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_rawDescGZIP(), []int{1}
}

func (x *KubernetesCloudResourceKindMeta) GetNamespacePrefix() string {
	if x != nil {
		return x.NamespacePrefix
	}
	return ""
}

func (x *KubernetesCloudResourceKindMeta) GetCategory() KubernetesCloudResourceType {
	if x != nil {
		return x.Category
	}
	return KubernetesCloudResourceType_kubernetes_cloud_resource_type_unspecified
}

var file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*CloudResourceKindMeta)(nil),
		Field:         10100,
		Name:          "project.planton.shared.cloudresourcekind.meta",
		Tag:           "bytes,10100,opt,name=meta",
		Filename:      "project/planton/shared/cloudresourcekind/cloud_resource_kind.proto",
	},
}

// Extension fields to descriptorpb.EnumValueOptions.
var (
	// optional project.planton.shared.cloudresourcekind.CloudResourceKindMeta meta = 10100;
	E_Meta = &file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_extTypes[0]
)

var File_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto protoreflect.FileDescriptor

const file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_rawDesc = "" +
	"\n" +
	"Bproject/planton/shared/cloudresourcekind/cloud_resource_kind.proto\x12(project.planton.shared.cloudresourcekind\x1a google/protobuf/descriptor.proto\x1aFproject/planton/shared/cloudresourcekind/cloud_resource_provider.proto\x1a9project/planton/shared/cloudresourcekind/kubernetes.proto\"\xad\x02\n" +
	"\x15CloudResourceKindMeta\x12[\n" +
	"\bprovider\x18\x01 \x01(\x0e2?.project.planton.shared.cloudresourcekind.CloudResourceProviderR\bprovider\x12\x1b\n" +
	"\tid_prefix\x18\x02 \x01(\tR\bidPrefix\x12&\n" +
	"\x0fis_service_kind\x18\x03 \x01(\bR\risServiceKind\x12r\n" +
	"\x0fkubernetes_meta\x18\x04 \x01(\v2I.project.planton.shared.cloudresourcekind.KubernetesCloudResourceKindMetaR\x0ekubernetesMeta\"\xaf\x01\n" +
	"\x1fKubernetesCloudResourceKindMeta\x12)\n" +
	"\x10namespace_prefix\x18\x01 \x01(\tR\x0fnamespacePrefix\x12a\n" +
	"\bcategory\x18\x02 \x01(\x0e2E.project.planton.shared.cloudresourcekind.KubernetesCloudResourceTypeR\bcategory*\xc1'\n" +
	"\x11CloudResourceKind\x12\x0f\n" +
	"\vunspecified\x10\x00\x12,\n" +
	"\x19FirstTestCloudApiResource\x10\x01\x1a\r\xa2\xf7\x04\t\b\x01\x12\x05tcar1\x12-\n" +
	"\x1aSecondTestCloudApiResource\x10\x02\x1a\r\xa2\xf7\x04\t\b\x01\x12\x05tcar2\x12,\n" +
	"\x19ThirdTestCloudApiResource\x10\x03\x1a\r\xa2\xf7\x04\t\b\x01\x12\x05tcar3\x12\"\n" +
	"\x0eConfluentKafka\x102\x1a\x0e\xa2\xf7\x04\n" +
	"\b\a\x12\x06conkaf\x12 \n" +
	"\fMongodbAtlas\x103\x1a\x0e\xa2\xf7\x04\n" +
	"\b\x02\x12\x06mdbatl\x12%\n" +
	"\x11SnowflakeDatabase\x104\x1a\x0e\xa2\xf7\x04\n" +
	"\b\v\x12\x06snowdb\x12\x1b\n" +
	"\x06AwsAlb\x10\xc8\x01\x1a\x0e\xa2\xf7\x04\n" +
	"\b\x03\x12\x06awsalb\x12(\n" +
	"\x12AwsCertManagerCert\x10\xc9\x01\x1a\x0f\xa2\xf7\x04\v\b\x03\x12\aacmcert\x12!\n" +
	"\rAwsCloudFront\x10\xca\x01\x1a\r\xa2\xf7\x04\t\b\x03\x12\x05awscf\x12 \n" +
	"\vAwsDynamodb\x10\xcb\x01\x1a\x0e\xa2\xf7\x04\n" +
	"\b\x03\x12\x06awsdyn\x12\x1c\n" +
	"\n" +
	"AwsEcrRepo\x10\xcc\x01\x1a\v\xa2\xf7\x04\a\b\x03\x12\x03ecr\x12\"\n" +
	"\rAwsEcsCluster\x10\xcd\x01\x1a\x0e\xa2\xf7\x04\n" +
	"\b\x03\x12\x06ecsclu\x12\"\n" +
	"\rAwsEcsService\x10\xce\x01\x1a\x0e\xa2\xf7\x04\n" +
	"\b\x03\x12\x06ecssvc\x12\x1f\n" +
	"\rAwsEksCluster\x10\xcf\x01\x1a\v\xa2\xf7\x04\a\b\x03\x12\x03eks\x12\x1c\n" +
	"\n" +
	"AwsIamRole\x10\xd0\x01\x1a\v\xa2\xf7\x04\a\b\x03\x12\x03air\x12\x1e\n" +
	"\tAwsLambda\x10\xd1\x01\x1a\x0e\xa2\xf7\x04\n" +
	"\b\x03\x12\x06lambda\x12\"\n" +
	"\rAwsRdsCluster\x10\xd2\x01\x1a\x0e\xa2\xf7\x04\n" +
	"\b\x03\x12\x06rdsclu\x12#\n" +
	"\x0eAwsRdsInstance\x10\xd3\x01\x1a\x0e\xa2\xf7\x04\n" +
	"\b\x03\x12\x06rdsins\x12!\n" +
	"\x0eAwsRoute53Zone\x10\xd4\x01\x1a\f\xa2\xf7\x04\b\b\x03\x12\x04r53z\x12\x1f\n" +
	"\vAwsS3Bucket\x10\xd5\x01\x1a\r\xa2\xf7\x04\t\b\x03\x12\x05s3bkt\x12%\n" +
	"\x11AwsSecretsManager\x10\xd6\x01\x1a\r\xa2\xf7\x04\t\b\x03\x12\x05awssm\x12$\n" +
	"\x10AwsSecurityGroup\x10\xd7\x01\x1a\r\xa2\xf7\x04\t\b\x03\x12\x05awssg\x12%\n" +
	"\x10AwsStaticWebsite\x10\xd8\x01\x1a\x0e\xa2\xf7\x04\n" +
	"\b\x03\x12\x06awsweb\x12\x1b\n" +
	"\x06AwsVpc\x10\xd9\x01\x1a\x0e\xa2\xf7\x04\n" +
	"\b\x03\x12\x06awsvpc\x12#\n" +
	"\x0fAwsEksNodeGroup\x10\xda\x01\x1a\r\xa2\xf7\x04\t\b\x03\x12\x05eksng\x12 \n" +
	"\n" +
	"AwsIamUser\x10\xdb\x01\x1a\x0f\xa2\xf7\x04\v\b\x03\x12\aawsuser\x12\x1e\n" +
	"\tAwsKmsKey\x10\xdc\x01\x1a\x0e\xa2\xf7\x04\n" +
	"\b\x03\x12\x06awskms\x12$\n" +
	"\x0eAwsEc2Instance\x10\xdd\x01\x1a\x0f\xa2\xf7\x04\v\b\x03\x12\aec2inst\x12!\n" +
	"\fAwsClientVpn\x10\xde\x01\x1a\x0e\xa2\xf7\x04\n" +
	"\b\x03\x12\x06awsvpn\x12!\n" +
	"\x0fAzureAksCluster\x10\x90\x03\x1a\v\xa2\xf7\x04\a\b\x04\x12\x03aks\x12$\n" +
	"\x10AzureAksNodePool\x10\x91\x03\x1a\r\xa2\xf7\x04\t\b\x04\x12\x05aksnp\x12(\n" +
	"\x16AzureContainerRegistry\x10\x92\x03\x1a\v\xa2\xf7\x04\a\b\x04\x12\x03acr\x12 \n" +
	"\fAzureDnsZone\x10\x93\x03\x1a\r\xa2\xf7\x04\t\b\x04\x12\x05azdns\x12 \n" +
	"\rAzureKeyVault\x10\x94\x03\x1a\f\xa2\xf7\x04\b\b\x04\x12\x04azkv\x12\x1c\n" +
	"\bAzureVpc\x10\x95\x03\x1a\r\xa2\xf7\x04\t\b\x04\x12\x05azvpc\x12#\n" +
	"\x0fAzureNatGateway\x10\x96\x03\x1a\r\xa2\xf7\x04\t\b\x04\x12\x05aznat\x12,\n" +
	"\x17GcpArtifactRegistryRepo\x10\xd8\x04\x1a\x0e\xa2\xf7\x04\n" +
	"\b\t\x12\x06gcpart\x12 \n" +
	"\vGcpCloudCdn\x10\xd9\x04\x1a\x0e\xa2\xf7\x04\n" +
	"\b\t\x12\x06gcpcdn\x12&\n" +
	"\x10GcpCloudFunction\x10\xda\x04\x1a\x0f\xa2\xf7\x04\v\b\t\x12\acldfunc\x12 \n" +
	"\vGcpCloudRun\x10\xdb\x04\x1a\x0e\xa2\xf7\x04\n" +
	"\b\t\x12\x06cldrun\x12 \n" +
	"\vGcpCloudSql\x10\xdc\x04\x1a\x0e\xa2\xf7\x04\n" +
	"\b\t\x12\x06gcpsql\x12\x1f\n" +
	"\n" +
	"GcpDnsZone\x10\xdd\x04\x1a\x0e\xa2\xf7\x04\n" +
	"\b\t\x12\x06gcpdns\x12!\n" +
	"\fGcpGcsBucket\x10\xde\x04\x1a\x0e\xa2\xf7\x04\n" +
	"\b\t\x12\x06gcsbkt\x12&\n" +
	"\x11GcpGkeAddonBundle\x10\xdf\x04\x1a\x0e\xa2\xf7\x04\n" +
	"\b\t\x12\x06gkeadd\x12\x1f\n" +
	"\rGcpGkeCluster\x10\xe0\x04\x1a\v\xa2\xf7\x04\a\b\t\x12\x03gke\x12%\n" +
	"\x11GcpSecretsManager\x10\xe1\x04\x1a\r\xa2\xf7\x04\t\b\t\x12\x05gcpsm\x12%\n" +
	"\x10GcpStaticWebsite\x10\xe2\x04\x1a\x0e\xa2\xf7\x04\n" +
	"\b\t\x12\x06gcpweb\x12\x1f\n" +
	"\n" +
	"GcpProject\x10\xe3\x04\x1a\x0e\xa2\xf7\x04\n" +
	"\b\t\x12\x06gcpprj\x12\x1b\n" +
	"\x06GcpVpc\x10\xe4\x04\x1a\x0e\xa2\xf7\x04\n" +
	"\b\t\x12\x06gcpvpc\x12\"\n" +
	"\rGcpSubnetwork\x10\xe5\x04\x1a\x0e\xa2\xf7\x04\n" +
	"\b\t\x12\x06gcpsnw\x12\"\n" +
	"\fGcpRouterNat\x10\xe6\x04\x1a\x0f\xa2\xf7\x04\v\b\t\x12\agcprnat\x12'\n" +
	"\x11GcpGkeClusterCore\x10\xe7\x04\x1a\x0f\xa2\xf7\x04\v\b\t\x12\agkecore\x12\"\n" +
	"\x0eGcpGkeNodePool\x10\xe8\x04\x1a\r\xa2\xf7\x04\t\b\t\x12\x05gkenp\x12#\n" +
	"\x11GcpServiceAccount\x10\xe9\x04\x1a\v\xa2\xf7\x04\a\b\t\x12\x03gsa\x122\n" +
	"\x1dGcpGkeWorkloadIdentityBinding\x10\xea\x04\x1a\x0e\xa2\xf7\x04\n" +
	"\b\t\x12\x06gkewib\x12/\n" +
	"\x10ArgocdKubernetes\x10\xa0\x06\x1a\x18\xa2\xf7\x04\x14\b\n" +
	"\x12\x06argk8s\"\b\n" +
	"\x04argo\x10\x02\x121\n" +
	"\x11CronJobKubernetes\x10\xa1\x06\x1a\x19\xa2\xf7\x04\x15\b\n" +
	"\x12\acronk8s\"\b\n" +
	"\x04cron\x10\x02\x12?\n" +
	"\x17ElasticsearchKubernetes\x10\xa2\x06\x1a!\xa2\xf7\x04\x1d\b\n" +
	"\x12\x06elak8s\"\x11\n" +
	"\relasticsearch\x10\x02\x120\n" +
	"\x10GitlabKubernetes\x10\xa3\x06\x1a\x19\xa2\xf7\x04\x15\b\n" +
	"\x12\x05glk8s\"\n" +
	"\n" +
	"\x06gitlab\x10\x02\x123\n" +
	"\x11GrafanaKubernetes\x10\xa4\x06\x1a\x1b\xa2\xf7\x04\x17\b\n" +
	"\x12\x06grak8s\"\v\n" +
	"\agrafana\x10\x02\x12*\n" +
	"\vHelmRelease\x10\xa5\x06\x1a\x18\xa2\xf7\x04\x14\b\n" +
	"\x12\x06hlmk8s\"\b\n" +
	"\x04helm\x10\x02\x123\n" +
	"\x11JenkinsKubernetes\x10\xa6\x06\x1a\x1b\xa2\xf7\x04\x17\b\n" +
	"\x12\x06jenk8s\"\v\n" +
	"\ajenkins\x10\x02\x12/\n" +
	"\x0fKafkaKubernetes\x10\xa7\x06\x1a\x19\xa2\xf7\x04\x15\b\n" +
	"\x12\x06kafk8s\"\t\n" +
	"\x05kafka\x10\x02\x125\n" +
	"\x12KeycloakKubernetes\x10\xa8\x06\x1a\x1c\xa2\xf7\x04\x18\b\n" +
	"\x12\x06keyk8s\"\f\n" +
	"\bkeycloak\x10\x02\x120\n" +
	"\x16KubernetesHttpEndpoint\x10\xa9\x06\x1a\x13\xa2\xf7\x04\x0f\b\n" +
	"\x12\ak8shttp\"\x02\x10\x02\x121\n" +
	"\x10LocustKubernetes\x10\xaa\x06\x1a\x1a\xa2\xf7\x04\x16\b\n" +
	"\x12\x06lock8s\"\n" +
	"\n" +
	"\x06locust\x10\x02\x129\n" +
	"\x16MicroserviceKubernetes\x10\xab\x06\x1a\x1c\xa2\xf7\x04\x18\b\n" +
	"\x12\x05msk8s\x18\x01\"\v\n" +
	"\aservice\x10\x02\x123\n" +
	"\x11MongodbKubernetes\x10\xac\x06\x1a\x1b\xa2\xf7\x04\x17\b\n" +
	"\x12\x06mdbk8s\"\v\n" +
	"\amongodb\x10\x02\x12/\n" +
	"\x0fNeo4jKubernetes\x10\xad\x06\x1a\x19\xa2\xf7\x04\x15\b\n" +
	"\x12\x06neok8s\"\t\n" +
	"\x05neo4j\x10\x02\x123\n" +
	"\x11OpenFgaKubernetes\x10\xae\x06\x1a\x1b\xa2\xf7\x04\x17\b\n" +
	"\x12\x06fgak8s\"\v\n" +
	"\aopenfga\x10\x02\x124\n" +
	"\x12PostgresKubernetes\x10\xaf\x06\x1a\x1b\xa2\xf7\x04\x17\b\n" +
	"\x12\x05pgk8s\"\f\n" +
	"\bpostgres\x10\x02\x129\n" +
	"\x14PrometheusKubernetes\x10\xb0\x06\x1a\x1e\xa2\xf7\x04\x1a\b\n" +
	"\x12\x06pmtk8s\"\x0e\n" +
	"\n" +
	"prometheus\x10\x02\x12/\n" +
	"\x0fRedisKubernetes\x10\xb1\x06\x1a\x19\xa2\xf7\x04\x15\b\n" +
	"\x12\x06redk8s\"\t\n" +
	"\x05redis\x10\x02\x121\n" +
	"\x10SignozKubernetes\x10\xb2\x06\x1a\x1a\xa2\xf7\x04\x16\b\n" +
	"\x12\x06sigk8s\"\n" +
	"\n" +
	"\x06signoz\x10\x02\x12-\n" +
	"\x0eSolrKubernetes\x10\xb3\x06\x1a\x18\xa2\xf7\x04\x14\b\n" +
	"\x12\x06solk8s\"\b\n" +
	"\x04solr\x10\x02\x126\n" +
	"\x18StackJobRunnerKubernetes\x10\xb4\x06\x1a\x17\xa2\xf7\x04\x13\b\n" +
	"\x12\x06sjrk8s\"\a\n" +
	"\x03sjr\x10\x02\x126\n" +
	"\x12TemporalKubernetes\x10\xb5\x06\x1a\x1d\xa2\xf7\x04\x19\b\n" +
	"\x12\atprlk8s\"\f\n" +
	"\btemporal\x10\x02\x12.\n" +
	"\x0eNatsKubernetes\x10\xb6\x06\x1a\x19\xa2\xf7\x04\x15\b\n" +
	"\x12\anatsk8s\"\b\n" +
	"\x04nats\x10\x02\x12-\n" +
	"\x15CertManagerKubernetes\x10\xb7\x06\x1a\x11\xa2\xf7\x04\r\b\n" +
	"\x12\x05cmk8s\"\x02\x10\x01\x124\n" +
	"\x19ElasticOperatorKubernetes\x10\xb8\x06\x1a\x14\xa2\xf7\x04\x10\b\n" +
	"\x12\belaopk8s\"\x02\x10\x01\x121\n" +
	"\x15ExternalDnsKubernetes\x10\xb9\x06\x1a\x15\xa2\xf7\x04\x11\b\n" +
	"\x12\textdnsk8s\"\x02\x10\x01\x12/\n" +
	"\x16IngressNginxKubernetes\x10\xba\x06\x1a\x12\xa2\xf7\x04\x0e\b\n" +
	"\x12\x06ngxk8s\"\x02\x10\x01\x12(\n" +
	"\x0fIstioKubernetes\x10\xbb\x06\x1a\x12\xa2\xf7\x04\x0e\b\n" +
	"\x12\x06istk8s\"\x02\x10\x01\x122\n" +
	"\x17KafkaOperatorKubernetes\x10\xbc\x06\x1a\x14\xa2\xf7\x04\x10\b\n" +
	"\x12\bkfkopk8s\"\x02\x10\x01\x124\n" +
	"\x1aPostgresOperatorKubernetes\x10\xbd\x06\x1a\x13\xa2\xf7\x04\x0f\b\n" +
	"\x12\apgopk8s\"\x02\x10\x01\x121\n" +
	"\x16SolrOperatorKubernetes\x10\xbe\x06\x1a\x14\xa2\xf7\x04\x10\b\n" +
	"\x12\bslropk8s\"\x02\x10\x01\x125\n" +
	"\x19ExternalSecretsKubernetes\x10\xbf\x06\x1a\x15\xa2\xf7\x04\x11\b\n" +
	"\x12\textseck8s\"\x02\x10\x01\x122\n" +
	"\x1eDigitalOceanAppPlatformService\x10\xb0\t\x1a\r\xa2\xf7\x04\t\b\b\x12\x05doapp\x12&\n" +
	"\x12DigitalOceanBucket\x10\xb1\t\x1a\r\xa2\xf7\x04\t\b\b\x12\x05dobkt\x120\n" +
	"\x1dDigitalOceanContainerRegistry\x10\xb2\t\x1a\f\xa2\xf7\x04\b\b\b\x12\x04docr\x12.\n" +
	"\x1bDigitalOceanDatabaseCluster\x10\xb3\t\x1a\f\xa2\xf7\x04\b\b\b\x12\x04dodb\x12'\n" +
	"\x13DigitalOceanDnsZone\x10\xb4\t\x1a\r\xa2\xf7\x04\t\b\b\x12\x05dodns\x12(\n" +
	"\x13DigitalOceanDroplet\x10\xb5\t\x1a\x0e\xa2\xf7\x04\n" +
	"\b\b\x12\x06dodrop\x12'\n" +
	"\x14DigitalOceanFirewall\x10\xb6\t\x1a\f\xa2\xf7\x04\b\b\b\x12\x04dofw\x12'\n" +
	"\x14DigitalOceanFunction\x10\xb7\t\x1a\f\xa2\xf7\x04\b\b\b\x12\x04dofn\x120\n" +
	"\x1dDigitalOceanKubernetesCluster\x10\xb8\t\x1a\f\xa2\xf7\x04\b\b\b\x12\x04dokc\x122\n" +
	"\x1eDigitalOceanKubernetesNodePool\x10\xb9\t\x1a\r\xa2\xf7\x04\t\b\b\x12\x05doknp\x12+\n" +
	"\x18DigitalOceanLoadBalancer\x10\xba\t\x1a\f\xa2\xf7\x04\b\b\b\x12\x04dolb\x12&\n" +
	"\x12DigitalOceanVolume\x10\xbb\t\x1a\r\xa2\xf7\x04\t\b\b\x12\x05dovol\x12#\n" +
	"\x0fDigitalOceanVpc\x10\xbc\t\x1a\r\xa2\xf7\x04\t\b\b\x12\x05dovpc\x12,\n" +
	"\x17DigitalOceanCertificate\x10\xbd\t\x1a\x0e\xa2\xf7\x04\n" +
	"\b\b\x12\x06docert\x12\x1e\n" +
	"\n" +
	"CivoBucket\x10\xdc\v\x1a\r\xa2\xf7\x04\t\b\x05\x12\x05cibkt\x12$\n" +
	"\x0fCivoCertificate\x10\xdd\v\x1a\x0e\xa2\xf7\x04\n" +
	"\b\x05\x12\x06cicert\x12(\n" +
	"\x13CivoComputeInstance\x10\xde\v\x1a\x0e\xa2\xf7\x04\n" +
	"\b\x05\x12\x06ciinst\x12\x1f\n" +
	"\fCivoDatabase\x10\xdf\v\x1a\f\xa2\xf7\x04\b\b\x05\x12\x04cidb\x12\x1f\n" +
	"\vCivoDnsZone\x10\xe0\v\x1a\r\xa2\xf7\x04\t\b\x05\x12\x05cidns\x12\x1f\n" +
	"\fCivoFirewall\x10\xe1\v\x1a\f\xa2\xf7\x04\b\b\x05\x12\x04cifw\x12 \n" +
	"\rCivoIpAddress\x10\xe2\v\x1a\f\xa2\xf7\x04\b\b\x05\x12\x04ciip\x12(\n" +
	"\x15CivoKubernetesCluster\x10\xe3\v\x1a\f\xa2\xf7\x04\b\b\x05\x12\x04cikc\x12*\n" +
	"\x16CivoKubernetesNodePool\x10\xe4\v\x1a\r\xa2\xf7\x04\t\b\x05\x12\x05ciknp\x12#\n" +
	"\x10CivoLoadBalancer\x10\xe5\v\x1a\f\xa2\xf7\x04\b\b\x05\x12\x04cilb\x12\x1e\n" +
	"\n" +
	"CivoVolume\x10\xe6\v\x1a\r\xa2\xf7\x04\t\b\x05\x12\x05civol\x12\x1b\n" +
	"\aCivoVpc\x10\xe7\v\x1a\r\xa2\xf7\x04\t\b\x05\x12\x05civpc\x12%\n" +
	"\x11CloudflareDnsZone\x10\x88\x0e\x1a\r\xa2\xf7\x04\t\b\x06\x12\x05cfdns\x12)\n" +
	"\x15CloudflareKvNamespace\x10\x89\x0e\x1a\r\xa2\xf7\x04\t\b\x06\x12\x05cfkvn\x12&\n" +
	"\x12CloudflareR2Bucket\x10\x8a\x0e\x1a\r\xa2\xf7\x04\t\b\x06\x12\x05cfr2b\x12$\n" +
	"\x10CloudflareWorker\x10\x8b\x0e\x1a\r\xa2\xf7\x04\t\b\x06\x12\x05cfwrk\x12)\n" +
	"\x16CloudflareLoadBalancer\x10\x8c\x0e\x1a\f\xa2\xf7\x04\b\b\x06\x12\x04cflb\x12)\n" +
	"\x14CloudflareD1Database\x10\x8d\x0e\x1a\x0e\xa2\xf7\x04\n" +
	"\b\x06\x12\x06cfd1db\x128\n" +
	"$CloudflareZeroTrustAccessApplication\x10\x8e\x0e\x1a\r\xa2\xf7\x04\t\b\x06\x12\x05cfzta:w\n" +
	"\x04meta\x12!.google.protobuf.EnumValueOptions\x18\xf4N \x01(\v2?.project.planton.shared.cloudresourcekind.CloudResourceKindMetaR\x04metaB\xe4\x02\n" +
	",com.project.planton.shared.cloudresourcekindB\x16CloudResourceKindProtoP\x01ZXgithub.com/project-planton/project-planton/apis/project/planton/shared/cloudresourcekind\xa2\x02\x04PPSC\xaa\x02(Project.Planton.Shared.Cloudresourcekind\xca\x02(Project\\Planton\\Shared\\Cloudresourcekind\xe2\x024Project\\Planton\\Shared\\Cloudresourcekind\\GPBMetadata\xea\x02+Project::Planton::Shared::Cloudresourcekindb\x06proto3"

var (
	file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_rawDescOnce sync.Once
	file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_rawDescData []byte
)

func file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_rawDescGZIP() []byte {
	file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_rawDescOnce.Do(func() {
		file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_rawDesc), len(file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_rawDesc)))
	})
	return file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_rawDescData
}

var file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_goTypes = []any{
	(CloudResourceKind)(0),                  // 0: project.planton.shared.cloudresourcekind.CloudResourceKind
	(*CloudResourceKindMeta)(nil),           // 1: project.planton.shared.cloudresourcekind.CloudResourceKindMeta
	(*KubernetesCloudResourceKindMeta)(nil), // 2: project.planton.shared.cloudresourcekind.KubernetesCloudResourceKindMeta
	(CloudResourceProvider)(0),              // 3: project.planton.shared.cloudresourcekind.CloudResourceProvider
	(KubernetesCloudResourceType)(0),        // 4: project.planton.shared.cloudresourcekind.KubernetesCloudResourceType
	(*descriptorpb.EnumValueOptions)(nil),   // 5: google.protobuf.EnumValueOptions
}
var file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_depIdxs = []int32{
	3, // 0: project.planton.shared.cloudresourcekind.CloudResourceKindMeta.provider:type_name -> project.planton.shared.cloudresourcekind.CloudResourceProvider
	2, // 1: project.planton.shared.cloudresourcekind.CloudResourceKindMeta.kubernetes_meta:type_name -> project.planton.shared.cloudresourcekind.KubernetesCloudResourceKindMeta
	4, // 2: project.planton.shared.cloudresourcekind.KubernetesCloudResourceKindMeta.category:type_name -> project.planton.shared.cloudresourcekind.KubernetesCloudResourceType
	5, // 3: project.planton.shared.cloudresourcekind.meta:extendee -> google.protobuf.EnumValueOptions
	1, // 4: project.planton.shared.cloudresourcekind.meta:type_name -> project.planton.shared.cloudresourcekind.CloudResourceKindMeta
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	4, // [4:5] is the sub-list for extension type_name
	3, // [3:4] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_init() }
func file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_init() {
	if File_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto != nil {
		return
	}
	file_project_planton_shared_cloudresourcekind_cloud_resource_provider_proto_init()
	file_project_planton_shared_cloudresourcekind_kubernetes_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_rawDesc), len(file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_goTypes,
		DependencyIndexes: file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_depIdxs,
		EnumInfos:         file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_enumTypes,
		MessageInfos:      file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_msgTypes,
		ExtensionInfos:    file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_extTypes,
	}.Build()
	File_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto = out.File
	file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_goTypes = nil
	file_project_planton_shared_cloudresourcekind_cloud_resource_kind_proto_depIdxs = nil
}
