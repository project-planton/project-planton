// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/shared/iac/terraform/terraform.proto

package terraform

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v11 "github.com/project-planton/project-planton/apis/project/planton/credential/gitcredential/v1"
	v1 "github.com/project-planton/project-planton/apis/project/planton/credential/terraformbackendcredential/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Terraform stack info
type TerraformStackInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// terraform operation
	Operation TerraformOperationType `protobuf:"varint,1,opt,name=operation,proto3,enum=project.planton.shared.iac.terraform.TerraformOperationType" json:"operation,omitempty"`
	// run preview of terraform operation
	Preview bool `protobuf:"varint,2,opt,name=preview,proto3" json:"preview,omitempty"`
	// terraform backend
	Backend *v1.TerraformBackendCredentialSpec `protobuf:"bytes,3,opt,name=backend,proto3" json:"backend,omitempty"`
	// terraform-module git-repo
	GitRepo *TerraformGitRepo `protobuf:"bytes,6,opt,name=git_repo,json=gitRepo,proto3" json:"git_repo,omitempty"`
}

func (x *TerraformStackInfo) Reset() {
	*x = TerraformStackInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_shared_iac_terraform_terraform_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerraformStackInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerraformStackInfo) ProtoMessage() {}

func (x *TerraformStackInfo) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_iac_terraform_terraform_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerraformStackInfo.ProtoReflect.Descriptor instead.
func (*TerraformStackInfo) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_iac_terraform_terraform_proto_rawDescGZIP(), []int{0}
}

func (x *TerraformStackInfo) GetOperation() TerraformOperationType {
	if x != nil {
		return x.Operation
	}
	return TerraformOperationType_terraform_operation_type_unspecified
}

func (x *TerraformStackInfo) GetPreview() bool {
	if x != nil {
		return x.Preview
	}
	return false
}

func (x *TerraformStackInfo) GetBackend() *v1.TerraformBackendCredentialSpec {
	if x != nil {
		return x.Backend
	}
	return nil
}

func (x *TerraformStackInfo) GetGitRepo() *TerraformGitRepo {
	if x != nil {
		return x.GitRepo
	}
	return nil
}

// terraform module git-repo
type TerraformGitRepo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// url to clone the repository using git
	CloneUrl string `protobuf:"bytes,1,opt,name=clone_url,json=cloneUrl,proto3" json:"clone_url,omitempty"`
	// git branch
	Branch string `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	// git commit-sha
	CommitSha string `protobuf:"bytes,3,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	// path of the directory containing the main entry point for the terraform module inside the git repo
	ProjectDir string `protobuf:"bytes,4,opt,name=project_dir,json=projectDir,proto3" json:"project_dir,omitempty"`
	// git-auth for terraform-module private git-repositories
	Auth *v11.GitCredentialSpec `protobuf:"bytes,5,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *TerraformGitRepo) Reset() {
	*x = TerraformGitRepo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_shared_iac_terraform_terraform_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerraformGitRepo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerraformGitRepo) ProtoMessage() {}

func (x *TerraformGitRepo) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_iac_terraform_terraform_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerraformGitRepo.ProtoReflect.Descriptor instead.
func (*TerraformGitRepo) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_iac_terraform_terraform_proto_rawDescGZIP(), []int{1}
}

func (x *TerraformGitRepo) GetCloneUrl() string {
	if x != nil {
		return x.CloneUrl
	}
	return ""
}

func (x *TerraformGitRepo) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *TerraformGitRepo) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

func (x *TerraformGitRepo) GetProjectDir() string {
	if x != nil {
		return x.ProjectDir
	}
	return ""
}

func (x *TerraformGitRepo) GetAuth() *v11.GitCredentialSpec {
	if x != nil {
		return x.Auth
	}
	return nil
}

var File_project_planton_shared_iac_terraform_terraform_proto protoreflect.FileDescriptor

var file_project_planton_shared_iac_terraform_terraform_proto_rawDesc = []byte{
	0x0a, 0x34, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x69, 0x61, 0x63, 0x2f, 0x74, 0x65, 0x72,
	0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x69,
	0x61, 0x63, 0x2e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x1a, 0x1b, 0x62, 0x75,
	0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x67, 0x69, 0x74, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x43, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x74, 0x65,
	0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x69,
	0x61, 0x63, 0x2f, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd1, 0x02, 0x0a, 0x12, 0x54, 0x65, 0x72,
	0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x5a, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x69, 0x61, 0x63, 0x2e,
	0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66,
	0x6f, 0x72, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x72, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x2e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x51, 0x0a, 0x08, 0x67, 0x69, 0x74,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x47, 0x69, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x52, 0x07, 0x67, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x22, 0xdb, 0x01, 0x0a,
	0x10, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x5f, 0x73, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x53, 0x68, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x64, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x44, 0x69, 0x72, 0x12, 0x52, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x2e, 0x67, 0x69, 0x74, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x42, 0xc6, 0x02, 0x0a, 0x28, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x74, 0x65,
	0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x0e, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f,
	0x72, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x54, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2f, 0x69, 0x61, 0x63, 0x2f, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0xa2,
	0x02, 0x05, 0x50, 0x50, 0x53, 0x49, 0x54, 0xaa, 0x02, 0x24, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x49, 0x61, 0x63, 0x2e, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0xca, 0x02,
	0x24, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x5c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5c, 0x49, 0x61, 0x63, 0x5c, 0x54, 0x65, 0x72, 0x72,
	0x61, 0x66, 0x6f, 0x72, 0x6d, 0xe2, 0x02, 0x30, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5c, 0x49,
	0x61, 0x63, 0x5c, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x28, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x3a, 0x3a, 0x49, 0x61, 0x63, 0x3a, 0x3a, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66,
	0x6f, 0x72, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_project_planton_shared_iac_terraform_terraform_proto_rawDescOnce sync.Once
	file_project_planton_shared_iac_terraform_terraform_proto_rawDescData = file_project_planton_shared_iac_terraform_terraform_proto_rawDesc
)

func file_project_planton_shared_iac_terraform_terraform_proto_rawDescGZIP() []byte {
	file_project_planton_shared_iac_terraform_terraform_proto_rawDescOnce.Do(func() {
		file_project_planton_shared_iac_terraform_terraform_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_shared_iac_terraform_terraform_proto_rawDescData)
	})
	return file_project_planton_shared_iac_terraform_terraform_proto_rawDescData
}

var file_project_planton_shared_iac_terraform_terraform_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_project_planton_shared_iac_terraform_terraform_proto_goTypes = []any{
	(*TerraformStackInfo)(nil),                // 0: project.planton.shared.iac.terraform.TerraformStackInfo
	(*TerraformGitRepo)(nil),                  // 1: project.planton.shared.iac.terraform.TerraformGitRepo
	(TerraformOperationType)(0),               // 2: project.planton.shared.iac.terraform.TerraformOperationType
	(*v1.TerraformBackendCredentialSpec)(nil), // 3: project.planton.credential.terraformbackendcredential.v1.TerraformBackendCredentialSpec
	(*v11.GitCredentialSpec)(nil),             // 4: project.planton.credential.gitcredential.v1.GitCredentialSpec
}
var file_project_planton_shared_iac_terraform_terraform_proto_depIdxs = []int32{
	2, // 0: project.planton.shared.iac.terraform.TerraformStackInfo.operation:type_name -> project.planton.shared.iac.terraform.TerraformOperationType
	3, // 1: project.planton.shared.iac.terraform.TerraformStackInfo.backend:type_name -> project.planton.credential.terraformbackendcredential.v1.TerraformBackendCredentialSpec
	1, // 2: project.planton.shared.iac.terraform.TerraformStackInfo.git_repo:type_name -> project.planton.shared.iac.terraform.TerraformGitRepo
	4, // 3: project.planton.shared.iac.terraform.TerraformGitRepo.auth:type_name -> project.planton.credential.gitcredential.v1.GitCredentialSpec
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_project_planton_shared_iac_terraform_terraform_proto_init() }
func file_project_planton_shared_iac_terraform_terraform_proto_init() {
	if File_project_planton_shared_iac_terraform_terraform_proto != nil {
		return
	}
	file_project_planton_shared_iac_terraform_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_project_planton_shared_iac_terraform_terraform_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*TerraformStackInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_shared_iac_terraform_terraform_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*TerraformGitRepo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_shared_iac_terraform_terraform_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_shared_iac_terraform_terraform_proto_goTypes,
		DependencyIndexes: file_project_planton_shared_iac_terraform_terraform_proto_depIdxs,
		MessageInfos:      file_project_planton_shared_iac_terraform_terraform_proto_msgTypes,
	}.Build()
	File_project_planton_shared_iac_terraform_terraform_proto = out.File
	file_project_planton_shared_iac_terraform_terraform_proto_rawDesc = nil
	file_project_planton_shared_iac_terraform_terraform_proto_goTypes = nil
	file_project_planton_shared_iac_terraform_terraform_proto_depIdxs = nil
}
