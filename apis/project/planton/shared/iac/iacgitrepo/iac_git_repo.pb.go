// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/shared/iac/iacgitrepo/iac_git_repo.proto

package iacgitrepo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// iac module git-repo
type IacGitRepo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// url to clone the repository using git
	CloneUrl string `protobuf:"bytes,1,opt,name=clone_url,json=cloneUrl,proto3" json:"clone_url,omitempty"`
	// git branch
	Branch string `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	// git commit-sha
	CommitSha string `protobuf:"bytes,3,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	// path of the directory containing the main entry point for the pulumi/terraform module inside the git repo
	ProjectDir string `protobuf:"bytes,4,opt,name=project_dir,json=projectDir,proto3" json:"project_dir,omitempty"`
	// git-auth for iac-module private git-repositories
	Auth          *IacGitRepoAuth `protobuf:"bytes,5,opt,name=auth,proto3" json:"auth,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IacGitRepo) Reset() {
	*x = IacGitRepo{}
	mi := &file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IacGitRepo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IacGitRepo) ProtoMessage() {}

func (x *IacGitRepo) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IacGitRepo.ProtoReflect.Descriptor instead.
func (*IacGitRepo) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_rawDescGZIP(), []int{0}
}

func (x *IacGitRepo) GetCloneUrl() string {
	if x != nil {
		return x.CloneUrl
	}
	return ""
}

func (x *IacGitRepo) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *IacGitRepo) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

func (x *IacGitRepo) GetProjectDir() string {
	if x != nil {
		return x.ProjectDir
	}
	return ""
}

func (x *IacGitRepo) GetAuth() *IacGitRepoAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

// IacGitRepoAuth message represents the specification required to connect to a Git repository.
// This message consolidates all necessary input parameters to establish a secure connection with a Git repository,
// ensuring accurate configuration and validation of credentials.
// Fields include environment information, SSH private key, password, personal access token, and username, providing
// a complete set of information for securely connecting to Git repositories.
type IacGitRepoAuth struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The username used when authenticating to the Git repository.
	// This field is used in combination with the password or personal access token for authentication.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// The password used in conjunction with a username or as part of an SSH private key.
	// This field is optional and is used for password-based authentication to the Git repository.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// The private SSH key used to access the Git repository.
	// This is the contents of the private key required for authentication.
	// When using `SSHPrivateKey`, the repository URL must be in the format `git@github.com:org/repository.git`.
	// If the URL is not in this format, an error such as `unable to clone repo: invalid auth method` will be returned.
	SshPrivateKey string `protobuf:"bytes,3,opt,name=ssh_private_key,json=sshPrivateKey,proto3" json:"ssh_private_key,omitempty"`
	// The personal access token used as a replacement for the password.
	// This token can be used to authenticate to the Git repository instead of using a password.
	PersonalAccessToken string `protobuf:"bytes,4,opt,name=personal_access_token,json=personalAccessToken,proto3" json:"personal_access_token,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *IacGitRepoAuth) Reset() {
	*x = IacGitRepoAuth{}
	mi := &file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IacGitRepoAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IacGitRepoAuth) ProtoMessage() {}

func (x *IacGitRepoAuth) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IacGitRepoAuth.ProtoReflect.Descriptor instead.
func (*IacGitRepoAuth) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_rawDescGZIP(), []int{1}
}

func (x *IacGitRepoAuth) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *IacGitRepoAuth) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *IacGitRepoAuth) GetSshPrivateKey() string {
	if x != nil {
		return x.SshPrivateKey
	}
	return ""
}

func (x *IacGitRepoAuth) GetPersonalAccessToken() string {
	if x != nil {
		return x.PersonalAccessToken
	}
	return ""
}

var File_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto protoreflect.FileDescriptor

const file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_rawDesc = "" +
	"\n" +
	"8project/planton/shared/iac/iacgitrepo/iac_git_repo.proto\x12%project.planton.shared.iac.iacgitrepo\"\xcc\x01\n" +
	"\n" +
	"IacGitRepo\x12\x1b\n" +
	"\tclone_url\x18\x01 \x01(\tR\bcloneUrl\x12\x16\n" +
	"\x06branch\x18\x02 \x01(\tR\x06branch\x12\x1d\n" +
	"\n" +
	"commit_sha\x18\x03 \x01(\tR\tcommitSha\x12\x1f\n" +
	"\vproject_dir\x18\x04 \x01(\tR\n" +
	"projectDir\x12I\n" +
	"\x04auth\x18\x05 \x01(\v25.project.planton.shared.iac.iacgitrepo.IacGitRepoAuthR\x04auth\"\xa4\x01\n" +
	"\x0eIacGitRepoAuth\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x02 \x01(\tR\bpassword\x12&\n" +
	"\x0fssh_private_key\x18\x03 \x01(\tR\rsshPrivateKey\x122\n" +
	"\x15personal_access_token\x18\x04 \x01(\tR\x13personalAccessTokenB\xcd\x02\n" +
	")com.project.planton.shared.iac.iacgitrepoB\x0fIacGitRepoProtoP\x01ZUgithub.com/project-planton/project-planton/apis/project/planton/shared/iac/iacgitrepo\xa2\x02\x05PPSII\xaa\x02%Project.Planton.Shared.Iac.Iacgitrepo\xca\x02%Project\\Planton\\Shared\\Iac\\Iacgitrepo\xe2\x021Project\\Planton\\Shared\\Iac\\Iacgitrepo\\GPBMetadata\xea\x02)Project::Planton::Shared::Iac::Iacgitrepob\x06proto3"

var (
	file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_rawDescOnce sync.Once
	file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_rawDescData []byte
)

func file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_rawDescGZIP() []byte {
	file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_rawDescOnce.Do(func() {
		file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_rawDesc), len(file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_rawDesc)))
	})
	return file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_rawDescData
}

var file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_goTypes = []any{
	(*IacGitRepo)(nil),     // 0: project.planton.shared.iac.iacgitrepo.IacGitRepo
	(*IacGitRepoAuth)(nil), // 1: project.planton.shared.iac.iacgitrepo.IacGitRepoAuth
}
var file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_depIdxs = []int32{
	1, // 0: project.planton.shared.iac.iacgitrepo.IacGitRepo.auth:type_name -> project.planton.shared.iac.iacgitrepo.IacGitRepoAuth
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_init() }
func file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_init() {
	if File_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_rawDesc), len(file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_goTypes,
		DependencyIndexes: file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_depIdxs,
		MessageInfos:      file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_msgTypes,
	}.Build()
	File_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto = out.File
	file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_goTypes = nil
	file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_depIdxs = nil
}
