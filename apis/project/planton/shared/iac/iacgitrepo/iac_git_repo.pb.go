// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/shared/iac/iacgitrepo/iac_git_repo.proto

package iacgitrepo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// iac module git-repo
type IacGitRepo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// url to clone the repository using git
	CloneUrl string `protobuf:"bytes,1,opt,name=clone_url,json=cloneUrl,proto3" json:"clone_url,omitempty"`
	// git branch
	Branch string `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	// git commit-sha
	CommitSha string `protobuf:"bytes,3,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	// path of the directory containing the main entry point for the pulumi/terraform module inside the git repo
	ProjectDir string `protobuf:"bytes,4,opt,name=project_dir,json=projectDir,proto3" json:"project_dir,omitempty"`
	// git-auth for iac-module private git-repositories
	Auth *IacGitRepoAuth `protobuf:"bytes,5,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *IacGitRepo) Reset() {
	*x = IacGitRepo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IacGitRepo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IacGitRepo) ProtoMessage() {}

func (x *IacGitRepo) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IacGitRepo.ProtoReflect.Descriptor instead.
func (*IacGitRepo) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_rawDescGZIP(), []int{0}
}

func (x *IacGitRepo) GetCloneUrl() string {
	if x != nil {
		return x.CloneUrl
	}
	return ""
}

func (x *IacGitRepo) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *IacGitRepo) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

func (x *IacGitRepo) GetProjectDir() string {
	if x != nil {
		return x.ProjectDir
	}
	return ""
}

func (x *IacGitRepo) GetAuth() *IacGitRepoAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

// IacGitRepoAuth message represents the specification required to connect to a Git repository.
// This message consolidates all necessary input parameters to establish a secure connection with a Git repository,
// ensuring accurate configuration and validation of credentials.
// Fields include environment information, SSH private key, password, personal access token, and username, providing
// a complete set of information for securely connecting to Git repositories.
type IacGitRepoAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The username used when authenticating to the Git repository.
	// This field is used in combination with the password or personal access token for authentication.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// The password used in conjunction with a username or as part of an SSH private key.
	// This field is optional and is used for password-based authentication to the Git repository.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// The private SSH key used to access the Git repository.
	// This is the contents of the private key required for authentication.
	// When using `SSHPrivateKey`, the repository URL must be in the format `git@github.com:org/repository.git`.
	// If the URL is not in this format, an error such as `unable to clone repo: invalid auth method` will be returned.
	SshPrivateKey string `protobuf:"bytes,3,opt,name=ssh_private_key,json=sshPrivateKey,proto3" json:"ssh_private_key,omitempty"`
	// The personal access token used as a replacement for the password.
	// This token can be used to authenticate to the Git repository instead of using a password.
	PersonalAccessToken string `protobuf:"bytes,4,opt,name=personal_access_token,json=personalAccessToken,proto3" json:"personal_access_token,omitempty"`
}

func (x *IacGitRepoAuth) Reset() {
	*x = IacGitRepoAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IacGitRepoAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IacGitRepoAuth) ProtoMessage() {}

func (x *IacGitRepoAuth) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IacGitRepoAuth.ProtoReflect.Descriptor instead.
func (*IacGitRepoAuth) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_rawDescGZIP(), []int{1}
}

func (x *IacGitRepoAuth) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *IacGitRepoAuth) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *IacGitRepoAuth) GetSshPrivateKey() string {
	if x != nil {
		return x.SshPrivateKey
	}
	return ""
}

func (x *IacGitRepoAuth) GetPersonalAccessToken() string {
	if x != nil {
		return x.PersonalAccessToken
	}
	return ""
}

var File_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto protoreflect.FileDescriptor

var file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_rawDesc = []byte{
	0x0a, 0x38, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x69, 0x61, 0x63, 0x2f, 0x69, 0x61, 0x63,
	0x67, 0x69, 0x74, 0x72, 0x65, 0x70, 0x6f, 0x2f, 0x69, 0x61, 0x63, 0x5f, 0x67, 0x69, 0x74, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x69, 0x61, 0x63, 0x67, 0x69, 0x74, 0x72, 0x65, 0x70,
	0x6f, 0x22, 0xcc, 0x01, 0x0a, 0x0a, 0x49, 0x61, 0x63, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f,
	0x73, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x53, 0x68, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x64, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x44, 0x69, 0x72, 0x12, 0x49, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x69, 0x61, 0x63,
	0x2e, 0x69, 0x61, 0x63, 0x67, 0x69, 0x74, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x49, 0x61, 0x63, 0x47,
	0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x22, 0xa4, 0x01, 0x0a, 0x0e, 0x49, 0x61, 0x63, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x41,
	0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73,
	0x73, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x73, 0x68, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0xcd, 0x02, 0x0a, 0x29, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x69, 0x61, 0x63, 0x2e, 0x69, 0x61, 0x63, 0x67, 0x69,
	0x74, 0x72, 0x65, 0x70, 0x6f, 0x42, 0x0f, 0x49, 0x61, 0x63, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2f, 0x69, 0x61, 0x63, 0x2f, 0x69, 0x61, 0x63, 0x67, 0x69, 0x74, 0x72, 0x65, 0x70, 0x6f, 0xa2,
	0x02, 0x05, 0x50, 0x50, 0x53, 0x49, 0x49, 0xaa, 0x02, 0x25, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x49, 0x61, 0x63, 0x2e, 0x49, 0x61, 0x63, 0x67, 0x69, 0x74, 0x72, 0x65, 0x70, 0x6f, 0xca,
	0x02, 0x25, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x5c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5c, 0x49, 0x61, 0x63, 0x5c, 0x49, 0x61, 0x63,
	0x67, 0x69, 0x74, 0x72, 0x65, 0x70, 0x6f, 0xe2, 0x02, 0x31, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x5c, 0x49, 0x61, 0x63, 0x5c, 0x49, 0x61, 0x63, 0x67, 0x69, 0x74, 0x72, 0x65, 0x70, 0x6f, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x29, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x3a, 0x3a, 0x49, 0x61, 0x63, 0x3a, 0x3a, 0x49, 0x61, 0x63,
	0x67, 0x69, 0x74, 0x72, 0x65, 0x70, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_rawDescOnce sync.Once
	file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_rawDescData = file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_rawDesc
)

func file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_rawDescGZIP() []byte {
	file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_rawDescOnce.Do(func() {
		file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_rawDescData)
	})
	return file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_rawDescData
}

var file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_goTypes = []any{
	(*IacGitRepo)(nil),     // 0: project.planton.shared.iac.iacgitrepo.IacGitRepo
	(*IacGitRepoAuth)(nil), // 1: project.planton.shared.iac.iacgitrepo.IacGitRepoAuth
}
var file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_depIdxs = []int32{
	1, // 0: project.planton.shared.iac.iacgitrepo.IacGitRepo.auth:type_name -> project.planton.shared.iac.iacgitrepo.IacGitRepoAuth
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_init() }
func file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_init() {
	if File_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*IacGitRepo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*IacGitRepoAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_goTypes,
		DependencyIndexes: file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_depIdxs,
		MessageInfos:      file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_msgTypes,
	}.Build()
	File_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto = out.File
	file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_rawDesc = nil
	file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_goTypes = nil
	file_project_planton_shared_iac_iacgitrepo_iac_git_repo_proto_depIdxs = nil
}
