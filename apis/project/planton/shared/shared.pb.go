// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/shared/shared.proto

package shared

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KindProvider int32

const (
	KindProvider_kind_provider_unspecified KindProvider = 0
	KindProvider_kind_provider_aws         KindProvider = 1
	KindProvider_kind_provider_gcp         KindProvider = 2
	KindProvider_kind_provider_azure       KindProvider = 3
	KindProvider_kind_provider_kubernetes  KindProvider = 4
	KindProvider_kind_provider_confluent   KindProvider = 5
	KindProvider_kind_provider_snowflake   KindProvider = 6
	KindProvider_kind_provider_atlas       KindProvider = 7
)

// Enum value maps for KindProvider.
var (
	KindProvider_name = map[int32]string{
		0: "kind_provider_unspecified",
		1: "kind_provider_aws",
		2: "kind_provider_gcp",
		3: "kind_provider_azure",
		4: "kind_provider_kubernetes",
		5: "kind_provider_confluent",
		6: "kind_provider_snowflake",
		7: "kind_provider_atlas",
	}
	KindProvider_value = map[string]int32{
		"kind_provider_unspecified": 0,
		"kind_provider_aws":         1,
		"kind_provider_gcp":         2,
		"kind_provider_azure":       3,
		"kind_provider_kubernetes":  4,
		"kind_provider_confluent":   5,
		"kind_provider_snowflake":   6,
		"kind_provider_atlas":       7,
	}
)

func (x KindProvider) Enum() *KindProvider {
	p := new(KindProvider)
	*p = x
	return p
}

func (x KindProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KindProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_shared_shared_proto_enumTypes[0].Descriptor()
}

func (KindProvider) Type() protoreflect.EnumType {
	return &file_project_planton_shared_shared_proto_enumTypes[0]
}

func (x KindProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KindProvider.Descriptor instead.
func (KindProvider) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_shared_shared_proto_rawDescGZIP(), []int{0}
}

// metadata for all resource objects on planton-cloud
type ApiResourceMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the resource
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// id of the resource
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// id of the organization to which the api-resource belongs to
	Org string `protobuf:"bytes,3,opt,name=org,proto3" json:"org,omitempty"`
	// environment to which the resource belongs to
	Env *ApiResourceEnvironment `protobuf:"bytes,4,opt,name=env,proto3" json:"env,omitempty"`
	// labels for the resource
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// tags for the resource
	Tags []string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	// metadata for resource version
	Version *ApiResourceMetadataVersion `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ApiResourceMetadata) Reset() {
	*x = ApiResourceMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_shared_shared_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiResourceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResourceMetadata) ProtoMessage() {}

func (x *ApiResourceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_shared_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResourceMetadata.ProtoReflect.Descriptor instead.
func (*ApiResourceMetadata) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_shared_proto_rawDescGZIP(), []int{0}
}

func (x *ApiResourceMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApiResourceMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApiResourceMetadata) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *ApiResourceMetadata) GetEnv() *ApiResourceEnvironment {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *ApiResourceMetadata) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ApiResourceMetadata) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ApiResourceMetadata) GetVersion() *ApiResourceMetadataVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

// version information for api-resource to be used in api-resource metadata
type ApiResourceMetadataVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ApiResourceMetadataVersion) Reset() {
	*x = ApiResourceMetadataVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_shared_shared_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiResourceMetadataVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResourceMetadataVersion) ProtoMessage() {}

func (x *ApiResourceMetadataVersion) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_shared_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResourceMetadataVersion.ProtoReflect.Descriptor instead.
func (*ApiResourceMetadataVersion) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_shared_proto_rawDescGZIP(), []int{1}
}

func (x *ApiResourceMetadataVersion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApiResourceMetadataVersion) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// ResourceAudit represents auditing information for a resource,
// containing both specification-level and status-level audit details.
type ApiResourceAudit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// spec_audit holds the auditing information related to the resource's desired state or specification.
	SpecAudit *ApiResourceAuditInfo `protobuf:"bytes,1,opt,name=spec_audit,json=specAudit,proto3" json:"spec_audit,omitempty"`
	// status_audit holds the auditing information related to the resource's status.
	StatusAudit *ApiResourceAuditInfo `protobuf:"bytes,2,opt,name=status_audit,json=statusAudit,proto3" json:"status_audit,omitempty"`
}

func (x *ApiResourceAudit) Reset() {
	*x = ApiResourceAudit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_shared_shared_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiResourceAudit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResourceAudit) ProtoMessage() {}

func (x *ApiResourceAudit) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_shared_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResourceAudit.ProtoReflect.Descriptor instead.
func (*ApiResourceAudit) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_shared_proto_rawDescGZIP(), []int{2}
}

func (x *ApiResourceAudit) GetSpecAudit() *ApiResourceAuditInfo {
	if x != nil {
		return x.SpecAudit
	}
	return nil
}

func (x *ApiResourceAudit) GetStatusAudit() *ApiResourceAuditInfo {
	if x != nil {
		return x.StatusAudit
	}
	return nil
}

// Audit represents the system-level auditing information for an object.
// This includes details about the creation and last update of the object,
// as well as the type of the last event associated with the object.
type ApiResourceAuditInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// created_by is the identifier of the user or system process that created the object.
	CreatedBy *ApiResourceAuditActor `protobuf:"bytes,1,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// created_at is the timestamp indicating when the object was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// updated_by is the identifier of the user or system process that last updated the object.
	UpdatedBy *ApiResourceAuditActor `protobuf:"bytes,3,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// updated_at is the timestamp indicating when the object was last updated.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// event_type is the type of the last event associated with the object.
	// This is typically a string code representing specific events in the system.
	Event string `protobuf:"bytes,5,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *ApiResourceAuditInfo) Reset() {
	*x = ApiResourceAuditInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_shared_shared_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiResourceAuditInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResourceAuditInfo) ProtoMessage() {}

func (x *ApiResourceAuditInfo) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_shared_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResourceAuditInfo.ProtoReflect.Descriptor instead.
func (*ApiResourceAuditInfo) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_shared_proto_rawDescGZIP(), []int{3}
}

func (x *ApiResourceAuditInfo) GetCreatedBy() *ApiResourceAuditActor {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *ApiResourceAuditInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ApiResourceAuditInfo) GetUpdatedBy() *ApiResourceAuditActor {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

func (x *ApiResourceAuditInfo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ApiResourceAuditInfo) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

// actor in the audit
type ApiResourceAuditActor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the actor
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// avatar url of the actor
	Avatar string `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (x *ApiResourceAuditActor) Reset() {
	*x = ApiResourceAuditActor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_shared_shared_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiResourceAuditActor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResourceAuditActor) ProtoMessage() {}

func (x *ApiResourceAuditActor) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_shared_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResourceAuditActor.ProtoReflect.Descriptor instead.
func (*ApiResourceAuditActor) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_shared_proto_rawDescGZIP(), []int{4}
}

func (x *ApiResourceAuditActor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApiResourceAuditActor) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

// lifecycle
type ApiResourceLifecycle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// flag to indicate if the resource is not deleted and is active
	IsActive bool `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// flag to indicate if the resource is paused
	IsPaused bool `protobuf:"varint,2,opt,name=is_paused,json=isPaused,proto3" json:"is_paused,omitempty"`
}

func (x *ApiResourceLifecycle) Reset() {
	*x = ApiResourceLifecycle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_shared_shared_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiResourceLifecycle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResourceLifecycle) ProtoMessage() {}

func (x *ApiResourceLifecycle) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_shared_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResourceLifecycle.ProtoReflect.Descriptor instead.
func (*ApiResourceLifecycle) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_shared_proto_rawDescGZIP(), []int{5}
}

func (x *ApiResourceLifecycle) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *ApiResourceLifecycle) GetIsPaused() bool {
	if x != nil {
		return x.IsPaused
	}
	return false
}

// api-resource status containing just the lifecycle and audit messages.
type ApiResourceLifecycleAndAuditStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// lifecycle
	Lifecycle *ApiResourceLifecycle `protobuf:"bytes,99,opt,name=lifecycle,proto3" json:"lifecycle,omitempty"`
	// audit info
	Audit *ApiResourceAudit `protobuf:"bytes,98,opt,name=audit,proto3" json:"audit,omitempty"`
}

func (x *ApiResourceLifecycleAndAuditStatus) Reset() {
	*x = ApiResourceLifecycleAndAuditStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_shared_shared_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiResourceLifecycleAndAuditStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResourceLifecycleAndAuditStatus) ProtoMessage() {}

func (x *ApiResourceLifecycleAndAuditStatus) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_shared_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResourceLifecycleAndAuditStatus.ProtoReflect.Descriptor instead.
func (*ApiResourceLifecycleAndAuditStatus) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_shared_proto_rawDescGZIP(), []int{6}
}

func (x *ApiResourceLifecycleAndAuditStatus) GetLifecycle() *ApiResourceLifecycle {
	if x != nil {
		return x.Lifecycle
	}
	return nil
}

func (x *ApiResourceLifecycleAndAuditStatus) GetAudit() *ApiResourceAudit {
	if x != nil {
		return x.Audit
	}
	return nil
}

// api-resource environment
type ApiResourceEnvironment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the environment
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// id of the environment
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ApiResourceEnvironment) Reset() {
	*x = ApiResourceEnvironment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_shared_shared_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiResourceEnvironment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiResourceEnvironment) ProtoMessage() {}

func (x *ApiResourceEnvironment) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_shared_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiResourceEnvironment.ProtoReflect.Descriptor instead.
func (*ApiResourceEnvironment) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_shared_proto_rawDescGZIP(), []int{7}
}

func (x *ApiResourceEnvironment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApiResourceEnvironment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_project_planton_shared_shared_proto protoreflect.FileDescriptor

var file_project_planton_shared_shared_proto_rawDesc = []byte{
	0x0a, 0x23, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfb,
	0x02, 0x0a, 0x13, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x40, 0x0a, 0x03,
	0x65, 0x6e, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x4f,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x4c, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x41, 0x70,
	0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x46, 0x0a, 0x1a,
	0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x10, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x4b, 0x0a, 0x0a, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x73, 0x70, 0x65,
	0x63, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x4f, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x41, 0x75, 0x64, 0x69, 0x74, 0x22, 0xbe, 0x02, 0x0a, 0x14, 0x41, 0x70, 0x69, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x4c, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x41, 0x70,
	0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4c, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x3f, 0x0a, 0x15, 0x41, 0x70, 0x69, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0x50, 0x0a, 0x14, 0x41, 0x70, 0x69,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x22,
	0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x4a, 0x0a, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18,
	0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x41,
	0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x3e,
	0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x22, 0x3c,
	0x0a, 0x16, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x2a, 0xe5, 0x01, 0x0a,
	0x0c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x19, 0x6b, 0x69, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x6b, 0x69, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x77,
	0x73, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x69, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x67, 0x63, 0x70, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x69,
	0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x7a, 0x75, 0x72,
	0x65, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x69, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x10,
	0x04, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x69, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x12, 0x1b,
	0x0a, 0x17, 0x6b, 0x69, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x6b,
	0x69, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x6c,
	0x61, 0x73, 0x10, 0x07, 0x42, 0xeb, 0x01, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x42, 0x0b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0xa2, 0x02, 0x03, 0x50, 0x50, 0x53,
	0xaa, 0x02, 0x16, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0xca, 0x02, 0x16, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0xe2, 0x02, 0x22, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x18, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_project_planton_shared_shared_proto_rawDescOnce sync.Once
	file_project_planton_shared_shared_proto_rawDescData = file_project_planton_shared_shared_proto_rawDesc
)

func file_project_planton_shared_shared_proto_rawDescGZIP() []byte {
	file_project_planton_shared_shared_proto_rawDescOnce.Do(func() {
		file_project_planton_shared_shared_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_shared_shared_proto_rawDescData)
	})
	return file_project_planton_shared_shared_proto_rawDescData
}

var file_project_planton_shared_shared_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_project_planton_shared_shared_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_project_planton_shared_shared_proto_goTypes = []any{
	(KindProvider)(0),                          // 0: project.planton.shared.KindProvider
	(*ApiResourceMetadata)(nil),                // 1: project.planton.shared.ApiResourceMetadata
	(*ApiResourceMetadataVersion)(nil),         // 2: project.planton.shared.ApiResourceMetadataVersion
	(*ApiResourceAudit)(nil),                   // 3: project.planton.shared.ApiResourceAudit
	(*ApiResourceAuditInfo)(nil),               // 4: project.planton.shared.ApiResourceAuditInfo
	(*ApiResourceAuditActor)(nil),              // 5: project.planton.shared.ApiResourceAuditActor
	(*ApiResourceLifecycle)(nil),               // 6: project.planton.shared.ApiResourceLifecycle
	(*ApiResourceLifecycleAndAuditStatus)(nil), // 7: project.planton.shared.ApiResourceLifecycleAndAuditStatus
	(*ApiResourceEnvironment)(nil),             // 8: project.planton.shared.ApiResourceEnvironment
	nil,                                        // 9: project.planton.shared.ApiResourceMetadata.LabelsEntry
	(*timestamppb.Timestamp)(nil),              // 10: google.protobuf.Timestamp
}
var file_project_planton_shared_shared_proto_depIdxs = []int32{
	8,  // 0: project.planton.shared.ApiResourceMetadata.env:type_name -> project.planton.shared.ApiResourceEnvironment
	9,  // 1: project.planton.shared.ApiResourceMetadata.labels:type_name -> project.planton.shared.ApiResourceMetadata.LabelsEntry
	2,  // 2: project.planton.shared.ApiResourceMetadata.version:type_name -> project.planton.shared.ApiResourceMetadataVersion
	4,  // 3: project.planton.shared.ApiResourceAudit.spec_audit:type_name -> project.planton.shared.ApiResourceAuditInfo
	4,  // 4: project.planton.shared.ApiResourceAudit.status_audit:type_name -> project.planton.shared.ApiResourceAuditInfo
	5,  // 5: project.planton.shared.ApiResourceAuditInfo.created_by:type_name -> project.planton.shared.ApiResourceAuditActor
	10, // 6: project.planton.shared.ApiResourceAuditInfo.created_at:type_name -> google.protobuf.Timestamp
	5,  // 7: project.planton.shared.ApiResourceAuditInfo.updated_by:type_name -> project.planton.shared.ApiResourceAuditActor
	10, // 8: project.planton.shared.ApiResourceAuditInfo.updated_at:type_name -> google.protobuf.Timestamp
	6,  // 9: project.planton.shared.ApiResourceLifecycleAndAuditStatus.lifecycle:type_name -> project.planton.shared.ApiResourceLifecycle
	3,  // 10: project.planton.shared.ApiResourceLifecycleAndAuditStatus.audit:type_name -> project.planton.shared.ApiResourceAudit
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_project_planton_shared_shared_proto_init() }
func file_project_planton_shared_shared_proto_init() {
	if File_project_planton_shared_shared_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_shared_shared_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ApiResourceMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_shared_shared_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ApiResourceMetadataVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_shared_shared_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ApiResourceAudit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_shared_shared_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ApiResourceAuditInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_shared_shared_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ApiResourceAuditActor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_shared_shared_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ApiResourceLifecycle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_shared_shared_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ApiResourceLifecycleAndAuditStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_shared_shared_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ApiResourceEnvironment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_shared_shared_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_shared_shared_proto_goTypes,
		DependencyIndexes: file_project_planton_shared_shared_proto_depIdxs,
		EnumInfos:         file_project_planton_shared_shared_proto_enumTypes,
		MessageInfos:      file_project_planton_shared_shared_proto_msgTypes,
	}.Build()
	File_project_planton_shared_shared_proto = out.File
	file_project_planton_shared_shared_proto_rawDesc = nil
	file_project_planton_shared_shared_proto_goTypes = nil
	file_project_planton_shared_shared_proto_depIdxs = nil
}
