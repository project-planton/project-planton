// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/shared/kubernetes/kubernetes.proto

package kubernetes

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// **Container** defines the specifications for a container within a microservice deployment configuration.
// This message mirrors the Kubernetes container spec (https://pkg.go.dev/k8s.io/api/core/v1#Container),
// allowing you to specify container attributes such as the image, ports, resources, and environment variables.
// **Warning:** The sidecar feature currently does not support all features of a Kubernetes container spec.
type Container struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the container.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The container image to be used.
	Image string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	// A list of ports exposed by the container.
	Ports []*ContainerPort `protobuf:"bytes,3,rep,name=ports,proto3" json:"ports,omitempty"`
	// Resource specifications for the container, including CPU and memory limits and requests.
	Resources *ContainerResources `protobuf:"bytes,4,opt,name=resources,proto3" json:"resources,omitempty"`
	// A list of environment variables to be set in the container.
	Env           []*ContainerEnvVar `protobuf:"bytes,5,rep,name=env,proto3" json:"env,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Container) Reset() {
	*x = Container{}
	mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container) ProtoMessage() {}

func (x *Container) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container.ProtoReflect.Descriptor instead.
func (*Container) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_kubernetes_kubernetes_proto_rawDescGZIP(), []int{0}
}

func (x *Container) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Container) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Container) GetPorts() []*ContainerPort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Container) GetResources() *ContainerResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *Container) GetEnv() []*ContainerEnvVar {
	if x != nil {
		return x.Env
	}
	return nil
}

// **ContainerResources** specifies the CPU and memory resources for a container.
// It allows you to define resource limits and requests to manage resource allocation and ensure optimal performance.
type ContainerResources struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource limits for the container.
	// Specify the maximum amount of CPU and memory that the container can use.
	Limits *CpuMemory `protobuf:"bytes,1,opt,name=limits,proto3" json:"limits,omitempty"`
	// The resource requests for the container.
	// Specify the minimum amount of CPU and memory that the container is guaranteed.
	Requests      *CpuMemory `protobuf:"bytes,2,opt,name=requests,proto3" json:"requests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContainerResources) Reset() {
	*x = ContainerResources{}
	mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerResources) ProtoMessage() {}

func (x *ContainerResources) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerResources.ProtoReflect.Descriptor instead.
func (*ContainerResources) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_kubernetes_kubernetes_proto_rawDescGZIP(), []int{1}
}

func (x *ContainerResources) GetLimits() *CpuMemory {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *ContainerResources) GetRequests() *CpuMemory {
	if x != nil {
		return x.Requests
	}
	return nil
}

// **ContainerEnvVar** represents an environment variable to be set in the container.
// It allows you to pass configuration or sensitive information to the container at runtime.
type ContainerEnvVar struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the environment variable.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The value of the environment variable.
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContainerEnvVar) Reset() {
	*x = ContainerEnvVar{}
	mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerEnvVar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerEnvVar) ProtoMessage() {}

func (x *ContainerEnvVar) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerEnvVar.ProtoReflect.Descriptor instead.
func (*ContainerEnvVar) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_kubernetes_kubernetes_proto_rawDescGZIP(), []int{2}
}

func (x *ContainerEnvVar) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContainerEnvVar) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// **ContainerPort** specifies a network port in a single container.
// It allows you to expose ports for communication with other services or the external network.
type ContainerPort struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the port.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The port number on the container.
	ContainerPort int32 `protobuf:"varint,2,opt,name=container_port,json=containerPort,proto3" json:"container_port,omitempty"`
	// The protocol used by the port (e.g., "TCP" or "UDP").
	Protocol      string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContainerPort) Reset() {
	*x = ContainerPort{}
	mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerPort) ProtoMessage() {}

func (x *ContainerPort) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerPort.ProtoReflect.Descriptor instead.
func (*ContainerPort) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_kubernetes_kubernetes_proto_rawDescGZIP(), []int{3}
}

func (x *ContainerPort) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContainerPort) GetContainerPort() int32 {
	if x != nil {
		return x.ContainerPort
	}
	return 0
}

func (x *ContainerPort) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

// **CpuMemory** defines CPU and memory resource quantities for a container.
// It is used to specify the limits and requests for CPU and memory resources.
type CpuMemory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cpu           string                 `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory        string                 `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CpuMemory) Reset() {
	*x = CpuMemory{}
	mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CpuMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuMemory) ProtoMessage() {}

func (x *CpuMemory) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuMemory.ProtoReflect.Descriptor instead.
func (*CpuMemory) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_kubernetes_kubernetes_proto_rawDescGZIP(), []int{4}
}

func (x *CpuMemory) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *CpuMemory) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

// **ContainerImage** represents the container image information.
// It includes the repository, tag, and optional image pull secret for private registries.
type ContainerImage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The repository of the image (e.g., "gcr.io/project/image").
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	// The tag of the image (e.g., "latest" or "1.0.0").
	Tag string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	// The name of the image pull secret for private image repositories.
	PullSecretName string `protobuf:"bytes,3,opt,name=pull_secret_name,json=pullSecretName,proto3" json:"pull_secret_name,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ContainerImage) Reset() {
	*x = ContainerImage{}
	mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerImage) ProtoMessage() {}

func (x *ContainerImage) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerImage.ProtoReflect.Descriptor instead.
func (*ContainerImage) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_kubernetes_kubernetes_proto_rawDescGZIP(), []int{5}
}

func (x *ContainerImage) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *ContainerImage) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *ContainerImage) GetPullSecretName() string {
	if x != nil {
		return x.PullSecretName
	}
	return ""
}

// **IngressSpec** defines the ingress configuration for an API resource to be deployed in Kubernetes.
// It allows you to enable or disable ingress and specify the endpoint domain name for internal and external access.
type IngressSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A flag to enable or disable ingress.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The dns domain.
	DnsDomain     string `protobuf:"bytes,2,opt,name=dns_domain,json=dnsDomain,proto3" json:"dns_domain,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IngressSpec) Reset() {
	*x = IngressSpec{}
	mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IngressSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressSpec) ProtoMessage() {}

func (x *IngressSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressSpec.ProtoReflect.Descriptor instead.
func (*IngressSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_kubernetes_kubernetes_proto_rawDescGZIP(), []int{6}
}

func (x *IngressSpec) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *IngressSpec) GetDnsDomain() string {
	if x != nil {
		return x.DnsDomain
	}
	return ""
}

// **KubernetesSecretKey** is a wrapper for referencing a specific key within a Kubernetes Secret.
// It is used to access sensitive data stored in secrets, such as passwords or API keys.
type KubernetesSecretKey struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the Kubernetes Secret.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The key within the Kubernetes Secret.
	Key           string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KubernetesSecretKey) Reset() {
	*x = KubernetesSecretKey{}
	mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubernetesSecretKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesSecretKey) ProtoMessage() {}

func (x *KubernetesSecretKey) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesSecretKey.ProtoReflect.Descriptor instead.
func (*KubernetesSecretKey) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_kubernetes_kubernetes_proto_rawDescGZIP(), []int{7}
}

func (x *KubernetesSecretKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubernetesSecretKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

var File_project_planton_shared_kubernetes_kubernetes_proto protoreflect.FileDescriptor

const file_project_planton_shared_kubernetes_kubernetes_proto_rawDesc = "" +
	"\n" +
	"2project/planton/shared/kubernetes/kubernetes.proto\x12!project.planton.shared.kubernetes\x1a\x1bbuf/validate/validate.proto\"\x98\x02\n" +
	"\tContainer\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05image\x18\x02 \x01(\tR\x05image\x12F\n" +
	"\x05ports\x18\x03 \x03(\v20.project.planton.shared.kubernetes.ContainerPortR\x05ports\x12S\n" +
	"\tresources\x18\x04 \x01(\v25.project.planton.shared.kubernetes.ContainerResourcesR\tresources\x12D\n" +
	"\x03env\x18\x05 \x03(\v22.project.planton.shared.kubernetes.ContainerEnvVarR\x03env\"\xa4\x01\n" +
	"\x12ContainerResources\x12D\n" +
	"\x06limits\x18\x01 \x01(\v2,.project.planton.shared.kubernetes.CpuMemoryR\x06limits\x12H\n" +
	"\brequests\x18\x02 \x01(\v2,.project.planton.shared.kubernetes.CpuMemoryR\brequests\";\n" +
	"\x0fContainerEnvVar\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"f\n" +
	"\rContainerPort\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12%\n" +
	"\x0econtainer_port\x18\x02 \x01(\x05R\rcontainerPort\x12\x1a\n" +
	"\bprotocol\x18\x03 \x01(\tR\bprotocol\"5\n" +
	"\tCpuMemory\x12\x10\n" +
	"\x03cpu\x18\x01 \x01(\tR\x03cpu\x12\x16\n" +
	"\x06memory\x18\x02 \x01(\tR\x06memory\"`\n" +
	"\x0eContainerImage\x12\x12\n" +
	"\x04repo\x18\x01 \x01(\tR\x04repo\x12\x10\n" +
	"\x03tag\x18\x02 \x01(\tR\x03tag\x12(\n" +
	"\x10pull_secret_name\x18\x03 \x01(\tR\x0epullSecretName\"\xd1\x01\n" +
	"\vIngressSpec\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12\x1d\n" +
	"\n" +
	"dns_domain\x18\x02 \x01(\tR\tdnsDomain:\x88\x01\xbaH\x84\x01\x1a\x81\x01\n" +
	"#ingress.enabled.dns_domain.required\x1aZthis.enabled && size(this.dns_domain) == 0? 'DNS Domain is required to enable ingress': ''\";\n" +
	"\x13KubernetesSecretKey\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x10\n" +
	"\x03key\x18\x02 \x01(\tR\x03keyB\xb3\x02\n" +
	"%com.project.planton.shared.kubernetesB\x0fKubernetesProtoP\x01ZQgithub.com/project-planton/project-planton/apis/project/planton/shared/kubernetes\xa2\x02\x04PPSK\xaa\x02!Project.Planton.Shared.Kubernetes\xca\x02!Project\\Planton\\Shared\\Kubernetes\xe2\x02-Project\\Planton\\Shared\\Kubernetes\\GPBMetadata\xea\x02$Project::Planton::Shared::Kubernetesb\x06proto3"

var (
	file_project_planton_shared_kubernetes_kubernetes_proto_rawDescOnce sync.Once
	file_project_planton_shared_kubernetes_kubernetes_proto_rawDescData []byte
)

func file_project_planton_shared_kubernetes_kubernetes_proto_rawDescGZIP() []byte {
	file_project_planton_shared_kubernetes_kubernetes_proto_rawDescOnce.Do(func() {
		file_project_planton_shared_kubernetes_kubernetes_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_shared_kubernetes_kubernetes_proto_rawDesc), len(file_project_planton_shared_kubernetes_kubernetes_proto_rawDesc)))
	})
	return file_project_planton_shared_kubernetes_kubernetes_proto_rawDescData
}

var file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_project_planton_shared_kubernetes_kubernetes_proto_goTypes = []any{
	(*Container)(nil),           // 0: project.planton.shared.kubernetes.Container
	(*ContainerResources)(nil),  // 1: project.planton.shared.kubernetes.ContainerResources
	(*ContainerEnvVar)(nil),     // 2: project.planton.shared.kubernetes.ContainerEnvVar
	(*ContainerPort)(nil),       // 3: project.planton.shared.kubernetes.ContainerPort
	(*CpuMemory)(nil),           // 4: project.planton.shared.kubernetes.CpuMemory
	(*ContainerImage)(nil),      // 5: project.planton.shared.kubernetes.ContainerImage
	(*IngressSpec)(nil),         // 6: project.planton.shared.kubernetes.IngressSpec
	(*KubernetesSecretKey)(nil), // 7: project.planton.shared.kubernetes.KubernetesSecretKey
}
var file_project_planton_shared_kubernetes_kubernetes_proto_depIdxs = []int32{
	3, // 0: project.planton.shared.kubernetes.Container.ports:type_name -> project.planton.shared.kubernetes.ContainerPort
	1, // 1: project.planton.shared.kubernetes.Container.resources:type_name -> project.planton.shared.kubernetes.ContainerResources
	2, // 2: project.planton.shared.kubernetes.Container.env:type_name -> project.planton.shared.kubernetes.ContainerEnvVar
	4, // 3: project.planton.shared.kubernetes.ContainerResources.limits:type_name -> project.planton.shared.kubernetes.CpuMemory
	4, // 4: project.planton.shared.kubernetes.ContainerResources.requests:type_name -> project.planton.shared.kubernetes.CpuMemory
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_project_planton_shared_kubernetes_kubernetes_proto_init() }
func file_project_planton_shared_kubernetes_kubernetes_proto_init() {
	if File_project_planton_shared_kubernetes_kubernetes_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_shared_kubernetes_kubernetes_proto_rawDesc), len(file_project_planton_shared_kubernetes_kubernetes_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_shared_kubernetes_kubernetes_proto_goTypes,
		DependencyIndexes: file_project_planton_shared_kubernetes_kubernetes_proto_depIdxs,
		MessageInfos:      file_project_planton_shared_kubernetes_kubernetes_proto_msgTypes,
	}.Build()
	File_project_planton_shared_kubernetes_kubernetes_proto = out.File
	file_project_planton_shared_kubernetes_kubernetes_proto_goTypes = nil
	file_project_planton_shared_kubernetes_kubernetes_proto_depIdxs = nil
}
