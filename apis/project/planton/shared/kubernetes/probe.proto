syntax = "proto3";

package project.planton.shared.kubernetes;

import "buf/validate/validate.proto";

// **Probe** defines a health check to be performed against a container to determine whether it is
// alive, ready, or has started successfully. Probes are essential for zero-downtime deployments.
// Reference: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
message Probe {
  // Number of seconds after the container has started before liveness or readiness probes are initiated.
  // Defaults to 0 seconds. Minimum value is 0.
  int32 initial_delay_seconds = 1;

  // How often (in seconds) to perform the probe.
  // Default to 10 seconds. Minimum value is 1.
  int32 period_seconds = 2;

  // Number of seconds after which the probe times out.
  // Defaults to 1 second. Minimum value is 1.
  int32 timeout_seconds = 3;

  // Minimum consecutive successes for the probe to be considered successful after having failed.
  // Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
  int32 success_threshold = 4;

  // Minimum consecutive failures for the probe to be considered failed after having succeeded.
  // Defaults to 3. Minimum value is 1.
  int32 failure_threshold = 5;

  // The action to take to determine the health of a container.
  // Only one of the following handlers should be specified.
  oneof handler {
    // HTTPGet specifies the http request to perform.
    HTTPGetAction http_get = 6;

    // GRPC specifies an action involving a GRPC port.
    GRPCAction grpc = 7;

    // TCPSocket specifies an action involving a TCP port.
    TCPSocketAction tcp_socket = 8;

    // Exec specifies a command to execute inside the container.
    ExecAction exec = 9;
  }
}

// **HTTPGetAction** describes an action based on HTTP Get requests.
message HTTPGetAction {
  // Path to access on the HTTP server.
  // Defaults to '/'.
  string path = 1;

  // Name or number of the port to access on the container.
  // If using a port number, must be in range 1 to 65535.
  oneof port {
    int32 port_number = 2;
    string port_name = 3;
  }

  // Host name to connect to, defaults to the pod IP.
  // You probably want to set "Host" in http_headers instead.
  string host = 4;

  // Scheme to use for connecting to the host (HTTP or HTTPS).
  // Defaults to HTTP.
  string scheme = 5;

  // Custom headers to set in the request.
  // HTTP allows repeated headers.
  repeated HTTPHeader http_headers = 6;
}

// **HTTPHeader** describes a custom header to be used in HTTP probes.
message HTTPHeader {
  // The header field name.
  string name = 1;

  // The header field value.
  string value = 2;
}

// **GRPCAction** describes an action based on gRPC health checking protocol.
// Reference: https://github.com/grpc/grpc/blob/master/doc/health-checking.md
message GRPCAction {
  // Port number of the gRPC service.
  // Number must be in the range 1 to 65535.
  int32 port = 1 [
    (buf.validate.field).int32 = {
      gte: 1,
      lte: 65535
    }
  ];

  // Service is the name of the service to check.
  // If not specified, the default behavior defined by gRPC is used.
  // For standard gRPC health checks, leave empty to check overall server health.
  string service = 2;
}

// **TCPSocketAction** describes an action based on opening a socket.
message TCPSocketAction {
  // Name or number of the port to access on the container.
  // If using a port number, must be in range 1 to 65535.
  oneof port {
    int32 port_number = 1;
    string port_name = 2;
  }

  // Host name to connect to, defaults to the pod IP.
  string host = 3;
}

// **ExecAction** describes a command-based health check.
message ExecAction {
  // Command is the command line to execute inside the container.
  // The command is run in the container's root filesystem.
  // The command's exit status is used to determine the health:
  // - 0: Success
  // - Non-zero: Failure
  repeated string command = 1;
}

