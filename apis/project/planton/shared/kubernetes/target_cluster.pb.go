// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/shared/kubernetes/target_cluster.proto

package kubernetes

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	cloudresourcekind "github.com/project-planton/project-planton/apis/project/planton/shared/cloudresourcekind"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// **KubernetesAddonTargetCluster** defines the target cluster for a Kubernetes addon.
type KubernetesAddonTargetCluster struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to CredentialSource:
	//
	//	*KubernetesAddonTargetCluster_KubernetesClusterCredentialId
	//	*KubernetesAddonTargetCluster_KubernetesClusterSelector
	CredentialSource isKubernetesAddonTargetCluster_CredentialSource `protobuf_oneof:"credential_source"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *KubernetesAddonTargetCluster) Reset() {
	*x = KubernetesAddonTargetCluster{}
	mi := &file_project_planton_shared_kubernetes_target_cluster_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubernetesAddonTargetCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesAddonTargetCluster) ProtoMessage() {}

func (x *KubernetesAddonTargetCluster) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_kubernetes_target_cluster_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesAddonTargetCluster.ProtoReflect.Descriptor instead.
func (*KubernetesAddonTargetCluster) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_kubernetes_target_cluster_proto_rawDescGZIP(), []int{0}
}

func (x *KubernetesAddonTargetCluster) GetCredentialSource() isKubernetesAddonTargetCluster_CredentialSource {
	if x != nil {
		return x.CredentialSource
	}
	return nil
}

func (x *KubernetesAddonTargetCluster) GetKubernetesClusterCredentialId() string {
	if x != nil {
		if x, ok := x.CredentialSource.(*KubernetesAddonTargetCluster_KubernetesClusterCredentialId); ok {
			return x.KubernetesClusterCredentialId
		}
	}
	return ""
}

func (x *KubernetesAddonTargetCluster) GetKubernetesClusterSelector() *KubernetesClusterCloudResourceSelector {
	if x != nil {
		if x, ok := x.CredentialSource.(*KubernetesAddonTargetCluster_KubernetesClusterSelector); ok {
			return x.KubernetesClusterSelector
		}
	}
	return nil
}

type isKubernetesAddonTargetCluster_CredentialSource interface {
	isKubernetesAddonTargetCluster_CredentialSource()
}

type KubernetesAddonTargetCluster_KubernetesClusterCredentialId struct {
	// The ID of the Kubernetes cluster credential.
	KubernetesClusterCredentialId string `protobuf:"bytes,1,opt,name=kubernetes_cluster_credential_id,json=kubernetesClusterCredentialId,proto3,oneof"`
}

type KubernetesAddonTargetCluster_KubernetesClusterSelector struct {
	// The selector for the Kubernetes cluster in the same environment as the addon.
	KubernetesClusterSelector *KubernetesClusterCloudResourceSelector `protobuf:"bytes,2,opt,name=kubernetes_cluster_selector,json=kubernetesClusterSelector,proto3,oneof"`
}

func (*KubernetesAddonTargetCluster_KubernetesClusterCredentialId) isKubernetesAddonTargetCluster_CredentialSource() {
}

func (*KubernetesAddonTargetCluster_KubernetesClusterSelector) isKubernetesAddonTargetCluster_CredentialSource() {
}

// **KubernetesClusterCloudResourceSelector** defines a selector for a Kubernetes cluster in the same environment as the addon.
type KubernetesClusterCloudResourceSelector struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// can be either gcp-gke-cluster-core
	ClusterKind cloudresourcekind.CloudResourceKind `protobuf:"varint,1,opt,name=cluster_kind,json=clusterKind,proto3,enum=project.planton.shared.cloudresourcekind.CloudResourceKind" json:"cluster_kind,omitempty"`
	// name of the kubernetes cluster in the same environment as the addon
	// if the name is different from slug, use the value of slug here.
	// for the purposes of readbility, this field is named as cluster_name vs cluster_slug but the expected value is always slug.
	// the provided value is automatically converted to slug for example Prod Cluster -> prod-cluster.
	ClusterName   string `protobuf:"bytes,2,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KubernetesClusterCloudResourceSelector) Reset() {
	*x = KubernetesClusterCloudResourceSelector{}
	mi := &file_project_planton_shared_kubernetes_target_cluster_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KubernetesClusterCloudResourceSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesClusterCloudResourceSelector) ProtoMessage() {}

func (x *KubernetesClusterCloudResourceSelector) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_shared_kubernetes_target_cluster_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesClusterCloudResourceSelector.ProtoReflect.Descriptor instead.
func (*KubernetesClusterCloudResourceSelector) Descriptor() ([]byte, []int) {
	return file_project_planton_shared_kubernetes_target_cluster_proto_rawDescGZIP(), []int{1}
}

func (x *KubernetesClusterCloudResourceSelector) GetClusterKind() cloudresourcekind.CloudResourceKind {
	if x != nil {
		return x.ClusterKind
	}
	return cloudresourcekind.CloudResourceKind(0)
}

func (x *KubernetesClusterCloudResourceSelector) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

var File_project_planton_shared_kubernetes_target_cluster_proto protoreflect.FileDescriptor

const file_project_planton_shared_kubernetes_target_cluster_proto_rawDesc = "" +
	"\n" +
	"6project/planton/shared/kubernetes/target_cluster.proto\x12!project.planton.shared.kubernetes\x1a\x1bbuf/validate/validate.proto\x1aBproject/planton/shared/cloudresourcekind/cloud_resource_kind.proto\"\x8c\x02\n" +
	"\x1cKubernetesAddonTargetCluster\x12I\n" +
	" kubernetes_cluster_credential_id\x18\x01 \x01(\tH\x00R\x1dkubernetesClusterCredentialId\x12\x8b\x01\n" +
	"\x1bkubernetes_cluster_selector\x18\x02 \x01(\v2I.project.planton.shared.kubernetes.KubernetesClusterCloudResourceSelectorH\x00R\x19kubernetesClusterSelectorB\x13\n" +
	"\x11credential_source\"\xbf\x01\n" +
	"&KubernetesClusterCloudResourceSelector\x12r\n" +
	"\fcluster_kind\x18\x01 \x01(\x0e2;.project.planton.shared.cloudresourcekind.CloudResourceKindB\x12\xbaH\x0f\x82\x01\f\x18\x90\x03\x18\xe7\x04\x18\xda\x01\x18\xb8\tR\vclusterKind\x12!\n" +
	"\fcluster_name\x18\x02 \x01(\tR\vclusterNameB\xb6\x02\n" +
	"%com.project.planton.shared.kubernetesB\x12TargetClusterProtoP\x01ZQgithub.com/project-planton/project-planton/apis/project/planton/shared/kubernetes\xa2\x02\x04PPSK\xaa\x02!Project.Planton.Shared.Kubernetes\xca\x02!Project\\Planton\\Shared\\Kubernetes\xe2\x02-Project\\Planton\\Shared\\Kubernetes\\GPBMetadata\xea\x02$Project::Planton::Shared::Kubernetesb\x06proto3"

var (
	file_project_planton_shared_kubernetes_target_cluster_proto_rawDescOnce sync.Once
	file_project_planton_shared_kubernetes_target_cluster_proto_rawDescData []byte
)

func file_project_planton_shared_kubernetes_target_cluster_proto_rawDescGZIP() []byte {
	file_project_planton_shared_kubernetes_target_cluster_proto_rawDescOnce.Do(func() {
		file_project_planton_shared_kubernetes_target_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_shared_kubernetes_target_cluster_proto_rawDesc), len(file_project_planton_shared_kubernetes_target_cluster_proto_rawDesc)))
	})
	return file_project_planton_shared_kubernetes_target_cluster_proto_rawDescData
}

var file_project_planton_shared_kubernetes_target_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_project_planton_shared_kubernetes_target_cluster_proto_goTypes = []any{
	(*KubernetesAddonTargetCluster)(nil),           // 0: project.planton.shared.kubernetes.KubernetesAddonTargetCluster
	(*KubernetesClusterCloudResourceSelector)(nil), // 1: project.planton.shared.kubernetes.KubernetesClusterCloudResourceSelector
	(cloudresourcekind.CloudResourceKind)(0),       // 2: project.planton.shared.cloudresourcekind.CloudResourceKind
}
var file_project_planton_shared_kubernetes_target_cluster_proto_depIdxs = []int32{
	1, // 0: project.planton.shared.kubernetes.KubernetesAddonTargetCluster.kubernetes_cluster_selector:type_name -> project.planton.shared.kubernetes.KubernetesClusterCloudResourceSelector
	2, // 1: project.planton.shared.kubernetes.KubernetesClusterCloudResourceSelector.cluster_kind:type_name -> project.planton.shared.cloudresourcekind.CloudResourceKind
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_project_planton_shared_kubernetes_target_cluster_proto_init() }
func file_project_planton_shared_kubernetes_target_cluster_proto_init() {
	if File_project_planton_shared_kubernetes_target_cluster_proto != nil {
		return
	}
	file_project_planton_shared_kubernetes_target_cluster_proto_msgTypes[0].OneofWrappers = []any{
		(*KubernetesAddonTargetCluster_KubernetesClusterCredentialId)(nil),
		(*KubernetesAddonTargetCluster_KubernetesClusterSelector)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_shared_kubernetes_target_cluster_proto_rawDesc), len(file_project_planton_shared_kubernetes_target_cluster_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_shared_kubernetes_target_cluster_proto_goTypes,
		DependencyIndexes: file_project_planton_shared_kubernetes_target_cluster_proto_depIdxs,
		MessageInfos:      file_project_planton_shared_kubernetes_target_cluster_proto_msgTypes,
	}.Build()
	File_project_planton_shared_kubernetes_target_cluster_proto = out.File
	file_project_planton_shared_kubernetes_target_cluster_proto_goTypes = nil
	file_project_planton_shared_kubernetes_target_cluster_proto_depIdxs = nil
}
