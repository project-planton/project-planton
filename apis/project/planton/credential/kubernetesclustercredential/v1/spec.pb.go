// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/credential/kubernetesclustercredential/v1/spec.proto

package kubernetesclustercredentialv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// KubernetesProvider enum represents the various Kubernetes providers.
// This enumeration allows specifying the type of Kubernetes cluster being used, such as GKE, EKS, or AKS, with additional context on each.
type KubernetesProvider int32

const (
	KubernetesProvider_kubernetes_provider_unspecified KubernetesProvider = 0 // Unspecified Kubernetes provider.
	KubernetesProvider_gcp_gke                         KubernetesProvider = 1 // Google Kubernetes Engine (GKE) - A managed Kubernetes service by Google Cloud that provides automated cluster management and scaling.
	KubernetesProvider_aws_eks                         KubernetesProvider = 2 // Amazon Elastic Kubernetes Service (EKS) - A managed Kubernetes service by AWS that simplifies the deployment and management of Kubernetes clusters.
	KubernetesProvider_azure_aks                       KubernetesProvider = 3 // Azure Kubernetes Service (AKS) - A managed Kubernetes service by Microsoft Azure that provides Kubernetes cluster orchestration and management.
)

// Enum value maps for KubernetesProvider.
var (
	KubernetesProvider_name = map[int32]string{
		0: "kubernetes_provider_unspecified",
		1: "gcp_gke",
		2: "aws_eks",
		3: "azure_aks",
	}
	KubernetesProvider_value = map[string]int32{
		"kubernetes_provider_unspecified": 0,
		"gcp_gke":                         1,
		"aws_eks":                         2,
		"azure_aks":                       3,
	}
)

func (x KubernetesProvider) Enum() *KubernetesProvider {
	p := new(KubernetesProvider)
	*p = x
	return p
}

func (x KubernetesProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KubernetesProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_enumTypes[0].Descriptor()
}

func (KubernetesProvider) Type() protoreflect.EnumType {
	return &file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_enumTypes[0]
}

func (x KubernetesProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KubernetesProvider.Descriptor instead.
func (KubernetesProvider) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_rawDescGZIP(), []int{0}
}

// KubernetesClusterCredentialSpec message represents the specification required to create or connect a Kubernetes Cluster.
// This message consolidates all necessary input parameters to establish a connection with a Kubernetes cluster, ensuring accurate configuration and validation of credentials.
// Fields include environment information, Kubernetes provider details, and credentials for GKE clusters.
type KubernetesClusterCredentialSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Kubernetes provider, specifying the type of cluster (e.g., gcp_gke, aws_eks, azure_aks).
	// For more detailed information, refer to the official documentation of each provider.
	Provider KubernetesProvider `protobuf:"varint,1,opt,name=provider,proto3,enum=project.planton.credential.kubernetesclustercredential.v1.KubernetesProvider" json:"provider,omitempty"`
	// Credential specification for GCP GKE provider.
	// This field contains detailed information for connecting to a Google Kubernetes Engine (GKE) cluster.
	GcpGke *KubernetesClusterCredentialGcpGke `protobuf:"bytes,2,opt,name=gcp_gke,json=gcpGke,proto3" json:"gcp_gke,omitempty"`
	// Credential specification for AWS EKS provider.
	// This field contains detailed information for connecting to a Elastic Kubernetes Engine(EKS) cluster.
	AwsEks *KubernetesClusterCredentialAwsEks `protobuf:"bytes,3,opt,name=aws_eks,json=awsEks,proto3" json:"aws_eks,omitempty"`
	// Credential specification for Azure AKS provider.
	// This field contains detailed information for connecting to a Azure Kubernetes Service(AKS) cluster.
	AzureAks *KubernetesClusterCredentialAzureAks `protobuf:"bytes,4,opt,name=azure_aks,json=azureAks,proto3" json:"azure_aks,omitempty"`
}

func (x *KubernetesClusterCredentialSpec) Reset() {
	*x = KubernetesClusterCredentialSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesClusterCredentialSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesClusterCredentialSpec) ProtoMessage() {}

func (x *KubernetesClusterCredentialSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesClusterCredentialSpec.ProtoReflect.Descriptor instead.
func (*KubernetesClusterCredentialSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *KubernetesClusterCredentialSpec) GetProvider() KubernetesProvider {
	if x != nil {
		return x.Provider
	}
	return KubernetesProvider_kubernetes_provider_unspecified
}

func (x *KubernetesClusterCredentialSpec) GetGcpGke() *KubernetesClusterCredentialGcpGke {
	if x != nil {
		return x.GcpGke
	}
	return nil
}

func (x *KubernetesClusterCredentialSpec) GetAwsEks() *KubernetesClusterCredentialAwsEks {
	if x != nil {
		return x.AwsEks
	}
	return nil
}

func (x *KubernetesClusterCredentialSpec) GetAzureAks() *KubernetesClusterCredentialAzureAks {
	if x != nil {
		return x.AzureAks
	}
	return nil
}

// KubernetesClusterCredentialGcpGke message represents the specification required to connect to a Google Kubernetes Engine (GKE) cluster.
// This message consolidates the necessary input parameters for establishing a secure connection with a GKE cluster.
type KubernetesClusterCredentialGcpGke struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The cluster endpoint for the GKE cluster.
	// This is a required field and must contain the URL endpoint for the GKE cluster.
	ClusterEndpoint string `protobuf:"bytes,1,opt,name=cluster_endpoint,json=clusterEndpoint,proto3" json:"cluster_endpoint,omitempty"`
	// The cluster Certificate Authority (CA) data for the GKE cluster.
	// This is a required field and must contain the base64 encoded CA certificate.
	ClusterCaData string `protobuf:"bytes,2,opt,name=cluster_ca_data,json=clusterCaData,proto3" json:"cluster_ca_data,omitempty"`
	// The base64 encoded Google Service Account JSON key.
	// This is a required field and must be a valid base64 encoded string representing the service account key.
	ServiceAccountKeyBase64 string `protobuf:"bytes,3,opt,name=service_account_key_base64,json=serviceAccountKeyBase64,proto3" json:"service_account_key_base64,omitempty"`
}

func (x *KubernetesClusterCredentialGcpGke) Reset() {
	*x = KubernetesClusterCredentialGcpGke{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesClusterCredentialGcpGke) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesClusterCredentialGcpGke) ProtoMessage() {}

func (x *KubernetesClusterCredentialGcpGke) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesClusterCredentialGcpGke.ProtoReflect.Descriptor instead.
func (*KubernetesClusterCredentialGcpGke) Descriptor() ([]byte, []int) {
	return file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *KubernetesClusterCredentialGcpGke) GetClusterEndpoint() string {
	if x != nil {
		return x.ClusterEndpoint
	}
	return ""
}

func (x *KubernetesClusterCredentialGcpGke) GetClusterCaData() string {
	if x != nil {
		return x.ClusterCaData
	}
	return ""
}

func (x *KubernetesClusterCredentialGcpGke) GetServiceAccountKeyBase64() string {
	if x != nil {
		return x.ServiceAccountKeyBase64
	}
	return ""
}

// KubernetesClusterCredentialAwsEks message represents the specification required to connect to a Elastic Kubernetes Service (EKS) cluster.
// This message consolidates the necessary input parameters for establishing a secure connection with a EKS cluster.
type KubernetesClusterCredentialAwsEks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KubernetesClusterCredentialAwsEks) Reset() {
	*x = KubernetesClusterCredentialAwsEks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesClusterCredentialAwsEks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesClusterCredentialAwsEks) ProtoMessage() {}

func (x *KubernetesClusterCredentialAwsEks) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesClusterCredentialAwsEks.ProtoReflect.Descriptor instead.
func (*KubernetesClusterCredentialAwsEks) Descriptor() ([]byte, []int) {
	return file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_rawDescGZIP(), []int{2}
}

// KubernetesClusterCredentialAzureEks message represents the specification required to connect to a Azure Kubernetes Service (AKS) cluster.
// This message consolidates the necessary input parameters for establishing a secure connection with a AKS cluster.
type KubernetesClusterCredentialAzureAks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KubernetesClusterCredentialAzureAks) Reset() {
	*x = KubernetesClusterCredentialAzureAks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesClusterCredentialAzureAks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesClusterCredentialAzureAks) ProtoMessage() {}

func (x *KubernetesClusterCredentialAzureAks) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesClusterCredentialAzureAks.ProtoReflect.Descriptor instead.
func (*KubernetesClusterCredentialAzureAks) Descriptor() ([]byte, []int) {
	return file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_rawDescGZIP(), []int{3}
}

var File_project_planton_credential_kubernetesclustercredential_v1_spec_proto protoreflect.FileDescriptor

var file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_rawDesc = []byte{
	0x0a, 0x44, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x39, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xff,
	0x03, 0x0a, 0x1f, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x71, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x75, 0x0a, 0x07, 0x67, 0x63, 0x70, 0x5f, 0x67, 0x6b, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x47, 0x63,
	0x70, 0x47, 0x6b, 0x65, 0x52, 0x06, 0x67, 0x63, 0x70, 0x47, 0x6b, 0x65, 0x12, 0x75, 0x0a, 0x07,
	0x61, 0x77, 0x73, 0x5f, 0x65, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x77, 0x73, 0x45, 0x6b, 0x73, 0x52, 0x06, 0x61, 0x77, 0x73,
	0x45, 0x6b, 0x73, 0x12, 0x7b, 0x0a, 0x09, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x6b, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x7a,
	0x75, 0x72, 0x65, 0x41, 0x6b, 0x73, 0x52, 0x08, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x41, 0x6b, 0x73,
	0x22, 0xcb, 0x01, 0x0a, 0x21, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x47, 0x63, 0x70, 0x47, 0x6b, 0x65, 0x12, 0x31, 0x0a, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x0f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x1a, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x17, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x22, 0x23,
	0x0a, 0x21, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x77, 0x73,
	0x45, 0x6b, 0x73, 0x22, 0x25, 0x0a, 0x23, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x41, 0x6b, 0x73, 0x2a, 0x62, 0x0a, 0x12, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x67, 0x63, 0x70, 0x5f, 0x67, 0x6b, 0x65,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x6b, 0x73, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x6b, 0x73, 0x10, 0x03, 0x42, 0xdd,
	0x03, 0x0a, 0x3d, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x42, 0x09, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x87, 0x01,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x76, 0x31, 0xa2, 0x02, 0x04, 0x50, 0x50, 0x43, 0x4b, 0xaa, 0x02,
	0x39, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x39, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5c, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x45, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x5c, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x3d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x3a, 0x3a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x3a, 0x3a, 0x4b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_rawDescData = file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_rawDesc
)

func file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_rawDescData)
	})
	return file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_rawDescData
}

var file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_goTypes = []any{
	(KubernetesProvider)(0),                     // 0: project.planton.credential.kubernetesclustercredential.v1.KubernetesProvider
	(*KubernetesClusterCredentialSpec)(nil),     // 1: project.planton.credential.kubernetesclustercredential.v1.KubernetesClusterCredentialSpec
	(*KubernetesClusterCredentialGcpGke)(nil),   // 2: project.planton.credential.kubernetesclustercredential.v1.KubernetesClusterCredentialGcpGke
	(*KubernetesClusterCredentialAwsEks)(nil),   // 3: project.planton.credential.kubernetesclustercredential.v1.KubernetesClusterCredentialAwsEks
	(*KubernetesClusterCredentialAzureAks)(nil), // 4: project.planton.credential.kubernetesclustercredential.v1.KubernetesClusterCredentialAzureAks
}
var file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_depIdxs = []int32{
	0, // 0: project.planton.credential.kubernetesclustercredential.v1.KubernetesClusterCredentialSpec.provider:type_name -> project.planton.credential.kubernetesclustercredential.v1.KubernetesProvider
	2, // 1: project.planton.credential.kubernetesclustercredential.v1.KubernetesClusterCredentialSpec.gcp_gke:type_name -> project.planton.credential.kubernetesclustercredential.v1.KubernetesClusterCredentialGcpGke
	3, // 2: project.planton.credential.kubernetesclustercredential.v1.KubernetesClusterCredentialSpec.aws_eks:type_name -> project.planton.credential.kubernetesclustercredential.v1.KubernetesClusterCredentialAwsEks
	4, // 3: project.planton.credential.kubernetesclustercredential.v1.KubernetesClusterCredentialSpec.azure_aks:type_name -> project.planton.credential.kubernetesclustercredential.v1.KubernetesClusterCredentialAzureAks
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_init() }
func file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_init() {
	if File_project_planton_credential_kubernetesclustercredential_v1_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*KubernetesClusterCredentialSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*KubernetesClusterCredentialGcpGke); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*KubernetesClusterCredentialAwsEks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*KubernetesClusterCredentialAzureAks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_depIdxs,
		EnumInfos:         file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_enumTypes,
		MessageInfos:      file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_credential_kubernetesclustercredential_v1_spec_proto = out.File
	file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_rawDesc = nil
	file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_goTypes = nil
	file_project_planton_credential_kubernetesclustercredential_v1_spec_proto_depIdxs = nil
}
