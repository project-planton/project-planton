// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/credential/pulumibackendcredential/v1/spec.proto

package pulumibackendcredentialv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// https://www.pulumi.com/docs/concepts/state
// PulumiBackendType enum represents the various backends supported for storing Pulumi state.
// Each backend type has its own use cases and advantages depending on the project requirements.
// - local_file_system: Suitable for small projects or local development/testing environments.
// - http: A centralized backend provided by Pulumi for managing state across distributed teams.
// - aws_s3: AWS S3 can be used for scalable and reliable state storage, commonly used in AWS environments.
// - google_cloud_storage: GCP's storage solution for state files, ideal for projects hosted on Google Cloud.
// - azure_blob_storage: Azure Blob Storage for state storage, typically used for projects hosted on Microsoft Azure.
type PulumiBackendType int32

const (
	PulumiBackendType_pulumi_backend_type_unspecified PulumiBackendType = 0
	PulumiBackendType_local_file_system               PulumiBackendType = 1
	PulumiBackendType_http                            PulumiBackendType = 2
	PulumiBackendType_aws_s3                          PulumiBackendType = 3
	PulumiBackendType_google_cloud_storage            PulumiBackendType = 4
	PulumiBackendType_azure_blob_storage              PulumiBackendType = 5
)

// Enum value maps for PulumiBackendType.
var (
	PulumiBackendType_name = map[int32]string{
		0: "pulumi_backend_type_unspecified",
		1: "local_file_system",
		2: "http",
		3: "aws_s3",
		4: "google_cloud_storage",
		5: "azure_blob_storage",
	}
	PulumiBackendType_value = map[string]int32{
		"pulumi_backend_type_unspecified": 0,
		"local_file_system":               1,
		"http":                            2,
		"aws_s3":                          3,
		"google_cloud_storage":            4,
		"azure_blob_storage":              5,
	}
)

func (x PulumiBackendType) Enum() *PulumiBackendType {
	p := new(PulumiBackendType)
	*p = x
	return p
}

func (x PulumiBackendType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PulumiBackendType) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_credential_pulumibackendcredential_v1_spec_proto_enumTypes[0].Descriptor()
}

func (PulumiBackendType) Type() protoreflect.EnumType {
	return &file_project_planton_credential_pulumibackendcredential_v1_spec_proto_enumTypes[0]
}

func (x PulumiBackendType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PulumiBackendType.Descriptor instead.
func (PulumiBackendType) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_credential_pulumibackendcredential_v1_spec_proto_rawDescGZIP(), []int{0}
}

// pulumi-backend-credential spec
// These credentials are used for managing Pulumi state storage, which can be configured for different cloud providers or local environments.
// For example, these credentials can be used to store state files in AWS S3, Google Cloud Storage, Azure Blob Storage, or locally on the file system.
// Properly configuring these backends is essential for managing and maintaining infrastructure state efficiently.
type PulumiBackendCredentialSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The provider for the Pulumi backend credential.
	// This field specifies the type of backend used to store Pulumi state (e.g., local file system, AWS S3, Google Cloud Storage).
	// For more information, refer to: https://www.pulumi.com/docs/concepts/state
	// Each backend type has different use cases; for example, local backends are suitable for development, while cloud backends are ideal for scalable, team-based environments.
	// Properly selecting the backend type is crucial for ensuring that the infrastructure state is managed efficiently and securely, depending on the project requirements and team setup.
	PulumiBackendType PulumiBackendType `protobuf:"varint,1,opt,name=pulumi_backend_type,json=pulumiBackendType,proto3,enum=project.planton.credential.pulumibackendcredential.v1.PulumiBackendType" json:"pulumi_backend_type,omitempty"`
	// local-file-system backend spec
	LocalFileSystem *PulumiLocalFileSystemBackend `protobuf:"bytes,2,opt,name=local_file_system,json=localFileSystem,proto3" json:"local_file_system,omitempty"`
	// http backend spec
	Http *PulumiHttpBackend `protobuf:"bytes,3,opt,name=http,proto3" json:"http,omitempty"`
	// aws-s3 backend spec
	AwsS3 *PulumiAwsS3Backend `protobuf:"bytes,4,opt,name=aws_s3,json=awsS3,proto3" json:"aws_s3,omitempty"`
	// google-cloud-storage backend spec
	GoogleCloudStorage *PulumiGoogleCloudStorageBackend `protobuf:"bytes,5,opt,name=google_cloud_storage,json=googleCloudStorage,proto3" json:"google_cloud_storage,omitempty"`
	// azure-blob-storage backend spec
	AzureBlobStorage *PulumiAzureBlobStorageBackend `protobuf:"bytes,6,opt,name=azure_blob_storage,json=azureBlobStorage,proto3" json:"azure_blob_storage,omitempty"`
}

func (x *PulumiBackendCredentialSpec) Reset() {
	*x = PulumiBackendCredentialSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_credential_pulumibackendcredential_v1_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulumiBackendCredentialSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulumiBackendCredentialSpec) ProtoMessage() {}

func (x *PulumiBackendCredentialSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_credential_pulumibackendcredential_v1_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulumiBackendCredentialSpec.ProtoReflect.Descriptor instead.
func (*PulumiBackendCredentialSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_credential_pulumibackendcredential_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *PulumiBackendCredentialSpec) GetPulumiBackendType() PulumiBackendType {
	if x != nil {
		return x.PulumiBackendType
	}
	return PulumiBackendType_pulumi_backend_type_unspecified
}

func (x *PulumiBackendCredentialSpec) GetLocalFileSystem() *PulumiLocalFileSystemBackend {
	if x != nil {
		return x.LocalFileSystem
	}
	return nil
}

func (x *PulumiBackendCredentialSpec) GetHttp() *PulumiHttpBackend {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *PulumiBackendCredentialSpec) GetAwsS3() *PulumiAwsS3Backend {
	if x != nil {
		return x.AwsS3
	}
	return nil
}

func (x *PulumiBackendCredentialSpec) GetGoogleCloudStorage() *PulumiGoogleCloudStorageBackend {
	if x != nil {
		return x.GoogleCloudStorage
	}
	return nil
}

func (x *PulumiBackendCredentialSpec) GetAzureBlobStorage() *PulumiAzureBlobStorageBackend {
	if x != nil {
		return x.AzureBlobStorage
	}
	return nil
}

// pulumi-backend-credential spec for local-file-system backend
// https://www.pulumi.com/docs/concepts/state/#local-filesystem
// Mention that the local file system backend is typically used for smaller projects or testing purposes to help users understand its limitations.
type PulumiLocalFileSystemBackend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// state-file path
	StateFilePath string `protobuf:"bytes,1,opt,name=state_file_path,json=stateFilePath,proto3" json:"state_file_path,omitempty"`
}

func (x *PulumiLocalFileSystemBackend) Reset() {
	*x = PulumiLocalFileSystemBackend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_credential_pulumibackendcredential_v1_spec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulumiLocalFileSystemBackend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulumiLocalFileSystemBackend) ProtoMessage() {}

func (x *PulumiLocalFileSystemBackend) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_credential_pulumibackendcredential_v1_spec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulumiLocalFileSystemBackend.ProtoReflect.Descriptor instead.
func (*PulumiLocalFileSystemBackend) Descriptor() ([]byte, []int) {
	return file_project_planton_credential_pulumibackendcredential_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *PulumiLocalFileSystemBackend) GetStateFilePath() string {
	if x != nil {
		return x.StateFilePath
	}
	return ""
}

// pulumi-backend-credential spec for http backend
// hosted http backend provided by Pulumi Inc is https://pulumi.cloud
// Clarify that the HTTP backend is a centralized solution that can be used for managing state across distributed teams, which may have specific security considerations.
type PulumiHttpBackend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// api base url
	// this will be https://api.pulumi.com for Hosted Pulumi Cloud
	ApiUrl string `protobuf:"bytes,1,opt,name=api_url,json=apiUrl,proto3" json:"api_url,omitempty"`
	// The name of the Pulumi organization that owns the resources.
	// This field is required and is used to identify the Pulumi organization under which the infrastructure is managed.
	// It is crucial for managing access control, resource ownership, and collaboration within the Pulumi ecosystem.
	// Properly setting the organization name helps ensure that resources are created and maintained under the correct organizational context.
	PulumiOrganization string `protobuf:"bytes,2,opt,name=pulumi_organization,json=pulumiOrganization,proto3" json:"pulumi_organization,omitempty"`
	// access token to be used for authorization
	AccessToken string `protobuf:"bytes,3,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
}

func (x *PulumiHttpBackend) Reset() {
	*x = PulumiHttpBackend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_credential_pulumibackendcredential_v1_spec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulumiHttpBackend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulumiHttpBackend) ProtoMessage() {}

func (x *PulumiHttpBackend) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_credential_pulumibackendcredential_v1_spec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulumiHttpBackend.ProtoReflect.Descriptor instead.
func (*PulumiHttpBackend) Descriptor() ([]byte, []int) {
	return file_project_planton_credential_pulumibackendcredential_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *PulumiHttpBackend) GetApiUrl() string {
	if x != nil {
		return x.ApiUrl
	}
	return ""
}

func (x *PulumiHttpBackend) GetPulumiOrganization() string {
	if x != nil {
		return x.PulumiOrganization
	}
	return ""
}

func (x *PulumiHttpBackend) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

// pulumi-backend-credential spec for aws-s3 backend
// https://www.pulumi.com/docs/concepts/state/#aws-s3
// Consider adding a note about the IAM roles or policies required to access the S3 bucket securely.
type PulumiAwsS3Backend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of s3-bucket
	S3Bucket string `protobuf:"bytes,1,opt,name=s3_bucket,json=s3Bucket,proto3" json:"s3_bucket,omitempty"`
	// aws-access-key-id
	AwsAccessKeyId string `protobuf:"bytes,2,opt,name=aws_access_key_id,json=awsAccessKeyId,proto3" json:"aws_access_key_id,omitempty"`
	// aws-secret-access-key
	AwsSecretAccessKey string `protobuf:"bytes,3,opt,name=aws_secret_access_key,json=awsSecretAccessKey,proto3" json:"aws_secret_access_key,omitempty"`
}

func (x *PulumiAwsS3Backend) Reset() {
	*x = PulumiAwsS3Backend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_credential_pulumibackendcredential_v1_spec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulumiAwsS3Backend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulumiAwsS3Backend) ProtoMessage() {}

func (x *PulumiAwsS3Backend) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_credential_pulumibackendcredential_v1_spec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulumiAwsS3Backend.ProtoReflect.Descriptor instead.
func (*PulumiAwsS3Backend) Descriptor() ([]byte, []int) {
	return file_project_planton_credential_pulumibackendcredential_v1_spec_proto_rawDescGZIP(), []int{3}
}

func (x *PulumiAwsS3Backend) GetS3Bucket() string {
	if x != nil {
		return x.S3Bucket
	}
	return ""
}

func (x *PulumiAwsS3Backend) GetAwsAccessKeyId() string {
	if x != nil {
		return x.AwsAccessKeyId
	}
	return ""
}

func (x *PulumiAwsS3Backend) GetAwsSecretAccessKey() string {
	if x != nil {
		return x.AwsSecretAccessKey
	}
	return ""
}

// pulumi-backend-credential spec for google-cloud-storage backend
// https://www.pulumi.com/docs/concepts/state/#google-cloud-storage
// Mention the necessary roles or permissions needed for the GCP service account to interact with Google Cloud Storage.
type PulumiGoogleCloudStorageBackend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of gcs-bucket
	GcsBucket string `protobuf:"bytes,1,opt,name=gcs_bucket,json=gcsBucket,proto3" json:"gcs_bucket,omitempty"`
	// base64 encoded gcp service-account-key json
	ServiceAccountKeyBase64 string `protobuf:"bytes,2,opt,name=service_account_key_base64,json=serviceAccountKeyBase64,proto3" json:"service_account_key_base64,omitempty"`
}

func (x *PulumiGoogleCloudStorageBackend) Reset() {
	*x = PulumiGoogleCloudStorageBackend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_credential_pulumibackendcredential_v1_spec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulumiGoogleCloudStorageBackend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulumiGoogleCloudStorageBackend) ProtoMessage() {}

func (x *PulumiGoogleCloudStorageBackend) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_credential_pulumibackendcredential_v1_spec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulumiGoogleCloudStorageBackend.ProtoReflect.Descriptor instead.
func (*PulumiGoogleCloudStorageBackend) Descriptor() ([]byte, []int) {
	return file_project_planton_credential_pulumibackendcredential_v1_spec_proto_rawDescGZIP(), []int{4}
}

func (x *PulumiGoogleCloudStorageBackend) GetGcsBucket() string {
	if x != nil {
		return x.GcsBucket
	}
	return ""
}

func (x *PulumiGoogleCloudStorageBackend) GetServiceAccountKeyBase64() string {
	if x != nil {
		return x.ServiceAccountKeyBase64
	}
	return ""
}

// pulumi-backend-credential spec for azure-blob-storage backend
// https://www.pulumi.com/docs/concepts/state/#azure-blob-storage
// Provide a note on the importance of securing the storage account key and potential alternatives, like using Azure Key Vault.
type PulumiAzureBlobStorageBackend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of azure blob storage container
	BlobStorageContainer string `protobuf:"bytes,1,opt,name=blob_storage_container,json=blobStorageContainer,proto3" json:"blob_storage_container,omitempty"`
	// azure storage-account-name
	StorageAccountName string `protobuf:"bytes,2,opt,name=storage_account_name,json=storageAccountName,proto3" json:"storage_account_name,omitempty"`
	// azure storage-account-key
	StorageAccountKey string `protobuf:"bytes,3,opt,name=storage_account_key,json=storageAccountKey,proto3" json:"storage_account_key,omitempty"`
}

func (x *PulumiAzureBlobStorageBackend) Reset() {
	*x = PulumiAzureBlobStorageBackend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_credential_pulumibackendcredential_v1_spec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulumiAzureBlobStorageBackend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulumiAzureBlobStorageBackend) ProtoMessage() {}

func (x *PulumiAzureBlobStorageBackend) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_credential_pulumibackendcredential_v1_spec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulumiAzureBlobStorageBackend.ProtoReflect.Descriptor instead.
func (*PulumiAzureBlobStorageBackend) Descriptor() ([]byte, []int) {
	return file_project_planton_credential_pulumibackendcredential_v1_spec_proto_rawDescGZIP(), []int{5}
}

func (x *PulumiAzureBlobStorageBackend) GetBlobStorageContainer() string {
	if x != nil {
		return x.BlobStorageContainer
	}
	return ""
}

func (x *PulumiAzureBlobStorageBackend) GetStorageAccountName() string {
	if x != nil {
		return x.StorageAccountName
	}
	return ""
}

func (x *PulumiAzureBlobStorageBackend) GetStorageAccountKey() string {
	if x != nil {
		return x.StorageAccountKey
	}
	return ""
}

var File_project_planton_credential_pulumibackendcredential_v1_spec_proto protoreflect.FileDescriptor

var file_project_planton_credential_pulumibackendcredential_v1_spec_proto_rawDesc = []byte{
	0x0a, 0x40, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x70, 0x75, 0x6c,
	0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x35, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x70,
	0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x0c, 0x0a, 0x1b, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x42,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x80, 0x01, 0x0a, 0x13, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x48, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e,
	0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x6c, 0x75, 0x6d,
	0x69, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x11, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x42, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x7f, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x53, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e,
	0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x6c, 0x75, 0x6d,
	0x69, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x5c, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x75, 0x6c, 0x75, 0x6d, 0x69, 0x48, 0x74, 0x74, 0x70, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x60, 0x0a, 0x06, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x33,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x75, 0x6c, 0x75, 0x6d, 0x69, 0x41, 0x77, 0x73, 0x53, 0x33, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x52, 0x05, 0x61, 0x77, 0x73, 0x53, 0x33, 0x12, 0x88, 0x01, 0x0a, 0x14, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52,
	0x12, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x12, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x6c,
	0x6f, 0x62, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x54, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x75,
	0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x41,
	0x7a, 0x75, 0x72, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x10, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x42, 0x6c, 0x6f,
	0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x3a, 0xa1, 0x06, 0xba, 0x48, 0x9d, 0x06, 0x1a,
	0xad, 0x01, 0x0a, 0x1a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x1a, 0x8e,
	0x01, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x20, 0x26,
	0x26, 0x20, 0x21, 0x68, 0x61, 0x73, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x29, 0x3f, 0x20,
	0x27, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x61,
	0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x27, 0x3a, 0x20, 0x27, 0x27, 0x1a,
	0x78, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x1a, 0x67, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x3d, 0x20, 0x32, 0x20,
	0x26, 0x26, 0x20, 0x21, 0x68, 0x61, 0x73, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x68, 0x74, 0x74,
	0x70, 0x29, 0x3f, 0x20, 0x27, 0x68, 0x74, 0x74, 0x70, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x77,
	0x68, 0x65, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20,
	0x68, 0x74, 0x74, 0x70, 0x27, 0x3a, 0x20, 0x27, 0x27, 0x1a, 0x80, 0x01, 0x0a, 0x0f, 0x61, 0x77,
	0x73, 0x5f, 0x73, 0x33, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x1a, 0x6d, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x3d, 0x20, 0x33, 0x20, 0x26, 0x26, 0x20,
	0x21, 0x68, 0x61, 0x73, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x33,
	0x29, 0x3f, 0x20, 0x27, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x33, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x69, 0x73,
	0x20, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x33, 0x27, 0x3a, 0x20, 0x27, 0x27, 0x1a, 0xb9, 0x01, 0x0a,
	0x1d, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x1a, 0x97,
	0x01, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x3d, 0x20, 0x34, 0x20, 0x26,
	0x26, 0x20, 0x21, 0x68, 0x61, 0x73, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x29, 0x3f, 0x20, 0x27, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x20, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x27, 0x3a, 0x20, 0x27, 0x27, 0x1a, 0xb1, 0x01, 0x0a, 0x1b, 0x61, 0x7a, 0x75,
	0x72, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x1a, 0x91, 0x01, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x20, 0x3d, 0x3d, 0x20, 0x35, 0x20, 0x26, 0x26, 0x20, 0x21, 0x68, 0x61, 0x73,
	0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x62,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x29, 0x3f, 0x20, 0x27, 0x61, 0x7a, 0x75, 0x72,
	0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x20, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x79, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x20, 0x69, 0x73, 0x20, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x27, 0x3a, 0x20, 0x27, 0x27, 0x22, 0x4e, 0x0a, 0x1c,
	0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x0f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0xac, 0x01, 0x0a,
	0x11, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x48, 0x74, 0x74, 0x70, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1a, 0x8a, 0xa6, 0x1d, 0x16, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x52,
	0x06, 0x61, 0x70, 0x69, 0x55, 0x72, 0x6c, 0x12, 0x37, 0x0a, 0x13, 0x70, 0x75, 0x6c, 0x75, 0x6d,
	0x69, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x12, 0x70, 0x75,
	0x6c, 0x75, 0x6d, 0x69, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa7, 0x01, 0x0a, 0x12,
	0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x41, 0x77, 0x73, 0x53, 0x33, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x12, 0x23, 0x0a, 0x09, 0x73, 0x33, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x73,
	0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x31, 0x0a, 0x11, 0x61, 0x77, 0x73, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0e, 0x61, 0x77, 0x73, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x15, 0x61, 0x77,
	0x73, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x12, 0x61, 0x77, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x22, 0x8d, 0x01, 0x0a, 0x1f, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x0a, 0x67, 0x63, 0x73,
	0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x67, 0x63, 0x73, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x43, 0x0a, 0x1a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x17, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x42,
	0x61, 0x73, 0x65, 0x36, 0x34, 0x22, 0xcf, 0x01, 0x0a, 0x1d, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69,
	0x41, 0x7a, 0x75, 0x72, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x16, 0x62, 0x6c, 0x6f, 0x62, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x14, 0x62, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x12, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x36, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x2a, 0x97, 0x01, 0x0a, 0x11, 0x50, 0x75, 0x6c, 0x75,
	0x6d, 0x69, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x1f, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x74, 0x74,
	0x70, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x33, 0x10, 0x03, 0x12,
	0x18, 0x0a, 0x14, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x61, 0x7a, 0x75,
	0x72, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x10,
	0x05, 0x42, 0xc0, 0x03, 0x0a, 0x39, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x42,
	0x09, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x7f, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x2f, 0x76, 0x31, 0x3b, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x76, 0x31, 0xa2, 0x02, 0x04,
	0x50, 0x50, 0x43, 0x50, 0xaa, 0x02, 0x35, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x2e, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x35, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5c, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x41, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x5c, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x39, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x3a, 0x3a, 0x50, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_project_planton_credential_pulumibackendcredential_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_credential_pulumibackendcredential_v1_spec_proto_rawDescData = file_project_planton_credential_pulumibackendcredential_v1_spec_proto_rawDesc
)

func file_project_planton_credential_pulumibackendcredential_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_credential_pulumibackendcredential_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_credential_pulumibackendcredential_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_credential_pulumibackendcredential_v1_spec_proto_rawDescData)
	})
	return file_project_planton_credential_pulumibackendcredential_v1_spec_proto_rawDescData
}

var file_project_planton_credential_pulumibackendcredential_v1_spec_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_project_planton_credential_pulumibackendcredential_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_project_planton_credential_pulumibackendcredential_v1_spec_proto_goTypes = []any{
	(PulumiBackendType)(0),                  // 0: project.planton.credential.pulumibackendcredential.v1.PulumiBackendType
	(*PulumiBackendCredentialSpec)(nil),     // 1: project.planton.credential.pulumibackendcredential.v1.PulumiBackendCredentialSpec
	(*PulumiLocalFileSystemBackend)(nil),    // 2: project.planton.credential.pulumibackendcredential.v1.PulumiLocalFileSystemBackend
	(*PulumiHttpBackend)(nil),               // 3: project.planton.credential.pulumibackendcredential.v1.PulumiHttpBackend
	(*PulumiAwsS3Backend)(nil),              // 4: project.planton.credential.pulumibackendcredential.v1.PulumiAwsS3Backend
	(*PulumiGoogleCloudStorageBackend)(nil), // 5: project.planton.credential.pulumibackendcredential.v1.PulumiGoogleCloudStorageBackend
	(*PulumiAzureBlobStorageBackend)(nil),   // 6: project.planton.credential.pulumibackendcredential.v1.PulumiAzureBlobStorageBackend
}
var file_project_planton_credential_pulumibackendcredential_v1_spec_proto_depIdxs = []int32{
	0, // 0: project.planton.credential.pulumibackendcredential.v1.PulumiBackendCredentialSpec.pulumi_backend_type:type_name -> project.planton.credential.pulumibackendcredential.v1.PulumiBackendType
	2, // 1: project.planton.credential.pulumibackendcredential.v1.PulumiBackendCredentialSpec.local_file_system:type_name -> project.planton.credential.pulumibackendcredential.v1.PulumiLocalFileSystemBackend
	3, // 2: project.planton.credential.pulumibackendcredential.v1.PulumiBackendCredentialSpec.http:type_name -> project.planton.credential.pulumibackendcredential.v1.PulumiHttpBackend
	4, // 3: project.planton.credential.pulumibackendcredential.v1.PulumiBackendCredentialSpec.aws_s3:type_name -> project.planton.credential.pulumibackendcredential.v1.PulumiAwsS3Backend
	5, // 4: project.planton.credential.pulumibackendcredential.v1.PulumiBackendCredentialSpec.google_cloud_storage:type_name -> project.planton.credential.pulumibackendcredential.v1.PulumiGoogleCloudStorageBackend
	6, // 5: project.planton.credential.pulumibackendcredential.v1.PulumiBackendCredentialSpec.azure_blob_storage:type_name -> project.planton.credential.pulumibackendcredential.v1.PulumiAzureBlobStorageBackend
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_project_planton_credential_pulumibackendcredential_v1_spec_proto_init() }
func file_project_planton_credential_pulumibackendcredential_v1_spec_proto_init() {
	if File_project_planton_credential_pulumibackendcredential_v1_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_credential_pulumibackendcredential_v1_spec_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*PulumiBackendCredentialSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_credential_pulumibackendcredential_v1_spec_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PulumiLocalFileSystemBackend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_credential_pulumibackendcredential_v1_spec_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*PulumiHttpBackend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_credential_pulumibackendcredential_v1_spec_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PulumiAwsS3Backend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_credential_pulumibackendcredential_v1_spec_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PulumiGoogleCloudStorageBackend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_credential_pulumibackendcredential_v1_spec_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*PulumiAzureBlobStorageBackend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_credential_pulumibackendcredential_v1_spec_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_credential_pulumibackendcredential_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_credential_pulumibackendcredential_v1_spec_proto_depIdxs,
		EnumInfos:         file_project_planton_credential_pulumibackendcredential_v1_spec_proto_enumTypes,
		MessageInfos:      file_project_planton_credential_pulumibackendcredential_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_credential_pulumibackendcredential_v1_spec_proto = out.File
	file_project_planton_credential_pulumibackendcredential_v1_spec_proto_rawDesc = nil
	file_project_planton_credential_pulumibackendcredential_v1_spec_proto_goTypes = nil
	file_project_planton_credential_pulumibackendcredential_v1_spec_proto_depIdxs = nil
}
