syntax = "proto3";

package project.planton.credential.pulumibackendcredential.v1;

import "buf/validate/validate.proto";
import "project/planton/shared/shared.proto";

//pulumi-backend-credential spec
// These credentials are used for managing Pulumi state storage, which can be configured for different cloud providers or local environments.
// For example, these credentials can be used to store state files in AWS S3, Google Cloud Storage, Azure Blob Storage, or locally on the file system.
// Properly configuring these backends is essential for managing and maintaining infrastructure state efficiently.
message PulumiBackendCredentialSpec {
  //environment-info
  // Provide additional context, such as the associated organization and environment details (e.g., 'production' or 'development').
  project.planton.shared.ApiResourceEnvironmentInfo environment_info = 99;

  // The name of the Pulumi organization that owns the resources.
  // This field is required and is used to identify the Pulumi organization under which the infrastructure is managed.
  // It is crucial for managing access control, resource ownership, and collaboration within the Pulumi ecosystem.
  // Properly setting the organization name helps ensure that resources are created and maintained under the correct organizational context.
  string pulumi_organization = 2 [
    (buf.validate.field).required = true
  ];

  // The provider for the Pulumi backend credential.
  // This field specifies the type of backend used to store Pulumi state (e.g., local file system, AWS S3, Google Cloud Storage).
  // For more information, refer to: https://www.pulumi.com/docs/concepts/state
  // Each backend type has different use cases; for example, local backends are suitable for development, while cloud backends are ideal for scalable, team-based environments.
  // Properly selecting the backend type is crucial for ensuring that the infrastructure state is managed efficiently and securely, depending on the project requirements and team setup.
  PulumiBackendType pulumi_backend_type = 3;

  // local-file-system backend spec
  PulumiLocalFileSystemBackend local_file_system = 4;

  // http backend spec
  PulumiHttpBackend http = 5;

  // aws-s3 backend spec
  PulumiAwsS3Backend aws_s3 = 6;

  // google-cloud-storage backend spec
  PulumiGoogleCloudStorageBackend google_cloud_storage = 7;

  // azure-blob-storage backend spec
  PulumiAzureBlobStorageBackend azure_blob_storage = 8;
}

//pulumi-backend-credential spec for local-file-system backend
//https://www.pulumi.com/docs/concepts/state/#local-filesystem
// Mention that the local file system backend is typically used for smaller projects or testing purposes to help users understand its limitations.
message PulumiLocalFileSystemBackend {
  //state-file path
  string state_file_path = 1;
}

//pulumi-backend-credential spec for http backend
// hosted http backend provided by Pulumi Inc is https://pulumi.cloud
// Clarify that the HTTP backend is a centralized solution that can be used for managing state across distributed teams, which may have specific security considerations.
message PulumiHttpBackend {
  //api base url
  //this will be https://api.pulumi.com for Hosted Pulumi Cloud
  string api_url = 1;
  //access token to be used for authorization
  string access_token = 2;
}

//pulumi-backend-credential spec for aws-s3 backend
//https://www.pulumi.com/docs/concepts/state/#aws-s3
// Consider adding a note about the IAM roles or policies required to access the S3 bucket securely.
message PulumiAwsS3Backend {
  //name of s3-bucket
  string s3_bucket = 1;
  //aws region
  string region = 2;
  //aws-access-key-id
  string aws_access_key_id = 3;
  //aws-secret-key-id
  string aws_secret_key_id = 4;
}

//pulumi-backend-credential spec for google-cloud-storage backend
//https://www.pulumi.com/docs/concepts/state/#google-cloud-storage
// Mention the necessary roles or permissions needed for the GCP service account to interact with Google Cloud Storage.
message PulumiGoogleCloudStorageBackend {
  //name of gcs-bucket
  string gcs_bucket = 1;
  //base64 encoded gcp service-account-key
  string gcp_service_account_key_base64 = 2;
}

//pulumi-backend-credential spec for azure-blob-storage backend
// https://www.pulumi.com/docs/concepts/state/#azure-blob-storage
// Provide a note on the importance of securing the storage account key and potential alternatives, like using Azure Key Vault.
message PulumiAzureBlobStorageBackend {
  //name of azure blob storage container
  string blob_storage_container = 1;
  //azure storage-account-name
  string storage_account_name = 2;
  //azure storage-account-key
  string storage_account_key = 3;
}

//https://www.pulumi.com/docs/concepts/state
// PulumiBackendType enum represents the various backends supported for storing Pulumi state.
// Each backend type has its own use cases and advantages depending on the project requirements.
// - local_file_system: Suitable for small projects or local development/testing environments.
// - http: A centralized backend provided by Pulumi for managing state across distributed teams.
// - aws_s3: AWS S3 can be used for scalable and reliable state storage, commonly used in AWS environments.
// - google_cloud_storage: GCP's storage solution for state files, ideal for projects hosted on Google Cloud.
// - azure_blob_storage: Azure Blob Storage for state storage, typically used for projects hosted on Microsoft Azure.
enum PulumiBackendType {
  pulumi_backend_type_unspecified = 0;
  local_file_system = 1;
  http = 2;
  aws_s3 = 3;
  google_cloud_storage = 4;
  azure_blob_storage = 5;
}
