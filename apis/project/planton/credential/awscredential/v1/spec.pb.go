// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/credential/awscredential/v1/spec.proto

package awscredentialv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AwsCredentialSpec message represents the specification required to connect an AWS Account.
// This message consolidates all necessary input parameters to establish a connection with an AWS Account, ensuring
// accurate configuration and validation of credentials.
// Fields include details like AWS account ID, access credentials, and the region, providing a complete set of
// information for securely connecting to AWS.
// Detailed validation rules have been applied to these fields to ensure input correctness and adherence to
// security protocols.
type AwsCredentialSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The AWS Account ID, which uniquely identifies the AWS account.
	// This is a mandatory field and must be a numeric string.
	// The value cannot be empty and must only contain numbers (0-9).
	// For more information do refer this link https://docs.aws.amazon.com/accounts/latest/reference/manage-acct-identifiers.html
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The AWS Access Key ID, which is used to authenticate API requests to AWS services.
	// This is a required field, and it must always start with 'AKIA' followed by 16 alphanumeric characters.
	// This field must contain exactly 20 characters, and validation rules ensure the correctness of the format.
	// For more information do refer this link https://docs.aws.amazon.com/IAM/latest/UserGuide/access-keys-admin-managed.html
	AccessKeyId string `protobuf:"bytes,2,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	// The AWS Secret Access Key, which is used in combination with the access key ID to authenticate API requests to AWS services.
	// This is a required field, and the value must be exactly 40 characters long.
	// The secret access key can include numbers, lowercase and uppercase letters, slashes (/), and plus signs (+).
	// For more information do refer this link https://docs.aws.amazon.com/IAM/latest/UserGuide/access-keys-admin-managed.html
	SecretAccessKey string `protobuf:"bytes,3,opt,name=secret_access_key,json=secretAccessKey,proto3" json:"secret_access_key,omitempty"`
	// The AWS region to be used when configuring this AWS credential.
	// This optional field allows specifying the region in which resources will be created or managed.
	// For more information do refer this link https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html
	Region string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *AwsCredentialSpec) Reset() {
	*x = AwsCredentialSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_credential_awscredential_v1_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsCredentialSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsCredentialSpec) ProtoMessage() {}

func (x *AwsCredentialSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_credential_awscredential_v1_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsCredentialSpec.ProtoReflect.Descriptor instead.
func (*AwsCredentialSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_credential_awscredential_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AwsCredentialSpec) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AwsCredentialSpec) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *AwsCredentialSpec) GetSecretAccessKey() string {
	if x != nil {
		return x.SecretAccessKey
	}
	return ""
}

func (x *AwsCredentialSpec) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

var File_project_planton_credential_awscredential_v1_spec_proto protoreflect.FileDescriptor

var file_project_planton_credential_awscredential_v1_spec_proto_rawDesc = []byte{
	0x0a, 0x36, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x61, 0x77, 0x73,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70,
	0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x2e, 0x61, 0x77, 0x73, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x97, 0x06, 0x0a, 0x11, 0x41, 0x77, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x12, 0x77, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x58, 0xba, 0x48, 0x55, 0xba,
	0x01, 0x4f, 0x0a, 0x13, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x4f, 0x6e, 0x6c, 0x79, 0x20, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x20, 0x28, 0x30, 0x2d, 0x39, 0x29, 0x20, 0x61, 0x72, 0x65, 0x20,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x1a, 0x18, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x24, 0x27,
	0x29, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x82, 0x02, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0xdd, 0x01, 0xba, 0x48, 0xd9, 0x01, 0xba, 0x01,
	0x49, 0x0a, 0x16, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x12, 0x16, 0x4d, 0x75, 0x73, 0x74, 0x20,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x27, 0x41, 0x4b, 0x49, 0x41,
	0x27, 0x1a, 0x17, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28,
	0x27, 0x5e, 0x41, 0x4b, 0x49, 0x41, 0x2e, 0x2a, 0x27, 0x29, 0xba, 0x01, 0x81, 0x01, 0x0a, 0x16,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x12, 0x3e, 0x4d, 0x75, 0x73, 0x74, 0x20, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x27, 0x41, 0x4b, 0x49, 0x41, 0x27, 0x20, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x31, 0x36, 0x20, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x73, 0x27, 0x1a, 0x27, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x2e, 0x7b, 0x34, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x31, 0x36, 0x7d, 0x2e, 0x2a, 0x24, 0x27, 0x29, 0xc8,
	0x01, 0x01, 0x72, 0x03, 0x98, 0x01, 0x14, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0xdc, 0x02, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0xaf, 0x02, 0xba, 0x48, 0xab, 0x02, 0xba, 0x01, 0x9f, 0x02, 0x0a, 0x1a, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x61, 0x77, 0x73, 0x2e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0xdb, 0x01, 0x54, 0x68, 0x65, 0x20, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x41, 0x57, 0x53, 0x20, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x20, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x4b, 0x65, 0x79, 0x20, 0x69, 0x73, 0x20,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2e, 0x20, 0x49, 0x74, 0x20, 0x6d, 0x75, 0x73, 0x74,
	0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x65, 0x78, 0x61, 0x63, 0x74, 0x6c, 0x79,
	0x20, 0x34, 0x30, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x20, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x75, 0x70, 0x70, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6c, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x73, 0x20, 0x28,
	0x2f, 0x29, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x6c, 0x75, 0x73, 0x20, 0x73, 0x69, 0x67,
	0x6e, 0x73, 0x20, 0x28, 0x2b, 0x29, 0x2e, 0x20, 0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x79, 0x6f, 0x75, 0x72,
	0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x72, 0x79, 0x20, 0x61,
	0x67, 0x61, 0x69, 0x6e, 0x2e, 0x1a, 0x23, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x2f, 0x2b, 0x5d, 0x7b, 0x34, 0x30, 0x7d, 0x24, 0x27, 0x29, 0xc8, 0x01, 0x01, 0x72, 0x03, 0x98,
	0x01, 0x28, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0d, 0x8a, 0xa6, 0x1d, 0x09, 0x75, 0x73, 0x2d, 0x77, 0x65, 0x73, 0x74,
	0x2d, 0x32, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0xfa, 0x02, 0x0a, 0x2f, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x61, 0x77,
	0x73, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x42, 0x09,
	0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x6b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x61, 0x77, 0x73, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x77, 0x73, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x76, 0x31, 0xa2, 0x02, 0x04, 0x50, 0x50, 0x43, 0x41, 0xaa,
	0x02, 0x2b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x41, 0x77, 0x73,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x2b,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5c, 0x41, 0x77, 0x73, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x37, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5c, 0x41, 0x77, 0x73, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x2f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a,
	0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x3a, 0x3a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x3a, 0x3a, 0x41, 0x77, 0x73, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_project_planton_credential_awscredential_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_credential_awscredential_v1_spec_proto_rawDescData = file_project_planton_credential_awscredential_v1_spec_proto_rawDesc
)

func file_project_planton_credential_awscredential_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_credential_awscredential_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_credential_awscredential_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_credential_awscredential_v1_spec_proto_rawDescData)
	})
	return file_project_planton_credential_awscredential_v1_spec_proto_rawDescData
}

var file_project_planton_credential_awscredential_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_credential_awscredential_v1_spec_proto_goTypes = []any{
	(*AwsCredentialSpec)(nil), // 0: project.planton.credential.awscredential.v1.AwsCredentialSpec
}
var file_project_planton_credential_awscredential_v1_spec_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_project_planton_credential_awscredential_v1_spec_proto_init() }
func file_project_planton_credential_awscredential_v1_spec_proto_init() {
	if File_project_planton_credential_awscredential_v1_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_credential_awscredential_v1_spec_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AwsCredentialSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_credential_awscredential_v1_spec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_credential_awscredential_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_credential_awscredential_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_credential_awscredential_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_credential_awscredential_v1_spec_proto = out.File
	file_project_planton_credential_awscredential_v1_spec_proto_rawDesc = nil
	file_project_planton_credential_awscredential_v1_spec_proto_goTypes = nil
	file_project_planton_credential_awscredential_v1_spec_proto_depIdxs = nil
}
