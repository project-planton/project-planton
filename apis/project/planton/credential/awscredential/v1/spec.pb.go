// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/credential/awscredential/v1/spec.proto

package awscredentialv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AwsCredentialSpec message represents the specification required to connect an AWS Account.
// This message consolidates all necessary input parameters to establish a connection with an AWS Account, ensuring
// accurate configuration and validation of credentials.
// Fields include details like AWS account ID, access credentials, and the region, providing a complete set of
// information for securely connecting to AWS.
// Detailed validation rules have been applied to these fields to ensure input correctness and adherence to
// security protocols.
type AwsCredentialSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The AWS Account ID, which uniquely identifies the AWS account.
	// This is a mandatory field and must be a numeric string.
	// The value cannot be empty and must only contain numbers (0-9).
	// For more information do refer this link https://docs.aws.amazon.com/accounts/latest/reference/manage-acct-identifiers.html
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The AWS Access Key ID, which is used to authenticate API requests to AWS services.
	// This is a required field, and it must start with either 'AKIA' (long-term credentials) or 'ASIA' (temporary security credentials)
	// followed by 16 alphanumeric characters. This field must contain exactly 20 characters.
	// For more information do refer this link https://docs.aws.amazon.com/IAM/latest/UserGuide/access-keys-admin-managed.html
	AccessKeyId string `protobuf:"bytes,2,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	// The AWS Secret Access Key, which is used in combination with the access key ID to authenticate API requests to AWS services.
	// This is a required field, and the value must be exactly 40 characters long.
	// The secret access key can include numbers, lowercase and uppercase letters, slashes (/), and plus signs (+).
	// For more information do refer this link https://docs.aws.amazon.com/IAM/latest/UserGuide/access-keys-admin-managed.html
	SecretAccessKey string `protobuf:"bytes,3,opt,name=secret_access_key,json=secretAccessKey,proto3" json:"secret_access_key,omitempty"`
	// The AWS region to be used when configuring this AWS credential.
	// This optional field allows specifying the region in which resources will be created or managed.
	// For more information do refer this link https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html
	Region string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	// The AWS Session Token, required when using temporary security credentials.
	// This field is optional and only needed when using temporary credentials obtained through
	// AWS STS operations (e.g., AssumeRole, GetSessionToken).
	// Temporary credentials have Access Key IDs starting with 'ASIA'.
	// For more information refer to https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html
	SessionToken  string `protobuf:"bytes,5,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AwsCredentialSpec) Reset() {
	*x = AwsCredentialSpec{}
	mi := &file_project_planton_credential_awscredential_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AwsCredentialSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsCredentialSpec) ProtoMessage() {}

func (x *AwsCredentialSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_credential_awscredential_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsCredentialSpec.ProtoReflect.Descriptor instead.
func (*AwsCredentialSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_credential_awscredential_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *AwsCredentialSpec) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AwsCredentialSpec) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *AwsCredentialSpec) GetSecretAccessKey() string {
	if x != nil {
		return x.SecretAccessKey
	}
	return ""
}

func (x *AwsCredentialSpec) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AwsCredentialSpec) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

var File_project_planton_credential_awscredential_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_credential_awscredential_v1_spec_proto_rawDesc = "" +
	"\n" +
	"6project/planton/credential/awscredential/v1/spec.proto\x12+project.planton.credential.awscredential.v1\x1a\x1bbuf/validate/validate.proto\x1a,project/planton/shared/options/options.proto\"\xef\x06\n" +
	"\x11AwsCredentialSpec\x12w\n" +
	"\n" +
	"account_id\x18\x01 \x01(\tBX\xbaHU\xba\x01O\n" +
	"\x13spec.aws.account_id\x12\x1eOnly numbers (0-9) are allowed\x1a\x18this.matches('^[0-9]+$')\xc8\x01\x01R\taccountId\x12\xb5\x02\n" +
	"\raccess_key_id\x18\x02 \x01(\tB\x90\x02\xbaH\x8c\x02\xba\x01r\n" +
	"\x19spec.access_key_id.prefix\x128Must start with 'AKIA' (long-term) or 'ASIA' (temporary)\x1a\x1bthis.matches('^A(K|S)IA.*')\xba\x01\x8b\x01\n" +
	"\x19spec.access_key_id.format\x12GMust start with 'AKIA' or 'ASIA' followed by 16 alphanumeric characters\x1a%this.matches('^.{4}[a-zA-Z0-9]{16}$')\xc8\x01\x01r\x03\x98\x01\x14R\vaccessKeyId\x12\xdc\x02\n" +
	"\x11secret_access_key\x18\x03 \x01(\tB\xaf\x02\xbaH\xab\x02\xba\x01\x9f\x02\n" +
	"\x1aspec.aws.secret_access_key\x12\xdb\x01The provided AWS Secret Access Key is invalid. It must contain exactly 40 characters consisting of numbers, lowercase and uppercase letters, slashes (/), and plus signs (+). Please double-check your input and try again.\x1a#this.matches('^[0-9a-zA-Z/+]{40}$')\xc8\x01\x01r\x03\x98\x01(R\x0fsecretAccessKey\x12%\n" +
	"\x06region\x18\x04 \x01(\tB\r\x8a\xa6\x1d\tus-west-2R\x06region\x12#\n" +
	"\rsession_token\x18\x05 \x01(\tR\fsessionTokenB\xfa\x02\n" +
	"/com.project.planton.credential.awscredential.v1B\tSpecProtoP\x01Zkgithub.com/project-planton/project-planton/apis/project/planton/credential/awscredential/v1;awscredentialv1\xa2\x02\x04PPCA\xaa\x02+Project.Planton.Credential.Awscredential.V1\xca\x02+Project\\Planton\\Credential\\Awscredential\\V1\xe2\x027Project\\Planton\\Credential\\Awscredential\\V1\\GPBMetadata\xea\x02/Project::Planton::Credential::Awscredential::V1b\x06proto3"

var (
	file_project_planton_credential_awscredential_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_credential_awscredential_v1_spec_proto_rawDescData []byte
)

func file_project_planton_credential_awscredential_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_credential_awscredential_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_credential_awscredential_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_credential_awscredential_v1_spec_proto_rawDesc), len(file_project_planton_credential_awscredential_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_credential_awscredential_v1_spec_proto_rawDescData
}

var file_project_planton_credential_awscredential_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_credential_awscredential_v1_spec_proto_goTypes = []any{
	(*AwsCredentialSpec)(nil), // 0: project.planton.credential.awscredential.v1.AwsCredentialSpec
}
var file_project_planton_credential_awscredential_v1_spec_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_project_planton_credential_awscredential_v1_spec_proto_init() }
func file_project_planton_credential_awscredential_v1_spec_proto_init() {
	if File_project_planton_credential_awscredential_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_credential_awscredential_v1_spec_proto_rawDesc), len(file_project_planton_credential_awscredential_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_credential_awscredential_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_credential_awscredential_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_credential_awscredential_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_credential_awscredential_v1_spec_proto = out.File
	file_project_planton_credential_awscredential_v1_spec_proto_goTypes = nil
	file_project_planton_credential_awscredential_v1_spec_proto_depIdxs = nil
}
