syntax = "proto3";

package project.planton.credential.cloudflarecredential.v1;

import "buf/validate/validate.proto";
import "project/planton/shared/options/options.proto";

// CloudflareAuthScheme defines the authentication schemes supported by
enum CloudflareAuthScheme {
  cloudflare_auth_scheme_unspecified = 0; // Must not be used.
  api_token                          = 1; // Recommended: single scoped token.
  legacy_api_key                     = 2; // Global API key + account email.
}

// CloudflareCredentialSpec defines the specification for a Cloudflare
message CloudflareCredentialSpec {
  // Which authentication scheme this credential will use.
  CloudflareAuthScheme auth_scheme = 1 [
    (buf.validate.field).required = true,
    (buf.validate.field).enum.defined_only = true
  ];

  // Scoped API Token (used when auth_scheme = api_token).
  string api_token = 2 [
    (buf.validate.field).string.min_len = 20
  ];

  // Global API Key (used when auth_scheme = legacy_api_key).
  string api_key = 3 [
    (buf.validate.field).string.min_len = 20
  ];

  // Account email (paired with api_key for legacy scheme).
  string email = 4 [
    (buf.validate.field).string.email = true
  ];

  // **Required** Cloudflare Account ID (32‑char hex) that all provider
  // operations will default to.
  string account_id = 5 [
    (buf.validate.field).required = true,
    (buf.validate.field).cel = {
      id: "spec.cloudflare.account_id_format",
      message: "account_id must be a 32‑character hexadecimal string",
      expression: "this.matches('^[0-9a-fA-F]{32}$')"
    }
  ];

  // -------------------------------------------------------------------------
  // Cross‑field validation
  // -------------------------------------------------------------------------
  option (buf.validate.message).cel = {
    id: "spec.cloudflare.auth_scheme_selected",
    message: "auth_scheme must not be UNSPECIFIED",
    expression: "auth_scheme != 0"
  };

  option (buf.validate.message).cel = {
    id: "spec.cloudflare.api_token_requirement",
    message: "api_token must be provided and api_key/email must be empty when auth_scheme is API_TOKEN.",
    expression: "auth_scheme != 1 || (size(api_token) > 0 && size(api_key) == 0 && size(email) == 0)"
  };

  option (buf.validate.message).cel = {
    id: "spec.cloudflare.legacy_key_requirement",
    message: "api_key and email must be provided and api_token must be empty when auth_scheme is LEGACY_API_KEY.",
    expression: "auth_scheme != 2 || (size(api_token) == 0 && size(api_key) > 0 && size(email) > 0)"
  };
}
