// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/credential/cloudflarecredential/v1/spec.proto

package cloudflarecredentialv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CloudflareAuthScheme defines the authentication schemes supported by
type CloudflareAuthScheme int32

const (
	CloudflareAuthScheme_cloudflare_auth_scheme_unspecified CloudflareAuthScheme = 0 // Must not be used.
	CloudflareAuthScheme_api_token                          CloudflareAuthScheme = 1 // Recommended: single scoped token.
	CloudflareAuthScheme_legacy_api_key                     CloudflareAuthScheme = 2 // Global API key + account email.
)

// Enum value maps for CloudflareAuthScheme.
var (
	CloudflareAuthScheme_name = map[int32]string{
		0: "cloudflare_auth_scheme_unspecified",
		1: "api_token",
		2: "legacy_api_key",
	}
	CloudflareAuthScheme_value = map[string]int32{
		"cloudflare_auth_scheme_unspecified": 0,
		"api_token":                          1,
		"legacy_api_key":                     2,
	}
)

func (x CloudflareAuthScheme) Enum() *CloudflareAuthScheme {
	p := new(CloudflareAuthScheme)
	*p = x
	return p
}

func (x CloudflareAuthScheme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudflareAuthScheme) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_credential_cloudflarecredential_v1_spec_proto_enumTypes[0].Descriptor()
}

func (CloudflareAuthScheme) Type() protoreflect.EnumType {
	return &file_project_planton_credential_cloudflarecredential_v1_spec_proto_enumTypes[0]
}

func (x CloudflareAuthScheme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloudflareAuthScheme.Descriptor instead.
func (CloudflareAuthScheme) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_credential_cloudflarecredential_v1_spec_proto_rawDescGZIP(), []int{0}
}

// CloudflareCredentialSpec defines the specification for a Cloudflare
type CloudflareCredentialSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Which authentication scheme this credential will use.
	AuthScheme CloudflareAuthScheme `protobuf:"varint,1,opt,name=auth_scheme,json=authScheme,proto3,enum=project.planton.credential.cloudflarecredential.v1.CloudflareAuthScheme" json:"auth_scheme,omitempty"`
	// Scoped API Token (used when auth_scheme = api_token).
	ApiToken string `protobuf:"bytes,2,opt,name=api_token,json=apiToken,proto3" json:"api_token,omitempty"`
	// Global API Key (used when auth_scheme = legacy_api_key).
	ApiKey string `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// Account email (paired with api_key for legacy scheme).
	Email string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	// R2 Storage credentials (S3-compatible object storage).
	// Optional: only required if you need to access R2 buckets.
	R2            *CloudflareCredentialsR2Spec `protobuf:"bytes,5,opt,name=r2,proto3" json:"r2,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloudflareCredentialSpec) Reset() {
	*x = CloudflareCredentialSpec{}
	mi := &file_project_planton_credential_cloudflarecredential_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudflareCredentialSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudflareCredentialSpec) ProtoMessage() {}

func (x *CloudflareCredentialSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_credential_cloudflarecredential_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudflareCredentialSpec.ProtoReflect.Descriptor instead.
func (*CloudflareCredentialSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_credential_cloudflarecredential_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *CloudflareCredentialSpec) GetAuthScheme() CloudflareAuthScheme {
	if x != nil {
		return x.AuthScheme
	}
	return CloudflareAuthScheme_cloudflare_auth_scheme_unspecified
}

func (x *CloudflareCredentialSpec) GetApiToken() string {
	if x != nil {
		return x.ApiToken
	}
	return ""
}

func (x *CloudflareCredentialSpec) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *CloudflareCredentialSpec) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CloudflareCredentialSpec) GetR2() *CloudflareCredentialsR2Spec {
	if x != nil {
		return x.R2
	}
	return nil
}

// CloudflareCredentialsR2Spec defines credentials for Cloudflare R2 object storage.
// R2 is Cloudflare's S3-compatible object storage service.
type CloudflareCredentialsR2Spec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// R2 Access Key ID for S3-compatible API access.
	AccessKeyId string `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	// R2 Secret Access Key for S3-compatible API access.
	SecretAccessKey string `protobuf:"bytes,2,opt,name=secret_access_key,json=secretAccessKey,proto3" json:"secret_access_key,omitempty"`
	// R2 endpoint URL for S3-compatible API access.
	// Optional: defaults to https://<account_id>.r2.cloudflarestorage.com if not specified.
	// Use this to override with custom domains or region-specific endpoints.
	Endpoint      string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloudflareCredentialsR2Spec) Reset() {
	*x = CloudflareCredentialsR2Spec{}
	mi := &file_project_planton_credential_cloudflarecredential_v1_spec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudflareCredentialsR2Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudflareCredentialsR2Spec) ProtoMessage() {}

func (x *CloudflareCredentialsR2Spec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_credential_cloudflarecredential_v1_spec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudflareCredentialsR2Spec.ProtoReflect.Descriptor instead.
func (*CloudflareCredentialsR2Spec) Descriptor() ([]byte, []int) {
	return file_project_planton_credential_cloudflarecredential_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *CloudflareCredentialsR2Spec) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *CloudflareCredentialsR2Spec) GetSecretAccessKey() string {
	if x != nil {
		return x.SecretAccessKey
	}
	return ""
}

func (x *CloudflareCredentialsR2Spec) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

var File_project_planton_credential_cloudflarecredential_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_credential_cloudflarecredential_v1_spec_proto_rawDesc = "" +
	"\n" +
	"=project/planton/credential/cloudflarecredential/v1/spec.proto\x122project.planton.credential.cloudflarecredential.v1\x1a\x1bbuf/validate/validate.proto\"\xb3\a\n" +
	"\x18CloudflareCredentialSpec\x12v\n" +
	"\vauth_scheme\x18\x01 \x01(\x0e2H.project.planton.credential.cloudflarecredential.v1.CloudflareAuthSchemeB\v\xbaH\b\xc8\x01\x01\x82\x01\x02\x10\x01R\n" +
	"authScheme\x12'\n" +
	"\tapi_token\x18\x02 \x01(\tB\n" +
	"\xbaH\a\xd8\x01\x01r\x02\x10\x14R\bapiToken\x12#\n" +
	"\aapi_key\x18\x03 \x01(\tB\n" +
	"\xbaH\a\xd8\x01\x01r\x02\x10\x14R\x06apiKey\x12 \n" +
	"\x05email\x18\x04 \x01(\tB\n" +
	"\xbaH\a\xd8\x01\x01r\x02`\x01R\x05email\x12_\n" +
	"\x02r2\x18\x05 \x01(\v2O.project.planton.credential.cloudflarecredential.v1.CloudflareCredentialsR2SpecR\x02r2:\xcd\x04\xbaH\xc9\x04\x1ab\n" +
	"$spec.cloudflare.auth_scheme_selected\x12#auth_scheme must not be UNSPECIFIED\x1a\x15this.auth_scheme != 0\x1a\xeb\x01\n" +
	"%spec.cloudflare.api_token_requirement\x12Yapi_token must be provided and api_key/email must be empty when auth_scheme is API_TOKEN.\x1agthis.auth_scheme != 1 || (size(this.api_token) > 0 && size(this.api_key) == 0 && size(this.email) == 0)\x1a\xf4\x01\n" +
	"&spec.cloudflare.legacy_key_requirement\x12bapi_key and email must be provided and api_token must be empty when auth_scheme is LEGACY_API_KEY.\x1afthis.auth_scheme != 2 || (size(this.api_token) == 0 && size(this.api_key) > 0 && size(this.email) > 0)\"\xae\x01\n" +
	"\x1bCloudflareCredentialsR2Spec\x12.\n" +
	"\raccess_key_id\x18\x01 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x10\x14R\vaccessKeyId\x126\n" +
	"\x11secret_access_key\x18\x02 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x10\x14R\x0fsecretAccessKey\x12'\n" +
	"\bendpoint\x18\x03 \x01(\tB\v\xbaH\b\xd8\x01\x01r\x03\x88\x01\x01R\bendpoint*a\n" +
	"\x14CloudflareAuthScheme\x12&\n" +
	"\"cloudflare_auth_scheme_unspecified\x10\x00\x12\r\n" +
	"\tapi_token\x10\x01\x12\x12\n" +
	"\x0elegacy_api_key\x10\x02B\xab\x03\n" +
	"6com.project.planton.credential.cloudflarecredential.v1B\tSpecProtoP\x01Zygithub.com/project-planton/project-planton/apis/project/planton/credential/cloudflarecredential/v1;cloudflarecredentialv1\xa2\x02\x04PPCC\xaa\x022Project.Planton.Credential.Cloudflarecredential.V1\xca\x022Project\\Planton\\Credential\\Cloudflarecredential\\V1\xe2\x02>Project\\Planton\\Credential\\Cloudflarecredential\\V1\\GPBMetadata\xea\x026Project::Planton::Credential::Cloudflarecredential::V1b\x06proto3"

var (
	file_project_planton_credential_cloudflarecredential_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_credential_cloudflarecredential_v1_spec_proto_rawDescData []byte
)

func file_project_planton_credential_cloudflarecredential_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_credential_cloudflarecredential_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_credential_cloudflarecredential_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_credential_cloudflarecredential_v1_spec_proto_rawDesc), len(file_project_planton_credential_cloudflarecredential_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_credential_cloudflarecredential_v1_spec_proto_rawDescData
}

var file_project_planton_credential_cloudflarecredential_v1_spec_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_project_planton_credential_cloudflarecredential_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_project_planton_credential_cloudflarecredential_v1_spec_proto_goTypes = []any{
	(CloudflareAuthScheme)(0),           // 0: project.planton.credential.cloudflarecredential.v1.CloudflareAuthScheme
	(*CloudflareCredentialSpec)(nil),    // 1: project.planton.credential.cloudflarecredential.v1.CloudflareCredentialSpec
	(*CloudflareCredentialsR2Spec)(nil), // 2: project.planton.credential.cloudflarecredential.v1.CloudflareCredentialsR2Spec
}
var file_project_planton_credential_cloudflarecredential_v1_spec_proto_depIdxs = []int32{
	0, // 0: project.planton.credential.cloudflarecredential.v1.CloudflareCredentialSpec.auth_scheme:type_name -> project.planton.credential.cloudflarecredential.v1.CloudflareAuthScheme
	2, // 1: project.planton.credential.cloudflarecredential.v1.CloudflareCredentialSpec.r2:type_name -> project.planton.credential.cloudflarecredential.v1.CloudflareCredentialsR2Spec
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_project_planton_credential_cloudflarecredential_v1_spec_proto_init() }
func file_project_planton_credential_cloudflarecredential_v1_spec_proto_init() {
	if File_project_planton_credential_cloudflarecredential_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_credential_cloudflarecredential_v1_spec_proto_rawDesc), len(file_project_planton_credential_cloudflarecredential_v1_spec_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_credential_cloudflarecredential_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_credential_cloudflarecredential_v1_spec_proto_depIdxs,
		EnumInfos:         file_project_planton_credential_cloudflarecredential_v1_spec_proto_enumTypes,
		MessageInfos:      file_project_planton_credential_cloudflarecredential_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_credential_cloudflarecredential_v1_spec_proto = out.File
	file_project_planton_credential_cloudflarecredential_v1_spec_proto_goTypes = nil
	file_project_planton_credential_cloudflarecredential_v1_spec_proto_depIdxs = nil
}
