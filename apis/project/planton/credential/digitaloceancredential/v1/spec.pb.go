// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: project/planton/credential/digitaloceancredential/v1/spec.proto

package digitaloceancredentialv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DigitalOceanCredentialSpec defines the specification for a DigitalOcean credential.
type DigitalOceanCredentialSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The API token for DigitalOcean.
	ApiToken      string `protobuf:"bytes,1,opt,name=api_token,json=apiToken,proto3" json:"api_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DigitalOceanCredentialSpec) Reset() {
	*x = DigitalOceanCredentialSpec{}
	mi := &file_project_planton_credential_digitaloceancredential_v1_spec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DigitalOceanCredentialSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DigitalOceanCredentialSpec) ProtoMessage() {}

func (x *DigitalOceanCredentialSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_credential_digitaloceancredential_v1_spec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DigitalOceanCredentialSpec.ProtoReflect.Descriptor instead.
func (*DigitalOceanCredentialSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_credential_digitaloceancredential_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *DigitalOceanCredentialSpec) GetApiToken() string {
	if x != nil {
		return x.ApiToken
	}
	return ""
}

var File_project_planton_credential_digitaloceancredential_v1_spec_proto protoreflect.FileDescriptor

const file_project_planton_credential_digitaloceancredential_v1_spec_proto_rawDesc = "" +
	"\n" +
	"?project/planton/credential/digitaloceancredential/v1/spec.proto\x124project.planton.credential.digitaloceancredential.v1\x1a\x1bbuf/validate/validate.proto\"A\n" +
	"\x1aDigitalOceanCredentialSpec\x12#\n" +
	"\tapi_token\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\bapiTokenB\xb9\x03\n" +
	"8com.project.planton.credential.digitaloceancredential.v1B\tSpecProtoP\x01Z}github.com/project-planton/project-planton/apis/project/planton/credential/digitaloceancredential/v1;digitaloceancredentialv1\xa2\x02\x04PPCD\xaa\x024Project.Planton.Credential.Digitaloceancredential.V1\xca\x024Project\\Planton\\Credential\\Digitaloceancredential\\V1\xe2\x02@Project\\Planton\\Credential\\Digitaloceancredential\\V1\\GPBMetadata\xea\x028Project::Planton::Credential::Digitaloceancredential::V1b\x06proto3"

var (
	file_project_planton_credential_digitaloceancredential_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_credential_digitaloceancredential_v1_spec_proto_rawDescData []byte
)

func file_project_planton_credential_digitaloceancredential_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_credential_digitaloceancredential_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_credential_digitaloceancredential_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_project_planton_credential_digitaloceancredential_v1_spec_proto_rawDesc), len(file_project_planton_credential_digitaloceancredential_v1_spec_proto_rawDesc)))
	})
	return file_project_planton_credential_digitaloceancredential_v1_spec_proto_rawDescData
}

var file_project_planton_credential_digitaloceancredential_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_project_planton_credential_digitaloceancredential_v1_spec_proto_goTypes = []any{
	(*DigitalOceanCredentialSpec)(nil), // 0: project.planton.credential.digitaloceancredential.v1.DigitalOceanCredentialSpec
}
var file_project_planton_credential_digitaloceancredential_v1_spec_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_project_planton_credential_digitaloceancredential_v1_spec_proto_init() }
func file_project_planton_credential_digitaloceancredential_v1_spec_proto_init() {
	if File_project_planton_credential_digitaloceancredential_v1_spec_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_project_planton_credential_digitaloceancredential_v1_spec_proto_rawDesc), len(file_project_planton_credential_digitaloceancredential_v1_spec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_credential_digitaloceancredential_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_credential_digitaloceancredential_v1_spec_proto_depIdxs,
		MessageInfos:      file_project_planton_credential_digitaloceancredential_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_credential_digitaloceancredential_v1_spec_proto = out.File
	file_project_planton_credential_digitaloceancredential_v1_spec_proto_goTypes = nil
	file_project_planton_credential_digitaloceancredential_v1_spec_proto_depIdxs = nil
}
