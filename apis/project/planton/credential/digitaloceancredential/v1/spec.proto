syntax = "proto3";

package project.planton.credential.digitaloceancredential.v1;

import "buf/validate/validate.proto";
import "project/planton/provider/digitalocean/region.proto";

// DigitalOceanCredentialSpec defines the specification for a DigitalOcean credential.
// This message encapsulates the necessary authentication details for interacting with DigitalOcean's API and services,
// including the general API token and optional credentials for Spaces (S3-compatible object storage).
// As of 2025, DigitalOcean primarily relies on personal access tokens for API authentication, with no native support
// for granular IAM-style roles, OIDC federation, or short-lived credentials like those in AWS, Azure, or GCP.
// OAuth 2 endpoints exist but are intended for user-facing third-party apps, not headless IaC automation.
// For Infrastructure-as-Code (IaC) tools like Terraform and Pulumi, the personal access token is the standard method,
// treated as a required field in provider configurations.
message DigitalOceanCredentialSpec {
  // The API token for DigitalOcean.
  // This is a personal-access API token used to authenticate requests to the DigitalOcean control plane API.
  // Purpose: It grants access to manage resources like Droplets, Kubernetes clusters (DOKS), VPCs, and more.
  // Importance: As the primary authentication mechanism, it must be stored securely (e.g., as sensitive variables in
  // Terraform Cloud, encrypted in Pulumi configs, or in CI/CD secret stores). Tokens inherit the permissions of the
  // creating user, so create them under a dedicated "automation" account with least-privilege roles. Rotate regularly
  // to mitigate risks, as they are long-lived secrets.
  // Functional Relevance: Required for all non-Spaces resources in Terraform/Pulumi providers. Supply via provider
  // blocks (e.g., token = "...") or env vars like DIGITALOCEAN_TOKEN. Without it, IaC deployments for core resources will fail.
  string api_token = 1 [(buf.validate.field).required = true];
  // The default region for the DigitalOcean resources.
  // This specifies the default geographic region (e.g., NYC1, SFO3) where resources should be provisioned unless overridden.
  // Purpose: Ensures consistent resource placement, affecting latency, compliance, and availability.
  // Importance: Required to avoid region-related errors in deployments; select based on user proximity or regulatory needs.
  // Functional Relevance: Used in provider configurations to set defaults for resources like Droplets or Spaces buckets.
  project.planton.provider.digitalocean.DigitalOceanRegion default_region = 2 [(buf.validate.field).required = true];
  // spaces_access_id is the access ID for accessing DigitalOcean Spaces.
  // This is the access key ID (analogous to AWS Access Key ID) for authenticating to DigitalOcean Spaces, an S3-compatible object storage service.
  // Purpose: Acts as a unique identifier ("username") for Spaces API requests, enabling operations like bucket creation, object uploads, and permission management.
  // Importance: Critical for securing access to stored data; must be paired with the secret key. As long-lived secrets, store securely, rotate periodically,
  // and scope to minimal permissions. In 2025, DigitalOcean introduced Per-Bucket Access Keys for more granular control, but this field represents the general
  // Spaces access key pair. Use dedicated keys per environment or pipeline to enhance security and auditability.
  // Functional Relevance: Required (along with spaces_secret_key) for managing Spaces resources in Terraform/Pulumi, in addition to the main API token.
  // Supply via provider fields (e.g., spaces_access_id = "...") or env vars like SPACES_ACCESS_KEY_ID. Enables S3-compatible interactions for storing/retrieving unstructured data.
  string spaces_access_id = 3;
  // spaces_secret_key is the secret key for accessing DigitalOcean Spaces.
  // This is the secret access key (analogous to AWS Secret Access Key) used to sign and authenticate Spaces API requests.
  // Purpose: Serves as the "password" to prove ownership of the access ID, ensuring secure, programmatic access to Spaces.
  // Importance: Highly sensitive; exposure could lead to data breaches. Follow best practices: encrypt in storage, avoid hardcoding, and rotate on schedules.
  // Complements the access ID for isolated authentication to object storage, separate from the general API token. With 2025's Per-Bucket Access Keys,
  // consider using more fine-grained alternatives for production, but this remains essential for broad Spaces management.
  // Functional Relevance: Paired with spaces_access_id for signing HTTP requests to Spaces endpoints. Vital for IaC workflows involving buckets/objects;
  // use env vars like SPACES_SECRET_ACCESS_KEY in automation. Supports interoperability with S3 tools/SDKs.
  string spaces_secret_key = 4;
}
