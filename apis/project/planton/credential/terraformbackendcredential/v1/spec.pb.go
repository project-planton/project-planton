// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: project/planton/credential/terraformbackendcredential/v1/spec.proto

package terraformbackendcredentialv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/project-planton/project-planton/apis/project/planton/shared/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// terraform backend type
type TerraformBackendType int32

const (
	// Unspecified or unknown backend type.
	TerraformBackendType_terraform_backend_type_unspecified TerraformBackendType = 0
	// Local filesystem backend (the default if none is configured).
	TerraformBackendType_local TerraformBackendType = 1
	// Amazon S3-based backend for remote state storage.
	TerraformBackendType_s3 TerraformBackendType = 2
	// Google Cloud Storage backend for storing state.
	TerraformBackendType_gcs TerraformBackendType = 3
	// Azure Resource Manager backend using Azure Blob Storage.
	TerraformBackendType_azurerm TerraformBackendType = 4
)

// Enum value maps for TerraformBackendType.
var (
	TerraformBackendType_name = map[int32]string{
		0: "terraform_backend_type_unspecified",
		1: "local",
		2: "s3",
		3: "gcs",
		4: "azurerm",
	}
	TerraformBackendType_value = map[string]int32{
		"terraform_backend_type_unspecified": 0,
		"local":                              1,
		"s3":                                 2,
		"gcs":                                3,
		"azurerm":                            4,
	}
)

func (x TerraformBackendType) Enum() *TerraformBackendType {
	p := new(TerraformBackendType)
	*p = x
	return p
}

func (x TerraformBackendType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TerraformBackendType) Descriptor() protoreflect.EnumDescriptor {
	return file_project_planton_credential_terraformbackendcredential_v1_spec_proto_enumTypes[0].Descriptor()
}

func (TerraformBackendType) Type() protoreflect.EnumType {
	return &file_project_planton_credential_terraformbackendcredential_v1_spec_proto_enumTypes[0]
}

func (x TerraformBackendType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TerraformBackendType.Descriptor instead.
func (TerraformBackendType) EnumDescriptor() ([]byte, []int) {
	return file_project_planton_credential_terraformbackendcredential_v1_spec_proto_rawDescGZIP(), []int{0}
}

// terraform-backend-credential spec
// These credentials are used for managing Terraform state storage, which can be configured for different cloud providers or local environments.
// For example, these credentials can be used to store state files in AWS S3, Google Cloud Storage, Azure Blob Storage, or locally on the file system.
// Properly configuring these backends is essential for managing and maintaining infrastructure state efficiently.
type TerraformBackendCredentialSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// terraform backend type
	Type TerraformBackendType `protobuf:"varint,1,opt,name=type,proto3,enum=project.planton.credential.terraformbackendcredential.v1.TerraformBackendType" json:"type,omitempty"`
	// s3 backend spec
	S3 *TerraformS3Backend `protobuf:"bytes,2,opt,name=s3,proto3" json:"s3,omitempty"`
	// gcs backend spec
	Gcs *TerraformGcsBackend `protobuf:"bytes,3,opt,name=gcs,proto3" json:"gcs,omitempty"`
	// azure-blob-storage backend spec
	Azurerm *TerraformAzurermBackend `protobuf:"bytes,4,opt,name=azurerm,proto3" json:"azurerm,omitempty"`
}

func (x *TerraformBackendCredentialSpec) Reset() {
	*x = TerraformBackendCredentialSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_credential_terraformbackendcredential_v1_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerraformBackendCredentialSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerraformBackendCredentialSpec) ProtoMessage() {}

func (x *TerraformBackendCredentialSpec) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_credential_terraformbackendcredential_v1_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerraformBackendCredentialSpec.ProtoReflect.Descriptor instead.
func (*TerraformBackendCredentialSpec) Descriptor() ([]byte, []int) {
	return file_project_planton_credential_terraformbackendcredential_v1_spec_proto_rawDescGZIP(), []int{0}
}

func (x *TerraformBackendCredentialSpec) GetType() TerraformBackendType {
	if x != nil {
		return x.Type
	}
	return TerraformBackendType_terraform_backend_type_unspecified
}

func (x *TerraformBackendCredentialSpec) GetS3() *TerraformS3Backend {
	if x != nil {
		return x.S3
	}
	return nil
}

func (x *TerraformBackendCredentialSpec) GetGcs() *TerraformGcsBackend {
	if x != nil {
		return x.Gcs
	}
	return nil
}

func (x *TerraformBackendCredentialSpec) GetAzurerm() *TerraformAzurermBackend {
	if x != nil {
		return x.Azurerm
	}
	return nil
}

// terraform-backend-credential spec for aws-s3 backend
// https://developer.hashicorp.com/terraform/language/backend/s3
type TerraformS3Backend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of s3-bucket
	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// aws-access-key-id
	AwsAccessKeyId string `protobuf:"bytes,2,opt,name=aws_access_key_id,json=awsAccessKeyId,proto3" json:"aws_access_key_id,omitempty"`
	// aws-secret-access-key
	AwsSecretAccessKey string `protobuf:"bytes,3,opt,name=aws_secret_access_key,json=awsSecretAccessKey,proto3" json:"aws_secret_access_key,omitempty"`
	// aws-region
	Region string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	// dynamodb-table for state locking
	// this is optional, but recommended for production environments
	DynamodbTable string `protobuf:"bytes,5,opt,name=dynamodb_table,json=dynamodbTable,proto3" json:"dynamodb_table,omitempty"`
}

func (x *TerraformS3Backend) Reset() {
	*x = TerraformS3Backend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_credential_terraformbackendcredential_v1_spec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerraformS3Backend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerraformS3Backend) ProtoMessage() {}

func (x *TerraformS3Backend) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_credential_terraformbackendcredential_v1_spec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerraformS3Backend.ProtoReflect.Descriptor instead.
func (*TerraformS3Backend) Descriptor() ([]byte, []int) {
	return file_project_planton_credential_terraformbackendcredential_v1_spec_proto_rawDescGZIP(), []int{1}
}

func (x *TerraformS3Backend) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *TerraformS3Backend) GetAwsAccessKeyId() string {
	if x != nil {
		return x.AwsAccessKeyId
	}
	return ""
}

func (x *TerraformS3Backend) GetAwsSecretAccessKey() string {
	if x != nil {
		return x.AwsSecretAccessKey
	}
	return ""
}

func (x *TerraformS3Backend) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *TerraformS3Backend) GetDynamodbTable() string {
	if x != nil {
		return x.DynamodbTable
	}
	return ""
}

// terraform-backend-credential spec for google-cloud-storage backend
// https://developer.hashicorp.com/terraform/language/backend/gcs
type TerraformGcsBackend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of gcs-bucket
	GcsBucket string `protobuf:"bytes,1,opt,name=gcs_bucket,json=gcsBucket,proto3" json:"gcs_bucket,omitempty"`
	// base64 encoded gcp service-account-key json
	ServiceAccountKeyBase64 string `protobuf:"bytes,2,opt,name=service_account_key_base64,json=serviceAccountKeyBase64,proto3" json:"service_account_key_base64,omitempty"`
}

func (x *TerraformGcsBackend) Reset() {
	*x = TerraformGcsBackend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_credential_terraformbackendcredential_v1_spec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerraformGcsBackend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerraformGcsBackend) ProtoMessage() {}

func (x *TerraformGcsBackend) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_credential_terraformbackendcredential_v1_spec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerraformGcsBackend.ProtoReflect.Descriptor instead.
func (*TerraformGcsBackend) Descriptor() ([]byte, []int) {
	return file_project_planton_credential_terraformbackendcredential_v1_spec_proto_rawDescGZIP(), []int{2}
}

func (x *TerraformGcsBackend) GetGcsBucket() string {
	if x != nil {
		return x.GcsBucket
	}
	return ""
}

func (x *TerraformGcsBackend) GetServiceAccountKeyBase64() string {
	if x != nil {
		return x.ServiceAccountKeyBase64
	}
	return ""
}

// terraform-backend-credential spec for azure-blob-storage backend
// https://developer.hashicorp.com/terraform/language/backend/azurerm
type TerraformAzurermBackend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// azure resource-group-name
	ResourceGroupName string `protobuf:"bytes,1,opt,name=resource_group_name,json=resourceGroupName,proto3" json:"resource_group_name,omitempty"`
	// azure storage-account-name
	StorageAccountName string `protobuf:"bytes,2,opt,name=storage_account_name,json=storageAccountName,proto3" json:"storage_account_name,omitempty"`
	// container name
	ContainerName string `protobuf:"bytes,3,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	// key
	Key string `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *TerraformAzurermBackend) Reset() {
	*x = TerraformAzurermBackend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_project_planton_credential_terraformbackendcredential_v1_spec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerraformAzurermBackend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerraformAzurermBackend) ProtoMessage() {}

func (x *TerraformAzurermBackend) ProtoReflect() protoreflect.Message {
	mi := &file_project_planton_credential_terraformbackendcredential_v1_spec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerraformAzurermBackend.ProtoReflect.Descriptor instead.
func (*TerraformAzurermBackend) Descriptor() ([]byte, []int) {
	return file_project_planton_credential_terraformbackendcredential_v1_spec_proto_rawDescGZIP(), []int{3}
}

func (x *TerraformAzurermBackend) GetResourceGroupName() string {
	if x != nil {
		return x.ResourceGroupName
	}
	return ""
}

func (x *TerraformAzurermBackend) GetStorageAccountName() string {
	if x != nil {
		return x.StorageAccountName
	}
	return ""
}

func (x *TerraformAzurermBackend) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *TerraformAzurermBackend) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

var File_project_planton_credential_terraformbackendcredential_v1_spec_proto protoreflect.FileDescriptor

var file_project_planton_credential_terraformbackendcredential_v1_spec_proto_rawDesc = []byte{
	0x0a, 0x43, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f,
	0x6e, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x72,
	0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x38, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x2e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x1a,
	0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x07, 0x0a, 0x1e, 0x54,
	0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x12, 0x6a, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f,
	0x72, 0x6d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d,
	0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5c, 0x0a, 0x02, 0x73, 0x33, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x2e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x33, 0x42, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x52, 0x02, 0x73, 0x33, 0x12, 0x5f, 0x0a, 0x03, 0x67, 0x63, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x2e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x47, 0x63, 0x73, 0x42, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x52, 0x03, 0x67, 0x63, 0x73, 0x12, 0x6b, 0x0a, 0x07, 0x61, 0x7a, 0x75, 0x72,
	0x65, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x7a,
	0x75, 0x72, 0x65, 0x72, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x07, 0x61, 0x7a,
	0x75, 0x72, 0x65, 0x72, 0x6d, 0x3a, 0xcd, 0x03, 0xba, 0x48, 0xc9, 0x03, 0x1a, 0x75, 0x0a, 0x0b,
	0x73, 0x33, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x1a, 0x66, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x3d, 0x20, 0x32, 0x20, 0x26, 0x26, 0x20, 0x21,
	0x68, 0x61, 0x73, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x33, 0x29,
	0x3f, 0x20, 0x27, 0x61, 0x77, 0x73, 0x20, 0x73, 0x33, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x6e,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x33, 0x27, 0x3a,
	0x20, 0x27, 0x27, 0x1a, 0xaa, 0x01, 0x0a, 0x1d, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x1a, 0x88, 0x01, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x20, 0x3d, 0x3d, 0x20, 0x33, 0x20, 0x26, 0x26, 0x20, 0x21, 0x68, 0x61, 0x73, 0x28, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x29, 0x3f, 0x20, 0x27, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x61, 0x6e, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x27, 0x3a, 0x20, 0x27, 0x27,
	0x1a, 0xa2, 0x01, 0x0a, 0x1b, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x1a, 0x82, 0x01, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x3d, 0x20,
	0x34, 0x20, 0x26, 0x26, 0x20, 0x21, 0x68, 0x61, 0x73, 0x28, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61,
	0x7a, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x29, 0x3f, 0x20, 0x27, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20,
	0x69, 0x73, 0x20, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x77, 0x68, 0x65,
	0x6e, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x61, 0x7a,
	0x75, 0x72, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x27, 0x3a, 0x20, 0x27, 0x27, 0x22, 0xe9, 0x01, 0x0a, 0x12, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66,
	0x6f, 0x72, 0x6d, 0x53, 0x33, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x06,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x31, 0x0a, 0x11,
	0x61, 0x77, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x0e, 0x61, 0x77, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x15, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x12, 0x61, 0x77, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x6f, 0x64, 0x62, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0x81, 0x01, 0x0a, 0x13, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x47,
	0x63, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x0a, 0x67, 0x63, 0x73,
	0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x67, 0x63, 0x73, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x43, 0x0a, 0x1a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x17, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x42,
	0x61, 0x73, 0x65, 0x36, 0x34, 0x22, 0xd4, 0x01, 0x0a, 0x17, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66,
	0x6f, 0x72, 0x6d, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x72, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x12, 0x36, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x14, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x12, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x2a, 0x67, 0x0a, 0x14,
	0x54, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x73, 0x33, 0x10, 0x02, 0x12,
	0x07, 0x0a, 0x03, 0x67, 0x63, 0x73, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x61, 0x7a, 0x75, 0x72,
	0x65, 0x72, 0x6d, 0x10, 0x04, 0x42, 0xd6, 0x03, 0x0a, 0x3c, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f,
	0x72, 0x6d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x85, 0x01, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x2f, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x74,
	0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x76, 0x31, 0xa2, 0x02, 0x04, 0x50, 0x50,
	0x43, 0x54, 0xaa, 0x02, 0x38, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e,
	0x54, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x38,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5c, 0x54, 0x65, 0x72, 0x72, 0x61,
	0x66, 0x6f, 0x72, 0x6d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x6f, 0x6e, 0x5c, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5c, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x3c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x3a, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x6f, 0x6e, 0x3a, 0x3a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x3a, 0x3a,
	0x54, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_project_planton_credential_terraformbackendcredential_v1_spec_proto_rawDescOnce sync.Once
	file_project_planton_credential_terraformbackendcredential_v1_spec_proto_rawDescData = file_project_planton_credential_terraformbackendcredential_v1_spec_proto_rawDesc
)

func file_project_planton_credential_terraformbackendcredential_v1_spec_proto_rawDescGZIP() []byte {
	file_project_planton_credential_terraformbackendcredential_v1_spec_proto_rawDescOnce.Do(func() {
		file_project_planton_credential_terraformbackendcredential_v1_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_project_planton_credential_terraformbackendcredential_v1_spec_proto_rawDescData)
	})
	return file_project_planton_credential_terraformbackendcredential_v1_spec_proto_rawDescData
}

var file_project_planton_credential_terraformbackendcredential_v1_spec_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_project_planton_credential_terraformbackendcredential_v1_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_project_planton_credential_terraformbackendcredential_v1_spec_proto_goTypes = []any{
	(TerraformBackendType)(0),              // 0: project.planton.credential.terraformbackendcredential.v1.TerraformBackendType
	(*TerraformBackendCredentialSpec)(nil), // 1: project.planton.credential.terraformbackendcredential.v1.TerraformBackendCredentialSpec
	(*TerraformS3Backend)(nil),             // 2: project.planton.credential.terraformbackendcredential.v1.TerraformS3Backend
	(*TerraformGcsBackend)(nil),            // 3: project.planton.credential.terraformbackendcredential.v1.TerraformGcsBackend
	(*TerraformAzurermBackend)(nil),        // 4: project.planton.credential.terraformbackendcredential.v1.TerraformAzurermBackend
}
var file_project_planton_credential_terraformbackendcredential_v1_spec_proto_depIdxs = []int32{
	0, // 0: project.planton.credential.terraformbackendcredential.v1.TerraformBackendCredentialSpec.type:type_name -> project.planton.credential.terraformbackendcredential.v1.TerraformBackendType
	2, // 1: project.planton.credential.terraformbackendcredential.v1.TerraformBackendCredentialSpec.s3:type_name -> project.planton.credential.terraformbackendcredential.v1.TerraformS3Backend
	3, // 2: project.planton.credential.terraformbackendcredential.v1.TerraformBackendCredentialSpec.gcs:type_name -> project.planton.credential.terraformbackendcredential.v1.TerraformGcsBackend
	4, // 3: project.planton.credential.terraformbackendcredential.v1.TerraformBackendCredentialSpec.azurerm:type_name -> project.planton.credential.terraformbackendcredential.v1.TerraformAzurermBackend
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_project_planton_credential_terraformbackendcredential_v1_spec_proto_init() }
func file_project_planton_credential_terraformbackendcredential_v1_spec_proto_init() {
	if File_project_planton_credential_terraformbackendcredential_v1_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_project_planton_credential_terraformbackendcredential_v1_spec_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*TerraformBackendCredentialSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_credential_terraformbackendcredential_v1_spec_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*TerraformS3Backend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_credential_terraformbackendcredential_v1_spec_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*TerraformGcsBackend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_project_planton_credential_terraformbackendcredential_v1_spec_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*TerraformAzurermBackend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_project_planton_credential_terraformbackendcredential_v1_spec_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_project_planton_credential_terraformbackendcredential_v1_spec_proto_goTypes,
		DependencyIndexes: file_project_planton_credential_terraformbackendcredential_v1_spec_proto_depIdxs,
		EnumInfos:         file_project_planton_credential_terraformbackendcredential_v1_spec_proto_enumTypes,
		MessageInfos:      file_project_planton_credential_terraformbackendcredential_v1_spec_proto_msgTypes,
	}.Build()
	File_project_planton_credential_terraformbackendcredential_v1_spec_proto = out.File
	file_project_planton_credential_terraformbackendcredential_v1_spec_proto_rawDesc = nil
	file_project_planton_credential_terraformbackendcredential_v1_spec_proto_goTypes = nil
	file_project_planton_credential_terraformbackendcredential_v1_spec_proto_depIdxs = nil
}
