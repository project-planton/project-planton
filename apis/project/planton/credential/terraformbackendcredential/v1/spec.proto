syntax = "proto3";

package project.planton.credential.terraformbackendcredential.v1;

import "buf/validate/validate.proto";
import "project/planton/shared/options/options.proto";

//terraform backend type
enum TerraformBackendType {
  // Unspecified or unknown backend type.
  terraform_backend_type_unspecified = 0;

  // Local filesystem backend (the default if none is configured).
  local = 1;

  // Amazon S3-based backend for remote state storage.
  aws_s3 = 2;

  // Google Cloud Storage backend for storing state.
  google_cloud_storage = 3;

  // Azure Resource Manager backend using Azure Blob Storage.
  azure_blob_storage = 4;
}

//terraform-backend-credential spec
// These credentials are used for managing Terraform state storage, which can be configured for different cloud providers or local environments.
// For example, these credentials can be used to store state files in AWS S3, Google Cloud Storage, Azure Blob Storage, or locally on the file system.
// Properly configuring these backends is essential for managing and maintaining infrastructure state efficiently.
message TerraformBackendCredentialSpec {
  //terraform backend type
  TerraformBackendType terraform_backend_type = 1 [
    (buf.validate.field).required = true
  ];

  option (buf.validate.message).cel = {
    id: "aws_s3.required",
    expression: "this.pulumi_backend_type == 2 && !has(this.aws_s3)"
        "? 'aws s3 backend details is mandatory when provider is aws_s3'"
        ": ''"
  };
  // aws-s3 backend spec
  TerraformAwsS3Backend aws_s3 = 2;

  option (buf.validate.message).cel = {
    id: "google_cloud_storage.required",
    expression: "this.pulumi_backend_type == 3 && !has(this.google_cloud_storage)"
        "? 'google_cloud_storage details is mandatory when provider is google_cloud_storage'"
        ": ''"
  };
  // google-cloud-storage backend spec
  TerraformGoogleCloudStorageBackend google_cloud_storage = 3;

  option (buf.validate.message).cel = {
    id: "azure_blob_storage.required",
    expression: "this.pulumi_backend_type == 4 && !has(this.azure_blob_storage)"
        "? 'azure_blob_storage details is mandatory when provider is azure_blob_storage'"
        ": ''"
  };
  // azure-blob-storage backend spec
  TerraformAzureBlobStorageBackend azure_blob_storage = 4;
}

//terraform-backend-credential spec for aws-s3 backend
//https://developer.hashicorp.com/terraform/language/backend/s3
message TerraformAwsS3Backend {
  //name of s3-bucket
  string s3_bucket = 1  [
    (buf.validate.field).required = true
  ];
  //aws-access-key-id
  string aws_access_key_id = 2 [
    (buf.validate.field).required = true
  ];
  //aws-secret-key-id
  string aws_secret_key_id = 3 [
    (buf.validate.field).required = true
  ];
  //dynamodb-table for state locking
  //this is optional, but recommended for production environments
  string dynamodb_table = 4;
}

//terraform-backend-credential spec for google-cloud-storage backend
//https://developer.hashicorp.com/terraform/language/backend/gcs
message TerraformGoogleCloudStorageBackend {
  //name of gcs-bucket
  string gcs_bucket = 1  [
    (buf.validate.field).required = true
  ];
  //base64 encoded gcp service-account-key json
  string service_account_key_base64 = 2  [
    (buf.validate.field).required = true
  ];
}

//terraform-backend-credential spec for azure-blob-storage backend
// https://developer.hashicorp.com/terraform/language/backend/azurerm
message TerraformAzureBlobStorageBackend {
  //azure resource-group-name
  string resource_group_name = 1  [
    (buf.validate.field).required = true
  ];
  //azure storage-account-name
  string storage_account_name = 2  [
    (buf.validate.field).required = true
  ];
  //container name
  string container_name = 3 [
    (buf.validate.field).required = true
  ];
  //key
  string key = 4 [
    (buf.validate.field).required = true
  ];
}
