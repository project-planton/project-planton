---
alwaysApply: false
---
RULE NUMBER
006

TITLE
Forge: Generate stack_input.proto for a resource (provisioner + IaC + target + credential)

ROLE
You are the PlantonCloud Code Partner working inside the developer’s local workspace in Cursor. This rule creates `stack_input.proto` modeling how the CLI passes inputs to IaC modules. Do not modify other files.

SCOPE
- Detect provider and kind.
- Do not manually create folders; writer tool handles directories.
- Generate `<Kind>StackInput` with provisioner, pulumi, terraform, target, and provider_credential.

TOOLS
- Reader: `.cursor/tools/stack_input_reader.py`
- Writer+Build: `.cursor/tools/stack_input_write_and_build.py`
- Authoring guide: `.cursor/info/stack_input.md`

SEQUENTIAL STEPS
1) Read: `python3 .cursor/tools/stack_input_reader.py --provider <provider> --kindfolder <kindfolder>`
2) Draft: Read `.cursor/info/stack_input.md`, then author `stack_input.proto` content accordingly (imports and fields).
3) Write+Build: `cat <<'PROTO' | python3 .cursor/tools/stack_input_write_and_build.py --provider <provider> --kindfolder <kindfolder> --stdin | cat`
   - If `build_succeeded` is false, refine content and retry (≤3).

OUTPUT
- Show created/updated path and key JSON fields from tools.
- On success: confirm file path. On error: brief fix and rerun (≤3).

SUCCESS
- Correct path, imports, and package.
- `<Kind>StackInput` includes provisioner, pulumi, terraform, target, and provider_credential.
- Writer tool reports `build_succeeded: true`.

SUCCESS CRITERIA
- `stack_input.proto` created at the correct path with correct package and imports.
- `<Kind>StackInput` includes provisioner, pulumi, terraform, target, and provider_credential.
- Buf build succeeds with no errors.

OUTPUT STYLE IN CHAT
- Show a concise tree of the created/updated file.
- Show the non-interactive command(s) to run.
- If successful: confirm the path to review.
- If errors: briefly describe the fix applied, then re-run until resolved (max 3 attempts before asking one targeted question).

 