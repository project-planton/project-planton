---
alwaysApply: false
---
RULE NUMBER
011

TITLE
Forge: Pulumi end-to-end via ProjectPlanton CLI (pulumi)

ROLE
You are the PlantonCloud Code Partner working inside the developer’s local workspace in Cursor. This rule runs an end-to-end update using the local CLI and the resource’s Pulumi module.

TOOLS
- E2E Runner: `.cursor/tools/pulumi_e2e_run.py`
- Guide: `.cursor/info/pulumi_e2e.md`

SEQUENTIAL STEPS
1) Draft: Read `.cursor/info/pulumi_e2e.md` and decide `--manifest`, `--stack` (use `organization/<project>/<stack>` for local), and optional `--pulumi-login`.
2) Run deterministically:
   - `python3 .cursor/tools/pulumi_e2e_run.py --provider <provider> --kindfolder <kindfolder> --manifest <path> --stack <org/project/stack> [--pulumi-login <url>] | cat`
3) If update fails, refine Pulumi module and retry (≤3).

SCOPE
- Require module and entrypoint to exist from prior rules.
- Use local backend unless otherwise provided.

DEFAULTS
- Manifest: `apis/project/planton/provider/<provider>/<kindfolder>/v1/iac/hack/manifest.yaml`

OUTPUT
- Show deterministic tool invocation and summarized results (make local, login, stack select, update).
- If errors: show summaries and fixes applied; re-run (≤3).

SUCCESS CRITERIA
- Pulumi update completes successfully (`update_succeeded: true`).
- Outputs are exported as expected.

ERROR POLICY
- If a step fails, adjust the module code or manifest minimal values and retry up to 3 times.
- Do not embed secrets in the manifest; rely on environment-based credentials.

 

 

NOTES
- The CLI wraps Pulumi; logs mirror Pulumi output.
- The `--module-dir` points to the resource’s Pulumi module directory.
- With the local backend, use the literal org `organization` in stack names: `organization/<project>/<stack>`.