---
alwaysApply: false
---
RULE NUMBER
011

TITLE
Forge: Pulumi end-to-end via ProjectPlanton CLI (pulumi)

ROLE
You are the PlantonCloud Code Partner working inside the developer’s local workspace in Cursor. This rule performs an end-to-end validation of a Pulumi module using the ProjectPlanton CLI (`project-planton pulumi ...`). It uses the module’s top-level `iac/hack/manifest.yaml` and runs preview/update/refresh/destroy, capturing logs.

PREREQUISITES
- Pulumi module package exists under `iac/pulumi/module/` (rule 009)
- Pulumi entrypoint exists under `iac/pulumi/main.go` (rule 010)
- Top-level hack manifest exists at `iac/hack/manifest.yaml` (rule 008)
- Required cloud credentials are configured in the environment or accessible to the CLI

PREP: INSTALL LOCAL CLI BUILD
Install the local CLI so it picks up latest proto and behavior changes.
```bash
make -C /Users/suresh/scm/github.com/project-planton/project-planton local | cat
```

PREP: INITIALIZE PULUMI BACKEND AND STACK (NON-INTERACTIVE)
Pulumi requires an initialized backend and an existing stack. Initialize a local backend and create/select the stack in the module directory.
```bash
export PULUMI_CONFIG_PASSPHRASE="test"
cd /Users/suresh/scm/github.com/project-planton/project-planton/apis/project/planton/provider/<provider>/<kindfolder>/v1/iac/pulumi
pulumi login --local | cat
pulumi stack select --create <org>/<project>/<stack> | cat
```

DISCOVERY (MANDATORY BEFORE RUN)
- Verify these paths exist for the target resource:
  - `apis/project/planton/provider/<provider>/<kindfolder>/v1/iac/pulumi/`
  - `apis/project/planton/provider/<provider>/<kindfolder>/v1/iac/hack/manifest.yaml`

SCOPE
- Execute non-interactive end-to-end run using ProjectPlanton CLI (pulumi):
  - Preview
  - Update (apply)
  - Refresh
  - Destroy

COMMANDS (NON-INTERACTIVE)
Run these from repo root; they print logs directly.
```bash
# Preview changes
project-planton pulumi preview \
  --manifest apis/project/planton/provider/<provider>/<kindfolder>/v1/iac/hack/manifest.yaml \
  --stack <org>/<project>/<stack> \
  --module-dir apis/project/planton/provider/<provider>/<kindfolder>/v1/iac/pulumi | cat

# Apply changes
project-planton pulumi update \
  --manifest apis/project/planton/provider/<provider>/<kindfolder>/v1/iac/hack/manifest.yaml \
  --stack <org>/<project>/<stack> \
  --module-dir apis/project/planton/provider/<provider>/<kindfolder>/v1/iac/pulumi \
  --yes | cat

# Refresh state
project-planton pulumi refresh \
  --manifest apis/project/planton/provider/<provider>/<kindfolder>/v1/iac/hack/manifest.yaml \
  --stack <org>/<project>/<stack> \
  --module-dir apis/project/planton/provider/<provider>/<kindfolder>/v1/iac/pulumi | cat

# Destroy resources
project-planton pulumi destroy \
  --manifest apis/project/planton/provider/<provider>/<kindfolder>/v1/iac/hack/manifest.yaml \
  --stack <org>/<project>/<stack> \
  --module-dir apis/project/planton/provider/<provider>/<kindfolder>/v1/iac/pulumi | cat
```

ERROR POLICY
- If a step fails, adjust the `iac/hack/manifest.yaml` minimal values and retry up to 3 times
- Do not embed secrets in the manifest; rely on environment-based credentials

SUCCESS CRITERIA
- Local CLI installed via `make local` completes successfully
- Local Pulumi backend initialized and stack created/selected
- Preview shows expected changes
- Update completes without errors
- Refresh completes without errors
- Destroy completes without errors (clean teardown)

OUTPUT STYLE IN CHAT
- Print each command before running and stream its logs
- Summarize which steps succeeded and note any adjustments made

NOTES
- The CLI wraps Pulumi; logs mirror Pulumi output
- The `--module-dir` points to the resource’s Pulumi module directory