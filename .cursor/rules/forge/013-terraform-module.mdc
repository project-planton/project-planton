---
alwaysApply: false
---
RULE NUMBER
013

TITLE
Forge: Generate Terraform module (tf/) from proto definitions

ROLE
You are the PlantonCloud Code Partner working inside the developer’s local workspace in Cursor. This rule scaffolds the Terraform module for a resource under `iac/tf/`. It MUST first read the resource proto files to derive resources and outputs. For `variables.tf`, use the official generator built into the CLI to ensure compatibility.

DISCOVERY (MANDATORY BEFORE EDITS)
- Open and read:
  - `apis/project/planton/provider/<provider>/<kindfolder>/v1/api.proto`
  - `apis/project/planton/provider/<provider>/<kindfolder>/v1/spec.proto`
  - `apis/project/planton/provider/<provider>/<kindfolder>/v1/stack_input.proto`
  - `apis/project/planton/provider/<provider>/<kindfolder>/v1/stack_outputs.proto`
- Extract:
  - `<Kind>` and `<Kind>Spec` fields to design core resources
  - `<Kind>StackOutputs` fields to create outputs
  - Provider type and minimal configuration

SCOPE
- Target directory: `apis/project/planton/provider/<provider>/<kindfolder>/v1/iac/tf/`
- Create or update:
  - `variables.tf` — GENERATED via CLI (see below). Do not hand-edit. If module logic needs convenience shapes (e.g., `table_name`, `hash_key`), derive those in `locals.tf` from the generated variables instead of changing `variables.tf`.
  - `main.tf` — core resources tied to spec 80/20 fields, with explicit ordering/depends_on as needed
  - `outputs.tf` — outputs mapping to `<Kind>StackOutputs`
  - `locals.tf` — safe_* locals and computed booleans for conditional flows
  - `provider.tf` — required_providers and minimal provider configuration

GENERATING variables.tf (MANDATORY)
- Install local CLI so it reflects current protos:
```bash
make local | cat
```
- Run the generator with the correct kind name (PascalCase), outputting into the tf module directory:
```bash
project-planton tofu generate-variables <Kind> --output-file apis/project/planton/provider/<provider>/<kindfolder>/v1/iac/tf/variables.tf | cat
```
- Do NOT handcraft `variables.tf`. The generator uses `variablestf.ProtoToVariablesTF` and repo API docs to produce the exact schema expected by ProjectPlanton. Derive any convenience values in `locals.tf` and reference them from `main.tf`.

CONTENT GUIDELINES (NON-generated files)
- provider.tf:
  - `terraform { required_providers { <prov> = { source = "<source>", version = ">= <min>" } } }`
  - Minimal provider configuration (region/project/etc.) without embedding secrets

- locals.tf:
  - Add `safe_*` locals to avoid null dereferences and booleans for gating resources (e.g., DNS enabled)

- main.tf:
  - Implement the minimal core resources to realize `<Kind>` using the official provider resources
  - Use `depends_on` when order is required (e.g., parameter group before instance)
  - Name resources predictably using `var.metadata.name`

- outputs.tf:
  - Map outputs to `<Kind>StackOutputs` fields, sourcing from provisioned resources

BUILD & VERIFY (NON-INTERACTIVE)
- Initialize and validate the module:
```bash
terraform -chdir=apis/project/planton/provider/<provider>/<kindfolder>/v1/iac/tf init -backend=false | cat
terraform -chdir=apis/project/planton/provider/<provider>/<kindfolder>/v1/iac/tf validate | cat
```
- On errors, refine non-generated files and re-run (up to 3 attempts).

SUCCESS CRITERIA
- `variables.tf` generated by the CLI exists and matches the schema expected by ProjectPlanton
- `main.tf`, `locals.tf`, `outputs.tf`, `provider.tf` exist and validate

OUTPUT STYLE IN CHAT
- Show created/updated tf files and the exact CLI generation command used
- Show the terraform init/validate commands

NOTES
- Using the generator ensures stable alignment with proto comments and shapes; do not drift from it.