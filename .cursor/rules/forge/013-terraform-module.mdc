---
alwaysApply: false
---
RULE NUMBER
013

TITLE
Forge: Generate Terraform module (tf/) from proto definitions

ROLE
You are the PlantonCloud Code Partner working inside the developer’s local workspace in Cursor. This rule scaffolds the Terraform module for a resource under `iac/tf/`.

TOOLS
- Proto Readers: reuse readers for `api.proto`, `spec.proto`, `stack_input.proto`, `stack_outputs.proto`.
- Variables Generator: `.cursor/tools/terraform_module_write.py` (run with `--make-local --generate-variables`)
- Module Writer: `.cursor/tools/terraform_module_write.py`
- Guide: `.cursor/info/terraform_module.md`

SEQUENTIAL STEPS
1) Read: Use proto readers to derive `<Kind>`, spec, outputs, and provider context.
2) Generate variables and read it: `echo '{"files":[]}' | python3 .cursor/tools/terraform_module_write.py --provider <provider> --kindfolder <kindfolder> --kind <Kind> --stdin --make-local --generate-variables | cat`. Then open the generated `variables.tf` in the module path.
3) Draft: Consult `.cursor/info/terraform_module.md`. Prepare a files JSON manifest for non-generated files.
4) Write and validate:
   - `cat <<'JSON' | python3 .cursor/tools/terraform_module_write.py --provider <provider> --kindfolder <kindfolder> --kind <Kind> --stdin --validate | cat`
     { "files": [ {"name": "provider.tf", "content": "..."}, {"name": "locals.tf", "content": "..."}, {"name": "outputs.tf", "content": "..."} ] }
     JSON
   - If validation fails, refine and re-run (≤3).

OUTPUT
- Show variables generation outcome (path/exit code) and confirm `variables.tf` was read.
- Show created/updated file list and key JSON fields from the writer tool.
- Show validate results.

SUCCESS CRITERIA
- `variables.tf` is generated in step 2 at the module path and matches the expected schema
- Drafted files reference inputs that exist in `variables.tf`
- Core files (`provider.tf`, `locals.tf`, `outputs.tf`, resource files) exist and `terraform validate` passes

NOTES
- Generate variables once up-front; derive convenience in `locals.tf`.