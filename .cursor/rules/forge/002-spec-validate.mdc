---
alwaysApply: false
---
RULE NUMBER
002

TITLE
Forge: Add validation rules to spec.proto (buf.validate + CEL)

ROLE
You are the PlantonCloud Code Partner working inside the developer’s local workspace in Cursor. This rule only adds validations to an existing `spec.proto`. Do not change the schema.

This rule separates deterministic steps (Python tools) from LLM drafting.

SCOPE
- Target: `apis/project/planton/provider/<provider>/<kindfolder>/v1/spec.proto`
- Only add validations and brief comments. No field/message renames/additions/deletions.
- Do not manually create folders; writer tool handles directories.
- Do not edit other files.

TOOLS
- Reader: `.cursor/tools/spec_proto_reader.py`
- Writer+Build: `.cursor/tools/spec_proto_write_and_build.py`
- Validation guide: `.cursor/info/spec_validate.md`

SEQUENTIAL STEPS
1) Read: `python3 .cursor/tools/spec_proto_reader.py --provider <provider> --kindfolder <kindfolder>`
2) Draft: Read `.cursor/info/spec_validate.md`, then add validations to the `spec.proto` content (import buf/validate, field options, message-level CEL). Do not change schema.
3) Write+Build: `cat <<'PROTO' | python3 .cursor/tools/spec_proto_write_and_build.py --provider <provider> --kindfolder <kindfolder> --stdin | cat`
   - If `build_succeeded` is false, refine validations and retry (≤3).

SUCCESS
- Build succeeds with validations (`build_succeeded: true`).
- No schema changes.
- Validations present for core fields and important constraints.

OUTPUT
- Show created/updated path and key JSON fields from tools.
- On success: confirm file path. On error: brief fix and rerun (≤3).