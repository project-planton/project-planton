---
alwaysApply: false
---
RULE NUMBER
002

TITLE
Forge: Add validation rules to spec.proto (buf.validate + CEL)

ROLE
You are the PlantonCloud Code Partner working inside the developerâ€™s local workspace in Cursor. This rule augments an existing `spec.proto` by adding validation rules using `buf/validate/validate.proto` and CEL expressions. Do NOT change the configuration schema (no field renames, additions, or deletions); only add validations and comments where helpful.

SCOPE
- Target: `apis/project/planton/provider/<provider>/<kindfolder>/v1/spec.proto`
- Keep all existing messages/fields as-is; add:
  - `import "buf/validate/validate.proto";`
  - Field-level validation options
  - Message-level CEL validations for conditional/complex rules
- Do not edit other files in this step.

VALIDATION GUIDELINES (80/20)
- Strings:
  - Names/IDs: `(buf.validate.field).string.min_len = 1`
  - ARNs/URIs: add `min_len` and, if stable, a simple `pattern` (not overly strict)
  - Domain names/emails: prefer minimal `pattern` or `min_len`; avoid brittle regexes
- Enums:
  - Enforce defined values: `(buf.validate.field).enum.defined_only = true`
  - If the enum has an `*_UNSPECIFIED = 0` value and the field must be set, add CEL to forbid 0
- Numbers:
  - Use `gt/gte/lt/lte` as appropriate
- Booleans:
  - Typically no direct validation; enforce through CEL when tied to other fields
- Repeated fields:
  - `(buf.validate.field).repeated.min_items = 1` when at least one item is required
  - Consider `(buf.validate.field).repeated.unique = true` for sets like aliases
- Bytes/Maps: apply min/max sizes if applicable

CEL EXAMPLES (use `(buf.validate.message).cel` entries)
- Require one field when another is set:
  - If `aliases` is non-empty, `certificate_arn` must be non-empty.
  - Expression: `this.aliases.size() == 0 || this.certificate_arn != ""`
- Mutually exclusive fields:
  - Only one of `x` or `y` may be set: `(this.x == "") || (this.y == "")`
- Enum-dependent rule (e.g., DynamoDB billing mode):
  - If `billing_mode == PROVISIONED`, then `read_capacity_units` and `write_capacity_units` must be > 0; else they must be 0 or unset.
  - Expression pattern:
    - `this.billing_mode == 1 ? (this.read_capacity_units > 0 && this.write_capacity_units > 0) : (this.read_capacity_units == 0 && this.write_capacity_units == 0)`
- Ordering constraints:
  - `min_ttl <= default_ttl <= max_ttl` when set
  - Expression: `(this.min_ttl == 0 || this.default_ttl >= this.min_ttl) && (this.max_ttl == 0 || this.default_ttl <= this.max_ttl)`

IMPLEMENTATION STEPS
1) Open `spec.proto` and add the import line near the top:
   - `import "buf/validate/validate.proto";`
2) Add field-level options directly to fields using `(buf.validate.field)` according to the guidelines above.
3) Add one or more message-level options for complex rules:
   - `option (buf.validate.message).cel = { id: "<short_id>", message: "<friendly message>", expression: "<cel expr>" };`
4) Keep comments succinct. Do not change field numbers, names, or message layout.

SUCCESS CRITERIA
- `spec.proto` compiles and codegen succeeds.
- Validations present for core fields and important constraints.
- CEL expressions cover non-linear/conditional rules where relevant.
- No schema changes compared to pre-validation version.

BUILD & VERIFY (NON-INTERACTIVE)
- Regenerate/build protos:
  - `make -C /Users/suresh/scm/github.com/project-planton/project-planton/apis build | cat`
- On errors, refine validations (import path, option paths, enum numeric checks, CEL expressions) and retry up to 3 times.
- On success, confirm completion and point to the updated `spec.proto` file.

OUTPUT STYLE IN CHAT
- Show a concise diff summary of changed lines (import line, field options, CEL blocks) in prose.
- Show the non-interactive command(s) to run.
- If successful: confirm the file path to review.
- If errors: briefly describe the fix applied, then re-run until resolved (max 3 attempts before asking one targeted question).

REFERENCE SNIPPETS (adapt to the actual schema; do not paste verbatim)
```proto
syntax = "proto3";
package project.planton.provider.aws.awscloudfront.v1;

import "buf/validate/validate.proto";

message AwsCloudFrontSpec {
  repeated string aliases = 1 [(buf.validate.field).repeated = {min_items: 1, unique: true}];

  string certificate_arn = 2 [(buf.validate.field).string.min_len = 1];

  enum PriceClass {
    PRICE_CLASS_UNSPECIFIED = 0;
    PRICE_CLASS_100 = 1;
    PRICE_CLASS_200 = 2;
    PRICE_CLASS_ALL = 3;
  }
  PriceClass price_class = 3 [
    (buf.validate.field).enum.defined_only = true
  ];

  message Origin {
    string id = 1 [(buf.validate.field).string.min_len = 1];
    string domain_name = 2 [(buf.validate.field).string.min_len = 1];
  }
  repeated Origin origins = 4 [(buf.validate.field).repeated.min_items = 1];

  string default_origin_id = 5 [(buf.validate.field).string.min_len = 1];

  option (buf.validate.message).cel = {
    id: "aliases_require_cert",
    message: "certificate_arn must be set when aliases are provided",
    expression: "this.aliases.size() == 0 || this.certificate_arn != \"\""
  };
}
```

NOTES
- Keep validations pragmatic. Prefer clarity and low false-positives.
- Ensure compatibility with protovalidate-go (use `buf/validate/validate.proto`).