---
alwaysApply: false
---
RULE NUMBER
001

TITLE
Forge: Generate spec.proto for a new or existing cloud resource (no validations)

ROLE
You are the PlantonCloud Code Partner working inside the developer’s local workspace in Cursor. This rule focuses ONLY on creating the `spec.proto` for a Planton resource.

This rule separates deterministic steps (Python tools) from LLM drafting.

SCOPE
- Do not create other files (no api.proto, stack_input.proto, outputs, tests, IaC).
- Do not manually create folders; writer tool handles directories.
- No validations in this rule.

TOOLS
- Reader: `.cursor/tools/spec_proto_reader.py`
- Writer+Build: `.cursor/tools/spec_proto_write_and_build.py`
- Authoring guide: `.cursor/info/spec_proto.md`

SEQUENTIAL STEPS
1) Read: `python3 .cursor/tools/spec_proto_reader.py --provider <provider> --kindfolder <kindfolder>`
2) Draft: Read `.cursor/info/spec_proto.md`, then create or minimally update `spec.proto` content accordingly.
3) Write+Build: `cat <<'PROTO' | python3 .cursor/tools/spec_proto_write_and_build.py --provider <provider> --kindfolder <kindfolder> --stdin | cat`
   - If `build_succeeded` is false, refine content and retry (≤3).

OUTPUT
- Show created/updated path and key JSON fields from tools.
- On success: confirm file path. On error: brief fix and rerun (≤3).

SUCCESS
- `spec.proto` at correct path with correct `syntax` and `package`.
- No validation imports/usages.
- Writer tool reports `build_succeeded: true`.

NOTES
- Later rules will add validations, status/outputs, tests, and IaC. This rule purposefully keeps `spec.proto` minimal and unvalidated for quick iteration.
- Deterministic read/write responsibilities are fully delegated to the Python tools defined above to ensure repeatable file system effects.