---
alwaysApply: false
---
RULE NUMBER
012

TITLE
Forge: Pulumi docs (README) using ProjectPlanton CLI (pulumi)

ROLE
You are the PlantonCloud Code Partner working inside the developerâ€™s local workspace in Cursor. This rule writes the Pulumi module README and examples to document how to run the module via the ProjectPlanton CLI. It also generates a `debug.sh` helper and documents how to enable it in `Pulumi.yaml` for local debugging.

DISCOVERY (MANDATORY BEFORE EDITS)
- Read:
  - `apis/project/planton/provider/<provider>/<kindfolder>/v1/api.proto`
  - `apis/project/planton/provider/<provider>/<kindfolder>/v1/spec.proto`
  - `apis/project/planton/provider/<provider>/<kindfolder>/v1/stack_input.proto`
  - `apis/project/planton/provider/<provider>/<kindfolder>/v1/stack_outputs.proto`
  - If present, root-level `apis/project/planton/provider/<provider>/<kindfolder>/v1/examples.md` to mirror examples

SCOPE
- Targets under `apis/project/planton/provider/<provider>/<kindfolder>/v1/iac/pulumi/`:
  - Create/update `README.md` with CLI examples and a debugging section
  - Create/update `examples.md` by copying root `examples.md` if present, else regenerate minimal examples from `<Kind>Spec`
  - Create/update `debug.sh` (executable) to run the Pulumi program under Delve

README CONTENT (iac/pulumi/README.md)
- Title: `Pulumi Module to Deploy <Kind>`
- Show CLI commands using ProjectPlanton pulumi:
```shell
# Preview
project-planton pulumi preview \
  --manifest ../hack/manifest.yaml \
  --stack <org>/<project>/<stack> \
  --module-dir .

# Update (apply)
project-planton pulumi update \
  --manifest ../hack/manifest.yaml \
  --stack <org>/<project>/<stack> \
  --module-dir . \
  --yes

# Refresh
project-planton pulumi refresh \
  --manifest ../hack/manifest.yaml \
  --stack <org>/<project>/<stack> \
  --module-dir .

# Destroy
project-planton pulumi destroy \
  --manifest ../hack/manifest.yaml \
  --stack <org>/<project>/<stack> \
  --module-dir .
```
- Debugging section:
  - Explain `debug.sh` and how to enable it by uncommenting the `runtime.options.binary: ./debug.sh` in `Pulumi.yaml`
  - Link to docs/pages/docs/guide/debug-pulumi-modules.mdx as reference if needed

EXAMPLES CONTENT (iac/pulumi/examples.md)
- If root `examples.md` exists: copy its content verbatim
- Otherwise, generate a minimal example manifest for `<Kind>` and optional additional examples if obvious from `<Kind>Spec`

DEBUG.SH CONTENT (iac/pulumi/debug.sh)
```bash
#!/usr/bin/env bash
set -euo pipefail

go build -o goapp -gcflags "all=-N -l" .
exec dlv --listen=:2345 --headless=true --api-version=2 exec ./goapp
```
- Ensure the file is executable and referenced in README

SUCCESS CRITERIA
- `iac/pulumi/README.md`, `iac/pulumi/examples.md`, and `iac/pulumi/debug.sh` exist and mirror usage/examples

OUTPUT STYLE IN CHAT
- Show created file paths and the CLI commands section
- No secrets in examples

NOTES
- Ensure the path to the manifest points to the top-level `iac/hack/manifest.yaml` generated by rule 008 (typically `../hack/manifest.yaml` from the pulumi folder)