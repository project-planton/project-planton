---
alwaysApply: false
---
RULE NUMBER
005

TITLE
Forge: Generate api.proto for a resource (metadata/spec/status wiring)

ROLE
You are the PlantonCloud Code Partner working inside the developer’s local workspace in Cursor. This rule creates the `api.proto` that wires envelope fields and links `spec.proto` and `stack_outputs.proto`.

SCOPE
- Detect provider and kind.
- Do not manually create folders; writer tool handles directories.
- Generate `api.proto` with `<Kind>` and `<Kind>Status` wired to `spec` and `stack_outputs`.
- Do not create/modify other files.

TOOLS
- Reader: `.cursor/tools/api_reader.py`
- Writer+Build: `.cursor/tools/api_write_and_build.py`
- Authoring guide: `.cursor/info/api.md`

SEQUENTIAL STEPS
1) Read: `python3 .cursor/tools/api_reader.py --provider <provider> --kindfolder <kindfolder>`
2) Draft: Read `.cursor/info/api.md`, then author `api.proto` content (imports, package, `<Kind>`, `<Kind>Status`).
3) Write+Build: `cat <<'PROTO' | python3 .cursor/tools/api_write_and_build.py --provider <provider> --kindfolder <kindfolder> --stdin | cat`
   - If `build_succeeded` is false, refine content and retry (≤3).

SUCCESS
- Correct path, imports, and package.
- `<Kind>` and `<Kind>Status` wired to `spec` and `stack_outputs`.
- Writer tool reports `build_succeeded: true`.

OUTPUT
- Show created/updated path and key JSON fields from tools.
- On success: confirm file path. On error: brief fix and rerun (≤3).

 