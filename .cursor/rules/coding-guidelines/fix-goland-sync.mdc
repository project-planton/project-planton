---
description: Diagnostic and troubleshooting guide for GoLand Bazel plugin sync failures
alwaysApply: false
---

# Rule: Fix GoLand Bazel Sync Issues

Purpose: When GoLand's Bazel plugin fails to sync the project, this rule provides systematic diagnostics and fixes for common issues related to Bazel, bzlmod, and Gazelle integration.

Usage: Invoke explicitly when GoLand Bazel sync fails or returns repository resolution errors.

## Background: Project Build System

This is a **Bazel monorepo** using:
- **Bazel (bzlmod)**: Modern Bazel module system (MODULE.bazel, not legacy WORKSPACE)
- **Gazelle**: Automatically generates BUILD.bazel files from Go code
- **rules_go**: Go toolchain and build rules for Bazel
- **GoLand Bazel Plugin**: Uses Build Server Protocol (BSP) with special repository injection

### Key Files
- `MODULE.bazel`: Declares Bazel dependencies and repository mappings (bzlmod format)
- `go.mod`/`go.sum`: Standard Go module files
- `BUILD.bazel`: Auto-generated by Gazelle (DO NOT edit manually)
- `.bazelproject`: GoLand Bazel plugin configuration

### How Dependencies Work
1. Go dependencies declared in `go.mod`
2. Gazelle scans Go code and creates BUILD.bazel files with `@<repo_name>//...` references
3. `bazel mod tidy` syncs `MODULE.bazel`'s `use_repo()` list with actual dependencies
4. GoLand BSP sync uses `--inject_repository` flag which is sensitive to repository naming

## Common Failure Patterns

### Pattern 1: Repository Not Found Errors
```
ERROR: no such package '@@[unknown repo 'com_github_<package>' requested from @@]//':
The repository '@@[unknown repo 'com_github_<package>' requested from @@]' could not be resolved
```

**Cause**: Dependency exists in BUILD.bazel but not in MODULE.bazel's `use_repo()` list.

### Pattern 2: Old WORKSPACE-Style Repository Names
```
ERROR: Unable to find package for @@[unknown repo 'io_bazel_rules_go' requested from @@]//go:def.bzl
```

**Cause**: BUILD.bazel uses old `@io_bazel_rules_go` instead of bzlmod `@rules_go`.

### Pattern 3: Dependency Removed by `bazel mod tidy`
```
INFO: Updated use_repo calls for @gazelle//:extensions.bzl%go_deps
# Then subsequent build fails with "no such package"
```

**Cause**: Dependency marked as `// indirect` in go.mod gets auto-removed from MODULE.bazel.

## Diagnostic Checklist

Run through these diagnostics when sync fails:

### 1. Check GoLand Sync Log
```bash
# Look at the error in the sync log
cat .cursor/workspace/goland-bazel-sync.log | grep -A 5 "ERROR:"
```

**Look for**:
- Repository name in error (e.g., `com_github_fatih_color`)
- Old-style names (e.g., `io_bazel_rules_go`)
- BUILD.bazel file referenced in error

### 2. Verify Terminal Build Works
```bash
# Test if terminal build succeeds (should work if only BSP sync fails)
bazel build //:project-planton
```

**If terminal works but GoLand doesn't**: Likely a repository naming or visibility issue with BSP.

### 3. Check for Old Repository Names
```bash
# Find any old-style @io_bazel_rules_go references
grep -r "@io_bazel_rules_go" --include="BUILD.bazel" .

# Should use bzlmod-style names instead:
# @rules_go (not @io_bazel_rules_go)
# @gazelle (not @bazel_gazelle)
```

### 4. Check MODULE.bazel for Missing Dependencies
```bash
# Get repository name from error (e.g., com_github_fatih_color)
# Check if it's in MODULE.bazel
grep "com_github_fatih_color" MODULE.bazel
```

### 5. Check go.mod Direct vs Indirect Dependencies
```bash
# Find the package in go.mod
grep "github.com/fatih/color" go.mod

# If it shows "// indirect" but your code imports it directly,
# it needs to be a direct dependency
```

## Fix Procedures

### Fix 1: Update Old Repository Names

**When**: Error mentions `io_bazel_rules_go`, `bazel_gazelle`, or other old WORKSPACE names.

**Steps**:
1. Find files using old names:
   ```bash
   grep -r "@io_bazel_rules_go" --include="BUILD.bazel" .
   ```

2. Replace with bzlmod names:
   - `@io_bazel_rules_go` ‚Üí `@rules_go`
   - `@bazel_gazelle` ‚Üí `@gazelle`
   - `@io_bazel_rules_docker` ‚Üí `@rules_docker`

3. Verify the fix:
   ```bash
   bazel build //pkg/...
   ```

### Fix 2: Add Missing Dependency to MODULE.bazel

**When**: Error shows `no such package` for a Go dependency.

**Steps**:

#### Option A: Manual Fix (Quick)
1. Identify the missing repository name from error (e.g., `com_github_fatih_color`)

2. Add to MODULE.bazel's `use_repo()` list (alphabetically sorted):
   ```starlark
   use_repo(
       go_deps,
       # ... existing entries ...
       "com_github_fatih_color",  # Add here
       # ... more entries ...
   )
   ```

3. Run bazel mod tidy:
   ```bash
   ./bazelw mod tidy
   ```

4. **Warning**: If the dependency is marked `// indirect` in go.mod, `bazel mod tidy` will remove it! See Fix 3.

#### Option B: Automated (Recommended)
1. Run Gazelle and bazel mod tidy:
   ```bash
   ./bazelw run //:gazelle
   ./bazelw mod tidy
   ```

2. Check if dependency was added:
   ```bash
   grep "com_github_<package>" MODULE.bazel
   ```

3. If missing, proceed to Fix 3.

### Fix 3: Convert Indirect to Direct Dependency

**When**: Dependency keeps getting removed by `bazel mod tidy` despite being imported in code.

**Root Cause**: The dependency is marked as `// indirect` in go.mod, but your BUILD.bazel files reference it directly (this happens when you import a transitive dependency directly).

**Steps**:

1. Verify you're importing the package in Go code:
   ```bash
   # Example: check if you import github.com/fatih/color
   grep -r "github.com/fatih/color" --include="*.go" internal/ cmd/ pkg/
   ```

2. Move dependency from indirect to direct in go.mod:
   ```bash
   # Find the dependency line
   grep "github.com/fatih/color" go.mod
   
   # It shows: github.com/fatih/color v1.18.0 // indirect
   ```

3. Edit go.mod - move the line from the `require (... // indirect)` section to the main `require ()` section at the top:
   ```go
   require (
       // ... existing direct dependencies ...
       github.com/fatih/color v1.18.0  // Add here (remove // indirect)
       // ... more dependencies ...
   )
   ```

4. Remove the duplicate from indirect section (if present)

5. Tidy up:
   ```bash
   go mod tidy
   ./bazelw mod tidy
   ```

6. Verify it persists:
   ```bash
   grep "com_github_fatih_color" MODULE.bazel
   # Should return 1 match
   
   ./bazelw mod tidy
   grep "com_github_fatih_color" MODULE.bazel
   # Should still return 1 match (not removed)
   ```

### Fix 4: Clear Bazel Cache and Retry

**When**: Changes aren't taking effect or getting stale cache errors.

**Steps**:
```bash
# Clean Bazel cache
bazel clean --expunge

# Re-run gazelle and mod tidy
./bazelw run //:gazelle
./bazelw mod tidy

# Try build again
bazel build //:project-planton
```

### Fix 5: GoLand-Specific Fixes

**When**: Terminal builds work but GoLand sync still fails.

**Steps**:

1. Invalidate GoLand caches:
   - `File ‚Üí Invalidate Caches ‚Üí Invalidate and Restart`

2. Check `.bazelproject` configuration:
   ```bash
   cat .bazelproject
   ```
   
   Should include:
   ```
   directories:
     .
     -bazel-bin
     -bazel-out
     -bazel-testlogs
   
   targets:
     //:project-planton
     //apis/...
     //cmd/...
     //internal/...
     //pkg/...
   ```

3. Re-sync Bazel project in GoLand:
   - `View ‚Üí Tool Windows ‚Üí Bazel`
   - Click sync button (üîÑ) or `Bazel ‚Üí Sync ‚Üí Sync Project with BUILD Files`

4. Check Bazel plugin settings:
   - `Settings ‚Üí Bazel Settings`
   - Ensure "Use Bazel from workspace" is enabled
   - Bazel binary should point to `./bazelw` or `/usr/local/bin/bazelisk`

## Complete Fix Workflow

When GoLand sync fails, run this complete workflow:

```bash
# 1. Check the sync log for errors
tail -50 .cursor/workspace/goland-bazel-sync.log

# 2. Identify the failing repository (e.g., com_github_fatih_color)

# 3. Check if it's an old repository name issue
grep -r "@io_bazel_rules_go" --include="BUILD.bazel" .
# If found: Fix repository names to use bzlmod style

# 4. Check go.mod for the dependency
grep "<package-name>" go.mod
# Note if it's marked as "// indirect"

# 5. If using the dependency directly, make it a direct dependency
# Edit go.mod to move it to the main require() section

# 6. Tidy everything
go mod tidy
./bazelw run //:gazelle
./bazelw mod tidy

# 7. Verify MODULE.bazel has the dependency
grep "com_github_<package>" MODULE.bazel

# 8. Test terminal build
bazel build //:project-planton

# 9. If terminal build works, invalidate GoLand cache and re-sync
# In GoLand: File ‚Üí Invalidate Caches ‚Üí Invalidate and Restart
# Then: View ‚Üí Tool Windows ‚Üí Bazel ‚Üí Sync
```

## Prevention

To avoid these issues in the future:

### When Adding New Go Dependencies

```bash
# 1. Add to go.mod as a DIRECT dependency (even if unused at first)
go get github.com/new/package@v1.0.0

# 2. Import in your Go code
# (Add import statement to .go file)

# 3. Run the build pipeline
make build

# This runs:
# - go fmt/vet/tidy
# - buf generate (for protos)
# - bazel run //:gazelle (updates BUILD.bazel files)
# - bazel mod tidy (updates MODULE.bazel)
# - bazel build

# 4. Verify MODULE.bazel was updated
grep "com_github_new_package" MODULE.bazel
```

### Best Practices

1. **Always use bzlmod-style repository names** in BUILD.bazel files:
   - ‚úÖ `@rules_go//go:def.bzl`
   - ‚ùå `@io_bazel_rules_go//go:def.bzl`

2. **Make dependencies direct if you import them**:
   - If you import `github.com/foo/bar` in your code, it should be in the main `require()` block
   - Don't rely on transitive dependencies for direct imports

3. **Run `make build` after dependency changes**:
   - This ensures Gazelle and bazel mod tidy run correctly
   - Catches issues before they cause GoLand sync failures

4. **Don't manually edit BUILD.bazel files**:
   - They're auto-generated by Gazelle
   - Changes will be overwritten
   - Update Go code or Gazelle directives instead

5. **Check both logs when debugging**:
   - `.cursor/workspace/goland-bazel-sync.log` (GoLand BSP sync)
   - `.cursor/workspace/termain-build.log` (terminal build)
   - If terminal works but GoLand doesn't = BSP/naming issue
   - If both fail = actual build issue

## Troubleshooting Decision Tree

```
GoLand Bazel Sync Fails
‚îÇ
‚îú‚îÄ Does terminal build work? (bazel build //:project-planton)
‚îÇ  ‚îÇ
‚îÇ  ‚îú‚îÄ Yes ‚Üí BSP/GoLand-specific issue
‚îÇ  ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ  ‚îú‚îÄ Error mentions old repo name (io_bazel_rules_go)?
‚îÇ  ‚îÇ  ‚îÇ  ‚îî‚îÄ Fix 1: Update to bzlmod names (@rules_go)
‚îÇ  ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ  ‚îî‚îÄ Error mentions unknown repo (com_github_*)?
‚îÇ  ‚îÇ     ‚îú‚îÄ Check if in MODULE.bazel
‚îÇ  ‚îÇ     ‚îÇ  ‚îú‚îÄ Missing ‚Üí Fix 2: Add to MODULE.bazel
‚îÇ  ‚îÇ     ‚îÇ  ‚îî‚îÄ Present ‚Üí Fix 5: GoLand cache/settings
‚îÇ  ‚îÇ     ‚îÇ
‚îÇ  ‚îÇ     ‚îî‚îÄ Check go.mod (// indirect?)
‚îÇ  ‚îÇ        ‚îî‚îÄ Yes ‚Üí Fix 3: Make direct dependency
‚îÇ  ‚îÇ
‚îÇ  ‚îî‚îÄ No ‚Üí Actual build issue (not covered by this rule)
‚îÇ     ‚îî‚îÄ Check compilation errors, import issues, etc.
‚îÇ
‚îî‚îÄ After fixes:
   ‚îú‚îÄ Run: go mod tidy && ./bazelw run //:gazelle && ./bazelw mod tidy
   ‚îú‚îÄ Verify: grep <repo_name> MODULE.bazel
   ‚îú‚îÄ Test: bazel build //:project-planton
   ‚îî‚îÄ GoLand: Invalidate Caches ‚Üí Restart ‚Üí Sync
```

## Related Files

- `MODULE.bazel`: Repository declarations
- `go.mod`: Go dependencies
- `BUILD.bazel`: Auto-generated build files (do not edit)
- `.bazelproject`: GoLand project configuration
- `Makefile`: Build pipeline (includes gazelle + mod tidy)

## References

- Bazel bzlmod: https://bazel.build/docs/bzlmod
- Gazelle: https://github.com/bazelbuild/bazel-gazelle
- rules_go: https://github.com/bazelbuild/rules_go
- GoLand Bazel plugin: https://ij.bazel.build/

@project-planton-coding-guidelines.golang.mdc
