# Rule: Create Branch and Open PR (action)

Purpose: When invoked, generate a PR title and Markdown description via `@generate-pr-info`, then use a deterministic Python script (`tools/local-dev/create_pull_request.py`) to non-interactively create/switch to a branch, commit local changes (if any), push, and open a GitHub Pull Request via the GitHub CLI (`gh`).

This is an action rule. Execute commands non-interactively and avoid prompts. If a prerequisite is missing (e.g., `gh` auth), stop with a clear message and instructions.

Usage: Invoke explicitly as `@create-pr`.

References: `@generate-pr-info`, `@README.md`.

## Preconditions
- `gh` installed and authenticated (`gh auth status` succeeds).
- Current repo has a writable `origin` remote.
- You have already staged or will stage changes to include in the commit, or skip commit if nothing changed.

## High-level flow
1. Generate PR info via `@generate-pr-info` and capture:
   - TITLE: the first fenced `text` block (single line)
   - BODY: the second fenced `markdown` block (multiline)
2. Derive a branch name from TITLE (heuristics below).
3. Write the PR body to `.cursor/workspace/pr-description.md` and invoke `tools/local-dev/create_pull_request.py` with:
   - `--title "$TITLE"`
   - `--branch-name "$branch_name"`
   - `--commit-message "$TITLE"`
   - `--body-file "$repo_root/.cursor/workspace/pr-description.md"`
   - Optional flags for draft/reviewers/labels/base branch
4. Script deterministically handles: create/switch branch, commit if changes, push, create PR, and prints PR URL.

## Branch naming heuristic
- Extract `<type>` (prefix before `(`) and `<scope>` (inside parentheses) from the TITLE when present.
- Create a lowercase, hyphenated slug from the remainder of the TITLE.
- Branch name pattern: `<type>/<scope-or-area>-<short-slug>` (slashes in scope become `-`).
- Fallback: `chore/repo-<short-slug>` if parsing fails.

## Base branch detection
Handled by the Python script in this order:
- `gh repo view --json defaultBranchRef -q .defaultBranchRef.name`
- `git symbolic-ref --quiet --short refs/remotes/origin/HEAD | sed 's@^origin/@@'`
- Fallback: `main`
You can override by providing `PR_BASE_BRANCH` which will be passed as `--base-branch`.

## Non-interactive workflow (exact commands)
Execute these steps in the repo root. Keep commands non-interactive.

```bash
set -euo pipefail

# 0) Preflight: ensure gh and python3 are installed and gh is authenticated
if ! command -v gh >/dev/null 2>&1; then
  echo "Error: GitHub CLI (gh) is not installed. Install with: brew install gh" >&2
  exit 1
fi
if ! gh auth status >/dev/null 2>&1; then
  echo "Error: gh is not authenticated. Run: gh auth login" >&2
  exit 1
fi
if ! command -v python3 >/dev/null 2>&1; then
  echo "Error: python3 is not installed." >&2
  exit 1
fi

# 1) Generate PR info via @generate-pr-info (must run this rule first and capture its two code blocks)
# EXPECT: variables TITLE and BODY populated from @generate-pr-info output
: "${TITLE?Missing TITLE from @generate-pr-info}"
: "${BODY?Missing BODY from @generate-pr-info}"

# 2) Derive branch name from TITLE
_title_no_prefix="$(printf "%s" "$TITLE" | sed -E 's/^[a-z]+(\([^)]*\))?:\s*//')"
_type="$(printf "%s" "$TITLE" | sed -nE 's/^([a-z]+).*$/\1/p')"
_scope="$(printf "%s" "$TITLE" | sed -nE 's/^[a-z]+\(([^)]*)\).*/\1/p')"
_scope_slug="$(printf "%s" "${_scope:-repo}" | tr '[:upper:]' '[:lower:]' | tr -cs 'a-z0-9\-/' '-' | sed 's#/+#-#g')"
_slug="$(printf "%s" "${_title_no_prefix:-change}" | tr '[:upper:]' '[:lower:]' | tr -cs 'a-z0-9' '-' | sed -E 's/-+/-/g;s/^-|-$//g' | cut -c1-40)"
_type_fallback="${_type:-chore}"
branch_name="${_type_fallback}/${_scope_slug}-${_slug}"

# 3) Prepare PR body file at a stable, ignored path
repo_root="$(git rev-parse --show-toplevel)"
mkdir -p "$repo_root/.cursor/workspace"
body_file="$repo_root/.cursor/workspace/pr-description.md"
printf "%s" "$BODY" > "$body_file"

# 4) Invoke deterministic Python script
extra_flags=()
[ "${PR_DRAFT:-}" = "1" ] && extra_flags+=("--draft")
[ -n "${PR_REVIEWERS:-}" ] && extra_flags+=(--reviewers "$PR_REVIEWERS")
[ -n "${PR_LABELS:-}" ] && extra_flags+=(--labels "$PR_LABELS")
[ -n "${PR_BASE_BRANCH:-}" ] && extra_flags+=(--base-branch "$PR_BASE_BRANCH")

python3 "$repo_root/tools/local-dev/create_pull_request.py" \
  --title "$TITLE" \
  --branch-name "$branch_name" \
  --commit-message "$TITLE" \
  --body-file "$body_file" \
  "${extra_flags[@]}"
```

## Options (optional, if provided in context)
- Draft PR: set `PR_DRAFT=1` to create a draft (`--draft`).
- Reviewers: provide comma-separated `PR_REVIEWERS=user1,user2`.
- Labels: provide comma-separated `PR_LABELS=label1,label2`.
- Base branch override: `PR_BASE_BRANCH=main` (passed as `--base-branch`).

## Notes
- This rule depends on `@generate-pr-info` to produce high-quality TITLE and BODY.
- The Python script is idempotent: if the branch exists, it switches to it; if no changes, it skips commit; if upstream exists, it uses it.
- For enterprise or forks, pass additional `gh` flags via environment or adjust the script if needed (e.g., `--repo`).

@generate-pr-info
@README.md

