// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// GRPCRoute provides a way to route gRPC requests. This includes the capability
// to match requests by hostname, gRPC service, gRPC method, or HTTP/2 header.
// Filters can be used to specify additional processing steps. Backends specify
// where matching requests will be routed.
//
// GRPCRoute falls under extended support within the Gateway API. Within the
// following specification, the word "MUST" indicates that an implementation
// supporting GRPCRoute must conform to the indicated requirement, but an
// implementation not supporting this route type need not follow the requirement
// unless explicitly indicated.
//
// Implementations supporting `GRPCRoute` with the `HTTPS` `ProtocolType` MUST
// accept HTTP/2 connections without an initial upgrade from HTTP/1.1, i.e. via
// ALPN. If the implementation does not support this, then it MUST set the
// "Accepted" condition to "False" for the affected listener with a reason of
// "UnsupportedProtocol".  Implementations MAY also accept HTTP/2 connections
// with an upgrade from HTTP/1.
//
// Implementations supporting `GRPCRoute` with the `HTTP` `ProtocolType` MUST
// support HTTP/2 over cleartext TCP (h2c,
// https://www.rfc-editor.org/rfc/rfc7540#section-3.1) without an initial
// upgrade from HTTP/1.1, i.e. with prior knowledge
// (https://www.rfc-editor.org/rfc/rfc7540#section-3.4). If the implementation
// does not support this, then it MUST set the "Accepted" condition to "False"
// for the affected listener with a reason of "UnsupportedProtocol".
// Implementations MAY also accept HTTP/2 connections with an upgrade from
// HTTP/1, i.e. without prior knowledge.
type GRPCRouteType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *GRPCRouteSpec     `pulumi:"spec"`
	Status   *GRPCRouteStatus   `pulumi:"status"`
}

// GRPCRouteTypeInput is an input type that accepts GRPCRouteTypeArgs and GRPCRouteTypeOutput values.
// You can construct a concrete instance of `GRPCRouteTypeInput` via:
//
//	GRPCRouteTypeArgs{...}
type GRPCRouteTypeInput interface {
	pulumi.Input

	ToGRPCRouteTypeOutput() GRPCRouteTypeOutput
	ToGRPCRouteTypeOutputWithContext(context.Context) GRPCRouteTypeOutput
}

// GRPCRoute provides a way to route gRPC requests. This includes the capability
// to match requests by hostname, gRPC service, gRPC method, or HTTP/2 header.
// Filters can be used to specify additional processing steps. Backends specify
// where matching requests will be routed.
//
// GRPCRoute falls under extended support within the Gateway API. Within the
// following specification, the word "MUST" indicates that an implementation
// supporting GRPCRoute must conform to the indicated requirement, but an
// implementation not supporting this route type need not follow the requirement
// unless explicitly indicated.
//
// Implementations supporting `GRPCRoute` with the `HTTPS` `ProtocolType` MUST
// accept HTTP/2 connections without an initial upgrade from HTTP/1.1, i.e. via
// ALPN. If the implementation does not support this, then it MUST set the
// "Accepted" condition to "False" for the affected listener with a reason of
// "UnsupportedProtocol".  Implementations MAY also accept HTTP/2 connections
// with an upgrade from HTTP/1.
//
// Implementations supporting `GRPCRoute` with the `HTTP` `ProtocolType` MUST
// support HTTP/2 over cleartext TCP (h2c,
// https://www.rfc-editor.org/rfc/rfc7540#section-3.1) without an initial
// upgrade from HTTP/1.1, i.e. with prior knowledge
// (https://www.rfc-editor.org/rfc/rfc7540#section-3.4). If the implementation
// does not support this, then it MUST set the "Accepted" condition to "False"
// for the affected listener with a reason of "UnsupportedProtocol".
// Implementations MAY also accept HTTP/2 connections with an upgrade from
// HTTP/1, i.e. without prior knowledge.
type GRPCRouteTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput `pulumi:"metadata"`
	Spec     GRPCRouteSpecPtrInput     `pulumi:"spec"`
	Status   GRPCRouteStatusPtrInput   `pulumi:"status"`
}

func (GRPCRouteTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteType)(nil)).Elem()
}

func (i GRPCRouteTypeArgs) ToGRPCRouteTypeOutput() GRPCRouteTypeOutput {
	return i.ToGRPCRouteTypeOutputWithContext(context.Background())
}

func (i GRPCRouteTypeArgs) ToGRPCRouteTypeOutputWithContext(ctx context.Context) GRPCRouteTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteTypeOutput)
}

// GRPCRouteTypeArrayInput is an input type that accepts GRPCRouteTypeArray and GRPCRouteTypeArrayOutput values.
// You can construct a concrete instance of `GRPCRouteTypeArrayInput` via:
//
//	GRPCRouteTypeArray{ GRPCRouteTypeArgs{...} }
type GRPCRouteTypeArrayInput interface {
	pulumi.Input

	ToGRPCRouteTypeArrayOutput() GRPCRouteTypeArrayOutput
	ToGRPCRouteTypeArrayOutputWithContext(context.Context) GRPCRouteTypeArrayOutput
}

type GRPCRouteTypeArray []GRPCRouteTypeInput

func (GRPCRouteTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteType)(nil)).Elem()
}

func (i GRPCRouteTypeArray) ToGRPCRouteTypeArrayOutput() GRPCRouteTypeArrayOutput {
	return i.ToGRPCRouteTypeArrayOutputWithContext(context.Background())
}

func (i GRPCRouteTypeArray) ToGRPCRouteTypeArrayOutputWithContext(ctx context.Context) GRPCRouteTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteTypeArrayOutput)
}

// GRPCRoute provides a way to route gRPC requests. This includes the capability
// to match requests by hostname, gRPC service, gRPC method, or HTTP/2 header.
// Filters can be used to specify additional processing steps. Backends specify
// where matching requests will be routed.
//
// GRPCRoute falls under extended support within the Gateway API. Within the
// following specification, the word "MUST" indicates that an implementation
// supporting GRPCRoute must conform to the indicated requirement, but an
// implementation not supporting this route type need not follow the requirement
// unless explicitly indicated.
//
// Implementations supporting `GRPCRoute` with the `HTTPS` `ProtocolType` MUST
// accept HTTP/2 connections without an initial upgrade from HTTP/1.1, i.e. via
// ALPN. If the implementation does not support this, then it MUST set the
// "Accepted" condition to "False" for the affected listener with a reason of
// "UnsupportedProtocol".  Implementations MAY also accept HTTP/2 connections
// with an upgrade from HTTP/1.
//
// Implementations supporting `GRPCRoute` with the `HTTP` `ProtocolType` MUST
// support HTTP/2 over cleartext TCP (h2c,
// https://www.rfc-editor.org/rfc/rfc7540#section-3.1) without an initial
// upgrade from HTTP/1.1, i.e. with prior knowledge
// (https://www.rfc-editor.org/rfc/rfc7540#section-3.4). If the implementation
// does not support this, then it MUST set the "Accepted" condition to "False"
// for the affected listener with a reason of "UnsupportedProtocol".
// Implementations MAY also accept HTTP/2 connections with an upgrade from
// HTTP/1, i.e. without prior knowledge.
type GRPCRouteTypeOutput struct{ *pulumi.OutputState }

func (GRPCRouteTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteType)(nil)).Elem()
}

func (o GRPCRouteTypeOutput) ToGRPCRouteTypeOutput() GRPCRouteTypeOutput {
	return o
}

func (o GRPCRouteTypeOutput) ToGRPCRouteTypeOutputWithContext(ctx context.Context) GRPCRouteTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o GRPCRouteTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GRPCRouteTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o GRPCRouteTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v GRPCRouteType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o GRPCRouteTypeOutput) Spec() GRPCRouteSpecPtrOutput {
	return o.ApplyT(func(v GRPCRouteType) *GRPCRouteSpec { return v.Spec }).(GRPCRouteSpecPtrOutput)
}

func (o GRPCRouteTypeOutput) Status() GRPCRouteStatusPtrOutput {
	return o.ApplyT(func(v GRPCRouteType) *GRPCRouteStatus { return v.Status }).(GRPCRouteStatusPtrOutput)
}

type GRPCRouteTypeArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteType)(nil)).Elem()
}

func (o GRPCRouteTypeArrayOutput) ToGRPCRouteTypeArrayOutput() GRPCRouteTypeArrayOutput {
	return o
}

func (o GRPCRouteTypeArrayOutput) ToGRPCRouteTypeArrayOutputWithContext(ctx context.Context) GRPCRouteTypeArrayOutput {
	return o
}

func (o GRPCRouteTypeArrayOutput) Index(i pulumi.IntInput) GRPCRouteTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteType {
		return vs[0].([]GRPCRouteType)[vs[1].(int)]
	}).(GRPCRouteTypeOutput)
}

// GRPCRouteList is a list of GRPCRoute
type GRPCRouteListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of grpcroutes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []GRPCRouteType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// GRPCRouteListTypeInput is an input type that accepts GRPCRouteListTypeArgs and GRPCRouteListTypeOutput values.
// You can construct a concrete instance of `GRPCRouteListTypeInput` via:
//
//	GRPCRouteListTypeArgs{...}
type GRPCRouteListTypeInput interface {
	pulumi.Input

	ToGRPCRouteListTypeOutput() GRPCRouteListTypeOutput
	ToGRPCRouteListTypeOutputWithContext(context.Context) GRPCRouteListTypeOutput
}

// GRPCRouteList is a list of GRPCRoute
type GRPCRouteListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of grpcroutes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items GRPCRouteTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (GRPCRouteListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteListType)(nil)).Elem()
}

func (i GRPCRouteListTypeArgs) ToGRPCRouteListTypeOutput() GRPCRouteListTypeOutput {
	return i.ToGRPCRouteListTypeOutputWithContext(context.Background())
}

func (i GRPCRouteListTypeArgs) ToGRPCRouteListTypeOutputWithContext(ctx context.Context) GRPCRouteListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteListTypeOutput)
}

// GRPCRouteList is a list of GRPCRoute
type GRPCRouteListTypeOutput struct{ *pulumi.OutputState }

func (GRPCRouteListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteListType)(nil)).Elem()
}

func (o GRPCRouteListTypeOutput) ToGRPCRouteListTypeOutput() GRPCRouteListTypeOutput {
	return o
}

func (o GRPCRouteListTypeOutput) ToGRPCRouteListTypeOutputWithContext(ctx context.Context) GRPCRouteListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o GRPCRouteListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of grpcroutes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o GRPCRouteListTypeOutput) Items() GRPCRouteTypeArrayOutput {
	return o.ApplyT(func(v GRPCRouteListType) []GRPCRouteType { return v.Items }).(GRPCRouteTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GRPCRouteListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GRPCRouteListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v GRPCRouteListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// GRPCRoute provides a way to route gRPC requests. This includes the capability
// to match requests by hostname, gRPC service, gRPC method, or HTTP/2 header.
// Filters can be used to specify additional processing steps. Backends specify
// where matching requests will be routed.
//
// GRPCRoute falls under extended support within the Gateway API. Within the
// following specification, the word "MUST" indicates that an implementation
// supporting GRPCRoute must conform to the indicated requirement, but an
// implementation not supporting this route type need not follow the requirement
// unless explicitly indicated.
//
// Implementations supporting `GRPCRoute` with the `HTTPS` `ProtocolType` MUST
// accept HTTP/2 connections without an initial upgrade from HTTP/1.1, i.e. via
// ALPN. If the implementation does not support this, then it MUST set the
// "Accepted" condition to "False" for the affected listener with a reason of
// "UnsupportedProtocol".  Implementations MAY also accept HTTP/2 connections
// with an upgrade from HTTP/1.
//
// Implementations supporting `GRPCRoute` with the `HTTP` `ProtocolType` MUST
// support HTTP/2 over cleartext TCP (h2c,
// https://www.rfc-editor.org/rfc/rfc7540#section-3.1) without an initial
// upgrade from HTTP/1.1, i.e. with prior knowledge
// (https://www.rfc-editor.org/rfc/rfc7540#section-3.4). If the implementation
// does not support this, then it MUST set the "Accepted" condition to "False"
// for the affected listener with a reason of "UnsupportedProtocol".
// Implementations MAY also accept HTTP/2 connections with an upgrade from
// HTTP/1, i.e. without prior knowledge.
type GRPCRoutePatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *GRPCRouteSpecPatch     `pulumi:"spec"`
	Status   *GRPCRouteStatusPatch   `pulumi:"status"`
}

// GRPCRoutePatchTypeInput is an input type that accepts GRPCRoutePatchTypeArgs and GRPCRoutePatchTypeOutput values.
// You can construct a concrete instance of `GRPCRoutePatchTypeInput` via:
//
//	GRPCRoutePatchTypeArgs{...}
type GRPCRoutePatchTypeInput interface {
	pulumi.Input

	ToGRPCRoutePatchTypeOutput() GRPCRoutePatchTypeOutput
	ToGRPCRoutePatchTypeOutputWithContext(context.Context) GRPCRoutePatchTypeOutput
}

// GRPCRoute provides a way to route gRPC requests. This includes the capability
// to match requests by hostname, gRPC service, gRPC method, or HTTP/2 header.
// Filters can be used to specify additional processing steps. Backends specify
// where matching requests will be routed.
//
// GRPCRoute falls under extended support within the Gateway API. Within the
// following specification, the word "MUST" indicates that an implementation
// supporting GRPCRoute must conform to the indicated requirement, but an
// implementation not supporting this route type need not follow the requirement
// unless explicitly indicated.
//
// Implementations supporting `GRPCRoute` with the `HTTPS` `ProtocolType` MUST
// accept HTTP/2 connections without an initial upgrade from HTTP/1.1, i.e. via
// ALPN. If the implementation does not support this, then it MUST set the
// "Accepted" condition to "False" for the affected listener with a reason of
// "UnsupportedProtocol".  Implementations MAY also accept HTTP/2 connections
// with an upgrade from HTTP/1.
//
// Implementations supporting `GRPCRoute` with the `HTTP` `ProtocolType` MUST
// support HTTP/2 over cleartext TCP (h2c,
// https://www.rfc-editor.org/rfc/rfc7540#section-3.1) without an initial
// upgrade from HTTP/1.1, i.e. with prior knowledge
// (https://www.rfc-editor.org/rfc/rfc7540#section-3.4). If the implementation
// does not support this, then it MUST set the "Accepted" condition to "False"
// for the affected listener with a reason of "UnsupportedProtocol".
// Implementations MAY also accept HTTP/2 connections with an upgrade from
// HTTP/1, i.e. without prior knowledge.
type GRPCRoutePatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput `pulumi:"metadata"`
	Spec     GRPCRouteSpecPatchPtrInput     `pulumi:"spec"`
	Status   GRPCRouteStatusPatchPtrInput   `pulumi:"status"`
}

func (GRPCRoutePatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRoutePatchType)(nil)).Elem()
}

func (i GRPCRoutePatchTypeArgs) ToGRPCRoutePatchTypeOutput() GRPCRoutePatchTypeOutput {
	return i.ToGRPCRoutePatchTypeOutputWithContext(context.Background())
}

func (i GRPCRoutePatchTypeArgs) ToGRPCRoutePatchTypeOutputWithContext(ctx context.Context) GRPCRoutePatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRoutePatchTypeOutput)
}

// GRPCRoute provides a way to route gRPC requests. This includes the capability
// to match requests by hostname, gRPC service, gRPC method, or HTTP/2 header.
// Filters can be used to specify additional processing steps. Backends specify
// where matching requests will be routed.
//
// GRPCRoute falls under extended support within the Gateway API. Within the
// following specification, the word "MUST" indicates that an implementation
// supporting GRPCRoute must conform to the indicated requirement, but an
// implementation not supporting this route type need not follow the requirement
// unless explicitly indicated.
//
// Implementations supporting `GRPCRoute` with the `HTTPS` `ProtocolType` MUST
// accept HTTP/2 connections without an initial upgrade from HTTP/1.1, i.e. via
// ALPN. If the implementation does not support this, then it MUST set the
// "Accepted" condition to "False" for the affected listener with a reason of
// "UnsupportedProtocol".  Implementations MAY also accept HTTP/2 connections
// with an upgrade from HTTP/1.
//
// Implementations supporting `GRPCRoute` with the `HTTP` `ProtocolType` MUST
// support HTTP/2 over cleartext TCP (h2c,
// https://www.rfc-editor.org/rfc/rfc7540#section-3.1) without an initial
// upgrade from HTTP/1.1, i.e. with prior knowledge
// (https://www.rfc-editor.org/rfc/rfc7540#section-3.4). If the implementation
// does not support this, then it MUST set the "Accepted" condition to "False"
// for the affected listener with a reason of "UnsupportedProtocol".
// Implementations MAY also accept HTTP/2 connections with an upgrade from
// HTTP/1, i.e. without prior knowledge.
type GRPCRoutePatchTypeOutput struct{ *pulumi.OutputState }

func (GRPCRoutePatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRoutePatchType)(nil)).Elem()
}

func (o GRPCRoutePatchTypeOutput) ToGRPCRoutePatchTypeOutput() GRPCRoutePatchTypeOutput {
	return o
}

func (o GRPCRoutePatchTypeOutput) ToGRPCRoutePatchTypeOutputWithContext(ctx context.Context) GRPCRoutePatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o GRPCRoutePatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRoutePatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GRPCRoutePatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRoutePatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o GRPCRoutePatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v GRPCRoutePatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o GRPCRoutePatchTypeOutput) Spec() GRPCRouteSpecPatchPtrOutput {
	return o.ApplyT(func(v GRPCRoutePatchType) *GRPCRouteSpecPatch { return v.Spec }).(GRPCRouteSpecPatchPtrOutput)
}

func (o GRPCRoutePatchTypeOutput) Status() GRPCRouteStatusPatchPtrOutput {
	return o.ApplyT(func(v GRPCRoutePatchType) *GRPCRouteStatusPatch { return v.Status }).(GRPCRouteStatusPatchPtrOutput)
}

// Spec defines the desired state of GRPCRoute.
type GRPCRouteSpec struct {
	// Hostnames defines a set of hostnames to match against the GRPC
	// Host header to select a GRPCRoute to process the request. This matches
	// the RFC 1123 definition of a hostname with 2 notable exceptions:
	//
	// 1. IPs are not allowed.
	// 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
	//    label MUST appear by itself as the first label.
	//
	// If a hostname is specified by both the Listener and GRPCRoute, there
	// MUST be at least one intersecting hostname for the GRPCRoute to be
	// attached to the Listener. For example:
	//
	// * A Listener with `test.example.com` as the hostname matches GRPCRoutes
	//   that have either not specified any hostnames, or have specified at
	//   least one of `test.example.com` or `*.example.com`.
	// * A Listener with `*.example.com` as the hostname matches GRPCRoutes
	//   that have either not specified any hostnames or have specified at least
	//   one hostname that matches the Listener hostname. For example,
	//   `test.example.com` and `*.example.com` would both match. On the other
	//   hand, `example.com` and `test.example.net` would not match.
	//
	// Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
	// as a suffix match. That means that a match for `*.example.com` would match
	// both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
	//
	// If both the Listener and GRPCRoute have specified hostnames, any
	// GRPCRoute hostnames that do not match the Listener hostname MUST be
	// ignored. For example, if a Listener specified `*.example.com`, and the
	// GRPCRoute specified `test.example.com` and `test.example.net`,
	// `test.example.net` MUST NOT be considered for a match.
	//
	// If both the Listener and GRPCRoute have specified hostnames, and none
	// match with the criteria above, then the GRPCRoute MUST NOT be accepted by
	// the implementation. The implementation MUST raise an 'Accepted' Condition
	// with a status of `False` in the corresponding RouteParentStatus.
	//
	// If a Route (A) of type HTTPRoute or GRPCRoute is attached to a
	// Listener and that listener already has another Route (B) of the other
	// type attached and the intersection of the hostnames of A and B is
	// non-empty, then the implementation MUST accept exactly one of these two
	// routes, determined by the following criteria, in order:
	//
	// * The oldest Route based on creation timestamp.
	// * The Route appearing first in alphabetical order by
	//   "{namespace}/{name}".
	//
	// The rejected Route MUST raise an 'Accepted' condition with a status of
	// 'False' in the corresponding RouteParentStatus.
	//
	// Support: Core
	Hostnames []string `pulumi:"hostnames"`
	// ParentRefs references the resources (usually Gateways) that a Route wants
	// to be attached to. Note that the referenced parent resource needs to
	// allow this for the attachment to be complete. For Gateways, that means
	// the Gateway needs to allow attachment from Routes of this kind and
	// namespace. For Services, that means the Service must either be in the same
	// namespace for a "producer" route, or the mesh implementation must support
	// and allow "consumer" routes for the referenced Service. ReferenceGrant is
	// not applicable for governing ParentRefs to Services - it is not possible to
	// create a "producer" route for a Service in a different namespace from the
	// Route.
	//
	// There are two kinds of parent resources with "Core" support:
	//
	// * Gateway (Gateway conformance profile)
	// * Service (Mesh conformance profile, ClusterIP Services only)
	//
	// This API may be extended in the future to support additional kinds of parent
	// resources.
	//
	// ParentRefs must be _distinct_. This means either that:
	//
	// * They select different objects.  If this is the case, then parentRef
	//   entries are distinct. In terms of fields, this means that the
	//   multi-part key defined by `group`, `kind`, `namespace`, and `name` must
	//   be unique across all parentRef entries in the Route.
	// * They do not select different objects, but for each optional field used,
	//   each ParentRef that selects the same object must set the same set of
	//   optional fields to different values. If one ParentRef sets a
	//   combination of optional fields, all must set the same combination.
	//
	// Some examples:
	//
	// * If one ParentRef sets `sectionName`, all ParentRefs referencing the
	//   same object must also set `sectionName`.
	// * If one ParentRef sets `port`, all ParentRefs referencing the same
	//   object must also set `port`.
	// * If one ParentRef sets `sectionName` and `port`, all ParentRefs
	//   referencing the same object must also set `sectionName` and `port`.
	//
	// It is possible to separately reference multiple distinct objects that may
	// be collapsed by an implementation. For example, some implementations may
	// choose to merge compatible Gateway Listeners together. If that is the
	// case, the list of routes attached to those resources should also be
	// merged.
	//
	// Note that for ParentRefs that cross namespace boundaries, there are specific
	// rules. Cross-namespace references are only valid if they are explicitly
	// allowed by something in the namespace they are referring to. For example,
	// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
	// generic way to enable other kinds of cross-namespace reference.
	ParentRefs []GRPCRouteSpecParentRefs `pulumi:"parentRefs"`
	// Rules are a list of GRPC matchers, filters and actions.
	Rules []GRPCRouteSpecRules `pulumi:"rules"`
}

// GRPCRouteSpecInput is an input type that accepts GRPCRouteSpecArgs and GRPCRouteSpecOutput values.
// You can construct a concrete instance of `GRPCRouteSpecInput` via:
//
//	GRPCRouteSpecArgs{...}
type GRPCRouteSpecInput interface {
	pulumi.Input

	ToGRPCRouteSpecOutput() GRPCRouteSpecOutput
	ToGRPCRouteSpecOutputWithContext(context.Context) GRPCRouteSpecOutput
}

// Spec defines the desired state of GRPCRoute.
type GRPCRouteSpecArgs struct {
	// Hostnames defines a set of hostnames to match against the GRPC
	// Host header to select a GRPCRoute to process the request. This matches
	// the RFC 1123 definition of a hostname with 2 notable exceptions:
	//
	// 1. IPs are not allowed.
	// 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
	//    label MUST appear by itself as the first label.
	//
	// If a hostname is specified by both the Listener and GRPCRoute, there
	// MUST be at least one intersecting hostname for the GRPCRoute to be
	// attached to the Listener. For example:
	//
	// * A Listener with `test.example.com` as the hostname matches GRPCRoutes
	//   that have either not specified any hostnames, or have specified at
	//   least one of `test.example.com` or `*.example.com`.
	// * A Listener with `*.example.com` as the hostname matches GRPCRoutes
	//   that have either not specified any hostnames or have specified at least
	//   one hostname that matches the Listener hostname. For example,
	//   `test.example.com` and `*.example.com` would both match. On the other
	//   hand, `example.com` and `test.example.net` would not match.
	//
	// Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
	// as a suffix match. That means that a match for `*.example.com` would match
	// both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
	//
	// If both the Listener and GRPCRoute have specified hostnames, any
	// GRPCRoute hostnames that do not match the Listener hostname MUST be
	// ignored. For example, if a Listener specified `*.example.com`, and the
	// GRPCRoute specified `test.example.com` and `test.example.net`,
	// `test.example.net` MUST NOT be considered for a match.
	//
	// If both the Listener and GRPCRoute have specified hostnames, and none
	// match with the criteria above, then the GRPCRoute MUST NOT be accepted by
	// the implementation. The implementation MUST raise an 'Accepted' Condition
	// with a status of `False` in the corresponding RouteParentStatus.
	//
	// If a Route (A) of type HTTPRoute or GRPCRoute is attached to a
	// Listener and that listener already has another Route (B) of the other
	// type attached and the intersection of the hostnames of A and B is
	// non-empty, then the implementation MUST accept exactly one of these two
	// routes, determined by the following criteria, in order:
	//
	// * The oldest Route based on creation timestamp.
	// * The Route appearing first in alphabetical order by
	//   "{namespace}/{name}".
	//
	// The rejected Route MUST raise an 'Accepted' condition with a status of
	// 'False' in the corresponding RouteParentStatus.
	//
	// Support: Core
	Hostnames pulumi.StringArrayInput `pulumi:"hostnames"`
	// ParentRefs references the resources (usually Gateways) that a Route wants
	// to be attached to. Note that the referenced parent resource needs to
	// allow this for the attachment to be complete. For Gateways, that means
	// the Gateway needs to allow attachment from Routes of this kind and
	// namespace. For Services, that means the Service must either be in the same
	// namespace for a "producer" route, or the mesh implementation must support
	// and allow "consumer" routes for the referenced Service. ReferenceGrant is
	// not applicable for governing ParentRefs to Services - it is not possible to
	// create a "producer" route for a Service in a different namespace from the
	// Route.
	//
	// There are two kinds of parent resources with "Core" support:
	//
	// * Gateway (Gateway conformance profile)
	// * Service (Mesh conformance profile, ClusterIP Services only)
	//
	// This API may be extended in the future to support additional kinds of parent
	// resources.
	//
	// ParentRefs must be _distinct_. This means either that:
	//
	// * They select different objects.  If this is the case, then parentRef
	//   entries are distinct. In terms of fields, this means that the
	//   multi-part key defined by `group`, `kind`, `namespace`, and `name` must
	//   be unique across all parentRef entries in the Route.
	// * They do not select different objects, but for each optional field used,
	//   each ParentRef that selects the same object must set the same set of
	//   optional fields to different values. If one ParentRef sets a
	//   combination of optional fields, all must set the same combination.
	//
	// Some examples:
	//
	// * If one ParentRef sets `sectionName`, all ParentRefs referencing the
	//   same object must also set `sectionName`.
	// * If one ParentRef sets `port`, all ParentRefs referencing the same
	//   object must also set `port`.
	// * If one ParentRef sets `sectionName` and `port`, all ParentRefs
	//   referencing the same object must also set `sectionName` and `port`.
	//
	// It is possible to separately reference multiple distinct objects that may
	// be collapsed by an implementation. For example, some implementations may
	// choose to merge compatible Gateway Listeners together. If that is the
	// case, the list of routes attached to those resources should also be
	// merged.
	//
	// Note that for ParentRefs that cross namespace boundaries, there are specific
	// rules. Cross-namespace references are only valid if they are explicitly
	// allowed by something in the namespace they are referring to. For example,
	// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
	// generic way to enable other kinds of cross-namespace reference.
	ParentRefs GRPCRouteSpecParentRefsArrayInput `pulumi:"parentRefs"`
	// Rules are a list of GRPC matchers, filters and actions.
	Rules GRPCRouteSpecRulesArrayInput `pulumi:"rules"`
}

func (GRPCRouteSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpec)(nil)).Elem()
}

func (i GRPCRouteSpecArgs) ToGRPCRouteSpecOutput() GRPCRouteSpecOutput {
	return i.ToGRPCRouteSpecOutputWithContext(context.Background())
}

func (i GRPCRouteSpecArgs) ToGRPCRouteSpecOutputWithContext(ctx context.Context) GRPCRouteSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecOutput)
}

func (i GRPCRouteSpecArgs) ToGRPCRouteSpecPtrOutput() GRPCRouteSpecPtrOutput {
	return i.ToGRPCRouteSpecPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecArgs) ToGRPCRouteSpecPtrOutputWithContext(ctx context.Context) GRPCRouteSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecOutput).ToGRPCRouteSpecPtrOutputWithContext(ctx)
}

// GRPCRouteSpecPtrInput is an input type that accepts GRPCRouteSpecArgs, GRPCRouteSpecPtr and GRPCRouteSpecPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecPtrInput` via:
//
//	        GRPCRouteSpecArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecPtrOutput() GRPCRouteSpecPtrOutput
	ToGRPCRouteSpecPtrOutputWithContext(context.Context) GRPCRouteSpecPtrOutput
}

type grpcrouteSpecPtrType GRPCRouteSpecArgs

func GRPCRouteSpecPtr(v *GRPCRouteSpecArgs) GRPCRouteSpecPtrInput {
	return (*grpcrouteSpecPtrType)(v)
}

func (*grpcrouteSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpec)(nil)).Elem()
}

func (i *grpcrouteSpecPtrType) ToGRPCRouteSpecPtrOutput() GRPCRouteSpecPtrOutput {
	return i.ToGRPCRouteSpecPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecPtrType) ToGRPCRouteSpecPtrOutputWithContext(ctx context.Context) GRPCRouteSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecPtrOutput)
}

// Spec defines the desired state of GRPCRoute.
type GRPCRouteSpecOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpec)(nil)).Elem()
}

func (o GRPCRouteSpecOutput) ToGRPCRouteSpecOutput() GRPCRouteSpecOutput {
	return o
}

func (o GRPCRouteSpecOutput) ToGRPCRouteSpecOutputWithContext(ctx context.Context) GRPCRouteSpecOutput {
	return o
}

func (o GRPCRouteSpecOutput) ToGRPCRouteSpecPtrOutput() GRPCRouteSpecPtrOutput {
	return o.ToGRPCRouteSpecPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecOutput) ToGRPCRouteSpecPtrOutputWithContext(ctx context.Context) GRPCRouteSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpec) *GRPCRouteSpec {
		return &v
	}).(GRPCRouteSpecPtrOutput)
}

// Hostnames defines a set of hostnames to match against the GRPC
// Host header to select a GRPCRoute to process the request. This matches
// the RFC 1123 definition of a hostname with 2 notable exceptions:
//
//  1. IPs are not allowed.
//  2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
//     label MUST appear by itself as the first label.
//
// If a hostname is specified by both the Listener and GRPCRoute, there
// MUST be at least one intersecting hostname for the GRPCRoute to be
// attached to the Listener. For example:
//
//   - A Listener with `test.example.com` as the hostname matches GRPCRoutes
//     that have either not specified any hostnames, or have specified at
//     least one of `test.example.com` or `*.example.com`.
//   - A Listener with `*.example.com` as the hostname matches GRPCRoutes
//     that have either not specified any hostnames or have specified at least
//     one hostname that matches the Listener hostname. For example,
//     `test.example.com` and `*.example.com` would both match. On the other
//     hand, `example.com` and `test.example.net` would not match.
//
// Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
// as a suffix match. That means that a match for `*.example.com` would match
// both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
//
// If both the Listener and GRPCRoute have specified hostnames, any
// GRPCRoute hostnames that do not match the Listener hostname MUST be
// ignored. For example, if a Listener specified `*.example.com`, and the
// GRPCRoute specified `test.example.com` and `test.example.net`,
// `test.example.net` MUST NOT be considered for a match.
//
// If both the Listener and GRPCRoute have specified hostnames, and none
// match with the criteria above, then the GRPCRoute MUST NOT be accepted by
// the implementation. The implementation MUST raise an 'Accepted' Condition
// with a status of `False` in the corresponding RouteParentStatus.
//
// If a Route (A) of type HTTPRoute or GRPCRoute is attached to a
// Listener and that listener already has another Route (B) of the other
// type attached and the intersection of the hostnames of A and B is
// non-empty, then the implementation MUST accept exactly one of these two
// routes, determined by the following criteria, in order:
//
//   - The oldest Route based on creation timestamp.
//   - The Route appearing first in alphabetical order by
//     "{namespace}/{name}".
//
// The rejected Route MUST raise an 'Accepted' condition with a status of
// 'False' in the corresponding RouteParentStatus.
//
// Support: Core
func (o GRPCRouteSpecOutput) Hostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpec) []string { return v.Hostnames }).(pulumi.StringArrayOutput)
}

// ParentRefs references the resources (usually Gateways) that a Route wants
// to be attached to. Note that the referenced parent resource needs to
// allow this for the attachment to be complete. For Gateways, that means
// the Gateway needs to allow attachment from Routes of this kind and
// namespace. For Services, that means the Service must either be in the same
// namespace for a "producer" route, or the mesh implementation must support
// and allow "consumer" routes for the referenced Service. ReferenceGrant is
// not applicable for governing ParentRefs to Services - it is not possible to
// create a "producer" route for a Service in a different namespace from the
// Route.
//
// There are two kinds of parent resources with "Core" support:
//
// * Gateway (Gateway conformance profile)
// * Service (Mesh conformance profile, ClusterIP Services only)
//
// This API may be extended in the future to support additional kinds of parent
// resources.
//
// ParentRefs must be _distinct_. This means either that:
//
//   - They select different objects.  If this is the case, then parentRef
//     entries are distinct. In terms of fields, this means that the
//     multi-part key defined by `group`, `kind`, `namespace`, and `name` must
//     be unique across all parentRef entries in the Route.
//   - They do not select different objects, but for each optional field used,
//     each ParentRef that selects the same object must set the same set of
//     optional fields to different values. If one ParentRef sets a
//     combination of optional fields, all must set the same combination.
//
// Some examples:
//
//   - If one ParentRef sets `sectionName`, all ParentRefs referencing the
//     same object must also set `sectionName`.
//   - If one ParentRef sets `port`, all ParentRefs referencing the same
//     object must also set `port`.
//   - If one ParentRef sets `sectionName` and `port`, all ParentRefs
//     referencing the same object must also set `sectionName` and `port`.
//
// It is possible to separately reference multiple distinct objects that may
// be collapsed by an implementation. For example, some implementations may
// choose to merge compatible Gateway Listeners together. If that is the
// case, the list of routes attached to those resources should also be
// merged.
//
// Note that for ParentRefs that cross namespace boundaries, there are specific
// rules. Cross-namespace references are only valid if they are explicitly
// allowed by something in the namespace they are referring to. For example,
// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
// generic way to enable other kinds of cross-namespace reference.
func (o GRPCRouteSpecOutput) ParentRefs() GRPCRouteSpecParentRefsArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpec) []GRPCRouteSpecParentRefs { return v.ParentRefs }).(GRPCRouteSpecParentRefsArrayOutput)
}

// Rules are a list of GRPC matchers, filters and actions.
func (o GRPCRouteSpecOutput) Rules() GRPCRouteSpecRulesArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpec) []GRPCRouteSpecRules { return v.Rules }).(GRPCRouteSpecRulesArrayOutput)
}

type GRPCRouteSpecPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpec)(nil)).Elem()
}

func (o GRPCRouteSpecPtrOutput) ToGRPCRouteSpecPtrOutput() GRPCRouteSpecPtrOutput {
	return o
}

func (o GRPCRouteSpecPtrOutput) ToGRPCRouteSpecPtrOutputWithContext(ctx context.Context) GRPCRouteSpecPtrOutput {
	return o
}

func (o GRPCRouteSpecPtrOutput) Elem() GRPCRouteSpecOutput {
	return o.ApplyT(func(v *GRPCRouteSpec) GRPCRouteSpec {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpec
		return ret
	}).(GRPCRouteSpecOutput)
}

// Hostnames defines a set of hostnames to match against the GRPC
// Host header to select a GRPCRoute to process the request. This matches
// the RFC 1123 definition of a hostname with 2 notable exceptions:
//
//  1. IPs are not allowed.
//  2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
//     label MUST appear by itself as the first label.
//
// If a hostname is specified by both the Listener and GRPCRoute, there
// MUST be at least one intersecting hostname for the GRPCRoute to be
// attached to the Listener. For example:
//
//   - A Listener with `test.example.com` as the hostname matches GRPCRoutes
//     that have either not specified any hostnames, or have specified at
//     least one of `test.example.com` or `*.example.com`.
//   - A Listener with `*.example.com` as the hostname matches GRPCRoutes
//     that have either not specified any hostnames or have specified at least
//     one hostname that matches the Listener hostname. For example,
//     `test.example.com` and `*.example.com` would both match. On the other
//     hand, `example.com` and `test.example.net` would not match.
//
// Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
// as a suffix match. That means that a match for `*.example.com` would match
// both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
//
// If both the Listener and GRPCRoute have specified hostnames, any
// GRPCRoute hostnames that do not match the Listener hostname MUST be
// ignored. For example, if a Listener specified `*.example.com`, and the
// GRPCRoute specified `test.example.com` and `test.example.net`,
// `test.example.net` MUST NOT be considered for a match.
//
// If both the Listener and GRPCRoute have specified hostnames, and none
// match with the criteria above, then the GRPCRoute MUST NOT be accepted by
// the implementation. The implementation MUST raise an 'Accepted' Condition
// with a status of `False` in the corresponding RouteParentStatus.
//
// If a Route (A) of type HTTPRoute or GRPCRoute is attached to a
// Listener and that listener already has another Route (B) of the other
// type attached and the intersection of the hostnames of A and B is
// non-empty, then the implementation MUST accept exactly one of these two
// routes, determined by the following criteria, in order:
//
//   - The oldest Route based on creation timestamp.
//   - The Route appearing first in alphabetical order by
//     "{namespace}/{name}".
//
// The rejected Route MUST raise an 'Accepted' condition with a status of
// 'False' in the corresponding RouteParentStatus.
//
// Support: Core
func (o GRPCRouteSpecPtrOutput) Hostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpec) []string {
		if v == nil {
			return nil
		}
		return v.Hostnames
	}).(pulumi.StringArrayOutput)
}

// ParentRefs references the resources (usually Gateways) that a Route wants
// to be attached to. Note that the referenced parent resource needs to
// allow this for the attachment to be complete. For Gateways, that means
// the Gateway needs to allow attachment from Routes of this kind and
// namespace. For Services, that means the Service must either be in the same
// namespace for a "producer" route, or the mesh implementation must support
// and allow "consumer" routes for the referenced Service. ReferenceGrant is
// not applicable for governing ParentRefs to Services - it is not possible to
// create a "producer" route for a Service in a different namespace from the
// Route.
//
// There are two kinds of parent resources with "Core" support:
//
// * Gateway (Gateway conformance profile)
// * Service (Mesh conformance profile, ClusterIP Services only)
//
// This API may be extended in the future to support additional kinds of parent
// resources.
//
// ParentRefs must be _distinct_. This means either that:
//
//   - They select different objects.  If this is the case, then parentRef
//     entries are distinct. In terms of fields, this means that the
//     multi-part key defined by `group`, `kind`, `namespace`, and `name` must
//     be unique across all parentRef entries in the Route.
//   - They do not select different objects, but for each optional field used,
//     each ParentRef that selects the same object must set the same set of
//     optional fields to different values. If one ParentRef sets a
//     combination of optional fields, all must set the same combination.
//
// Some examples:
//
//   - If one ParentRef sets `sectionName`, all ParentRefs referencing the
//     same object must also set `sectionName`.
//   - If one ParentRef sets `port`, all ParentRefs referencing the same
//     object must also set `port`.
//   - If one ParentRef sets `sectionName` and `port`, all ParentRefs
//     referencing the same object must also set `sectionName` and `port`.
//
// It is possible to separately reference multiple distinct objects that may
// be collapsed by an implementation. For example, some implementations may
// choose to merge compatible Gateway Listeners together. If that is the
// case, the list of routes attached to those resources should also be
// merged.
//
// Note that for ParentRefs that cross namespace boundaries, there are specific
// rules. Cross-namespace references are only valid if they are explicitly
// allowed by something in the namespace they are referring to. For example,
// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
// generic way to enable other kinds of cross-namespace reference.
func (o GRPCRouteSpecPtrOutput) ParentRefs() GRPCRouteSpecParentRefsArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpec) []GRPCRouteSpecParentRefs {
		if v == nil {
			return nil
		}
		return v.ParentRefs
	}).(GRPCRouteSpecParentRefsArrayOutput)
}

// Rules are a list of GRPC matchers, filters and actions.
func (o GRPCRouteSpecPtrOutput) Rules() GRPCRouteSpecRulesArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpec) []GRPCRouteSpecRules {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(GRPCRouteSpecRulesArrayOutput)
}

// ParentReference identifies an API object (usually a Gateway) that can be considered
// a parent of this resource (usually a route). There are two kinds of parent resources
// with "Core" support:
//
// * Gateway (Gateway conformance profile)
// * Service (Mesh conformance profile, ClusterIP Services only)
//
// This API may be extended in the future to support additional kinds of parent
// resources.
//
// The API object must be valid in the cluster; the Group and Kind must
// be registered in the cluster for this reference to be valid.
type GRPCRouteSpecParentRefs struct {
	// Group is the group of the referent.
	// When unspecified, "gateway.networking.k8s.io" is inferred.
	// To set the core API group (such as for a "Service" kind referent),
	// Group must be explicitly set to "" (empty string).
	//
	// Support: Core
	Group *string `pulumi:"group"`
	// Kind is kind of the referent.
	//
	// There are two kinds of parent resources with "Core" support:
	//
	// * Gateway (Gateway conformance profile)
	// * Service (Mesh conformance profile, ClusterIP Services only)
	//
	// Support for other resources is Implementation-Specific.
	Kind *string `pulumi:"kind"`
	// Name is the name of the referent.
	//
	// Support: Core
	Name *string `pulumi:"name"`
	// Namespace is the namespace of the referent. When unspecified, this refers
	// to the local namespace of the Route.
	//
	// Note that there are specific rules for ParentRefs which cross namespace
	// boundaries. Cross-namespace references are only valid if they are explicitly
	// allowed by something in the namespace they are referring to. For example:
	// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
	// generic way to enable any other kind of cross-namespace reference.
	//
	// Support: Core
	Namespace *string `pulumi:"namespace"`
	// Port is the network port this Route targets. It can be interpreted
	// differently based on the type of parent resource.
	//
	// When the parent resource is a Gateway, this targets all listeners
	// listening on the specified port that also support this kind of Route(and
	// select this Route). It's not recommended to set `Port` unless the
	// networking behaviors specified in a Route must apply to a specific port
	// as opposed to a listener(s) whose port(s) may be changed. When both Port
	// and SectionName are specified, the name and port of the selected listener
	// must match both specified values.
	//
	// Implementations MAY choose to support other parent resources.
	// Implementations supporting other types of parent resources MUST clearly
	// document how/if Port is interpreted.
	//
	// For the purpose of status, an attachment is considered successful as
	// long as the parent resource accepts it partially. For example, Gateway
	// listeners can restrict which Routes can attach to them by Route kind,
	// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
	// from the referencing Route, the Route MUST be considered successfully
	// attached. If no Gateway listeners accept attachment from this Route,
	// the Route MUST be considered detached from the Gateway.
	//
	// Support: Extended
	Port *int `pulumi:"port"`
	// SectionName is the name of a section within the target resource. In the
	// following resources, SectionName is interpreted as the following:
	//
	// * Gateway: Listener name. When both Port (experimental) and SectionName
	//   are specified, the name and port of the selected listener must match
	//   both specified values.
	// * Service: Port name. When both Port (experimental) and SectionName
	//   are specified, the name and port of the selected listener must match
	//   both specified values.
	//
	// Implementations MAY choose to support attaching Routes to other resources.
	// If that is the case, they MUST clearly document how SectionName is
	// interpreted.
	//
	// When unspecified (empty string), this will reference the entire resource.
	// For the purpose of status, an attachment is considered successful if at
	// least one section in the parent resource accepts it. For example, Gateway
	// listeners can restrict which Routes can attach to them by Route kind,
	// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
	// the referencing Route, the Route MUST be considered successfully
	// attached. If no Gateway listeners accept attachment from this Route, the
	// Route MUST be considered detached from the Gateway.
	//
	// Support: Core
	SectionName *string `pulumi:"sectionName"`
}

// GRPCRouteSpecParentRefsInput is an input type that accepts GRPCRouteSpecParentRefsArgs and GRPCRouteSpecParentRefsOutput values.
// You can construct a concrete instance of `GRPCRouteSpecParentRefsInput` via:
//
//	GRPCRouteSpecParentRefsArgs{...}
type GRPCRouteSpecParentRefsInput interface {
	pulumi.Input

	ToGRPCRouteSpecParentRefsOutput() GRPCRouteSpecParentRefsOutput
	ToGRPCRouteSpecParentRefsOutputWithContext(context.Context) GRPCRouteSpecParentRefsOutput
}

// ParentReference identifies an API object (usually a Gateway) that can be considered
// a parent of this resource (usually a route). There are two kinds of parent resources
// with "Core" support:
//
// * Gateway (Gateway conformance profile)
// * Service (Mesh conformance profile, ClusterIP Services only)
//
// This API may be extended in the future to support additional kinds of parent
// resources.
//
// The API object must be valid in the cluster; the Group and Kind must
// be registered in the cluster for this reference to be valid.
type GRPCRouteSpecParentRefsArgs struct {
	// Group is the group of the referent.
	// When unspecified, "gateway.networking.k8s.io" is inferred.
	// To set the core API group (such as for a "Service" kind referent),
	// Group must be explicitly set to "" (empty string).
	//
	// Support: Core
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind is kind of the referent.
	//
	// There are two kinds of parent resources with "Core" support:
	//
	// * Gateway (Gateway conformance profile)
	// * Service (Mesh conformance profile, ClusterIP Services only)
	//
	// Support for other resources is Implementation-Specific.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of the referent.
	//
	// Support: Core
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace is the namespace of the referent. When unspecified, this refers
	// to the local namespace of the Route.
	//
	// Note that there are specific rules for ParentRefs which cross namespace
	// boundaries. Cross-namespace references are only valid if they are explicitly
	// allowed by something in the namespace they are referring to. For example:
	// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
	// generic way to enable any other kind of cross-namespace reference.
	//
	// Support: Core
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Port is the network port this Route targets. It can be interpreted
	// differently based on the type of parent resource.
	//
	// When the parent resource is a Gateway, this targets all listeners
	// listening on the specified port that also support this kind of Route(and
	// select this Route). It's not recommended to set `Port` unless the
	// networking behaviors specified in a Route must apply to a specific port
	// as opposed to a listener(s) whose port(s) may be changed. When both Port
	// and SectionName are specified, the name and port of the selected listener
	// must match both specified values.
	//
	// Implementations MAY choose to support other parent resources.
	// Implementations supporting other types of parent resources MUST clearly
	// document how/if Port is interpreted.
	//
	// For the purpose of status, an attachment is considered successful as
	// long as the parent resource accepts it partially. For example, Gateway
	// listeners can restrict which Routes can attach to them by Route kind,
	// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
	// from the referencing Route, the Route MUST be considered successfully
	// attached. If no Gateway listeners accept attachment from this Route,
	// the Route MUST be considered detached from the Gateway.
	//
	// Support: Extended
	Port pulumi.IntPtrInput `pulumi:"port"`
	// SectionName is the name of a section within the target resource. In the
	// following resources, SectionName is interpreted as the following:
	//
	// * Gateway: Listener name. When both Port (experimental) and SectionName
	//   are specified, the name and port of the selected listener must match
	//   both specified values.
	// * Service: Port name. When both Port (experimental) and SectionName
	//   are specified, the name and port of the selected listener must match
	//   both specified values.
	//
	// Implementations MAY choose to support attaching Routes to other resources.
	// If that is the case, they MUST clearly document how SectionName is
	// interpreted.
	//
	// When unspecified (empty string), this will reference the entire resource.
	// For the purpose of status, an attachment is considered successful if at
	// least one section in the parent resource accepts it. For example, Gateway
	// listeners can restrict which Routes can attach to them by Route kind,
	// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
	// the referencing Route, the Route MUST be considered successfully
	// attached. If no Gateway listeners accept attachment from this Route, the
	// Route MUST be considered detached from the Gateway.
	//
	// Support: Core
	SectionName pulumi.StringPtrInput `pulumi:"sectionName"`
}

func (GRPCRouteSpecParentRefsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecParentRefs)(nil)).Elem()
}

func (i GRPCRouteSpecParentRefsArgs) ToGRPCRouteSpecParentRefsOutput() GRPCRouteSpecParentRefsOutput {
	return i.ToGRPCRouteSpecParentRefsOutputWithContext(context.Background())
}

func (i GRPCRouteSpecParentRefsArgs) ToGRPCRouteSpecParentRefsOutputWithContext(ctx context.Context) GRPCRouteSpecParentRefsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecParentRefsOutput)
}

// GRPCRouteSpecParentRefsArrayInput is an input type that accepts GRPCRouteSpecParentRefsArray and GRPCRouteSpecParentRefsArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecParentRefsArrayInput` via:
//
//	GRPCRouteSpecParentRefsArray{ GRPCRouteSpecParentRefsArgs{...} }
type GRPCRouteSpecParentRefsArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecParentRefsArrayOutput() GRPCRouteSpecParentRefsArrayOutput
	ToGRPCRouteSpecParentRefsArrayOutputWithContext(context.Context) GRPCRouteSpecParentRefsArrayOutput
}

type GRPCRouteSpecParentRefsArray []GRPCRouteSpecParentRefsInput

func (GRPCRouteSpecParentRefsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecParentRefs)(nil)).Elem()
}

func (i GRPCRouteSpecParentRefsArray) ToGRPCRouteSpecParentRefsArrayOutput() GRPCRouteSpecParentRefsArrayOutput {
	return i.ToGRPCRouteSpecParentRefsArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecParentRefsArray) ToGRPCRouteSpecParentRefsArrayOutputWithContext(ctx context.Context) GRPCRouteSpecParentRefsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecParentRefsArrayOutput)
}

// ParentReference identifies an API object (usually a Gateway) that can be considered
// a parent of this resource (usually a route). There are two kinds of parent resources
// with "Core" support:
//
// * Gateway (Gateway conformance profile)
// * Service (Mesh conformance profile, ClusterIP Services only)
//
// This API may be extended in the future to support additional kinds of parent
// resources.
//
// The API object must be valid in the cluster; the Group and Kind must
// be registered in the cluster for this reference to be valid.
type GRPCRouteSpecParentRefsOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecParentRefsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecParentRefs)(nil)).Elem()
}

func (o GRPCRouteSpecParentRefsOutput) ToGRPCRouteSpecParentRefsOutput() GRPCRouteSpecParentRefsOutput {
	return o
}

func (o GRPCRouteSpecParentRefsOutput) ToGRPCRouteSpecParentRefsOutputWithContext(ctx context.Context) GRPCRouteSpecParentRefsOutput {
	return o
}

// Group is the group of the referent.
// When unspecified, "gateway.networking.k8s.io" is inferred.
// To set the core API group (such as for a "Service" kind referent),
// Group must be explicitly set to "" (empty string).
//
// Support: Core
func (o GRPCRouteSpecParentRefsOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecParentRefs) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind is kind of the referent.
//
// There are two kinds of parent resources with "Core" support:
//
// * Gateway (Gateway conformance profile)
// * Service (Mesh conformance profile, ClusterIP Services only)
//
// Support for other resources is Implementation-Specific.
func (o GRPCRouteSpecParentRefsOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecParentRefs) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
//
// Support: Core
func (o GRPCRouteSpecParentRefsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecParentRefs) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the referent. When unspecified, this refers
// to the local namespace of the Route.
//
// Note that there are specific rules for ParentRefs which cross namespace
// boundaries. Cross-namespace references are only valid if they are explicitly
// allowed by something in the namespace they are referring to. For example:
// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
// generic way to enable any other kind of cross-namespace reference.
//
// Support: Core
func (o GRPCRouteSpecParentRefsOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecParentRefs) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Port is the network port this Route targets. It can be interpreted
// differently based on the type of parent resource.
//
// When the parent resource is a Gateway, this targets all listeners
// listening on the specified port that also support this kind of Route(and
// select this Route). It's not recommended to set `Port` unless the
// networking behaviors specified in a Route must apply to a specific port
// as opposed to a listener(s) whose port(s) may be changed. When both Port
// and SectionName are specified, the name and port of the selected listener
// must match both specified values.
//
// Implementations MAY choose to support other parent resources.
// Implementations supporting other types of parent resources MUST clearly
// document how/if Port is interpreted.
//
// For the purpose of status, an attachment is considered successful as
// long as the parent resource accepts it partially. For example, Gateway
// listeners can restrict which Routes can attach to them by Route kind,
// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
// from the referencing Route, the Route MUST be considered successfully
// attached. If no Gateway listeners accept attachment from this Route,
// the Route MUST be considered detached from the Gateway.
//
// Support: Extended
func (o GRPCRouteSpecParentRefsOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecParentRefs) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// SectionName is the name of a section within the target resource. In the
// following resources, SectionName is interpreted as the following:
//
//   - Gateway: Listener name. When both Port (experimental) and SectionName
//     are specified, the name and port of the selected listener must match
//     both specified values.
//   - Service: Port name. When both Port (experimental) and SectionName
//     are specified, the name and port of the selected listener must match
//     both specified values.
//
// Implementations MAY choose to support attaching Routes to other resources.
// If that is the case, they MUST clearly document how SectionName is
// interpreted.
//
// When unspecified (empty string), this will reference the entire resource.
// For the purpose of status, an attachment is considered successful if at
// least one section in the parent resource accepts it. For example, Gateway
// listeners can restrict which Routes can attach to them by Route kind,
// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
// the referencing Route, the Route MUST be considered successfully
// attached. If no Gateway listeners accept attachment from this Route, the
// Route MUST be considered detached from the Gateway.
//
// Support: Core
func (o GRPCRouteSpecParentRefsOutput) SectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecParentRefs) *string { return v.SectionName }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecParentRefsArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecParentRefsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecParentRefs)(nil)).Elem()
}

func (o GRPCRouteSpecParentRefsArrayOutput) ToGRPCRouteSpecParentRefsArrayOutput() GRPCRouteSpecParentRefsArrayOutput {
	return o
}

func (o GRPCRouteSpecParentRefsArrayOutput) ToGRPCRouteSpecParentRefsArrayOutputWithContext(ctx context.Context) GRPCRouteSpecParentRefsArrayOutput {
	return o
}

func (o GRPCRouteSpecParentRefsArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecParentRefsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecParentRefs {
		return vs[0].([]GRPCRouteSpecParentRefs)[vs[1].(int)]
	}).(GRPCRouteSpecParentRefsOutput)
}

// ParentReference identifies an API object (usually a Gateway) that can be considered
// a parent of this resource (usually a route). There are two kinds of parent resources
// with "Core" support:
//
// * Gateway (Gateway conformance profile)
// * Service (Mesh conformance profile, ClusterIP Services only)
//
// This API may be extended in the future to support additional kinds of parent
// resources.
//
// The API object must be valid in the cluster; the Group and Kind must
// be registered in the cluster for this reference to be valid.
type GRPCRouteSpecParentRefsPatch struct {
	// Group is the group of the referent.
	// When unspecified, "gateway.networking.k8s.io" is inferred.
	// To set the core API group (such as for a "Service" kind referent),
	// Group must be explicitly set to "" (empty string).
	//
	// Support: Core
	Group *string `pulumi:"group"`
	// Kind is kind of the referent.
	//
	// There are two kinds of parent resources with "Core" support:
	//
	// * Gateway (Gateway conformance profile)
	// * Service (Mesh conformance profile, ClusterIP Services only)
	//
	// Support for other resources is Implementation-Specific.
	Kind *string `pulumi:"kind"`
	// Name is the name of the referent.
	//
	// Support: Core
	Name *string `pulumi:"name"`
	// Namespace is the namespace of the referent. When unspecified, this refers
	// to the local namespace of the Route.
	//
	// Note that there are specific rules for ParentRefs which cross namespace
	// boundaries. Cross-namespace references are only valid if they are explicitly
	// allowed by something in the namespace they are referring to. For example:
	// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
	// generic way to enable any other kind of cross-namespace reference.
	//
	// Support: Core
	Namespace *string `pulumi:"namespace"`
	// Port is the network port this Route targets. It can be interpreted
	// differently based on the type of parent resource.
	//
	// When the parent resource is a Gateway, this targets all listeners
	// listening on the specified port that also support this kind of Route(and
	// select this Route). It's not recommended to set `Port` unless the
	// networking behaviors specified in a Route must apply to a specific port
	// as opposed to a listener(s) whose port(s) may be changed. When both Port
	// and SectionName are specified, the name and port of the selected listener
	// must match both specified values.
	//
	// Implementations MAY choose to support other parent resources.
	// Implementations supporting other types of parent resources MUST clearly
	// document how/if Port is interpreted.
	//
	// For the purpose of status, an attachment is considered successful as
	// long as the parent resource accepts it partially. For example, Gateway
	// listeners can restrict which Routes can attach to them by Route kind,
	// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
	// from the referencing Route, the Route MUST be considered successfully
	// attached. If no Gateway listeners accept attachment from this Route,
	// the Route MUST be considered detached from the Gateway.
	//
	// Support: Extended
	Port *int `pulumi:"port"`
	// SectionName is the name of a section within the target resource. In the
	// following resources, SectionName is interpreted as the following:
	//
	// * Gateway: Listener name. When both Port (experimental) and SectionName
	//   are specified, the name and port of the selected listener must match
	//   both specified values.
	// * Service: Port name. When both Port (experimental) and SectionName
	//   are specified, the name and port of the selected listener must match
	//   both specified values.
	//
	// Implementations MAY choose to support attaching Routes to other resources.
	// If that is the case, they MUST clearly document how SectionName is
	// interpreted.
	//
	// When unspecified (empty string), this will reference the entire resource.
	// For the purpose of status, an attachment is considered successful if at
	// least one section in the parent resource accepts it. For example, Gateway
	// listeners can restrict which Routes can attach to them by Route kind,
	// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
	// the referencing Route, the Route MUST be considered successfully
	// attached. If no Gateway listeners accept attachment from this Route, the
	// Route MUST be considered detached from the Gateway.
	//
	// Support: Core
	SectionName *string `pulumi:"sectionName"`
}

// GRPCRouteSpecParentRefsPatchInput is an input type that accepts GRPCRouteSpecParentRefsPatchArgs and GRPCRouteSpecParentRefsPatchOutput values.
// You can construct a concrete instance of `GRPCRouteSpecParentRefsPatchInput` via:
//
//	GRPCRouteSpecParentRefsPatchArgs{...}
type GRPCRouteSpecParentRefsPatchInput interface {
	pulumi.Input

	ToGRPCRouteSpecParentRefsPatchOutput() GRPCRouteSpecParentRefsPatchOutput
	ToGRPCRouteSpecParentRefsPatchOutputWithContext(context.Context) GRPCRouteSpecParentRefsPatchOutput
}

// ParentReference identifies an API object (usually a Gateway) that can be considered
// a parent of this resource (usually a route). There are two kinds of parent resources
// with "Core" support:
//
// * Gateway (Gateway conformance profile)
// * Service (Mesh conformance profile, ClusterIP Services only)
//
// This API may be extended in the future to support additional kinds of parent
// resources.
//
// The API object must be valid in the cluster; the Group and Kind must
// be registered in the cluster for this reference to be valid.
type GRPCRouteSpecParentRefsPatchArgs struct {
	// Group is the group of the referent.
	// When unspecified, "gateway.networking.k8s.io" is inferred.
	// To set the core API group (such as for a "Service" kind referent),
	// Group must be explicitly set to "" (empty string).
	//
	// Support: Core
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind is kind of the referent.
	//
	// There are two kinds of parent resources with "Core" support:
	//
	// * Gateway (Gateway conformance profile)
	// * Service (Mesh conformance profile, ClusterIP Services only)
	//
	// Support for other resources is Implementation-Specific.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of the referent.
	//
	// Support: Core
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace is the namespace of the referent. When unspecified, this refers
	// to the local namespace of the Route.
	//
	// Note that there are specific rules for ParentRefs which cross namespace
	// boundaries. Cross-namespace references are only valid if they are explicitly
	// allowed by something in the namespace they are referring to. For example:
	// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
	// generic way to enable any other kind of cross-namespace reference.
	//
	// Support: Core
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Port is the network port this Route targets. It can be interpreted
	// differently based on the type of parent resource.
	//
	// When the parent resource is a Gateway, this targets all listeners
	// listening on the specified port that also support this kind of Route(and
	// select this Route). It's not recommended to set `Port` unless the
	// networking behaviors specified in a Route must apply to a specific port
	// as opposed to a listener(s) whose port(s) may be changed. When both Port
	// and SectionName are specified, the name and port of the selected listener
	// must match both specified values.
	//
	// Implementations MAY choose to support other parent resources.
	// Implementations supporting other types of parent resources MUST clearly
	// document how/if Port is interpreted.
	//
	// For the purpose of status, an attachment is considered successful as
	// long as the parent resource accepts it partially. For example, Gateway
	// listeners can restrict which Routes can attach to them by Route kind,
	// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
	// from the referencing Route, the Route MUST be considered successfully
	// attached. If no Gateway listeners accept attachment from this Route,
	// the Route MUST be considered detached from the Gateway.
	//
	// Support: Extended
	Port pulumi.IntPtrInput `pulumi:"port"`
	// SectionName is the name of a section within the target resource. In the
	// following resources, SectionName is interpreted as the following:
	//
	// * Gateway: Listener name. When both Port (experimental) and SectionName
	//   are specified, the name and port of the selected listener must match
	//   both specified values.
	// * Service: Port name. When both Port (experimental) and SectionName
	//   are specified, the name and port of the selected listener must match
	//   both specified values.
	//
	// Implementations MAY choose to support attaching Routes to other resources.
	// If that is the case, they MUST clearly document how SectionName is
	// interpreted.
	//
	// When unspecified (empty string), this will reference the entire resource.
	// For the purpose of status, an attachment is considered successful if at
	// least one section in the parent resource accepts it. For example, Gateway
	// listeners can restrict which Routes can attach to them by Route kind,
	// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
	// the referencing Route, the Route MUST be considered successfully
	// attached. If no Gateway listeners accept attachment from this Route, the
	// Route MUST be considered detached from the Gateway.
	//
	// Support: Core
	SectionName pulumi.StringPtrInput `pulumi:"sectionName"`
}

func (GRPCRouteSpecParentRefsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecParentRefsPatch)(nil)).Elem()
}

func (i GRPCRouteSpecParentRefsPatchArgs) ToGRPCRouteSpecParentRefsPatchOutput() GRPCRouteSpecParentRefsPatchOutput {
	return i.ToGRPCRouteSpecParentRefsPatchOutputWithContext(context.Background())
}

func (i GRPCRouteSpecParentRefsPatchArgs) ToGRPCRouteSpecParentRefsPatchOutputWithContext(ctx context.Context) GRPCRouteSpecParentRefsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecParentRefsPatchOutput)
}

// GRPCRouteSpecParentRefsPatchArrayInput is an input type that accepts GRPCRouteSpecParentRefsPatchArray and GRPCRouteSpecParentRefsPatchArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecParentRefsPatchArrayInput` via:
//
//	GRPCRouteSpecParentRefsPatchArray{ GRPCRouteSpecParentRefsPatchArgs{...} }
type GRPCRouteSpecParentRefsPatchArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecParentRefsPatchArrayOutput() GRPCRouteSpecParentRefsPatchArrayOutput
	ToGRPCRouteSpecParentRefsPatchArrayOutputWithContext(context.Context) GRPCRouteSpecParentRefsPatchArrayOutput
}

type GRPCRouteSpecParentRefsPatchArray []GRPCRouteSpecParentRefsPatchInput

func (GRPCRouteSpecParentRefsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecParentRefsPatch)(nil)).Elem()
}

func (i GRPCRouteSpecParentRefsPatchArray) ToGRPCRouteSpecParentRefsPatchArrayOutput() GRPCRouteSpecParentRefsPatchArrayOutput {
	return i.ToGRPCRouteSpecParentRefsPatchArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecParentRefsPatchArray) ToGRPCRouteSpecParentRefsPatchArrayOutputWithContext(ctx context.Context) GRPCRouteSpecParentRefsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecParentRefsPatchArrayOutput)
}

// ParentReference identifies an API object (usually a Gateway) that can be considered
// a parent of this resource (usually a route). There are two kinds of parent resources
// with "Core" support:
//
// * Gateway (Gateway conformance profile)
// * Service (Mesh conformance profile, ClusterIP Services only)
//
// This API may be extended in the future to support additional kinds of parent
// resources.
//
// The API object must be valid in the cluster; the Group and Kind must
// be registered in the cluster for this reference to be valid.
type GRPCRouteSpecParentRefsPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecParentRefsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecParentRefsPatch)(nil)).Elem()
}

func (o GRPCRouteSpecParentRefsPatchOutput) ToGRPCRouteSpecParentRefsPatchOutput() GRPCRouteSpecParentRefsPatchOutput {
	return o
}

func (o GRPCRouteSpecParentRefsPatchOutput) ToGRPCRouteSpecParentRefsPatchOutputWithContext(ctx context.Context) GRPCRouteSpecParentRefsPatchOutput {
	return o
}

// Group is the group of the referent.
// When unspecified, "gateway.networking.k8s.io" is inferred.
// To set the core API group (such as for a "Service" kind referent),
// Group must be explicitly set to "" (empty string).
//
// Support: Core
func (o GRPCRouteSpecParentRefsPatchOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecParentRefsPatch) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind is kind of the referent.
//
// There are two kinds of parent resources with "Core" support:
//
// * Gateway (Gateway conformance profile)
// * Service (Mesh conformance profile, ClusterIP Services only)
//
// Support for other resources is Implementation-Specific.
func (o GRPCRouteSpecParentRefsPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecParentRefsPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
//
// Support: Core
func (o GRPCRouteSpecParentRefsPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecParentRefsPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the referent. When unspecified, this refers
// to the local namespace of the Route.
//
// Note that there are specific rules for ParentRefs which cross namespace
// boundaries. Cross-namespace references are only valid if they are explicitly
// allowed by something in the namespace they are referring to. For example:
// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
// generic way to enable any other kind of cross-namespace reference.
//
// Support: Core
func (o GRPCRouteSpecParentRefsPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecParentRefsPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Port is the network port this Route targets. It can be interpreted
// differently based on the type of parent resource.
//
// When the parent resource is a Gateway, this targets all listeners
// listening on the specified port that also support this kind of Route(and
// select this Route). It's not recommended to set `Port` unless the
// networking behaviors specified in a Route must apply to a specific port
// as opposed to a listener(s) whose port(s) may be changed. When both Port
// and SectionName are specified, the name and port of the selected listener
// must match both specified values.
//
// Implementations MAY choose to support other parent resources.
// Implementations supporting other types of parent resources MUST clearly
// document how/if Port is interpreted.
//
// For the purpose of status, an attachment is considered successful as
// long as the parent resource accepts it partially. For example, Gateway
// listeners can restrict which Routes can attach to them by Route kind,
// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
// from the referencing Route, the Route MUST be considered successfully
// attached. If no Gateway listeners accept attachment from this Route,
// the Route MUST be considered detached from the Gateway.
//
// Support: Extended
func (o GRPCRouteSpecParentRefsPatchOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecParentRefsPatch) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// SectionName is the name of a section within the target resource. In the
// following resources, SectionName is interpreted as the following:
//
//   - Gateway: Listener name. When both Port (experimental) and SectionName
//     are specified, the name and port of the selected listener must match
//     both specified values.
//   - Service: Port name. When both Port (experimental) and SectionName
//     are specified, the name and port of the selected listener must match
//     both specified values.
//
// Implementations MAY choose to support attaching Routes to other resources.
// If that is the case, they MUST clearly document how SectionName is
// interpreted.
//
// When unspecified (empty string), this will reference the entire resource.
// For the purpose of status, an attachment is considered successful if at
// least one section in the parent resource accepts it. For example, Gateway
// listeners can restrict which Routes can attach to them by Route kind,
// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
// the referencing Route, the Route MUST be considered successfully
// attached. If no Gateway listeners accept attachment from this Route, the
// Route MUST be considered detached from the Gateway.
//
// Support: Core
func (o GRPCRouteSpecParentRefsPatchOutput) SectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecParentRefsPatch) *string { return v.SectionName }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecParentRefsPatchArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecParentRefsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecParentRefsPatch)(nil)).Elem()
}

func (o GRPCRouteSpecParentRefsPatchArrayOutput) ToGRPCRouteSpecParentRefsPatchArrayOutput() GRPCRouteSpecParentRefsPatchArrayOutput {
	return o
}

func (o GRPCRouteSpecParentRefsPatchArrayOutput) ToGRPCRouteSpecParentRefsPatchArrayOutputWithContext(ctx context.Context) GRPCRouteSpecParentRefsPatchArrayOutput {
	return o
}

func (o GRPCRouteSpecParentRefsPatchArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecParentRefsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecParentRefsPatch {
		return vs[0].([]GRPCRouteSpecParentRefsPatch)[vs[1].(int)]
	}).(GRPCRouteSpecParentRefsPatchOutput)
}

// Spec defines the desired state of GRPCRoute.
type GRPCRouteSpecPatch struct {
	// Hostnames defines a set of hostnames to match against the GRPC
	// Host header to select a GRPCRoute to process the request. This matches
	// the RFC 1123 definition of a hostname with 2 notable exceptions:
	//
	// 1. IPs are not allowed.
	// 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
	//    label MUST appear by itself as the first label.
	//
	// If a hostname is specified by both the Listener and GRPCRoute, there
	// MUST be at least one intersecting hostname for the GRPCRoute to be
	// attached to the Listener. For example:
	//
	// * A Listener with `test.example.com` as the hostname matches GRPCRoutes
	//   that have either not specified any hostnames, or have specified at
	//   least one of `test.example.com` or `*.example.com`.
	// * A Listener with `*.example.com` as the hostname matches GRPCRoutes
	//   that have either not specified any hostnames or have specified at least
	//   one hostname that matches the Listener hostname. For example,
	//   `test.example.com` and `*.example.com` would both match. On the other
	//   hand, `example.com` and `test.example.net` would not match.
	//
	// Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
	// as a suffix match. That means that a match for `*.example.com` would match
	// both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
	//
	// If both the Listener and GRPCRoute have specified hostnames, any
	// GRPCRoute hostnames that do not match the Listener hostname MUST be
	// ignored. For example, if a Listener specified `*.example.com`, and the
	// GRPCRoute specified `test.example.com` and `test.example.net`,
	// `test.example.net` MUST NOT be considered for a match.
	//
	// If both the Listener and GRPCRoute have specified hostnames, and none
	// match with the criteria above, then the GRPCRoute MUST NOT be accepted by
	// the implementation. The implementation MUST raise an 'Accepted' Condition
	// with a status of `False` in the corresponding RouteParentStatus.
	//
	// If a Route (A) of type HTTPRoute or GRPCRoute is attached to a
	// Listener and that listener already has another Route (B) of the other
	// type attached and the intersection of the hostnames of A and B is
	// non-empty, then the implementation MUST accept exactly one of these two
	// routes, determined by the following criteria, in order:
	//
	// * The oldest Route based on creation timestamp.
	// * The Route appearing first in alphabetical order by
	//   "{namespace}/{name}".
	//
	// The rejected Route MUST raise an 'Accepted' condition with a status of
	// 'False' in the corresponding RouteParentStatus.
	//
	// Support: Core
	Hostnames []string `pulumi:"hostnames"`
	// ParentRefs references the resources (usually Gateways) that a Route wants
	// to be attached to. Note that the referenced parent resource needs to
	// allow this for the attachment to be complete. For Gateways, that means
	// the Gateway needs to allow attachment from Routes of this kind and
	// namespace. For Services, that means the Service must either be in the same
	// namespace for a "producer" route, or the mesh implementation must support
	// and allow "consumer" routes for the referenced Service. ReferenceGrant is
	// not applicable for governing ParentRefs to Services - it is not possible to
	// create a "producer" route for a Service in a different namespace from the
	// Route.
	//
	// There are two kinds of parent resources with "Core" support:
	//
	// * Gateway (Gateway conformance profile)
	// * Service (Mesh conformance profile, ClusterIP Services only)
	//
	// This API may be extended in the future to support additional kinds of parent
	// resources.
	//
	// ParentRefs must be _distinct_. This means either that:
	//
	// * They select different objects.  If this is the case, then parentRef
	//   entries are distinct. In terms of fields, this means that the
	//   multi-part key defined by `group`, `kind`, `namespace`, and `name` must
	//   be unique across all parentRef entries in the Route.
	// * They do not select different objects, but for each optional field used,
	//   each ParentRef that selects the same object must set the same set of
	//   optional fields to different values. If one ParentRef sets a
	//   combination of optional fields, all must set the same combination.
	//
	// Some examples:
	//
	// * If one ParentRef sets `sectionName`, all ParentRefs referencing the
	//   same object must also set `sectionName`.
	// * If one ParentRef sets `port`, all ParentRefs referencing the same
	//   object must also set `port`.
	// * If one ParentRef sets `sectionName` and `port`, all ParentRefs
	//   referencing the same object must also set `sectionName` and `port`.
	//
	// It is possible to separately reference multiple distinct objects that may
	// be collapsed by an implementation. For example, some implementations may
	// choose to merge compatible Gateway Listeners together. If that is the
	// case, the list of routes attached to those resources should also be
	// merged.
	//
	// Note that for ParentRefs that cross namespace boundaries, there are specific
	// rules. Cross-namespace references are only valid if they are explicitly
	// allowed by something in the namespace they are referring to. For example,
	// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
	// generic way to enable other kinds of cross-namespace reference.
	ParentRefs []GRPCRouteSpecParentRefsPatch `pulumi:"parentRefs"`
	// Rules are a list of GRPC matchers, filters and actions.
	Rules []GRPCRouteSpecRulesPatch `pulumi:"rules"`
}

// GRPCRouteSpecPatchInput is an input type that accepts GRPCRouteSpecPatchArgs and GRPCRouteSpecPatchOutput values.
// You can construct a concrete instance of `GRPCRouteSpecPatchInput` via:
//
//	GRPCRouteSpecPatchArgs{...}
type GRPCRouteSpecPatchInput interface {
	pulumi.Input

	ToGRPCRouteSpecPatchOutput() GRPCRouteSpecPatchOutput
	ToGRPCRouteSpecPatchOutputWithContext(context.Context) GRPCRouteSpecPatchOutput
}

// Spec defines the desired state of GRPCRoute.
type GRPCRouteSpecPatchArgs struct {
	// Hostnames defines a set of hostnames to match against the GRPC
	// Host header to select a GRPCRoute to process the request. This matches
	// the RFC 1123 definition of a hostname with 2 notable exceptions:
	//
	// 1. IPs are not allowed.
	// 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
	//    label MUST appear by itself as the first label.
	//
	// If a hostname is specified by both the Listener and GRPCRoute, there
	// MUST be at least one intersecting hostname for the GRPCRoute to be
	// attached to the Listener. For example:
	//
	// * A Listener with `test.example.com` as the hostname matches GRPCRoutes
	//   that have either not specified any hostnames, or have specified at
	//   least one of `test.example.com` or `*.example.com`.
	// * A Listener with `*.example.com` as the hostname matches GRPCRoutes
	//   that have either not specified any hostnames or have specified at least
	//   one hostname that matches the Listener hostname. For example,
	//   `test.example.com` and `*.example.com` would both match. On the other
	//   hand, `example.com` and `test.example.net` would not match.
	//
	// Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
	// as a suffix match. That means that a match for `*.example.com` would match
	// both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
	//
	// If both the Listener and GRPCRoute have specified hostnames, any
	// GRPCRoute hostnames that do not match the Listener hostname MUST be
	// ignored. For example, if a Listener specified `*.example.com`, and the
	// GRPCRoute specified `test.example.com` and `test.example.net`,
	// `test.example.net` MUST NOT be considered for a match.
	//
	// If both the Listener and GRPCRoute have specified hostnames, and none
	// match with the criteria above, then the GRPCRoute MUST NOT be accepted by
	// the implementation. The implementation MUST raise an 'Accepted' Condition
	// with a status of `False` in the corresponding RouteParentStatus.
	//
	// If a Route (A) of type HTTPRoute or GRPCRoute is attached to a
	// Listener and that listener already has another Route (B) of the other
	// type attached and the intersection of the hostnames of A and B is
	// non-empty, then the implementation MUST accept exactly one of these two
	// routes, determined by the following criteria, in order:
	//
	// * The oldest Route based on creation timestamp.
	// * The Route appearing first in alphabetical order by
	//   "{namespace}/{name}".
	//
	// The rejected Route MUST raise an 'Accepted' condition with a status of
	// 'False' in the corresponding RouteParentStatus.
	//
	// Support: Core
	Hostnames pulumi.StringArrayInput `pulumi:"hostnames"`
	// ParentRefs references the resources (usually Gateways) that a Route wants
	// to be attached to. Note that the referenced parent resource needs to
	// allow this for the attachment to be complete. For Gateways, that means
	// the Gateway needs to allow attachment from Routes of this kind and
	// namespace. For Services, that means the Service must either be in the same
	// namespace for a "producer" route, or the mesh implementation must support
	// and allow "consumer" routes for the referenced Service. ReferenceGrant is
	// not applicable for governing ParentRefs to Services - it is not possible to
	// create a "producer" route for a Service in a different namespace from the
	// Route.
	//
	// There are two kinds of parent resources with "Core" support:
	//
	// * Gateway (Gateway conformance profile)
	// * Service (Mesh conformance profile, ClusterIP Services only)
	//
	// This API may be extended in the future to support additional kinds of parent
	// resources.
	//
	// ParentRefs must be _distinct_. This means either that:
	//
	// * They select different objects.  If this is the case, then parentRef
	//   entries are distinct. In terms of fields, this means that the
	//   multi-part key defined by `group`, `kind`, `namespace`, and `name` must
	//   be unique across all parentRef entries in the Route.
	// * They do not select different objects, but for each optional field used,
	//   each ParentRef that selects the same object must set the same set of
	//   optional fields to different values. If one ParentRef sets a
	//   combination of optional fields, all must set the same combination.
	//
	// Some examples:
	//
	// * If one ParentRef sets `sectionName`, all ParentRefs referencing the
	//   same object must also set `sectionName`.
	// * If one ParentRef sets `port`, all ParentRefs referencing the same
	//   object must also set `port`.
	// * If one ParentRef sets `sectionName` and `port`, all ParentRefs
	//   referencing the same object must also set `sectionName` and `port`.
	//
	// It is possible to separately reference multiple distinct objects that may
	// be collapsed by an implementation. For example, some implementations may
	// choose to merge compatible Gateway Listeners together. If that is the
	// case, the list of routes attached to those resources should also be
	// merged.
	//
	// Note that for ParentRefs that cross namespace boundaries, there are specific
	// rules. Cross-namespace references are only valid if they are explicitly
	// allowed by something in the namespace they are referring to. For example,
	// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
	// generic way to enable other kinds of cross-namespace reference.
	ParentRefs GRPCRouteSpecParentRefsPatchArrayInput `pulumi:"parentRefs"`
	// Rules are a list of GRPC matchers, filters and actions.
	Rules GRPCRouteSpecRulesPatchArrayInput `pulumi:"rules"`
}

func (GRPCRouteSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecPatch)(nil)).Elem()
}

func (i GRPCRouteSpecPatchArgs) ToGRPCRouteSpecPatchOutput() GRPCRouteSpecPatchOutput {
	return i.ToGRPCRouteSpecPatchOutputWithContext(context.Background())
}

func (i GRPCRouteSpecPatchArgs) ToGRPCRouteSpecPatchOutputWithContext(ctx context.Context) GRPCRouteSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecPatchOutput)
}

func (i GRPCRouteSpecPatchArgs) ToGRPCRouteSpecPatchPtrOutput() GRPCRouteSpecPatchPtrOutput {
	return i.ToGRPCRouteSpecPatchPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecPatchArgs) ToGRPCRouteSpecPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecPatchOutput).ToGRPCRouteSpecPatchPtrOutputWithContext(ctx)
}

// GRPCRouteSpecPatchPtrInput is an input type that accepts GRPCRouteSpecPatchArgs, GRPCRouteSpecPatchPtr and GRPCRouteSpecPatchPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecPatchPtrInput` via:
//
//	        GRPCRouteSpecPatchArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecPatchPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecPatchPtrOutput() GRPCRouteSpecPatchPtrOutput
	ToGRPCRouteSpecPatchPtrOutputWithContext(context.Context) GRPCRouteSpecPatchPtrOutput
}

type grpcrouteSpecPatchPtrType GRPCRouteSpecPatchArgs

func GRPCRouteSpecPatchPtr(v *GRPCRouteSpecPatchArgs) GRPCRouteSpecPatchPtrInput {
	return (*grpcrouteSpecPatchPtrType)(v)
}

func (*grpcrouteSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecPatch)(nil)).Elem()
}

func (i *grpcrouteSpecPatchPtrType) ToGRPCRouteSpecPatchPtrOutput() GRPCRouteSpecPatchPtrOutput {
	return i.ToGRPCRouteSpecPatchPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecPatchPtrType) ToGRPCRouteSpecPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecPatchPtrOutput)
}

// Spec defines the desired state of GRPCRoute.
type GRPCRouteSpecPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecPatch)(nil)).Elem()
}

func (o GRPCRouteSpecPatchOutput) ToGRPCRouteSpecPatchOutput() GRPCRouteSpecPatchOutput {
	return o
}

func (o GRPCRouteSpecPatchOutput) ToGRPCRouteSpecPatchOutputWithContext(ctx context.Context) GRPCRouteSpecPatchOutput {
	return o
}

func (o GRPCRouteSpecPatchOutput) ToGRPCRouteSpecPatchPtrOutput() GRPCRouteSpecPatchPtrOutput {
	return o.ToGRPCRouteSpecPatchPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecPatchOutput) ToGRPCRouteSpecPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecPatch) *GRPCRouteSpecPatch {
		return &v
	}).(GRPCRouteSpecPatchPtrOutput)
}

// Hostnames defines a set of hostnames to match against the GRPC
// Host header to select a GRPCRoute to process the request. This matches
// the RFC 1123 definition of a hostname with 2 notable exceptions:
//
//  1. IPs are not allowed.
//  2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
//     label MUST appear by itself as the first label.
//
// If a hostname is specified by both the Listener and GRPCRoute, there
// MUST be at least one intersecting hostname for the GRPCRoute to be
// attached to the Listener. For example:
//
//   - A Listener with `test.example.com` as the hostname matches GRPCRoutes
//     that have either not specified any hostnames, or have specified at
//     least one of `test.example.com` or `*.example.com`.
//   - A Listener with `*.example.com` as the hostname matches GRPCRoutes
//     that have either not specified any hostnames or have specified at least
//     one hostname that matches the Listener hostname. For example,
//     `test.example.com` and `*.example.com` would both match. On the other
//     hand, `example.com` and `test.example.net` would not match.
//
// Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
// as a suffix match. That means that a match for `*.example.com` would match
// both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
//
// If both the Listener and GRPCRoute have specified hostnames, any
// GRPCRoute hostnames that do not match the Listener hostname MUST be
// ignored. For example, if a Listener specified `*.example.com`, and the
// GRPCRoute specified `test.example.com` and `test.example.net`,
// `test.example.net` MUST NOT be considered for a match.
//
// If both the Listener and GRPCRoute have specified hostnames, and none
// match with the criteria above, then the GRPCRoute MUST NOT be accepted by
// the implementation. The implementation MUST raise an 'Accepted' Condition
// with a status of `False` in the corresponding RouteParentStatus.
//
// If a Route (A) of type HTTPRoute or GRPCRoute is attached to a
// Listener and that listener already has another Route (B) of the other
// type attached and the intersection of the hostnames of A and B is
// non-empty, then the implementation MUST accept exactly one of these two
// routes, determined by the following criteria, in order:
//
//   - The oldest Route based on creation timestamp.
//   - The Route appearing first in alphabetical order by
//     "{namespace}/{name}".
//
// The rejected Route MUST raise an 'Accepted' condition with a status of
// 'False' in the corresponding RouteParentStatus.
//
// Support: Core
func (o GRPCRouteSpecPatchOutput) Hostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecPatch) []string { return v.Hostnames }).(pulumi.StringArrayOutput)
}

// ParentRefs references the resources (usually Gateways) that a Route wants
// to be attached to. Note that the referenced parent resource needs to
// allow this for the attachment to be complete. For Gateways, that means
// the Gateway needs to allow attachment from Routes of this kind and
// namespace. For Services, that means the Service must either be in the same
// namespace for a "producer" route, or the mesh implementation must support
// and allow "consumer" routes for the referenced Service. ReferenceGrant is
// not applicable for governing ParentRefs to Services - it is not possible to
// create a "producer" route for a Service in a different namespace from the
// Route.
//
// There are two kinds of parent resources with "Core" support:
//
// * Gateway (Gateway conformance profile)
// * Service (Mesh conformance profile, ClusterIP Services only)
//
// This API may be extended in the future to support additional kinds of parent
// resources.
//
// ParentRefs must be _distinct_. This means either that:
//
//   - They select different objects.  If this is the case, then parentRef
//     entries are distinct. In terms of fields, this means that the
//     multi-part key defined by `group`, `kind`, `namespace`, and `name` must
//     be unique across all parentRef entries in the Route.
//   - They do not select different objects, but for each optional field used,
//     each ParentRef that selects the same object must set the same set of
//     optional fields to different values. If one ParentRef sets a
//     combination of optional fields, all must set the same combination.
//
// Some examples:
//
//   - If one ParentRef sets `sectionName`, all ParentRefs referencing the
//     same object must also set `sectionName`.
//   - If one ParentRef sets `port`, all ParentRefs referencing the same
//     object must also set `port`.
//   - If one ParentRef sets `sectionName` and `port`, all ParentRefs
//     referencing the same object must also set `sectionName` and `port`.
//
// It is possible to separately reference multiple distinct objects that may
// be collapsed by an implementation. For example, some implementations may
// choose to merge compatible Gateway Listeners together. If that is the
// case, the list of routes attached to those resources should also be
// merged.
//
// Note that for ParentRefs that cross namespace boundaries, there are specific
// rules. Cross-namespace references are only valid if they are explicitly
// allowed by something in the namespace they are referring to. For example,
// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
// generic way to enable other kinds of cross-namespace reference.
func (o GRPCRouteSpecPatchOutput) ParentRefs() GRPCRouteSpecParentRefsPatchArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecPatch) []GRPCRouteSpecParentRefsPatch { return v.ParentRefs }).(GRPCRouteSpecParentRefsPatchArrayOutput)
}

// Rules are a list of GRPC matchers, filters and actions.
func (o GRPCRouteSpecPatchOutput) Rules() GRPCRouteSpecRulesPatchArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecPatch) []GRPCRouteSpecRulesPatch { return v.Rules }).(GRPCRouteSpecRulesPatchArrayOutput)
}

type GRPCRouteSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecPatch)(nil)).Elem()
}

func (o GRPCRouteSpecPatchPtrOutput) ToGRPCRouteSpecPatchPtrOutput() GRPCRouteSpecPatchPtrOutput {
	return o
}

func (o GRPCRouteSpecPatchPtrOutput) ToGRPCRouteSpecPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecPatchPtrOutput {
	return o
}

func (o GRPCRouteSpecPatchPtrOutput) Elem() GRPCRouteSpecPatchOutput {
	return o.ApplyT(func(v *GRPCRouteSpecPatch) GRPCRouteSpecPatch {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecPatch
		return ret
	}).(GRPCRouteSpecPatchOutput)
}

// Hostnames defines a set of hostnames to match against the GRPC
// Host header to select a GRPCRoute to process the request. This matches
// the RFC 1123 definition of a hostname with 2 notable exceptions:
//
//  1. IPs are not allowed.
//  2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
//     label MUST appear by itself as the first label.
//
// If a hostname is specified by both the Listener and GRPCRoute, there
// MUST be at least one intersecting hostname for the GRPCRoute to be
// attached to the Listener. For example:
//
//   - A Listener with `test.example.com` as the hostname matches GRPCRoutes
//     that have either not specified any hostnames, or have specified at
//     least one of `test.example.com` or `*.example.com`.
//   - A Listener with `*.example.com` as the hostname matches GRPCRoutes
//     that have either not specified any hostnames or have specified at least
//     one hostname that matches the Listener hostname. For example,
//     `test.example.com` and `*.example.com` would both match. On the other
//     hand, `example.com` and `test.example.net` would not match.
//
// Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
// as a suffix match. That means that a match for `*.example.com` would match
// both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
//
// If both the Listener and GRPCRoute have specified hostnames, any
// GRPCRoute hostnames that do not match the Listener hostname MUST be
// ignored. For example, if a Listener specified `*.example.com`, and the
// GRPCRoute specified `test.example.com` and `test.example.net`,
// `test.example.net` MUST NOT be considered for a match.
//
// If both the Listener and GRPCRoute have specified hostnames, and none
// match with the criteria above, then the GRPCRoute MUST NOT be accepted by
// the implementation. The implementation MUST raise an 'Accepted' Condition
// with a status of `False` in the corresponding RouteParentStatus.
//
// If a Route (A) of type HTTPRoute or GRPCRoute is attached to a
// Listener and that listener already has another Route (B) of the other
// type attached and the intersection of the hostnames of A and B is
// non-empty, then the implementation MUST accept exactly one of these two
// routes, determined by the following criteria, in order:
//
//   - The oldest Route based on creation timestamp.
//   - The Route appearing first in alphabetical order by
//     "{namespace}/{name}".
//
// The rejected Route MUST raise an 'Accepted' condition with a status of
// 'False' in the corresponding RouteParentStatus.
//
// Support: Core
func (o GRPCRouteSpecPatchPtrOutput) Hostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.Hostnames
	}).(pulumi.StringArrayOutput)
}

// ParentRefs references the resources (usually Gateways) that a Route wants
// to be attached to. Note that the referenced parent resource needs to
// allow this for the attachment to be complete. For Gateways, that means
// the Gateway needs to allow attachment from Routes of this kind and
// namespace. For Services, that means the Service must either be in the same
// namespace for a "producer" route, or the mesh implementation must support
// and allow "consumer" routes for the referenced Service. ReferenceGrant is
// not applicable for governing ParentRefs to Services - it is not possible to
// create a "producer" route for a Service in a different namespace from the
// Route.
//
// There are two kinds of parent resources with "Core" support:
//
// * Gateway (Gateway conformance profile)
// * Service (Mesh conformance profile, ClusterIP Services only)
//
// This API may be extended in the future to support additional kinds of parent
// resources.
//
// ParentRefs must be _distinct_. This means either that:
//
//   - They select different objects.  If this is the case, then parentRef
//     entries are distinct. In terms of fields, this means that the
//     multi-part key defined by `group`, `kind`, `namespace`, and `name` must
//     be unique across all parentRef entries in the Route.
//   - They do not select different objects, but for each optional field used,
//     each ParentRef that selects the same object must set the same set of
//     optional fields to different values. If one ParentRef sets a
//     combination of optional fields, all must set the same combination.
//
// Some examples:
//
//   - If one ParentRef sets `sectionName`, all ParentRefs referencing the
//     same object must also set `sectionName`.
//   - If one ParentRef sets `port`, all ParentRefs referencing the same
//     object must also set `port`.
//   - If one ParentRef sets `sectionName` and `port`, all ParentRefs
//     referencing the same object must also set `sectionName` and `port`.
//
// It is possible to separately reference multiple distinct objects that may
// be collapsed by an implementation. For example, some implementations may
// choose to merge compatible Gateway Listeners together. If that is the
// case, the list of routes attached to those resources should also be
// merged.
//
// Note that for ParentRefs that cross namespace boundaries, there are specific
// rules. Cross-namespace references are only valid if they are explicitly
// allowed by something in the namespace they are referring to. For example,
// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
// generic way to enable other kinds of cross-namespace reference.
func (o GRPCRouteSpecPatchPtrOutput) ParentRefs() GRPCRouteSpecParentRefsPatchArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecPatch) []GRPCRouteSpecParentRefsPatch {
		if v == nil {
			return nil
		}
		return v.ParentRefs
	}).(GRPCRouteSpecParentRefsPatchArrayOutput)
}

// Rules are a list of GRPC matchers, filters and actions.
func (o GRPCRouteSpecPatchPtrOutput) Rules() GRPCRouteSpecRulesPatchArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecPatch) []GRPCRouteSpecRulesPatch {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(GRPCRouteSpecRulesPatchArrayOutput)
}

// GRPCRouteRule defines the semantics for matching a gRPC request based on
// conditions (matches), processing it (filters), and forwarding the request to
// an API object (backendRefs).
type GRPCRouteSpecRules struct {
	// BackendRefs defines the backend(s) where matching requests should be
	// sent.
	//
	// Failure behavior here depends on how many BackendRefs are specified and
	// how many are invalid.
	//
	// If *all* entries in BackendRefs are invalid, and there are also no filters
	// specified in this route rule, *all* traffic which matches this rule MUST
	// receive an `UNAVAILABLE` status.
	//
	// See the GRPCBackendRef definition for the rules about what makes a single
	// GRPCBackendRef invalid.
	//
	// When a GRPCBackendRef is invalid, `UNAVAILABLE` statuses MUST be returned for
	// requests that would have otherwise been routed to an invalid backend. If
	// multiple backends are specified, and some are invalid, the proportion of
	// requests that would otherwise have been routed to an invalid backend
	// MUST receive an `UNAVAILABLE` status.
	//
	// For example, if two backends are specified with equal weights, and one is
	// invalid, 50 percent of traffic MUST receive an `UNAVAILABLE` status.
	// Implementations may choose how that 50 percent is determined.
	//
	// Support: Core for Kubernetes Service
	//
	// Support: Implementation-specific for any other resource
	//
	// Support for weight: Core
	BackendRefs []GRPCRouteSpecRulesBackendRefs `pulumi:"backendRefs"`
	// Filters define the filters that are applied to requests that match
	// this rule.
	//
	// The effects of ordering of multiple behaviors are currently unspecified.
	// This can change in the future based on feedback during the alpha stage.
	//
	// Conformance-levels at this level are defined based on the type of filter:
	//
	// - ALL core filters MUST be supported by all implementations that support
	//   GRPCRoute.
	// - Implementers are encouraged to support extended filters.
	// - Implementation-specific custom filters have no API guarantees across
	//   implementations.
	//
	// Specifying the same filter multiple times is not supported unless explicitly
	// indicated in the filter.
	//
	// If an implementation can not support a combination of filters, it must clearly
	// document that limitation. In cases where incompatible or unsupported
	// filters are specified and cause the `Accepted` condition to be set to status
	// `False`, implementations may use the `IncompatibleFilters` reason to specify
	// this configuration error.
	//
	// Support: Core
	Filters []GRPCRouteSpecRulesFilters `pulumi:"filters"`
	// Matches define conditions used for matching the rule against incoming
	// gRPC requests. Each match is independent, i.e. this rule will be matched
	// if **any** one of the matches is satisfied.
	//
	// For example, take the following matches configuration:
	//
	// For a request to match against this rule, it MUST satisfy
	// EITHER of the two conditions:
	//
	// - service of foo.bar AND contains the header `version: 2`
	// - service of foo.bar.v2
	//
	// See the documentation for GRPCRouteMatch on how to specify multiple
	// match conditions to be ANDed together.
	//
	// If no matches are specified, the implementation MUST match every gRPC request.
	//
	// Proxy or Load Balancer routing configuration generated from GRPCRoutes
	// MUST prioritize rules based on the following criteria, continuing on
	// ties. Merging MUST not be done between GRPCRoutes and HTTPRoutes.
	// Precedence MUST be given to the rule with the largest number of:
	//
	// * Characters in a matching non-wildcard hostname.
	// * Characters in a matching hostname.
	// * Characters in a matching service.
	// * Characters in a matching method.
	// * Header matches.
	//
	// If ties still exist across multiple Routes, matching precedence MUST be
	// determined in order of the following criteria, continuing on ties:
	//
	// * The oldest Route based on creation timestamp.
	// * The Route appearing first in alphabetical order by
	//   "{namespace}/{name}".
	//
	// If ties still exist within the Route that has been given precedence,
	// matching precedence MUST be granted to the first matching rule meeting
	// the above criteria.
	Matches []GRPCRouteSpecRulesMatches `pulumi:"matches"`
}

// GRPCRouteSpecRulesInput is an input type that accepts GRPCRouteSpecRulesArgs and GRPCRouteSpecRulesOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesInput` via:
//
//	GRPCRouteSpecRulesArgs{...}
type GRPCRouteSpecRulesInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesOutput() GRPCRouteSpecRulesOutput
	ToGRPCRouteSpecRulesOutputWithContext(context.Context) GRPCRouteSpecRulesOutput
}

// GRPCRouteRule defines the semantics for matching a gRPC request based on
// conditions (matches), processing it (filters), and forwarding the request to
// an API object (backendRefs).
type GRPCRouteSpecRulesArgs struct {
	// BackendRefs defines the backend(s) where matching requests should be
	// sent.
	//
	// Failure behavior here depends on how many BackendRefs are specified and
	// how many are invalid.
	//
	// If *all* entries in BackendRefs are invalid, and there are also no filters
	// specified in this route rule, *all* traffic which matches this rule MUST
	// receive an `UNAVAILABLE` status.
	//
	// See the GRPCBackendRef definition for the rules about what makes a single
	// GRPCBackendRef invalid.
	//
	// When a GRPCBackendRef is invalid, `UNAVAILABLE` statuses MUST be returned for
	// requests that would have otherwise been routed to an invalid backend. If
	// multiple backends are specified, and some are invalid, the proportion of
	// requests that would otherwise have been routed to an invalid backend
	// MUST receive an `UNAVAILABLE` status.
	//
	// For example, if two backends are specified with equal weights, and one is
	// invalid, 50 percent of traffic MUST receive an `UNAVAILABLE` status.
	// Implementations may choose how that 50 percent is determined.
	//
	// Support: Core for Kubernetes Service
	//
	// Support: Implementation-specific for any other resource
	//
	// Support for weight: Core
	BackendRefs GRPCRouteSpecRulesBackendRefsArrayInput `pulumi:"backendRefs"`
	// Filters define the filters that are applied to requests that match
	// this rule.
	//
	// The effects of ordering of multiple behaviors are currently unspecified.
	// This can change in the future based on feedback during the alpha stage.
	//
	// Conformance-levels at this level are defined based on the type of filter:
	//
	// - ALL core filters MUST be supported by all implementations that support
	//   GRPCRoute.
	// - Implementers are encouraged to support extended filters.
	// - Implementation-specific custom filters have no API guarantees across
	//   implementations.
	//
	// Specifying the same filter multiple times is not supported unless explicitly
	// indicated in the filter.
	//
	// If an implementation can not support a combination of filters, it must clearly
	// document that limitation. In cases where incompatible or unsupported
	// filters are specified and cause the `Accepted` condition to be set to status
	// `False`, implementations may use the `IncompatibleFilters` reason to specify
	// this configuration error.
	//
	// Support: Core
	Filters GRPCRouteSpecRulesFiltersArrayInput `pulumi:"filters"`
	// Matches define conditions used for matching the rule against incoming
	// gRPC requests. Each match is independent, i.e. this rule will be matched
	// if **any** one of the matches is satisfied.
	//
	// For example, take the following matches configuration:
	//
	// For a request to match against this rule, it MUST satisfy
	// EITHER of the two conditions:
	//
	// - service of foo.bar AND contains the header `version: 2`
	// - service of foo.bar.v2
	//
	// See the documentation for GRPCRouteMatch on how to specify multiple
	// match conditions to be ANDed together.
	//
	// If no matches are specified, the implementation MUST match every gRPC request.
	//
	// Proxy or Load Balancer routing configuration generated from GRPCRoutes
	// MUST prioritize rules based on the following criteria, continuing on
	// ties. Merging MUST not be done between GRPCRoutes and HTTPRoutes.
	// Precedence MUST be given to the rule with the largest number of:
	//
	// * Characters in a matching non-wildcard hostname.
	// * Characters in a matching hostname.
	// * Characters in a matching service.
	// * Characters in a matching method.
	// * Header matches.
	//
	// If ties still exist across multiple Routes, matching precedence MUST be
	// determined in order of the following criteria, continuing on ties:
	//
	// * The oldest Route based on creation timestamp.
	// * The Route appearing first in alphabetical order by
	//   "{namespace}/{name}".
	//
	// If ties still exist within the Route that has been given precedence,
	// matching precedence MUST be granted to the first matching rule meeting
	// the above criteria.
	Matches GRPCRouteSpecRulesMatchesArrayInput `pulumi:"matches"`
}

func (GRPCRouteSpecRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRules)(nil)).Elem()
}

func (i GRPCRouteSpecRulesArgs) ToGRPCRouteSpecRulesOutput() GRPCRouteSpecRulesOutput {
	return i.ToGRPCRouteSpecRulesOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesArgs) ToGRPCRouteSpecRulesOutputWithContext(ctx context.Context) GRPCRouteSpecRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesOutput)
}

// GRPCRouteSpecRulesArrayInput is an input type that accepts GRPCRouteSpecRulesArray and GRPCRouteSpecRulesArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesArrayInput` via:
//
//	GRPCRouteSpecRulesArray{ GRPCRouteSpecRulesArgs{...} }
type GRPCRouteSpecRulesArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesArrayOutput() GRPCRouteSpecRulesArrayOutput
	ToGRPCRouteSpecRulesArrayOutputWithContext(context.Context) GRPCRouteSpecRulesArrayOutput
}

type GRPCRouteSpecRulesArray []GRPCRouteSpecRulesInput

func (GRPCRouteSpecRulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRules)(nil)).Elem()
}

func (i GRPCRouteSpecRulesArray) ToGRPCRouteSpecRulesArrayOutput() GRPCRouteSpecRulesArrayOutput {
	return i.ToGRPCRouteSpecRulesArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesArray) ToGRPCRouteSpecRulesArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesArrayOutput)
}

// GRPCRouteRule defines the semantics for matching a gRPC request based on
// conditions (matches), processing it (filters), and forwarding the request to
// an API object (backendRefs).
type GRPCRouteSpecRulesOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRules)(nil)).Elem()
}

func (o GRPCRouteSpecRulesOutput) ToGRPCRouteSpecRulesOutput() GRPCRouteSpecRulesOutput {
	return o
}

func (o GRPCRouteSpecRulesOutput) ToGRPCRouteSpecRulesOutputWithContext(ctx context.Context) GRPCRouteSpecRulesOutput {
	return o
}

// BackendRefs defines the backend(s) where matching requests should be
// sent.
//
// Failure behavior here depends on how many BackendRefs are specified and
// how many are invalid.
//
// If *all* entries in BackendRefs are invalid, and there are also no filters
// specified in this route rule, *all* traffic which matches this rule MUST
// receive an `UNAVAILABLE` status.
//
// See the GRPCBackendRef definition for the rules about what makes a single
// GRPCBackendRef invalid.
//
// When a GRPCBackendRef is invalid, `UNAVAILABLE` statuses MUST be returned for
// requests that would have otherwise been routed to an invalid backend. If
// multiple backends are specified, and some are invalid, the proportion of
// requests that would otherwise have been routed to an invalid backend
// MUST receive an `UNAVAILABLE` status.
//
// For example, if two backends are specified with equal weights, and one is
// invalid, 50 percent of traffic MUST receive an `UNAVAILABLE` status.
// Implementations may choose how that 50 percent is determined.
//
// Support: Core for Kubernetes Service
//
// Support: Implementation-specific for any other resource
//
// Support for weight: Core
func (o GRPCRouteSpecRulesOutput) BackendRefs() GRPCRouteSpecRulesBackendRefsArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRules) []GRPCRouteSpecRulesBackendRefs { return v.BackendRefs }).(GRPCRouteSpecRulesBackendRefsArrayOutput)
}

// Filters define the filters that are applied to requests that match
// this rule.
//
// The effects of ordering of multiple behaviors are currently unspecified.
// This can change in the future based on feedback during the alpha stage.
//
// Conformance-levels at this level are defined based on the type of filter:
//
//   - ALL core filters MUST be supported by all implementations that support
//     GRPCRoute.
//   - Implementers are encouraged to support extended filters.
//   - Implementation-specific custom filters have no API guarantees across
//     implementations.
//
// Specifying the same filter multiple times is not supported unless explicitly
// indicated in the filter.
//
// If an implementation can not support a combination of filters, it must clearly
// document that limitation. In cases where incompatible or unsupported
// filters are specified and cause the `Accepted` condition to be set to status
// `False`, implementations may use the `IncompatibleFilters` reason to specify
// this configuration error.
//
// Support: Core
func (o GRPCRouteSpecRulesOutput) Filters() GRPCRouteSpecRulesFiltersArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRules) []GRPCRouteSpecRulesFilters { return v.Filters }).(GRPCRouteSpecRulesFiltersArrayOutput)
}

// Matches define conditions used for matching the rule against incoming
// gRPC requests. Each match is independent, i.e. this rule will be matched
// if **any** one of the matches is satisfied.
//
// For example, take the following matches configuration:
//
// For a request to match against this rule, it MUST satisfy
// EITHER of the two conditions:
//
// - service of foo.bar AND contains the header `version: 2`
// - service of foo.bar.v2
//
// See the documentation for GRPCRouteMatch on how to specify multiple
// match conditions to be ANDed together.
//
// If no matches are specified, the implementation MUST match every gRPC request.
//
// Proxy or Load Balancer routing configuration generated from GRPCRoutes
// MUST prioritize rules based on the following criteria, continuing on
// ties. Merging MUST not be done between GRPCRoutes and HTTPRoutes.
// Precedence MUST be given to the rule with the largest number of:
//
// * Characters in a matching non-wildcard hostname.
// * Characters in a matching hostname.
// * Characters in a matching service.
// * Characters in a matching method.
// * Header matches.
//
// If ties still exist across multiple Routes, matching precedence MUST be
// determined in order of the following criteria, continuing on ties:
//
//   - The oldest Route based on creation timestamp.
//   - The Route appearing first in alphabetical order by
//     "{namespace}/{name}".
//
// If ties still exist within the Route that has been given precedence,
// matching precedence MUST be granted to the first matching rule meeting
// the above criteria.
func (o GRPCRouteSpecRulesOutput) Matches() GRPCRouteSpecRulesMatchesArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRules) []GRPCRouteSpecRulesMatches { return v.Matches }).(GRPCRouteSpecRulesMatchesArrayOutput)
}

type GRPCRouteSpecRulesArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRules)(nil)).Elem()
}

func (o GRPCRouteSpecRulesArrayOutput) ToGRPCRouteSpecRulesArrayOutput() GRPCRouteSpecRulesArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesArrayOutput) ToGRPCRouteSpecRulesArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRules {
		return vs[0].([]GRPCRouteSpecRules)[vs[1].(int)]
	}).(GRPCRouteSpecRulesOutput)
}

// GRPCBackendRef defines how a GRPCRoute forwards a gRPC request.
//
// Note that when a namespace different than the local namespace is specified, a
// ReferenceGrant object is required in the referent namespace to allow that
// namespace's owner to accept the reference. See the ReferenceGrant
// documentation for details.
//
// <gateway:experimental:description>
//
// When the BackendRef points to a Kubernetes Service, implementations SHOULD
// honor the appProtocol field if it is set for the target Service Port.
//
// Implementations supporting appProtocol SHOULD recognize the Kubernetes
// Standard Application Protocols defined in KEP-3726.
//
// If a Service appProtocol isn't specified, an implementation MAY infer the
// backend protocol through its own means. Implementations MAY infer the
// protocol from the Route type referring to the backend Service.
//
// If a Route is not able to send traffic to the backend using the specified
// protocol then the backend is considered invalid. Implementations MUST set the
// "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.
//
// </gateway:experimental:description>
type GRPCRouteSpecRulesBackendRefs struct {
	// Filters defined at this level MUST be executed if and only if the
	// request is being forwarded to the backend defined here.
	//
	// Support: Implementation-specific (For broader support of filters, use the
	// Filters field in GRPCRouteRule.)
	Filters []GRPCRouteSpecRulesBackendRefsFilters `pulumi:"filters"`
	// Group is the group of the referent. For example, "gateway.networking.k8s.io".
	// When unspecified or empty string, core API group is inferred.
	Group *string `pulumi:"group"`
	// Kind is the Kubernetes resource kind of the referent. For example
	// "Service".
	//
	// Defaults to "Service" when not specified.
	//
	// ExternalName services can refer to CNAME DNS records that may live
	// outside of the cluster and as such are difficult to reason about in
	// terms of conformance. They also may not be safe to forward to (see
	// CVE-2021-25740 for more information). Implementations SHOULD NOT
	// support ExternalName Services.
	//
	// Support: Core (Services with a type other than ExternalName)
	//
	// Support: Implementation-specific (Services with type ExternalName)
	Kind *string `pulumi:"kind"`
	// Name is the name of the referent.
	Name *string `pulumi:"name"`
	// Namespace is the namespace of the backend. When unspecified, the local
	// namespace is inferred.
	//
	// Note that when a namespace different than the local namespace is specified,
	// a ReferenceGrant object is required in the referent namespace to allow that
	// namespace's owner to accept the reference. See the ReferenceGrant
	// documentation for details.
	//
	// Support: Core
	Namespace *string `pulumi:"namespace"`
	// Port specifies the destination port number to use for this resource.
	// Port is required when the referent is a Kubernetes Service. In this
	// case, the port number is the service port number, not the target port.
	// For other resources, destination port might be derived from the referent
	// resource or this field.
	Port *int `pulumi:"port"`
	// Weight specifies the proportion of requests forwarded to the referenced
	// backend. This is computed as weight/(sum of all weights in this
	// BackendRefs list). For non-zero values, there may be some epsilon from
	// the exact proportion defined here depending on the precision an
	// implementation supports. Weight is not a percentage and the sum of
	// weights does not need to equal 100.
	//
	// If only one backend is specified and it has a weight greater than 0, 100%
	// of the traffic is forwarded to that backend. If weight is set to 0, no
	// traffic should be forwarded for this entry. If unspecified, weight
	// defaults to 1.
	//
	// Support for this field varies based on the context where used.
	Weight *int `pulumi:"weight"`
}

// GRPCRouteSpecRulesBackendRefsInput is an input type that accepts GRPCRouteSpecRulesBackendRefsArgs and GRPCRouteSpecRulesBackendRefsOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsInput` via:
//
//	GRPCRouteSpecRulesBackendRefsArgs{...}
type GRPCRouteSpecRulesBackendRefsInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsOutput() GRPCRouteSpecRulesBackendRefsOutput
	ToGRPCRouteSpecRulesBackendRefsOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsOutput
}

// GRPCBackendRef defines how a GRPCRoute forwards a gRPC request.
//
// Note that when a namespace different than the local namespace is specified, a
// ReferenceGrant object is required in the referent namespace to allow that
// namespace's owner to accept the reference. See the ReferenceGrant
// documentation for details.
//
// <gateway:experimental:description>
//
// When the BackendRef points to a Kubernetes Service, implementations SHOULD
// honor the appProtocol field if it is set for the target Service Port.
//
// Implementations supporting appProtocol SHOULD recognize the Kubernetes
// Standard Application Protocols defined in KEP-3726.
//
// If a Service appProtocol isn't specified, an implementation MAY infer the
// backend protocol through its own means. Implementations MAY infer the
// protocol from the Route type referring to the backend Service.
//
// If a Route is not able to send traffic to the backend using the specified
// protocol then the backend is considered invalid. Implementations MUST set the
// "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.
//
// </gateway:experimental:description>
type GRPCRouteSpecRulesBackendRefsArgs struct {
	// Filters defined at this level MUST be executed if and only if the
	// request is being forwarded to the backend defined here.
	//
	// Support: Implementation-specific (For broader support of filters, use the
	// Filters field in GRPCRouteRule.)
	Filters GRPCRouteSpecRulesBackendRefsFiltersArrayInput `pulumi:"filters"`
	// Group is the group of the referent. For example, "gateway.networking.k8s.io".
	// When unspecified or empty string, core API group is inferred.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind is the Kubernetes resource kind of the referent. For example
	// "Service".
	//
	// Defaults to "Service" when not specified.
	//
	// ExternalName services can refer to CNAME DNS records that may live
	// outside of the cluster and as such are difficult to reason about in
	// terms of conformance. They also may not be safe to forward to (see
	// CVE-2021-25740 for more information). Implementations SHOULD NOT
	// support ExternalName Services.
	//
	// Support: Core (Services with a type other than ExternalName)
	//
	// Support: Implementation-specific (Services with type ExternalName)
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace is the namespace of the backend. When unspecified, the local
	// namespace is inferred.
	//
	// Note that when a namespace different than the local namespace is specified,
	// a ReferenceGrant object is required in the referent namespace to allow that
	// namespace's owner to accept the reference. See the ReferenceGrant
	// documentation for details.
	//
	// Support: Core
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Port specifies the destination port number to use for this resource.
	// Port is required when the referent is a Kubernetes Service. In this
	// case, the port number is the service port number, not the target port.
	// For other resources, destination port might be derived from the referent
	// resource or this field.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Weight specifies the proportion of requests forwarded to the referenced
	// backend. This is computed as weight/(sum of all weights in this
	// BackendRefs list). For non-zero values, there may be some epsilon from
	// the exact proportion defined here depending on the precision an
	// implementation supports. Weight is not a percentage and the sum of
	// weights does not need to equal 100.
	//
	// If only one backend is specified and it has a weight greater than 0, 100%
	// of the traffic is forwarded to that backend. If weight is set to 0, no
	// traffic should be forwarded for this entry. If unspecified, weight
	// defaults to 1.
	//
	// Support for this field varies based on the context where used.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (GRPCRouteSpecRulesBackendRefsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefs)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsArgs) ToGRPCRouteSpecRulesBackendRefsOutput() GRPCRouteSpecRulesBackendRefsOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsArgs) ToGRPCRouteSpecRulesBackendRefsOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsOutput)
}

// GRPCRouteSpecRulesBackendRefsArrayInput is an input type that accepts GRPCRouteSpecRulesBackendRefsArray and GRPCRouteSpecRulesBackendRefsArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsArrayInput` via:
//
//	GRPCRouteSpecRulesBackendRefsArray{ GRPCRouteSpecRulesBackendRefsArgs{...} }
type GRPCRouteSpecRulesBackendRefsArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsArrayOutput() GRPCRouteSpecRulesBackendRefsArrayOutput
	ToGRPCRouteSpecRulesBackendRefsArrayOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsArrayOutput
}

type GRPCRouteSpecRulesBackendRefsArray []GRPCRouteSpecRulesBackendRefsInput

func (GRPCRouteSpecRulesBackendRefsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefs)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsArray) ToGRPCRouteSpecRulesBackendRefsArrayOutput() GRPCRouteSpecRulesBackendRefsArrayOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsArray) ToGRPCRouteSpecRulesBackendRefsArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsArrayOutput)
}

// GRPCBackendRef defines how a GRPCRoute forwards a gRPC request.
//
// Note that when a namespace different than the local namespace is specified, a
// ReferenceGrant object is required in the referent namespace to allow that
// namespace's owner to accept the reference. See the ReferenceGrant
// documentation for details.
//
// <gateway:experimental:description>
//
// When the BackendRef points to a Kubernetes Service, implementations SHOULD
// honor the appProtocol field if it is set for the target Service Port.
//
// Implementations supporting appProtocol SHOULD recognize the Kubernetes
// Standard Application Protocols defined in KEP-3726.
//
// If a Service appProtocol isn't specified, an implementation MAY infer the
// backend protocol through its own means. Implementations MAY infer the
// protocol from the Route type referring to the backend Service.
//
// If a Route is not able to send traffic to the backend using the specified
// protocol then the backend is considered invalid. Implementations MUST set the
// "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.
//
// </gateway:experimental:description>
type GRPCRouteSpecRulesBackendRefsOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefs)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsOutput) ToGRPCRouteSpecRulesBackendRefsOutput() GRPCRouteSpecRulesBackendRefsOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsOutput) ToGRPCRouteSpecRulesBackendRefsOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsOutput {
	return o
}

// Filters defined at this level MUST be executed if and only if the
// request is being forwarded to the backend defined here.
//
// Support: Implementation-specific (For broader support of filters, use the
// Filters field in GRPCRouteRule.)
func (o GRPCRouteSpecRulesBackendRefsOutput) Filters() GRPCRouteSpecRulesBackendRefsFiltersArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefs) []GRPCRouteSpecRulesBackendRefsFilters { return v.Filters }).(GRPCRouteSpecRulesBackendRefsFiltersArrayOutput)
}

// Group is the group of the referent. For example, "gateway.networking.k8s.io".
// When unspecified or empty string, core API group is inferred.
func (o GRPCRouteSpecRulesBackendRefsOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefs) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind is the Kubernetes resource kind of the referent. For example
// "Service".
//
// Defaults to "Service" when not specified.
//
// ExternalName services can refer to CNAME DNS records that may live
// outside of the cluster and as such are difficult to reason about in
// terms of conformance. They also may not be safe to forward to (see
// CVE-2021-25740 for more information). Implementations SHOULD NOT
// support ExternalName Services.
//
// Support: Core (Services with a type other than ExternalName)
//
// Support: Implementation-specific (Services with type ExternalName)
func (o GRPCRouteSpecRulesBackendRefsOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefs) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
func (o GRPCRouteSpecRulesBackendRefsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefs) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the backend. When unspecified, the local
// namespace is inferred.
//
// Note that when a namespace different than the local namespace is specified,
// a ReferenceGrant object is required in the referent namespace to allow that
// namespace's owner to accept the reference. See the ReferenceGrant
// documentation for details.
//
// Support: Core
func (o GRPCRouteSpecRulesBackendRefsOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefs) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Port specifies the destination port number to use for this resource.
// Port is required when the referent is a Kubernetes Service. In this
// case, the port number is the service port number, not the target port.
// For other resources, destination port might be derived from the referent
// resource or this field.
func (o GRPCRouteSpecRulesBackendRefsOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefs) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Weight specifies the proportion of requests forwarded to the referenced
// backend. This is computed as weight/(sum of all weights in this
// BackendRefs list). For non-zero values, there may be some epsilon from
// the exact proportion defined here depending on the precision an
// implementation supports. Weight is not a percentage and the sum of
// weights does not need to equal 100.
//
// If only one backend is specified and it has a weight greater than 0, 100%
// of the traffic is forwarded to that backend. If weight is set to 0, no
// traffic should be forwarded for this entry. If unspecified, weight
// defaults to 1.
//
// Support for this field varies based on the context where used.
func (o GRPCRouteSpecRulesBackendRefsOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefs) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type GRPCRouteSpecRulesBackendRefsArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefs)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsArrayOutput) ToGRPCRouteSpecRulesBackendRefsArrayOutput() GRPCRouteSpecRulesBackendRefsArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsArrayOutput) ToGRPCRouteSpecRulesBackendRefsArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesBackendRefsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesBackendRefs {
		return vs[0].([]GRPCRouteSpecRulesBackendRefs)[vs[1].(int)]
	}).(GRPCRouteSpecRulesBackendRefsOutput)
}

// GRPCRouteFilter defines processing steps that must be completed during the
// request or response lifecycle. GRPCRouteFilters are meant as an extension
// point to express processing that may be done in Gateway implementations. Some
// examples include request or response modification, implementing
// authentication strategies, rate-limiting, and traffic shaping. API
// guarantee/conformance is defined based on the type of the filter.
type GRPCRouteSpecRulesBackendRefsFilters struct {
	ExtensionRef           *GRPCRouteSpecRulesBackendRefsFiltersExtensionRef           `pulumi:"extensionRef"`
	RequestHeaderModifier  *GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier  `pulumi:"requestHeaderModifier"`
	RequestMirror          *GRPCRouteSpecRulesBackendRefsFiltersRequestMirror          `pulumi:"requestMirror"`
	ResponseHeaderModifier *GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier `pulumi:"responseHeaderModifier"`
	// Type identifies the type of filter to apply. As with other API fields,
	// types are classified into three conformance levels:
	//
	// - Core: Filter types and their corresponding configuration defined by
	// "Support: Core" in this package, e.g. "RequestHeaderModifier". All
	// implementations supporting GRPCRoute MUST support core filters.
	//
	// - Extended: Filter types and their corresponding configuration defined by
	// "Support: Extended" in this package, e.g. "RequestMirror". Implementers
	// are encouraged to support extended filters.
	//
	// - Implementation-specific: Filters that are defined and supported by specific vendors.
	// In the future, filters showing convergence in behavior across multiple
	// implementations will be considered for inclusion in extended or core
	// conformance levels. Filter-specific configuration for such filters
	// is specified using the ExtensionRef field. `Type` MUST be set to
	// "ExtensionRef" for custom filters.
	//
	// Implementers are encouraged to define custom implementation types to
	// extend the core API with implementation-specific behavior.
	//
	// If a reference to a custom filter type cannot be resolved, the filter
	// MUST NOT be skipped. Instead, requests that would have been processed by
	// that filter MUST receive a HTTP error response.
	Type *string `pulumi:"type"`
}

// GRPCRouteSpecRulesBackendRefsFiltersInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersArgs and GRPCRouteSpecRulesBackendRefsFiltersOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersArgs{...}
type GRPCRouteSpecRulesBackendRefsFiltersInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersOutput() GRPCRouteSpecRulesBackendRefsFiltersOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersOutput
}

// GRPCRouteFilter defines processing steps that must be completed during the
// request or response lifecycle. GRPCRouteFilters are meant as an extension
// point to express processing that may be done in Gateway implementations. Some
// examples include request or response modification, implementing
// authentication strategies, rate-limiting, and traffic shaping. API
// guarantee/conformance is defined based on the type of the filter.
type GRPCRouteSpecRulesBackendRefsFiltersArgs struct {
	ExtensionRef           GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrInput           `pulumi:"extensionRef"`
	RequestHeaderModifier  GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrInput  `pulumi:"requestHeaderModifier"`
	RequestMirror          GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrInput          `pulumi:"requestMirror"`
	ResponseHeaderModifier GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrInput `pulumi:"responseHeaderModifier"`
	// Type identifies the type of filter to apply. As with other API fields,
	// types are classified into three conformance levels:
	//
	// - Core: Filter types and their corresponding configuration defined by
	// "Support: Core" in this package, e.g. "RequestHeaderModifier". All
	// implementations supporting GRPCRoute MUST support core filters.
	//
	// - Extended: Filter types and their corresponding configuration defined by
	// "Support: Extended" in this package, e.g. "RequestMirror". Implementers
	// are encouraged to support extended filters.
	//
	// - Implementation-specific: Filters that are defined and supported by specific vendors.
	// In the future, filters showing convergence in behavior across multiple
	// implementations will be considered for inclusion in extended or core
	// conformance levels. Filter-specific configuration for such filters
	// is specified using the ExtensionRef field. `Type` MUST be set to
	// "ExtensionRef" for custom filters.
	//
	// Implementers are encouraged to define custom implementation types to
	// extend the core API with implementation-specific behavior.
	//
	// If a reference to a custom filter type cannot be resolved, the filter
	// MUST NOT be skipped. Instead, requests that would have been processed by
	// that filter MUST receive a HTTP error response.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GRPCRouteSpecRulesBackendRefsFiltersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFilters)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersArgs) ToGRPCRouteSpecRulesBackendRefsFiltersOutput() GRPCRouteSpecRulesBackendRefsFiltersOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersArgs) ToGRPCRouteSpecRulesBackendRefsFiltersOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersOutput)
}

// GRPCRouteSpecRulesBackendRefsFiltersArrayInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersArray and GRPCRouteSpecRulesBackendRefsFiltersArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersArrayInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersArray{ GRPCRouteSpecRulesBackendRefsFiltersArgs{...} }
type GRPCRouteSpecRulesBackendRefsFiltersArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersArrayOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersArrayOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersArrayOutput
}

type GRPCRouteSpecRulesBackendRefsFiltersArray []GRPCRouteSpecRulesBackendRefsFiltersInput

func (GRPCRouteSpecRulesBackendRefsFiltersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsFilters)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersArray) ToGRPCRouteSpecRulesBackendRefsFiltersArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersArrayOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersArray) ToGRPCRouteSpecRulesBackendRefsFiltersArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersArrayOutput)
}

// GRPCRouteFilter defines processing steps that must be completed during the
// request or response lifecycle. GRPCRouteFilters are meant as an extension
// point to express processing that may be done in Gateway implementations. Some
// examples include request or response modification, implementing
// authentication strategies, rate-limiting, and traffic shaping. API
// guarantee/conformance is defined based on the type of the filter.
type GRPCRouteSpecRulesBackendRefsFiltersOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFilters)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersOutput) ToGRPCRouteSpecRulesBackendRefsFiltersOutput() GRPCRouteSpecRulesBackendRefsFiltersOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersOutput) ToGRPCRouteSpecRulesBackendRefsFiltersOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersOutput) ExtensionRef() GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFilters) *GRPCRouteSpecRulesBackendRefsFiltersExtensionRef {
		return v.ExtensionRef
	}).(GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput)
}

func (o GRPCRouteSpecRulesBackendRefsFiltersOutput) RequestHeaderModifier() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFilters) *GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier {
		return v.RequestHeaderModifier
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput)
}

func (o GRPCRouteSpecRulesBackendRefsFiltersOutput) RequestMirror() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFilters) *GRPCRouteSpecRulesBackendRefsFiltersRequestMirror {
		return v.RequestMirror
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput)
}

func (o GRPCRouteSpecRulesBackendRefsFiltersOutput) ResponseHeaderModifier() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFilters) *GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier {
		return v.ResponseHeaderModifier
	}).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput)
}

// Type identifies the type of filter to apply. As with other API fields,
// types are classified into three conformance levels:
//
// - Core: Filter types and their corresponding configuration defined by
// "Support: Core" in this package, e.g. "RequestHeaderModifier". All
// implementations supporting GRPCRoute MUST support core filters.
//
// - Extended: Filter types and their corresponding configuration defined by
// "Support: Extended" in this package, e.g. "RequestMirror". Implementers
// are encouraged to support extended filters.
//
// - Implementation-specific: Filters that are defined and supported by specific vendors.
// In the future, filters showing convergence in behavior across multiple
// implementations will be considered for inclusion in extended or core
// conformance levels. Filter-specific configuration for such filters
// is specified using the ExtensionRef field. `Type` MUST be set to
// "ExtensionRef" for custom filters.
//
// Implementers are encouraged to define custom implementation types to
// extend the core API with implementation-specific behavior.
//
// If a reference to a custom filter type cannot be resolved, the filter
// MUST NOT be skipped. Instead, requests that would have been processed by
// that filter MUST receive a HTTP error response.
func (o GRPCRouteSpecRulesBackendRefsFiltersOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFilters) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecRulesBackendRefsFiltersArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsFilters)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersArrayOutput) ToGRPCRouteSpecRulesBackendRefsFiltersArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersArrayOutput) ToGRPCRouteSpecRulesBackendRefsFiltersArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesBackendRefsFiltersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesBackendRefsFilters {
		return vs[0].([]GRPCRouteSpecRulesBackendRefsFilters)[vs[1].(int)]
	}).(GRPCRouteSpecRulesBackendRefsFiltersOutput)
}

// ExtensionRef is an optional, implementation-specific extension to the
// "filter" behavior.  For example, resource "myroutefilter" in group
// "networking.example.net"). ExtensionRef MUST NOT be used for core and
// extended filters.
//
// Support: Implementation-specific
//
// This filter can be used multiple times within the same rule.
type GRPCRouteSpecRulesBackendRefsFiltersExtensionRef struct {
	// Group is the group of the referent. For example, "gateway.networking.k8s.io".
	// When unspecified or empty string, core API group is inferred.
	Group *string `pulumi:"group"`
	// Kind is kind of the referent. For example "HTTPRoute" or "Service".
	Kind *string `pulumi:"kind"`
	// Name is the name of the referent.
	Name *string `pulumi:"name"`
}

// GRPCRouteSpecRulesBackendRefsFiltersExtensionRefInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs and GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersExtensionRefInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs{...}
type GRPCRouteSpecRulesBackendRefsFiltersExtensionRefInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput() GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput
}

// ExtensionRef is an optional, implementation-specific extension to the
// "filter" behavior.  For example, resource "myroutefilter" in group
// "networking.example.net"). ExtensionRef MUST NOT be used for core and
// extended filters.
//
// Support: Implementation-specific
//
// This filter can be used multiple times within the same rule.
type GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs struct {
	// Group is the group of the referent. For example, "gateway.networking.k8s.io".
	// When unspecified or empty string, core API group is inferred.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind is kind of the referent. For example "HTTPRoute" or "Service".
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersExtensionRef)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput() GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput)
}

func (i GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput).ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs, GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtr and GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrInput` via:
//
//	        GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput
}

type grpcrouteSpecRulesBackendRefsFiltersExtensionRefPtrType GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs

func GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtr(v *GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs) GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrInput {
	return (*grpcrouteSpecRulesBackendRefsFiltersExtensionRefPtrType)(v)
}

func (*grpcrouteSpecRulesBackendRefsFiltersExtensionRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesBackendRefsFiltersExtensionRef)(nil)).Elem()
}

func (i *grpcrouteSpecRulesBackendRefsFiltersExtensionRefPtrType) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesBackendRefsFiltersExtensionRefPtrType) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput)
}

// ExtensionRef is an optional, implementation-specific extension to the
// "filter" behavior.  For example, resource "myroutefilter" in group
// "networking.example.net"). ExtensionRef MUST NOT be used for core and
// extended filters.
//
// Support: Implementation-specific
//
// This filter can be used multiple times within the same rule.
type GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersExtensionRef)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput() GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput {
	return o.ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesBackendRefsFiltersExtensionRef) *GRPCRouteSpecRulesBackendRefsFiltersExtensionRef {
		return &v
	}).(GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput)
}

// Group is the group of the referent. For example, "gateway.networking.k8s.io".
// When unspecified or empty string, core API group is inferred.
func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersExtensionRef) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind is kind of the referent. For example "HTTPRoute" or "Service".
func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersExtensionRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersExtensionRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesBackendRefsFiltersExtensionRef)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput) Elem() GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersExtensionRef) GRPCRouteSpecRulesBackendRefsFiltersExtensionRef {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesBackendRefsFiltersExtensionRef
		return ret
	}).(GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput)
}

// Group is the group of the referent. For example, "gateway.networking.k8s.io".
// When unspecified or empty string, core API group is inferred.
func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersExtensionRef) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Kind is kind of the referent. For example "HTTPRoute" or "Service".
func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersExtensionRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersExtensionRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// ExtensionRef is an optional, implementation-specific extension to the
// "filter" behavior.  For example, resource "myroutefilter" in group
// "networking.example.net"). ExtensionRef MUST NOT be used for core and
// extended filters.
//
// Support: Implementation-specific
//
// This filter can be used multiple times within the same rule.
type GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatch struct {
	// Group is the group of the referent. For example, "gateway.networking.k8s.io".
	// When unspecified or empty string, core API group is inferred.
	Group *string `pulumi:"group"`
	// Kind is kind of the referent. For example "HTTPRoute" or "Service".
	Kind *string `pulumi:"kind"`
	// Name is the name of the referent.
	Name *string `pulumi:"name"`
}

// GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchArgs and GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchArgs{...}
type GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchOutput() GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchOutput
}

// ExtensionRef is an optional, implementation-specific extension to the
// "filter" behavior.  For example, resource "myroutefilter" in group
// "networking.example.net"). ExtensionRef MUST NOT be used for core and
// extended filters.
//
// Support: Implementation-specific
//
// This filter can be used multiple times within the same rule.
type GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchArgs struct {
	// Group is the group of the referent. For example, "gateway.networking.k8s.io".
	// When unspecified or empty string, core API group is inferred.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind is kind of the referent. For example "HTTPRoute" or "Service".
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchArgs) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchOutput() GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchArgs) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchOutput)
}

func (i GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchArgs) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchArgs) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchOutput).ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchArgs, GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtr and GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrInput` via:
//
//	        GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutput
}

type grpcrouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrType GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchArgs

func GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtr(v *GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchArgs) GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrInput {
	return (*grpcrouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrType)(v)
}

func (*grpcrouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatch)(nil)).Elem()
}

func (i *grpcrouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrType) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrType) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutput)
}

// ExtensionRef is an optional, implementation-specific extension to the
// "filter" behavior.  For example, resource "myroutefilter" in group
// "networking.example.net"). ExtensionRef MUST NOT be used for core and
// extended filters.
//
// Support: Implementation-specific
//
// This filter can be used multiple times within the same rule.
type GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchOutput) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchOutput() GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchOutput) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchOutput) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutput {
	return o.ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchOutput) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatch) *GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatch {
		return &v
	}).(GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutput)
}

// Group is the group of the referent. For example, "gateway.networking.k8s.io".
// When unspecified or empty string, core API group is inferred.
func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatch) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind is kind of the referent. For example "HTTPRoute" or "Service".
func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutput) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutput) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutput) Elem() GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatch) GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatch {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatch
		return ret
	}).(GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchOutput)
}

// Group is the group of the referent. For example, "gateway.networking.k8s.io".
// When unspecified or empty string, core API group is inferred.
func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Kind is kind of the referent. For example "HTTPRoute" or "Service".
func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// GRPCRouteFilter defines processing steps that must be completed during the
// request or response lifecycle. GRPCRouteFilters are meant as an extension
// point to express processing that may be done in Gateway implementations. Some
// examples include request or response modification, implementing
// authentication strategies, rate-limiting, and traffic shaping. API
// guarantee/conformance is defined based on the type of the filter.
type GRPCRouteSpecRulesBackendRefsFiltersPatch struct {
	ExtensionRef           *GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatch           `pulumi:"extensionRef"`
	RequestHeaderModifier  *GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatch  `pulumi:"requestHeaderModifier"`
	RequestMirror          *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatch          `pulumi:"requestMirror"`
	ResponseHeaderModifier *GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatch `pulumi:"responseHeaderModifier"`
	// Type identifies the type of filter to apply. As with other API fields,
	// types are classified into three conformance levels:
	//
	// - Core: Filter types and their corresponding configuration defined by
	// "Support: Core" in this package, e.g. "RequestHeaderModifier". All
	// implementations supporting GRPCRoute MUST support core filters.
	//
	// - Extended: Filter types and their corresponding configuration defined by
	// "Support: Extended" in this package, e.g. "RequestMirror". Implementers
	// are encouraged to support extended filters.
	//
	// - Implementation-specific: Filters that are defined and supported by specific vendors.
	// In the future, filters showing convergence in behavior across multiple
	// implementations will be considered for inclusion in extended or core
	// conformance levels. Filter-specific configuration for such filters
	// is specified using the ExtensionRef field. `Type` MUST be set to
	// "ExtensionRef" for custom filters.
	//
	// Implementers are encouraged to define custom implementation types to
	// extend the core API with implementation-specific behavior.
	//
	// If a reference to a custom filter type cannot be resolved, the filter
	// MUST NOT be skipped. Instead, requests that would have been processed by
	// that filter MUST receive a HTTP error response.
	Type *string `pulumi:"type"`
}

// GRPCRouteSpecRulesBackendRefsFiltersPatchInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersPatchArgs and GRPCRouteSpecRulesBackendRefsFiltersPatchOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersPatchInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersPatchArgs{...}
type GRPCRouteSpecRulesBackendRefsFiltersPatchInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersPatchOutput() GRPCRouteSpecRulesBackendRefsFiltersPatchOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersPatchOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersPatchOutput
}

// GRPCRouteFilter defines processing steps that must be completed during the
// request or response lifecycle. GRPCRouteFilters are meant as an extension
// point to express processing that may be done in Gateway implementations. Some
// examples include request or response modification, implementing
// authentication strategies, rate-limiting, and traffic shaping. API
// guarantee/conformance is defined based on the type of the filter.
type GRPCRouteSpecRulesBackendRefsFiltersPatchArgs struct {
	ExtensionRef           GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrInput           `pulumi:"extensionRef"`
	RequestHeaderModifier  GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrInput  `pulumi:"requestHeaderModifier"`
	RequestMirror          GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrInput          `pulumi:"requestMirror"`
	ResponseHeaderModifier GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrInput `pulumi:"responseHeaderModifier"`
	// Type identifies the type of filter to apply. As with other API fields,
	// types are classified into three conformance levels:
	//
	// - Core: Filter types and their corresponding configuration defined by
	// "Support: Core" in this package, e.g. "RequestHeaderModifier". All
	// implementations supporting GRPCRoute MUST support core filters.
	//
	// - Extended: Filter types and their corresponding configuration defined by
	// "Support: Extended" in this package, e.g. "RequestMirror". Implementers
	// are encouraged to support extended filters.
	//
	// - Implementation-specific: Filters that are defined and supported by specific vendors.
	// In the future, filters showing convergence in behavior across multiple
	// implementations will be considered for inclusion in extended or core
	// conformance levels. Filter-specific configuration for such filters
	// is specified using the ExtensionRef field. `Type` MUST be set to
	// "ExtensionRef" for custom filters.
	//
	// Implementers are encouraged to define custom implementation types to
	// extend the core API with implementation-specific behavior.
	//
	// If a reference to a custom filter type cannot be resolved, the filter
	// MUST NOT be skipped. Instead, requests that would have been processed by
	// that filter MUST receive a HTTP error response.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GRPCRouteSpecRulesBackendRefsFiltersPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersPatchArgs) ToGRPCRouteSpecRulesBackendRefsFiltersPatchOutput() GRPCRouteSpecRulesBackendRefsFiltersPatchOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersPatchOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersPatchArgs) ToGRPCRouteSpecRulesBackendRefsFiltersPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersPatchOutput)
}

// GRPCRouteSpecRulesBackendRefsFiltersPatchArrayInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersPatchArray and GRPCRouteSpecRulesBackendRefsFiltersPatchArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersPatchArrayInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersPatchArray{ GRPCRouteSpecRulesBackendRefsFiltersPatchArgs{...} }
type GRPCRouteSpecRulesBackendRefsFiltersPatchArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersPatchArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersPatchArrayOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersPatchArrayOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersPatchArrayOutput
}

type GRPCRouteSpecRulesBackendRefsFiltersPatchArray []GRPCRouteSpecRulesBackendRefsFiltersPatchInput

func (GRPCRouteSpecRulesBackendRefsFiltersPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsFiltersPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersPatchArray) ToGRPCRouteSpecRulesBackendRefsFiltersPatchArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersPatchArrayOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersPatchArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersPatchArray) ToGRPCRouteSpecRulesBackendRefsFiltersPatchArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersPatchArrayOutput)
}

// GRPCRouteFilter defines processing steps that must be completed during the
// request or response lifecycle. GRPCRouteFilters are meant as an extension
// point to express processing that may be done in Gateway implementations. Some
// examples include request or response modification, implementing
// authentication strategies, rate-limiting, and traffic shaping. API
// guarantee/conformance is defined based on the type of the filter.
type GRPCRouteSpecRulesBackendRefsFiltersPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersPatchOutput) ToGRPCRouteSpecRulesBackendRefsFiltersPatchOutput() GRPCRouteSpecRulesBackendRefsFiltersPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersPatchOutput) ToGRPCRouteSpecRulesBackendRefsFiltersPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersPatchOutput) ExtensionRef() GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersPatch) *GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatch {
		return v.ExtensionRef
	}).(GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutput)
}

func (o GRPCRouteSpecRulesBackendRefsFiltersPatchOutput) RequestHeaderModifier() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersPatch) *GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatch {
		return v.RequestHeaderModifier
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutput)
}

func (o GRPCRouteSpecRulesBackendRefsFiltersPatchOutput) RequestMirror() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersPatch) *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatch {
		return v.RequestMirror
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutput)
}

func (o GRPCRouteSpecRulesBackendRefsFiltersPatchOutput) ResponseHeaderModifier() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersPatch) *GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatch {
		return v.ResponseHeaderModifier
	}).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutput)
}

// Type identifies the type of filter to apply. As with other API fields,
// types are classified into three conformance levels:
//
// - Core: Filter types and their corresponding configuration defined by
// "Support: Core" in this package, e.g. "RequestHeaderModifier". All
// implementations supporting GRPCRoute MUST support core filters.
//
// - Extended: Filter types and their corresponding configuration defined by
// "Support: Extended" in this package, e.g. "RequestMirror". Implementers
// are encouraged to support extended filters.
//
// - Implementation-specific: Filters that are defined and supported by specific vendors.
// In the future, filters showing convergence in behavior across multiple
// implementations will be considered for inclusion in extended or core
// conformance levels. Filter-specific configuration for such filters
// is specified using the ExtensionRef field. `Type` MUST be set to
// "ExtensionRef" for custom filters.
//
// Implementers are encouraged to define custom implementation types to
// extend the core API with implementation-specific behavior.
//
// If a reference to a custom filter type cannot be resolved, the filter
// MUST NOT be skipped. Instead, requests that would have been processed by
// that filter MUST receive a HTTP error response.
func (o GRPCRouteSpecRulesBackendRefsFiltersPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecRulesBackendRefsFiltersPatchArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsFiltersPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersPatchArrayOutput) ToGRPCRouteSpecRulesBackendRefsFiltersPatchArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersPatchArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersPatchArrayOutput) ToGRPCRouteSpecRulesBackendRefsFiltersPatchArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersPatchArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersPatchArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesBackendRefsFiltersPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesBackendRefsFiltersPatch {
		return vs[0].([]GRPCRouteSpecRulesBackendRefsFiltersPatch)[vs[1].(int)]
	}).(GRPCRouteSpecRulesBackendRefsFiltersPatchOutput)
}

// RequestHeaderModifier defines a schema for a filter that modifies request
// headers.
//
// Support: Core
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier struct {
	// Add adds the given header(s) (name, value) to the request
	// before the action. It appends to any existing values associated
	// with the header name.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   add:
	//   - name: "my-header"
	//     value: "bar,baz"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: foo,bar,baz
	Add []GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd `pulumi:"add"`
	// Remove the given header(s) from the HTTP request before the action. The
	// value of Remove is a list of HTTP header names. Note that the header
	// names are case-insensitive (see
	// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header1: foo
	//   my-header2: bar
	//   my-header3: baz
	//
	// Config:
	//   remove: ["my-header1", "my-header3"]
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header2: bar
	Remove []string `pulumi:"remove"`
	// Set overwrites the request with the given header (name, value)
	// before the action.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   set:
	//   - name: "my-header"
	//     value: "bar"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: bar
	Set []GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet `pulumi:"set"`
}

// GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs and GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs{...}
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput
}

// RequestHeaderModifier defines a schema for a filter that modifies request
// headers.
//
// Support: Core
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs struct {
	// Add adds the given header(s) (name, value) to the request
	// before the action. It appends to any existing values associated
	// with the header name.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   add:
	//   - name: "my-header"
	//     value: "bar,baz"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: foo,bar,baz
	Add GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayInput `pulumi:"add"`
	// Remove the given header(s) from the HTTP request before the action. The
	// value of Remove is a list of HTTP header names. Note that the header
	// names are case-insensitive (see
	// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header1: foo
	//   my-header2: bar
	//   my-header3: baz
	//
	// Config:
	//   remove: ["my-header1", "my-header3"]
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header2: bar
	Remove pulumi.StringArrayInput `pulumi:"remove"`
	// Set overwrites the request with the given header (name, value)
	// before the action.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   set:
	//   - name: "my-header"
	//     value: "bar"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: bar
	Set GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayInput `pulumi:"set"`
}

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput)
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput).ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs, GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtr and GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrInput` via:
//
//	        GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput
}

type grpcrouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrType GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs

func GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtr(v *GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrInput {
	return (*grpcrouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrType)(v)
}

func (*grpcrouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier)(nil)).Elem()
}

func (i *grpcrouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrType) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrType) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput)
}

// RequestHeaderModifier defines a schema for a filter that modifies request
// headers.
//
// Support: Core
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput {
	return o.ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier) *GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier {
		return &v
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput)
}

// Add adds the given header(s) (name, value) to the request
// before the action. It appends to any existing values associated
// with the header name.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	add:
//	- name: "my-header"
//	  value: "bar,baz"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: foo,bar,baz
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput) Add() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier) []GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd {
		return v.Add
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput)
}

// Remove the given header(s) from the HTTP request before the action. The
// value of Remove is a list of HTTP header names. Note that the header
// names are case-insensitive (see
// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header1: foo
//	my-header2: bar
//	my-header3: baz
//
// Config:
//
//	remove: ["my-header1", "my-header3"]
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header2: bar
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier) []string { return v.Remove }).(pulumi.StringArrayOutput)
}

// Set overwrites the request with the given header (name, value)
// before the action.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	set:
//	- name: "my-header"
//	  value: "bar"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: bar
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput) Set() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier) []GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet {
		return v.Set
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput)
}

type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput) Elem() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier
		return ret
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput)
}

// Add adds the given header(s) (name, value) to the request
// before the action. It appends to any existing values associated
// with the header name.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	add:
//	- name: "my-header"
//	  value: "bar,baz"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: foo,bar,baz
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput) Add() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier) []GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd {
		if v == nil {
			return nil
		}
		return v.Add
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput)
}

// Remove the given header(s) from the HTTP request before the action. The
// value of Remove is a list of HTTP header names. Note that the header
// names are case-insensitive (see
// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header1: foo
//	my-header2: bar
//	my-header3: baz
//
// Config:
//
//	remove: ["my-header1", "my-header3"]
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header2: bar
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier) []string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringArrayOutput)
}

// Set overwrites the request with the given header (name, value)
// before the action.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	set:
//	- name: "my-header"
//	  value: "bar"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: bar
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput) Set() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier) []GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet {
		if v == nil {
			return nil
		}
		return v.Set
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name *string `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value *string `pulumi:"value"`
}

// GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArgs and GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArgs{...}
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArgs struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput)
}

// GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArray and GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArray{ GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArgs{...} }
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput
}

type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArray []GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddInput

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArray) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArray) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput {
	return o
}

// Name is the name of the HTTP Header to be matched. Name matching MUST be
// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
//
// If multiple entries specify equivalent header names, the first entry with
// an equivalent name MUST be considered for a match. Subsequent entries
// with an equivalent header name MUST be ignored. Due to the
// case-insensitivity of header names, "foo" and "Foo" are considered
// equivalent.
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value is the value of HTTP Header to be matched.
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd {
		return vs[0].([]GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd)[vs[1].(int)]
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatch struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name *string `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value *string `pulumi:"value"`
}

// GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArgs and GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArgs{...}
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchOutput
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArgs struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchOutput)
}

// GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArrayInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArray and GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArrayInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArray{ GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArgs{...} }
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArrayOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArrayOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArrayOutput
}

type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArray []GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchInput

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArray) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArrayOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArray) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchOutput {
	return o
}

// Name is the name of the HTTP Header to be matched. Name matching MUST be
// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
//
// If multiple entries specify equivalent header names, the first entry with
// an equivalent name MUST be considered for a match. Subsequent entries
// with an equivalent header name MUST be ignored. Due to the
// case-insensitivity of header names, "foo" and "Foo" are considered
// equivalent.
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value is the value of HTTP Header to be matched.
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatch) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArrayOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArrayOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatch {
		return vs[0].([]GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatch)[vs[1].(int)]
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchOutput)
}

// RequestHeaderModifier defines a schema for a filter that modifies request
// headers.
//
// Support: Core
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatch struct {
	// Add adds the given header(s) (name, value) to the request
	// before the action. It appends to any existing values associated
	// with the header name.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   add:
	//   - name: "my-header"
	//     value: "bar,baz"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: foo,bar,baz
	Add []GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatch `pulumi:"add"`
	// Remove the given header(s) from the HTTP request before the action. The
	// value of Remove is a list of HTTP header names. Note that the header
	// names are case-insensitive (see
	// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header1: foo
	//   my-header2: bar
	//   my-header3: baz
	//
	// Config:
	//   remove: ["my-header1", "my-header3"]
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header2: bar
	Remove []string `pulumi:"remove"`
	// Set overwrites the request with the given header (name, value)
	// before the action.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   set:
	//   - name: "my-header"
	//     value: "bar"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: bar
	Set []GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatch `pulumi:"set"`
}

// GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchArgs and GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchArgs{...}
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchOutput
}

// RequestHeaderModifier defines a schema for a filter that modifies request
// headers.
//
// Support: Core
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchArgs struct {
	// Add adds the given header(s) (name, value) to the request
	// before the action. It appends to any existing values associated
	// with the header name.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   add:
	//   - name: "my-header"
	//     value: "bar,baz"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: foo,bar,baz
	Add GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArrayInput `pulumi:"add"`
	// Remove the given header(s) from the HTTP request before the action. The
	// value of Remove is a list of HTTP header names. Note that the header
	// names are case-insensitive (see
	// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header1: foo
	//   my-header2: bar
	//   my-header3: baz
	//
	// Config:
	//   remove: ["my-header1", "my-header3"]
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header2: bar
	Remove pulumi.StringArrayInput `pulumi:"remove"`
	// Set overwrites the request with the given header (name, value)
	// before the action.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   set:
	//   - name: "my-header"
	//     value: "bar"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: bar
	Set GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArrayInput `pulumi:"set"`
}

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchOutput)
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchOutput).ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchArgs, GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtr and GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrInput` via:
//
//	        GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutput
}

type grpcrouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrType GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchArgs

func GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtr(v *GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchArgs) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrInput {
	return (*grpcrouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrType)(v)
}

func (*grpcrouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatch)(nil)).Elem()
}

func (i *grpcrouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrType) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrType) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutput)
}

// RequestHeaderModifier defines a schema for a filter that modifies request
// headers.
//
// Support: Core
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutput {
	return o.ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatch) *GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatch {
		return &v
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutput)
}

// Add adds the given header(s) (name, value) to the request
// before the action. It appends to any existing values associated
// with the header name.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	add:
//	- name: "my-header"
//	  value: "bar,baz"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: foo,bar,baz
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchOutput) Add() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatch) []GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatch {
		return v.Add
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArrayOutput)
}

// Remove the given header(s) from the HTTP request before the action. The
// value of Remove is a list of HTTP header names. Note that the header
// names are case-insensitive (see
// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header1: foo
//	my-header2: bar
//	my-header3: baz
//
// Config:
//
//	remove: ["my-header1", "my-header3"]
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header2: bar
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatch) []string { return v.Remove }).(pulumi.StringArrayOutput)
}

// Set overwrites the request with the given header (name, value)
// before the action.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	set:
//	- name: "my-header"
//	  value: "bar"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: bar
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchOutput) Set() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatch) []GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatch {
		return v.Set
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArrayOutput)
}

type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutput) Elem() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatch) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatch {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatch
		return ret
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchOutput)
}

// Add adds the given header(s) (name, value) to the request
// before the action. It appends to any existing values associated
// with the header name.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	add:
//	- name: "my-header"
//	  value: "bar,baz"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: foo,bar,baz
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutput) Add() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatch) []GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatch {
		if v == nil {
			return nil
		}
		return v.Add
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArrayOutput)
}

// Remove the given header(s) from the HTTP request before the action. The
// value of Remove is a list of HTTP header names. Note that the header
// names are case-insensitive (see
// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header1: foo
//	my-header2: bar
//	my-header3: baz
//
// Config:
//
//	remove: ["my-header1", "my-header3"]
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header2: bar
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatch) []string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringArrayOutput)
}

// Set overwrites the request with the given header (name, value)
// before the action.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	set:
//	- name: "my-header"
//	  value: "bar"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: bar
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutput) Set() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatch) []GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatch {
		if v == nil {
			return nil
		}
		return v.Set
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name *string `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value *string `pulumi:"value"`
}

// GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArgs and GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArgs{...}
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArgs struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput)
}

// GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArray and GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArray{ GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArgs{...} }
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput
}

type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArray []GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetInput

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArray) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArray) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput {
	return o
}

// Name is the name of the HTTP Header to be matched. Name matching MUST be
// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
//
// If multiple entries specify equivalent header names, the first entry with
// an equivalent name MUST be considered for a match. Subsequent entries
// with an equivalent header name MUST be ignored. Due to the
// case-insensitivity of header names, "foo" and "Foo" are considered
// equivalent.
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value is the value of HTTP Header to be matched.
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet {
		return vs[0].([]GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet)[vs[1].(int)]
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatch struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name *string `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value *string `pulumi:"value"`
}

// GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArgs and GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArgs{...}
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchOutput
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArgs struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchOutput)
}

// GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArrayInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArray and GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArrayInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArray{ GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArgs{...} }
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArrayOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArrayOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArrayOutput
}

type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArray []GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchInput

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArray) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArrayOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArray) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchOutput {
	return o
}

// Name is the name of the HTTP Header to be matched. Name matching MUST be
// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
//
// If multiple entries specify equivalent header names, the first entry with
// an equivalent name MUST be considered for a match. Subsequent entries
// with an equivalent header name MUST be ignored. Due to the
// case-insensitivity of header names, "foo" and "Foo" are considered
// equivalent.
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value is the value of HTTP Header to be matched.
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatch) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArrayOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArrayOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatch {
		return vs[0].([]GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatch)[vs[1].(int)]
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchOutput)
}

// RequestMirror defines a schema for a filter that mirrors requests.
// Requests are sent to the specified destination, but responses from
// that destination are ignored.
//
// This filter can be used multiple times within the same rule. Note that
// not all implementations will be able to support mirroring to multiple
// backends.
//
// Support: Extended
type GRPCRouteSpecRulesBackendRefsFiltersRequestMirror struct {
	BackendRef *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef `pulumi:"backendRef"`
}

// GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs and GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs{...}
type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput
}

// RequestMirror defines a schema for a filter that mirrors requests.
// Requests are sent to the specified destination, but responses from
// that destination are ignored.
//
// This filter can be used multiple times within the same rule. Note that
// not all implementations will be able to support mirroring to multiple
// backends.
//
// Support: Extended
type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs struct {
	BackendRef GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrInput `pulumi:"backendRef"`
}

func (GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestMirror)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput)
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput).ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs, GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtr and GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrInput` via:
//
//	        GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput
}

type grpcrouteSpecRulesBackendRefsFiltersRequestMirrorPtrType GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs

func GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtr(v *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrInput {
	return (*grpcrouteSpecRulesBackendRefsFiltersRequestMirrorPtrType)(v)
}

func (*grpcrouteSpecRulesBackendRefsFiltersRequestMirrorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesBackendRefsFiltersRequestMirror)(nil)).Elem()
}

func (i *grpcrouteSpecRulesBackendRefsFiltersRequestMirrorPtrType) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesBackendRefsFiltersRequestMirrorPtrType) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput)
}

// RequestMirror defines a schema for a filter that mirrors requests.
// Requests are sent to the specified destination, but responses from
// that destination are ignored.
//
// This filter can be used multiple times within the same rule. Note that
// not all implementations will be able to support mirroring to multiple
// backends.
//
// Support: Extended
type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestMirror)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput {
	return o.ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesBackendRefsFiltersRequestMirror) *GRPCRouteSpecRulesBackendRefsFiltersRequestMirror {
		return &v
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput)
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput) BackendRef() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestMirror) *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef {
		return v.BackendRef
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput)
}

type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesBackendRefsFiltersRequestMirror)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput) Elem() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestMirror) GRPCRouteSpecRulesBackendRefsFiltersRequestMirror {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesBackendRefsFiltersRequestMirror
		return ret
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput)
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput) BackendRef() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestMirror) *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef {
		if v == nil {
			return nil
		}
		return v.BackendRef
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput)
}

// BackendRef references a resource where mirrored requests are sent.
//
// Mirrored requests must be sent only to a single destination endpoint
// within this BackendRef, irrespective of how many endpoints are present
// within this BackendRef.
//
// If the referent cannot be found, this BackendRef is invalid and must be
// dropped from the Gateway. The controller must ensure the "ResolvedRefs"
// condition on the Route status is set to `status: False` and not configure
// this backend in the underlying implementation.
//
// If there is a cross-namespace reference to an *existing* object
// that is not allowed by a ReferenceGrant, the controller must ensure the
// "ResolvedRefs"  condition on the Route is set to `status: False`,
// with the "RefNotPermitted" reason and not configure this backend in the
// underlying implementation.
//
// In either error case, the Message of the `ResolvedRefs` Condition
// should be used to provide more detail about the problem.
//
// Support: Extended for Kubernetes Service
//
// Support: Implementation-specific for any other resource
type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef struct {
	// Group is the group of the referent. For example, "gateway.networking.k8s.io".
	// When unspecified or empty string, core API group is inferred.
	Group *string `pulumi:"group"`
	// Kind is the Kubernetes resource kind of the referent. For example
	// "Service".
	//
	// Defaults to "Service" when not specified.
	//
	// ExternalName services can refer to CNAME DNS records that may live
	// outside of the cluster and as such are difficult to reason about in
	// terms of conformance. They also may not be safe to forward to (see
	// CVE-2021-25740 for more information). Implementations SHOULD NOT
	// support ExternalName Services.
	//
	// Support: Core (Services with a type other than ExternalName)
	//
	// Support: Implementation-specific (Services with type ExternalName)
	Kind *string `pulumi:"kind"`
	// Name is the name of the referent.
	Name *string `pulumi:"name"`
	// Namespace is the namespace of the backend. When unspecified, the local
	// namespace is inferred.
	//
	// Note that when a namespace different than the local namespace is specified,
	// a ReferenceGrant object is required in the referent namespace to allow that
	// namespace's owner to accept the reference. See the ReferenceGrant
	// documentation for details.
	//
	// Support: Core
	Namespace *string `pulumi:"namespace"`
	// Port specifies the destination port number to use for this resource.
	// Port is required when the referent is a Kubernetes Service. In this
	// case, the port number is the service port number, not the target port.
	// For other resources, destination port might be derived from the referent
	// resource or this field.
	Port *int `pulumi:"port"`
}

// GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs and GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs{...}
type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput
}

// BackendRef references a resource where mirrored requests are sent.
//
// Mirrored requests must be sent only to a single destination endpoint
// within this BackendRef, irrespective of how many endpoints are present
// within this BackendRef.
//
// If the referent cannot be found, this BackendRef is invalid and must be
// dropped from the Gateway. The controller must ensure the "ResolvedRefs"
// condition on the Route status is set to `status: False` and not configure
// this backend in the underlying implementation.
//
// If there is a cross-namespace reference to an *existing* object
// that is not allowed by a ReferenceGrant, the controller must ensure the
// "ResolvedRefs"  condition on the Route is set to `status: False`,
// with the "RefNotPermitted" reason and not configure this backend in the
// underlying implementation.
//
// In either error case, the Message of the `ResolvedRefs` Condition
// should be used to provide more detail about the problem.
//
// Support: Extended for Kubernetes Service
//
// Support: Implementation-specific for any other resource
type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs struct {
	// Group is the group of the referent. For example, "gateway.networking.k8s.io".
	// When unspecified or empty string, core API group is inferred.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind is the Kubernetes resource kind of the referent. For example
	// "Service".
	//
	// Defaults to "Service" when not specified.
	//
	// ExternalName services can refer to CNAME DNS records that may live
	// outside of the cluster and as such are difficult to reason about in
	// terms of conformance. They also may not be safe to forward to (see
	// CVE-2021-25740 for more information). Implementations SHOULD NOT
	// support ExternalName Services.
	//
	// Support: Core (Services with a type other than ExternalName)
	//
	// Support: Implementation-specific (Services with type ExternalName)
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace is the namespace of the backend. When unspecified, the local
	// namespace is inferred.
	//
	// Note that when a namespace different than the local namespace is specified,
	// a ReferenceGrant object is required in the referent namespace to allow that
	// namespace's owner to accept the reference. See the ReferenceGrant
	// documentation for details.
	//
	// Support: Core
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Port specifies the destination port number to use for this resource.
	// Port is required when the referent is a Kubernetes Service. In this
	// case, the port number is the service port number, not the target port.
	// For other resources, destination port might be derived from the referent
	// resource or this field.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput)
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput).ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs, GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtr and GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrInput` via:
//
//	        GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput
}

type grpcrouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrType GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs

func GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtr(v *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrInput {
	return (*grpcrouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrType)(v)
}

func (*grpcrouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef)(nil)).Elem()
}

func (i *grpcrouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrType) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrType) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput)
}

// BackendRef references a resource where mirrored requests are sent.
//
// Mirrored requests must be sent only to a single destination endpoint
// within this BackendRef, irrespective of how many endpoints are present
// within this BackendRef.
//
// If the referent cannot be found, this BackendRef is invalid and must be
// dropped from the Gateway. The controller must ensure the "ResolvedRefs"
// condition on the Route status is set to `status: False` and not configure
// this backend in the underlying implementation.
//
// If there is a cross-namespace reference to an *existing* object
// that is not allowed by a ReferenceGrant, the controller must ensure the
// "ResolvedRefs"  condition on the Route is set to `status: False`,
// with the "RefNotPermitted" reason and not configure this backend in the
// underlying implementation.
//
// In either error case, the Message of the `ResolvedRefs` Condition
// should be used to provide more detail about the problem.
//
// Support: Extended for Kubernetes Service
//
// Support: Implementation-specific for any other resource
type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput {
	return o.ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef) *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef {
		return &v
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput)
}

// Group is the group of the referent. For example, "gateway.networking.k8s.io".
// When unspecified or empty string, core API group is inferred.
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind is the Kubernetes resource kind of the referent. For example
// "Service".
//
// Defaults to "Service" when not specified.
//
// ExternalName services can refer to CNAME DNS records that may live
// outside of the cluster and as such are difficult to reason about in
// terms of conformance. They also may not be safe to forward to (see
// CVE-2021-25740 for more information). Implementations SHOULD NOT
// support ExternalName Services.
//
// Support: Core (Services with a type other than ExternalName)
//
// Support: Implementation-specific (Services with type ExternalName)
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the backend. When unspecified, the local
// namespace is inferred.
//
// Note that when a namespace different than the local namespace is specified,
// a ReferenceGrant object is required in the referent namespace to allow that
// namespace's owner to accept the reference. See the ReferenceGrant
// documentation for details.
//
// Support: Core
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Port specifies the destination port number to use for this resource.
// Port is required when the referent is a Kubernetes Service. In this
// case, the port number is the service port number, not the target port.
// For other resources, destination port might be derived from the referent
// resource or this field.
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput) Elem() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef
		return ret
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput)
}

// Group is the group of the referent. For example, "gateway.networking.k8s.io".
// When unspecified or empty string, core API group is inferred.
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Kind is the Kubernetes resource kind of the referent. For example
// "Service".
//
// Defaults to "Service" when not specified.
//
// ExternalName services can refer to CNAME DNS records that may live
// outside of the cluster and as such are difficult to reason about in
// terms of conformance. They also may not be safe to forward to (see
// CVE-2021-25740 for more information). Implementations SHOULD NOT
// support ExternalName Services.
//
// Support: Core (Services with a type other than ExternalName)
//
// Support: Implementation-specific (Services with type ExternalName)
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the backend. When unspecified, the local
// namespace is inferred.
//
// Note that when a namespace different than the local namespace is specified,
// a ReferenceGrant object is required in the referent namespace to allow that
// namespace's owner to accept the reference. See the ReferenceGrant
// documentation for details.
//
// Support: Core
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Port specifies the destination port number to use for this resource.
// Port is required when the referent is a Kubernetes Service. In this
// case, the port number is the service port number, not the target port.
// For other resources, destination port might be derived from the referent
// resource or this field.
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// BackendRef references a resource where mirrored requests are sent.
//
// Mirrored requests must be sent only to a single destination endpoint
// within this BackendRef, irrespective of how many endpoints are present
// within this BackendRef.
//
// If the referent cannot be found, this BackendRef is invalid and must be
// dropped from the Gateway. The controller must ensure the "ResolvedRefs"
// condition on the Route status is set to `status: False` and not configure
// this backend in the underlying implementation.
//
// If there is a cross-namespace reference to an *existing* object
// that is not allowed by a ReferenceGrant, the controller must ensure the
// "ResolvedRefs"  condition on the Route is set to `status: False`,
// with the "RefNotPermitted" reason and not configure this backend in the
// underlying implementation.
//
// In either error case, the Message of the `ResolvedRefs` Condition
// should be used to provide more detail about the problem.
//
// Support: Extended for Kubernetes Service
//
// Support: Implementation-specific for any other resource
type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch struct {
	// Group is the group of the referent. For example, "gateway.networking.k8s.io".
	// When unspecified or empty string, core API group is inferred.
	Group *string `pulumi:"group"`
	// Kind is the Kubernetes resource kind of the referent. For example
	// "Service".
	//
	// Defaults to "Service" when not specified.
	//
	// ExternalName services can refer to CNAME DNS records that may live
	// outside of the cluster and as such are difficult to reason about in
	// terms of conformance. They also may not be safe to forward to (see
	// CVE-2021-25740 for more information). Implementations SHOULD NOT
	// support ExternalName Services.
	//
	// Support: Core (Services with a type other than ExternalName)
	//
	// Support: Implementation-specific (Services with type ExternalName)
	Kind *string `pulumi:"kind"`
	// Name is the name of the referent.
	Name *string `pulumi:"name"`
	// Namespace is the namespace of the backend. When unspecified, the local
	// namespace is inferred.
	//
	// Note that when a namespace different than the local namespace is specified,
	// a ReferenceGrant object is required in the referent namespace to allow that
	// namespace's owner to accept the reference. See the ReferenceGrant
	// documentation for details.
	//
	// Support: Core
	Namespace *string `pulumi:"namespace"`
	// Port specifies the destination port number to use for this resource.
	// Port is required when the referent is a Kubernetes Service. In this
	// case, the port number is the service port number, not the target port.
	// For other resources, destination port might be derived from the referent
	// resource or this field.
	Port *int `pulumi:"port"`
}

// GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchArgs and GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchArgs{...}
type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchOutput
}

// BackendRef references a resource where mirrored requests are sent.
//
// Mirrored requests must be sent only to a single destination endpoint
// within this BackendRef, irrespective of how many endpoints are present
// within this BackendRef.
//
// If the referent cannot be found, this BackendRef is invalid and must be
// dropped from the Gateway. The controller must ensure the "ResolvedRefs"
// condition on the Route status is set to `status: False` and not configure
// this backend in the underlying implementation.
//
// If there is a cross-namespace reference to an *existing* object
// that is not allowed by a ReferenceGrant, the controller must ensure the
// "ResolvedRefs"  condition on the Route is set to `status: False`,
// with the "RefNotPermitted" reason and not configure this backend in the
// underlying implementation.
//
// In either error case, the Message of the `ResolvedRefs` Condition
// should be used to provide more detail about the problem.
//
// Support: Extended for Kubernetes Service
//
// Support: Implementation-specific for any other resource
type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchArgs struct {
	// Group is the group of the referent. For example, "gateway.networking.k8s.io".
	// When unspecified or empty string, core API group is inferred.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind is the Kubernetes resource kind of the referent. For example
	// "Service".
	//
	// Defaults to "Service" when not specified.
	//
	// ExternalName services can refer to CNAME DNS records that may live
	// outside of the cluster and as such are difficult to reason about in
	// terms of conformance. They also may not be safe to forward to (see
	// CVE-2021-25740 for more information). Implementations SHOULD NOT
	// support ExternalName Services.
	//
	// Support: Core (Services with a type other than ExternalName)
	//
	// Support: Implementation-specific (Services with type ExternalName)
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace is the namespace of the backend. When unspecified, the local
	// namespace is inferred.
	//
	// Note that when a namespace different than the local namespace is specified,
	// a ReferenceGrant object is required in the referent namespace to allow that
	// namespace's owner to accept the reference. See the ReferenceGrant
	// documentation for details.
	//
	// Support: Core
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Port specifies the destination port number to use for this resource.
	// Port is required when the referent is a Kubernetes Service. In this
	// case, the port number is the service port number, not the target port.
	// For other resources, destination port might be derived from the referent
	// resource or this field.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchOutput)
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchOutput).ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchArgs, GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtr and GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrInput` via:
//
//	        GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput
}

type grpcrouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrType GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchArgs

func GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtr(v *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchArgs) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrInput {
	return (*grpcrouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrType)(v)
}

func (*grpcrouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch)(nil)).Elem()
}

func (i *grpcrouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrType) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrType) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput)
}

// BackendRef references a resource where mirrored requests are sent.
//
// Mirrored requests must be sent only to a single destination endpoint
// within this BackendRef, irrespective of how many endpoints are present
// within this BackendRef.
//
// If the referent cannot be found, this BackendRef is invalid and must be
// dropped from the Gateway. The controller must ensure the "ResolvedRefs"
// condition on the Route status is set to `status: False` and not configure
// this backend in the underlying implementation.
//
// If there is a cross-namespace reference to an *existing* object
// that is not allowed by a ReferenceGrant, the controller must ensure the
// "ResolvedRefs"  condition on the Route is set to `status: False`,
// with the "RefNotPermitted" reason and not configure this backend in the
// underlying implementation.
//
// In either error case, the Message of the `ResolvedRefs` Condition
// should be used to provide more detail about the problem.
//
// Support: Extended for Kubernetes Service
//
// Support: Implementation-specific for any other resource
type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput {
	return o.ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch) *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch {
		return &v
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput)
}

// Group is the group of the referent. For example, "gateway.networking.k8s.io".
// When unspecified or empty string, core API group is inferred.
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind is the Kubernetes resource kind of the referent. For example
// "Service".
//
// Defaults to "Service" when not specified.
//
// ExternalName services can refer to CNAME DNS records that may live
// outside of the cluster and as such are difficult to reason about in
// terms of conformance. They also may not be safe to forward to (see
// CVE-2021-25740 for more information). Implementations SHOULD NOT
// support ExternalName Services.
//
// Support: Core (Services with a type other than ExternalName)
//
// Support: Implementation-specific (Services with type ExternalName)
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the backend. When unspecified, the local
// namespace is inferred.
//
// Note that when a namespace different than the local namespace is specified,
// a ReferenceGrant object is required in the referent namespace to allow that
// namespace's owner to accept the reference. See the ReferenceGrant
// documentation for details.
//
// Support: Core
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Port specifies the destination port number to use for this resource.
// Port is required when the referent is a Kubernetes Service. In this
// case, the port number is the service port number, not the target port.
// For other resources, destination port might be derived from the referent
// resource or this field.
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput) Elem() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch
		return ret
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchOutput)
}

// Group is the group of the referent. For example, "gateway.networking.k8s.io".
// When unspecified or empty string, core API group is inferred.
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Kind is the Kubernetes resource kind of the referent. For example
// "Service".
//
// Defaults to "Service" when not specified.
//
// ExternalName services can refer to CNAME DNS records that may live
// outside of the cluster and as such are difficult to reason about in
// terms of conformance. They also may not be safe to forward to (see
// CVE-2021-25740 for more information). Implementations SHOULD NOT
// support ExternalName Services.
//
// Support: Core (Services with a type other than ExternalName)
//
// Support: Implementation-specific (Services with type ExternalName)
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the backend. When unspecified, the local
// namespace is inferred.
//
// Note that when a namespace different than the local namespace is specified,
// a ReferenceGrant object is required in the referent namespace to allow that
// namespace's owner to accept the reference. See the ReferenceGrant
// documentation for details.
//
// Support: Core
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Port specifies the destination port number to use for this resource.
// Port is required when the referent is a Kubernetes Service. In this
// case, the port number is the service port number, not the target port.
// For other resources, destination port might be derived from the referent
// resource or this field.
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// RequestMirror defines a schema for a filter that mirrors requests.
// Requests are sent to the specified destination, but responses from
// that destination are ignored.
//
// This filter can be used multiple times within the same rule. Note that
// not all implementations will be able to support mirroring to multiple
// backends.
//
// Support: Extended
type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatch struct {
	BackendRef *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch `pulumi:"backendRef"`
}

// GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchArgs and GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchArgs{...}
type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchOutput
}

// RequestMirror defines a schema for a filter that mirrors requests.
// Requests are sent to the specified destination, but responses from
// that destination are ignored.
//
// This filter can be used multiple times within the same rule. Note that
// not all implementations will be able to support mirroring to multiple
// backends.
//
// Support: Extended
type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchArgs struct {
	BackendRef GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrInput `pulumi:"backendRef"`
}

func (GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchOutput)
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchOutput).ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchArgs, GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtr and GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrInput` via:
//
//	        GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutput
}

type grpcrouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrType GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchArgs

func GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtr(v *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchArgs) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrInput {
	return (*grpcrouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrType)(v)
}

func (*grpcrouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatch)(nil)).Elem()
}

func (i *grpcrouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrType) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrType) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutput)
}

// RequestMirror defines a schema for a filter that mirrors requests.
// Requests are sent to the specified destination, but responses from
// that destination are ignored.
//
// This filter can be used multiple times within the same rule. Note that
// not all implementations will be able to support mirroring to multiple
// backends.
//
// Support: Extended
type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutput {
	return o.ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatch) *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatch {
		return &v
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutput)
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchOutput) BackendRef() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatch) *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch {
		return v.BackendRef
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput)
}

type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutput) Elem() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatch) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatch {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatch
		return ret
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchOutput)
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutput) BackendRef() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatch) *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatch {
		if v == nil {
			return nil
		}
		return v.BackendRef
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput)
}

// ResponseHeaderModifier defines a schema for a filter that modifies response
// headers.
//
// Support: Extended
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier struct {
	// Add adds the given header(s) (name, value) to the request
	// before the action. It appends to any existing values associated
	// with the header name.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   add:
	//   - name: "my-header"
	//     value: "bar,baz"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: foo,bar,baz
	Add []GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd `pulumi:"add"`
	// Remove the given header(s) from the HTTP request before the action. The
	// value of Remove is a list of HTTP header names. Note that the header
	// names are case-insensitive (see
	// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header1: foo
	//   my-header2: bar
	//   my-header3: baz
	//
	// Config:
	//   remove: ["my-header1", "my-header3"]
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header2: bar
	Remove []string `pulumi:"remove"`
	// Set overwrites the request with the given header (name, value)
	// before the action.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   set:
	//   - name: "my-header"
	//     value: "bar"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: bar
	Set []GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet `pulumi:"set"`
}

// GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs and GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs{...}
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput
}

// ResponseHeaderModifier defines a schema for a filter that modifies response
// headers.
//
// Support: Extended
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs struct {
	// Add adds the given header(s) (name, value) to the request
	// before the action. It appends to any existing values associated
	// with the header name.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   add:
	//   - name: "my-header"
	//     value: "bar,baz"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: foo,bar,baz
	Add GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayInput `pulumi:"add"`
	// Remove the given header(s) from the HTTP request before the action. The
	// value of Remove is a list of HTTP header names. Note that the header
	// names are case-insensitive (see
	// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header1: foo
	//   my-header2: bar
	//   my-header3: baz
	//
	// Config:
	//   remove: ["my-header1", "my-header3"]
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header2: bar
	Remove pulumi.StringArrayInput `pulumi:"remove"`
	// Set overwrites the request with the given header (name, value)
	// before the action.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   set:
	//   - name: "my-header"
	//     value: "bar"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: bar
	Set GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayInput `pulumi:"set"`
}

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput)
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput).ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs, GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtr and GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrInput` via:
//
//	        GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput
}

type grpcrouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrType GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs

func GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtr(v *GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrInput {
	return (*grpcrouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrType)(v)
}

func (*grpcrouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier)(nil)).Elem()
}

func (i *grpcrouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrType) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrType) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput)
}

// ResponseHeaderModifier defines a schema for a filter that modifies response
// headers.
//
// Support: Extended
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput {
	return o.ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier) *GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier {
		return &v
	}).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput)
}

// Add adds the given header(s) (name, value) to the request
// before the action. It appends to any existing values associated
// with the header name.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	add:
//	- name: "my-header"
//	  value: "bar,baz"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: foo,bar,baz
func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput) Add() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier) []GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd {
		return v.Add
	}).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput)
}

// Remove the given header(s) from the HTTP request before the action. The
// value of Remove is a list of HTTP header names. Note that the header
// names are case-insensitive (see
// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header1: foo
//	my-header2: bar
//	my-header3: baz
//
// Config:
//
//	remove: ["my-header1", "my-header3"]
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header2: bar
func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier) []string { return v.Remove }).(pulumi.StringArrayOutput)
}

// Set overwrites the request with the given header (name, value)
// before the action.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	set:
//	- name: "my-header"
//	  value: "bar"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: bar
func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput) Set() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier) []GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet {
		return v.Set
	}).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput)
}

type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput) Elem() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier
		return ret
	}).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput)
}

// Add adds the given header(s) (name, value) to the request
// before the action. It appends to any existing values associated
// with the header name.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	add:
//	- name: "my-header"
//	  value: "bar,baz"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: foo,bar,baz
func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput) Add() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier) []GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd {
		if v == nil {
			return nil
		}
		return v.Add
	}).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput)
}

// Remove the given header(s) from the HTTP request before the action. The
// value of Remove is a list of HTTP header names. Note that the header
// names are case-insensitive (see
// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header1: foo
//	my-header2: bar
//	my-header3: baz
//
// Config:
//
//	remove: ["my-header1", "my-header3"]
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header2: bar
func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier) []string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringArrayOutput)
}

// Set overwrites the request with the given header (name, value)
// before the action.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	set:
//	- name: "my-header"
//	  value: "bar"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: bar
func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput) Set() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier) []GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet {
		if v == nil {
			return nil
		}
		return v.Set
	}).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name *string `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value *string `pulumi:"value"`
}

// GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArgs and GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArgs{...}
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArgs struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArgs) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArgs) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput)
}

// GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArray and GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArray{ GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArgs{...} }
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput
}

type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArray []GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddInput

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArray) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArray) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput {
	return o
}

// Name is the name of the HTTP Header to be matched. Name matching MUST be
// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
//
// If multiple entries specify equivalent header names, the first entry with
// an equivalent name MUST be considered for a match. Subsequent entries
// with an equivalent header name MUST be ignored. Due to the
// case-insensitivity of header names, "foo" and "Foo" are considered
// equivalent.
func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value is the value of HTTP Header to be matched.
func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd {
		return vs[0].([]GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd)[vs[1].(int)]
	}).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatch struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name *string `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value *string `pulumi:"value"`
}

// GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArgs and GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArgs{...}
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchOutput
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArgs struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArgs) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArgs) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchOutput)
}

// GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArrayInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArray and GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArrayInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArray{ GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArgs{...} }
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArrayOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArrayOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArrayOutput
}

type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArray []GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchInput

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArray) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArrayOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArray) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchOutput {
	return o
}

// Name is the name of the HTTP Header to be matched. Name matching MUST be
// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
//
// If multiple entries specify equivalent header names, the first entry with
// an equivalent name MUST be considered for a match. Subsequent entries
// with an equivalent header name MUST be ignored. Due to the
// case-insensitivity of header names, "foo" and "Foo" are considered
// equivalent.
func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value is the value of HTTP Header to be matched.
func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatch) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArrayOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArrayOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatch {
		return vs[0].([]GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatch)[vs[1].(int)]
	}).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchOutput)
}

// ResponseHeaderModifier defines a schema for a filter that modifies response
// headers.
//
// Support: Extended
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatch struct {
	// Add adds the given header(s) (name, value) to the request
	// before the action. It appends to any existing values associated
	// with the header name.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   add:
	//   - name: "my-header"
	//     value: "bar,baz"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: foo,bar,baz
	Add []GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatch `pulumi:"add"`
	// Remove the given header(s) from the HTTP request before the action. The
	// value of Remove is a list of HTTP header names. Note that the header
	// names are case-insensitive (see
	// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header1: foo
	//   my-header2: bar
	//   my-header3: baz
	//
	// Config:
	//   remove: ["my-header1", "my-header3"]
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header2: bar
	Remove []string `pulumi:"remove"`
	// Set overwrites the request with the given header (name, value)
	// before the action.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   set:
	//   - name: "my-header"
	//     value: "bar"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: bar
	Set []GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatch `pulumi:"set"`
}

// GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchArgs and GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchArgs{...}
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchOutput
}

// ResponseHeaderModifier defines a schema for a filter that modifies response
// headers.
//
// Support: Extended
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchArgs struct {
	// Add adds the given header(s) (name, value) to the request
	// before the action. It appends to any existing values associated
	// with the header name.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   add:
	//   - name: "my-header"
	//     value: "bar,baz"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: foo,bar,baz
	Add GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArrayInput `pulumi:"add"`
	// Remove the given header(s) from the HTTP request before the action. The
	// value of Remove is a list of HTTP header names. Note that the header
	// names are case-insensitive (see
	// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header1: foo
	//   my-header2: bar
	//   my-header3: baz
	//
	// Config:
	//   remove: ["my-header1", "my-header3"]
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header2: bar
	Remove pulumi.StringArrayInput `pulumi:"remove"`
	// Set overwrites the request with the given header (name, value)
	// before the action.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   set:
	//   - name: "my-header"
	//     value: "bar"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: bar
	Set GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArrayInput `pulumi:"set"`
}

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchArgs) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchArgs) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchOutput)
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchArgs) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchArgs) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchOutput).ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchArgs, GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtr and GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrInput` via:
//
//	        GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutput
}

type grpcrouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrType GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchArgs

func GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtr(v *GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchArgs) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrInput {
	return (*grpcrouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrType)(v)
}

func (*grpcrouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatch)(nil)).Elem()
}

func (i *grpcrouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrType) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrType) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutput)
}

// ResponseHeaderModifier defines a schema for a filter that modifies response
// headers.
//
// Support: Extended
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutput {
	return o.ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatch) *GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatch {
		return &v
	}).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutput)
}

// Add adds the given header(s) (name, value) to the request
// before the action. It appends to any existing values associated
// with the header name.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	add:
//	- name: "my-header"
//	  value: "bar,baz"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: foo,bar,baz
func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchOutput) Add() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatch) []GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatch {
		return v.Add
	}).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArrayOutput)
}

// Remove the given header(s) from the HTTP request before the action. The
// value of Remove is a list of HTTP header names. Note that the header
// names are case-insensitive (see
// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header1: foo
//	my-header2: bar
//	my-header3: baz
//
// Config:
//
//	remove: ["my-header1", "my-header3"]
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header2: bar
func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatch) []string { return v.Remove }).(pulumi.StringArrayOutput)
}

// Set overwrites the request with the given header (name, value)
// before the action.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	set:
//	- name: "my-header"
//	  value: "bar"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: bar
func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchOutput) Set() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatch) []GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatch {
		return v.Set
	}).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArrayOutput)
}

type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutput) Elem() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatch) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatch {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatch
		return ret
	}).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchOutput)
}

// Add adds the given header(s) (name, value) to the request
// before the action. It appends to any existing values associated
// with the header name.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	add:
//	- name: "my-header"
//	  value: "bar,baz"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: foo,bar,baz
func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutput) Add() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatch) []GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatch {
		if v == nil {
			return nil
		}
		return v.Add
	}).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArrayOutput)
}

// Remove the given header(s) from the HTTP request before the action. The
// value of Remove is a list of HTTP header names. Note that the header
// names are case-insensitive (see
// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header1: foo
//	my-header2: bar
//	my-header3: baz
//
// Config:
//
//	remove: ["my-header1", "my-header3"]
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header2: bar
func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatch) []string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringArrayOutput)
}

// Set overwrites the request with the given header (name, value)
// before the action.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	set:
//	- name: "my-header"
//	  value: "bar"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: bar
func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutput) Set() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatch) []GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatch {
		if v == nil {
			return nil
		}
		return v.Set
	}).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name *string `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value *string `pulumi:"value"`
}

// GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArgs and GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArgs{...}
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArgs struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArgs) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArgs) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput)
}

// GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArray and GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArray{ GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArgs{...} }
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput
}

type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArray []GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetInput

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArray) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArray) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput {
	return o
}

// Name is the name of the HTTP Header to be matched. Name matching MUST be
// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
//
// If multiple entries specify equivalent header names, the first entry with
// an equivalent name MUST be considered for a match. Subsequent entries
// with an equivalent header name MUST be ignored. Due to the
// case-insensitivity of header names, "foo" and "Foo" are considered
// equivalent.
func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value is the value of HTTP Header to be matched.
func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet {
		return vs[0].([]GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet)[vs[1].(int)]
	}).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatch struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name *string `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value *string `pulumi:"value"`
}

// GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArgs and GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArgs{...}
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchOutput
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArgs struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArgs) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArgs) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchOutput)
}

// GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArrayInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArray and GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArrayInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArray{ GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArgs{...} }
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArrayOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArrayOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArrayOutput
}

type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArray []GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchInput

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArray) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArrayOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArray) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchOutput {
	return o
}

// Name is the name of the HTTP Header to be matched. Name matching MUST be
// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
//
// If multiple entries specify equivalent header names, the first entry with
// an equivalent name MUST be considered for a match. Subsequent entries
// with an equivalent header name MUST be ignored. Due to the
// case-insensitivity of header names, "foo" and "Foo" are considered
// equivalent.
func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value is the value of HTTP Header to be matched.
func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatch) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArrayOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArrayOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatch {
		return vs[0].([]GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatch)[vs[1].(int)]
	}).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchOutput)
}

// GRPCBackendRef defines how a GRPCRoute forwards a gRPC request.
//
// Note that when a namespace different than the local namespace is specified, a
// ReferenceGrant object is required in the referent namespace to allow that
// namespace's owner to accept the reference. See the ReferenceGrant
// documentation for details.
//
// <gateway:experimental:description>
//
// When the BackendRef points to a Kubernetes Service, implementations SHOULD
// honor the appProtocol field if it is set for the target Service Port.
//
// Implementations supporting appProtocol SHOULD recognize the Kubernetes
// Standard Application Protocols defined in KEP-3726.
//
// If a Service appProtocol isn't specified, an implementation MAY infer the
// backend protocol through its own means. Implementations MAY infer the
// protocol from the Route type referring to the backend Service.
//
// If a Route is not able to send traffic to the backend using the specified
// protocol then the backend is considered invalid. Implementations MUST set the
// "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.
//
// </gateway:experimental:description>
type GRPCRouteSpecRulesBackendRefsPatch struct {
	// Filters defined at this level MUST be executed if and only if the
	// request is being forwarded to the backend defined here.
	//
	// Support: Implementation-specific (For broader support of filters, use the
	// Filters field in GRPCRouteRule.)
	Filters []GRPCRouteSpecRulesBackendRefsFiltersPatch `pulumi:"filters"`
	// Group is the group of the referent. For example, "gateway.networking.k8s.io".
	// When unspecified or empty string, core API group is inferred.
	Group *string `pulumi:"group"`
	// Kind is the Kubernetes resource kind of the referent. For example
	// "Service".
	//
	// Defaults to "Service" when not specified.
	//
	// ExternalName services can refer to CNAME DNS records that may live
	// outside of the cluster and as such are difficult to reason about in
	// terms of conformance. They also may not be safe to forward to (see
	// CVE-2021-25740 for more information). Implementations SHOULD NOT
	// support ExternalName Services.
	//
	// Support: Core (Services with a type other than ExternalName)
	//
	// Support: Implementation-specific (Services with type ExternalName)
	Kind *string `pulumi:"kind"`
	// Name is the name of the referent.
	Name *string `pulumi:"name"`
	// Namespace is the namespace of the backend. When unspecified, the local
	// namespace is inferred.
	//
	// Note that when a namespace different than the local namespace is specified,
	// a ReferenceGrant object is required in the referent namespace to allow that
	// namespace's owner to accept the reference. See the ReferenceGrant
	// documentation for details.
	//
	// Support: Core
	Namespace *string `pulumi:"namespace"`
	// Port specifies the destination port number to use for this resource.
	// Port is required when the referent is a Kubernetes Service. In this
	// case, the port number is the service port number, not the target port.
	// For other resources, destination port might be derived from the referent
	// resource or this field.
	Port *int `pulumi:"port"`
	// Weight specifies the proportion of requests forwarded to the referenced
	// backend. This is computed as weight/(sum of all weights in this
	// BackendRefs list). For non-zero values, there may be some epsilon from
	// the exact proportion defined here depending on the precision an
	// implementation supports. Weight is not a percentage and the sum of
	// weights does not need to equal 100.
	//
	// If only one backend is specified and it has a weight greater than 0, 100%
	// of the traffic is forwarded to that backend. If weight is set to 0, no
	// traffic should be forwarded for this entry. If unspecified, weight
	// defaults to 1.
	//
	// Support for this field varies based on the context where used.
	Weight *int `pulumi:"weight"`
}

// GRPCRouteSpecRulesBackendRefsPatchInput is an input type that accepts GRPCRouteSpecRulesBackendRefsPatchArgs and GRPCRouteSpecRulesBackendRefsPatchOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsPatchInput` via:
//
//	GRPCRouteSpecRulesBackendRefsPatchArgs{...}
type GRPCRouteSpecRulesBackendRefsPatchInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsPatchOutput() GRPCRouteSpecRulesBackendRefsPatchOutput
	ToGRPCRouteSpecRulesBackendRefsPatchOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsPatchOutput
}

// GRPCBackendRef defines how a GRPCRoute forwards a gRPC request.
//
// Note that when a namespace different than the local namespace is specified, a
// ReferenceGrant object is required in the referent namespace to allow that
// namespace's owner to accept the reference. See the ReferenceGrant
// documentation for details.
//
// <gateway:experimental:description>
//
// When the BackendRef points to a Kubernetes Service, implementations SHOULD
// honor the appProtocol field if it is set for the target Service Port.
//
// Implementations supporting appProtocol SHOULD recognize the Kubernetes
// Standard Application Protocols defined in KEP-3726.
//
// If a Service appProtocol isn't specified, an implementation MAY infer the
// backend protocol through its own means. Implementations MAY infer the
// protocol from the Route type referring to the backend Service.
//
// If a Route is not able to send traffic to the backend using the specified
// protocol then the backend is considered invalid. Implementations MUST set the
// "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.
//
// </gateway:experimental:description>
type GRPCRouteSpecRulesBackendRefsPatchArgs struct {
	// Filters defined at this level MUST be executed if and only if the
	// request is being forwarded to the backend defined here.
	//
	// Support: Implementation-specific (For broader support of filters, use the
	// Filters field in GRPCRouteRule.)
	Filters GRPCRouteSpecRulesBackendRefsFiltersPatchArrayInput `pulumi:"filters"`
	// Group is the group of the referent. For example, "gateway.networking.k8s.io".
	// When unspecified or empty string, core API group is inferred.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind is the Kubernetes resource kind of the referent. For example
	// "Service".
	//
	// Defaults to "Service" when not specified.
	//
	// ExternalName services can refer to CNAME DNS records that may live
	// outside of the cluster and as such are difficult to reason about in
	// terms of conformance. They also may not be safe to forward to (see
	// CVE-2021-25740 for more information). Implementations SHOULD NOT
	// support ExternalName Services.
	//
	// Support: Core (Services with a type other than ExternalName)
	//
	// Support: Implementation-specific (Services with type ExternalName)
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace is the namespace of the backend. When unspecified, the local
	// namespace is inferred.
	//
	// Note that when a namespace different than the local namespace is specified,
	// a ReferenceGrant object is required in the referent namespace to allow that
	// namespace's owner to accept the reference. See the ReferenceGrant
	// documentation for details.
	//
	// Support: Core
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Port specifies the destination port number to use for this resource.
	// Port is required when the referent is a Kubernetes Service. In this
	// case, the port number is the service port number, not the target port.
	// For other resources, destination port might be derived from the referent
	// resource or this field.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Weight specifies the proportion of requests forwarded to the referenced
	// backend. This is computed as weight/(sum of all weights in this
	// BackendRefs list). For non-zero values, there may be some epsilon from
	// the exact proportion defined here depending on the precision an
	// implementation supports. Weight is not a percentage and the sum of
	// weights does not need to equal 100.
	//
	// If only one backend is specified and it has a weight greater than 0, 100%
	// of the traffic is forwarded to that backend. If weight is set to 0, no
	// traffic should be forwarded for this entry. If unspecified, weight
	// defaults to 1.
	//
	// Support for this field varies based on the context where used.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (GRPCRouteSpecRulesBackendRefsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsPatchArgs) ToGRPCRouteSpecRulesBackendRefsPatchOutput() GRPCRouteSpecRulesBackendRefsPatchOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsPatchOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsPatchArgs) ToGRPCRouteSpecRulesBackendRefsPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsPatchOutput)
}

// GRPCRouteSpecRulesBackendRefsPatchArrayInput is an input type that accepts GRPCRouteSpecRulesBackendRefsPatchArray and GRPCRouteSpecRulesBackendRefsPatchArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsPatchArrayInput` via:
//
//	GRPCRouteSpecRulesBackendRefsPatchArray{ GRPCRouteSpecRulesBackendRefsPatchArgs{...} }
type GRPCRouteSpecRulesBackendRefsPatchArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsPatchArrayOutput() GRPCRouteSpecRulesBackendRefsPatchArrayOutput
	ToGRPCRouteSpecRulesBackendRefsPatchArrayOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsPatchArrayOutput
}

type GRPCRouteSpecRulesBackendRefsPatchArray []GRPCRouteSpecRulesBackendRefsPatchInput

func (GRPCRouteSpecRulesBackendRefsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsPatchArray) ToGRPCRouteSpecRulesBackendRefsPatchArrayOutput() GRPCRouteSpecRulesBackendRefsPatchArrayOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsPatchArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsPatchArray) ToGRPCRouteSpecRulesBackendRefsPatchArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsPatchArrayOutput)
}

// GRPCBackendRef defines how a GRPCRoute forwards a gRPC request.
//
// Note that when a namespace different than the local namespace is specified, a
// ReferenceGrant object is required in the referent namespace to allow that
// namespace's owner to accept the reference. See the ReferenceGrant
// documentation for details.
//
// <gateway:experimental:description>
//
// When the BackendRef points to a Kubernetes Service, implementations SHOULD
// honor the appProtocol field if it is set for the target Service Port.
//
// Implementations supporting appProtocol SHOULD recognize the Kubernetes
// Standard Application Protocols defined in KEP-3726.
//
// If a Service appProtocol isn't specified, an implementation MAY infer the
// backend protocol through its own means. Implementations MAY infer the
// protocol from the Route type referring to the backend Service.
//
// If a Route is not able to send traffic to the backend using the specified
// protocol then the backend is considered invalid. Implementations MUST set the
// "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.
//
// </gateway:experimental:description>
type GRPCRouteSpecRulesBackendRefsPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsPatchOutput) ToGRPCRouteSpecRulesBackendRefsPatchOutput() GRPCRouteSpecRulesBackendRefsPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsPatchOutput) ToGRPCRouteSpecRulesBackendRefsPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsPatchOutput {
	return o
}

// Filters defined at this level MUST be executed if and only if the
// request is being forwarded to the backend defined here.
//
// Support: Implementation-specific (For broader support of filters, use the
// Filters field in GRPCRouteRule.)
func (o GRPCRouteSpecRulesBackendRefsPatchOutput) Filters() GRPCRouteSpecRulesBackendRefsFiltersPatchArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsPatch) []GRPCRouteSpecRulesBackendRefsFiltersPatch {
		return v.Filters
	}).(GRPCRouteSpecRulesBackendRefsFiltersPatchArrayOutput)
}

// Group is the group of the referent. For example, "gateway.networking.k8s.io".
// When unspecified or empty string, core API group is inferred.
func (o GRPCRouteSpecRulesBackendRefsPatchOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsPatch) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind is the Kubernetes resource kind of the referent. For example
// "Service".
//
// Defaults to "Service" when not specified.
//
// ExternalName services can refer to CNAME DNS records that may live
// outside of the cluster and as such are difficult to reason about in
// terms of conformance. They also may not be safe to forward to (see
// CVE-2021-25740 for more information). Implementations SHOULD NOT
// support ExternalName Services.
//
// Support: Core (Services with a type other than ExternalName)
//
// Support: Implementation-specific (Services with type ExternalName)
func (o GRPCRouteSpecRulesBackendRefsPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
func (o GRPCRouteSpecRulesBackendRefsPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the backend. When unspecified, the local
// namespace is inferred.
//
// Note that when a namespace different than the local namespace is specified,
// a ReferenceGrant object is required in the referent namespace to allow that
// namespace's owner to accept the reference. See the ReferenceGrant
// documentation for details.
//
// Support: Core
func (o GRPCRouteSpecRulesBackendRefsPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Port specifies the destination port number to use for this resource.
// Port is required when the referent is a Kubernetes Service. In this
// case, the port number is the service port number, not the target port.
// For other resources, destination port might be derived from the referent
// resource or this field.
func (o GRPCRouteSpecRulesBackendRefsPatchOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsPatch) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Weight specifies the proportion of requests forwarded to the referenced
// backend. This is computed as weight/(sum of all weights in this
// BackendRefs list). For non-zero values, there may be some epsilon from
// the exact proportion defined here depending on the precision an
// implementation supports. Weight is not a percentage and the sum of
// weights does not need to equal 100.
//
// If only one backend is specified and it has a weight greater than 0, 100%
// of the traffic is forwarded to that backend. If weight is set to 0, no
// traffic should be forwarded for this entry. If unspecified, weight
// defaults to 1.
//
// Support for this field varies based on the context where used.
func (o GRPCRouteSpecRulesBackendRefsPatchOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsPatch) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type GRPCRouteSpecRulesBackendRefsPatchArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsPatchArrayOutput) ToGRPCRouteSpecRulesBackendRefsPatchArrayOutput() GRPCRouteSpecRulesBackendRefsPatchArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsPatchArrayOutput) ToGRPCRouteSpecRulesBackendRefsPatchArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsPatchArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsPatchArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesBackendRefsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesBackendRefsPatch {
		return vs[0].([]GRPCRouteSpecRulesBackendRefsPatch)[vs[1].(int)]
	}).(GRPCRouteSpecRulesBackendRefsPatchOutput)
}

// GRPCRouteFilter defines processing steps that must be completed during the
// request or response lifecycle. GRPCRouteFilters are meant as an extension
// point to express processing that may be done in Gateway implementations. Some
// examples include request or response modification, implementing
// authentication strategies, rate-limiting, and traffic shaping. API
// guarantee/conformance is defined based on the type of the filter.
type GRPCRouteSpecRulesFilters struct {
	ExtensionRef           *GRPCRouteSpecRulesFiltersExtensionRef           `pulumi:"extensionRef"`
	RequestHeaderModifier  *GRPCRouteSpecRulesFiltersRequestHeaderModifier  `pulumi:"requestHeaderModifier"`
	RequestMirror          *GRPCRouteSpecRulesFiltersRequestMirror          `pulumi:"requestMirror"`
	ResponseHeaderModifier *GRPCRouteSpecRulesFiltersResponseHeaderModifier `pulumi:"responseHeaderModifier"`
	// Type identifies the type of filter to apply. As with other API fields,
	// types are classified into three conformance levels:
	//
	// - Core: Filter types and their corresponding configuration defined by
	// "Support: Core" in this package, e.g. "RequestHeaderModifier". All
	// implementations supporting GRPCRoute MUST support core filters.
	//
	// - Extended: Filter types and their corresponding configuration defined by
	// "Support: Extended" in this package, e.g. "RequestMirror". Implementers
	// are encouraged to support extended filters.
	//
	// - Implementation-specific: Filters that are defined and supported by specific vendors.
	// In the future, filters showing convergence in behavior across multiple
	// implementations will be considered for inclusion in extended or core
	// conformance levels. Filter-specific configuration for such filters
	// is specified using the ExtensionRef field. `Type` MUST be set to
	// "ExtensionRef" for custom filters.
	//
	// Implementers are encouraged to define custom implementation types to
	// extend the core API with implementation-specific behavior.
	//
	// If a reference to a custom filter type cannot be resolved, the filter
	// MUST NOT be skipped. Instead, requests that would have been processed by
	// that filter MUST receive a HTTP error response.
	Type *string `pulumi:"type"`
}

// GRPCRouteSpecRulesFiltersInput is an input type that accepts GRPCRouteSpecRulesFiltersArgs and GRPCRouteSpecRulesFiltersOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersInput` via:
//
//	GRPCRouteSpecRulesFiltersArgs{...}
type GRPCRouteSpecRulesFiltersInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersOutput() GRPCRouteSpecRulesFiltersOutput
	ToGRPCRouteSpecRulesFiltersOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersOutput
}

// GRPCRouteFilter defines processing steps that must be completed during the
// request or response lifecycle. GRPCRouteFilters are meant as an extension
// point to express processing that may be done in Gateway implementations. Some
// examples include request or response modification, implementing
// authentication strategies, rate-limiting, and traffic shaping. API
// guarantee/conformance is defined based on the type of the filter.
type GRPCRouteSpecRulesFiltersArgs struct {
	ExtensionRef           GRPCRouteSpecRulesFiltersExtensionRefPtrInput           `pulumi:"extensionRef"`
	RequestHeaderModifier  GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrInput  `pulumi:"requestHeaderModifier"`
	RequestMirror          GRPCRouteSpecRulesFiltersRequestMirrorPtrInput          `pulumi:"requestMirror"`
	ResponseHeaderModifier GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrInput `pulumi:"responseHeaderModifier"`
	// Type identifies the type of filter to apply. As with other API fields,
	// types are classified into three conformance levels:
	//
	// - Core: Filter types and their corresponding configuration defined by
	// "Support: Core" in this package, e.g. "RequestHeaderModifier". All
	// implementations supporting GRPCRoute MUST support core filters.
	//
	// - Extended: Filter types and their corresponding configuration defined by
	// "Support: Extended" in this package, e.g. "RequestMirror". Implementers
	// are encouraged to support extended filters.
	//
	// - Implementation-specific: Filters that are defined and supported by specific vendors.
	// In the future, filters showing convergence in behavior across multiple
	// implementations will be considered for inclusion in extended or core
	// conformance levels. Filter-specific configuration for such filters
	// is specified using the ExtensionRef field. `Type` MUST be set to
	// "ExtensionRef" for custom filters.
	//
	// Implementers are encouraged to define custom implementation types to
	// extend the core API with implementation-specific behavior.
	//
	// If a reference to a custom filter type cannot be resolved, the filter
	// MUST NOT be skipped. Instead, requests that would have been processed by
	// that filter MUST receive a HTTP error response.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GRPCRouteSpecRulesFiltersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFilters)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersArgs) ToGRPCRouteSpecRulesFiltersOutput() GRPCRouteSpecRulesFiltersOutput {
	return i.ToGRPCRouteSpecRulesFiltersOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersArgs) ToGRPCRouteSpecRulesFiltersOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersOutput)
}

// GRPCRouteSpecRulesFiltersArrayInput is an input type that accepts GRPCRouteSpecRulesFiltersArray and GRPCRouteSpecRulesFiltersArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersArrayInput` via:
//
//	GRPCRouteSpecRulesFiltersArray{ GRPCRouteSpecRulesFiltersArgs{...} }
type GRPCRouteSpecRulesFiltersArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersArrayOutput() GRPCRouteSpecRulesFiltersArrayOutput
	ToGRPCRouteSpecRulesFiltersArrayOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersArrayOutput
}

type GRPCRouteSpecRulesFiltersArray []GRPCRouteSpecRulesFiltersInput

func (GRPCRouteSpecRulesFiltersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesFilters)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersArray) ToGRPCRouteSpecRulesFiltersArrayOutput() GRPCRouteSpecRulesFiltersArrayOutput {
	return i.ToGRPCRouteSpecRulesFiltersArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersArray) ToGRPCRouteSpecRulesFiltersArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersArrayOutput)
}

// GRPCRouteFilter defines processing steps that must be completed during the
// request or response lifecycle. GRPCRouteFilters are meant as an extension
// point to express processing that may be done in Gateway implementations. Some
// examples include request or response modification, implementing
// authentication strategies, rate-limiting, and traffic shaping. API
// guarantee/conformance is defined based on the type of the filter.
type GRPCRouteSpecRulesFiltersOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFilters)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersOutput) ToGRPCRouteSpecRulesFiltersOutput() GRPCRouteSpecRulesFiltersOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersOutput) ToGRPCRouteSpecRulesFiltersOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersOutput) ExtensionRef() GRPCRouteSpecRulesFiltersExtensionRefPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFilters) *GRPCRouteSpecRulesFiltersExtensionRef { return v.ExtensionRef }).(GRPCRouteSpecRulesFiltersExtensionRefPtrOutput)
}

func (o GRPCRouteSpecRulesFiltersOutput) RequestHeaderModifier() GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFilters) *GRPCRouteSpecRulesFiltersRequestHeaderModifier {
		return v.RequestHeaderModifier
	}).(GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput)
}

func (o GRPCRouteSpecRulesFiltersOutput) RequestMirror() GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFilters) *GRPCRouteSpecRulesFiltersRequestMirror { return v.RequestMirror }).(GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput)
}

func (o GRPCRouteSpecRulesFiltersOutput) ResponseHeaderModifier() GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFilters) *GRPCRouteSpecRulesFiltersResponseHeaderModifier {
		return v.ResponseHeaderModifier
	}).(GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput)
}

// Type identifies the type of filter to apply. As with other API fields,
// types are classified into three conformance levels:
//
// - Core: Filter types and their corresponding configuration defined by
// "Support: Core" in this package, e.g. "RequestHeaderModifier". All
// implementations supporting GRPCRoute MUST support core filters.
//
// - Extended: Filter types and their corresponding configuration defined by
// "Support: Extended" in this package, e.g. "RequestMirror". Implementers
// are encouraged to support extended filters.
//
// - Implementation-specific: Filters that are defined and supported by specific vendors.
// In the future, filters showing convergence in behavior across multiple
// implementations will be considered for inclusion in extended or core
// conformance levels. Filter-specific configuration for such filters
// is specified using the ExtensionRef field. `Type` MUST be set to
// "ExtensionRef" for custom filters.
//
// Implementers are encouraged to define custom implementation types to
// extend the core API with implementation-specific behavior.
//
// If a reference to a custom filter type cannot be resolved, the filter
// MUST NOT be skipped. Instead, requests that would have been processed by
// that filter MUST receive a HTTP error response.
func (o GRPCRouteSpecRulesFiltersOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFilters) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecRulesFiltersArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesFilters)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersArrayOutput) ToGRPCRouteSpecRulesFiltersArrayOutput() GRPCRouteSpecRulesFiltersArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersArrayOutput) ToGRPCRouteSpecRulesFiltersArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesFiltersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesFilters {
		return vs[0].([]GRPCRouteSpecRulesFilters)[vs[1].(int)]
	}).(GRPCRouteSpecRulesFiltersOutput)
}

// ExtensionRef is an optional, implementation-specific extension to the
// "filter" behavior.  For example, resource "myroutefilter" in group
// "networking.example.net"). ExtensionRef MUST NOT be used for core and
// extended filters.
//
// Support: Implementation-specific
//
// This filter can be used multiple times within the same rule.
type GRPCRouteSpecRulesFiltersExtensionRef struct {
	// Group is the group of the referent. For example, "gateway.networking.k8s.io".
	// When unspecified or empty string, core API group is inferred.
	Group *string `pulumi:"group"`
	// Kind is kind of the referent. For example "HTTPRoute" or "Service".
	Kind *string `pulumi:"kind"`
	// Name is the name of the referent.
	Name *string `pulumi:"name"`
}

// GRPCRouteSpecRulesFiltersExtensionRefInput is an input type that accepts GRPCRouteSpecRulesFiltersExtensionRefArgs and GRPCRouteSpecRulesFiltersExtensionRefOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersExtensionRefInput` via:
//
//	GRPCRouteSpecRulesFiltersExtensionRefArgs{...}
type GRPCRouteSpecRulesFiltersExtensionRefInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersExtensionRefOutput() GRPCRouteSpecRulesFiltersExtensionRefOutput
	ToGRPCRouteSpecRulesFiltersExtensionRefOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersExtensionRefOutput
}

// ExtensionRef is an optional, implementation-specific extension to the
// "filter" behavior.  For example, resource "myroutefilter" in group
// "networking.example.net"). ExtensionRef MUST NOT be used for core and
// extended filters.
//
// Support: Implementation-specific
//
// This filter can be used multiple times within the same rule.
type GRPCRouteSpecRulesFiltersExtensionRefArgs struct {
	// Group is the group of the referent. For example, "gateway.networking.k8s.io".
	// When unspecified or empty string, core API group is inferred.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind is kind of the referent. For example "HTTPRoute" or "Service".
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GRPCRouteSpecRulesFiltersExtensionRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersExtensionRef)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersExtensionRefArgs) ToGRPCRouteSpecRulesFiltersExtensionRefOutput() GRPCRouteSpecRulesFiltersExtensionRefOutput {
	return i.ToGRPCRouteSpecRulesFiltersExtensionRefOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersExtensionRefArgs) ToGRPCRouteSpecRulesFiltersExtensionRefOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersExtensionRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersExtensionRefOutput)
}

func (i GRPCRouteSpecRulesFiltersExtensionRefArgs) ToGRPCRouteSpecRulesFiltersExtensionRefPtrOutput() GRPCRouteSpecRulesFiltersExtensionRefPtrOutput {
	return i.ToGRPCRouteSpecRulesFiltersExtensionRefPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersExtensionRefArgs) ToGRPCRouteSpecRulesFiltersExtensionRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersExtensionRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersExtensionRefOutput).ToGRPCRouteSpecRulesFiltersExtensionRefPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesFiltersExtensionRefPtrInput is an input type that accepts GRPCRouteSpecRulesFiltersExtensionRefArgs, GRPCRouteSpecRulesFiltersExtensionRefPtr and GRPCRouteSpecRulesFiltersExtensionRefPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersExtensionRefPtrInput` via:
//
//	        GRPCRouteSpecRulesFiltersExtensionRefArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesFiltersExtensionRefPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersExtensionRefPtrOutput() GRPCRouteSpecRulesFiltersExtensionRefPtrOutput
	ToGRPCRouteSpecRulesFiltersExtensionRefPtrOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersExtensionRefPtrOutput
}

type grpcrouteSpecRulesFiltersExtensionRefPtrType GRPCRouteSpecRulesFiltersExtensionRefArgs

func GRPCRouteSpecRulesFiltersExtensionRefPtr(v *GRPCRouteSpecRulesFiltersExtensionRefArgs) GRPCRouteSpecRulesFiltersExtensionRefPtrInput {
	return (*grpcrouteSpecRulesFiltersExtensionRefPtrType)(v)
}

func (*grpcrouteSpecRulesFiltersExtensionRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesFiltersExtensionRef)(nil)).Elem()
}

func (i *grpcrouteSpecRulesFiltersExtensionRefPtrType) ToGRPCRouteSpecRulesFiltersExtensionRefPtrOutput() GRPCRouteSpecRulesFiltersExtensionRefPtrOutput {
	return i.ToGRPCRouteSpecRulesFiltersExtensionRefPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesFiltersExtensionRefPtrType) ToGRPCRouteSpecRulesFiltersExtensionRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersExtensionRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersExtensionRefPtrOutput)
}

// ExtensionRef is an optional, implementation-specific extension to the
// "filter" behavior.  For example, resource "myroutefilter" in group
// "networking.example.net"). ExtensionRef MUST NOT be used for core and
// extended filters.
//
// Support: Implementation-specific
//
// This filter can be used multiple times within the same rule.
type GRPCRouteSpecRulesFiltersExtensionRefOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersExtensionRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersExtensionRef)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersExtensionRefOutput) ToGRPCRouteSpecRulesFiltersExtensionRefOutput() GRPCRouteSpecRulesFiltersExtensionRefOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersExtensionRefOutput) ToGRPCRouteSpecRulesFiltersExtensionRefOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersExtensionRefOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersExtensionRefOutput) ToGRPCRouteSpecRulesFiltersExtensionRefPtrOutput() GRPCRouteSpecRulesFiltersExtensionRefPtrOutput {
	return o.ToGRPCRouteSpecRulesFiltersExtensionRefPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesFiltersExtensionRefOutput) ToGRPCRouteSpecRulesFiltersExtensionRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersExtensionRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesFiltersExtensionRef) *GRPCRouteSpecRulesFiltersExtensionRef {
		return &v
	}).(GRPCRouteSpecRulesFiltersExtensionRefPtrOutput)
}

// Group is the group of the referent. For example, "gateway.networking.k8s.io".
// When unspecified or empty string, core API group is inferred.
func (o GRPCRouteSpecRulesFiltersExtensionRefOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersExtensionRef) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind is kind of the referent. For example "HTTPRoute" or "Service".
func (o GRPCRouteSpecRulesFiltersExtensionRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersExtensionRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
func (o GRPCRouteSpecRulesFiltersExtensionRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersExtensionRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecRulesFiltersExtensionRefPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersExtensionRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesFiltersExtensionRef)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersExtensionRefPtrOutput) ToGRPCRouteSpecRulesFiltersExtensionRefPtrOutput() GRPCRouteSpecRulesFiltersExtensionRefPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersExtensionRefPtrOutput) ToGRPCRouteSpecRulesFiltersExtensionRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersExtensionRefPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersExtensionRefPtrOutput) Elem() GRPCRouteSpecRulesFiltersExtensionRefOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersExtensionRef) GRPCRouteSpecRulesFiltersExtensionRef {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesFiltersExtensionRef
		return ret
	}).(GRPCRouteSpecRulesFiltersExtensionRefOutput)
}

// Group is the group of the referent. For example, "gateway.networking.k8s.io".
// When unspecified or empty string, core API group is inferred.
func (o GRPCRouteSpecRulesFiltersExtensionRefPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersExtensionRef) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Kind is kind of the referent. For example "HTTPRoute" or "Service".
func (o GRPCRouteSpecRulesFiltersExtensionRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersExtensionRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
func (o GRPCRouteSpecRulesFiltersExtensionRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersExtensionRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// ExtensionRef is an optional, implementation-specific extension to the
// "filter" behavior.  For example, resource "myroutefilter" in group
// "networking.example.net"). ExtensionRef MUST NOT be used for core and
// extended filters.
//
// Support: Implementation-specific
//
// This filter can be used multiple times within the same rule.
type GRPCRouteSpecRulesFiltersExtensionRefPatch struct {
	// Group is the group of the referent. For example, "gateway.networking.k8s.io".
	// When unspecified or empty string, core API group is inferred.
	Group *string `pulumi:"group"`
	// Kind is kind of the referent. For example "HTTPRoute" or "Service".
	Kind *string `pulumi:"kind"`
	// Name is the name of the referent.
	Name *string `pulumi:"name"`
}

// GRPCRouteSpecRulesFiltersExtensionRefPatchInput is an input type that accepts GRPCRouteSpecRulesFiltersExtensionRefPatchArgs and GRPCRouteSpecRulesFiltersExtensionRefPatchOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersExtensionRefPatchInput` via:
//
//	GRPCRouteSpecRulesFiltersExtensionRefPatchArgs{...}
type GRPCRouteSpecRulesFiltersExtensionRefPatchInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersExtensionRefPatchOutput() GRPCRouteSpecRulesFiltersExtensionRefPatchOutput
	ToGRPCRouteSpecRulesFiltersExtensionRefPatchOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersExtensionRefPatchOutput
}

// ExtensionRef is an optional, implementation-specific extension to the
// "filter" behavior.  For example, resource "myroutefilter" in group
// "networking.example.net"). ExtensionRef MUST NOT be used for core and
// extended filters.
//
// Support: Implementation-specific
//
// This filter can be used multiple times within the same rule.
type GRPCRouteSpecRulesFiltersExtensionRefPatchArgs struct {
	// Group is the group of the referent. For example, "gateway.networking.k8s.io".
	// When unspecified or empty string, core API group is inferred.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind is kind of the referent. For example "HTTPRoute" or "Service".
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GRPCRouteSpecRulesFiltersExtensionRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersExtensionRefPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersExtensionRefPatchArgs) ToGRPCRouteSpecRulesFiltersExtensionRefPatchOutput() GRPCRouteSpecRulesFiltersExtensionRefPatchOutput {
	return i.ToGRPCRouteSpecRulesFiltersExtensionRefPatchOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersExtensionRefPatchArgs) ToGRPCRouteSpecRulesFiltersExtensionRefPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersExtensionRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersExtensionRefPatchOutput)
}

func (i GRPCRouteSpecRulesFiltersExtensionRefPatchArgs) ToGRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutput() GRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutput {
	return i.ToGRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersExtensionRefPatchArgs) ToGRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersExtensionRefPatchOutput).ToGRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesFiltersExtensionRefPatchPtrInput is an input type that accepts GRPCRouteSpecRulesFiltersExtensionRefPatchArgs, GRPCRouteSpecRulesFiltersExtensionRefPatchPtr and GRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersExtensionRefPatchPtrInput` via:
//
//	        GRPCRouteSpecRulesFiltersExtensionRefPatchArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesFiltersExtensionRefPatchPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutput() GRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutput
	ToGRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutput
}

type grpcrouteSpecRulesFiltersExtensionRefPatchPtrType GRPCRouteSpecRulesFiltersExtensionRefPatchArgs

func GRPCRouteSpecRulesFiltersExtensionRefPatchPtr(v *GRPCRouteSpecRulesFiltersExtensionRefPatchArgs) GRPCRouteSpecRulesFiltersExtensionRefPatchPtrInput {
	return (*grpcrouteSpecRulesFiltersExtensionRefPatchPtrType)(v)
}

func (*grpcrouteSpecRulesFiltersExtensionRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesFiltersExtensionRefPatch)(nil)).Elem()
}

func (i *grpcrouteSpecRulesFiltersExtensionRefPatchPtrType) ToGRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutput() GRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutput {
	return i.ToGRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesFiltersExtensionRefPatchPtrType) ToGRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutput)
}

// ExtensionRef is an optional, implementation-specific extension to the
// "filter" behavior.  For example, resource "myroutefilter" in group
// "networking.example.net"). ExtensionRef MUST NOT be used for core and
// extended filters.
//
// Support: Implementation-specific
//
// This filter can be used multiple times within the same rule.
type GRPCRouteSpecRulesFiltersExtensionRefPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersExtensionRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersExtensionRefPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersExtensionRefPatchOutput) ToGRPCRouteSpecRulesFiltersExtensionRefPatchOutput() GRPCRouteSpecRulesFiltersExtensionRefPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersExtensionRefPatchOutput) ToGRPCRouteSpecRulesFiltersExtensionRefPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersExtensionRefPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersExtensionRefPatchOutput) ToGRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutput() GRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutput {
	return o.ToGRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesFiltersExtensionRefPatchOutput) ToGRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesFiltersExtensionRefPatch) *GRPCRouteSpecRulesFiltersExtensionRefPatch {
		return &v
	}).(GRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutput)
}

// Group is the group of the referent. For example, "gateway.networking.k8s.io".
// When unspecified or empty string, core API group is inferred.
func (o GRPCRouteSpecRulesFiltersExtensionRefPatchOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersExtensionRefPatch) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind is kind of the referent. For example "HTTPRoute" or "Service".
func (o GRPCRouteSpecRulesFiltersExtensionRefPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersExtensionRefPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
func (o GRPCRouteSpecRulesFiltersExtensionRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersExtensionRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesFiltersExtensionRefPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutput) ToGRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutput() GRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutput) ToGRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutput) Elem() GRPCRouteSpecRulesFiltersExtensionRefPatchOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersExtensionRefPatch) GRPCRouteSpecRulesFiltersExtensionRefPatch {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesFiltersExtensionRefPatch
		return ret
	}).(GRPCRouteSpecRulesFiltersExtensionRefPatchOutput)
}

// Group is the group of the referent. For example, "gateway.networking.k8s.io".
// When unspecified or empty string, core API group is inferred.
func (o GRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersExtensionRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Kind is kind of the referent. For example "HTTPRoute" or "Service".
func (o GRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersExtensionRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
func (o GRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersExtensionRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// GRPCRouteFilter defines processing steps that must be completed during the
// request or response lifecycle. GRPCRouteFilters are meant as an extension
// point to express processing that may be done in Gateway implementations. Some
// examples include request or response modification, implementing
// authentication strategies, rate-limiting, and traffic shaping. API
// guarantee/conformance is defined based on the type of the filter.
type GRPCRouteSpecRulesFiltersPatch struct {
	ExtensionRef           *GRPCRouteSpecRulesFiltersExtensionRefPatch           `pulumi:"extensionRef"`
	RequestHeaderModifier  *GRPCRouteSpecRulesFiltersRequestHeaderModifierPatch  `pulumi:"requestHeaderModifier"`
	RequestMirror          *GRPCRouteSpecRulesFiltersRequestMirrorPatch          `pulumi:"requestMirror"`
	ResponseHeaderModifier *GRPCRouteSpecRulesFiltersResponseHeaderModifierPatch `pulumi:"responseHeaderModifier"`
	// Type identifies the type of filter to apply. As with other API fields,
	// types are classified into three conformance levels:
	//
	// - Core: Filter types and their corresponding configuration defined by
	// "Support: Core" in this package, e.g. "RequestHeaderModifier". All
	// implementations supporting GRPCRoute MUST support core filters.
	//
	// - Extended: Filter types and their corresponding configuration defined by
	// "Support: Extended" in this package, e.g. "RequestMirror". Implementers
	// are encouraged to support extended filters.
	//
	// - Implementation-specific: Filters that are defined and supported by specific vendors.
	// In the future, filters showing convergence in behavior across multiple
	// implementations will be considered for inclusion in extended or core
	// conformance levels. Filter-specific configuration for such filters
	// is specified using the ExtensionRef field. `Type` MUST be set to
	// "ExtensionRef" for custom filters.
	//
	// Implementers are encouraged to define custom implementation types to
	// extend the core API with implementation-specific behavior.
	//
	// If a reference to a custom filter type cannot be resolved, the filter
	// MUST NOT be skipped. Instead, requests that would have been processed by
	// that filter MUST receive a HTTP error response.
	Type *string `pulumi:"type"`
}

// GRPCRouteSpecRulesFiltersPatchInput is an input type that accepts GRPCRouteSpecRulesFiltersPatchArgs and GRPCRouteSpecRulesFiltersPatchOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersPatchInput` via:
//
//	GRPCRouteSpecRulesFiltersPatchArgs{...}
type GRPCRouteSpecRulesFiltersPatchInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersPatchOutput() GRPCRouteSpecRulesFiltersPatchOutput
	ToGRPCRouteSpecRulesFiltersPatchOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersPatchOutput
}

// GRPCRouteFilter defines processing steps that must be completed during the
// request or response lifecycle. GRPCRouteFilters are meant as an extension
// point to express processing that may be done in Gateway implementations. Some
// examples include request or response modification, implementing
// authentication strategies, rate-limiting, and traffic shaping. API
// guarantee/conformance is defined based on the type of the filter.
type GRPCRouteSpecRulesFiltersPatchArgs struct {
	ExtensionRef           GRPCRouteSpecRulesFiltersExtensionRefPatchPtrInput           `pulumi:"extensionRef"`
	RequestHeaderModifier  GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrInput  `pulumi:"requestHeaderModifier"`
	RequestMirror          GRPCRouteSpecRulesFiltersRequestMirrorPatchPtrInput          `pulumi:"requestMirror"`
	ResponseHeaderModifier GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrInput `pulumi:"responseHeaderModifier"`
	// Type identifies the type of filter to apply. As with other API fields,
	// types are classified into three conformance levels:
	//
	// - Core: Filter types and their corresponding configuration defined by
	// "Support: Core" in this package, e.g. "RequestHeaderModifier". All
	// implementations supporting GRPCRoute MUST support core filters.
	//
	// - Extended: Filter types and their corresponding configuration defined by
	// "Support: Extended" in this package, e.g. "RequestMirror". Implementers
	// are encouraged to support extended filters.
	//
	// - Implementation-specific: Filters that are defined and supported by specific vendors.
	// In the future, filters showing convergence in behavior across multiple
	// implementations will be considered for inclusion in extended or core
	// conformance levels. Filter-specific configuration for such filters
	// is specified using the ExtensionRef field. `Type` MUST be set to
	// "ExtensionRef" for custom filters.
	//
	// Implementers are encouraged to define custom implementation types to
	// extend the core API with implementation-specific behavior.
	//
	// If a reference to a custom filter type cannot be resolved, the filter
	// MUST NOT be skipped. Instead, requests that would have been processed by
	// that filter MUST receive a HTTP error response.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GRPCRouteSpecRulesFiltersPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersPatchArgs) ToGRPCRouteSpecRulesFiltersPatchOutput() GRPCRouteSpecRulesFiltersPatchOutput {
	return i.ToGRPCRouteSpecRulesFiltersPatchOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersPatchArgs) ToGRPCRouteSpecRulesFiltersPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersPatchOutput)
}

// GRPCRouteSpecRulesFiltersPatchArrayInput is an input type that accepts GRPCRouteSpecRulesFiltersPatchArray and GRPCRouteSpecRulesFiltersPatchArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersPatchArrayInput` via:
//
//	GRPCRouteSpecRulesFiltersPatchArray{ GRPCRouteSpecRulesFiltersPatchArgs{...} }
type GRPCRouteSpecRulesFiltersPatchArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersPatchArrayOutput() GRPCRouteSpecRulesFiltersPatchArrayOutput
	ToGRPCRouteSpecRulesFiltersPatchArrayOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersPatchArrayOutput
}

type GRPCRouteSpecRulesFiltersPatchArray []GRPCRouteSpecRulesFiltersPatchInput

func (GRPCRouteSpecRulesFiltersPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesFiltersPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersPatchArray) ToGRPCRouteSpecRulesFiltersPatchArrayOutput() GRPCRouteSpecRulesFiltersPatchArrayOutput {
	return i.ToGRPCRouteSpecRulesFiltersPatchArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersPatchArray) ToGRPCRouteSpecRulesFiltersPatchArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersPatchArrayOutput)
}

// GRPCRouteFilter defines processing steps that must be completed during the
// request or response lifecycle. GRPCRouteFilters are meant as an extension
// point to express processing that may be done in Gateway implementations. Some
// examples include request or response modification, implementing
// authentication strategies, rate-limiting, and traffic shaping. API
// guarantee/conformance is defined based on the type of the filter.
type GRPCRouteSpecRulesFiltersPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersPatchOutput) ToGRPCRouteSpecRulesFiltersPatchOutput() GRPCRouteSpecRulesFiltersPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersPatchOutput) ToGRPCRouteSpecRulesFiltersPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersPatchOutput) ExtensionRef() GRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersPatch) *GRPCRouteSpecRulesFiltersExtensionRefPatch {
		return v.ExtensionRef
	}).(GRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutput)
}

func (o GRPCRouteSpecRulesFiltersPatchOutput) RequestHeaderModifier() GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersPatch) *GRPCRouteSpecRulesFiltersRequestHeaderModifierPatch {
		return v.RequestHeaderModifier
	}).(GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutput)
}

func (o GRPCRouteSpecRulesFiltersPatchOutput) RequestMirror() GRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersPatch) *GRPCRouteSpecRulesFiltersRequestMirrorPatch {
		return v.RequestMirror
	}).(GRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutput)
}

func (o GRPCRouteSpecRulesFiltersPatchOutput) ResponseHeaderModifier() GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersPatch) *GRPCRouteSpecRulesFiltersResponseHeaderModifierPatch {
		return v.ResponseHeaderModifier
	}).(GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutput)
}

// Type identifies the type of filter to apply. As with other API fields,
// types are classified into three conformance levels:
//
// - Core: Filter types and their corresponding configuration defined by
// "Support: Core" in this package, e.g. "RequestHeaderModifier". All
// implementations supporting GRPCRoute MUST support core filters.
//
// - Extended: Filter types and their corresponding configuration defined by
// "Support: Extended" in this package, e.g. "RequestMirror". Implementers
// are encouraged to support extended filters.
//
// - Implementation-specific: Filters that are defined and supported by specific vendors.
// In the future, filters showing convergence in behavior across multiple
// implementations will be considered for inclusion in extended or core
// conformance levels. Filter-specific configuration for such filters
// is specified using the ExtensionRef field. `Type` MUST be set to
// "ExtensionRef" for custom filters.
//
// Implementers are encouraged to define custom implementation types to
// extend the core API with implementation-specific behavior.
//
// If a reference to a custom filter type cannot be resolved, the filter
// MUST NOT be skipped. Instead, requests that would have been processed by
// that filter MUST receive a HTTP error response.
func (o GRPCRouteSpecRulesFiltersPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecRulesFiltersPatchArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesFiltersPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersPatchArrayOutput) ToGRPCRouteSpecRulesFiltersPatchArrayOutput() GRPCRouteSpecRulesFiltersPatchArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersPatchArrayOutput) ToGRPCRouteSpecRulesFiltersPatchArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersPatchArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersPatchArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesFiltersPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesFiltersPatch {
		return vs[0].([]GRPCRouteSpecRulesFiltersPatch)[vs[1].(int)]
	}).(GRPCRouteSpecRulesFiltersPatchOutput)
}

// RequestHeaderModifier defines a schema for a filter that modifies request
// headers.
//
// Support: Core
type GRPCRouteSpecRulesFiltersRequestHeaderModifier struct {
	// Add adds the given header(s) (name, value) to the request
	// before the action. It appends to any existing values associated
	// with the header name.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   add:
	//   - name: "my-header"
	//     value: "bar,baz"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: foo,bar,baz
	Add []GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd `pulumi:"add"`
	// Remove the given header(s) from the HTTP request before the action. The
	// value of Remove is a list of HTTP header names. Note that the header
	// names are case-insensitive (see
	// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header1: foo
	//   my-header2: bar
	//   my-header3: baz
	//
	// Config:
	//   remove: ["my-header1", "my-header3"]
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header2: bar
	Remove []string `pulumi:"remove"`
	// Set overwrites the request with the given header (name, value)
	// before the action.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   set:
	//   - name: "my-header"
	//     value: "bar"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: bar
	Set []GRPCRouteSpecRulesFiltersRequestHeaderModifierSet `pulumi:"set"`
}

// GRPCRouteSpecRulesFiltersRequestHeaderModifierInput is an input type that accepts GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs and GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersRequestHeaderModifierInput` via:
//
//	GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs{...}
type GRPCRouteSpecRulesFiltersRequestHeaderModifierInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput
	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput
}

// RequestHeaderModifier defines a schema for a filter that modifies request
// headers.
//
// Support: Core
type GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs struct {
	// Add adds the given header(s) (name, value) to the request
	// before the action. It appends to any existing values associated
	// with the header name.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   add:
	//   - name: "my-header"
	//     value: "bar,baz"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: foo,bar,baz
	Add GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayInput `pulumi:"add"`
	// Remove the given header(s) from the HTTP request before the action. The
	// value of Remove is a list of HTTP header names. Note that the header
	// names are case-insensitive (see
	// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header1: foo
	//   my-header2: bar
	//   my-header3: baz
	//
	// Config:
	//   remove: ["my-header1", "my-header3"]
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header2: bar
	Remove pulumi.StringArrayInput `pulumi:"remove"`
	// Set overwrites the request with the given header (name, value)
	// before the action.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   set:
	//   - name: "my-header"
	//     value: "bar"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: bar
	Set GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayInput `pulumi:"set"`
}

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifier)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestHeaderModifierOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput)
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput).ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrInput is an input type that accepts GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs, GRPCRouteSpecRulesFiltersRequestHeaderModifierPtr and GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrInput` via:
//
//	        GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput
	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput
}

type grpcrouteSpecRulesFiltersRequestHeaderModifierPtrType GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs

func GRPCRouteSpecRulesFiltersRequestHeaderModifierPtr(v *GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs) GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrInput {
	return (*grpcrouteSpecRulesFiltersRequestHeaderModifierPtrType)(v)
}

func (*grpcrouteSpecRulesFiltersRequestHeaderModifierPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesFiltersRequestHeaderModifier)(nil)).Elem()
}

func (i *grpcrouteSpecRulesFiltersRequestHeaderModifierPtrType) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesFiltersRequestHeaderModifierPtrType) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput)
}

// RequestHeaderModifier defines a schema for a filter that modifies request
// headers.
//
// Support: Core
type GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifier)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput {
	return o.ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesFiltersRequestHeaderModifier) *GRPCRouteSpecRulesFiltersRequestHeaderModifier {
		return &v
	}).(GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput)
}

// Add adds the given header(s) (name, value) to the request
// before the action. It appends to any existing values associated
// with the header name.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	add:
//	- name: "my-header"
//	  value: "bar,baz"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: foo,bar,baz
func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput) Add() GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestHeaderModifier) []GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd {
		return v.Add
	}).(GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput)
}

// Remove the given header(s) from the HTTP request before the action. The
// value of Remove is a list of HTTP header names. Note that the header
// names are case-insensitive (see
// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header1: foo
//	my-header2: bar
//	my-header3: baz
//
// Config:
//
//	remove: ["my-header1", "my-header3"]
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header2: bar
func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestHeaderModifier) []string { return v.Remove }).(pulumi.StringArrayOutput)
}

// Set overwrites the request with the given header (name, value)
// before the action.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	set:
//	- name: "my-header"
//	  value: "bar"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: bar
func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput) Set() GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestHeaderModifier) []GRPCRouteSpecRulesFiltersRequestHeaderModifierSet {
		return v.Set
	}).(GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput)
}

type GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesFiltersRequestHeaderModifier)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput) Elem() GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestHeaderModifier) GRPCRouteSpecRulesFiltersRequestHeaderModifier {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesFiltersRequestHeaderModifier
		return ret
	}).(GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput)
}

// Add adds the given header(s) (name, value) to the request
// before the action. It appends to any existing values associated
// with the header name.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	add:
//	- name: "my-header"
//	  value: "bar,baz"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: foo,bar,baz
func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput) Add() GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestHeaderModifier) []GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd {
		if v == nil {
			return nil
		}
		return v.Add
	}).(GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput)
}

// Remove the given header(s) from the HTTP request before the action. The
// value of Remove is a list of HTTP header names. Note that the header
// names are case-insensitive (see
// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header1: foo
//	my-header2: bar
//	my-header3: baz
//
// Config:
//
//	remove: ["my-header1", "my-header3"]
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header2: bar
func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestHeaderModifier) []string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringArrayOutput)
}

// Set overwrites the request with the given header (name, value)
// before the action.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	set:
//	- name: "my-header"
//	  value: "bar"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: bar
func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput) Set() GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestHeaderModifier) []GRPCRouteSpecRulesFiltersRequestHeaderModifierSet {
		if v == nil {
			return nil
		}
		return v.Set
	}).(GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name *string `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value *string `pulumi:"value"`
}

// GRPCRouteSpecRulesFiltersRequestHeaderModifierAddInput is an input type that accepts GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArgs and GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersRequestHeaderModifierAddInput` via:
//
//	GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArgs{...}
type GRPCRouteSpecRulesFiltersRequestHeaderModifierAddInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput
	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArgs struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArgs) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArgs) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput)
}

// GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayInput is an input type that accepts GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArray and GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayInput` via:
//
//	GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArray{ GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArgs{...} }
type GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput
	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput
}

type GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArray []GRPCRouteSpecRulesFiltersRequestHeaderModifierAddInput

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArray) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArray) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput {
	return o
}

// Name is the name of the HTTP Header to be matched. Name matching MUST be
// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
//
// If multiple entries specify equivalent header names, the first entry with
// an equivalent name MUST be considered for a match. Subsequent entries
// with an equivalent header name MUST be ignored. Due to the
// case-insensitivity of header names, "foo" and "Foo" are considered
// equivalent.
func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value is the value of HTTP Header to be matched.
func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd {
		return vs[0].([]GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd)[vs[1].(int)]
	}).(GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatch struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name *string `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value *string `pulumi:"value"`
}

// GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchInput is an input type that accepts GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArgs and GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchInput` via:
//
//	GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArgs{...}
type GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchOutput
	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchOutput
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArgs struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArgs) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArgs) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchOutput)
}

// GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArrayInput is an input type that accepts GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArray and GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArrayInput` via:
//
//	GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArray{ GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArgs{...} }
type GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArrayOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArrayOutput
	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArrayOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArrayOutput
}

type GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArray []GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchInput

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArray) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArrayOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArrayOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArray) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchOutput {
	return o
}

// Name is the name of the HTTP Header to be matched. Name matching MUST be
// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
//
// If multiple entries specify equivalent header names, the first entry with
// an equivalent name MUST be considered for a match. Subsequent entries
// with an equivalent header name MUST be ignored. Due to the
// case-insensitivity of header names, "foo" and "Foo" are considered
// equivalent.
func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value is the value of HTTP Header to be matched.
func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatch) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArrayOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArrayOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArrayOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatch {
		return vs[0].([]GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatch)[vs[1].(int)]
	}).(GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchOutput)
}

// RequestHeaderModifier defines a schema for a filter that modifies request
// headers.
//
// Support: Core
type GRPCRouteSpecRulesFiltersRequestHeaderModifierPatch struct {
	// Add adds the given header(s) (name, value) to the request
	// before the action. It appends to any existing values associated
	// with the header name.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   add:
	//   - name: "my-header"
	//     value: "bar,baz"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: foo,bar,baz
	Add []GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatch `pulumi:"add"`
	// Remove the given header(s) from the HTTP request before the action. The
	// value of Remove is a list of HTTP header names. Note that the header
	// names are case-insensitive (see
	// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header1: foo
	//   my-header2: bar
	//   my-header3: baz
	//
	// Config:
	//   remove: ["my-header1", "my-header3"]
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header2: bar
	Remove []string `pulumi:"remove"`
	// Set overwrites the request with the given header (name, value)
	// before the action.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   set:
	//   - name: "my-header"
	//     value: "bar"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: bar
	Set []GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatch `pulumi:"set"`
}

// GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchInput is an input type that accepts GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchArgs and GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchInput` via:
//
//	GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchArgs{...}
type GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPatchOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchOutput
	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPatchOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchOutput
}

// RequestHeaderModifier defines a schema for a filter that modifies request
// headers.
//
// Support: Core
type GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchArgs struct {
	// Add adds the given header(s) (name, value) to the request
	// before the action. It appends to any existing values associated
	// with the header name.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   add:
	//   - name: "my-header"
	//     value: "bar,baz"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: foo,bar,baz
	Add GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArrayInput `pulumi:"add"`
	// Remove the given header(s) from the HTTP request before the action. The
	// value of Remove is a list of HTTP header names. Note that the header
	// names are case-insensitive (see
	// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header1: foo
	//   my-header2: bar
	//   my-header3: baz
	//
	// Config:
	//   remove: ["my-header1", "my-header3"]
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header2: bar
	Remove pulumi.StringArrayInput `pulumi:"remove"`
	// Set overwrites the request with the given header (name, value)
	// before the action.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   set:
	//   - name: "my-header"
	//     value: "bar"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: bar
	Set GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArrayInput `pulumi:"set"`
}

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchArgs) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPatchOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPatchOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchArgs) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchOutput)
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchArgs) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchArgs) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchOutput).ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrInput is an input type that accepts GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchArgs, GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtr and GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrInput` via:
//
//	        GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutput
	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutput
}

type grpcrouteSpecRulesFiltersRequestHeaderModifierPatchPtrType GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchArgs

func GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtr(v *GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchArgs) GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrInput {
	return (*grpcrouteSpecRulesFiltersRequestHeaderModifierPatchPtrType)(v)
}

func (*grpcrouteSpecRulesFiltersRequestHeaderModifierPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesFiltersRequestHeaderModifierPatch)(nil)).Elem()
}

func (i *grpcrouteSpecRulesFiltersRequestHeaderModifierPatchPtrType) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesFiltersRequestHeaderModifierPatchPtrType) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutput)
}

// RequestHeaderModifier defines a schema for a filter that modifies request
// headers.
//
// Support: Core
type GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPatchOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutput {
	return o.ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesFiltersRequestHeaderModifierPatch) *GRPCRouteSpecRulesFiltersRequestHeaderModifierPatch {
		return &v
	}).(GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutput)
}

// Add adds the given header(s) (name, value) to the request
// before the action. It appends to any existing values associated
// with the header name.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	add:
//	- name: "my-header"
//	  value: "bar,baz"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: foo,bar,baz
func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchOutput) Add() GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestHeaderModifierPatch) []GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatch {
		return v.Add
	}).(GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArrayOutput)
}

// Remove the given header(s) from the HTTP request before the action. The
// value of Remove is a list of HTTP header names. Note that the header
// names are case-insensitive (see
// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header1: foo
//	my-header2: bar
//	my-header3: baz
//
// Config:
//
//	remove: ["my-header1", "my-header3"]
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header2: bar
func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestHeaderModifierPatch) []string { return v.Remove }).(pulumi.StringArrayOutput)
}

// Set overwrites the request with the given header (name, value)
// before the action.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	set:
//	- name: "my-header"
//	  value: "bar"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: bar
func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchOutput) Set() GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestHeaderModifierPatch) []GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatch {
		return v.Set
	}).(GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArrayOutput)
}

type GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesFiltersRequestHeaderModifierPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutput) Elem() GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestHeaderModifierPatch) GRPCRouteSpecRulesFiltersRequestHeaderModifierPatch {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesFiltersRequestHeaderModifierPatch
		return ret
	}).(GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchOutput)
}

// Add adds the given header(s) (name, value) to the request
// before the action. It appends to any existing values associated
// with the header name.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	add:
//	- name: "my-header"
//	  value: "bar,baz"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: foo,bar,baz
func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutput) Add() GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestHeaderModifierPatch) []GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatch {
		if v == nil {
			return nil
		}
		return v.Add
	}).(GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArrayOutput)
}

// Remove the given header(s) from the HTTP request before the action. The
// value of Remove is a list of HTTP header names. Note that the header
// names are case-insensitive (see
// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header1: foo
//	my-header2: bar
//	my-header3: baz
//
// Config:
//
//	remove: ["my-header1", "my-header3"]
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header2: bar
func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestHeaderModifierPatch) []string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringArrayOutput)
}

// Set overwrites the request with the given header (name, value)
// before the action.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	set:
//	- name: "my-header"
//	  value: "bar"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: bar
func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutput) Set() GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestHeaderModifierPatch) []GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatch {
		if v == nil {
			return nil
		}
		return v.Set
	}).(GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersRequestHeaderModifierSet struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name *string `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value *string `pulumi:"value"`
}

// GRPCRouteSpecRulesFiltersRequestHeaderModifierSetInput is an input type that accepts GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArgs and GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersRequestHeaderModifierSetInput` via:
//
//	GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArgs{...}
type GRPCRouteSpecRulesFiltersRequestHeaderModifierSetInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput
	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArgs struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierSet)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArgs) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArgs) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput)
}

// GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayInput is an input type that accepts GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArray and GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayInput` via:
//
//	GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArray{ GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArgs{...} }
type GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput
	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput
}

type GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArray []GRPCRouteSpecRulesFiltersRequestHeaderModifierSetInput

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesFiltersRequestHeaderModifierSet)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArray) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArray) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierSet)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput {
	return o
}

// Name is the name of the HTTP Header to be matched. Name matching MUST be
// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
//
// If multiple entries specify equivalent header names, the first entry with
// an equivalent name MUST be considered for a match. Subsequent entries
// with an equivalent header name MUST be ignored. Due to the
// case-insensitivity of header names, "foo" and "Foo" are considered
// equivalent.
func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestHeaderModifierSet) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value is the value of HTTP Header to be matched.
func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestHeaderModifierSet) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesFiltersRequestHeaderModifierSet)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesFiltersRequestHeaderModifierSet {
		return vs[0].([]GRPCRouteSpecRulesFiltersRequestHeaderModifierSet)[vs[1].(int)]
	}).(GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatch struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name *string `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value *string `pulumi:"value"`
}

// GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchInput is an input type that accepts GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArgs and GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchInput` via:
//
//	GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArgs{...}
type GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchOutput
	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchOutput
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArgs struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArgs) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArgs) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchOutput)
}

// GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArrayInput is an input type that accepts GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArray and GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArrayInput` via:
//
//	GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArray{ GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArgs{...} }
type GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArrayOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArrayOutput
	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArrayOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArrayOutput
}

type GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArray []GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchInput

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArray) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArrayOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArrayOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArray) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchOutput {
	return o
}

// Name is the name of the HTTP Header to be matched. Name matching MUST be
// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
//
// If multiple entries specify equivalent header names, the first entry with
// an equivalent name MUST be considered for a match. Subsequent entries
// with an equivalent header name MUST be ignored. Due to the
// case-insensitivity of header names, "foo" and "Foo" are considered
// equivalent.
func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value is the value of HTTP Header to be matched.
func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatch) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArrayOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArrayOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArrayOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatch {
		return vs[0].([]GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatch)[vs[1].(int)]
	}).(GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchOutput)
}

// RequestMirror defines a schema for a filter that mirrors requests.
// Requests are sent to the specified destination, but responses from
// that destination are ignored.
//
// This filter can be used multiple times within the same rule. Note that
// not all implementations will be able to support mirroring to multiple
// backends.
//
// Support: Extended
type GRPCRouteSpecRulesFiltersRequestMirror struct {
	BackendRef *GRPCRouteSpecRulesFiltersRequestMirrorBackendRef `pulumi:"backendRef"`
}

// GRPCRouteSpecRulesFiltersRequestMirrorInput is an input type that accepts GRPCRouteSpecRulesFiltersRequestMirrorArgs and GRPCRouteSpecRulesFiltersRequestMirrorOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersRequestMirrorInput` via:
//
//	GRPCRouteSpecRulesFiltersRequestMirrorArgs{...}
type GRPCRouteSpecRulesFiltersRequestMirrorInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersRequestMirrorOutput() GRPCRouteSpecRulesFiltersRequestMirrorOutput
	ToGRPCRouteSpecRulesFiltersRequestMirrorOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersRequestMirrorOutput
}

// RequestMirror defines a schema for a filter that mirrors requests.
// Requests are sent to the specified destination, but responses from
// that destination are ignored.
//
// This filter can be used multiple times within the same rule. Note that
// not all implementations will be able to support mirroring to multiple
// backends.
//
// Support: Extended
type GRPCRouteSpecRulesFiltersRequestMirrorArgs struct {
	BackendRef GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrInput `pulumi:"backendRef"`
}

func (GRPCRouteSpecRulesFiltersRequestMirrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestMirror)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersRequestMirrorArgs) ToGRPCRouteSpecRulesFiltersRequestMirrorOutput() GRPCRouteSpecRulesFiltersRequestMirrorOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestMirrorOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersRequestMirrorArgs) ToGRPCRouteSpecRulesFiltersRequestMirrorOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestMirrorOutput)
}

func (i GRPCRouteSpecRulesFiltersRequestMirrorArgs) ToGRPCRouteSpecRulesFiltersRequestMirrorPtrOutput() GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestMirrorPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersRequestMirrorArgs) ToGRPCRouteSpecRulesFiltersRequestMirrorPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestMirrorOutput).ToGRPCRouteSpecRulesFiltersRequestMirrorPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesFiltersRequestMirrorPtrInput is an input type that accepts GRPCRouteSpecRulesFiltersRequestMirrorArgs, GRPCRouteSpecRulesFiltersRequestMirrorPtr and GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersRequestMirrorPtrInput` via:
//
//	        GRPCRouteSpecRulesFiltersRequestMirrorArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesFiltersRequestMirrorPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersRequestMirrorPtrOutput() GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput
	ToGRPCRouteSpecRulesFiltersRequestMirrorPtrOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput
}

type grpcrouteSpecRulesFiltersRequestMirrorPtrType GRPCRouteSpecRulesFiltersRequestMirrorArgs

func GRPCRouteSpecRulesFiltersRequestMirrorPtr(v *GRPCRouteSpecRulesFiltersRequestMirrorArgs) GRPCRouteSpecRulesFiltersRequestMirrorPtrInput {
	return (*grpcrouteSpecRulesFiltersRequestMirrorPtrType)(v)
}

func (*grpcrouteSpecRulesFiltersRequestMirrorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesFiltersRequestMirror)(nil)).Elem()
}

func (i *grpcrouteSpecRulesFiltersRequestMirrorPtrType) ToGRPCRouteSpecRulesFiltersRequestMirrorPtrOutput() GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestMirrorPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesFiltersRequestMirrorPtrType) ToGRPCRouteSpecRulesFiltersRequestMirrorPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput)
}

// RequestMirror defines a schema for a filter that mirrors requests.
// Requests are sent to the specified destination, but responses from
// that destination are ignored.
//
// This filter can be used multiple times within the same rule. Note that
// not all implementations will be able to support mirroring to multiple
// backends.
//
// Support: Extended
type GRPCRouteSpecRulesFiltersRequestMirrorOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersRequestMirrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestMirror)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorOutput() GRPCRouteSpecRulesFiltersRequestMirrorOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorPtrOutput() GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput {
	return o.ToGRPCRouteSpecRulesFiltersRequestMirrorPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesFiltersRequestMirror) *GRPCRouteSpecRulesFiltersRequestMirror {
		return &v
	}).(GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput)
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorOutput) BackendRef() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestMirror) *GRPCRouteSpecRulesFiltersRequestMirrorBackendRef {
		return v.BackendRef
	}).(GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput)
}

type GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesFiltersRequestMirror)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorPtrOutput() GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput) Elem() GRPCRouteSpecRulesFiltersRequestMirrorOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestMirror) GRPCRouteSpecRulesFiltersRequestMirror {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesFiltersRequestMirror
		return ret
	}).(GRPCRouteSpecRulesFiltersRequestMirrorOutput)
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput) BackendRef() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestMirror) *GRPCRouteSpecRulesFiltersRequestMirrorBackendRef {
		if v == nil {
			return nil
		}
		return v.BackendRef
	}).(GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput)
}

// BackendRef references a resource where mirrored requests are sent.
//
// Mirrored requests must be sent only to a single destination endpoint
// within this BackendRef, irrespective of how many endpoints are present
// within this BackendRef.
//
// If the referent cannot be found, this BackendRef is invalid and must be
// dropped from the Gateway. The controller must ensure the "ResolvedRefs"
// condition on the Route status is set to `status: False` and not configure
// this backend in the underlying implementation.
//
// If there is a cross-namespace reference to an *existing* object
// that is not allowed by a ReferenceGrant, the controller must ensure the
// "ResolvedRefs"  condition on the Route is set to `status: False`,
// with the "RefNotPermitted" reason and not configure this backend in the
// underlying implementation.
//
// In either error case, the Message of the `ResolvedRefs` Condition
// should be used to provide more detail about the problem.
//
// Support: Extended for Kubernetes Service
//
// Support: Implementation-specific for any other resource
type GRPCRouteSpecRulesFiltersRequestMirrorBackendRef struct {
	// Group is the group of the referent. For example, "gateway.networking.k8s.io".
	// When unspecified or empty string, core API group is inferred.
	Group *string `pulumi:"group"`
	// Kind is the Kubernetes resource kind of the referent. For example
	// "Service".
	//
	// Defaults to "Service" when not specified.
	//
	// ExternalName services can refer to CNAME DNS records that may live
	// outside of the cluster and as such are difficult to reason about in
	// terms of conformance. They also may not be safe to forward to (see
	// CVE-2021-25740 for more information). Implementations SHOULD NOT
	// support ExternalName Services.
	//
	// Support: Core (Services with a type other than ExternalName)
	//
	// Support: Implementation-specific (Services with type ExternalName)
	Kind *string `pulumi:"kind"`
	// Name is the name of the referent.
	Name *string `pulumi:"name"`
	// Namespace is the namespace of the backend. When unspecified, the local
	// namespace is inferred.
	//
	// Note that when a namespace different than the local namespace is specified,
	// a ReferenceGrant object is required in the referent namespace to allow that
	// namespace's owner to accept the reference. See the ReferenceGrant
	// documentation for details.
	//
	// Support: Core
	Namespace *string `pulumi:"namespace"`
	// Port specifies the destination port number to use for this resource.
	// Port is required when the referent is a Kubernetes Service. In this
	// case, the port number is the service port number, not the target port.
	// For other resources, destination port might be derived from the referent
	// resource or this field.
	Port *int `pulumi:"port"`
}

// GRPCRouteSpecRulesFiltersRequestMirrorBackendRefInput is an input type that accepts GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs and GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersRequestMirrorBackendRefInput` via:
//
//	GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs{...}
type GRPCRouteSpecRulesFiltersRequestMirrorBackendRefInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput
	ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput
}

// BackendRef references a resource where mirrored requests are sent.
//
// Mirrored requests must be sent only to a single destination endpoint
// within this BackendRef, irrespective of how many endpoints are present
// within this BackendRef.
//
// If the referent cannot be found, this BackendRef is invalid and must be
// dropped from the Gateway. The controller must ensure the "ResolvedRefs"
// condition on the Route status is set to `status: False` and not configure
// this backend in the underlying implementation.
//
// If there is a cross-namespace reference to an *existing* object
// that is not allowed by a ReferenceGrant, the controller must ensure the
// "ResolvedRefs"  condition on the Route is set to `status: False`,
// with the "RefNotPermitted" reason and not configure this backend in the
// underlying implementation.
//
// In either error case, the Message of the `ResolvedRefs` Condition
// should be used to provide more detail about the problem.
//
// Support: Extended for Kubernetes Service
//
// Support: Implementation-specific for any other resource
type GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs struct {
	// Group is the group of the referent. For example, "gateway.networking.k8s.io".
	// When unspecified or empty string, core API group is inferred.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind is the Kubernetes resource kind of the referent. For example
	// "Service".
	//
	// Defaults to "Service" when not specified.
	//
	// ExternalName services can refer to CNAME DNS records that may live
	// outside of the cluster and as such are difficult to reason about in
	// terms of conformance. They also may not be safe to forward to (see
	// CVE-2021-25740 for more information). Implementations SHOULD NOT
	// support ExternalName Services.
	//
	// Support: Core (Services with a type other than ExternalName)
	//
	// Support: Implementation-specific (Services with type ExternalName)
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace is the namespace of the backend. When unspecified, the local
	// namespace is inferred.
	//
	// Note that when a namespace different than the local namespace is specified,
	// a ReferenceGrant object is required in the referent namespace to allow that
	// namespace's owner to accept the reference. See the ReferenceGrant
	// documentation for details.
	//
	// Support: Core
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Port specifies the destination port number to use for this resource.
	// Port is required when the referent is a Kubernetes Service. In this
	// case, the port number is the service port number, not the target port.
	// For other resources, destination port might be derived from the referent
	// resource or this field.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestMirrorBackendRef)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput)
}

func (i GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput).ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrInput is an input type that accepts GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs, GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtr and GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrInput` via:
//
//	        GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput
	ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput
}

type grpcrouteSpecRulesFiltersRequestMirrorBackendRefPtrType GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs

func GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtr(v *GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs) GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrInput {
	return (*grpcrouteSpecRulesFiltersRequestMirrorBackendRefPtrType)(v)
}

func (*grpcrouteSpecRulesFiltersRequestMirrorBackendRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesFiltersRequestMirrorBackendRef)(nil)).Elem()
}

func (i *grpcrouteSpecRulesFiltersRequestMirrorBackendRefPtrType) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesFiltersRequestMirrorBackendRefPtrType) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput)
}

// BackendRef references a resource where mirrored requests are sent.
//
// Mirrored requests must be sent only to a single destination endpoint
// within this BackendRef, irrespective of how many endpoints are present
// within this BackendRef.
//
// If the referent cannot be found, this BackendRef is invalid and must be
// dropped from the Gateway. The controller must ensure the "ResolvedRefs"
// condition on the Route status is set to `status: False` and not configure
// this backend in the underlying implementation.
//
// If there is a cross-namespace reference to an *existing* object
// that is not allowed by a ReferenceGrant, the controller must ensure the
// "ResolvedRefs"  condition on the Route is set to `status: False`,
// with the "RefNotPermitted" reason and not configure this backend in the
// underlying implementation.
//
// In either error case, the Message of the `ResolvedRefs` Condition
// should be used to provide more detail about the problem.
//
// Support: Extended for Kubernetes Service
//
// Support: Implementation-specific for any other resource
type GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestMirrorBackendRef)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput {
	return o.ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesFiltersRequestMirrorBackendRef) *GRPCRouteSpecRulesFiltersRequestMirrorBackendRef {
		return &v
	}).(GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput)
}

// Group is the group of the referent. For example, "gateway.networking.k8s.io".
// When unspecified or empty string, core API group is inferred.
func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestMirrorBackendRef) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind is the Kubernetes resource kind of the referent. For example
// "Service".
//
// Defaults to "Service" when not specified.
//
// ExternalName services can refer to CNAME DNS records that may live
// outside of the cluster and as such are difficult to reason about in
// terms of conformance. They also may not be safe to forward to (see
// CVE-2021-25740 for more information). Implementations SHOULD NOT
// support ExternalName Services.
//
// Support: Core (Services with a type other than ExternalName)
//
// Support: Implementation-specific (Services with type ExternalName)
func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestMirrorBackendRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestMirrorBackendRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the backend. When unspecified, the local
// namespace is inferred.
//
// Note that when a namespace different than the local namespace is specified,
// a ReferenceGrant object is required in the referent namespace to allow that
// namespace's owner to accept the reference. See the ReferenceGrant
// documentation for details.
//
// Support: Core
func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestMirrorBackendRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Port specifies the destination port number to use for this resource.
// Port is required when the referent is a Kubernetes Service. In this
// case, the port number is the service port number, not the target port.
// For other resources, destination port might be derived from the referent
// resource or this field.
func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestMirrorBackendRef) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesFiltersRequestMirrorBackendRef)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput) Elem() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestMirrorBackendRef) GRPCRouteSpecRulesFiltersRequestMirrorBackendRef {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesFiltersRequestMirrorBackendRef
		return ret
	}).(GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput)
}

// Group is the group of the referent. For example, "gateway.networking.k8s.io".
// When unspecified or empty string, core API group is inferred.
func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestMirrorBackendRef) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Kind is the Kubernetes resource kind of the referent. For example
// "Service".
//
// Defaults to "Service" when not specified.
//
// ExternalName services can refer to CNAME DNS records that may live
// outside of the cluster and as such are difficult to reason about in
// terms of conformance. They also may not be safe to forward to (see
// CVE-2021-25740 for more information). Implementations SHOULD NOT
// support ExternalName Services.
//
// Support: Core (Services with a type other than ExternalName)
//
// Support: Implementation-specific (Services with type ExternalName)
func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestMirrorBackendRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestMirrorBackendRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the backend. When unspecified, the local
// namespace is inferred.
//
// Note that when a namespace different than the local namespace is specified,
// a ReferenceGrant object is required in the referent namespace to allow that
// namespace's owner to accept the reference. See the ReferenceGrant
// documentation for details.
//
// Support: Core
func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestMirrorBackendRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Port specifies the destination port number to use for this resource.
// Port is required when the referent is a Kubernetes Service. In this
// case, the port number is the service port number, not the target port.
// For other resources, destination port might be derived from the referent
// resource or this field.
func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestMirrorBackendRef) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// BackendRef references a resource where mirrored requests are sent.
//
// Mirrored requests must be sent only to a single destination endpoint
// within this BackendRef, irrespective of how many endpoints are present
// within this BackendRef.
//
// If the referent cannot be found, this BackendRef is invalid and must be
// dropped from the Gateway. The controller must ensure the "ResolvedRefs"
// condition on the Route status is set to `status: False` and not configure
// this backend in the underlying implementation.
//
// If there is a cross-namespace reference to an *existing* object
// that is not allowed by a ReferenceGrant, the controller must ensure the
// "ResolvedRefs"  condition on the Route is set to `status: False`,
// with the "RefNotPermitted" reason and not configure this backend in the
// underlying implementation.
//
// In either error case, the Message of the `ResolvedRefs` Condition
// should be used to provide more detail about the problem.
//
// Support: Extended for Kubernetes Service
//
// Support: Implementation-specific for any other resource
type GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatch struct {
	// Group is the group of the referent. For example, "gateway.networking.k8s.io".
	// When unspecified or empty string, core API group is inferred.
	Group *string `pulumi:"group"`
	// Kind is the Kubernetes resource kind of the referent. For example
	// "Service".
	//
	// Defaults to "Service" when not specified.
	//
	// ExternalName services can refer to CNAME DNS records that may live
	// outside of the cluster and as such are difficult to reason about in
	// terms of conformance. They also may not be safe to forward to (see
	// CVE-2021-25740 for more information). Implementations SHOULD NOT
	// support ExternalName Services.
	//
	// Support: Core (Services with a type other than ExternalName)
	//
	// Support: Implementation-specific (Services with type ExternalName)
	Kind *string `pulumi:"kind"`
	// Name is the name of the referent.
	Name *string `pulumi:"name"`
	// Namespace is the namespace of the backend. When unspecified, the local
	// namespace is inferred.
	//
	// Note that when a namespace different than the local namespace is specified,
	// a ReferenceGrant object is required in the referent namespace to allow that
	// namespace's owner to accept the reference. See the ReferenceGrant
	// documentation for details.
	//
	// Support: Core
	Namespace *string `pulumi:"namespace"`
	// Port specifies the destination port number to use for this resource.
	// Port is required when the referent is a Kubernetes Service. In this
	// case, the port number is the service port number, not the target port.
	// For other resources, destination port might be derived from the referent
	// resource or this field.
	Port *int `pulumi:"port"`
}

// GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchInput is an input type that accepts GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchArgs and GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchInput` via:
//
//	GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchArgs{...}
type GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchOutput() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchOutput
	ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchOutput
}

// BackendRef references a resource where mirrored requests are sent.
//
// Mirrored requests must be sent only to a single destination endpoint
// within this BackendRef, irrespective of how many endpoints are present
// within this BackendRef.
//
// If the referent cannot be found, this BackendRef is invalid and must be
// dropped from the Gateway. The controller must ensure the "ResolvedRefs"
// condition on the Route status is set to `status: False` and not configure
// this backend in the underlying implementation.
//
// If there is a cross-namespace reference to an *existing* object
// that is not allowed by a ReferenceGrant, the controller must ensure the
// "ResolvedRefs"  condition on the Route is set to `status: False`,
// with the "RefNotPermitted" reason and not configure this backend in the
// underlying implementation.
//
// In either error case, the Message of the `ResolvedRefs` Condition
// should be used to provide more detail about the problem.
//
// Support: Extended for Kubernetes Service
//
// Support: Implementation-specific for any other resource
type GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchArgs struct {
	// Group is the group of the referent. For example, "gateway.networking.k8s.io".
	// When unspecified or empty string, core API group is inferred.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind is the Kubernetes resource kind of the referent. For example
	// "Service".
	//
	// Defaults to "Service" when not specified.
	//
	// ExternalName services can refer to CNAME DNS records that may live
	// outside of the cluster and as such are difficult to reason about in
	// terms of conformance. They also may not be safe to forward to (see
	// CVE-2021-25740 for more information). Implementations SHOULD NOT
	// support ExternalName Services.
	//
	// Support: Core (Services with a type other than ExternalName)
	//
	// Support: Implementation-specific (Services with type ExternalName)
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of the referent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace is the namespace of the backend. When unspecified, the local
	// namespace is inferred.
	//
	// Note that when a namespace different than the local namespace is specified,
	// a ReferenceGrant object is required in the referent namespace to allow that
	// namespace's owner to accept the reference. See the ReferenceGrant
	// documentation for details.
	//
	// Support: Core
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Port specifies the destination port number to use for this resource.
	// Port is required when the referent is a Kubernetes Service. In this
	// case, the port number is the service port number, not the target port.
	// For other resources, destination port might be derived from the referent
	// resource or this field.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchArgs) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchOutput() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchArgs) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchOutput)
}

func (i GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchArgs) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchArgs) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchOutput).ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrInput is an input type that accepts GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchArgs, GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtr and GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrInput` via:
//
//	        GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput
	ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput
}

type grpcrouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrType GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchArgs

func GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtr(v *GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchArgs) GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrInput {
	return (*grpcrouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrType)(v)
}

func (*grpcrouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatch)(nil)).Elem()
}

func (i *grpcrouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrType) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrType) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput)
}

// BackendRef references a resource where mirrored requests are sent.
//
// Mirrored requests must be sent only to a single destination endpoint
// within this BackendRef, irrespective of how many endpoints are present
// within this BackendRef.
//
// If the referent cannot be found, this BackendRef is invalid and must be
// dropped from the Gateway. The controller must ensure the "ResolvedRefs"
// condition on the Route status is set to `status: False` and not configure
// this backend in the underlying implementation.
//
// If there is a cross-namespace reference to an *existing* object
// that is not allowed by a ReferenceGrant, the controller must ensure the
// "ResolvedRefs"  condition on the Route is set to `status: False`,
// with the "RefNotPermitted" reason and not configure this backend in the
// underlying implementation.
//
// In either error case, the Message of the `ResolvedRefs` Condition
// should be used to provide more detail about the problem.
//
// Support: Extended for Kubernetes Service
//
// Support: Implementation-specific for any other resource
type GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchOutput() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput {
	return o.ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatch) *GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatch {
		return &v
	}).(GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput)
}

// Group is the group of the referent. For example, "gateway.networking.k8s.io".
// When unspecified or empty string, core API group is inferred.
func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatch) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind is the Kubernetes resource kind of the referent. For example
// "Service".
//
// Defaults to "Service" when not specified.
//
// ExternalName services can refer to CNAME DNS records that may live
// outside of the cluster and as such are difficult to reason about in
// terms of conformance. They also may not be safe to forward to (see
// CVE-2021-25740 for more information). Implementations SHOULD NOT
// support ExternalName Services.
//
// Support: Core (Services with a type other than ExternalName)
//
// Support: Implementation-specific (Services with type ExternalName)
func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the backend. When unspecified, the local
// namespace is inferred.
//
// Note that when a namespace different than the local namespace is specified,
// a ReferenceGrant object is required in the referent namespace to allow that
// namespace's owner to accept the reference. See the ReferenceGrant
// documentation for details.
//
// Support: Core
func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Port specifies the destination port number to use for this resource.
// Port is required when the referent is a Kubernetes Service. In this
// case, the port number is the service port number, not the target port.
// For other resources, destination port might be derived from the referent
// resource or this field.
func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatch) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput) Elem() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatch) GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatch {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatch
		return ret
	}).(GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchOutput)
}

// Group is the group of the referent. For example, "gateway.networking.k8s.io".
// When unspecified or empty string, core API group is inferred.
func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Kind is the Kubernetes resource kind of the referent. For example
// "Service".
//
// Defaults to "Service" when not specified.
//
// ExternalName services can refer to CNAME DNS records that may live
// outside of the cluster and as such are difficult to reason about in
// terms of conformance. They also may not be safe to forward to (see
// CVE-2021-25740 for more information). Implementations SHOULD NOT
// support ExternalName Services.
//
// Support: Core (Services with a type other than ExternalName)
//
// Support: Implementation-specific (Services with type ExternalName)
func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the backend. When unspecified, the local
// namespace is inferred.
//
// Note that when a namespace different than the local namespace is specified,
// a ReferenceGrant object is required in the referent namespace to allow that
// namespace's owner to accept the reference. See the ReferenceGrant
// documentation for details.
//
// Support: Core
func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Port specifies the destination port number to use for this resource.
// Port is required when the referent is a Kubernetes Service. In this
// case, the port number is the service port number, not the target port.
// For other resources, destination port might be derived from the referent
// resource or this field.
func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatch) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// RequestMirror defines a schema for a filter that mirrors requests.
// Requests are sent to the specified destination, but responses from
// that destination are ignored.
//
// This filter can be used multiple times within the same rule. Note that
// not all implementations will be able to support mirroring to multiple
// backends.
//
// Support: Extended
type GRPCRouteSpecRulesFiltersRequestMirrorPatch struct {
	BackendRef *GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatch `pulumi:"backendRef"`
}

// GRPCRouteSpecRulesFiltersRequestMirrorPatchInput is an input type that accepts GRPCRouteSpecRulesFiltersRequestMirrorPatchArgs and GRPCRouteSpecRulesFiltersRequestMirrorPatchOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersRequestMirrorPatchInput` via:
//
//	GRPCRouteSpecRulesFiltersRequestMirrorPatchArgs{...}
type GRPCRouteSpecRulesFiltersRequestMirrorPatchInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersRequestMirrorPatchOutput() GRPCRouteSpecRulesFiltersRequestMirrorPatchOutput
	ToGRPCRouteSpecRulesFiltersRequestMirrorPatchOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersRequestMirrorPatchOutput
}

// RequestMirror defines a schema for a filter that mirrors requests.
// Requests are sent to the specified destination, but responses from
// that destination are ignored.
//
// This filter can be used multiple times within the same rule. Note that
// not all implementations will be able to support mirroring to multiple
// backends.
//
// Support: Extended
type GRPCRouteSpecRulesFiltersRequestMirrorPatchArgs struct {
	BackendRef GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrInput `pulumi:"backendRef"`
}

func (GRPCRouteSpecRulesFiltersRequestMirrorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestMirrorPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersRequestMirrorPatchArgs) ToGRPCRouteSpecRulesFiltersRequestMirrorPatchOutput() GRPCRouteSpecRulesFiltersRequestMirrorPatchOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestMirrorPatchOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersRequestMirrorPatchArgs) ToGRPCRouteSpecRulesFiltersRequestMirrorPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestMirrorPatchOutput)
}

func (i GRPCRouteSpecRulesFiltersRequestMirrorPatchArgs) ToGRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutput() GRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersRequestMirrorPatchArgs) ToGRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestMirrorPatchOutput).ToGRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesFiltersRequestMirrorPatchPtrInput is an input type that accepts GRPCRouteSpecRulesFiltersRequestMirrorPatchArgs, GRPCRouteSpecRulesFiltersRequestMirrorPatchPtr and GRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersRequestMirrorPatchPtrInput` via:
//
//	        GRPCRouteSpecRulesFiltersRequestMirrorPatchArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesFiltersRequestMirrorPatchPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutput() GRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutput
	ToGRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutput
}

type grpcrouteSpecRulesFiltersRequestMirrorPatchPtrType GRPCRouteSpecRulesFiltersRequestMirrorPatchArgs

func GRPCRouteSpecRulesFiltersRequestMirrorPatchPtr(v *GRPCRouteSpecRulesFiltersRequestMirrorPatchArgs) GRPCRouteSpecRulesFiltersRequestMirrorPatchPtrInput {
	return (*grpcrouteSpecRulesFiltersRequestMirrorPatchPtrType)(v)
}

func (*grpcrouteSpecRulesFiltersRequestMirrorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesFiltersRequestMirrorPatch)(nil)).Elem()
}

func (i *grpcrouteSpecRulesFiltersRequestMirrorPatchPtrType) ToGRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutput() GRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesFiltersRequestMirrorPatchPtrType) ToGRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutput)
}

// RequestMirror defines a schema for a filter that mirrors requests.
// Requests are sent to the specified destination, but responses from
// that destination are ignored.
//
// This filter can be used multiple times within the same rule. Note that
// not all implementations will be able to support mirroring to multiple
// backends.
//
// Support: Extended
type GRPCRouteSpecRulesFiltersRequestMirrorPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersRequestMirrorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestMirrorPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorPatchOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorPatchOutput() GRPCRouteSpecRulesFiltersRequestMirrorPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorPatchOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorPatchOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutput() GRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutput {
	return o.ToGRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorPatchOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesFiltersRequestMirrorPatch) *GRPCRouteSpecRulesFiltersRequestMirrorPatch {
		return &v
	}).(GRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutput)
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorPatchOutput) BackendRef() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestMirrorPatch) *GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatch {
		return v.BackendRef
	}).(GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput)
}

type GRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesFiltersRequestMirrorPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutput() GRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutput) Elem() GRPCRouteSpecRulesFiltersRequestMirrorPatchOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestMirrorPatch) GRPCRouteSpecRulesFiltersRequestMirrorPatch {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesFiltersRequestMirrorPatch
		return ret
	}).(GRPCRouteSpecRulesFiltersRequestMirrorPatchOutput)
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutput) BackendRef() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestMirrorPatch) *GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatch {
		if v == nil {
			return nil
		}
		return v.BackendRef
	}).(GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput)
}

// ResponseHeaderModifier defines a schema for a filter that modifies response
// headers.
//
// Support: Extended
type GRPCRouteSpecRulesFiltersResponseHeaderModifier struct {
	// Add adds the given header(s) (name, value) to the request
	// before the action. It appends to any existing values associated
	// with the header name.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   add:
	//   - name: "my-header"
	//     value: "bar,baz"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: foo,bar,baz
	Add []GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd `pulumi:"add"`
	// Remove the given header(s) from the HTTP request before the action. The
	// value of Remove is a list of HTTP header names. Note that the header
	// names are case-insensitive (see
	// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header1: foo
	//   my-header2: bar
	//   my-header3: baz
	//
	// Config:
	//   remove: ["my-header1", "my-header3"]
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header2: bar
	Remove []string `pulumi:"remove"`
	// Set overwrites the request with the given header (name, value)
	// before the action.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   set:
	//   - name: "my-header"
	//     value: "bar"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: bar
	Set []GRPCRouteSpecRulesFiltersResponseHeaderModifierSet `pulumi:"set"`
}

// GRPCRouteSpecRulesFiltersResponseHeaderModifierInput is an input type that accepts GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs and GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersResponseHeaderModifierInput` via:
//
//	GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs{...}
type GRPCRouteSpecRulesFiltersResponseHeaderModifierInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput
	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput
}

// ResponseHeaderModifier defines a schema for a filter that modifies response
// headers.
//
// Support: Extended
type GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs struct {
	// Add adds the given header(s) (name, value) to the request
	// before the action. It appends to any existing values associated
	// with the header name.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   add:
	//   - name: "my-header"
	//     value: "bar,baz"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: foo,bar,baz
	Add GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayInput `pulumi:"add"`
	// Remove the given header(s) from the HTTP request before the action. The
	// value of Remove is a list of HTTP header names. Note that the header
	// names are case-insensitive (see
	// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header1: foo
	//   my-header2: bar
	//   my-header3: baz
	//
	// Config:
	//   remove: ["my-header1", "my-header3"]
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header2: bar
	Remove pulumi.StringArrayInput `pulumi:"remove"`
	// Set overwrites the request with the given header (name, value)
	// before the action.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   set:
	//   - name: "my-header"
	//     value: "bar"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: bar
	Set GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayInput `pulumi:"set"`
}

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifier)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput {
	return i.ToGRPCRouteSpecRulesFiltersResponseHeaderModifierOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput)
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput {
	return i.ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput).ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrInput is an input type that accepts GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs, GRPCRouteSpecRulesFiltersResponseHeaderModifierPtr and GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrInput` via:
//
//	        GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput
	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput
}

type grpcrouteSpecRulesFiltersResponseHeaderModifierPtrType GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs

func GRPCRouteSpecRulesFiltersResponseHeaderModifierPtr(v *GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs) GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrInput {
	return (*grpcrouteSpecRulesFiltersResponseHeaderModifierPtrType)(v)
}

func (*grpcrouteSpecRulesFiltersResponseHeaderModifierPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesFiltersResponseHeaderModifier)(nil)).Elem()
}

func (i *grpcrouteSpecRulesFiltersResponseHeaderModifierPtrType) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput {
	return i.ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesFiltersResponseHeaderModifierPtrType) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput)
}

// ResponseHeaderModifier defines a schema for a filter that modifies response
// headers.
//
// Support: Extended
type GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifier)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput {
	return o.ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesFiltersResponseHeaderModifier) *GRPCRouteSpecRulesFiltersResponseHeaderModifier {
		return &v
	}).(GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput)
}

// Add adds the given header(s) (name, value) to the request
// before the action. It appends to any existing values associated
// with the header name.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	add:
//	- name: "my-header"
//	  value: "bar,baz"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: foo,bar,baz
func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput) Add() GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersResponseHeaderModifier) []GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd {
		return v.Add
	}).(GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput)
}

// Remove the given header(s) from the HTTP request before the action. The
// value of Remove is a list of HTTP header names. Note that the header
// names are case-insensitive (see
// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header1: foo
//	my-header2: bar
//	my-header3: baz
//
// Config:
//
//	remove: ["my-header1", "my-header3"]
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header2: bar
func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersResponseHeaderModifier) []string { return v.Remove }).(pulumi.StringArrayOutput)
}

// Set overwrites the request with the given header (name, value)
// before the action.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	set:
//	- name: "my-header"
//	  value: "bar"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: bar
func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput) Set() GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersResponseHeaderModifier) []GRPCRouteSpecRulesFiltersResponseHeaderModifierSet {
		return v.Set
	}).(GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput)
}

type GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesFiltersResponseHeaderModifier)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput) Elem() GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersResponseHeaderModifier) GRPCRouteSpecRulesFiltersResponseHeaderModifier {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesFiltersResponseHeaderModifier
		return ret
	}).(GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput)
}

// Add adds the given header(s) (name, value) to the request
// before the action. It appends to any existing values associated
// with the header name.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	add:
//	- name: "my-header"
//	  value: "bar,baz"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: foo,bar,baz
func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput) Add() GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersResponseHeaderModifier) []GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd {
		if v == nil {
			return nil
		}
		return v.Add
	}).(GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput)
}

// Remove the given header(s) from the HTTP request before the action. The
// value of Remove is a list of HTTP header names. Note that the header
// names are case-insensitive (see
// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header1: foo
//	my-header2: bar
//	my-header3: baz
//
// Config:
//
//	remove: ["my-header1", "my-header3"]
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header2: bar
func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersResponseHeaderModifier) []string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringArrayOutput)
}

// Set overwrites the request with the given header (name, value)
// before the action.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	set:
//	- name: "my-header"
//	  value: "bar"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: bar
func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput) Set() GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersResponseHeaderModifier) []GRPCRouteSpecRulesFiltersResponseHeaderModifierSet {
		if v == nil {
			return nil
		}
		return v.Set
	}).(GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name *string `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value *string `pulumi:"value"`
}

// GRPCRouteSpecRulesFiltersResponseHeaderModifierAddInput is an input type that accepts GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArgs and GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersResponseHeaderModifierAddInput` via:
//
//	GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArgs{...}
type GRPCRouteSpecRulesFiltersResponseHeaderModifierAddInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput
	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArgs struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArgs) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput {
	return i.ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArgs) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput)
}

// GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayInput is an input type that accepts GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArray and GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayInput` via:
//
//	GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArray{ GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArgs{...} }
type GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput
	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput
}

type GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArray []GRPCRouteSpecRulesFiltersResponseHeaderModifierAddInput

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArray) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput {
	return i.ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArray) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput {
	return o
}

// Name is the name of the HTTP Header to be matched. Name matching MUST be
// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
//
// If multiple entries specify equivalent header names, the first entry with
// an equivalent name MUST be considered for a match. Subsequent entries
// with an equivalent header name MUST be ignored. Due to the
// case-insensitivity of header names, "foo" and "Foo" are considered
// equivalent.
func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value is the value of HTTP Header to be matched.
func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd {
		return vs[0].([]GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd)[vs[1].(int)]
	}).(GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatch struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name *string `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value *string `pulumi:"value"`
}

// GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchInput is an input type that accepts GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArgs and GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchInput` via:
//
//	GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArgs{...}
type GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchOutput
	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchOutput
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArgs struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArgs) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchOutput {
	return i.ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArgs) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchOutput)
}

// GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArrayInput is an input type that accepts GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArray and GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArrayInput` via:
//
//	GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArray{ GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArgs{...} }
type GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArrayOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArrayOutput
	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArrayOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArrayOutput
}

type GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArray []GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchInput

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArray) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArrayOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArrayOutput {
	return i.ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArray) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchOutput {
	return o
}

// Name is the name of the HTTP Header to be matched. Name matching MUST be
// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
//
// If multiple entries specify equivalent header names, the first entry with
// an equivalent name MUST be considered for a match. Subsequent entries
// with an equivalent header name MUST be ignored. Due to the
// case-insensitivity of header names, "foo" and "Foo" are considered
// equivalent.
func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value is the value of HTTP Header to be matched.
func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatch) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArrayOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArrayOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArrayOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatch {
		return vs[0].([]GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatch)[vs[1].(int)]
	}).(GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchOutput)
}

// ResponseHeaderModifier defines a schema for a filter that modifies response
// headers.
//
// Support: Extended
type GRPCRouteSpecRulesFiltersResponseHeaderModifierPatch struct {
	// Add adds the given header(s) (name, value) to the request
	// before the action. It appends to any existing values associated
	// with the header name.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   add:
	//   - name: "my-header"
	//     value: "bar,baz"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: foo,bar,baz
	Add []GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatch `pulumi:"add"`
	// Remove the given header(s) from the HTTP request before the action. The
	// value of Remove is a list of HTTP header names. Note that the header
	// names are case-insensitive (see
	// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header1: foo
	//   my-header2: bar
	//   my-header3: baz
	//
	// Config:
	//   remove: ["my-header1", "my-header3"]
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header2: bar
	Remove []string `pulumi:"remove"`
	// Set overwrites the request with the given header (name, value)
	// before the action.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   set:
	//   - name: "my-header"
	//     value: "bar"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: bar
	Set []GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatch `pulumi:"set"`
}

// GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchInput is an input type that accepts GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchArgs and GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchInput` via:
//
//	GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchArgs{...}
type GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPatchOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchOutput
	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPatchOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchOutput
}

// ResponseHeaderModifier defines a schema for a filter that modifies response
// headers.
//
// Support: Extended
type GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchArgs struct {
	// Add adds the given header(s) (name, value) to the request
	// before the action. It appends to any existing values associated
	// with the header name.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   add:
	//   - name: "my-header"
	//     value: "bar,baz"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: foo,bar,baz
	Add GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArrayInput `pulumi:"add"`
	// Remove the given header(s) from the HTTP request before the action. The
	// value of Remove is a list of HTTP header names. Note that the header
	// names are case-insensitive (see
	// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header1: foo
	//   my-header2: bar
	//   my-header3: baz
	//
	// Config:
	//   remove: ["my-header1", "my-header3"]
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header2: bar
	Remove pulumi.StringArrayInput `pulumi:"remove"`
	// Set overwrites the request with the given header (name, value)
	// before the action.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   set:
	//   - name: "my-header"
	//     value: "bar"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: bar
	Set GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArrayInput `pulumi:"set"`
}

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchArgs) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPatchOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchOutput {
	return i.ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPatchOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchArgs) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchOutput)
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchArgs) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutput {
	return i.ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchArgs) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchOutput).ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrInput is an input type that accepts GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchArgs, GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtr and GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrInput` via:
//
//	        GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutput
	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutput
}

type grpcrouteSpecRulesFiltersResponseHeaderModifierPatchPtrType GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchArgs

func GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtr(v *GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchArgs) GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrInput {
	return (*grpcrouteSpecRulesFiltersResponseHeaderModifierPatchPtrType)(v)
}

func (*grpcrouteSpecRulesFiltersResponseHeaderModifierPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesFiltersResponseHeaderModifierPatch)(nil)).Elem()
}

func (i *grpcrouteSpecRulesFiltersResponseHeaderModifierPatchPtrType) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutput {
	return i.ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesFiltersResponseHeaderModifierPatchPtrType) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutput)
}

// ResponseHeaderModifier defines a schema for a filter that modifies response
// headers.
//
// Support: Extended
type GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPatchOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutput {
	return o.ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesFiltersResponseHeaderModifierPatch) *GRPCRouteSpecRulesFiltersResponseHeaderModifierPatch {
		return &v
	}).(GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutput)
}

// Add adds the given header(s) (name, value) to the request
// before the action. It appends to any existing values associated
// with the header name.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	add:
//	- name: "my-header"
//	  value: "bar,baz"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: foo,bar,baz
func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchOutput) Add() GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersResponseHeaderModifierPatch) []GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatch {
		return v.Add
	}).(GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArrayOutput)
}

// Remove the given header(s) from the HTTP request before the action. The
// value of Remove is a list of HTTP header names. Note that the header
// names are case-insensitive (see
// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header1: foo
//	my-header2: bar
//	my-header3: baz
//
// Config:
//
//	remove: ["my-header1", "my-header3"]
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header2: bar
func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersResponseHeaderModifierPatch) []string { return v.Remove }).(pulumi.StringArrayOutput)
}

// Set overwrites the request with the given header (name, value)
// before the action.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	set:
//	- name: "my-header"
//	  value: "bar"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: bar
func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchOutput) Set() GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersResponseHeaderModifierPatch) []GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatch {
		return v.Set
	}).(GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArrayOutput)
}

type GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesFiltersResponseHeaderModifierPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutput) Elem() GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersResponseHeaderModifierPatch) GRPCRouteSpecRulesFiltersResponseHeaderModifierPatch {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesFiltersResponseHeaderModifierPatch
		return ret
	}).(GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchOutput)
}

// Add adds the given header(s) (name, value) to the request
// before the action. It appends to any existing values associated
// with the header name.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	add:
//	- name: "my-header"
//	  value: "bar,baz"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: foo,bar,baz
func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutput) Add() GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersResponseHeaderModifierPatch) []GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatch {
		if v == nil {
			return nil
		}
		return v.Add
	}).(GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArrayOutput)
}

// Remove the given header(s) from the HTTP request before the action. The
// value of Remove is a list of HTTP header names. Note that the header
// names are case-insensitive (see
// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header1: foo
//	my-header2: bar
//	my-header3: baz
//
// Config:
//
//	remove: ["my-header1", "my-header3"]
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header2: bar
func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersResponseHeaderModifierPatch) []string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringArrayOutput)
}

// Set overwrites the request with the given header (name, value)
// before the action.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	set:
//	- name: "my-header"
//	  value: "bar"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: bar
func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutput) Set() GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersResponseHeaderModifierPatch) []GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatch {
		if v == nil {
			return nil
		}
		return v.Set
	}).(GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersResponseHeaderModifierSet struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name *string `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value *string `pulumi:"value"`
}

// GRPCRouteSpecRulesFiltersResponseHeaderModifierSetInput is an input type that accepts GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArgs and GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersResponseHeaderModifierSetInput` via:
//
//	GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArgs{...}
type GRPCRouteSpecRulesFiltersResponseHeaderModifierSetInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput
	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArgs struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierSet)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArgs) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput {
	return i.ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArgs) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput)
}

// GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayInput is an input type that accepts GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArray and GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayInput` via:
//
//	GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArray{ GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArgs{...} }
type GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput
	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput
}

type GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArray []GRPCRouteSpecRulesFiltersResponseHeaderModifierSetInput

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesFiltersResponseHeaderModifierSet)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArray) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput {
	return i.ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArray) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierSet)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput {
	return o
}

// Name is the name of the HTTP Header to be matched. Name matching MUST be
// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
//
// If multiple entries specify equivalent header names, the first entry with
// an equivalent name MUST be considered for a match. Subsequent entries
// with an equivalent header name MUST be ignored. Due to the
// case-insensitivity of header names, "foo" and "Foo" are considered
// equivalent.
func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersResponseHeaderModifierSet) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value is the value of HTTP Header to be matched.
func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersResponseHeaderModifierSet) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesFiltersResponseHeaderModifierSet)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesFiltersResponseHeaderModifierSet {
		return vs[0].([]GRPCRouteSpecRulesFiltersResponseHeaderModifierSet)[vs[1].(int)]
	}).(GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatch struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name *string `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value *string `pulumi:"value"`
}

// GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchInput is an input type that accepts GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArgs and GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchInput` via:
//
//	GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArgs{...}
type GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchOutput
	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchOutput
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArgs struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArgs) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchOutput {
	return i.ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArgs) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchOutput)
}

// GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArrayInput is an input type that accepts GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArray and GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArrayInput` via:
//
//	GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArray{ GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArgs{...} }
type GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArrayOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArrayOutput
	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArrayOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArrayOutput
}

type GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArray []GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchInput

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArray) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArrayOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArrayOutput {
	return i.ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArray) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchOutput {
	return o
}

// Name is the name of the HTTP Header to be matched. Name matching MUST be
// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
//
// If multiple entries specify equivalent header names, the first entry with
// an equivalent name MUST be considered for a match. Subsequent entries
// with an equivalent header name MUST be ignored. Due to the
// case-insensitivity of header names, "foo" and "Foo" are considered
// equivalent.
func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value is the value of HTTP Header to be matched.
func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatch) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArrayOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArrayOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArrayOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatch {
		return vs[0].([]GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatch)[vs[1].(int)]
	}).(GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchOutput)
}

// GRPCRouteMatch defines the predicate used to match requests to a given
// action. Multiple match types are ANDed together, i.e. the match will
// evaluate to true only if all conditions are satisfied.
//
// For example, the match below will match a gRPC request only if its service
// is `foo` AND it contains the `version: v1` header:
type GRPCRouteSpecRulesMatches struct {
	// Headers specifies gRPC request header matchers. Multiple match values are
	// ANDed together, meaning, a request MUST match all the specified headers
	// to select the route.
	Headers []GRPCRouteSpecRulesMatchesHeaders `pulumi:"headers"`
	Method  *GRPCRouteSpecRulesMatchesMethod   `pulumi:"method"`
}

// GRPCRouteSpecRulesMatchesInput is an input type that accepts GRPCRouteSpecRulesMatchesArgs and GRPCRouteSpecRulesMatchesOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesMatchesInput` via:
//
//	GRPCRouteSpecRulesMatchesArgs{...}
type GRPCRouteSpecRulesMatchesInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesMatchesOutput() GRPCRouteSpecRulesMatchesOutput
	ToGRPCRouteSpecRulesMatchesOutputWithContext(context.Context) GRPCRouteSpecRulesMatchesOutput
}

// GRPCRouteMatch defines the predicate used to match requests to a given
// action. Multiple match types are ANDed together, i.e. the match will
// evaluate to true only if all conditions are satisfied.
//
// For example, the match below will match a gRPC request only if its service
// is `foo` AND it contains the `version: v1` header:
type GRPCRouteSpecRulesMatchesArgs struct {
	// Headers specifies gRPC request header matchers. Multiple match values are
	// ANDed together, meaning, a request MUST match all the specified headers
	// to select the route.
	Headers GRPCRouteSpecRulesMatchesHeadersArrayInput `pulumi:"headers"`
	Method  GRPCRouteSpecRulesMatchesMethodPtrInput    `pulumi:"method"`
}

func (GRPCRouteSpecRulesMatchesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesMatches)(nil)).Elem()
}

func (i GRPCRouteSpecRulesMatchesArgs) ToGRPCRouteSpecRulesMatchesOutput() GRPCRouteSpecRulesMatchesOutput {
	return i.ToGRPCRouteSpecRulesMatchesOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesMatchesArgs) ToGRPCRouteSpecRulesMatchesOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesMatchesOutput)
}

// GRPCRouteSpecRulesMatchesArrayInput is an input type that accepts GRPCRouteSpecRulesMatchesArray and GRPCRouteSpecRulesMatchesArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesMatchesArrayInput` via:
//
//	GRPCRouteSpecRulesMatchesArray{ GRPCRouteSpecRulesMatchesArgs{...} }
type GRPCRouteSpecRulesMatchesArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesMatchesArrayOutput() GRPCRouteSpecRulesMatchesArrayOutput
	ToGRPCRouteSpecRulesMatchesArrayOutputWithContext(context.Context) GRPCRouteSpecRulesMatchesArrayOutput
}

type GRPCRouteSpecRulesMatchesArray []GRPCRouteSpecRulesMatchesInput

func (GRPCRouteSpecRulesMatchesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesMatches)(nil)).Elem()
}

func (i GRPCRouteSpecRulesMatchesArray) ToGRPCRouteSpecRulesMatchesArrayOutput() GRPCRouteSpecRulesMatchesArrayOutput {
	return i.ToGRPCRouteSpecRulesMatchesArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesMatchesArray) ToGRPCRouteSpecRulesMatchesArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesMatchesArrayOutput)
}

// GRPCRouteMatch defines the predicate used to match requests to a given
// action. Multiple match types are ANDed together, i.e. the match will
// evaluate to true only if all conditions are satisfied.
//
// For example, the match below will match a gRPC request only if its service
// is `foo` AND it contains the `version: v1` header:
type GRPCRouteSpecRulesMatchesOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesMatchesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesMatches)(nil)).Elem()
}

func (o GRPCRouteSpecRulesMatchesOutput) ToGRPCRouteSpecRulesMatchesOutput() GRPCRouteSpecRulesMatchesOutput {
	return o
}

func (o GRPCRouteSpecRulesMatchesOutput) ToGRPCRouteSpecRulesMatchesOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesOutput {
	return o
}

// Headers specifies gRPC request header matchers. Multiple match values are
// ANDed together, meaning, a request MUST match all the specified headers
// to select the route.
func (o GRPCRouteSpecRulesMatchesOutput) Headers() GRPCRouteSpecRulesMatchesHeadersArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesMatches) []GRPCRouteSpecRulesMatchesHeaders { return v.Headers }).(GRPCRouteSpecRulesMatchesHeadersArrayOutput)
}

func (o GRPCRouteSpecRulesMatchesOutput) Method() GRPCRouteSpecRulesMatchesMethodPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesMatches) *GRPCRouteSpecRulesMatchesMethod { return v.Method }).(GRPCRouteSpecRulesMatchesMethodPtrOutput)
}

type GRPCRouteSpecRulesMatchesArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesMatchesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesMatches)(nil)).Elem()
}

func (o GRPCRouteSpecRulesMatchesArrayOutput) ToGRPCRouteSpecRulesMatchesArrayOutput() GRPCRouteSpecRulesMatchesArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesMatchesArrayOutput) ToGRPCRouteSpecRulesMatchesArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesMatchesArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesMatchesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesMatches {
		return vs[0].([]GRPCRouteSpecRulesMatches)[vs[1].(int)]
	}).(GRPCRouteSpecRulesMatchesOutput)
}

// GRPCHeaderMatch describes how to select a gRPC route by matching gRPC request
// headers.
type GRPCRouteSpecRulesMatchesHeaders struct {
	// Name is the name of the gRPC Header to be matched.
	//
	// If multiple entries specify equivalent header names, only the first
	// entry with an equivalent name MUST be considered for a match. Subsequent
	// entries with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name *string `pulumi:"name"`
	// Type specifies how to match against the value of the header.
	Type *string `pulumi:"type"`
	// Value is the value of the gRPC Header to be matched.
	Value *string `pulumi:"value"`
}

// GRPCRouteSpecRulesMatchesHeadersInput is an input type that accepts GRPCRouteSpecRulesMatchesHeadersArgs and GRPCRouteSpecRulesMatchesHeadersOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesMatchesHeadersInput` via:
//
//	GRPCRouteSpecRulesMatchesHeadersArgs{...}
type GRPCRouteSpecRulesMatchesHeadersInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesMatchesHeadersOutput() GRPCRouteSpecRulesMatchesHeadersOutput
	ToGRPCRouteSpecRulesMatchesHeadersOutputWithContext(context.Context) GRPCRouteSpecRulesMatchesHeadersOutput
}

// GRPCHeaderMatch describes how to select a gRPC route by matching gRPC request
// headers.
type GRPCRouteSpecRulesMatchesHeadersArgs struct {
	// Name is the name of the gRPC Header to be matched.
	//
	// If multiple entries specify equivalent header names, only the first
	// entry with an equivalent name MUST be considered for a match. Subsequent
	// entries with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Type specifies how to match against the value of the header.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Value is the value of the gRPC Header to be matched.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GRPCRouteSpecRulesMatchesHeadersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesMatchesHeaders)(nil)).Elem()
}

func (i GRPCRouteSpecRulesMatchesHeadersArgs) ToGRPCRouteSpecRulesMatchesHeadersOutput() GRPCRouteSpecRulesMatchesHeadersOutput {
	return i.ToGRPCRouteSpecRulesMatchesHeadersOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesMatchesHeadersArgs) ToGRPCRouteSpecRulesMatchesHeadersOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesHeadersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesMatchesHeadersOutput)
}

// GRPCRouteSpecRulesMatchesHeadersArrayInput is an input type that accepts GRPCRouteSpecRulesMatchesHeadersArray and GRPCRouteSpecRulesMatchesHeadersArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesMatchesHeadersArrayInput` via:
//
//	GRPCRouteSpecRulesMatchesHeadersArray{ GRPCRouteSpecRulesMatchesHeadersArgs{...} }
type GRPCRouteSpecRulesMatchesHeadersArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesMatchesHeadersArrayOutput() GRPCRouteSpecRulesMatchesHeadersArrayOutput
	ToGRPCRouteSpecRulesMatchesHeadersArrayOutputWithContext(context.Context) GRPCRouteSpecRulesMatchesHeadersArrayOutput
}

type GRPCRouteSpecRulesMatchesHeadersArray []GRPCRouteSpecRulesMatchesHeadersInput

func (GRPCRouteSpecRulesMatchesHeadersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesMatchesHeaders)(nil)).Elem()
}

func (i GRPCRouteSpecRulesMatchesHeadersArray) ToGRPCRouteSpecRulesMatchesHeadersArrayOutput() GRPCRouteSpecRulesMatchesHeadersArrayOutput {
	return i.ToGRPCRouteSpecRulesMatchesHeadersArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesMatchesHeadersArray) ToGRPCRouteSpecRulesMatchesHeadersArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesHeadersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesMatchesHeadersArrayOutput)
}

// GRPCHeaderMatch describes how to select a gRPC route by matching gRPC request
// headers.
type GRPCRouteSpecRulesMatchesHeadersOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesMatchesHeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesMatchesHeaders)(nil)).Elem()
}

func (o GRPCRouteSpecRulesMatchesHeadersOutput) ToGRPCRouteSpecRulesMatchesHeadersOutput() GRPCRouteSpecRulesMatchesHeadersOutput {
	return o
}

func (o GRPCRouteSpecRulesMatchesHeadersOutput) ToGRPCRouteSpecRulesMatchesHeadersOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesHeadersOutput {
	return o
}

// Name is the name of the gRPC Header to be matched.
//
// If multiple entries specify equivalent header names, only the first
// entry with an equivalent name MUST be considered for a match. Subsequent
// entries with an equivalent header name MUST be ignored. Due to the
// case-insensitivity of header names, "foo" and "Foo" are considered
// equivalent.
func (o GRPCRouteSpecRulesMatchesHeadersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesMatchesHeaders) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Type specifies how to match against the value of the header.
func (o GRPCRouteSpecRulesMatchesHeadersOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesMatchesHeaders) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Value is the value of the gRPC Header to be matched.
func (o GRPCRouteSpecRulesMatchesHeadersOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesMatchesHeaders) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecRulesMatchesHeadersArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesMatchesHeadersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesMatchesHeaders)(nil)).Elem()
}

func (o GRPCRouteSpecRulesMatchesHeadersArrayOutput) ToGRPCRouteSpecRulesMatchesHeadersArrayOutput() GRPCRouteSpecRulesMatchesHeadersArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesMatchesHeadersArrayOutput) ToGRPCRouteSpecRulesMatchesHeadersArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesHeadersArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesMatchesHeadersArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesMatchesHeadersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesMatchesHeaders {
		return vs[0].([]GRPCRouteSpecRulesMatchesHeaders)[vs[1].(int)]
	}).(GRPCRouteSpecRulesMatchesHeadersOutput)
}

// GRPCHeaderMatch describes how to select a gRPC route by matching gRPC request
// headers.
type GRPCRouteSpecRulesMatchesHeadersPatch struct {
	// Name is the name of the gRPC Header to be matched.
	//
	// If multiple entries specify equivalent header names, only the first
	// entry with an equivalent name MUST be considered for a match. Subsequent
	// entries with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name *string `pulumi:"name"`
	// Type specifies how to match against the value of the header.
	Type *string `pulumi:"type"`
	// Value is the value of the gRPC Header to be matched.
	Value *string `pulumi:"value"`
}

// GRPCRouteSpecRulesMatchesHeadersPatchInput is an input type that accepts GRPCRouteSpecRulesMatchesHeadersPatchArgs and GRPCRouteSpecRulesMatchesHeadersPatchOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesMatchesHeadersPatchInput` via:
//
//	GRPCRouteSpecRulesMatchesHeadersPatchArgs{...}
type GRPCRouteSpecRulesMatchesHeadersPatchInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesMatchesHeadersPatchOutput() GRPCRouteSpecRulesMatchesHeadersPatchOutput
	ToGRPCRouteSpecRulesMatchesHeadersPatchOutputWithContext(context.Context) GRPCRouteSpecRulesMatchesHeadersPatchOutput
}

// GRPCHeaderMatch describes how to select a gRPC route by matching gRPC request
// headers.
type GRPCRouteSpecRulesMatchesHeadersPatchArgs struct {
	// Name is the name of the gRPC Header to be matched.
	//
	// If multiple entries specify equivalent header names, only the first
	// entry with an equivalent name MUST be considered for a match. Subsequent
	// entries with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Type specifies how to match against the value of the header.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Value is the value of the gRPC Header to be matched.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GRPCRouteSpecRulesMatchesHeadersPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesMatchesHeadersPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesMatchesHeadersPatchArgs) ToGRPCRouteSpecRulesMatchesHeadersPatchOutput() GRPCRouteSpecRulesMatchesHeadersPatchOutput {
	return i.ToGRPCRouteSpecRulesMatchesHeadersPatchOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesMatchesHeadersPatchArgs) ToGRPCRouteSpecRulesMatchesHeadersPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesHeadersPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesMatchesHeadersPatchOutput)
}

// GRPCRouteSpecRulesMatchesHeadersPatchArrayInput is an input type that accepts GRPCRouteSpecRulesMatchesHeadersPatchArray and GRPCRouteSpecRulesMatchesHeadersPatchArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesMatchesHeadersPatchArrayInput` via:
//
//	GRPCRouteSpecRulesMatchesHeadersPatchArray{ GRPCRouteSpecRulesMatchesHeadersPatchArgs{...} }
type GRPCRouteSpecRulesMatchesHeadersPatchArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesMatchesHeadersPatchArrayOutput() GRPCRouteSpecRulesMatchesHeadersPatchArrayOutput
	ToGRPCRouteSpecRulesMatchesHeadersPatchArrayOutputWithContext(context.Context) GRPCRouteSpecRulesMatchesHeadersPatchArrayOutput
}

type GRPCRouteSpecRulesMatchesHeadersPatchArray []GRPCRouteSpecRulesMatchesHeadersPatchInput

func (GRPCRouteSpecRulesMatchesHeadersPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesMatchesHeadersPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesMatchesHeadersPatchArray) ToGRPCRouteSpecRulesMatchesHeadersPatchArrayOutput() GRPCRouteSpecRulesMatchesHeadersPatchArrayOutput {
	return i.ToGRPCRouteSpecRulesMatchesHeadersPatchArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesMatchesHeadersPatchArray) ToGRPCRouteSpecRulesMatchesHeadersPatchArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesHeadersPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesMatchesHeadersPatchArrayOutput)
}

// GRPCHeaderMatch describes how to select a gRPC route by matching gRPC request
// headers.
type GRPCRouteSpecRulesMatchesHeadersPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesMatchesHeadersPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesMatchesHeadersPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesMatchesHeadersPatchOutput) ToGRPCRouteSpecRulesMatchesHeadersPatchOutput() GRPCRouteSpecRulesMatchesHeadersPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesMatchesHeadersPatchOutput) ToGRPCRouteSpecRulesMatchesHeadersPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesHeadersPatchOutput {
	return o
}

// Name is the name of the gRPC Header to be matched.
//
// If multiple entries specify equivalent header names, only the first
// entry with an equivalent name MUST be considered for a match. Subsequent
// entries with an equivalent header name MUST be ignored. Due to the
// case-insensitivity of header names, "foo" and "Foo" are considered
// equivalent.
func (o GRPCRouteSpecRulesMatchesHeadersPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesMatchesHeadersPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Type specifies how to match against the value of the header.
func (o GRPCRouteSpecRulesMatchesHeadersPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesMatchesHeadersPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Value is the value of the gRPC Header to be matched.
func (o GRPCRouteSpecRulesMatchesHeadersPatchOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesMatchesHeadersPatch) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecRulesMatchesHeadersPatchArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesMatchesHeadersPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesMatchesHeadersPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesMatchesHeadersPatchArrayOutput) ToGRPCRouteSpecRulesMatchesHeadersPatchArrayOutput() GRPCRouteSpecRulesMatchesHeadersPatchArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesMatchesHeadersPatchArrayOutput) ToGRPCRouteSpecRulesMatchesHeadersPatchArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesHeadersPatchArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesMatchesHeadersPatchArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesMatchesHeadersPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesMatchesHeadersPatch {
		return vs[0].([]GRPCRouteSpecRulesMatchesHeadersPatch)[vs[1].(int)]
	}).(GRPCRouteSpecRulesMatchesHeadersPatchOutput)
}

// Method specifies a gRPC request service/method matcher. If this field is
// not specified, all services and methods will match.
type GRPCRouteSpecRulesMatchesMethod struct {
	// Value of the method to match against. If left empty or omitted, will
	// match all services.
	//
	// At least one of Service and Method MUST be a non-empty string.
	Method *string `pulumi:"method"`
	// Value of the service to match against. If left empty or omitted, will
	// match any service.
	//
	// At least one of Service and Method MUST be a non-empty string.
	Service *string `pulumi:"service"`
	// Type specifies how to match against the service and/or method.
	// Support: Core (Exact with service and method specified)
	//
	// Support: Implementation-specific (Exact with method specified but no service specified)
	//
	// Support: Implementation-specific (RegularExpression)
	Type *string `pulumi:"type"`
}

// GRPCRouteSpecRulesMatchesMethodInput is an input type that accepts GRPCRouteSpecRulesMatchesMethodArgs and GRPCRouteSpecRulesMatchesMethodOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesMatchesMethodInput` via:
//
//	GRPCRouteSpecRulesMatchesMethodArgs{...}
type GRPCRouteSpecRulesMatchesMethodInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesMatchesMethodOutput() GRPCRouteSpecRulesMatchesMethodOutput
	ToGRPCRouteSpecRulesMatchesMethodOutputWithContext(context.Context) GRPCRouteSpecRulesMatchesMethodOutput
}

// Method specifies a gRPC request service/method matcher. If this field is
// not specified, all services and methods will match.
type GRPCRouteSpecRulesMatchesMethodArgs struct {
	// Value of the method to match against. If left empty or omitted, will
	// match all services.
	//
	// At least one of Service and Method MUST be a non-empty string.
	Method pulumi.StringPtrInput `pulumi:"method"`
	// Value of the service to match against. If left empty or omitted, will
	// match any service.
	//
	// At least one of Service and Method MUST be a non-empty string.
	Service pulumi.StringPtrInput `pulumi:"service"`
	// Type specifies how to match against the service and/or method.
	// Support: Core (Exact with service and method specified)
	//
	// Support: Implementation-specific (Exact with method specified but no service specified)
	//
	// Support: Implementation-specific (RegularExpression)
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GRPCRouteSpecRulesMatchesMethodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesMatchesMethod)(nil)).Elem()
}

func (i GRPCRouteSpecRulesMatchesMethodArgs) ToGRPCRouteSpecRulesMatchesMethodOutput() GRPCRouteSpecRulesMatchesMethodOutput {
	return i.ToGRPCRouteSpecRulesMatchesMethodOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesMatchesMethodArgs) ToGRPCRouteSpecRulesMatchesMethodOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesMethodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesMatchesMethodOutput)
}

func (i GRPCRouteSpecRulesMatchesMethodArgs) ToGRPCRouteSpecRulesMatchesMethodPtrOutput() GRPCRouteSpecRulesMatchesMethodPtrOutput {
	return i.ToGRPCRouteSpecRulesMatchesMethodPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesMatchesMethodArgs) ToGRPCRouteSpecRulesMatchesMethodPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesMatchesMethodOutput).ToGRPCRouteSpecRulesMatchesMethodPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesMatchesMethodPtrInput is an input type that accepts GRPCRouteSpecRulesMatchesMethodArgs, GRPCRouteSpecRulesMatchesMethodPtr and GRPCRouteSpecRulesMatchesMethodPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesMatchesMethodPtrInput` via:
//
//	        GRPCRouteSpecRulesMatchesMethodArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesMatchesMethodPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesMatchesMethodPtrOutput() GRPCRouteSpecRulesMatchesMethodPtrOutput
	ToGRPCRouteSpecRulesMatchesMethodPtrOutputWithContext(context.Context) GRPCRouteSpecRulesMatchesMethodPtrOutput
}

type grpcrouteSpecRulesMatchesMethodPtrType GRPCRouteSpecRulesMatchesMethodArgs

func GRPCRouteSpecRulesMatchesMethodPtr(v *GRPCRouteSpecRulesMatchesMethodArgs) GRPCRouteSpecRulesMatchesMethodPtrInput {
	return (*grpcrouteSpecRulesMatchesMethodPtrType)(v)
}

func (*grpcrouteSpecRulesMatchesMethodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesMatchesMethod)(nil)).Elem()
}

func (i *grpcrouteSpecRulesMatchesMethodPtrType) ToGRPCRouteSpecRulesMatchesMethodPtrOutput() GRPCRouteSpecRulesMatchesMethodPtrOutput {
	return i.ToGRPCRouteSpecRulesMatchesMethodPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesMatchesMethodPtrType) ToGRPCRouteSpecRulesMatchesMethodPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesMatchesMethodPtrOutput)
}

// Method specifies a gRPC request service/method matcher. If this field is
// not specified, all services and methods will match.
type GRPCRouteSpecRulesMatchesMethodOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesMatchesMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesMatchesMethod)(nil)).Elem()
}

func (o GRPCRouteSpecRulesMatchesMethodOutput) ToGRPCRouteSpecRulesMatchesMethodOutput() GRPCRouteSpecRulesMatchesMethodOutput {
	return o
}

func (o GRPCRouteSpecRulesMatchesMethodOutput) ToGRPCRouteSpecRulesMatchesMethodOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesMethodOutput {
	return o
}

func (o GRPCRouteSpecRulesMatchesMethodOutput) ToGRPCRouteSpecRulesMatchesMethodPtrOutput() GRPCRouteSpecRulesMatchesMethodPtrOutput {
	return o.ToGRPCRouteSpecRulesMatchesMethodPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesMatchesMethodOutput) ToGRPCRouteSpecRulesMatchesMethodPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesMethodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesMatchesMethod) *GRPCRouteSpecRulesMatchesMethod {
		return &v
	}).(GRPCRouteSpecRulesMatchesMethodPtrOutput)
}

// Value of the method to match against. If left empty or omitted, will
// match all services.
//
// At least one of Service and Method MUST be a non-empty string.
func (o GRPCRouteSpecRulesMatchesMethodOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesMatchesMethod) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// Value of the service to match against. If left empty or omitted, will
// match any service.
//
// At least one of Service and Method MUST be a non-empty string.
func (o GRPCRouteSpecRulesMatchesMethodOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesMatchesMethod) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// Type specifies how to match against the service and/or method.
// Support: Core (Exact with service and method specified)
//
// Support: Implementation-specific (Exact with method specified but no service specified)
//
// Support: Implementation-specific (RegularExpression)
func (o GRPCRouteSpecRulesMatchesMethodOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesMatchesMethod) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecRulesMatchesMethodPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesMatchesMethodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesMatchesMethod)(nil)).Elem()
}

func (o GRPCRouteSpecRulesMatchesMethodPtrOutput) ToGRPCRouteSpecRulesMatchesMethodPtrOutput() GRPCRouteSpecRulesMatchesMethodPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesMatchesMethodPtrOutput) ToGRPCRouteSpecRulesMatchesMethodPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesMethodPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesMatchesMethodPtrOutput) Elem() GRPCRouteSpecRulesMatchesMethodOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesMatchesMethod) GRPCRouteSpecRulesMatchesMethod {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesMatchesMethod
		return ret
	}).(GRPCRouteSpecRulesMatchesMethodOutput)
}

// Value of the method to match against. If left empty or omitted, will
// match all services.
//
// At least one of Service and Method MUST be a non-empty string.
func (o GRPCRouteSpecRulesMatchesMethodPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesMatchesMethod) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// Value of the service to match against. If left empty or omitted, will
// match any service.
//
// At least one of Service and Method MUST be a non-empty string.
func (o GRPCRouteSpecRulesMatchesMethodPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesMatchesMethod) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Type specifies how to match against the service and/or method.
// Support: Core (Exact with service and method specified)
//
// Support: Implementation-specific (Exact with method specified but no service specified)
//
// Support: Implementation-specific (RegularExpression)
func (o GRPCRouteSpecRulesMatchesMethodPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesMatchesMethod) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Method specifies a gRPC request service/method matcher. If this field is
// not specified, all services and methods will match.
type GRPCRouteSpecRulesMatchesMethodPatch struct {
	// Value of the method to match against. If left empty or omitted, will
	// match all services.
	//
	// At least one of Service and Method MUST be a non-empty string.
	Method *string `pulumi:"method"`
	// Value of the service to match against. If left empty or omitted, will
	// match any service.
	//
	// At least one of Service and Method MUST be a non-empty string.
	Service *string `pulumi:"service"`
	// Type specifies how to match against the service and/or method.
	// Support: Core (Exact with service and method specified)
	//
	// Support: Implementation-specific (Exact with method specified but no service specified)
	//
	// Support: Implementation-specific (RegularExpression)
	Type *string `pulumi:"type"`
}

// GRPCRouteSpecRulesMatchesMethodPatchInput is an input type that accepts GRPCRouteSpecRulesMatchesMethodPatchArgs and GRPCRouteSpecRulesMatchesMethodPatchOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesMatchesMethodPatchInput` via:
//
//	GRPCRouteSpecRulesMatchesMethodPatchArgs{...}
type GRPCRouteSpecRulesMatchesMethodPatchInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesMatchesMethodPatchOutput() GRPCRouteSpecRulesMatchesMethodPatchOutput
	ToGRPCRouteSpecRulesMatchesMethodPatchOutputWithContext(context.Context) GRPCRouteSpecRulesMatchesMethodPatchOutput
}

// Method specifies a gRPC request service/method matcher. If this field is
// not specified, all services and methods will match.
type GRPCRouteSpecRulesMatchesMethodPatchArgs struct {
	// Value of the method to match against. If left empty or omitted, will
	// match all services.
	//
	// At least one of Service and Method MUST be a non-empty string.
	Method pulumi.StringPtrInput `pulumi:"method"`
	// Value of the service to match against. If left empty or omitted, will
	// match any service.
	//
	// At least one of Service and Method MUST be a non-empty string.
	Service pulumi.StringPtrInput `pulumi:"service"`
	// Type specifies how to match against the service and/or method.
	// Support: Core (Exact with service and method specified)
	//
	// Support: Implementation-specific (Exact with method specified but no service specified)
	//
	// Support: Implementation-specific (RegularExpression)
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GRPCRouteSpecRulesMatchesMethodPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesMatchesMethodPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesMatchesMethodPatchArgs) ToGRPCRouteSpecRulesMatchesMethodPatchOutput() GRPCRouteSpecRulesMatchesMethodPatchOutput {
	return i.ToGRPCRouteSpecRulesMatchesMethodPatchOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesMatchesMethodPatchArgs) ToGRPCRouteSpecRulesMatchesMethodPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesMethodPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesMatchesMethodPatchOutput)
}

func (i GRPCRouteSpecRulesMatchesMethodPatchArgs) ToGRPCRouteSpecRulesMatchesMethodPatchPtrOutput() GRPCRouteSpecRulesMatchesMethodPatchPtrOutput {
	return i.ToGRPCRouteSpecRulesMatchesMethodPatchPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesMatchesMethodPatchArgs) ToGRPCRouteSpecRulesMatchesMethodPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesMethodPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesMatchesMethodPatchOutput).ToGRPCRouteSpecRulesMatchesMethodPatchPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesMatchesMethodPatchPtrInput is an input type that accepts GRPCRouteSpecRulesMatchesMethodPatchArgs, GRPCRouteSpecRulesMatchesMethodPatchPtr and GRPCRouteSpecRulesMatchesMethodPatchPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesMatchesMethodPatchPtrInput` via:
//
//	        GRPCRouteSpecRulesMatchesMethodPatchArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesMatchesMethodPatchPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesMatchesMethodPatchPtrOutput() GRPCRouteSpecRulesMatchesMethodPatchPtrOutput
	ToGRPCRouteSpecRulesMatchesMethodPatchPtrOutputWithContext(context.Context) GRPCRouteSpecRulesMatchesMethodPatchPtrOutput
}

type grpcrouteSpecRulesMatchesMethodPatchPtrType GRPCRouteSpecRulesMatchesMethodPatchArgs

func GRPCRouteSpecRulesMatchesMethodPatchPtr(v *GRPCRouteSpecRulesMatchesMethodPatchArgs) GRPCRouteSpecRulesMatchesMethodPatchPtrInput {
	return (*grpcrouteSpecRulesMatchesMethodPatchPtrType)(v)
}

func (*grpcrouteSpecRulesMatchesMethodPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesMatchesMethodPatch)(nil)).Elem()
}

func (i *grpcrouteSpecRulesMatchesMethodPatchPtrType) ToGRPCRouteSpecRulesMatchesMethodPatchPtrOutput() GRPCRouteSpecRulesMatchesMethodPatchPtrOutput {
	return i.ToGRPCRouteSpecRulesMatchesMethodPatchPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesMatchesMethodPatchPtrType) ToGRPCRouteSpecRulesMatchesMethodPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesMethodPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesMatchesMethodPatchPtrOutput)
}

// Method specifies a gRPC request service/method matcher. If this field is
// not specified, all services and methods will match.
type GRPCRouteSpecRulesMatchesMethodPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesMatchesMethodPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesMatchesMethodPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesMatchesMethodPatchOutput) ToGRPCRouteSpecRulesMatchesMethodPatchOutput() GRPCRouteSpecRulesMatchesMethodPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesMatchesMethodPatchOutput) ToGRPCRouteSpecRulesMatchesMethodPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesMethodPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesMatchesMethodPatchOutput) ToGRPCRouteSpecRulesMatchesMethodPatchPtrOutput() GRPCRouteSpecRulesMatchesMethodPatchPtrOutput {
	return o.ToGRPCRouteSpecRulesMatchesMethodPatchPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesMatchesMethodPatchOutput) ToGRPCRouteSpecRulesMatchesMethodPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesMethodPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesMatchesMethodPatch) *GRPCRouteSpecRulesMatchesMethodPatch {
		return &v
	}).(GRPCRouteSpecRulesMatchesMethodPatchPtrOutput)
}

// Value of the method to match against. If left empty or omitted, will
// match all services.
//
// At least one of Service and Method MUST be a non-empty string.
func (o GRPCRouteSpecRulesMatchesMethodPatchOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesMatchesMethodPatch) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// Value of the service to match against. If left empty or omitted, will
// match any service.
//
// At least one of Service and Method MUST be a non-empty string.
func (o GRPCRouteSpecRulesMatchesMethodPatchOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesMatchesMethodPatch) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// Type specifies how to match against the service and/or method.
// Support: Core (Exact with service and method specified)
//
// Support: Implementation-specific (Exact with method specified but no service specified)
//
// Support: Implementation-specific (RegularExpression)
func (o GRPCRouteSpecRulesMatchesMethodPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesMatchesMethodPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecRulesMatchesMethodPatchPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesMatchesMethodPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesMatchesMethodPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesMatchesMethodPatchPtrOutput) ToGRPCRouteSpecRulesMatchesMethodPatchPtrOutput() GRPCRouteSpecRulesMatchesMethodPatchPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesMatchesMethodPatchPtrOutput) ToGRPCRouteSpecRulesMatchesMethodPatchPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesMethodPatchPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesMatchesMethodPatchPtrOutput) Elem() GRPCRouteSpecRulesMatchesMethodPatchOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesMatchesMethodPatch) GRPCRouteSpecRulesMatchesMethodPatch {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesMatchesMethodPatch
		return ret
	}).(GRPCRouteSpecRulesMatchesMethodPatchOutput)
}

// Value of the method to match against. If left empty or omitted, will
// match all services.
//
// At least one of Service and Method MUST be a non-empty string.
func (o GRPCRouteSpecRulesMatchesMethodPatchPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesMatchesMethodPatch) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// Value of the service to match against. If left empty or omitted, will
// match any service.
//
// At least one of Service and Method MUST be a non-empty string.
func (o GRPCRouteSpecRulesMatchesMethodPatchPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesMatchesMethodPatch) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Type specifies how to match against the service and/or method.
// Support: Core (Exact with service and method specified)
//
// Support: Implementation-specific (Exact with method specified but no service specified)
//
// Support: Implementation-specific (RegularExpression)
func (o GRPCRouteSpecRulesMatchesMethodPatchPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesMatchesMethodPatch) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// GRPCRouteMatch defines the predicate used to match requests to a given
// action. Multiple match types are ANDed together, i.e. the match will
// evaluate to true only if all conditions are satisfied.
//
// For example, the match below will match a gRPC request only if its service
// is `foo` AND it contains the `version: v1` header:
type GRPCRouteSpecRulesMatchesPatch struct {
	// Headers specifies gRPC request header matchers. Multiple match values are
	// ANDed together, meaning, a request MUST match all the specified headers
	// to select the route.
	Headers []GRPCRouteSpecRulesMatchesHeadersPatch `pulumi:"headers"`
	Method  *GRPCRouteSpecRulesMatchesMethodPatch   `pulumi:"method"`
}

// GRPCRouteSpecRulesMatchesPatchInput is an input type that accepts GRPCRouteSpecRulesMatchesPatchArgs and GRPCRouteSpecRulesMatchesPatchOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesMatchesPatchInput` via:
//
//	GRPCRouteSpecRulesMatchesPatchArgs{...}
type GRPCRouteSpecRulesMatchesPatchInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesMatchesPatchOutput() GRPCRouteSpecRulesMatchesPatchOutput
	ToGRPCRouteSpecRulesMatchesPatchOutputWithContext(context.Context) GRPCRouteSpecRulesMatchesPatchOutput
}

// GRPCRouteMatch defines the predicate used to match requests to a given
// action. Multiple match types are ANDed together, i.e. the match will
// evaluate to true only if all conditions are satisfied.
//
// For example, the match below will match a gRPC request only if its service
// is `foo` AND it contains the `version: v1` header:
type GRPCRouteSpecRulesMatchesPatchArgs struct {
	// Headers specifies gRPC request header matchers. Multiple match values are
	// ANDed together, meaning, a request MUST match all the specified headers
	// to select the route.
	Headers GRPCRouteSpecRulesMatchesHeadersPatchArrayInput `pulumi:"headers"`
	Method  GRPCRouteSpecRulesMatchesMethodPatchPtrInput    `pulumi:"method"`
}

func (GRPCRouteSpecRulesMatchesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesMatchesPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesMatchesPatchArgs) ToGRPCRouteSpecRulesMatchesPatchOutput() GRPCRouteSpecRulesMatchesPatchOutput {
	return i.ToGRPCRouteSpecRulesMatchesPatchOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesMatchesPatchArgs) ToGRPCRouteSpecRulesMatchesPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesMatchesPatchOutput)
}

// GRPCRouteSpecRulesMatchesPatchArrayInput is an input type that accepts GRPCRouteSpecRulesMatchesPatchArray and GRPCRouteSpecRulesMatchesPatchArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesMatchesPatchArrayInput` via:
//
//	GRPCRouteSpecRulesMatchesPatchArray{ GRPCRouteSpecRulesMatchesPatchArgs{...} }
type GRPCRouteSpecRulesMatchesPatchArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesMatchesPatchArrayOutput() GRPCRouteSpecRulesMatchesPatchArrayOutput
	ToGRPCRouteSpecRulesMatchesPatchArrayOutputWithContext(context.Context) GRPCRouteSpecRulesMatchesPatchArrayOutput
}

type GRPCRouteSpecRulesMatchesPatchArray []GRPCRouteSpecRulesMatchesPatchInput

func (GRPCRouteSpecRulesMatchesPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesMatchesPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesMatchesPatchArray) ToGRPCRouteSpecRulesMatchesPatchArrayOutput() GRPCRouteSpecRulesMatchesPatchArrayOutput {
	return i.ToGRPCRouteSpecRulesMatchesPatchArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesMatchesPatchArray) ToGRPCRouteSpecRulesMatchesPatchArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesMatchesPatchArrayOutput)
}

// GRPCRouteMatch defines the predicate used to match requests to a given
// action. Multiple match types are ANDed together, i.e. the match will
// evaluate to true only if all conditions are satisfied.
//
// For example, the match below will match a gRPC request only if its service
// is `foo` AND it contains the `version: v1` header:
type GRPCRouteSpecRulesMatchesPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesMatchesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesMatchesPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesMatchesPatchOutput) ToGRPCRouteSpecRulesMatchesPatchOutput() GRPCRouteSpecRulesMatchesPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesMatchesPatchOutput) ToGRPCRouteSpecRulesMatchesPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesPatchOutput {
	return o
}

// Headers specifies gRPC request header matchers. Multiple match values are
// ANDed together, meaning, a request MUST match all the specified headers
// to select the route.
func (o GRPCRouteSpecRulesMatchesPatchOutput) Headers() GRPCRouteSpecRulesMatchesHeadersPatchArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesMatchesPatch) []GRPCRouteSpecRulesMatchesHeadersPatch { return v.Headers }).(GRPCRouteSpecRulesMatchesHeadersPatchArrayOutput)
}

func (o GRPCRouteSpecRulesMatchesPatchOutput) Method() GRPCRouteSpecRulesMatchesMethodPatchPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesMatchesPatch) *GRPCRouteSpecRulesMatchesMethodPatch { return v.Method }).(GRPCRouteSpecRulesMatchesMethodPatchPtrOutput)
}

type GRPCRouteSpecRulesMatchesPatchArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesMatchesPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesMatchesPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesMatchesPatchArrayOutput) ToGRPCRouteSpecRulesMatchesPatchArrayOutput() GRPCRouteSpecRulesMatchesPatchArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesMatchesPatchArrayOutput) ToGRPCRouteSpecRulesMatchesPatchArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesPatchArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesMatchesPatchArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesMatchesPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesMatchesPatch {
		return vs[0].([]GRPCRouteSpecRulesMatchesPatch)[vs[1].(int)]
	}).(GRPCRouteSpecRulesMatchesPatchOutput)
}

// GRPCRouteRule defines the semantics for matching a gRPC request based on
// conditions (matches), processing it (filters), and forwarding the request to
// an API object (backendRefs).
type GRPCRouteSpecRulesPatch struct {
	// BackendRefs defines the backend(s) where matching requests should be
	// sent.
	//
	// Failure behavior here depends on how many BackendRefs are specified and
	// how many are invalid.
	//
	// If *all* entries in BackendRefs are invalid, and there are also no filters
	// specified in this route rule, *all* traffic which matches this rule MUST
	// receive an `UNAVAILABLE` status.
	//
	// See the GRPCBackendRef definition for the rules about what makes a single
	// GRPCBackendRef invalid.
	//
	// When a GRPCBackendRef is invalid, `UNAVAILABLE` statuses MUST be returned for
	// requests that would have otherwise been routed to an invalid backend. If
	// multiple backends are specified, and some are invalid, the proportion of
	// requests that would otherwise have been routed to an invalid backend
	// MUST receive an `UNAVAILABLE` status.
	//
	// For example, if two backends are specified with equal weights, and one is
	// invalid, 50 percent of traffic MUST receive an `UNAVAILABLE` status.
	// Implementations may choose how that 50 percent is determined.
	//
	// Support: Core for Kubernetes Service
	//
	// Support: Implementation-specific for any other resource
	//
	// Support for weight: Core
	BackendRefs []GRPCRouteSpecRulesBackendRefsPatch `pulumi:"backendRefs"`
	// Filters define the filters that are applied to requests that match
	// this rule.
	//
	// The effects of ordering of multiple behaviors are currently unspecified.
	// This can change in the future based on feedback during the alpha stage.
	//
	// Conformance-levels at this level are defined based on the type of filter:
	//
	// - ALL core filters MUST be supported by all implementations that support
	//   GRPCRoute.
	// - Implementers are encouraged to support extended filters.
	// - Implementation-specific custom filters have no API guarantees across
	//   implementations.
	//
	// Specifying the same filter multiple times is not supported unless explicitly
	// indicated in the filter.
	//
	// If an implementation can not support a combination of filters, it must clearly
	// document that limitation. In cases where incompatible or unsupported
	// filters are specified and cause the `Accepted` condition to be set to status
	// `False`, implementations may use the `IncompatibleFilters` reason to specify
	// this configuration error.
	//
	// Support: Core
	Filters []GRPCRouteSpecRulesFiltersPatch `pulumi:"filters"`
	// Matches define conditions used for matching the rule against incoming
	// gRPC requests. Each match is independent, i.e. this rule will be matched
	// if **any** one of the matches is satisfied.
	//
	// For example, take the following matches configuration:
	//
	// For a request to match against this rule, it MUST satisfy
	// EITHER of the two conditions:
	//
	// - service of foo.bar AND contains the header `version: 2`
	// - service of foo.bar.v2
	//
	// See the documentation for GRPCRouteMatch on how to specify multiple
	// match conditions to be ANDed together.
	//
	// If no matches are specified, the implementation MUST match every gRPC request.
	//
	// Proxy or Load Balancer routing configuration generated from GRPCRoutes
	// MUST prioritize rules based on the following criteria, continuing on
	// ties. Merging MUST not be done between GRPCRoutes and HTTPRoutes.
	// Precedence MUST be given to the rule with the largest number of:
	//
	// * Characters in a matching non-wildcard hostname.
	// * Characters in a matching hostname.
	// * Characters in a matching service.
	// * Characters in a matching method.
	// * Header matches.
	//
	// If ties still exist across multiple Routes, matching precedence MUST be
	// determined in order of the following criteria, continuing on ties:
	//
	// * The oldest Route based on creation timestamp.
	// * The Route appearing first in alphabetical order by
	//   "{namespace}/{name}".
	//
	// If ties still exist within the Route that has been given precedence,
	// matching precedence MUST be granted to the first matching rule meeting
	// the above criteria.
	Matches []GRPCRouteSpecRulesMatchesPatch `pulumi:"matches"`
}

// GRPCRouteSpecRulesPatchInput is an input type that accepts GRPCRouteSpecRulesPatchArgs and GRPCRouteSpecRulesPatchOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesPatchInput` via:
//
//	GRPCRouteSpecRulesPatchArgs{...}
type GRPCRouteSpecRulesPatchInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesPatchOutput() GRPCRouteSpecRulesPatchOutput
	ToGRPCRouteSpecRulesPatchOutputWithContext(context.Context) GRPCRouteSpecRulesPatchOutput
}

// GRPCRouteRule defines the semantics for matching a gRPC request based on
// conditions (matches), processing it (filters), and forwarding the request to
// an API object (backendRefs).
type GRPCRouteSpecRulesPatchArgs struct {
	// BackendRefs defines the backend(s) where matching requests should be
	// sent.
	//
	// Failure behavior here depends on how many BackendRefs are specified and
	// how many are invalid.
	//
	// If *all* entries in BackendRefs are invalid, and there are also no filters
	// specified in this route rule, *all* traffic which matches this rule MUST
	// receive an `UNAVAILABLE` status.
	//
	// See the GRPCBackendRef definition for the rules about what makes a single
	// GRPCBackendRef invalid.
	//
	// When a GRPCBackendRef is invalid, `UNAVAILABLE` statuses MUST be returned for
	// requests that would have otherwise been routed to an invalid backend. If
	// multiple backends are specified, and some are invalid, the proportion of
	// requests that would otherwise have been routed to an invalid backend
	// MUST receive an `UNAVAILABLE` status.
	//
	// For example, if two backends are specified with equal weights, and one is
	// invalid, 50 percent of traffic MUST receive an `UNAVAILABLE` status.
	// Implementations may choose how that 50 percent is determined.
	//
	// Support: Core for Kubernetes Service
	//
	// Support: Implementation-specific for any other resource
	//
	// Support for weight: Core
	BackendRefs GRPCRouteSpecRulesBackendRefsPatchArrayInput `pulumi:"backendRefs"`
	// Filters define the filters that are applied to requests that match
	// this rule.
	//
	// The effects of ordering of multiple behaviors are currently unspecified.
	// This can change in the future based on feedback during the alpha stage.
	//
	// Conformance-levels at this level are defined based on the type of filter:
	//
	// - ALL core filters MUST be supported by all implementations that support
	//   GRPCRoute.
	// - Implementers are encouraged to support extended filters.
	// - Implementation-specific custom filters have no API guarantees across
	//   implementations.
	//
	// Specifying the same filter multiple times is not supported unless explicitly
	// indicated in the filter.
	//
	// If an implementation can not support a combination of filters, it must clearly
	// document that limitation. In cases where incompatible or unsupported
	// filters are specified and cause the `Accepted` condition to be set to status
	// `False`, implementations may use the `IncompatibleFilters` reason to specify
	// this configuration error.
	//
	// Support: Core
	Filters GRPCRouteSpecRulesFiltersPatchArrayInput `pulumi:"filters"`
	// Matches define conditions used for matching the rule against incoming
	// gRPC requests. Each match is independent, i.e. this rule will be matched
	// if **any** one of the matches is satisfied.
	//
	// For example, take the following matches configuration:
	//
	// For a request to match against this rule, it MUST satisfy
	// EITHER of the two conditions:
	//
	// - service of foo.bar AND contains the header `version: 2`
	// - service of foo.bar.v2
	//
	// See the documentation for GRPCRouteMatch on how to specify multiple
	// match conditions to be ANDed together.
	//
	// If no matches are specified, the implementation MUST match every gRPC request.
	//
	// Proxy or Load Balancer routing configuration generated from GRPCRoutes
	// MUST prioritize rules based on the following criteria, continuing on
	// ties. Merging MUST not be done between GRPCRoutes and HTTPRoutes.
	// Precedence MUST be given to the rule with the largest number of:
	//
	// * Characters in a matching non-wildcard hostname.
	// * Characters in a matching hostname.
	// * Characters in a matching service.
	// * Characters in a matching method.
	// * Header matches.
	//
	// If ties still exist across multiple Routes, matching precedence MUST be
	// determined in order of the following criteria, continuing on ties:
	//
	// * The oldest Route based on creation timestamp.
	// * The Route appearing first in alphabetical order by
	//   "{namespace}/{name}".
	//
	// If ties still exist within the Route that has been given precedence,
	// matching precedence MUST be granted to the first matching rule meeting
	// the above criteria.
	Matches GRPCRouteSpecRulesMatchesPatchArrayInput `pulumi:"matches"`
}

func (GRPCRouteSpecRulesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesPatchArgs) ToGRPCRouteSpecRulesPatchOutput() GRPCRouteSpecRulesPatchOutput {
	return i.ToGRPCRouteSpecRulesPatchOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesPatchArgs) ToGRPCRouteSpecRulesPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesPatchOutput)
}

// GRPCRouteSpecRulesPatchArrayInput is an input type that accepts GRPCRouteSpecRulesPatchArray and GRPCRouteSpecRulesPatchArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesPatchArrayInput` via:
//
//	GRPCRouteSpecRulesPatchArray{ GRPCRouteSpecRulesPatchArgs{...} }
type GRPCRouteSpecRulesPatchArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesPatchArrayOutput() GRPCRouteSpecRulesPatchArrayOutput
	ToGRPCRouteSpecRulesPatchArrayOutputWithContext(context.Context) GRPCRouteSpecRulesPatchArrayOutput
}

type GRPCRouteSpecRulesPatchArray []GRPCRouteSpecRulesPatchInput

func (GRPCRouteSpecRulesPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesPatch)(nil)).Elem()
}

func (i GRPCRouteSpecRulesPatchArray) ToGRPCRouteSpecRulesPatchArrayOutput() GRPCRouteSpecRulesPatchArrayOutput {
	return i.ToGRPCRouteSpecRulesPatchArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesPatchArray) ToGRPCRouteSpecRulesPatchArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesPatchArrayOutput)
}

// GRPCRouteRule defines the semantics for matching a gRPC request based on
// conditions (matches), processing it (filters), and forwarding the request to
// an API object (backendRefs).
type GRPCRouteSpecRulesPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesPatchOutput) ToGRPCRouteSpecRulesPatchOutput() GRPCRouteSpecRulesPatchOutput {
	return o
}

func (o GRPCRouteSpecRulesPatchOutput) ToGRPCRouteSpecRulesPatchOutputWithContext(ctx context.Context) GRPCRouteSpecRulesPatchOutput {
	return o
}

// BackendRefs defines the backend(s) where matching requests should be
// sent.
//
// Failure behavior here depends on how many BackendRefs are specified and
// how many are invalid.
//
// If *all* entries in BackendRefs are invalid, and there are also no filters
// specified in this route rule, *all* traffic which matches this rule MUST
// receive an `UNAVAILABLE` status.
//
// See the GRPCBackendRef definition for the rules about what makes a single
// GRPCBackendRef invalid.
//
// When a GRPCBackendRef is invalid, `UNAVAILABLE` statuses MUST be returned for
// requests that would have otherwise been routed to an invalid backend. If
// multiple backends are specified, and some are invalid, the proportion of
// requests that would otherwise have been routed to an invalid backend
// MUST receive an `UNAVAILABLE` status.
//
// For example, if two backends are specified with equal weights, and one is
// invalid, 50 percent of traffic MUST receive an `UNAVAILABLE` status.
// Implementations may choose how that 50 percent is determined.
//
// Support: Core for Kubernetes Service
//
// Support: Implementation-specific for any other resource
//
// Support for weight: Core
func (o GRPCRouteSpecRulesPatchOutput) BackendRefs() GRPCRouteSpecRulesBackendRefsPatchArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesPatch) []GRPCRouteSpecRulesBackendRefsPatch { return v.BackendRefs }).(GRPCRouteSpecRulesBackendRefsPatchArrayOutput)
}

// Filters define the filters that are applied to requests that match
// this rule.
//
// The effects of ordering of multiple behaviors are currently unspecified.
// This can change in the future based on feedback during the alpha stage.
//
// Conformance-levels at this level are defined based on the type of filter:
//
//   - ALL core filters MUST be supported by all implementations that support
//     GRPCRoute.
//   - Implementers are encouraged to support extended filters.
//   - Implementation-specific custom filters have no API guarantees across
//     implementations.
//
// Specifying the same filter multiple times is not supported unless explicitly
// indicated in the filter.
//
// If an implementation can not support a combination of filters, it must clearly
// document that limitation. In cases where incompatible or unsupported
// filters are specified and cause the `Accepted` condition to be set to status
// `False`, implementations may use the `IncompatibleFilters` reason to specify
// this configuration error.
//
// Support: Core
func (o GRPCRouteSpecRulesPatchOutput) Filters() GRPCRouteSpecRulesFiltersPatchArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesPatch) []GRPCRouteSpecRulesFiltersPatch { return v.Filters }).(GRPCRouteSpecRulesFiltersPatchArrayOutput)
}

// Matches define conditions used for matching the rule against incoming
// gRPC requests. Each match is independent, i.e. this rule will be matched
// if **any** one of the matches is satisfied.
//
// For example, take the following matches configuration:
//
// For a request to match against this rule, it MUST satisfy
// EITHER of the two conditions:
//
// - service of foo.bar AND contains the header `version: 2`
// - service of foo.bar.v2
//
// See the documentation for GRPCRouteMatch on how to specify multiple
// match conditions to be ANDed together.
//
// If no matches are specified, the implementation MUST match every gRPC request.
//
// Proxy or Load Balancer routing configuration generated from GRPCRoutes
// MUST prioritize rules based on the following criteria, continuing on
// ties. Merging MUST not be done between GRPCRoutes and HTTPRoutes.
// Precedence MUST be given to the rule with the largest number of:
//
// * Characters in a matching non-wildcard hostname.
// * Characters in a matching hostname.
// * Characters in a matching service.
// * Characters in a matching method.
// * Header matches.
//
// If ties still exist across multiple Routes, matching precedence MUST be
// determined in order of the following criteria, continuing on ties:
//
//   - The oldest Route based on creation timestamp.
//   - The Route appearing first in alphabetical order by
//     "{namespace}/{name}".
//
// If ties still exist within the Route that has been given precedence,
// matching precedence MUST be granted to the first matching rule meeting
// the above criteria.
func (o GRPCRouteSpecRulesPatchOutput) Matches() GRPCRouteSpecRulesMatchesPatchArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesPatch) []GRPCRouteSpecRulesMatchesPatch { return v.Matches }).(GRPCRouteSpecRulesMatchesPatchArrayOutput)
}

type GRPCRouteSpecRulesPatchArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesPatch)(nil)).Elem()
}

func (o GRPCRouteSpecRulesPatchArrayOutput) ToGRPCRouteSpecRulesPatchArrayOutput() GRPCRouteSpecRulesPatchArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesPatchArrayOutput) ToGRPCRouteSpecRulesPatchArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesPatchArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesPatchArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesPatch {
		return vs[0].([]GRPCRouteSpecRulesPatch)[vs[1].(int)]
	}).(GRPCRouteSpecRulesPatchOutput)
}

// Status defines the current state of GRPCRoute.
type GRPCRouteStatus struct {
	// Parents is a list of parent resources (usually Gateways) that are
	// associated with the route, and the status of the route with respect to
	// each parent. When this route attaches to a parent, the controller that
	// manages the parent must add an entry to this list when the controller
	// first sees the route and should update the entry as appropriate when the
	// route or gateway is modified.
	//
	// Note that parent references that cannot be resolved by an implementation
	// of this API will not be added to this list. Implementations of this API
	// can only populate Route status for the Gateways/parent resources they are
	// responsible for.
	//
	// A maximum of 32 Gateways will be represented in this list. An empty list
	// means the route has not been attached to any Gateway.
	Parents []GRPCRouteStatusParents `pulumi:"parents"`
}

// GRPCRouteStatusInput is an input type that accepts GRPCRouteStatusArgs and GRPCRouteStatusOutput values.
// You can construct a concrete instance of `GRPCRouteStatusInput` via:
//
//	GRPCRouteStatusArgs{...}
type GRPCRouteStatusInput interface {
	pulumi.Input

	ToGRPCRouteStatusOutput() GRPCRouteStatusOutput
	ToGRPCRouteStatusOutputWithContext(context.Context) GRPCRouteStatusOutput
}

// Status defines the current state of GRPCRoute.
type GRPCRouteStatusArgs struct {
	// Parents is a list of parent resources (usually Gateways) that are
	// associated with the route, and the status of the route with respect to
	// each parent. When this route attaches to a parent, the controller that
	// manages the parent must add an entry to this list when the controller
	// first sees the route and should update the entry as appropriate when the
	// route or gateway is modified.
	//
	// Note that parent references that cannot be resolved by an implementation
	// of this API will not be added to this list. Implementations of this API
	// can only populate Route status for the Gateways/parent resources they are
	// responsible for.
	//
	// A maximum of 32 Gateways will be represented in this list. An empty list
	// means the route has not been attached to any Gateway.
	Parents GRPCRouteStatusParentsArrayInput `pulumi:"parents"`
}

func (GRPCRouteStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteStatus)(nil)).Elem()
}

func (i GRPCRouteStatusArgs) ToGRPCRouteStatusOutput() GRPCRouteStatusOutput {
	return i.ToGRPCRouteStatusOutputWithContext(context.Background())
}

func (i GRPCRouteStatusArgs) ToGRPCRouteStatusOutputWithContext(ctx context.Context) GRPCRouteStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteStatusOutput)
}

func (i GRPCRouteStatusArgs) ToGRPCRouteStatusPtrOutput() GRPCRouteStatusPtrOutput {
	return i.ToGRPCRouteStatusPtrOutputWithContext(context.Background())
}

func (i GRPCRouteStatusArgs) ToGRPCRouteStatusPtrOutputWithContext(ctx context.Context) GRPCRouteStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteStatusOutput).ToGRPCRouteStatusPtrOutputWithContext(ctx)
}

// GRPCRouteStatusPtrInput is an input type that accepts GRPCRouteStatusArgs, GRPCRouteStatusPtr and GRPCRouteStatusPtrOutput values.
// You can construct a concrete instance of `GRPCRouteStatusPtrInput` via:
//
//	        GRPCRouteStatusArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteStatusPtrInput interface {
	pulumi.Input

	ToGRPCRouteStatusPtrOutput() GRPCRouteStatusPtrOutput
	ToGRPCRouteStatusPtrOutputWithContext(context.Context) GRPCRouteStatusPtrOutput
}

type grpcrouteStatusPtrType GRPCRouteStatusArgs

func GRPCRouteStatusPtr(v *GRPCRouteStatusArgs) GRPCRouteStatusPtrInput {
	return (*grpcrouteStatusPtrType)(v)
}

func (*grpcrouteStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteStatus)(nil)).Elem()
}

func (i *grpcrouteStatusPtrType) ToGRPCRouteStatusPtrOutput() GRPCRouteStatusPtrOutput {
	return i.ToGRPCRouteStatusPtrOutputWithContext(context.Background())
}

func (i *grpcrouteStatusPtrType) ToGRPCRouteStatusPtrOutputWithContext(ctx context.Context) GRPCRouteStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteStatusPtrOutput)
}

// Status defines the current state of GRPCRoute.
type GRPCRouteStatusOutput struct{ *pulumi.OutputState }

func (GRPCRouteStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteStatus)(nil)).Elem()
}

func (o GRPCRouteStatusOutput) ToGRPCRouteStatusOutput() GRPCRouteStatusOutput {
	return o
}

func (o GRPCRouteStatusOutput) ToGRPCRouteStatusOutputWithContext(ctx context.Context) GRPCRouteStatusOutput {
	return o
}

func (o GRPCRouteStatusOutput) ToGRPCRouteStatusPtrOutput() GRPCRouteStatusPtrOutput {
	return o.ToGRPCRouteStatusPtrOutputWithContext(context.Background())
}

func (o GRPCRouteStatusOutput) ToGRPCRouteStatusPtrOutputWithContext(ctx context.Context) GRPCRouteStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteStatus) *GRPCRouteStatus {
		return &v
	}).(GRPCRouteStatusPtrOutput)
}

// Parents is a list of parent resources (usually Gateways) that are
// associated with the route, and the status of the route with respect to
// each parent. When this route attaches to a parent, the controller that
// manages the parent must add an entry to this list when the controller
// first sees the route and should update the entry as appropriate when the
// route or gateway is modified.
//
// Note that parent references that cannot be resolved by an implementation
// of this API will not be added to this list. Implementations of this API
// can only populate Route status for the Gateways/parent resources they are
// responsible for.
//
// A maximum of 32 Gateways will be represented in this list. An empty list
// means the route has not been attached to any Gateway.
func (o GRPCRouteStatusOutput) Parents() GRPCRouteStatusParentsArrayOutput {
	return o.ApplyT(func(v GRPCRouteStatus) []GRPCRouteStatusParents { return v.Parents }).(GRPCRouteStatusParentsArrayOutput)
}

type GRPCRouteStatusPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteStatus)(nil)).Elem()
}

func (o GRPCRouteStatusPtrOutput) ToGRPCRouteStatusPtrOutput() GRPCRouteStatusPtrOutput {
	return o
}

func (o GRPCRouteStatusPtrOutput) ToGRPCRouteStatusPtrOutputWithContext(ctx context.Context) GRPCRouteStatusPtrOutput {
	return o
}

func (o GRPCRouteStatusPtrOutput) Elem() GRPCRouteStatusOutput {
	return o.ApplyT(func(v *GRPCRouteStatus) GRPCRouteStatus {
		if v != nil {
			return *v
		}
		var ret GRPCRouteStatus
		return ret
	}).(GRPCRouteStatusOutput)
}

// Parents is a list of parent resources (usually Gateways) that are
// associated with the route, and the status of the route with respect to
// each parent. When this route attaches to a parent, the controller that
// manages the parent must add an entry to this list when the controller
// first sees the route and should update the entry as appropriate when the
// route or gateway is modified.
//
// Note that parent references that cannot be resolved by an implementation
// of this API will not be added to this list. Implementations of this API
// can only populate Route status for the Gateways/parent resources they are
// responsible for.
//
// A maximum of 32 Gateways will be represented in this list. An empty list
// means the route has not been attached to any Gateway.
func (o GRPCRouteStatusPtrOutput) Parents() GRPCRouteStatusParentsArrayOutput {
	return o.ApplyT(func(v *GRPCRouteStatus) []GRPCRouteStatusParents {
		if v == nil {
			return nil
		}
		return v.Parents
	}).(GRPCRouteStatusParentsArrayOutput)
}

// RouteParentStatus describes the status of a route with respect to an
// associated Parent.
type GRPCRouteStatusParents struct {
	// Conditions describes the status of the route with respect to the Gateway.
	// Note that the route's availability is also subject to the Gateway's own
	// status conditions and listener status.
	//
	// If the Route's ParentRef specifies an existing Gateway that supports
	// Routes of this kind AND that Gateway's controller has sufficient access,
	// then that Gateway's controller MUST set the "Accepted" condition on the
	// Route, to indicate whether the route has been accepted or rejected by the
	// Gateway, and why.
	//
	// A Route MUST be considered "Accepted" if at least one of the Route's
	// rules is implemented by the Gateway.
	//
	// There are a number of cases where the "Accepted" condition may not be set
	// due to lack of controller visibility, that includes when:
	//
	// * The Route refers to a non-existent parent.
	// * The Route is of a type that the controller does not support.
	// * The Route is in a namespace the controller does not have access to.
	Conditions []GRPCRouteStatusParentsConditions `pulumi:"conditions"`
	// ControllerName is a domain/path string that indicates the name of the
	// controller that wrote this status. This corresponds with the
	// controllerName field on GatewayClass.
	//
	// Example: "example.net/gateway-controller".
	//
	// The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
	// valid Kubernetes names
	// (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	//
	// Controllers MUST populate this field when writing status. Controllers should ensure that
	// entries to status populated with their ControllerName are cleaned up when they are no
	// longer necessary.
	ControllerName *string                          `pulumi:"controllerName"`
	ParentRef      *GRPCRouteStatusParentsParentRef `pulumi:"parentRef"`
}

// GRPCRouteStatusParentsInput is an input type that accepts GRPCRouteStatusParentsArgs and GRPCRouteStatusParentsOutput values.
// You can construct a concrete instance of `GRPCRouteStatusParentsInput` via:
//
//	GRPCRouteStatusParentsArgs{...}
type GRPCRouteStatusParentsInput interface {
	pulumi.Input

	ToGRPCRouteStatusParentsOutput() GRPCRouteStatusParentsOutput
	ToGRPCRouteStatusParentsOutputWithContext(context.Context) GRPCRouteStatusParentsOutput
}

// RouteParentStatus describes the status of a route with respect to an
// associated Parent.
type GRPCRouteStatusParentsArgs struct {
	// Conditions describes the status of the route with respect to the Gateway.
	// Note that the route's availability is also subject to the Gateway's own
	// status conditions and listener status.
	//
	// If the Route's ParentRef specifies an existing Gateway that supports
	// Routes of this kind AND that Gateway's controller has sufficient access,
	// then that Gateway's controller MUST set the "Accepted" condition on the
	// Route, to indicate whether the route has been accepted or rejected by the
	// Gateway, and why.
	//
	// A Route MUST be considered "Accepted" if at least one of the Route's
	// rules is implemented by the Gateway.
	//
	// There are a number of cases where the "Accepted" condition may not be set
	// due to lack of controller visibility, that includes when:
	//
	// * The Route refers to a non-existent parent.
	// * The Route is of a type that the controller does not support.
	// * The Route is in a namespace the controller does not have access to.
	Conditions GRPCRouteStatusParentsConditionsArrayInput `pulumi:"conditions"`
	// ControllerName is a domain/path string that indicates the name of the
	// controller that wrote this status. This corresponds with the
	// controllerName field on GatewayClass.
	//
	// Example: "example.net/gateway-controller".
	//
	// The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
	// valid Kubernetes names
	// (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	//
	// Controllers MUST populate this field when writing status. Controllers should ensure that
	// entries to status populated with their ControllerName are cleaned up when they are no
	// longer necessary.
	ControllerName pulumi.StringPtrInput                   `pulumi:"controllerName"`
	ParentRef      GRPCRouteStatusParentsParentRefPtrInput `pulumi:"parentRef"`
}

func (GRPCRouteStatusParentsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteStatusParents)(nil)).Elem()
}

func (i GRPCRouteStatusParentsArgs) ToGRPCRouteStatusParentsOutput() GRPCRouteStatusParentsOutput {
	return i.ToGRPCRouteStatusParentsOutputWithContext(context.Background())
}

func (i GRPCRouteStatusParentsArgs) ToGRPCRouteStatusParentsOutputWithContext(ctx context.Context) GRPCRouteStatusParentsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteStatusParentsOutput)
}

// GRPCRouteStatusParentsArrayInput is an input type that accepts GRPCRouteStatusParentsArray and GRPCRouteStatusParentsArrayOutput values.
// You can construct a concrete instance of `GRPCRouteStatusParentsArrayInput` via:
//
//	GRPCRouteStatusParentsArray{ GRPCRouteStatusParentsArgs{...} }
type GRPCRouteStatusParentsArrayInput interface {
	pulumi.Input

	ToGRPCRouteStatusParentsArrayOutput() GRPCRouteStatusParentsArrayOutput
	ToGRPCRouteStatusParentsArrayOutputWithContext(context.Context) GRPCRouteStatusParentsArrayOutput
}

type GRPCRouteStatusParentsArray []GRPCRouteStatusParentsInput

func (GRPCRouteStatusParentsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteStatusParents)(nil)).Elem()
}

func (i GRPCRouteStatusParentsArray) ToGRPCRouteStatusParentsArrayOutput() GRPCRouteStatusParentsArrayOutput {
	return i.ToGRPCRouteStatusParentsArrayOutputWithContext(context.Background())
}

func (i GRPCRouteStatusParentsArray) ToGRPCRouteStatusParentsArrayOutputWithContext(ctx context.Context) GRPCRouteStatusParentsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteStatusParentsArrayOutput)
}

// RouteParentStatus describes the status of a route with respect to an
// associated Parent.
type GRPCRouteStatusParentsOutput struct{ *pulumi.OutputState }

func (GRPCRouteStatusParentsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteStatusParents)(nil)).Elem()
}

func (o GRPCRouteStatusParentsOutput) ToGRPCRouteStatusParentsOutput() GRPCRouteStatusParentsOutput {
	return o
}

func (o GRPCRouteStatusParentsOutput) ToGRPCRouteStatusParentsOutputWithContext(ctx context.Context) GRPCRouteStatusParentsOutput {
	return o
}

// Conditions describes the status of the route with respect to the Gateway.
// Note that the route's availability is also subject to the Gateway's own
// status conditions and listener status.
//
// If the Route's ParentRef specifies an existing Gateway that supports
// Routes of this kind AND that Gateway's controller has sufficient access,
// then that Gateway's controller MUST set the "Accepted" condition on the
// Route, to indicate whether the route has been accepted or rejected by the
// Gateway, and why.
//
// A Route MUST be considered "Accepted" if at least one of the Route's
// rules is implemented by the Gateway.
//
// There are a number of cases where the "Accepted" condition may not be set
// due to lack of controller visibility, that includes when:
//
// * The Route refers to a non-existent parent.
// * The Route is of a type that the controller does not support.
// * The Route is in a namespace the controller does not have access to.
func (o GRPCRouteStatusParentsOutput) Conditions() GRPCRouteStatusParentsConditionsArrayOutput {
	return o.ApplyT(func(v GRPCRouteStatusParents) []GRPCRouteStatusParentsConditions { return v.Conditions }).(GRPCRouteStatusParentsConditionsArrayOutput)
}

// ControllerName is a domain/path string that indicates the name of the
// controller that wrote this status. This corresponds with the
// controllerName field on GatewayClass.
//
// Example: "example.net/gateway-controller".
//
// The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
// valid Kubernetes names
// (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
//
// Controllers MUST populate this field when writing status. Controllers should ensure that
// entries to status populated with their ControllerName are cleaned up when they are no
// longer necessary.
func (o GRPCRouteStatusParentsOutput) ControllerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParents) *string { return v.ControllerName }).(pulumi.StringPtrOutput)
}

func (o GRPCRouteStatusParentsOutput) ParentRef() GRPCRouteStatusParentsParentRefPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParents) *GRPCRouteStatusParentsParentRef { return v.ParentRef }).(GRPCRouteStatusParentsParentRefPtrOutput)
}

type GRPCRouteStatusParentsArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteStatusParentsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteStatusParents)(nil)).Elem()
}

func (o GRPCRouteStatusParentsArrayOutput) ToGRPCRouteStatusParentsArrayOutput() GRPCRouteStatusParentsArrayOutput {
	return o
}

func (o GRPCRouteStatusParentsArrayOutput) ToGRPCRouteStatusParentsArrayOutputWithContext(ctx context.Context) GRPCRouteStatusParentsArrayOutput {
	return o
}

func (o GRPCRouteStatusParentsArrayOutput) Index(i pulumi.IntInput) GRPCRouteStatusParentsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteStatusParents {
		return vs[0].([]GRPCRouteStatusParents)[vs[1].(int)]
	}).(GRPCRouteStatusParentsOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
// ---
// This struct is intended for direct use as an array at the field path .status.conditions.  For example,
//
//	type FooStatus struct{
//	    // Represents the observations of a foo's current state.
//	    // Known .status.conditions.type are: "Available", "Progressing", and "Degraded"
//	    // +patchMergeKey=type
//	    // +patchStrategy=merge
//	    // +listType=map
//	    // +listMapKey=type
//	    Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`
//
//
//	    // other fields
//	}
type GRPCRouteStatusParentsConditions struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	// ---
	// Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
	// useful (see .node.status.conditions), the ability to deconflict is important.
	// The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
	Type *string `pulumi:"type"`
}

// GRPCRouteStatusParentsConditionsInput is an input type that accepts GRPCRouteStatusParentsConditionsArgs and GRPCRouteStatusParentsConditionsOutput values.
// You can construct a concrete instance of `GRPCRouteStatusParentsConditionsInput` via:
//
//	GRPCRouteStatusParentsConditionsArgs{...}
type GRPCRouteStatusParentsConditionsInput interface {
	pulumi.Input

	ToGRPCRouteStatusParentsConditionsOutput() GRPCRouteStatusParentsConditionsOutput
	ToGRPCRouteStatusParentsConditionsOutputWithContext(context.Context) GRPCRouteStatusParentsConditionsOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
// ---
// This struct is intended for direct use as an array at the field path .status.conditions.  For example,
//
//	type FooStatus struct{
//	    // Represents the observations of a foo's current state.
//	    // Known .status.conditions.type are: "Available", "Progressing", and "Degraded"
//	    // +patchMergeKey=type
//	    // +patchStrategy=merge
//	    // +listType=map
//	    // +listMapKey=type
//	    Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`
//
//
//	    // other fields
//	}
type GRPCRouteStatusParentsConditionsArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	// ---
	// Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
	// useful (see .node.status.conditions), the ability to deconflict is important.
	// The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GRPCRouteStatusParentsConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteStatusParentsConditions)(nil)).Elem()
}

func (i GRPCRouteStatusParentsConditionsArgs) ToGRPCRouteStatusParentsConditionsOutput() GRPCRouteStatusParentsConditionsOutput {
	return i.ToGRPCRouteStatusParentsConditionsOutputWithContext(context.Background())
}

func (i GRPCRouteStatusParentsConditionsArgs) ToGRPCRouteStatusParentsConditionsOutputWithContext(ctx context.Context) GRPCRouteStatusParentsConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteStatusParentsConditionsOutput)
}

// GRPCRouteStatusParentsConditionsArrayInput is an input type that accepts GRPCRouteStatusParentsConditionsArray and GRPCRouteStatusParentsConditionsArrayOutput values.
// You can construct a concrete instance of `GRPCRouteStatusParentsConditionsArrayInput` via:
//
//	GRPCRouteStatusParentsConditionsArray{ GRPCRouteStatusParentsConditionsArgs{...} }
type GRPCRouteStatusParentsConditionsArrayInput interface {
	pulumi.Input

	ToGRPCRouteStatusParentsConditionsArrayOutput() GRPCRouteStatusParentsConditionsArrayOutput
	ToGRPCRouteStatusParentsConditionsArrayOutputWithContext(context.Context) GRPCRouteStatusParentsConditionsArrayOutput
}

type GRPCRouteStatusParentsConditionsArray []GRPCRouteStatusParentsConditionsInput

func (GRPCRouteStatusParentsConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteStatusParentsConditions)(nil)).Elem()
}

func (i GRPCRouteStatusParentsConditionsArray) ToGRPCRouteStatusParentsConditionsArrayOutput() GRPCRouteStatusParentsConditionsArrayOutput {
	return i.ToGRPCRouteStatusParentsConditionsArrayOutputWithContext(context.Background())
}

func (i GRPCRouteStatusParentsConditionsArray) ToGRPCRouteStatusParentsConditionsArrayOutputWithContext(ctx context.Context) GRPCRouteStatusParentsConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteStatusParentsConditionsArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
// ---
// This struct is intended for direct use as an array at the field path .status.conditions.  For example,
//
//	type FooStatus struct{
//	    // Represents the observations of a foo's current state.
//	    // Known .status.conditions.type are: "Available", "Progressing", and "Degraded"
//	    // +patchMergeKey=type
//	    // +patchStrategy=merge
//	    // +listType=map
//	    // +listMapKey=type
//	    Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`
//
//
//	    // other fields
//	}
type GRPCRouteStatusParentsConditionsOutput struct{ *pulumi.OutputState }

func (GRPCRouteStatusParentsConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteStatusParentsConditions)(nil)).Elem()
}

func (o GRPCRouteStatusParentsConditionsOutput) ToGRPCRouteStatusParentsConditionsOutput() GRPCRouteStatusParentsConditionsOutput {
	return o
}

func (o GRPCRouteStatusParentsConditionsOutput) ToGRPCRouteStatusParentsConditionsOutputWithContext(ctx context.Context) GRPCRouteStatusParentsConditionsOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o GRPCRouteStatusParentsConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o GRPCRouteStatusParentsConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o GRPCRouteStatusParentsConditionsOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsConditions) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o GRPCRouteStatusParentsConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o GRPCRouteStatusParentsConditionsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsConditions) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
// ---
// Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
// useful (see .node.status.conditions), the ability to deconflict is important.
// The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
func (o GRPCRouteStatusParentsConditionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsConditions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GRPCRouteStatusParentsConditionsArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteStatusParentsConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteStatusParentsConditions)(nil)).Elem()
}

func (o GRPCRouteStatusParentsConditionsArrayOutput) ToGRPCRouteStatusParentsConditionsArrayOutput() GRPCRouteStatusParentsConditionsArrayOutput {
	return o
}

func (o GRPCRouteStatusParentsConditionsArrayOutput) ToGRPCRouteStatusParentsConditionsArrayOutputWithContext(ctx context.Context) GRPCRouteStatusParentsConditionsArrayOutput {
	return o
}

func (o GRPCRouteStatusParentsConditionsArrayOutput) Index(i pulumi.IntInput) GRPCRouteStatusParentsConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteStatusParentsConditions {
		return vs[0].([]GRPCRouteStatusParentsConditions)[vs[1].(int)]
	}).(GRPCRouteStatusParentsConditionsOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
// ---
// This struct is intended for direct use as an array at the field path .status.conditions.  For example,
//
//	type FooStatus struct{
//	    // Represents the observations of a foo's current state.
//	    // Known .status.conditions.type are: "Available", "Progressing", and "Degraded"
//	    // +patchMergeKey=type
//	    // +patchStrategy=merge
//	    // +listType=map
//	    // +listMapKey=type
//	    Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`
//
//
//	    // other fields
//	}
type GRPCRouteStatusParentsConditionsPatch struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message *string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason *string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status *string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	// ---
	// Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
	// useful (see .node.status.conditions), the ability to deconflict is important.
	// The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
	Type *string `pulumi:"type"`
}

// GRPCRouteStatusParentsConditionsPatchInput is an input type that accepts GRPCRouteStatusParentsConditionsPatchArgs and GRPCRouteStatusParentsConditionsPatchOutput values.
// You can construct a concrete instance of `GRPCRouteStatusParentsConditionsPatchInput` via:
//
//	GRPCRouteStatusParentsConditionsPatchArgs{...}
type GRPCRouteStatusParentsConditionsPatchInput interface {
	pulumi.Input

	ToGRPCRouteStatusParentsConditionsPatchOutput() GRPCRouteStatusParentsConditionsPatchOutput
	ToGRPCRouteStatusParentsConditionsPatchOutputWithContext(context.Context) GRPCRouteStatusParentsConditionsPatchOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
// ---
// This struct is intended for direct use as an array at the field path .status.conditions.  For example,
//
//	type FooStatus struct{
//	    // Represents the observations of a foo's current state.
//	    // Known .status.conditions.type are: "Available", "Progressing", and "Degraded"
//	    // +patchMergeKey=type
//	    // +patchStrategy=merge
//	    // +listType=map
//	    // +listMapKey=type
//	    Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`
//
//
//	    // other fields
//	}
type GRPCRouteStatusParentsConditionsPatchArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	// ---
	// Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
	// useful (see .node.status.conditions), the ability to deconflict is important.
	// The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GRPCRouteStatusParentsConditionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteStatusParentsConditionsPatch)(nil)).Elem()
}

func (i GRPCRouteStatusParentsConditionsPatchArgs) ToGRPCRouteStatusParentsConditionsPatchOutput() GRPCRouteStatusParentsConditionsPatchOutput {
	return i.ToGRPCRouteStatusParentsConditionsPatchOutputWithContext(context.Background())
}

func (i GRPCRouteStatusParentsConditionsPatchArgs) ToGRPCRouteStatusParentsConditionsPatchOutputWithContext(ctx context.Context) GRPCRouteStatusParentsConditionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteStatusParentsConditionsPatchOutput)
}

// GRPCRouteStatusParentsConditionsPatchArrayInput is an input type that accepts GRPCRouteStatusParentsConditionsPatchArray and GRPCRouteStatusParentsConditionsPatchArrayOutput values.
// You can construct a concrete instance of `GRPCRouteStatusParentsConditionsPatchArrayInput` via:
//
//	GRPCRouteStatusParentsConditionsPatchArray{ GRPCRouteStatusParentsConditionsPatchArgs{...} }
type GRPCRouteStatusParentsConditionsPatchArrayInput interface {
	pulumi.Input

	ToGRPCRouteStatusParentsConditionsPatchArrayOutput() GRPCRouteStatusParentsConditionsPatchArrayOutput
	ToGRPCRouteStatusParentsConditionsPatchArrayOutputWithContext(context.Context) GRPCRouteStatusParentsConditionsPatchArrayOutput
}

type GRPCRouteStatusParentsConditionsPatchArray []GRPCRouteStatusParentsConditionsPatchInput

func (GRPCRouteStatusParentsConditionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteStatusParentsConditionsPatch)(nil)).Elem()
}

func (i GRPCRouteStatusParentsConditionsPatchArray) ToGRPCRouteStatusParentsConditionsPatchArrayOutput() GRPCRouteStatusParentsConditionsPatchArrayOutput {
	return i.ToGRPCRouteStatusParentsConditionsPatchArrayOutputWithContext(context.Background())
}

func (i GRPCRouteStatusParentsConditionsPatchArray) ToGRPCRouteStatusParentsConditionsPatchArrayOutputWithContext(ctx context.Context) GRPCRouteStatusParentsConditionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteStatusParentsConditionsPatchArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
// ---
// This struct is intended for direct use as an array at the field path .status.conditions.  For example,
//
//	type FooStatus struct{
//	    // Represents the observations of a foo's current state.
//	    // Known .status.conditions.type are: "Available", "Progressing", and "Degraded"
//	    // +patchMergeKey=type
//	    // +patchStrategy=merge
//	    // +listType=map
//	    // +listMapKey=type
//	    Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`
//
//
//	    // other fields
//	}
type GRPCRouteStatusParentsConditionsPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteStatusParentsConditionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteStatusParentsConditionsPatch)(nil)).Elem()
}

func (o GRPCRouteStatusParentsConditionsPatchOutput) ToGRPCRouteStatusParentsConditionsPatchOutput() GRPCRouteStatusParentsConditionsPatchOutput {
	return o
}

func (o GRPCRouteStatusParentsConditionsPatchOutput) ToGRPCRouteStatusParentsConditionsPatchOutputWithContext(ctx context.Context) GRPCRouteStatusParentsConditionsPatchOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o GRPCRouteStatusParentsConditionsPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsConditionsPatch) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o GRPCRouteStatusParentsConditionsPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsConditionsPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o GRPCRouteStatusParentsConditionsPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsConditionsPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o GRPCRouteStatusParentsConditionsPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsConditionsPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// status of the condition, one of True, False, Unknown.
func (o GRPCRouteStatusParentsConditionsPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsConditionsPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
// ---
// Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
// useful (see .node.status.conditions), the ability to deconflict is important.
// The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
func (o GRPCRouteStatusParentsConditionsPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsConditionsPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GRPCRouteStatusParentsConditionsPatchArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteStatusParentsConditionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteStatusParentsConditionsPatch)(nil)).Elem()
}

func (o GRPCRouteStatusParentsConditionsPatchArrayOutput) ToGRPCRouteStatusParentsConditionsPatchArrayOutput() GRPCRouteStatusParentsConditionsPatchArrayOutput {
	return o
}

func (o GRPCRouteStatusParentsConditionsPatchArrayOutput) ToGRPCRouteStatusParentsConditionsPatchArrayOutputWithContext(ctx context.Context) GRPCRouteStatusParentsConditionsPatchArrayOutput {
	return o
}

func (o GRPCRouteStatusParentsConditionsPatchArrayOutput) Index(i pulumi.IntInput) GRPCRouteStatusParentsConditionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteStatusParentsConditionsPatch {
		return vs[0].([]GRPCRouteStatusParentsConditionsPatch)[vs[1].(int)]
	}).(GRPCRouteStatusParentsConditionsPatchOutput)
}

// ParentRef corresponds with a ParentRef in the spec that this
// RouteParentStatus struct describes the status of.
type GRPCRouteStatusParentsParentRef struct {
	// Group is the group of the referent.
	// When unspecified, "gateway.networking.k8s.io" is inferred.
	// To set the core API group (such as for a "Service" kind referent),
	// Group must be explicitly set to "" (empty string).
	//
	// Support: Core
	Group *string `pulumi:"group"`
	// Kind is kind of the referent.
	//
	// There are two kinds of parent resources with "Core" support:
	//
	// * Gateway (Gateway conformance profile)
	// * Service (Mesh conformance profile, ClusterIP Services only)
	//
	// Support for other resources is Implementation-Specific.
	Kind *string `pulumi:"kind"`
	// Name is the name of the referent.
	//
	// Support: Core
	Name *string `pulumi:"name"`
	// Namespace is the namespace of the referent. When unspecified, this refers
	// to the local namespace of the Route.
	//
	// Note that there are specific rules for ParentRefs which cross namespace
	// boundaries. Cross-namespace references are only valid if they are explicitly
	// allowed by something in the namespace they are referring to. For example:
	// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
	// generic way to enable any other kind of cross-namespace reference.
	//
	// Support: Core
	Namespace *string `pulumi:"namespace"`
	// Port is the network port this Route targets. It can be interpreted
	// differently based on the type of parent resource.
	//
	// When the parent resource is a Gateway, this targets all listeners
	// listening on the specified port that also support this kind of Route(and
	// select this Route). It's not recommended to set `Port` unless the
	// networking behaviors specified in a Route must apply to a specific port
	// as opposed to a listener(s) whose port(s) may be changed. When both Port
	// and SectionName are specified, the name and port of the selected listener
	// must match both specified values.
	//
	// Implementations MAY choose to support other parent resources.
	// Implementations supporting other types of parent resources MUST clearly
	// document how/if Port is interpreted.
	//
	// For the purpose of status, an attachment is considered successful as
	// long as the parent resource accepts it partially. For example, Gateway
	// listeners can restrict which Routes can attach to them by Route kind,
	// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
	// from the referencing Route, the Route MUST be considered successfully
	// attached. If no Gateway listeners accept attachment from this Route,
	// the Route MUST be considered detached from the Gateway.
	//
	// Support: Extended
	Port *int `pulumi:"port"`
	// SectionName is the name of a section within the target resource. In the
	// following resources, SectionName is interpreted as the following:
	//
	// * Gateway: Listener name. When both Port (experimental) and SectionName
	//   are specified, the name and port of the selected listener must match
	//   both specified values.
	// * Service: Port name. When both Port (experimental) and SectionName
	//   are specified, the name and port of the selected listener must match
	//   both specified values.
	//
	// Implementations MAY choose to support attaching Routes to other resources.
	// If that is the case, they MUST clearly document how SectionName is
	// interpreted.
	//
	// When unspecified (empty string), this will reference the entire resource.
	// For the purpose of status, an attachment is considered successful if at
	// least one section in the parent resource accepts it. For example, Gateway
	// listeners can restrict which Routes can attach to them by Route kind,
	// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
	// the referencing Route, the Route MUST be considered successfully
	// attached. If no Gateway listeners accept attachment from this Route, the
	// Route MUST be considered detached from the Gateway.
	//
	// Support: Core
	SectionName *string `pulumi:"sectionName"`
}

// GRPCRouteStatusParentsParentRefInput is an input type that accepts GRPCRouteStatusParentsParentRefArgs and GRPCRouteStatusParentsParentRefOutput values.
// You can construct a concrete instance of `GRPCRouteStatusParentsParentRefInput` via:
//
//	GRPCRouteStatusParentsParentRefArgs{...}
type GRPCRouteStatusParentsParentRefInput interface {
	pulumi.Input

	ToGRPCRouteStatusParentsParentRefOutput() GRPCRouteStatusParentsParentRefOutput
	ToGRPCRouteStatusParentsParentRefOutputWithContext(context.Context) GRPCRouteStatusParentsParentRefOutput
}

// ParentRef corresponds with a ParentRef in the spec that this
// RouteParentStatus struct describes the status of.
type GRPCRouteStatusParentsParentRefArgs struct {
	// Group is the group of the referent.
	// When unspecified, "gateway.networking.k8s.io" is inferred.
	// To set the core API group (such as for a "Service" kind referent),
	// Group must be explicitly set to "" (empty string).
	//
	// Support: Core
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind is kind of the referent.
	//
	// There are two kinds of parent resources with "Core" support:
	//
	// * Gateway (Gateway conformance profile)
	// * Service (Mesh conformance profile, ClusterIP Services only)
	//
	// Support for other resources is Implementation-Specific.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of the referent.
	//
	// Support: Core
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace is the namespace of the referent. When unspecified, this refers
	// to the local namespace of the Route.
	//
	// Note that there are specific rules for ParentRefs which cross namespace
	// boundaries. Cross-namespace references are only valid if they are explicitly
	// allowed by something in the namespace they are referring to. For example:
	// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
	// generic way to enable any other kind of cross-namespace reference.
	//
	// Support: Core
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Port is the network port this Route targets. It can be interpreted
	// differently based on the type of parent resource.
	//
	// When the parent resource is a Gateway, this targets all listeners
	// listening on the specified port that also support this kind of Route(and
	// select this Route). It's not recommended to set `Port` unless the
	// networking behaviors specified in a Route must apply to a specific port
	// as opposed to a listener(s) whose port(s) may be changed. When both Port
	// and SectionName are specified, the name and port of the selected listener
	// must match both specified values.
	//
	// Implementations MAY choose to support other parent resources.
	// Implementations supporting other types of parent resources MUST clearly
	// document how/if Port is interpreted.
	//
	// For the purpose of status, an attachment is considered successful as
	// long as the parent resource accepts it partially. For example, Gateway
	// listeners can restrict which Routes can attach to them by Route kind,
	// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
	// from the referencing Route, the Route MUST be considered successfully
	// attached. If no Gateway listeners accept attachment from this Route,
	// the Route MUST be considered detached from the Gateway.
	//
	// Support: Extended
	Port pulumi.IntPtrInput `pulumi:"port"`
	// SectionName is the name of a section within the target resource. In the
	// following resources, SectionName is interpreted as the following:
	//
	// * Gateway: Listener name. When both Port (experimental) and SectionName
	//   are specified, the name and port of the selected listener must match
	//   both specified values.
	// * Service: Port name. When both Port (experimental) and SectionName
	//   are specified, the name and port of the selected listener must match
	//   both specified values.
	//
	// Implementations MAY choose to support attaching Routes to other resources.
	// If that is the case, they MUST clearly document how SectionName is
	// interpreted.
	//
	// When unspecified (empty string), this will reference the entire resource.
	// For the purpose of status, an attachment is considered successful if at
	// least one section in the parent resource accepts it. For example, Gateway
	// listeners can restrict which Routes can attach to them by Route kind,
	// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
	// the referencing Route, the Route MUST be considered successfully
	// attached. If no Gateway listeners accept attachment from this Route, the
	// Route MUST be considered detached from the Gateway.
	//
	// Support: Core
	SectionName pulumi.StringPtrInput `pulumi:"sectionName"`
}

func (GRPCRouteStatusParentsParentRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteStatusParentsParentRef)(nil)).Elem()
}

func (i GRPCRouteStatusParentsParentRefArgs) ToGRPCRouteStatusParentsParentRefOutput() GRPCRouteStatusParentsParentRefOutput {
	return i.ToGRPCRouteStatusParentsParentRefOutputWithContext(context.Background())
}

func (i GRPCRouteStatusParentsParentRefArgs) ToGRPCRouteStatusParentsParentRefOutputWithContext(ctx context.Context) GRPCRouteStatusParentsParentRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteStatusParentsParentRefOutput)
}

func (i GRPCRouteStatusParentsParentRefArgs) ToGRPCRouteStatusParentsParentRefPtrOutput() GRPCRouteStatusParentsParentRefPtrOutput {
	return i.ToGRPCRouteStatusParentsParentRefPtrOutputWithContext(context.Background())
}

func (i GRPCRouteStatusParentsParentRefArgs) ToGRPCRouteStatusParentsParentRefPtrOutputWithContext(ctx context.Context) GRPCRouteStatusParentsParentRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteStatusParentsParentRefOutput).ToGRPCRouteStatusParentsParentRefPtrOutputWithContext(ctx)
}

// GRPCRouteStatusParentsParentRefPtrInput is an input type that accepts GRPCRouteStatusParentsParentRefArgs, GRPCRouteStatusParentsParentRefPtr and GRPCRouteStatusParentsParentRefPtrOutput values.
// You can construct a concrete instance of `GRPCRouteStatusParentsParentRefPtrInput` via:
//
//	        GRPCRouteStatusParentsParentRefArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteStatusParentsParentRefPtrInput interface {
	pulumi.Input

	ToGRPCRouteStatusParentsParentRefPtrOutput() GRPCRouteStatusParentsParentRefPtrOutput
	ToGRPCRouteStatusParentsParentRefPtrOutputWithContext(context.Context) GRPCRouteStatusParentsParentRefPtrOutput
}

type grpcrouteStatusParentsParentRefPtrType GRPCRouteStatusParentsParentRefArgs

func GRPCRouteStatusParentsParentRefPtr(v *GRPCRouteStatusParentsParentRefArgs) GRPCRouteStatusParentsParentRefPtrInput {
	return (*grpcrouteStatusParentsParentRefPtrType)(v)
}

func (*grpcrouteStatusParentsParentRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteStatusParentsParentRef)(nil)).Elem()
}

func (i *grpcrouteStatusParentsParentRefPtrType) ToGRPCRouteStatusParentsParentRefPtrOutput() GRPCRouteStatusParentsParentRefPtrOutput {
	return i.ToGRPCRouteStatusParentsParentRefPtrOutputWithContext(context.Background())
}

func (i *grpcrouteStatusParentsParentRefPtrType) ToGRPCRouteStatusParentsParentRefPtrOutputWithContext(ctx context.Context) GRPCRouteStatusParentsParentRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteStatusParentsParentRefPtrOutput)
}

// ParentRef corresponds with a ParentRef in the spec that this
// RouteParentStatus struct describes the status of.
type GRPCRouteStatusParentsParentRefOutput struct{ *pulumi.OutputState }

func (GRPCRouteStatusParentsParentRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteStatusParentsParentRef)(nil)).Elem()
}

func (o GRPCRouteStatusParentsParentRefOutput) ToGRPCRouteStatusParentsParentRefOutput() GRPCRouteStatusParentsParentRefOutput {
	return o
}

func (o GRPCRouteStatusParentsParentRefOutput) ToGRPCRouteStatusParentsParentRefOutputWithContext(ctx context.Context) GRPCRouteStatusParentsParentRefOutput {
	return o
}

func (o GRPCRouteStatusParentsParentRefOutput) ToGRPCRouteStatusParentsParentRefPtrOutput() GRPCRouteStatusParentsParentRefPtrOutput {
	return o.ToGRPCRouteStatusParentsParentRefPtrOutputWithContext(context.Background())
}

func (o GRPCRouteStatusParentsParentRefOutput) ToGRPCRouteStatusParentsParentRefPtrOutputWithContext(ctx context.Context) GRPCRouteStatusParentsParentRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteStatusParentsParentRef) *GRPCRouteStatusParentsParentRef {
		return &v
	}).(GRPCRouteStatusParentsParentRefPtrOutput)
}

// Group is the group of the referent.
// When unspecified, "gateway.networking.k8s.io" is inferred.
// To set the core API group (such as for a "Service" kind referent),
// Group must be explicitly set to "" (empty string).
//
// Support: Core
func (o GRPCRouteStatusParentsParentRefOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsParentRef) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind is kind of the referent.
//
// There are two kinds of parent resources with "Core" support:
//
// * Gateway (Gateway conformance profile)
// * Service (Mesh conformance profile, ClusterIP Services only)
//
// Support for other resources is Implementation-Specific.
func (o GRPCRouteStatusParentsParentRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsParentRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
//
// Support: Core
func (o GRPCRouteStatusParentsParentRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsParentRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the referent. When unspecified, this refers
// to the local namespace of the Route.
//
// Note that there are specific rules for ParentRefs which cross namespace
// boundaries. Cross-namespace references are only valid if they are explicitly
// allowed by something in the namespace they are referring to. For example:
// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
// generic way to enable any other kind of cross-namespace reference.
//
// Support: Core
func (o GRPCRouteStatusParentsParentRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsParentRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Port is the network port this Route targets. It can be interpreted
// differently based on the type of parent resource.
//
// When the parent resource is a Gateway, this targets all listeners
// listening on the specified port that also support this kind of Route(and
// select this Route). It's not recommended to set `Port` unless the
// networking behaviors specified in a Route must apply to a specific port
// as opposed to a listener(s) whose port(s) may be changed. When both Port
// and SectionName are specified, the name and port of the selected listener
// must match both specified values.
//
// Implementations MAY choose to support other parent resources.
// Implementations supporting other types of parent resources MUST clearly
// document how/if Port is interpreted.
//
// For the purpose of status, an attachment is considered successful as
// long as the parent resource accepts it partially. For example, Gateway
// listeners can restrict which Routes can attach to them by Route kind,
// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
// from the referencing Route, the Route MUST be considered successfully
// attached. If no Gateway listeners accept attachment from this Route,
// the Route MUST be considered detached from the Gateway.
//
// Support: Extended
func (o GRPCRouteStatusParentsParentRefOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsParentRef) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// SectionName is the name of a section within the target resource. In the
// following resources, SectionName is interpreted as the following:
//
//   - Gateway: Listener name. When both Port (experimental) and SectionName
//     are specified, the name and port of the selected listener must match
//     both specified values.
//   - Service: Port name. When both Port (experimental) and SectionName
//     are specified, the name and port of the selected listener must match
//     both specified values.
//
// Implementations MAY choose to support attaching Routes to other resources.
// If that is the case, they MUST clearly document how SectionName is
// interpreted.
//
// When unspecified (empty string), this will reference the entire resource.
// For the purpose of status, an attachment is considered successful if at
// least one section in the parent resource accepts it. For example, Gateway
// listeners can restrict which Routes can attach to them by Route kind,
// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
// the referencing Route, the Route MUST be considered successfully
// attached. If no Gateway listeners accept attachment from this Route, the
// Route MUST be considered detached from the Gateway.
//
// Support: Core
func (o GRPCRouteStatusParentsParentRefOutput) SectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsParentRef) *string { return v.SectionName }).(pulumi.StringPtrOutput)
}

type GRPCRouteStatusParentsParentRefPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteStatusParentsParentRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteStatusParentsParentRef)(nil)).Elem()
}

func (o GRPCRouteStatusParentsParentRefPtrOutput) ToGRPCRouteStatusParentsParentRefPtrOutput() GRPCRouteStatusParentsParentRefPtrOutput {
	return o
}

func (o GRPCRouteStatusParentsParentRefPtrOutput) ToGRPCRouteStatusParentsParentRefPtrOutputWithContext(ctx context.Context) GRPCRouteStatusParentsParentRefPtrOutput {
	return o
}

func (o GRPCRouteStatusParentsParentRefPtrOutput) Elem() GRPCRouteStatusParentsParentRefOutput {
	return o.ApplyT(func(v *GRPCRouteStatusParentsParentRef) GRPCRouteStatusParentsParentRef {
		if v != nil {
			return *v
		}
		var ret GRPCRouteStatusParentsParentRef
		return ret
	}).(GRPCRouteStatusParentsParentRefOutput)
}

// Group is the group of the referent.
// When unspecified, "gateway.networking.k8s.io" is inferred.
// To set the core API group (such as for a "Service" kind referent),
// Group must be explicitly set to "" (empty string).
//
// Support: Core
func (o GRPCRouteStatusParentsParentRefPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteStatusParentsParentRef) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Kind is kind of the referent.
//
// There are two kinds of parent resources with "Core" support:
//
// * Gateway (Gateway conformance profile)
// * Service (Mesh conformance profile, ClusterIP Services only)
//
// Support for other resources is Implementation-Specific.
func (o GRPCRouteStatusParentsParentRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteStatusParentsParentRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
//
// Support: Core
func (o GRPCRouteStatusParentsParentRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteStatusParentsParentRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the referent. When unspecified, this refers
// to the local namespace of the Route.
//
// Note that there are specific rules for ParentRefs which cross namespace
// boundaries. Cross-namespace references are only valid if they are explicitly
// allowed by something in the namespace they are referring to. For example:
// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
// generic way to enable any other kind of cross-namespace reference.
//
// Support: Core
func (o GRPCRouteStatusParentsParentRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteStatusParentsParentRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Port is the network port this Route targets. It can be interpreted
// differently based on the type of parent resource.
//
// When the parent resource is a Gateway, this targets all listeners
// listening on the specified port that also support this kind of Route(and
// select this Route). It's not recommended to set `Port` unless the
// networking behaviors specified in a Route must apply to a specific port
// as opposed to a listener(s) whose port(s) may be changed. When both Port
// and SectionName are specified, the name and port of the selected listener
// must match both specified values.
//
// Implementations MAY choose to support other parent resources.
// Implementations supporting other types of parent resources MUST clearly
// document how/if Port is interpreted.
//
// For the purpose of status, an attachment is considered successful as
// long as the parent resource accepts it partially. For example, Gateway
// listeners can restrict which Routes can attach to them by Route kind,
// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
// from the referencing Route, the Route MUST be considered successfully
// attached. If no Gateway listeners accept attachment from this Route,
// the Route MUST be considered detached from the Gateway.
//
// Support: Extended
func (o GRPCRouteStatusParentsParentRefPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GRPCRouteStatusParentsParentRef) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// SectionName is the name of a section within the target resource. In the
// following resources, SectionName is interpreted as the following:
//
//   - Gateway: Listener name. When both Port (experimental) and SectionName
//     are specified, the name and port of the selected listener must match
//     both specified values.
//   - Service: Port name. When both Port (experimental) and SectionName
//     are specified, the name and port of the selected listener must match
//     both specified values.
//
// Implementations MAY choose to support attaching Routes to other resources.
// If that is the case, they MUST clearly document how SectionName is
// interpreted.
//
// When unspecified (empty string), this will reference the entire resource.
// For the purpose of status, an attachment is considered successful if at
// least one section in the parent resource accepts it. For example, Gateway
// listeners can restrict which Routes can attach to them by Route kind,
// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
// the referencing Route, the Route MUST be considered successfully
// attached. If no Gateway listeners accept attachment from this Route, the
// Route MUST be considered detached from the Gateway.
//
// Support: Core
func (o GRPCRouteStatusParentsParentRefPtrOutput) SectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteStatusParentsParentRef) *string {
		if v == nil {
			return nil
		}
		return v.SectionName
	}).(pulumi.StringPtrOutput)
}

// ParentRef corresponds with a ParentRef in the spec that this
// RouteParentStatus struct describes the status of.
type GRPCRouteStatusParentsParentRefPatch struct {
	// Group is the group of the referent.
	// When unspecified, "gateway.networking.k8s.io" is inferred.
	// To set the core API group (such as for a "Service" kind referent),
	// Group must be explicitly set to "" (empty string).
	//
	// Support: Core
	Group *string `pulumi:"group"`
	// Kind is kind of the referent.
	//
	// There are two kinds of parent resources with "Core" support:
	//
	// * Gateway (Gateway conformance profile)
	// * Service (Mesh conformance profile, ClusterIP Services only)
	//
	// Support for other resources is Implementation-Specific.
	Kind *string `pulumi:"kind"`
	// Name is the name of the referent.
	//
	// Support: Core
	Name *string `pulumi:"name"`
	// Namespace is the namespace of the referent. When unspecified, this refers
	// to the local namespace of the Route.
	//
	// Note that there are specific rules for ParentRefs which cross namespace
	// boundaries. Cross-namespace references are only valid if they are explicitly
	// allowed by something in the namespace they are referring to. For example:
	// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
	// generic way to enable any other kind of cross-namespace reference.
	//
	// Support: Core
	Namespace *string `pulumi:"namespace"`
	// Port is the network port this Route targets. It can be interpreted
	// differently based on the type of parent resource.
	//
	// When the parent resource is a Gateway, this targets all listeners
	// listening on the specified port that also support this kind of Route(and
	// select this Route). It's not recommended to set `Port` unless the
	// networking behaviors specified in a Route must apply to a specific port
	// as opposed to a listener(s) whose port(s) may be changed. When both Port
	// and SectionName are specified, the name and port of the selected listener
	// must match both specified values.
	//
	// Implementations MAY choose to support other parent resources.
	// Implementations supporting other types of parent resources MUST clearly
	// document how/if Port is interpreted.
	//
	// For the purpose of status, an attachment is considered successful as
	// long as the parent resource accepts it partially. For example, Gateway
	// listeners can restrict which Routes can attach to them by Route kind,
	// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
	// from the referencing Route, the Route MUST be considered successfully
	// attached. If no Gateway listeners accept attachment from this Route,
	// the Route MUST be considered detached from the Gateway.
	//
	// Support: Extended
	Port *int `pulumi:"port"`
	// SectionName is the name of a section within the target resource. In the
	// following resources, SectionName is interpreted as the following:
	//
	// * Gateway: Listener name. When both Port (experimental) and SectionName
	//   are specified, the name and port of the selected listener must match
	//   both specified values.
	// * Service: Port name. When both Port (experimental) and SectionName
	//   are specified, the name and port of the selected listener must match
	//   both specified values.
	//
	// Implementations MAY choose to support attaching Routes to other resources.
	// If that is the case, they MUST clearly document how SectionName is
	// interpreted.
	//
	// When unspecified (empty string), this will reference the entire resource.
	// For the purpose of status, an attachment is considered successful if at
	// least one section in the parent resource accepts it. For example, Gateway
	// listeners can restrict which Routes can attach to them by Route kind,
	// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
	// the referencing Route, the Route MUST be considered successfully
	// attached. If no Gateway listeners accept attachment from this Route, the
	// Route MUST be considered detached from the Gateway.
	//
	// Support: Core
	SectionName *string `pulumi:"sectionName"`
}

// GRPCRouteStatusParentsParentRefPatchInput is an input type that accepts GRPCRouteStatusParentsParentRefPatchArgs and GRPCRouteStatusParentsParentRefPatchOutput values.
// You can construct a concrete instance of `GRPCRouteStatusParentsParentRefPatchInput` via:
//
//	GRPCRouteStatusParentsParentRefPatchArgs{...}
type GRPCRouteStatusParentsParentRefPatchInput interface {
	pulumi.Input

	ToGRPCRouteStatusParentsParentRefPatchOutput() GRPCRouteStatusParentsParentRefPatchOutput
	ToGRPCRouteStatusParentsParentRefPatchOutputWithContext(context.Context) GRPCRouteStatusParentsParentRefPatchOutput
}

// ParentRef corresponds with a ParentRef in the spec that this
// RouteParentStatus struct describes the status of.
type GRPCRouteStatusParentsParentRefPatchArgs struct {
	// Group is the group of the referent.
	// When unspecified, "gateway.networking.k8s.io" is inferred.
	// To set the core API group (such as for a "Service" kind referent),
	// Group must be explicitly set to "" (empty string).
	//
	// Support: Core
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind is kind of the referent.
	//
	// There are two kinds of parent resources with "Core" support:
	//
	// * Gateway (Gateway conformance profile)
	// * Service (Mesh conformance profile, ClusterIP Services only)
	//
	// Support for other resources is Implementation-Specific.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of the referent.
	//
	// Support: Core
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace is the namespace of the referent. When unspecified, this refers
	// to the local namespace of the Route.
	//
	// Note that there are specific rules for ParentRefs which cross namespace
	// boundaries. Cross-namespace references are only valid if they are explicitly
	// allowed by something in the namespace they are referring to. For example:
	// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
	// generic way to enable any other kind of cross-namespace reference.
	//
	// Support: Core
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Port is the network port this Route targets. It can be interpreted
	// differently based on the type of parent resource.
	//
	// When the parent resource is a Gateway, this targets all listeners
	// listening on the specified port that also support this kind of Route(and
	// select this Route). It's not recommended to set `Port` unless the
	// networking behaviors specified in a Route must apply to a specific port
	// as opposed to a listener(s) whose port(s) may be changed. When both Port
	// and SectionName are specified, the name and port of the selected listener
	// must match both specified values.
	//
	// Implementations MAY choose to support other parent resources.
	// Implementations supporting other types of parent resources MUST clearly
	// document how/if Port is interpreted.
	//
	// For the purpose of status, an attachment is considered successful as
	// long as the parent resource accepts it partially. For example, Gateway
	// listeners can restrict which Routes can attach to them by Route kind,
	// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
	// from the referencing Route, the Route MUST be considered successfully
	// attached. If no Gateway listeners accept attachment from this Route,
	// the Route MUST be considered detached from the Gateway.
	//
	// Support: Extended
	Port pulumi.IntPtrInput `pulumi:"port"`
	// SectionName is the name of a section within the target resource. In the
	// following resources, SectionName is interpreted as the following:
	//
	// * Gateway: Listener name. When both Port (experimental) and SectionName
	//   are specified, the name and port of the selected listener must match
	//   both specified values.
	// * Service: Port name. When both Port (experimental) and SectionName
	//   are specified, the name and port of the selected listener must match
	//   both specified values.
	//
	// Implementations MAY choose to support attaching Routes to other resources.
	// If that is the case, they MUST clearly document how SectionName is
	// interpreted.
	//
	// When unspecified (empty string), this will reference the entire resource.
	// For the purpose of status, an attachment is considered successful if at
	// least one section in the parent resource accepts it. For example, Gateway
	// listeners can restrict which Routes can attach to them by Route kind,
	// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
	// the referencing Route, the Route MUST be considered successfully
	// attached. If no Gateway listeners accept attachment from this Route, the
	// Route MUST be considered detached from the Gateway.
	//
	// Support: Core
	SectionName pulumi.StringPtrInput `pulumi:"sectionName"`
}

func (GRPCRouteStatusParentsParentRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteStatusParentsParentRefPatch)(nil)).Elem()
}

func (i GRPCRouteStatusParentsParentRefPatchArgs) ToGRPCRouteStatusParentsParentRefPatchOutput() GRPCRouteStatusParentsParentRefPatchOutput {
	return i.ToGRPCRouteStatusParentsParentRefPatchOutputWithContext(context.Background())
}

func (i GRPCRouteStatusParentsParentRefPatchArgs) ToGRPCRouteStatusParentsParentRefPatchOutputWithContext(ctx context.Context) GRPCRouteStatusParentsParentRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteStatusParentsParentRefPatchOutput)
}

func (i GRPCRouteStatusParentsParentRefPatchArgs) ToGRPCRouteStatusParentsParentRefPatchPtrOutput() GRPCRouteStatusParentsParentRefPatchPtrOutput {
	return i.ToGRPCRouteStatusParentsParentRefPatchPtrOutputWithContext(context.Background())
}

func (i GRPCRouteStatusParentsParentRefPatchArgs) ToGRPCRouteStatusParentsParentRefPatchPtrOutputWithContext(ctx context.Context) GRPCRouteStatusParentsParentRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteStatusParentsParentRefPatchOutput).ToGRPCRouteStatusParentsParentRefPatchPtrOutputWithContext(ctx)
}

// GRPCRouteStatusParentsParentRefPatchPtrInput is an input type that accepts GRPCRouteStatusParentsParentRefPatchArgs, GRPCRouteStatusParentsParentRefPatchPtr and GRPCRouteStatusParentsParentRefPatchPtrOutput values.
// You can construct a concrete instance of `GRPCRouteStatusParentsParentRefPatchPtrInput` via:
//
//	        GRPCRouteStatusParentsParentRefPatchArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteStatusParentsParentRefPatchPtrInput interface {
	pulumi.Input

	ToGRPCRouteStatusParentsParentRefPatchPtrOutput() GRPCRouteStatusParentsParentRefPatchPtrOutput
	ToGRPCRouteStatusParentsParentRefPatchPtrOutputWithContext(context.Context) GRPCRouteStatusParentsParentRefPatchPtrOutput
}

type grpcrouteStatusParentsParentRefPatchPtrType GRPCRouteStatusParentsParentRefPatchArgs

func GRPCRouteStatusParentsParentRefPatchPtr(v *GRPCRouteStatusParentsParentRefPatchArgs) GRPCRouteStatusParentsParentRefPatchPtrInput {
	return (*grpcrouteStatusParentsParentRefPatchPtrType)(v)
}

func (*grpcrouteStatusParentsParentRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteStatusParentsParentRefPatch)(nil)).Elem()
}

func (i *grpcrouteStatusParentsParentRefPatchPtrType) ToGRPCRouteStatusParentsParentRefPatchPtrOutput() GRPCRouteStatusParentsParentRefPatchPtrOutput {
	return i.ToGRPCRouteStatusParentsParentRefPatchPtrOutputWithContext(context.Background())
}

func (i *grpcrouteStatusParentsParentRefPatchPtrType) ToGRPCRouteStatusParentsParentRefPatchPtrOutputWithContext(ctx context.Context) GRPCRouteStatusParentsParentRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteStatusParentsParentRefPatchPtrOutput)
}

// ParentRef corresponds with a ParentRef in the spec that this
// RouteParentStatus struct describes the status of.
type GRPCRouteStatusParentsParentRefPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteStatusParentsParentRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteStatusParentsParentRefPatch)(nil)).Elem()
}

func (o GRPCRouteStatusParentsParentRefPatchOutput) ToGRPCRouteStatusParentsParentRefPatchOutput() GRPCRouteStatusParentsParentRefPatchOutput {
	return o
}

func (o GRPCRouteStatusParentsParentRefPatchOutput) ToGRPCRouteStatusParentsParentRefPatchOutputWithContext(ctx context.Context) GRPCRouteStatusParentsParentRefPatchOutput {
	return o
}

func (o GRPCRouteStatusParentsParentRefPatchOutput) ToGRPCRouteStatusParentsParentRefPatchPtrOutput() GRPCRouteStatusParentsParentRefPatchPtrOutput {
	return o.ToGRPCRouteStatusParentsParentRefPatchPtrOutputWithContext(context.Background())
}

func (o GRPCRouteStatusParentsParentRefPatchOutput) ToGRPCRouteStatusParentsParentRefPatchPtrOutputWithContext(ctx context.Context) GRPCRouteStatusParentsParentRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteStatusParentsParentRefPatch) *GRPCRouteStatusParentsParentRefPatch {
		return &v
	}).(GRPCRouteStatusParentsParentRefPatchPtrOutput)
}

// Group is the group of the referent.
// When unspecified, "gateway.networking.k8s.io" is inferred.
// To set the core API group (such as for a "Service" kind referent),
// Group must be explicitly set to "" (empty string).
//
// Support: Core
func (o GRPCRouteStatusParentsParentRefPatchOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsParentRefPatch) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind is kind of the referent.
//
// There are two kinds of parent resources with "Core" support:
//
// * Gateway (Gateway conformance profile)
// * Service (Mesh conformance profile, ClusterIP Services only)
//
// Support for other resources is Implementation-Specific.
func (o GRPCRouteStatusParentsParentRefPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsParentRefPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
//
// Support: Core
func (o GRPCRouteStatusParentsParentRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsParentRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the referent. When unspecified, this refers
// to the local namespace of the Route.
//
// Note that there are specific rules for ParentRefs which cross namespace
// boundaries. Cross-namespace references are only valid if they are explicitly
// allowed by something in the namespace they are referring to. For example:
// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
// generic way to enable any other kind of cross-namespace reference.
//
// Support: Core
func (o GRPCRouteStatusParentsParentRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsParentRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Port is the network port this Route targets. It can be interpreted
// differently based on the type of parent resource.
//
// When the parent resource is a Gateway, this targets all listeners
// listening on the specified port that also support this kind of Route(and
// select this Route). It's not recommended to set `Port` unless the
// networking behaviors specified in a Route must apply to a specific port
// as opposed to a listener(s) whose port(s) may be changed. When both Port
// and SectionName are specified, the name and port of the selected listener
// must match both specified values.
//
// Implementations MAY choose to support other parent resources.
// Implementations supporting other types of parent resources MUST clearly
// document how/if Port is interpreted.
//
// For the purpose of status, an attachment is considered successful as
// long as the parent resource accepts it partially. For example, Gateway
// listeners can restrict which Routes can attach to them by Route kind,
// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
// from the referencing Route, the Route MUST be considered successfully
// attached. If no Gateway listeners accept attachment from this Route,
// the Route MUST be considered detached from the Gateway.
//
// Support: Extended
func (o GRPCRouteStatusParentsParentRefPatchOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsParentRefPatch) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// SectionName is the name of a section within the target resource. In the
// following resources, SectionName is interpreted as the following:
//
//   - Gateway: Listener name. When both Port (experimental) and SectionName
//     are specified, the name and port of the selected listener must match
//     both specified values.
//   - Service: Port name. When both Port (experimental) and SectionName
//     are specified, the name and port of the selected listener must match
//     both specified values.
//
// Implementations MAY choose to support attaching Routes to other resources.
// If that is the case, they MUST clearly document how SectionName is
// interpreted.
//
// When unspecified (empty string), this will reference the entire resource.
// For the purpose of status, an attachment is considered successful if at
// least one section in the parent resource accepts it. For example, Gateway
// listeners can restrict which Routes can attach to them by Route kind,
// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
// the referencing Route, the Route MUST be considered successfully
// attached. If no Gateway listeners accept attachment from this Route, the
// Route MUST be considered detached from the Gateway.
//
// Support: Core
func (o GRPCRouteStatusParentsParentRefPatchOutput) SectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsParentRefPatch) *string { return v.SectionName }).(pulumi.StringPtrOutput)
}

type GRPCRouteStatusParentsParentRefPatchPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteStatusParentsParentRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteStatusParentsParentRefPatch)(nil)).Elem()
}

func (o GRPCRouteStatusParentsParentRefPatchPtrOutput) ToGRPCRouteStatusParentsParentRefPatchPtrOutput() GRPCRouteStatusParentsParentRefPatchPtrOutput {
	return o
}

func (o GRPCRouteStatusParentsParentRefPatchPtrOutput) ToGRPCRouteStatusParentsParentRefPatchPtrOutputWithContext(ctx context.Context) GRPCRouteStatusParentsParentRefPatchPtrOutput {
	return o
}

func (o GRPCRouteStatusParentsParentRefPatchPtrOutput) Elem() GRPCRouteStatusParentsParentRefPatchOutput {
	return o.ApplyT(func(v *GRPCRouteStatusParentsParentRefPatch) GRPCRouteStatusParentsParentRefPatch {
		if v != nil {
			return *v
		}
		var ret GRPCRouteStatusParentsParentRefPatch
		return ret
	}).(GRPCRouteStatusParentsParentRefPatchOutput)
}

// Group is the group of the referent.
// When unspecified, "gateway.networking.k8s.io" is inferred.
// To set the core API group (such as for a "Service" kind referent),
// Group must be explicitly set to "" (empty string).
//
// Support: Core
func (o GRPCRouteStatusParentsParentRefPatchPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteStatusParentsParentRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Kind is kind of the referent.
//
// There are two kinds of parent resources with "Core" support:
//
// * Gateway (Gateway conformance profile)
// * Service (Mesh conformance profile, ClusterIP Services only)
//
// Support for other resources is Implementation-Specific.
func (o GRPCRouteStatusParentsParentRefPatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteStatusParentsParentRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
//
// Support: Core
func (o GRPCRouteStatusParentsParentRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteStatusParentsParentRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the referent. When unspecified, this refers
// to the local namespace of the Route.
//
// Note that there are specific rules for ParentRefs which cross namespace
// boundaries. Cross-namespace references are only valid if they are explicitly
// allowed by something in the namespace they are referring to. For example:
// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
// generic way to enable any other kind of cross-namespace reference.
//
// Support: Core
func (o GRPCRouteStatusParentsParentRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteStatusParentsParentRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Port is the network port this Route targets. It can be interpreted
// differently based on the type of parent resource.
//
// When the parent resource is a Gateway, this targets all listeners
// listening on the specified port that also support this kind of Route(and
// select this Route). It's not recommended to set `Port` unless the
// networking behaviors specified in a Route must apply to a specific port
// as opposed to a listener(s) whose port(s) may be changed. When both Port
// and SectionName are specified, the name and port of the selected listener
// must match both specified values.
//
// Implementations MAY choose to support other parent resources.
// Implementations supporting other types of parent resources MUST clearly
// document how/if Port is interpreted.
//
// For the purpose of status, an attachment is considered successful as
// long as the parent resource accepts it partially. For example, Gateway
// listeners can restrict which Routes can attach to them by Route kind,
// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
// from the referencing Route, the Route MUST be considered successfully
// attached. If no Gateway listeners accept attachment from this Route,
// the Route MUST be considered detached from the Gateway.
//
// Support: Extended
func (o GRPCRouteStatusParentsParentRefPatchPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GRPCRouteStatusParentsParentRefPatch) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// SectionName is the name of a section within the target resource. In the
// following resources, SectionName is interpreted as the following:
//
//   - Gateway: Listener name. When both Port (experimental) and SectionName
//     are specified, the name and port of the selected listener must match
//     both specified values.
//   - Service: Port name. When both Port (experimental) and SectionName
//     are specified, the name and port of the selected listener must match
//     both specified values.
//
// Implementations MAY choose to support attaching Routes to other resources.
// If that is the case, they MUST clearly document how SectionName is
// interpreted.
//
// When unspecified (empty string), this will reference the entire resource.
// For the purpose of status, an attachment is considered successful if at
// least one section in the parent resource accepts it. For example, Gateway
// listeners can restrict which Routes can attach to them by Route kind,
// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
// the referencing Route, the Route MUST be considered successfully
// attached. If no Gateway listeners accept attachment from this Route, the
// Route MUST be considered detached from the Gateway.
//
// Support: Core
func (o GRPCRouteStatusParentsParentRefPatchPtrOutput) SectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteStatusParentsParentRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.SectionName
	}).(pulumi.StringPtrOutput)
}

// RouteParentStatus describes the status of a route with respect to an
// associated Parent.
type GRPCRouteStatusParentsPatch struct {
	// Conditions describes the status of the route with respect to the Gateway.
	// Note that the route's availability is also subject to the Gateway's own
	// status conditions and listener status.
	//
	// If the Route's ParentRef specifies an existing Gateway that supports
	// Routes of this kind AND that Gateway's controller has sufficient access,
	// then that Gateway's controller MUST set the "Accepted" condition on the
	// Route, to indicate whether the route has been accepted or rejected by the
	// Gateway, and why.
	//
	// A Route MUST be considered "Accepted" if at least one of the Route's
	// rules is implemented by the Gateway.
	//
	// There are a number of cases where the "Accepted" condition may not be set
	// due to lack of controller visibility, that includes when:
	//
	// * The Route refers to a non-existent parent.
	// * The Route is of a type that the controller does not support.
	// * The Route is in a namespace the controller does not have access to.
	Conditions []GRPCRouteStatusParentsConditionsPatch `pulumi:"conditions"`
	// ControllerName is a domain/path string that indicates the name of the
	// controller that wrote this status. This corresponds with the
	// controllerName field on GatewayClass.
	//
	// Example: "example.net/gateway-controller".
	//
	// The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
	// valid Kubernetes names
	// (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	//
	// Controllers MUST populate this field when writing status. Controllers should ensure that
	// entries to status populated with their ControllerName are cleaned up when they are no
	// longer necessary.
	ControllerName *string                               `pulumi:"controllerName"`
	ParentRef      *GRPCRouteStatusParentsParentRefPatch `pulumi:"parentRef"`
}

// GRPCRouteStatusParentsPatchInput is an input type that accepts GRPCRouteStatusParentsPatchArgs and GRPCRouteStatusParentsPatchOutput values.
// You can construct a concrete instance of `GRPCRouteStatusParentsPatchInput` via:
//
//	GRPCRouteStatusParentsPatchArgs{...}
type GRPCRouteStatusParentsPatchInput interface {
	pulumi.Input

	ToGRPCRouteStatusParentsPatchOutput() GRPCRouteStatusParentsPatchOutput
	ToGRPCRouteStatusParentsPatchOutputWithContext(context.Context) GRPCRouteStatusParentsPatchOutput
}

// RouteParentStatus describes the status of a route with respect to an
// associated Parent.
type GRPCRouteStatusParentsPatchArgs struct {
	// Conditions describes the status of the route with respect to the Gateway.
	// Note that the route's availability is also subject to the Gateway's own
	// status conditions and listener status.
	//
	// If the Route's ParentRef specifies an existing Gateway that supports
	// Routes of this kind AND that Gateway's controller has sufficient access,
	// then that Gateway's controller MUST set the "Accepted" condition on the
	// Route, to indicate whether the route has been accepted or rejected by the
	// Gateway, and why.
	//
	// A Route MUST be considered "Accepted" if at least one of the Route's
	// rules is implemented by the Gateway.
	//
	// There are a number of cases where the "Accepted" condition may not be set
	// due to lack of controller visibility, that includes when:
	//
	// * The Route refers to a non-existent parent.
	// * The Route is of a type that the controller does not support.
	// * The Route is in a namespace the controller does not have access to.
	Conditions GRPCRouteStatusParentsConditionsPatchArrayInput `pulumi:"conditions"`
	// ControllerName is a domain/path string that indicates the name of the
	// controller that wrote this status. This corresponds with the
	// controllerName field on GatewayClass.
	//
	// Example: "example.net/gateway-controller".
	//
	// The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
	// valid Kubernetes names
	// (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	//
	// Controllers MUST populate this field when writing status. Controllers should ensure that
	// entries to status populated with their ControllerName are cleaned up when they are no
	// longer necessary.
	ControllerName pulumi.StringPtrInput                        `pulumi:"controllerName"`
	ParentRef      GRPCRouteStatusParentsParentRefPatchPtrInput `pulumi:"parentRef"`
}

func (GRPCRouteStatusParentsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteStatusParentsPatch)(nil)).Elem()
}

func (i GRPCRouteStatusParentsPatchArgs) ToGRPCRouteStatusParentsPatchOutput() GRPCRouteStatusParentsPatchOutput {
	return i.ToGRPCRouteStatusParentsPatchOutputWithContext(context.Background())
}

func (i GRPCRouteStatusParentsPatchArgs) ToGRPCRouteStatusParentsPatchOutputWithContext(ctx context.Context) GRPCRouteStatusParentsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteStatusParentsPatchOutput)
}

// GRPCRouteStatusParentsPatchArrayInput is an input type that accepts GRPCRouteStatusParentsPatchArray and GRPCRouteStatusParentsPatchArrayOutput values.
// You can construct a concrete instance of `GRPCRouteStatusParentsPatchArrayInput` via:
//
//	GRPCRouteStatusParentsPatchArray{ GRPCRouteStatusParentsPatchArgs{...} }
type GRPCRouteStatusParentsPatchArrayInput interface {
	pulumi.Input

	ToGRPCRouteStatusParentsPatchArrayOutput() GRPCRouteStatusParentsPatchArrayOutput
	ToGRPCRouteStatusParentsPatchArrayOutputWithContext(context.Context) GRPCRouteStatusParentsPatchArrayOutput
}

type GRPCRouteStatusParentsPatchArray []GRPCRouteStatusParentsPatchInput

func (GRPCRouteStatusParentsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteStatusParentsPatch)(nil)).Elem()
}

func (i GRPCRouteStatusParentsPatchArray) ToGRPCRouteStatusParentsPatchArrayOutput() GRPCRouteStatusParentsPatchArrayOutput {
	return i.ToGRPCRouteStatusParentsPatchArrayOutputWithContext(context.Background())
}

func (i GRPCRouteStatusParentsPatchArray) ToGRPCRouteStatusParentsPatchArrayOutputWithContext(ctx context.Context) GRPCRouteStatusParentsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteStatusParentsPatchArrayOutput)
}

// RouteParentStatus describes the status of a route with respect to an
// associated Parent.
type GRPCRouteStatusParentsPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteStatusParentsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteStatusParentsPatch)(nil)).Elem()
}

func (o GRPCRouteStatusParentsPatchOutput) ToGRPCRouteStatusParentsPatchOutput() GRPCRouteStatusParentsPatchOutput {
	return o
}

func (o GRPCRouteStatusParentsPatchOutput) ToGRPCRouteStatusParentsPatchOutputWithContext(ctx context.Context) GRPCRouteStatusParentsPatchOutput {
	return o
}

// Conditions describes the status of the route with respect to the Gateway.
// Note that the route's availability is also subject to the Gateway's own
// status conditions and listener status.
//
// If the Route's ParentRef specifies an existing Gateway that supports
// Routes of this kind AND that Gateway's controller has sufficient access,
// then that Gateway's controller MUST set the "Accepted" condition on the
// Route, to indicate whether the route has been accepted or rejected by the
// Gateway, and why.
//
// A Route MUST be considered "Accepted" if at least one of the Route's
// rules is implemented by the Gateway.
//
// There are a number of cases where the "Accepted" condition may not be set
// due to lack of controller visibility, that includes when:
//
// * The Route refers to a non-existent parent.
// * The Route is of a type that the controller does not support.
// * The Route is in a namespace the controller does not have access to.
func (o GRPCRouteStatusParentsPatchOutput) Conditions() GRPCRouteStatusParentsConditionsPatchArrayOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsPatch) []GRPCRouteStatusParentsConditionsPatch { return v.Conditions }).(GRPCRouteStatusParentsConditionsPatchArrayOutput)
}

// ControllerName is a domain/path string that indicates the name of the
// controller that wrote this status. This corresponds with the
// controllerName field on GatewayClass.
//
// Example: "example.net/gateway-controller".
//
// The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
// valid Kubernetes names
// (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
//
// Controllers MUST populate this field when writing status. Controllers should ensure that
// entries to status populated with their ControllerName are cleaned up when they are no
// longer necessary.
func (o GRPCRouteStatusParentsPatchOutput) ControllerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsPatch) *string { return v.ControllerName }).(pulumi.StringPtrOutput)
}

func (o GRPCRouteStatusParentsPatchOutput) ParentRef() GRPCRouteStatusParentsParentRefPatchPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsPatch) *GRPCRouteStatusParentsParentRefPatch { return v.ParentRef }).(GRPCRouteStatusParentsParentRefPatchPtrOutput)
}

type GRPCRouteStatusParentsPatchArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteStatusParentsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteStatusParentsPatch)(nil)).Elem()
}

func (o GRPCRouteStatusParentsPatchArrayOutput) ToGRPCRouteStatusParentsPatchArrayOutput() GRPCRouteStatusParentsPatchArrayOutput {
	return o
}

func (o GRPCRouteStatusParentsPatchArrayOutput) ToGRPCRouteStatusParentsPatchArrayOutputWithContext(ctx context.Context) GRPCRouteStatusParentsPatchArrayOutput {
	return o
}

func (o GRPCRouteStatusParentsPatchArrayOutput) Index(i pulumi.IntInput) GRPCRouteStatusParentsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteStatusParentsPatch {
		return vs[0].([]GRPCRouteStatusParentsPatch)[vs[1].(int)]
	}).(GRPCRouteStatusParentsPatchOutput)
}

// Status defines the current state of GRPCRoute.
type GRPCRouteStatusPatch struct {
	// Parents is a list of parent resources (usually Gateways) that are
	// associated with the route, and the status of the route with respect to
	// each parent. When this route attaches to a parent, the controller that
	// manages the parent must add an entry to this list when the controller
	// first sees the route and should update the entry as appropriate when the
	// route or gateway is modified.
	//
	// Note that parent references that cannot be resolved by an implementation
	// of this API will not be added to this list. Implementations of this API
	// can only populate Route status for the Gateways/parent resources they are
	// responsible for.
	//
	// A maximum of 32 Gateways will be represented in this list. An empty list
	// means the route has not been attached to any Gateway.
	Parents []GRPCRouteStatusParentsPatch `pulumi:"parents"`
}

// GRPCRouteStatusPatchInput is an input type that accepts GRPCRouteStatusPatchArgs and GRPCRouteStatusPatchOutput values.
// You can construct a concrete instance of `GRPCRouteStatusPatchInput` via:
//
//	GRPCRouteStatusPatchArgs{...}
type GRPCRouteStatusPatchInput interface {
	pulumi.Input

	ToGRPCRouteStatusPatchOutput() GRPCRouteStatusPatchOutput
	ToGRPCRouteStatusPatchOutputWithContext(context.Context) GRPCRouteStatusPatchOutput
}

// Status defines the current state of GRPCRoute.
type GRPCRouteStatusPatchArgs struct {
	// Parents is a list of parent resources (usually Gateways) that are
	// associated with the route, and the status of the route with respect to
	// each parent. When this route attaches to a parent, the controller that
	// manages the parent must add an entry to this list when the controller
	// first sees the route and should update the entry as appropriate when the
	// route or gateway is modified.
	//
	// Note that parent references that cannot be resolved by an implementation
	// of this API will not be added to this list. Implementations of this API
	// can only populate Route status for the Gateways/parent resources they are
	// responsible for.
	//
	// A maximum of 32 Gateways will be represented in this list. An empty list
	// means the route has not been attached to any Gateway.
	Parents GRPCRouteStatusParentsPatchArrayInput `pulumi:"parents"`
}

func (GRPCRouteStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteStatusPatch)(nil)).Elem()
}

func (i GRPCRouteStatusPatchArgs) ToGRPCRouteStatusPatchOutput() GRPCRouteStatusPatchOutput {
	return i.ToGRPCRouteStatusPatchOutputWithContext(context.Background())
}

func (i GRPCRouteStatusPatchArgs) ToGRPCRouteStatusPatchOutputWithContext(ctx context.Context) GRPCRouteStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteStatusPatchOutput)
}

func (i GRPCRouteStatusPatchArgs) ToGRPCRouteStatusPatchPtrOutput() GRPCRouteStatusPatchPtrOutput {
	return i.ToGRPCRouteStatusPatchPtrOutputWithContext(context.Background())
}

func (i GRPCRouteStatusPatchArgs) ToGRPCRouteStatusPatchPtrOutputWithContext(ctx context.Context) GRPCRouteStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteStatusPatchOutput).ToGRPCRouteStatusPatchPtrOutputWithContext(ctx)
}

// GRPCRouteStatusPatchPtrInput is an input type that accepts GRPCRouteStatusPatchArgs, GRPCRouteStatusPatchPtr and GRPCRouteStatusPatchPtrOutput values.
// You can construct a concrete instance of `GRPCRouteStatusPatchPtrInput` via:
//
//	        GRPCRouteStatusPatchArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteStatusPatchPtrInput interface {
	pulumi.Input

	ToGRPCRouteStatusPatchPtrOutput() GRPCRouteStatusPatchPtrOutput
	ToGRPCRouteStatusPatchPtrOutputWithContext(context.Context) GRPCRouteStatusPatchPtrOutput
}

type grpcrouteStatusPatchPtrType GRPCRouteStatusPatchArgs

func GRPCRouteStatusPatchPtr(v *GRPCRouteStatusPatchArgs) GRPCRouteStatusPatchPtrInput {
	return (*grpcrouteStatusPatchPtrType)(v)
}

func (*grpcrouteStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteStatusPatch)(nil)).Elem()
}

func (i *grpcrouteStatusPatchPtrType) ToGRPCRouteStatusPatchPtrOutput() GRPCRouteStatusPatchPtrOutput {
	return i.ToGRPCRouteStatusPatchPtrOutputWithContext(context.Background())
}

func (i *grpcrouteStatusPatchPtrType) ToGRPCRouteStatusPatchPtrOutputWithContext(ctx context.Context) GRPCRouteStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteStatusPatchPtrOutput)
}

// Status defines the current state of GRPCRoute.
type GRPCRouteStatusPatchOutput struct{ *pulumi.OutputState }

func (GRPCRouteStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteStatusPatch)(nil)).Elem()
}

func (o GRPCRouteStatusPatchOutput) ToGRPCRouteStatusPatchOutput() GRPCRouteStatusPatchOutput {
	return o
}

func (o GRPCRouteStatusPatchOutput) ToGRPCRouteStatusPatchOutputWithContext(ctx context.Context) GRPCRouteStatusPatchOutput {
	return o
}

func (o GRPCRouteStatusPatchOutput) ToGRPCRouteStatusPatchPtrOutput() GRPCRouteStatusPatchPtrOutput {
	return o.ToGRPCRouteStatusPatchPtrOutputWithContext(context.Background())
}

func (o GRPCRouteStatusPatchOutput) ToGRPCRouteStatusPatchPtrOutputWithContext(ctx context.Context) GRPCRouteStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteStatusPatch) *GRPCRouteStatusPatch {
		return &v
	}).(GRPCRouteStatusPatchPtrOutput)
}

// Parents is a list of parent resources (usually Gateways) that are
// associated with the route, and the status of the route with respect to
// each parent. When this route attaches to a parent, the controller that
// manages the parent must add an entry to this list when the controller
// first sees the route and should update the entry as appropriate when the
// route or gateway is modified.
//
// Note that parent references that cannot be resolved by an implementation
// of this API will not be added to this list. Implementations of this API
// can only populate Route status for the Gateways/parent resources they are
// responsible for.
//
// A maximum of 32 Gateways will be represented in this list. An empty list
// means the route has not been attached to any Gateway.
func (o GRPCRouteStatusPatchOutput) Parents() GRPCRouteStatusParentsPatchArrayOutput {
	return o.ApplyT(func(v GRPCRouteStatusPatch) []GRPCRouteStatusParentsPatch { return v.Parents }).(GRPCRouteStatusParentsPatchArrayOutput)
}

type GRPCRouteStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteStatusPatch)(nil)).Elem()
}

func (o GRPCRouteStatusPatchPtrOutput) ToGRPCRouteStatusPatchPtrOutput() GRPCRouteStatusPatchPtrOutput {
	return o
}

func (o GRPCRouteStatusPatchPtrOutput) ToGRPCRouteStatusPatchPtrOutputWithContext(ctx context.Context) GRPCRouteStatusPatchPtrOutput {
	return o
}

func (o GRPCRouteStatusPatchPtrOutput) Elem() GRPCRouteStatusPatchOutput {
	return o.ApplyT(func(v *GRPCRouteStatusPatch) GRPCRouteStatusPatch {
		if v != nil {
			return *v
		}
		var ret GRPCRouteStatusPatch
		return ret
	}).(GRPCRouteStatusPatchOutput)
}

// Parents is a list of parent resources (usually Gateways) that are
// associated with the route, and the status of the route with respect to
// each parent. When this route attaches to a parent, the controller that
// manages the parent must add an entry to this list when the controller
// first sees the route and should update the entry as appropriate when the
// route or gateway is modified.
//
// Note that parent references that cannot be resolved by an implementation
// of this API will not be added to this list. Implementations of this API
// can only populate Route status for the Gateways/parent resources they are
// responsible for.
//
// A maximum of 32 Gateways will be represented in this list. An empty list
// means the route has not been attached to any Gateway.
func (o GRPCRouteStatusPatchPtrOutput) Parents() GRPCRouteStatusParentsPatchArrayOutput {
	return o.ApplyT(func(v *GRPCRouteStatusPatch) []GRPCRouteStatusParentsPatch {
		if v == nil {
			return nil
		}
		return v.Parents
	}).(GRPCRouteStatusParentsPatchArrayOutput)
}

// ReferenceGrant identifies kinds of resources in other namespaces that are
// trusted to reference the specified kinds of resources in the same namespace
// as the policy.
//
// Each ReferenceGrant can be used to represent a unique trust relationship.
// Additional Reference Grants can be used to add to the set of trusted
// sources of inbound references for the namespace they are defined within.
//
// A ReferenceGrant is required for all cross-namespace references in Gateway API
// (with the exception of cross-namespace Route-Gateway attachment, which is
// governed by the AllowedRoutes configuration on the Gateway, and cross-namespace
// Service ParentRefs on a "consumer" mesh Route, which defines routing rules
// applicable only to workloads in the Route namespace). ReferenceGrants allowing
// a reference from a Route to a Service are only applicable to BackendRefs.
//
// ReferenceGrant is a form of runtime verification allowing users to assert
// which cross-namespace object references are permitted. Implementations that
// support ReferenceGrant MUST NOT permit cross-namespace references which have
// no grant, and MUST respond to the removal of a grant by revoking the access
// that the grant allowed.
type ReferenceGrantType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta  `pulumi:"metadata"`
	Spec     *ReferenceGrantSpec `pulumi:"spec"`
}

// ReferenceGrantTypeInput is an input type that accepts ReferenceGrantTypeArgs and ReferenceGrantTypeOutput values.
// You can construct a concrete instance of `ReferenceGrantTypeInput` via:
//
//	ReferenceGrantTypeArgs{...}
type ReferenceGrantTypeInput interface {
	pulumi.Input

	ToReferenceGrantTypeOutput() ReferenceGrantTypeOutput
	ToReferenceGrantTypeOutputWithContext(context.Context) ReferenceGrantTypeOutput
}

// ReferenceGrant identifies kinds of resources in other namespaces that are
// trusted to reference the specified kinds of resources in the same namespace
// as the policy.
//
// Each ReferenceGrant can be used to represent a unique trust relationship.
// Additional Reference Grants can be used to add to the set of trusted
// sources of inbound references for the namespace they are defined within.
//
// A ReferenceGrant is required for all cross-namespace references in Gateway API
// (with the exception of cross-namespace Route-Gateway attachment, which is
// governed by the AllowedRoutes configuration on the Gateway, and cross-namespace
// Service ParentRefs on a "consumer" mesh Route, which defines routing rules
// applicable only to workloads in the Route namespace). ReferenceGrants allowing
// a reference from a Route to a Service are only applicable to BackendRefs.
//
// ReferenceGrant is a form of runtime verification allowing users to assert
// which cross-namespace object references are permitted. Implementations that
// support ReferenceGrant MUST NOT permit cross-namespace references which have
// no grant, and MUST respond to the removal of a grant by revoking the access
// that the grant allowed.
type ReferenceGrantTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput  `pulumi:"metadata"`
	Spec     ReferenceGrantSpecPtrInput `pulumi:"spec"`
}

func (ReferenceGrantTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceGrantType)(nil)).Elem()
}

func (i ReferenceGrantTypeArgs) ToReferenceGrantTypeOutput() ReferenceGrantTypeOutput {
	return i.ToReferenceGrantTypeOutputWithContext(context.Background())
}

func (i ReferenceGrantTypeArgs) ToReferenceGrantTypeOutputWithContext(ctx context.Context) ReferenceGrantTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantTypeOutput)
}

// ReferenceGrantTypeArrayInput is an input type that accepts ReferenceGrantTypeArray and ReferenceGrantTypeArrayOutput values.
// You can construct a concrete instance of `ReferenceGrantTypeArrayInput` via:
//
//	ReferenceGrantTypeArray{ ReferenceGrantTypeArgs{...} }
type ReferenceGrantTypeArrayInput interface {
	pulumi.Input

	ToReferenceGrantTypeArrayOutput() ReferenceGrantTypeArrayOutput
	ToReferenceGrantTypeArrayOutputWithContext(context.Context) ReferenceGrantTypeArrayOutput
}

type ReferenceGrantTypeArray []ReferenceGrantTypeInput

func (ReferenceGrantTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReferenceGrantType)(nil)).Elem()
}

func (i ReferenceGrantTypeArray) ToReferenceGrantTypeArrayOutput() ReferenceGrantTypeArrayOutput {
	return i.ToReferenceGrantTypeArrayOutputWithContext(context.Background())
}

func (i ReferenceGrantTypeArray) ToReferenceGrantTypeArrayOutputWithContext(ctx context.Context) ReferenceGrantTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantTypeArrayOutput)
}

// ReferenceGrant identifies kinds of resources in other namespaces that are
// trusted to reference the specified kinds of resources in the same namespace
// as the policy.
//
// Each ReferenceGrant can be used to represent a unique trust relationship.
// Additional Reference Grants can be used to add to the set of trusted
// sources of inbound references for the namespace they are defined within.
//
// A ReferenceGrant is required for all cross-namespace references in Gateway API
// (with the exception of cross-namespace Route-Gateway attachment, which is
// governed by the AllowedRoutes configuration on the Gateway, and cross-namespace
// Service ParentRefs on a "consumer" mesh Route, which defines routing rules
// applicable only to workloads in the Route namespace). ReferenceGrants allowing
// a reference from a Route to a Service are only applicable to BackendRefs.
//
// ReferenceGrant is a form of runtime verification allowing users to assert
// which cross-namespace object references are permitted. Implementations that
// support ReferenceGrant MUST NOT permit cross-namespace references which have
// no grant, and MUST respond to the removal of a grant by revoking the access
// that the grant allowed.
type ReferenceGrantTypeOutput struct{ *pulumi.OutputState }

func (ReferenceGrantTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceGrantType)(nil)).Elem()
}

func (o ReferenceGrantTypeOutput) ToReferenceGrantTypeOutput() ReferenceGrantTypeOutput {
	return o
}

func (o ReferenceGrantTypeOutput) ToReferenceGrantTypeOutputWithContext(ctx context.Context) ReferenceGrantTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ReferenceGrantTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceGrantType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ReferenceGrantTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceGrantType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ReferenceGrantTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v ReferenceGrantType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o ReferenceGrantTypeOutput) Spec() ReferenceGrantSpecPtrOutput {
	return o.ApplyT(func(v ReferenceGrantType) *ReferenceGrantSpec { return v.Spec }).(ReferenceGrantSpecPtrOutput)
}

type ReferenceGrantTypeArrayOutput struct{ *pulumi.OutputState }

func (ReferenceGrantTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReferenceGrantType)(nil)).Elem()
}

func (o ReferenceGrantTypeArrayOutput) ToReferenceGrantTypeArrayOutput() ReferenceGrantTypeArrayOutput {
	return o
}

func (o ReferenceGrantTypeArrayOutput) ToReferenceGrantTypeArrayOutputWithContext(ctx context.Context) ReferenceGrantTypeArrayOutput {
	return o
}

func (o ReferenceGrantTypeArrayOutput) Index(i pulumi.IntInput) ReferenceGrantTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReferenceGrantType {
		return vs[0].([]ReferenceGrantType)[vs[1].(int)]
	}).(ReferenceGrantTypeOutput)
}

// ReferenceGrantList is a list of ReferenceGrant
type ReferenceGrantListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of referencegrants. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []ReferenceGrantType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// ReferenceGrantListTypeInput is an input type that accepts ReferenceGrantListTypeArgs and ReferenceGrantListTypeOutput values.
// You can construct a concrete instance of `ReferenceGrantListTypeInput` via:
//
//	ReferenceGrantListTypeArgs{...}
type ReferenceGrantListTypeInput interface {
	pulumi.Input

	ToReferenceGrantListTypeOutput() ReferenceGrantListTypeOutput
	ToReferenceGrantListTypeOutputWithContext(context.Context) ReferenceGrantListTypeOutput
}

// ReferenceGrantList is a list of ReferenceGrant
type ReferenceGrantListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of referencegrants. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ReferenceGrantTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (ReferenceGrantListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceGrantListType)(nil)).Elem()
}

func (i ReferenceGrantListTypeArgs) ToReferenceGrantListTypeOutput() ReferenceGrantListTypeOutput {
	return i.ToReferenceGrantListTypeOutputWithContext(context.Background())
}

func (i ReferenceGrantListTypeArgs) ToReferenceGrantListTypeOutputWithContext(ctx context.Context) ReferenceGrantListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantListTypeOutput)
}

// ReferenceGrantList is a list of ReferenceGrant
type ReferenceGrantListTypeOutput struct{ *pulumi.OutputState }

func (ReferenceGrantListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceGrantListType)(nil)).Elem()
}

func (o ReferenceGrantListTypeOutput) ToReferenceGrantListTypeOutput() ReferenceGrantListTypeOutput {
	return o
}

func (o ReferenceGrantListTypeOutput) ToReferenceGrantListTypeOutputWithContext(ctx context.Context) ReferenceGrantListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ReferenceGrantListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceGrantListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of referencegrants. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o ReferenceGrantListTypeOutput) Items() ReferenceGrantTypeArrayOutput {
	return o.ApplyT(func(v ReferenceGrantListType) []ReferenceGrantType { return v.Items }).(ReferenceGrantTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ReferenceGrantListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceGrantListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ReferenceGrantListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v ReferenceGrantListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// ReferenceGrant identifies kinds of resources in other namespaces that are
// trusted to reference the specified kinds of resources in the same namespace
// as the policy.
//
// Each ReferenceGrant can be used to represent a unique trust relationship.
// Additional Reference Grants can be used to add to the set of trusted
// sources of inbound references for the namespace they are defined within.
//
// A ReferenceGrant is required for all cross-namespace references in Gateway API
// (with the exception of cross-namespace Route-Gateway attachment, which is
// governed by the AllowedRoutes configuration on the Gateway, and cross-namespace
// Service ParentRefs on a "consumer" mesh Route, which defines routing rules
// applicable only to workloads in the Route namespace). ReferenceGrants allowing
// a reference from a Route to a Service are only applicable to BackendRefs.
//
// ReferenceGrant is a form of runtime verification allowing users to assert
// which cross-namespace object references are permitted. Implementations that
// support ReferenceGrant MUST NOT permit cross-namespace references which have
// no grant, and MUST respond to the removal of a grant by revoking the access
// that the grant allowed.
type ReferenceGrantPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch  `pulumi:"metadata"`
	Spec     *ReferenceGrantSpecPatch `pulumi:"spec"`
}

// ReferenceGrantPatchTypeInput is an input type that accepts ReferenceGrantPatchTypeArgs and ReferenceGrantPatchTypeOutput values.
// You can construct a concrete instance of `ReferenceGrantPatchTypeInput` via:
//
//	ReferenceGrantPatchTypeArgs{...}
type ReferenceGrantPatchTypeInput interface {
	pulumi.Input

	ToReferenceGrantPatchTypeOutput() ReferenceGrantPatchTypeOutput
	ToReferenceGrantPatchTypeOutputWithContext(context.Context) ReferenceGrantPatchTypeOutput
}

// ReferenceGrant identifies kinds of resources in other namespaces that are
// trusted to reference the specified kinds of resources in the same namespace
// as the policy.
//
// Each ReferenceGrant can be used to represent a unique trust relationship.
// Additional Reference Grants can be used to add to the set of trusted
// sources of inbound references for the namespace they are defined within.
//
// A ReferenceGrant is required for all cross-namespace references in Gateway API
// (with the exception of cross-namespace Route-Gateway attachment, which is
// governed by the AllowedRoutes configuration on the Gateway, and cross-namespace
// Service ParentRefs on a "consumer" mesh Route, which defines routing rules
// applicable only to workloads in the Route namespace). ReferenceGrants allowing
// a reference from a Route to a Service are only applicable to BackendRefs.
//
// ReferenceGrant is a form of runtime verification allowing users to assert
// which cross-namespace object references are permitted. Implementations that
// support ReferenceGrant MUST NOT permit cross-namespace references which have
// no grant, and MUST respond to the removal of a grant by revoking the access
// that the grant allowed.
type ReferenceGrantPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput  `pulumi:"metadata"`
	Spec     ReferenceGrantSpecPatchPtrInput `pulumi:"spec"`
}

func (ReferenceGrantPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceGrantPatchType)(nil)).Elem()
}

func (i ReferenceGrantPatchTypeArgs) ToReferenceGrantPatchTypeOutput() ReferenceGrantPatchTypeOutput {
	return i.ToReferenceGrantPatchTypeOutputWithContext(context.Background())
}

func (i ReferenceGrantPatchTypeArgs) ToReferenceGrantPatchTypeOutputWithContext(ctx context.Context) ReferenceGrantPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantPatchTypeOutput)
}

// ReferenceGrant identifies kinds of resources in other namespaces that are
// trusted to reference the specified kinds of resources in the same namespace
// as the policy.
//
// Each ReferenceGrant can be used to represent a unique trust relationship.
// Additional Reference Grants can be used to add to the set of trusted
// sources of inbound references for the namespace they are defined within.
//
// A ReferenceGrant is required for all cross-namespace references in Gateway API
// (with the exception of cross-namespace Route-Gateway attachment, which is
// governed by the AllowedRoutes configuration on the Gateway, and cross-namespace
// Service ParentRefs on a "consumer" mesh Route, which defines routing rules
// applicable only to workloads in the Route namespace). ReferenceGrants allowing
// a reference from a Route to a Service are only applicable to BackendRefs.
//
// ReferenceGrant is a form of runtime verification allowing users to assert
// which cross-namespace object references are permitted. Implementations that
// support ReferenceGrant MUST NOT permit cross-namespace references which have
// no grant, and MUST respond to the removal of a grant by revoking the access
// that the grant allowed.
type ReferenceGrantPatchTypeOutput struct{ *pulumi.OutputState }

func (ReferenceGrantPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceGrantPatchType)(nil)).Elem()
}

func (o ReferenceGrantPatchTypeOutput) ToReferenceGrantPatchTypeOutput() ReferenceGrantPatchTypeOutput {
	return o
}

func (o ReferenceGrantPatchTypeOutput) ToReferenceGrantPatchTypeOutputWithContext(ctx context.Context) ReferenceGrantPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ReferenceGrantPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceGrantPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ReferenceGrantPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceGrantPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ReferenceGrantPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v ReferenceGrantPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ReferenceGrantPatchTypeOutput) Spec() ReferenceGrantSpecPatchPtrOutput {
	return o.ApplyT(func(v ReferenceGrantPatchType) *ReferenceGrantSpecPatch { return v.Spec }).(ReferenceGrantSpecPatchPtrOutput)
}

// Spec defines the desired state of ReferenceGrant.
type ReferenceGrantSpec struct {
	// From describes the trusted namespaces and kinds that can reference the
	// resources described in "To". Each entry in this list MUST be considered
	// to be an additional place that references can be valid from, or to put
	// this another way, entries MUST be combined using OR.
	//
	// Support: Core
	From []ReferenceGrantSpecFrom `pulumi:"from"`
	// To describes the resources that may be referenced by the resources
	// described in "From". Each entry in this list MUST be considered to be an
	// additional place that references can be valid to, or to put this another
	// way, entries MUST be combined using OR.
	//
	// Support: Core
	To []ReferenceGrantSpecTo `pulumi:"to"`
}

// ReferenceGrantSpecInput is an input type that accepts ReferenceGrantSpecArgs and ReferenceGrantSpecOutput values.
// You can construct a concrete instance of `ReferenceGrantSpecInput` via:
//
//	ReferenceGrantSpecArgs{...}
type ReferenceGrantSpecInput interface {
	pulumi.Input

	ToReferenceGrantSpecOutput() ReferenceGrantSpecOutput
	ToReferenceGrantSpecOutputWithContext(context.Context) ReferenceGrantSpecOutput
}

// Spec defines the desired state of ReferenceGrant.
type ReferenceGrantSpecArgs struct {
	// From describes the trusted namespaces and kinds that can reference the
	// resources described in "To". Each entry in this list MUST be considered
	// to be an additional place that references can be valid from, or to put
	// this another way, entries MUST be combined using OR.
	//
	// Support: Core
	From ReferenceGrantSpecFromArrayInput `pulumi:"from"`
	// To describes the resources that may be referenced by the resources
	// described in "From". Each entry in this list MUST be considered to be an
	// additional place that references can be valid to, or to put this another
	// way, entries MUST be combined using OR.
	//
	// Support: Core
	To ReferenceGrantSpecToArrayInput `pulumi:"to"`
}

func (ReferenceGrantSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceGrantSpec)(nil)).Elem()
}

func (i ReferenceGrantSpecArgs) ToReferenceGrantSpecOutput() ReferenceGrantSpecOutput {
	return i.ToReferenceGrantSpecOutputWithContext(context.Background())
}

func (i ReferenceGrantSpecArgs) ToReferenceGrantSpecOutputWithContext(ctx context.Context) ReferenceGrantSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantSpecOutput)
}

func (i ReferenceGrantSpecArgs) ToReferenceGrantSpecPtrOutput() ReferenceGrantSpecPtrOutput {
	return i.ToReferenceGrantSpecPtrOutputWithContext(context.Background())
}

func (i ReferenceGrantSpecArgs) ToReferenceGrantSpecPtrOutputWithContext(ctx context.Context) ReferenceGrantSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantSpecOutput).ToReferenceGrantSpecPtrOutputWithContext(ctx)
}

// ReferenceGrantSpecPtrInput is an input type that accepts ReferenceGrantSpecArgs, ReferenceGrantSpecPtr and ReferenceGrantSpecPtrOutput values.
// You can construct a concrete instance of `ReferenceGrantSpecPtrInput` via:
//
//	        ReferenceGrantSpecArgs{...}
//
//	or:
//
//	        nil
type ReferenceGrantSpecPtrInput interface {
	pulumi.Input

	ToReferenceGrantSpecPtrOutput() ReferenceGrantSpecPtrOutput
	ToReferenceGrantSpecPtrOutputWithContext(context.Context) ReferenceGrantSpecPtrOutput
}

type referenceGrantSpecPtrType ReferenceGrantSpecArgs

func ReferenceGrantSpecPtr(v *ReferenceGrantSpecArgs) ReferenceGrantSpecPtrInput {
	return (*referenceGrantSpecPtrType)(v)
}

func (*referenceGrantSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceGrantSpec)(nil)).Elem()
}

func (i *referenceGrantSpecPtrType) ToReferenceGrantSpecPtrOutput() ReferenceGrantSpecPtrOutput {
	return i.ToReferenceGrantSpecPtrOutputWithContext(context.Background())
}

func (i *referenceGrantSpecPtrType) ToReferenceGrantSpecPtrOutputWithContext(ctx context.Context) ReferenceGrantSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantSpecPtrOutput)
}

// Spec defines the desired state of ReferenceGrant.
type ReferenceGrantSpecOutput struct{ *pulumi.OutputState }

func (ReferenceGrantSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceGrantSpec)(nil)).Elem()
}

func (o ReferenceGrantSpecOutput) ToReferenceGrantSpecOutput() ReferenceGrantSpecOutput {
	return o
}

func (o ReferenceGrantSpecOutput) ToReferenceGrantSpecOutputWithContext(ctx context.Context) ReferenceGrantSpecOutput {
	return o
}

func (o ReferenceGrantSpecOutput) ToReferenceGrantSpecPtrOutput() ReferenceGrantSpecPtrOutput {
	return o.ToReferenceGrantSpecPtrOutputWithContext(context.Background())
}

func (o ReferenceGrantSpecOutput) ToReferenceGrantSpecPtrOutputWithContext(ctx context.Context) ReferenceGrantSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReferenceGrantSpec) *ReferenceGrantSpec {
		return &v
	}).(ReferenceGrantSpecPtrOutput)
}

// From describes the trusted namespaces and kinds that can reference the
// resources described in "To". Each entry in this list MUST be considered
// to be an additional place that references can be valid from, or to put
// this another way, entries MUST be combined using OR.
//
// Support: Core
func (o ReferenceGrantSpecOutput) From() ReferenceGrantSpecFromArrayOutput {
	return o.ApplyT(func(v ReferenceGrantSpec) []ReferenceGrantSpecFrom { return v.From }).(ReferenceGrantSpecFromArrayOutput)
}

// To describes the resources that may be referenced by the resources
// described in "From". Each entry in this list MUST be considered to be an
// additional place that references can be valid to, or to put this another
// way, entries MUST be combined using OR.
//
// Support: Core
func (o ReferenceGrantSpecOutput) To() ReferenceGrantSpecToArrayOutput {
	return o.ApplyT(func(v ReferenceGrantSpec) []ReferenceGrantSpecTo { return v.To }).(ReferenceGrantSpecToArrayOutput)
}

type ReferenceGrantSpecPtrOutput struct{ *pulumi.OutputState }

func (ReferenceGrantSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceGrantSpec)(nil)).Elem()
}

func (o ReferenceGrantSpecPtrOutput) ToReferenceGrantSpecPtrOutput() ReferenceGrantSpecPtrOutput {
	return o
}

func (o ReferenceGrantSpecPtrOutput) ToReferenceGrantSpecPtrOutputWithContext(ctx context.Context) ReferenceGrantSpecPtrOutput {
	return o
}

func (o ReferenceGrantSpecPtrOutput) Elem() ReferenceGrantSpecOutput {
	return o.ApplyT(func(v *ReferenceGrantSpec) ReferenceGrantSpec {
		if v != nil {
			return *v
		}
		var ret ReferenceGrantSpec
		return ret
	}).(ReferenceGrantSpecOutput)
}

// From describes the trusted namespaces and kinds that can reference the
// resources described in "To". Each entry in this list MUST be considered
// to be an additional place that references can be valid from, or to put
// this another way, entries MUST be combined using OR.
//
// Support: Core
func (o ReferenceGrantSpecPtrOutput) From() ReferenceGrantSpecFromArrayOutput {
	return o.ApplyT(func(v *ReferenceGrantSpec) []ReferenceGrantSpecFrom {
		if v == nil {
			return nil
		}
		return v.From
	}).(ReferenceGrantSpecFromArrayOutput)
}

// To describes the resources that may be referenced by the resources
// described in "From". Each entry in this list MUST be considered to be an
// additional place that references can be valid to, or to put this another
// way, entries MUST be combined using OR.
//
// Support: Core
func (o ReferenceGrantSpecPtrOutput) To() ReferenceGrantSpecToArrayOutput {
	return o.ApplyT(func(v *ReferenceGrantSpec) []ReferenceGrantSpecTo {
		if v == nil {
			return nil
		}
		return v.To
	}).(ReferenceGrantSpecToArrayOutput)
}

// ReferenceGrantFrom describes trusted namespaces and kinds.
type ReferenceGrantSpecFrom struct {
	// Group is the group of the referent.
	// When empty, the Kubernetes core API group is inferred.
	//
	// Support: Core
	Group *string `pulumi:"group"`
	// Kind is the kind of the referent. Although implementations may support
	// additional resources, the following types are part of the "Core"
	// support level for this field.
	//
	// When used to permit a SecretObjectReference:
	//
	// * Gateway
	//
	// When used to permit a BackendObjectReference:
	//
	// * GRPCRoute
	// * HTTPRoute
	// * TCPRoute
	// * TLSRoute
	// * UDPRoute
	Kind *string `pulumi:"kind"`
	// Namespace is the namespace of the referent.
	//
	// Support: Core
	Namespace *string `pulumi:"namespace"`
}

// ReferenceGrantSpecFromInput is an input type that accepts ReferenceGrantSpecFromArgs and ReferenceGrantSpecFromOutput values.
// You can construct a concrete instance of `ReferenceGrantSpecFromInput` via:
//
//	ReferenceGrantSpecFromArgs{...}
type ReferenceGrantSpecFromInput interface {
	pulumi.Input

	ToReferenceGrantSpecFromOutput() ReferenceGrantSpecFromOutput
	ToReferenceGrantSpecFromOutputWithContext(context.Context) ReferenceGrantSpecFromOutput
}

// ReferenceGrantFrom describes trusted namespaces and kinds.
type ReferenceGrantSpecFromArgs struct {
	// Group is the group of the referent.
	// When empty, the Kubernetes core API group is inferred.
	//
	// Support: Core
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind is the kind of the referent. Although implementations may support
	// additional resources, the following types are part of the "Core"
	// support level for this field.
	//
	// When used to permit a SecretObjectReference:
	//
	// * Gateway
	//
	// When used to permit a BackendObjectReference:
	//
	// * GRPCRoute
	// * HTTPRoute
	// * TCPRoute
	// * TLSRoute
	// * UDPRoute
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Namespace is the namespace of the referent.
	//
	// Support: Core
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ReferenceGrantSpecFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceGrantSpecFrom)(nil)).Elem()
}

func (i ReferenceGrantSpecFromArgs) ToReferenceGrantSpecFromOutput() ReferenceGrantSpecFromOutput {
	return i.ToReferenceGrantSpecFromOutputWithContext(context.Background())
}

func (i ReferenceGrantSpecFromArgs) ToReferenceGrantSpecFromOutputWithContext(ctx context.Context) ReferenceGrantSpecFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantSpecFromOutput)
}

// ReferenceGrantSpecFromArrayInput is an input type that accepts ReferenceGrantSpecFromArray and ReferenceGrantSpecFromArrayOutput values.
// You can construct a concrete instance of `ReferenceGrantSpecFromArrayInput` via:
//
//	ReferenceGrantSpecFromArray{ ReferenceGrantSpecFromArgs{...} }
type ReferenceGrantSpecFromArrayInput interface {
	pulumi.Input

	ToReferenceGrantSpecFromArrayOutput() ReferenceGrantSpecFromArrayOutput
	ToReferenceGrantSpecFromArrayOutputWithContext(context.Context) ReferenceGrantSpecFromArrayOutput
}

type ReferenceGrantSpecFromArray []ReferenceGrantSpecFromInput

func (ReferenceGrantSpecFromArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReferenceGrantSpecFrom)(nil)).Elem()
}

func (i ReferenceGrantSpecFromArray) ToReferenceGrantSpecFromArrayOutput() ReferenceGrantSpecFromArrayOutput {
	return i.ToReferenceGrantSpecFromArrayOutputWithContext(context.Background())
}

func (i ReferenceGrantSpecFromArray) ToReferenceGrantSpecFromArrayOutputWithContext(ctx context.Context) ReferenceGrantSpecFromArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantSpecFromArrayOutput)
}

// ReferenceGrantFrom describes trusted namespaces and kinds.
type ReferenceGrantSpecFromOutput struct{ *pulumi.OutputState }

func (ReferenceGrantSpecFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceGrantSpecFrom)(nil)).Elem()
}

func (o ReferenceGrantSpecFromOutput) ToReferenceGrantSpecFromOutput() ReferenceGrantSpecFromOutput {
	return o
}

func (o ReferenceGrantSpecFromOutput) ToReferenceGrantSpecFromOutputWithContext(ctx context.Context) ReferenceGrantSpecFromOutput {
	return o
}

// Group is the group of the referent.
// When empty, the Kubernetes core API group is inferred.
//
// Support: Core
func (o ReferenceGrantSpecFromOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceGrantSpecFrom) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind is the kind of the referent. Although implementations may support
// additional resources, the following types are part of the "Core"
// support level for this field.
//
// When used to permit a SecretObjectReference:
//
// * Gateway
//
// When used to permit a BackendObjectReference:
//
// * GRPCRoute
// * HTTPRoute
// * TCPRoute
// * TLSRoute
// * UDPRoute
func (o ReferenceGrantSpecFromOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceGrantSpecFrom) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the referent.
//
// Support: Core
func (o ReferenceGrantSpecFromOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceGrantSpecFrom) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ReferenceGrantSpecFromArrayOutput struct{ *pulumi.OutputState }

func (ReferenceGrantSpecFromArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReferenceGrantSpecFrom)(nil)).Elem()
}

func (o ReferenceGrantSpecFromArrayOutput) ToReferenceGrantSpecFromArrayOutput() ReferenceGrantSpecFromArrayOutput {
	return o
}

func (o ReferenceGrantSpecFromArrayOutput) ToReferenceGrantSpecFromArrayOutputWithContext(ctx context.Context) ReferenceGrantSpecFromArrayOutput {
	return o
}

func (o ReferenceGrantSpecFromArrayOutput) Index(i pulumi.IntInput) ReferenceGrantSpecFromOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReferenceGrantSpecFrom {
		return vs[0].([]ReferenceGrantSpecFrom)[vs[1].(int)]
	}).(ReferenceGrantSpecFromOutput)
}

// ReferenceGrantFrom describes trusted namespaces and kinds.
type ReferenceGrantSpecFromPatch struct {
	// Group is the group of the referent.
	// When empty, the Kubernetes core API group is inferred.
	//
	// Support: Core
	Group *string `pulumi:"group"`
	// Kind is the kind of the referent. Although implementations may support
	// additional resources, the following types are part of the "Core"
	// support level for this field.
	//
	// When used to permit a SecretObjectReference:
	//
	// * Gateway
	//
	// When used to permit a BackendObjectReference:
	//
	// * GRPCRoute
	// * HTTPRoute
	// * TCPRoute
	// * TLSRoute
	// * UDPRoute
	Kind *string `pulumi:"kind"`
	// Namespace is the namespace of the referent.
	//
	// Support: Core
	Namespace *string `pulumi:"namespace"`
}

// ReferenceGrantSpecFromPatchInput is an input type that accepts ReferenceGrantSpecFromPatchArgs and ReferenceGrantSpecFromPatchOutput values.
// You can construct a concrete instance of `ReferenceGrantSpecFromPatchInput` via:
//
//	ReferenceGrantSpecFromPatchArgs{...}
type ReferenceGrantSpecFromPatchInput interface {
	pulumi.Input

	ToReferenceGrantSpecFromPatchOutput() ReferenceGrantSpecFromPatchOutput
	ToReferenceGrantSpecFromPatchOutputWithContext(context.Context) ReferenceGrantSpecFromPatchOutput
}

// ReferenceGrantFrom describes trusted namespaces and kinds.
type ReferenceGrantSpecFromPatchArgs struct {
	// Group is the group of the referent.
	// When empty, the Kubernetes core API group is inferred.
	//
	// Support: Core
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind is the kind of the referent. Although implementations may support
	// additional resources, the following types are part of the "Core"
	// support level for this field.
	//
	// When used to permit a SecretObjectReference:
	//
	// * Gateway
	//
	// When used to permit a BackendObjectReference:
	//
	// * GRPCRoute
	// * HTTPRoute
	// * TCPRoute
	// * TLSRoute
	// * UDPRoute
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Namespace is the namespace of the referent.
	//
	// Support: Core
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ReferenceGrantSpecFromPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceGrantSpecFromPatch)(nil)).Elem()
}

func (i ReferenceGrantSpecFromPatchArgs) ToReferenceGrantSpecFromPatchOutput() ReferenceGrantSpecFromPatchOutput {
	return i.ToReferenceGrantSpecFromPatchOutputWithContext(context.Background())
}

func (i ReferenceGrantSpecFromPatchArgs) ToReferenceGrantSpecFromPatchOutputWithContext(ctx context.Context) ReferenceGrantSpecFromPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantSpecFromPatchOutput)
}

// ReferenceGrantSpecFromPatchArrayInput is an input type that accepts ReferenceGrantSpecFromPatchArray and ReferenceGrantSpecFromPatchArrayOutput values.
// You can construct a concrete instance of `ReferenceGrantSpecFromPatchArrayInput` via:
//
//	ReferenceGrantSpecFromPatchArray{ ReferenceGrantSpecFromPatchArgs{...} }
type ReferenceGrantSpecFromPatchArrayInput interface {
	pulumi.Input

	ToReferenceGrantSpecFromPatchArrayOutput() ReferenceGrantSpecFromPatchArrayOutput
	ToReferenceGrantSpecFromPatchArrayOutputWithContext(context.Context) ReferenceGrantSpecFromPatchArrayOutput
}

type ReferenceGrantSpecFromPatchArray []ReferenceGrantSpecFromPatchInput

func (ReferenceGrantSpecFromPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReferenceGrantSpecFromPatch)(nil)).Elem()
}

func (i ReferenceGrantSpecFromPatchArray) ToReferenceGrantSpecFromPatchArrayOutput() ReferenceGrantSpecFromPatchArrayOutput {
	return i.ToReferenceGrantSpecFromPatchArrayOutputWithContext(context.Background())
}

func (i ReferenceGrantSpecFromPatchArray) ToReferenceGrantSpecFromPatchArrayOutputWithContext(ctx context.Context) ReferenceGrantSpecFromPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantSpecFromPatchArrayOutput)
}

// ReferenceGrantFrom describes trusted namespaces and kinds.
type ReferenceGrantSpecFromPatchOutput struct{ *pulumi.OutputState }

func (ReferenceGrantSpecFromPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceGrantSpecFromPatch)(nil)).Elem()
}

func (o ReferenceGrantSpecFromPatchOutput) ToReferenceGrantSpecFromPatchOutput() ReferenceGrantSpecFromPatchOutput {
	return o
}

func (o ReferenceGrantSpecFromPatchOutput) ToReferenceGrantSpecFromPatchOutputWithContext(ctx context.Context) ReferenceGrantSpecFromPatchOutput {
	return o
}

// Group is the group of the referent.
// When empty, the Kubernetes core API group is inferred.
//
// Support: Core
func (o ReferenceGrantSpecFromPatchOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceGrantSpecFromPatch) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind is the kind of the referent. Although implementations may support
// additional resources, the following types are part of the "Core"
// support level for this field.
//
// When used to permit a SecretObjectReference:
//
// * Gateway
//
// When used to permit a BackendObjectReference:
//
// * GRPCRoute
// * HTTPRoute
// * TCPRoute
// * TLSRoute
// * UDPRoute
func (o ReferenceGrantSpecFromPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceGrantSpecFromPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the referent.
//
// Support: Core
func (o ReferenceGrantSpecFromPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceGrantSpecFromPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ReferenceGrantSpecFromPatchArrayOutput struct{ *pulumi.OutputState }

func (ReferenceGrantSpecFromPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReferenceGrantSpecFromPatch)(nil)).Elem()
}

func (o ReferenceGrantSpecFromPatchArrayOutput) ToReferenceGrantSpecFromPatchArrayOutput() ReferenceGrantSpecFromPatchArrayOutput {
	return o
}

func (o ReferenceGrantSpecFromPatchArrayOutput) ToReferenceGrantSpecFromPatchArrayOutputWithContext(ctx context.Context) ReferenceGrantSpecFromPatchArrayOutput {
	return o
}

func (o ReferenceGrantSpecFromPatchArrayOutput) Index(i pulumi.IntInput) ReferenceGrantSpecFromPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReferenceGrantSpecFromPatch {
		return vs[0].([]ReferenceGrantSpecFromPatch)[vs[1].(int)]
	}).(ReferenceGrantSpecFromPatchOutput)
}

// Spec defines the desired state of ReferenceGrant.
type ReferenceGrantSpecPatch struct {
	// From describes the trusted namespaces and kinds that can reference the
	// resources described in "To". Each entry in this list MUST be considered
	// to be an additional place that references can be valid from, or to put
	// this another way, entries MUST be combined using OR.
	//
	// Support: Core
	From []ReferenceGrantSpecFromPatch `pulumi:"from"`
	// To describes the resources that may be referenced by the resources
	// described in "From". Each entry in this list MUST be considered to be an
	// additional place that references can be valid to, or to put this another
	// way, entries MUST be combined using OR.
	//
	// Support: Core
	To []ReferenceGrantSpecToPatch `pulumi:"to"`
}

// ReferenceGrantSpecPatchInput is an input type that accepts ReferenceGrantSpecPatchArgs and ReferenceGrantSpecPatchOutput values.
// You can construct a concrete instance of `ReferenceGrantSpecPatchInput` via:
//
//	ReferenceGrantSpecPatchArgs{...}
type ReferenceGrantSpecPatchInput interface {
	pulumi.Input

	ToReferenceGrantSpecPatchOutput() ReferenceGrantSpecPatchOutput
	ToReferenceGrantSpecPatchOutputWithContext(context.Context) ReferenceGrantSpecPatchOutput
}

// Spec defines the desired state of ReferenceGrant.
type ReferenceGrantSpecPatchArgs struct {
	// From describes the trusted namespaces and kinds that can reference the
	// resources described in "To". Each entry in this list MUST be considered
	// to be an additional place that references can be valid from, or to put
	// this another way, entries MUST be combined using OR.
	//
	// Support: Core
	From ReferenceGrantSpecFromPatchArrayInput `pulumi:"from"`
	// To describes the resources that may be referenced by the resources
	// described in "From". Each entry in this list MUST be considered to be an
	// additional place that references can be valid to, or to put this another
	// way, entries MUST be combined using OR.
	//
	// Support: Core
	To ReferenceGrantSpecToPatchArrayInput `pulumi:"to"`
}

func (ReferenceGrantSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceGrantSpecPatch)(nil)).Elem()
}

func (i ReferenceGrantSpecPatchArgs) ToReferenceGrantSpecPatchOutput() ReferenceGrantSpecPatchOutput {
	return i.ToReferenceGrantSpecPatchOutputWithContext(context.Background())
}

func (i ReferenceGrantSpecPatchArgs) ToReferenceGrantSpecPatchOutputWithContext(ctx context.Context) ReferenceGrantSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantSpecPatchOutput)
}

func (i ReferenceGrantSpecPatchArgs) ToReferenceGrantSpecPatchPtrOutput() ReferenceGrantSpecPatchPtrOutput {
	return i.ToReferenceGrantSpecPatchPtrOutputWithContext(context.Background())
}

func (i ReferenceGrantSpecPatchArgs) ToReferenceGrantSpecPatchPtrOutputWithContext(ctx context.Context) ReferenceGrantSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantSpecPatchOutput).ToReferenceGrantSpecPatchPtrOutputWithContext(ctx)
}

// ReferenceGrantSpecPatchPtrInput is an input type that accepts ReferenceGrantSpecPatchArgs, ReferenceGrantSpecPatchPtr and ReferenceGrantSpecPatchPtrOutput values.
// You can construct a concrete instance of `ReferenceGrantSpecPatchPtrInput` via:
//
//	        ReferenceGrantSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ReferenceGrantSpecPatchPtrInput interface {
	pulumi.Input

	ToReferenceGrantSpecPatchPtrOutput() ReferenceGrantSpecPatchPtrOutput
	ToReferenceGrantSpecPatchPtrOutputWithContext(context.Context) ReferenceGrantSpecPatchPtrOutput
}

type referenceGrantSpecPatchPtrType ReferenceGrantSpecPatchArgs

func ReferenceGrantSpecPatchPtr(v *ReferenceGrantSpecPatchArgs) ReferenceGrantSpecPatchPtrInput {
	return (*referenceGrantSpecPatchPtrType)(v)
}

func (*referenceGrantSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceGrantSpecPatch)(nil)).Elem()
}

func (i *referenceGrantSpecPatchPtrType) ToReferenceGrantSpecPatchPtrOutput() ReferenceGrantSpecPatchPtrOutput {
	return i.ToReferenceGrantSpecPatchPtrOutputWithContext(context.Background())
}

func (i *referenceGrantSpecPatchPtrType) ToReferenceGrantSpecPatchPtrOutputWithContext(ctx context.Context) ReferenceGrantSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantSpecPatchPtrOutput)
}

// Spec defines the desired state of ReferenceGrant.
type ReferenceGrantSpecPatchOutput struct{ *pulumi.OutputState }

func (ReferenceGrantSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceGrantSpecPatch)(nil)).Elem()
}

func (o ReferenceGrantSpecPatchOutput) ToReferenceGrantSpecPatchOutput() ReferenceGrantSpecPatchOutput {
	return o
}

func (o ReferenceGrantSpecPatchOutput) ToReferenceGrantSpecPatchOutputWithContext(ctx context.Context) ReferenceGrantSpecPatchOutput {
	return o
}

func (o ReferenceGrantSpecPatchOutput) ToReferenceGrantSpecPatchPtrOutput() ReferenceGrantSpecPatchPtrOutput {
	return o.ToReferenceGrantSpecPatchPtrOutputWithContext(context.Background())
}

func (o ReferenceGrantSpecPatchOutput) ToReferenceGrantSpecPatchPtrOutputWithContext(ctx context.Context) ReferenceGrantSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReferenceGrantSpecPatch) *ReferenceGrantSpecPatch {
		return &v
	}).(ReferenceGrantSpecPatchPtrOutput)
}

// From describes the trusted namespaces and kinds that can reference the
// resources described in "To". Each entry in this list MUST be considered
// to be an additional place that references can be valid from, or to put
// this another way, entries MUST be combined using OR.
//
// Support: Core
func (o ReferenceGrantSpecPatchOutput) From() ReferenceGrantSpecFromPatchArrayOutput {
	return o.ApplyT(func(v ReferenceGrantSpecPatch) []ReferenceGrantSpecFromPatch { return v.From }).(ReferenceGrantSpecFromPatchArrayOutput)
}

// To describes the resources that may be referenced by the resources
// described in "From". Each entry in this list MUST be considered to be an
// additional place that references can be valid to, or to put this another
// way, entries MUST be combined using OR.
//
// Support: Core
func (o ReferenceGrantSpecPatchOutput) To() ReferenceGrantSpecToPatchArrayOutput {
	return o.ApplyT(func(v ReferenceGrantSpecPatch) []ReferenceGrantSpecToPatch { return v.To }).(ReferenceGrantSpecToPatchArrayOutput)
}

type ReferenceGrantSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ReferenceGrantSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceGrantSpecPatch)(nil)).Elem()
}

func (o ReferenceGrantSpecPatchPtrOutput) ToReferenceGrantSpecPatchPtrOutput() ReferenceGrantSpecPatchPtrOutput {
	return o
}

func (o ReferenceGrantSpecPatchPtrOutput) ToReferenceGrantSpecPatchPtrOutputWithContext(ctx context.Context) ReferenceGrantSpecPatchPtrOutput {
	return o
}

func (o ReferenceGrantSpecPatchPtrOutput) Elem() ReferenceGrantSpecPatchOutput {
	return o.ApplyT(func(v *ReferenceGrantSpecPatch) ReferenceGrantSpecPatch {
		if v != nil {
			return *v
		}
		var ret ReferenceGrantSpecPatch
		return ret
	}).(ReferenceGrantSpecPatchOutput)
}

// From describes the trusted namespaces and kinds that can reference the
// resources described in "To". Each entry in this list MUST be considered
// to be an additional place that references can be valid from, or to put
// this another way, entries MUST be combined using OR.
//
// Support: Core
func (o ReferenceGrantSpecPatchPtrOutput) From() ReferenceGrantSpecFromPatchArrayOutput {
	return o.ApplyT(func(v *ReferenceGrantSpecPatch) []ReferenceGrantSpecFromPatch {
		if v == nil {
			return nil
		}
		return v.From
	}).(ReferenceGrantSpecFromPatchArrayOutput)
}

// To describes the resources that may be referenced by the resources
// described in "From". Each entry in this list MUST be considered to be an
// additional place that references can be valid to, or to put this another
// way, entries MUST be combined using OR.
//
// Support: Core
func (o ReferenceGrantSpecPatchPtrOutput) To() ReferenceGrantSpecToPatchArrayOutput {
	return o.ApplyT(func(v *ReferenceGrantSpecPatch) []ReferenceGrantSpecToPatch {
		if v == nil {
			return nil
		}
		return v.To
	}).(ReferenceGrantSpecToPatchArrayOutput)
}

// ReferenceGrantTo describes what Kinds are allowed as targets of the
// references.
type ReferenceGrantSpecTo struct {
	// Group is the group of the referent.
	// When empty, the Kubernetes core API group is inferred.
	//
	// Support: Core
	Group *string `pulumi:"group"`
	// Kind is the kind of the referent. Although implementations may support
	// additional resources, the following types are part of the "Core"
	// support level for this field:
	//
	// * Secret when used to permit a SecretObjectReference
	// * Service when used to permit a BackendObjectReference
	Kind *string `pulumi:"kind"`
	// Name is the name of the referent. When unspecified, this policy
	// refers to all resources of the specified Group and Kind in the local
	// namespace.
	Name *string `pulumi:"name"`
}

// ReferenceGrantSpecToInput is an input type that accepts ReferenceGrantSpecToArgs and ReferenceGrantSpecToOutput values.
// You can construct a concrete instance of `ReferenceGrantSpecToInput` via:
//
//	ReferenceGrantSpecToArgs{...}
type ReferenceGrantSpecToInput interface {
	pulumi.Input

	ToReferenceGrantSpecToOutput() ReferenceGrantSpecToOutput
	ToReferenceGrantSpecToOutputWithContext(context.Context) ReferenceGrantSpecToOutput
}

// ReferenceGrantTo describes what Kinds are allowed as targets of the
// references.
type ReferenceGrantSpecToArgs struct {
	// Group is the group of the referent.
	// When empty, the Kubernetes core API group is inferred.
	//
	// Support: Core
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind is the kind of the referent. Although implementations may support
	// additional resources, the following types are part of the "Core"
	// support level for this field:
	//
	// * Secret when used to permit a SecretObjectReference
	// * Service when used to permit a BackendObjectReference
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of the referent. When unspecified, this policy
	// refers to all resources of the specified Group and Kind in the local
	// namespace.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ReferenceGrantSpecToArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceGrantSpecTo)(nil)).Elem()
}

func (i ReferenceGrantSpecToArgs) ToReferenceGrantSpecToOutput() ReferenceGrantSpecToOutput {
	return i.ToReferenceGrantSpecToOutputWithContext(context.Background())
}

func (i ReferenceGrantSpecToArgs) ToReferenceGrantSpecToOutputWithContext(ctx context.Context) ReferenceGrantSpecToOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantSpecToOutput)
}

// ReferenceGrantSpecToArrayInput is an input type that accepts ReferenceGrantSpecToArray and ReferenceGrantSpecToArrayOutput values.
// You can construct a concrete instance of `ReferenceGrantSpecToArrayInput` via:
//
//	ReferenceGrantSpecToArray{ ReferenceGrantSpecToArgs{...} }
type ReferenceGrantSpecToArrayInput interface {
	pulumi.Input

	ToReferenceGrantSpecToArrayOutput() ReferenceGrantSpecToArrayOutput
	ToReferenceGrantSpecToArrayOutputWithContext(context.Context) ReferenceGrantSpecToArrayOutput
}

type ReferenceGrantSpecToArray []ReferenceGrantSpecToInput

func (ReferenceGrantSpecToArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReferenceGrantSpecTo)(nil)).Elem()
}

func (i ReferenceGrantSpecToArray) ToReferenceGrantSpecToArrayOutput() ReferenceGrantSpecToArrayOutput {
	return i.ToReferenceGrantSpecToArrayOutputWithContext(context.Background())
}

func (i ReferenceGrantSpecToArray) ToReferenceGrantSpecToArrayOutputWithContext(ctx context.Context) ReferenceGrantSpecToArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantSpecToArrayOutput)
}

// ReferenceGrantTo describes what Kinds are allowed as targets of the
// references.
type ReferenceGrantSpecToOutput struct{ *pulumi.OutputState }

func (ReferenceGrantSpecToOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceGrantSpecTo)(nil)).Elem()
}

func (o ReferenceGrantSpecToOutput) ToReferenceGrantSpecToOutput() ReferenceGrantSpecToOutput {
	return o
}

func (o ReferenceGrantSpecToOutput) ToReferenceGrantSpecToOutputWithContext(ctx context.Context) ReferenceGrantSpecToOutput {
	return o
}

// Group is the group of the referent.
// When empty, the Kubernetes core API group is inferred.
//
// Support: Core
func (o ReferenceGrantSpecToOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceGrantSpecTo) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind is the kind of the referent. Although implementations may support
// additional resources, the following types are part of the "Core"
// support level for this field:
//
// * Secret when used to permit a SecretObjectReference
// * Service when used to permit a BackendObjectReference
func (o ReferenceGrantSpecToOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceGrantSpecTo) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of the referent. When unspecified, this policy
// refers to all resources of the specified Group and Kind in the local
// namespace.
func (o ReferenceGrantSpecToOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceGrantSpecTo) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ReferenceGrantSpecToArrayOutput struct{ *pulumi.OutputState }

func (ReferenceGrantSpecToArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReferenceGrantSpecTo)(nil)).Elem()
}

func (o ReferenceGrantSpecToArrayOutput) ToReferenceGrantSpecToArrayOutput() ReferenceGrantSpecToArrayOutput {
	return o
}

func (o ReferenceGrantSpecToArrayOutput) ToReferenceGrantSpecToArrayOutputWithContext(ctx context.Context) ReferenceGrantSpecToArrayOutput {
	return o
}

func (o ReferenceGrantSpecToArrayOutput) Index(i pulumi.IntInput) ReferenceGrantSpecToOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReferenceGrantSpecTo {
		return vs[0].([]ReferenceGrantSpecTo)[vs[1].(int)]
	}).(ReferenceGrantSpecToOutput)
}

// ReferenceGrantTo describes what Kinds are allowed as targets of the
// references.
type ReferenceGrantSpecToPatch struct {
	// Group is the group of the referent.
	// When empty, the Kubernetes core API group is inferred.
	//
	// Support: Core
	Group *string `pulumi:"group"`
	// Kind is the kind of the referent. Although implementations may support
	// additional resources, the following types are part of the "Core"
	// support level for this field:
	//
	// * Secret when used to permit a SecretObjectReference
	// * Service when used to permit a BackendObjectReference
	Kind *string `pulumi:"kind"`
	// Name is the name of the referent. When unspecified, this policy
	// refers to all resources of the specified Group and Kind in the local
	// namespace.
	Name *string `pulumi:"name"`
}

// ReferenceGrantSpecToPatchInput is an input type that accepts ReferenceGrantSpecToPatchArgs and ReferenceGrantSpecToPatchOutput values.
// You can construct a concrete instance of `ReferenceGrantSpecToPatchInput` via:
//
//	ReferenceGrantSpecToPatchArgs{...}
type ReferenceGrantSpecToPatchInput interface {
	pulumi.Input

	ToReferenceGrantSpecToPatchOutput() ReferenceGrantSpecToPatchOutput
	ToReferenceGrantSpecToPatchOutputWithContext(context.Context) ReferenceGrantSpecToPatchOutput
}

// ReferenceGrantTo describes what Kinds are allowed as targets of the
// references.
type ReferenceGrantSpecToPatchArgs struct {
	// Group is the group of the referent.
	// When empty, the Kubernetes core API group is inferred.
	//
	// Support: Core
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind is the kind of the referent. Although implementations may support
	// additional resources, the following types are part of the "Core"
	// support level for this field:
	//
	// * Secret when used to permit a SecretObjectReference
	// * Service when used to permit a BackendObjectReference
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of the referent. When unspecified, this policy
	// refers to all resources of the specified Group and Kind in the local
	// namespace.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ReferenceGrantSpecToPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceGrantSpecToPatch)(nil)).Elem()
}

func (i ReferenceGrantSpecToPatchArgs) ToReferenceGrantSpecToPatchOutput() ReferenceGrantSpecToPatchOutput {
	return i.ToReferenceGrantSpecToPatchOutputWithContext(context.Background())
}

func (i ReferenceGrantSpecToPatchArgs) ToReferenceGrantSpecToPatchOutputWithContext(ctx context.Context) ReferenceGrantSpecToPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantSpecToPatchOutput)
}

// ReferenceGrantSpecToPatchArrayInput is an input type that accepts ReferenceGrantSpecToPatchArray and ReferenceGrantSpecToPatchArrayOutput values.
// You can construct a concrete instance of `ReferenceGrantSpecToPatchArrayInput` via:
//
//	ReferenceGrantSpecToPatchArray{ ReferenceGrantSpecToPatchArgs{...} }
type ReferenceGrantSpecToPatchArrayInput interface {
	pulumi.Input

	ToReferenceGrantSpecToPatchArrayOutput() ReferenceGrantSpecToPatchArrayOutput
	ToReferenceGrantSpecToPatchArrayOutputWithContext(context.Context) ReferenceGrantSpecToPatchArrayOutput
}

type ReferenceGrantSpecToPatchArray []ReferenceGrantSpecToPatchInput

func (ReferenceGrantSpecToPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReferenceGrantSpecToPatch)(nil)).Elem()
}

func (i ReferenceGrantSpecToPatchArray) ToReferenceGrantSpecToPatchArrayOutput() ReferenceGrantSpecToPatchArrayOutput {
	return i.ToReferenceGrantSpecToPatchArrayOutputWithContext(context.Background())
}

func (i ReferenceGrantSpecToPatchArray) ToReferenceGrantSpecToPatchArrayOutputWithContext(ctx context.Context) ReferenceGrantSpecToPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantSpecToPatchArrayOutput)
}

// ReferenceGrantTo describes what Kinds are allowed as targets of the
// references.
type ReferenceGrantSpecToPatchOutput struct{ *pulumi.OutputState }

func (ReferenceGrantSpecToPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceGrantSpecToPatch)(nil)).Elem()
}

func (o ReferenceGrantSpecToPatchOutput) ToReferenceGrantSpecToPatchOutput() ReferenceGrantSpecToPatchOutput {
	return o
}

func (o ReferenceGrantSpecToPatchOutput) ToReferenceGrantSpecToPatchOutputWithContext(ctx context.Context) ReferenceGrantSpecToPatchOutput {
	return o
}

// Group is the group of the referent.
// When empty, the Kubernetes core API group is inferred.
//
// Support: Core
func (o ReferenceGrantSpecToPatchOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceGrantSpecToPatch) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind is the kind of the referent. Although implementations may support
// additional resources, the following types are part of the "Core"
// support level for this field:
//
// * Secret when used to permit a SecretObjectReference
// * Service when used to permit a BackendObjectReference
func (o ReferenceGrantSpecToPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceGrantSpecToPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of the referent. When unspecified, this policy
// refers to all resources of the specified Group and Kind in the local
// namespace.
func (o ReferenceGrantSpecToPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceGrantSpecToPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ReferenceGrantSpecToPatchArrayOutput struct{ *pulumi.OutputState }

func (ReferenceGrantSpecToPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReferenceGrantSpecToPatch)(nil)).Elem()
}

func (o ReferenceGrantSpecToPatchArrayOutput) ToReferenceGrantSpecToPatchArrayOutput() ReferenceGrantSpecToPatchArrayOutput {
	return o
}

func (o ReferenceGrantSpecToPatchArrayOutput) ToReferenceGrantSpecToPatchArrayOutputWithContext(ctx context.Context) ReferenceGrantSpecToPatchArrayOutput {
	return o
}

func (o ReferenceGrantSpecToPatchArrayOutput) Index(i pulumi.IntInput) ReferenceGrantSpecToPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReferenceGrantSpecToPatch {
		return vs[0].([]ReferenceGrantSpecToPatch)[vs[1].(int)]
	}).(ReferenceGrantSpecToPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteTypeInput)(nil)).Elem(), GRPCRouteTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteTypeArrayInput)(nil)).Elem(), GRPCRouteTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteListTypeInput)(nil)).Elem(), GRPCRouteListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRoutePatchTypeInput)(nil)).Elem(), GRPCRoutePatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecInput)(nil)).Elem(), GRPCRouteSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecPtrInput)(nil)).Elem(), GRPCRouteSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecParentRefsInput)(nil)).Elem(), GRPCRouteSpecParentRefsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecParentRefsArrayInput)(nil)).Elem(), GRPCRouteSpecParentRefsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecParentRefsPatchInput)(nil)).Elem(), GRPCRouteSpecParentRefsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecParentRefsPatchArrayInput)(nil)).Elem(), GRPCRouteSpecParentRefsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecPatchInput)(nil)).Elem(), GRPCRouteSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecPatchPtrInput)(nil)).Elem(), GRPCRouteSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesInput)(nil)).Elem(), GRPCRouteSpecRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesArrayInput)(nil)).Elem(), GRPCRouteSpecRulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsArrayInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersArrayInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersExtensionRefInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersPatchInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersPatchArrayInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArrayInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArrayInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArrayInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArrayInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsPatchInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsPatchArrayInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersArrayInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersExtensionRefInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersExtensionRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersExtensionRefPtrInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersExtensionRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersExtensionRefPatchInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersExtensionRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersExtensionRefPatchPtrInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersExtensionRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersPatchInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersPatchArrayInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierAddInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArrayInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierSetInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArrayInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestMirrorInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersRequestMirrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestMirrorPtrInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersRequestMirrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestMirrorBackendRefInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestMirrorPatchInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersRequestMirrorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestMirrorPatchPtrInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersRequestMirrorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierAddInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArrayInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierSetInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArrayInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesMatchesInput)(nil)).Elem(), GRPCRouteSpecRulesMatchesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesMatchesArrayInput)(nil)).Elem(), GRPCRouteSpecRulesMatchesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesMatchesHeadersInput)(nil)).Elem(), GRPCRouteSpecRulesMatchesHeadersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesMatchesHeadersArrayInput)(nil)).Elem(), GRPCRouteSpecRulesMatchesHeadersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesMatchesHeadersPatchInput)(nil)).Elem(), GRPCRouteSpecRulesMatchesHeadersPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesMatchesHeadersPatchArrayInput)(nil)).Elem(), GRPCRouteSpecRulesMatchesHeadersPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesMatchesMethodInput)(nil)).Elem(), GRPCRouteSpecRulesMatchesMethodArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesMatchesMethodPtrInput)(nil)).Elem(), GRPCRouteSpecRulesMatchesMethodArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesMatchesMethodPatchInput)(nil)).Elem(), GRPCRouteSpecRulesMatchesMethodPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesMatchesMethodPatchPtrInput)(nil)).Elem(), GRPCRouteSpecRulesMatchesMethodPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesMatchesPatchInput)(nil)).Elem(), GRPCRouteSpecRulesMatchesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesMatchesPatchArrayInput)(nil)).Elem(), GRPCRouteSpecRulesMatchesPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesPatchInput)(nil)).Elem(), GRPCRouteSpecRulesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesPatchArrayInput)(nil)).Elem(), GRPCRouteSpecRulesPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteStatusInput)(nil)).Elem(), GRPCRouteStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteStatusPtrInput)(nil)).Elem(), GRPCRouteStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteStatusParentsInput)(nil)).Elem(), GRPCRouteStatusParentsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteStatusParentsArrayInput)(nil)).Elem(), GRPCRouteStatusParentsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteStatusParentsConditionsInput)(nil)).Elem(), GRPCRouteStatusParentsConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteStatusParentsConditionsArrayInput)(nil)).Elem(), GRPCRouteStatusParentsConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteStatusParentsConditionsPatchInput)(nil)).Elem(), GRPCRouteStatusParentsConditionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteStatusParentsConditionsPatchArrayInput)(nil)).Elem(), GRPCRouteStatusParentsConditionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteStatusParentsParentRefInput)(nil)).Elem(), GRPCRouteStatusParentsParentRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteStatusParentsParentRefPtrInput)(nil)).Elem(), GRPCRouteStatusParentsParentRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteStatusParentsParentRefPatchInput)(nil)).Elem(), GRPCRouteStatusParentsParentRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteStatusParentsParentRefPatchPtrInput)(nil)).Elem(), GRPCRouteStatusParentsParentRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteStatusParentsPatchInput)(nil)).Elem(), GRPCRouteStatusParentsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteStatusParentsPatchArrayInput)(nil)).Elem(), GRPCRouteStatusParentsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteStatusPatchInput)(nil)).Elem(), GRPCRouteStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteStatusPatchPtrInput)(nil)).Elem(), GRPCRouteStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantTypeInput)(nil)).Elem(), ReferenceGrantTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantTypeArrayInput)(nil)).Elem(), ReferenceGrantTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantListTypeInput)(nil)).Elem(), ReferenceGrantListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantPatchTypeInput)(nil)).Elem(), ReferenceGrantPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantSpecInput)(nil)).Elem(), ReferenceGrantSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantSpecPtrInput)(nil)).Elem(), ReferenceGrantSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantSpecFromInput)(nil)).Elem(), ReferenceGrantSpecFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantSpecFromArrayInput)(nil)).Elem(), ReferenceGrantSpecFromArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantSpecFromPatchInput)(nil)).Elem(), ReferenceGrantSpecFromPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantSpecFromPatchArrayInput)(nil)).Elem(), ReferenceGrantSpecFromPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantSpecPatchInput)(nil)).Elem(), ReferenceGrantSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantSpecPatchPtrInput)(nil)).Elem(), ReferenceGrantSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantSpecToInput)(nil)).Elem(), ReferenceGrantSpecToArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantSpecToArrayInput)(nil)).Elem(), ReferenceGrantSpecToArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantSpecToPatchInput)(nil)).Elem(), ReferenceGrantSpecToPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantSpecToPatchArrayInput)(nil)).Elem(), ReferenceGrantSpecToPatchArray{})
	pulumi.RegisterOutputType(GRPCRouteTypeOutput{})
	pulumi.RegisterOutputType(GRPCRouteTypeArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteListTypeOutput{})
	pulumi.RegisterOutputType(GRPCRoutePatchTypeOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecParentRefsOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecParentRefsArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecParentRefsPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecParentRefsPatchArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPatchPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersPatchArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddPatchArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPatchPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetPatchArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPatchPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPatchPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddPatchArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPatchPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetPatchArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsPatchArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersExtensionRefOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersExtensionRefPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersExtensionRefPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersExtensionRefPatchPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersPatchArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersRequestHeaderModifierAddPatchArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersRequestHeaderModifierPatchPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersRequestHeaderModifierSetPatchArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersRequestMirrorOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPatchPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersRequestMirrorPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersRequestMirrorPatchPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersResponseHeaderModifierAddPatchArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersResponseHeaderModifierPatchPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersResponseHeaderModifierSetPatchArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesMatchesOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesMatchesArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesMatchesHeadersOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesMatchesHeadersArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesMatchesHeadersPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesMatchesHeadersPatchArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesMatchesMethodOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesMatchesMethodPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesMatchesMethodPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesMatchesMethodPatchPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesMatchesPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesMatchesPatchArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesPatchArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteStatusOutput{})
	pulumi.RegisterOutputType(GRPCRouteStatusPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteStatusParentsOutput{})
	pulumi.RegisterOutputType(GRPCRouteStatusParentsArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteStatusParentsConditionsOutput{})
	pulumi.RegisterOutputType(GRPCRouteStatusParentsConditionsArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteStatusParentsConditionsPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteStatusParentsConditionsPatchArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteStatusParentsParentRefOutput{})
	pulumi.RegisterOutputType(GRPCRouteStatusParentsParentRefPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteStatusParentsParentRefPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteStatusParentsParentRefPatchPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteStatusParentsPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteStatusParentsPatchArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteStatusPatchOutput{})
	pulumi.RegisterOutputType(GRPCRouteStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(ReferenceGrantTypeOutput{})
	pulumi.RegisterOutputType(ReferenceGrantTypeArrayOutput{})
	pulumi.RegisterOutputType(ReferenceGrantListTypeOutput{})
	pulumi.RegisterOutputType(ReferenceGrantPatchTypeOutput{})
	pulumi.RegisterOutputType(ReferenceGrantSpecOutput{})
	pulumi.RegisterOutputType(ReferenceGrantSpecPtrOutput{})
	pulumi.RegisterOutputType(ReferenceGrantSpecFromOutput{})
	pulumi.RegisterOutputType(ReferenceGrantSpecFromArrayOutput{})
	pulumi.RegisterOutputType(ReferenceGrantSpecFromPatchOutput{})
	pulumi.RegisterOutputType(ReferenceGrantSpecFromPatchArrayOutput{})
	pulumi.RegisterOutputType(ReferenceGrantSpecPatchOutput{})
	pulumi.RegisterOutputType(ReferenceGrantSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ReferenceGrantSpecToOutput{})
	pulumi.RegisterOutputType(ReferenceGrantSpecToArrayOutput{})
	pulumi.RegisterOutputType(ReferenceGrantSpecToPatchOutput{})
	pulumi.RegisterOutputType(ReferenceGrantSpecToPatchArrayOutput{})
}
