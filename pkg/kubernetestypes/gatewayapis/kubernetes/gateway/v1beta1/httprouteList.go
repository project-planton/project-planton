// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// HTTPRouteList is a list of HTTPRoute
type HTTPRouteList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of httproutes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items HTTPRouteTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewHTTPRouteList registers a new resource with the given unique name, arguments, and options.
func NewHTTPRouteList(ctx *pulumi.Context,
	name string, args *HTTPRouteListArgs, opts ...pulumi.ResourceOption) (*HTTPRouteList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("gateway.networking.k8s.io/v1beta1")
	args.Kind = pulumi.StringPtr("HTTPRouteList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource HTTPRouteList
	err := ctx.RegisterResource("kubernetes:gateway.networking.k8s.io/v1beta1:HTTPRouteList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHTTPRouteList gets an existing HTTPRouteList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHTTPRouteList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HTTPRouteListState, opts ...pulumi.ResourceOption) (*HTTPRouteList, error) {
	var resource HTTPRouteList
	err := ctx.ReadResource("kubernetes:gateway.networking.k8s.io/v1beta1:HTTPRouteList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HTTPRouteList resources.
type httprouteListState struct {
}

type HTTPRouteListState struct {
}

func (HTTPRouteListState) ElementType() reflect.Type {
	return reflect.TypeOf((*httprouteListState)(nil)).Elem()
}

type httprouteListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of httproutes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []HTTPRouteType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a HTTPRouteList resource.
type HTTPRouteListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of httproutes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items HTTPRouteTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (HTTPRouteListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*httprouteListArgs)(nil)).Elem()
}

type HTTPRouteListInput interface {
	pulumi.Input

	ToHTTPRouteListOutput() HTTPRouteListOutput
	ToHTTPRouteListOutputWithContext(ctx context.Context) HTTPRouteListOutput
}

func (*HTTPRouteList) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTPRouteList)(nil)).Elem()
}

func (i *HTTPRouteList) ToHTTPRouteListOutput() HTTPRouteListOutput {
	return i.ToHTTPRouteListOutputWithContext(context.Background())
}

func (i *HTTPRouteList) ToHTTPRouteListOutputWithContext(ctx context.Context) HTTPRouteListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPRouteListOutput)
}

// HTTPRouteListArrayInput is an input type that accepts HTTPRouteListArray and HTTPRouteListArrayOutput values.
// You can construct a concrete instance of `HTTPRouteListArrayInput` via:
//
//	HTTPRouteListArray{ HTTPRouteListArgs{...} }
type HTTPRouteListArrayInput interface {
	pulumi.Input

	ToHTTPRouteListArrayOutput() HTTPRouteListArrayOutput
	ToHTTPRouteListArrayOutputWithContext(context.Context) HTTPRouteListArrayOutput
}

type HTTPRouteListArray []HTTPRouteListInput

func (HTTPRouteListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HTTPRouteList)(nil)).Elem()
}

func (i HTTPRouteListArray) ToHTTPRouteListArrayOutput() HTTPRouteListArrayOutput {
	return i.ToHTTPRouteListArrayOutputWithContext(context.Background())
}

func (i HTTPRouteListArray) ToHTTPRouteListArrayOutputWithContext(ctx context.Context) HTTPRouteListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPRouteListArrayOutput)
}

// HTTPRouteListMapInput is an input type that accepts HTTPRouteListMap and HTTPRouteListMapOutput values.
// You can construct a concrete instance of `HTTPRouteListMapInput` via:
//
//	HTTPRouteListMap{ "key": HTTPRouteListArgs{...} }
type HTTPRouteListMapInput interface {
	pulumi.Input

	ToHTTPRouteListMapOutput() HTTPRouteListMapOutput
	ToHTTPRouteListMapOutputWithContext(context.Context) HTTPRouteListMapOutput
}

type HTTPRouteListMap map[string]HTTPRouteListInput

func (HTTPRouteListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HTTPRouteList)(nil)).Elem()
}

func (i HTTPRouteListMap) ToHTTPRouteListMapOutput() HTTPRouteListMapOutput {
	return i.ToHTTPRouteListMapOutputWithContext(context.Background())
}

func (i HTTPRouteListMap) ToHTTPRouteListMapOutputWithContext(ctx context.Context) HTTPRouteListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPRouteListMapOutput)
}

type HTTPRouteListOutput struct{ *pulumi.OutputState }

func (HTTPRouteListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTPRouteList)(nil)).Elem()
}

func (o HTTPRouteListOutput) ToHTTPRouteListOutput() HTTPRouteListOutput {
	return o
}

func (o HTTPRouteListOutput) ToHTTPRouteListOutputWithContext(ctx context.Context) HTTPRouteListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HTTPRouteListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *HTTPRouteList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of httproutes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o HTTPRouteListOutput) Items() HTTPRouteTypeArrayOutput {
	return o.ApplyT(func(v *HTTPRouteList) HTTPRouteTypeArrayOutput { return v.Items }).(HTTPRouteTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HTTPRouteListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *HTTPRouteList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HTTPRouteListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *HTTPRouteList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type HTTPRouteListArrayOutput struct{ *pulumi.OutputState }

func (HTTPRouteListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HTTPRouteList)(nil)).Elem()
}

func (o HTTPRouteListArrayOutput) ToHTTPRouteListArrayOutput() HTTPRouteListArrayOutput {
	return o
}

func (o HTTPRouteListArrayOutput) ToHTTPRouteListArrayOutputWithContext(ctx context.Context) HTTPRouteListArrayOutput {
	return o
}

func (o HTTPRouteListArrayOutput) Index(i pulumi.IntInput) HTTPRouteListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HTTPRouteList {
		return vs[0].([]*HTTPRouteList)[vs[1].(int)]
	}).(HTTPRouteListOutput)
}

type HTTPRouteListMapOutput struct{ *pulumi.OutputState }

func (HTTPRouteListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HTTPRouteList)(nil)).Elem()
}

func (o HTTPRouteListMapOutput) ToHTTPRouteListMapOutput() HTTPRouteListMapOutput {
	return o
}

func (o HTTPRouteListMapOutput) ToHTTPRouteListMapOutputWithContext(ctx context.Context) HTTPRouteListMapOutput {
	return o
}

func (o HTTPRouteListMapOutput) MapIndex(k pulumi.StringInput) HTTPRouteListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HTTPRouteList {
		return vs[0].(map[string]*HTTPRouteList)[vs[1].(string)]
	}).(HTTPRouteListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPRouteListInput)(nil)).Elem(), &HTTPRouteList{})
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPRouteListArrayInput)(nil)).Elem(), HTTPRouteListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPRouteListMapInput)(nil)).Elem(), HTTPRouteListMap{})
	pulumi.RegisterOutputType(HTTPRouteListOutput{})
	pulumi.RegisterOutputType(HTTPRouteListArrayOutput{})
	pulumi.RegisterOutputType(HTTPRouteListMapOutput{})
}
