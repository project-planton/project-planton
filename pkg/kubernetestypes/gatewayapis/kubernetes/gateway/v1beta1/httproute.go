// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// HTTPRoute provides a way to route HTTP requests. This includes the capability
// to match requests by hostname, path, header, or query param. Filters can be
// used to specify additional processing steps. Backends specify where matching
// requests should be routed.
type HTTPRoute struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput  `pulumi:"metadata"`
	Spec     HTTPRouteSpecOutput      `pulumi:"spec"`
	Status   HTTPRouteStatusPtrOutput `pulumi:"status"`
}

// NewHTTPRoute registers a new resource with the given unique name, arguments, and options.
func NewHTTPRoute(ctx *pulumi.Context,
	name string, args *HTTPRouteArgs, opts ...pulumi.ResourceOption) (*HTTPRoute, error) {
	if args == nil {
		args = &HTTPRouteArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("gateway.networking.k8s.io/v1beta1")
	args.Kind = pulumi.StringPtr("HTTPRoute")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:gateway.networking.k8s.io/v1:HTTPRoute"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource HTTPRoute
	err := ctx.RegisterResource("kubernetes:gateway.networking.k8s.io/v1beta1:HTTPRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHTTPRoute gets an existing HTTPRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHTTPRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HTTPRouteState, opts ...pulumi.ResourceOption) (*HTTPRoute, error) {
	var resource HTTPRoute
	err := ctx.ReadResource("kubernetes:gateway.networking.k8s.io/v1beta1:HTTPRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HTTPRoute resources.
type httprouteState struct {
}

type HTTPRouteState struct {
}

func (HTTPRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*httprouteState)(nil)).Elem()
}

type httprouteArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *HTTPRouteSpec     `pulumi:"spec"`
}

// The set of arguments for constructing a HTTPRoute resource.
type HTTPRouteArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     HTTPRouteSpecPtrInput
}

func (HTTPRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*httprouteArgs)(nil)).Elem()
}

type HTTPRouteInput interface {
	pulumi.Input

	ToHTTPRouteOutput() HTTPRouteOutput
	ToHTTPRouteOutputWithContext(ctx context.Context) HTTPRouteOutput
}

func (*HTTPRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTPRoute)(nil)).Elem()
}

func (i *HTTPRoute) ToHTTPRouteOutput() HTTPRouteOutput {
	return i.ToHTTPRouteOutputWithContext(context.Background())
}

func (i *HTTPRoute) ToHTTPRouteOutputWithContext(ctx context.Context) HTTPRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPRouteOutput)
}

// HTTPRouteArrayInput is an input type that accepts HTTPRouteArray and HTTPRouteArrayOutput values.
// You can construct a concrete instance of `HTTPRouteArrayInput` via:
//
//	HTTPRouteArray{ HTTPRouteArgs{...} }
type HTTPRouteArrayInput interface {
	pulumi.Input

	ToHTTPRouteArrayOutput() HTTPRouteArrayOutput
	ToHTTPRouteArrayOutputWithContext(context.Context) HTTPRouteArrayOutput
}

type HTTPRouteArray []HTTPRouteInput

func (HTTPRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HTTPRoute)(nil)).Elem()
}

func (i HTTPRouteArray) ToHTTPRouteArrayOutput() HTTPRouteArrayOutput {
	return i.ToHTTPRouteArrayOutputWithContext(context.Background())
}

func (i HTTPRouteArray) ToHTTPRouteArrayOutputWithContext(ctx context.Context) HTTPRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPRouteArrayOutput)
}

// HTTPRouteMapInput is an input type that accepts HTTPRouteMap and HTTPRouteMapOutput values.
// You can construct a concrete instance of `HTTPRouteMapInput` via:
//
//	HTTPRouteMap{ "key": HTTPRouteArgs{...} }
type HTTPRouteMapInput interface {
	pulumi.Input

	ToHTTPRouteMapOutput() HTTPRouteMapOutput
	ToHTTPRouteMapOutputWithContext(context.Context) HTTPRouteMapOutput
}

type HTTPRouteMap map[string]HTTPRouteInput

func (HTTPRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HTTPRoute)(nil)).Elem()
}

func (i HTTPRouteMap) ToHTTPRouteMapOutput() HTTPRouteMapOutput {
	return i.ToHTTPRouteMapOutputWithContext(context.Background())
}

func (i HTTPRouteMap) ToHTTPRouteMapOutputWithContext(ctx context.Context) HTTPRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPRouteMapOutput)
}

type HTTPRouteOutput struct{ *pulumi.OutputState }

func (HTTPRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTPRoute)(nil)).Elem()
}

func (o HTTPRouteOutput) ToHTTPRouteOutput() HTTPRouteOutput {
	return o
}

func (o HTTPRouteOutput) ToHTTPRouteOutputWithContext(ctx context.Context) HTTPRouteOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o HTTPRouteOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *HTTPRoute) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o HTTPRouteOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *HTTPRoute) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o HTTPRouteOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *HTTPRoute) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o HTTPRouteOutput) Spec() HTTPRouteSpecOutput {
	return o.ApplyT(func(v *HTTPRoute) HTTPRouteSpecOutput { return v.Spec }).(HTTPRouteSpecOutput)
}

func (o HTTPRouteOutput) Status() HTTPRouteStatusPtrOutput {
	return o.ApplyT(func(v *HTTPRoute) HTTPRouteStatusPtrOutput { return v.Status }).(HTTPRouteStatusPtrOutput)
}

type HTTPRouteArrayOutput struct{ *pulumi.OutputState }

func (HTTPRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HTTPRoute)(nil)).Elem()
}

func (o HTTPRouteArrayOutput) ToHTTPRouteArrayOutput() HTTPRouteArrayOutput {
	return o
}

func (o HTTPRouteArrayOutput) ToHTTPRouteArrayOutputWithContext(ctx context.Context) HTTPRouteArrayOutput {
	return o
}

func (o HTTPRouteArrayOutput) Index(i pulumi.IntInput) HTTPRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HTTPRoute {
		return vs[0].([]*HTTPRoute)[vs[1].(int)]
	}).(HTTPRouteOutput)
}

type HTTPRouteMapOutput struct{ *pulumi.OutputState }

func (HTTPRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HTTPRoute)(nil)).Elem()
}

func (o HTTPRouteMapOutput) ToHTTPRouteMapOutput() HTTPRouteMapOutput {
	return o
}

func (o HTTPRouteMapOutput) ToHTTPRouteMapOutputWithContext(ctx context.Context) HTTPRouteMapOutput {
	return o
}

func (o HTTPRouteMapOutput) MapIndex(k pulumi.StringInput) HTTPRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HTTPRoute {
		return vs[0].(map[string]*HTTPRoute)[vs[1].(string)]
	}).(HTTPRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPRouteInput)(nil)).Elem(), &HTTPRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPRouteArrayInput)(nil)).Elem(), HTTPRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPRouteMapInput)(nil)).Elem(), HTTPRouteMap{})
	pulumi.RegisterOutputType(HTTPRouteOutput{})
	pulumi.RegisterOutputType(HTTPRouteArrayOutput{})
	pulumi.RegisterOutputType(HTTPRouteMapOutput{})
}
