// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// ReferenceGrant identifies kinds of resources in other namespaces that are
// trusted to reference the specified kinds of resources in the same namespace
// as the policy.
//
// Each ReferenceGrant can be used to represent a unique trust relationship.
// Additional Reference Grants can be used to add to the set of trusted
// sources of inbound references for the namespace they are defined within.
//
// All cross-namespace references in Gateway API (with the exception of cross-namespace
// Gateway-route attachment) require a ReferenceGrant.
//
// ReferenceGrant is a form of runtime verification allowing users to assert
// which cross-namespace object references are permitted. Implementations that
// support ReferenceGrant MUST NOT permit cross-namespace references which have
// no grant, and MUST respond to the removal of a grant by revoking the access
// that the grant allowed.
type ReferenceGrantPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput  `pulumi:"metadata"`
	Spec     ReferenceGrantSpecPatchPtrOutput `pulumi:"spec"`
}

// NewReferenceGrantPatch registers a new resource with the given unique name, arguments, and options.
func NewReferenceGrantPatch(ctx *pulumi.Context,
	name string, args *ReferenceGrantPatchArgs, opts ...pulumi.ResourceOption) (*ReferenceGrantPatch, error) {
	if args == nil {
		args = &ReferenceGrantPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("gateway.networking.k8s.io/v1beta1")
	args.Kind = pulumi.StringPtr("ReferenceGrant")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:gateway.networking.k8s.io/v1alpha2:ReferenceGrantPatch"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ReferenceGrantPatch
	err := ctx.RegisterResource("kubernetes:gateway.networking.k8s.io/v1beta1:ReferenceGrantPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReferenceGrantPatch gets an existing ReferenceGrantPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReferenceGrantPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReferenceGrantPatchState, opts ...pulumi.ResourceOption) (*ReferenceGrantPatch, error) {
	var resource ReferenceGrantPatch
	err := ctx.ReadResource("kubernetes:gateway.networking.k8s.io/v1beta1:ReferenceGrantPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReferenceGrantPatch resources.
type referenceGrantPatchState struct {
}

type ReferenceGrantPatchState struct {
}

func (ReferenceGrantPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*referenceGrantPatchState)(nil)).Elem()
}

type referenceGrantPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch  `pulumi:"metadata"`
	Spec     *ReferenceGrantSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a ReferenceGrantPatch resource.
type ReferenceGrantPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     ReferenceGrantSpecPatchPtrInput
}

func (ReferenceGrantPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*referenceGrantPatchArgs)(nil)).Elem()
}

type ReferenceGrantPatchInput interface {
	pulumi.Input

	ToReferenceGrantPatchOutput() ReferenceGrantPatchOutput
	ToReferenceGrantPatchOutputWithContext(ctx context.Context) ReferenceGrantPatchOutput
}

func (*ReferenceGrantPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceGrantPatch)(nil)).Elem()
}

func (i *ReferenceGrantPatch) ToReferenceGrantPatchOutput() ReferenceGrantPatchOutput {
	return i.ToReferenceGrantPatchOutputWithContext(context.Background())
}

func (i *ReferenceGrantPatch) ToReferenceGrantPatchOutputWithContext(ctx context.Context) ReferenceGrantPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantPatchOutput)
}

// ReferenceGrantPatchArrayInput is an input type that accepts ReferenceGrantPatchArray and ReferenceGrantPatchArrayOutput values.
// You can construct a concrete instance of `ReferenceGrantPatchArrayInput` via:
//
//	ReferenceGrantPatchArray{ ReferenceGrantPatchArgs{...} }
type ReferenceGrantPatchArrayInput interface {
	pulumi.Input

	ToReferenceGrantPatchArrayOutput() ReferenceGrantPatchArrayOutput
	ToReferenceGrantPatchArrayOutputWithContext(context.Context) ReferenceGrantPatchArrayOutput
}

type ReferenceGrantPatchArray []ReferenceGrantPatchInput

func (ReferenceGrantPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReferenceGrantPatch)(nil)).Elem()
}

func (i ReferenceGrantPatchArray) ToReferenceGrantPatchArrayOutput() ReferenceGrantPatchArrayOutput {
	return i.ToReferenceGrantPatchArrayOutputWithContext(context.Background())
}

func (i ReferenceGrantPatchArray) ToReferenceGrantPatchArrayOutputWithContext(ctx context.Context) ReferenceGrantPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantPatchArrayOutput)
}

// ReferenceGrantPatchMapInput is an input type that accepts ReferenceGrantPatchMap and ReferenceGrantPatchMapOutput values.
// You can construct a concrete instance of `ReferenceGrantPatchMapInput` via:
//
//	ReferenceGrantPatchMap{ "key": ReferenceGrantPatchArgs{...} }
type ReferenceGrantPatchMapInput interface {
	pulumi.Input

	ToReferenceGrantPatchMapOutput() ReferenceGrantPatchMapOutput
	ToReferenceGrantPatchMapOutputWithContext(context.Context) ReferenceGrantPatchMapOutput
}

type ReferenceGrantPatchMap map[string]ReferenceGrantPatchInput

func (ReferenceGrantPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReferenceGrantPatch)(nil)).Elem()
}

func (i ReferenceGrantPatchMap) ToReferenceGrantPatchMapOutput() ReferenceGrantPatchMapOutput {
	return i.ToReferenceGrantPatchMapOutputWithContext(context.Background())
}

func (i ReferenceGrantPatchMap) ToReferenceGrantPatchMapOutputWithContext(ctx context.Context) ReferenceGrantPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantPatchMapOutput)
}

type ReferenceGrantPatchOutput struct{ *pulumi.OutputState }

func (ReferenceGrantPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceGrantPatch)(nil)).Elem()
}

func (o ReferenceGrantPatchOutput) ToReferenceGrantPatchOutput() ReferenceGrantPatchOutput {
	return o
}

func (o ReferenceGrantPatchOutput) ToReferenceGrantPatchOutputWithContext(ctx context.Context) ReferenceGrantPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ReferenceGrantPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReferenceGrantPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ReferenceGrantPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReferenceGrantPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ReferenceGrantPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *ReferenceGrantPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ReferenceGrantPatchOutput) Spec() ReferenceGrantSpecPatchPtrOutput {
	return o.ApplyT(func(v *ReferenceGrantPatch) ReferenceGrantSpecPatchPtrOutput { return v.Spec }).(ReferenceGrantSpecPatchPtrOutput)
}

type ReferenceGrantPatchArrayOutput struct{ *pulumi.OutputState }

func (ReferenceGrantPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReferenceGrantPatch)(nil)).Elem()
}

func (o ReferenceGrantPatchArrayOutput) ToReferenceGrantPatchArrayOutput() ReferenceGrantPatchArrayOutput {
	return o
}

func (o ReferenceGrantPatchArrayOutput) ToReferenceGrantPatchArrayOutputWithContext(ctx context.Context) ReferenceGrantPatchArrayOutput {
	return o
}

func (o ReferenceGrantPatchArrayOutput) Index(i pulumi.IntInput) ReferenceGrantPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReferenceGrantPatch {
		return vs[0].([]*ReferenceGrantPatch)[vs[1].(int)]
	}).(ReferenceGrantPatchOutput)
}

type ReferenceGrantPatchMapOutput struct{ *pulumi.OutputState }

func (ReferenceGrantPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReferenceGrantPatch)(nil)).Elem()
}

func (o ReferenceGrantPatchMapOutput) ToReferenceGrantPatchMapOutput() ReferenceGrantPatchMapOutput {
	return o
}

func (o ReferenceGrantPatchMapOutput) ToReferenceGrantPatchMapOutputWithContext(ctx context.Context) ReferenceGrantPatchMapOutput {
	return o
}

func (o ReferenceGrantPatchMapOutput) MapIndex(k pulumi.StringInput) ReferenceGrantPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReferenceGrantPatch {
		return vs[0].(map[string]*ReferenceGrantPatch)[vs[1].(string)]
	}).(ReferenceGrantPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantPatchInput)(nil)).Elem(), &ReferenceGrantPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantPatchArrayInput)(nil)).Elem(), ReferenceGrantPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantPatchMapInput)(nil)).Elem(), ReferenceGrantPatchMap{})
	pulumi.RegisterOutputType(ReferenceGrantPatchOutput{})
	pulumi.RegisterOutputType(ReferenceGrantPatchArrayOutput{})
	pulumi.RegisterOutputType(ReferenceGrantPatchMapOutput{})
}
