// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GRPCRoute provides a way to route gRPC requests. This includes the capability
// to match requests by hostname, gRPC service, gRPC method, or HTTP/2 header.
// Filters can be used to specify additional processing steps. Backends specify
// where matching requests will be routed.
//
// GRPCRoute falls under extended support within the Gateway API. Within the
// following specification, the word "MUST" indicates that an implementation
// supporting GRPCRoute must conform to the indicated requirement, but an
// implementation not supporting this route type need not follow the requirement
// unless explicitly indicated.
//
// Implementations supporting `GRPCRoute` with the `HTTPS` `ProtocolType` MUST
// accept HTTP/2 connections without an initial upgrade from HTTP/1.1, i.e. via
// ALPN. If the implementation does not support this, then it MUST set the
// "Accepted" condition to "False" for the affected listener with a reason of
// "UnsupportedProtocol".  Implementations MAY also accept HTTP/2 connections
// with an upgrade from HTTP/1.
//
// Implementations supporting `GRPCRoute` with the `HTTP` `ProtocolType` MUST
// support HTTP/2 over cleartext TCP (h2c,
// https://www.rfc-editor.org/rfc/rfc7540#section-3.1) without an initial
// upgrade from HTTP/1.1, i.e. with prior knowledge
// (https://www.rfc-editor.org/rfc/rfc7540#section-3.4). If the implementation
// does not support this, then it MUST set the "Accepted" condition to "False"
// for the affected listener with a reason of "UnsupportedProtocol".
// Implementations MAY also accept HTTP/2 connections with an upgrade from
// HTTP/1, i.e. without prior knowledge.
type GRPCRoute struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput  `pulumi:"metadata"`
	Spec     GRPCRouteSpecOutput      `pulumi:"spec"`
	Status   GRPCRouteStatusPtrOutput `pulumi:"status"`
}

// NewGRPCRoute registers a new resource with the given unique name, arguments, and options.
func NewGRPCRoute(ctx *pulumi.Context,
	name string, args *GRPCRouteArgs, opts ...pulumi.ResourceOption) (*GRPCRoute, error) {
	if args == nil {
		args = &GRPCRouteArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("gateway.networking.k8s.io/v1")
	args.Kind = pulumi.StringPtr("GRPCRoute")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:gateway.networking.k8s.io/v1alpha2:GRPCRoute"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource GRPCRoute
	err := ctx.RegisterResource("kubernetes:gateway.networking.k8s.io/v1:GRPCRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGRPCRoute gets an existing GRPCRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGRPCRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GRPCRouteState, opts ...pulumi.ResourceOption) (*GRPCRoute, error) {
	var resource GRPCRoute
	err := ctx.ReadResource("kubernetes:gateway.networking.k8s.io/v1:GRPCRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GRPCRoute resources.
type grpcrouteState struct {
}

type GRPCRouteState struct {
}

func (GRPCRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*grpcrouteState)(nil)).Elem()
}

type grpcrouteArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *GRPCRouteSpec     `pulumi:"spec"`
}

// The set of arguments for constructing a GRPCRoute resource.
type GRPCRouteArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     GRPCRouteSpecPtrInput
}

func (GRPCRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*grpcrouteArgs)(nil)).Elem()
}

type GRPCRouteInput interface {
	pulumi.Input

	ToGRPCRouteOutput() GRPCRouteOutput
	ToGRPCRouteOutputWithContext(ctx context.Context) GRPCRouteOutput
}

func (*GRPCRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRoute)(nil)).Elem()
}

func (i *GRPCRoute) ToGRPCRouteOutput() GRPCRouteOutput {
	return i.ToGRPCRouteOutputWithContext(context.Background())
}

func (i *GRPCRoute) ToGRPCRouteOutputWithContext(ctx context.Context) GRPCRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteOutput)
}

// GRPCRouteArrayInput is an input type that accepts GRPCRouteArray and GRPCRouteArrayOutput values.
// You can construct a concrete instance of `GRPCRouteArrayInput` via:
//
//	GRPCRouteArray{ GRPCRouteArgs{...} }
type GRPCRouteArrayInput interface {
	pulumi.Input

	ToGRPCRouteArrayOutput() GRPCRouteArrayOutput
	ToGRPCRouteArrayOutputWithContext(context.Context) GRPCRouteArrayOutput
}

type GRPCRouteArray []GRPCRouteInput

func (GRPCRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GRPCRoute)(nil)).Elem()
}

func (i GRPCRouteArray) ToGRPCRouteArrayOutput() GRPCRouteArrayOutput {
	return i.ToGRPCRouteArrayOutputWithContext(context.Background())
}

func (i GRPCRouteArray) ToGRPCRouteArrayOutputWithContext(ctx context.Context) GRPCRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteArrayOutput)
}

// GRPCRouteMapInput is an input type that accepts GRPCRouteMap and GRPCRouteMapOutput values.
// You can construct a concrete instance of `GRPCRouteMapInput` via:
//
//	GRPCRouteMap{ "key": GRPCRouteArgs{...} }
type GRPCRouteMapInput interface {
	pulumi.Input

	ToGRPCRouteMapOutput() GRPCRouteMapOutput
	ToGRPCRouteMapOutputWithContext(context.Context) GRPCRouteMapOutput
}

type GRPCRouteMap map[string]GRPCRouteInput

func (GRPCRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GRPCRoute)(nil)).Elem()
}

func (i GRPCRouteMap) ToGRPCRouteMapOutput() GRPCRouteMapOutput {
	return i.ToGRPCRouteMapOutputWithContext(context.Background())
}

func (i GRPCRouteMap) ToGRPCRouteMapOutputWithContext(ctx context.Context) GRPCRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteMapOutput)
}

type GRPCRouteOutput struct{ *pulumi.OutputState }

func (GRPCRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRoute)(nil)).Elem()
}

func (o GRPCRouteOutput) ToGRPCRouteOutput() GRPCRouteOutput {
	return o
}

func (o GRPCRouteOutput) ToGRPCRouteOutputWithContext(ctx context.Context) GRPCRouteOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o GRPCRouteOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *GRPCRoute) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GRPCRouteOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *GRPCRoute) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o GRPCRouteOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *GRPCRoute) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o GRPCRouteOutput) Spec() GRPCRouteSpecOutput {
	return o.ApplyT(func(v *GRPCRoute) GRPCRouteSpecOutput { return v.Spec }).(GRPCRouteSpecOutput)
}

func (o GRPCRouteOutput) Status() GRPCRouteStatusPtrOutput {
	return o.ApplyT(func(v *GRPCRoute) GRPCRouteStatusPtrOutput { return v.Status }).(GRPCRouteStatusPtrOutput)
}

type GRPCRouteArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GRPCRoute)(nil)).Elem()
}

func (o GRPCRouteArrayOutput) ToGRPCRouteArrayOutput() GRPCRouteArrayOutput {
	return o
}

func (o GRPCRouteArrayOutput) ToGRPCRouteArrayOutputWithContext(ctx context.Context) GRPCRouteArrayOutput {
	return o
}

func (o GRPCRouteArrayOutput) Index(i pulumi.IntInput) GRPCRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GRPCRoute {
		return vs[0].([]*GRPCRoute)[vs[1].(int)]
	}).(GRPCRouteOutput)
}

type GRPCRouteMapOutput struct{ *pulumi.OutputState }

func (GRPCRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GRPCRoute)(nil)).Elem()
}

func (o GRPCRouteMapOutput) ToGRPCRouteMapOutput() GRPCRouteMapOutput {
	return o
}

func (o GRPCRouteMapOutput) ToGRPCRouteMapOutputWithContext(ctx context.Context) GRPCRouteMapOutput {
	return o
}

func (o GRPCRouteMapOutput) MapIndex(k pulumi.StringInput) GRPCRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GRPCRoute {
		return vs[0].(map[string]*GRPCRoute)[vs[1].(string)]
	}).(GRPCRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteInput)(nil)).Elem(), &GRPCRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteArrayInput)(nil)).Elem(), GRPCRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteMapInput)(nil)).Elem(), GRPCRouteMap{})
	pulumi.RegisterOutputType(GRPCRouteOutput{})
	pulumi.RegisterOutputType(GRPCRouteArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteMapOutput{})
}
