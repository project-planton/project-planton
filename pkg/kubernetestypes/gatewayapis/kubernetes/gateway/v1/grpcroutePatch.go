// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// GRPCRoute provides a way to route gRPC requests. This includes the capability
// to match requests by hostname, gRPC service, gRPC method, or HTTP/2 header.
// Filters can be used to specify additional processing steps. Backends specify
// where matching requests will be routed.
//
// GRPCRoute falls under extended support within the Gateway API. Within the
// following specification, the word "MUST" indicates that an implementation
// supporting GRPCRoute must conform to the indicated requirement, but an
// implementation not supporting this route type need not follow the requirement
// unless explicitly indicated.
//
// Implementations supporting `GRPCRoute` with the `HTTPS` `ProtocolType` MUST
// accept HTTP/2 connections without an initial upgrade from HTTP/1.1, i.e. via
// ALPN. If the implementation does not support this, then it MUST set the
// "Accepted" condition to "False" for the affected listener with a reason of
// "UnsupportedProtocol".  Implementations MAY also accept HTTP/2 connections
// with an upgrade from HTTP/1.
//
// Implementations supporting `GRPCRoute` with the `HTTP` `ProtocolType` MUST
// support HTTP/2 over cleartext TCP (h2c,
// https://www.rfc-editor.org/rfc/rfc7540#section-3.1) without an initial
// upgrade from HTTP/1.1, i.e. with prior knowledge
// (https://www.rfc-editor.org/rfc/rfc7540#section-3.4). If the implementation
// does not support this, then it MUST set the "Accepted" condition to "False"
// for the affected listener with a reason of "UnsupportedProtocol".
// Implementations MAY also accept HTTP/2 connections with an upgrade from
// HTTP/1, i.e. without prior knowledge.
type GRPCRoutePatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     GRPCRouteSpecPatchPtrOutput     `pulumi:"spec"`
	Status   GRPCRouteStatusPatchPtrOutput   `pulumi:"status"`
}

// NewGRPCRoutePatch registers a new resource with the given unique name, arguments, and options.
func NewGRPCRoutePatch(ctx *pulumi.Context,
	name string, args *GRPCRoutePatchArgs, opts ...pulumi.ResourceOption) (*GRPCRoutePatch, error) {
	if args == nil {
		args = &GRPCRoutePatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("gateway.networking.k8s.io/v1")
	args.Kind = pulumi.StringPtr("GRPCRoute")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:gateway.networking.k8s.io/v1alpha2:GRPCRoutePatch"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource GRPCRoutePatch
	err := ctx.RegisterResource("kubernetes:gateway.networking.k8s.io/v1:GRPCRoutePatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGRPCRoutePatch gets an existing GRPCRoutePatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGRPCRoutePatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GRPCRoutePatchState, opts ...pulumi.ResourceOption) (*GRPCRoutePatch, error) {
	var resource GRPCRoutePatch
	err := ctx.ReadResource("kubernetes:gateway.networking.k8s.io/v1:GRPCRoutePatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GRPCRoutePatch resources.
type grpcroutePatchState struct {
}

type GRPCRoutePatchState struct {
}

func (GRPCRoutePatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*grpcroutePatchState)(nil)).Elem()
}

type grpcroutePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *GRPCRouteSpecPatch     `pulumi:"spec"`
}

// The set of arguments for constructing a GRPCRoutePatch resource.
type GRPCRoutePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     GRPCRouteSpecPatchPtrInput
}

func (GRPCRoutePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*grpcroutePatchArgs)(nil)).Elem()
}

type GRPCRoutePatchInput interface {
	pulumi.Input

	ToGRPCRoutePatchOutput() GRPCRoutePatchOutput
	ToGRPCRoutePatchOutputWithContext(ctx context.Context) GRPCRoutePatchOutput
}

func (*GRPCRoutePatch) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRoutePatch)(nil)).Elem()
}

func (i *GRPCRoutePatch) ToGRPCRoutePatchOutput() GRPCRoutePatchOutput {
	return i.ToGRPCRoutePatchOutputWithContext(context.Background())
}

func (i *GRPCRoutePatch) ToGRPCRoutePatchOutputWithContext(ctx context.Context) GRPCRoutePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRoutePatchOutput)
}

// GRPCRoutePatchArrayInput is an input type that accepts GRPCRoutePatchArray and GRPCRoutePatchArrayOutput values.
// You can construct a concrete instance of `GRPCRoutePatchArrayInput` via:
//
//	GRPCRoutePatchArray{ GRPCRoutePatchArgs{...} }
type GRPCRoutePatchArrayInput interface {
	pulumi.Input

	ToGRPCRoutePatchArrayOutput() GRPCRoutePatchArrayOutput
	ToGRPCRoutePatchArrayOutputWithContext(context.Context) GRPCRoutePatchArrayOutput
}

type GRPCRoutePatchArray []GRPCRoutePatchInput

func (GRPCRoutePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GRPCRoutePatch)(nil)).Elem()
}

func (i GRPCRoutePatchArray) ToGRPCRoutePatchArrayOutput() GRPCRoutePatchArrayOutput {
	return i.ToGRPCRoutePatchArrayOutputWithContext(context.Background())
}

func (i GRPCRoutePatchArray) ToGRPCRoutePatchArrayOutputWithContext(ctx context.Context) GRPCRoutePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRoutePatchArrayOutput)
}

// GRPCRoutePatchMapInput is an input type that accepts GRPCRoutePatchMap and GRPCRoutePatchMapOutput values.
// You can construct a concrete instance of `GRPCRoutePatchMapInput` via:
//
//	GRPCRoutePatchMap{ "key": GRPCRoutePatchArgs{...} }
type GRPCRoutePatchMapInput interface {
	pulumi.Input

	ToGRPCRoutePatchMapOutput() GRPCRoutePatchMapOutput
	ToGRPCRoutePatchMapOutputWithContext(context.Context) GRPCRoutePatchMapOutput
}

type GRPCRoutePatchMap map[string]GRPCRoutePatchInput

func (GRPCRoutePatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GRPCRoutePatch)(nil)).Elem()
}

func (i GRPCRoutePatchMap) ToGRPCRoutePatchMapOutput() GRPCRoutePatchMapOutput {
	return i.ToGRPCRoutePatchMapOutputWithContext(context.Background())
}

func (i GRPCRoutePatchMap) ToGRPCRoutePatchMapOutputWithContext(ctx context.Context) GRPCRoutePatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRoutePatchMapOutput)
}

type GRPCRoutePatchOutput struct{ *pulumi.OutputState }

func (GRPCRoutePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRoutePatch)(nil)).Elem()
}

func (o GRPCRoutePatchOutput) ToGRPCRoutePatchOutput() GRPCRoutePatchOutput {
	return o
}

func (o GRPCRoutePatchOutput) ToGRPCRoutePatchOutputWithContext(ctx context.Context) GRPCRoutePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o GRPCRoutePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRoutePatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o GRPCRoutePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRoutePatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o GRPCRoutePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *GRPCRoutePatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o GRPCRoutePatchOutput) Spec() GRPCRouteSpecPatchPtrOutput {
	return o.ApplyT(func(v *GRPCRoutePatch) GRPCRouteSpecPatchPtrOutput { return v.Spec }).(GRPCRouteSpecPatchPtrOutput)
}

func (o GRPCRoutePatchOutput) Status() GRPCRouteStatusPatchPtrOutput {
	return o.ApplyT(func(v *GRPCRoutePatch) GRPCRouteStatusPatchPtrOutput { return v.Status }).(GRPCRouteStatusPatchPtrOutput)
}

type GRPCRoutePatchArrayOutput struct{ *pulumi.OutputState }

func (GRPCRoutePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GRPCRoutePatch)(nil)).Elem()
}

func (o GRPCRoutePatchArrayOutput) ToGRPCRoutePatchArrayOutput() GRPCRoutePatchArrayOutput {
	return o
}

func (o GRPCRoutePatchArrayOutput) ToGRPCRoutePatchArrayOutputWithContext(ctx context.Context) GRPCRoutePatchArrayOutput {
	return o
}

func (o GRPCRoutePatchArrayOutput) Index(i pulumi.IntInput) GRPCRoutePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GRPCRoutePatch {
		return vs[0].([]*GRPCRoutePatch)[vs[1].(int)]
	}).(GRPCRoutePatchOutput)
}

type GRPCRoutePatchMapOutput struct{ *pulumi.OutputState }

func (GRPCRoutePatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GRPCRoutePatch)(nil)).Elem()
}

func (o GRPCRoutePatchMapOutput) ToGRPCRoutePatchMapOutput() GRPCRoutePatchMapOutput {
	return o
}

func (o GRPCRoutePatchMapOutput) ToGRPCRoutePatchMapOutputWithContext(ctx context.Context) GRPCRoutePatchMapOutput {
	return o
}

func (o GRPCRoutePatchMapOutput) MapIndex(k pulumi.StringInput) GRPCRoutePatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GRPCRoutePatch {
		return vs[0].(map[string]*GRPCRoutePatch)[vs[1].(string)]
	}).(GRPCRoutePatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRoutePatchInput)(nil)).Elem(), &GRPCRoutePatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRoutePatchArrayInput)(nil)).Elem(), GRPCRoutePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRoutePatchMapInput)(nil)).Elem(), GRPCRoutePatchMap{})
	pulumi.RegisterOutputType(GRPCRoutePatchOutput{})
	pulumi.RegisterOutputType(GRPCRoutePatchArrayOutput{})
	pulumi.RegisterOutputType(GRPCRoutePatchMapOutput{})
}
