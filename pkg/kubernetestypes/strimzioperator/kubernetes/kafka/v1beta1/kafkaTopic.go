// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KafkaTopic struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput   `pulumi:"metadata"`
	Spec     KafkaTopicSpecOutput      `pulumi:"spec"`
	Status   KafkaTopicStatusPtrOutput `pulumi:"status"`
}

// NewKafkaTopic registers a new resource with the given unique name, arguments, and options.
func NewKafkaTopic(ctx *pulumi.Context,
	name string, args *KafkaTopicArgs, opts ...pulumi.ResourceOption) (*KafkaTopic, error) {
	if args == nil {
		args = &KafkaTopicArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta1")
	args.Kind = pulumi.StringPtr("KafkaTopic")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:kafka.strimzi.io/v1alpha1:KafkaTopic"),
		},
		{
			Type: pulumi.String("kubernetes:kafka.strimzi.io/v1beta2:KafkaTopic"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaTopic
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta1:KafkaTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaTopic gets an existing KafkaTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaTopicState, opts ...pulumi.ResourceOption) (*KafkaTopic, error) {
	var resource KafkaTopic
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta1:KafkaTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaTopic resources.
type kafkaTopicState struct {
}

type KafkaTopicState struct {
}

func (KafkaTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaTopicState)(nil)).Elem()
}

type kafkaTopicArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *KafkaTopicSpec    `pulumi:"spec"`
}

// The set of arguments for constructing a KafkaTopic resource.
type KafkaTopicArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     KafkaTopicSpecPtrInput
}

func (KafkaTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaTopicArgs)(nil)).Elem()
}

type KafkaTopicInput interface {
	pulumi.Input

	ToKafkaTopicOutput() KafkaTopicOutput
	ToKafkaTopicOutputWithContext(ctx context.Context) KafkaTopicOutput
}

func (*KafkaTopic) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopic)(nil)).Elem()
}

func (i *KafkaTopic) ToKafkaTopicOutput() KafkaTopicOutput {
	return i.ToKafkaTopicOutputWithContext(context.Background())
}

func (i *KafkaTopic) ToKafkaTopicOutputWithContext(ctx context.Context) KafkaTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicOutput)
}

// KafkaTopicArrayInput is an input type that accepts KafkaTopicArray and KafkaTopicArrayOutput values.
// You can construct a concrete instance of `KafkaTopicArrayInput` via:
//
//	KafkaTopicArray{ KafkaTopicArgs{...} }
type KafkaTopicArrayInput interface {
	pulumi.Input

	ToKafkaTopicArrayOutput() KafkaTopicArrayOutput
	ToKafkaTopicArrayOutputWithContext(context.Context) KafkaTopicArrayOutput
}

type KafkaTopicArray []KafkaTopicInput

func (KafkaTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaTopic)(nil)).Elem()
}

func (i KafkaTopicArray) ToKafkaTopicArrayOutput() KafkaTopicArrayOutput {
	return i.ToKafkaTopicArrayOutputWithContext(context.Background())
}

func (i KafkaTopicArray) ToKafkaTopicArrayOutputWithContext(ctx context.Context) KafkaTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicArrayOutput)
}

// KafkaTopicMapInput is an input type that accepts KafkaTopicMap and KafkaTopicMapOutput values.
// You can construct a concrete instance of `KafkaTopicMapInput` via:
//
//	KafkaTopicMap{ "key": KafkaTopicArgs{...} }
type KafkaTopicMapInput interface {
	pulumi.Input

	ToKafkaTopicMapOutput() KafkaTopicMapOutput
	ToKafkaTopicMapOutputWithContext(context.Context) KafkaTopicMapOutput
}

type KafkaTopicMap map[string]KafkaTopicInput

func (KafkaTopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaTopic)(nil)).Elem()
}

func (i KafkaTopicMap) ToKafkaTopicMapOutput() KafkaTopicMapOutput {
	return i.ToKafkaTopicMapOutputWithContext(context.Background())
}

func (i KafkaTopicMap) ToKafkaTopicMapOutputWithContext(ctx context.Context) KafkaTopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicMapOutput)
}

type KafkaTopicOutput struct{ *pulumi.OutputState }

func (KafkaTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopic)(nil)).Elem()
}

func (o KafkaTopicOutput) ToKafkaTopicOutput() KafkaTopicOutput {
	return o
}

func (o KafkaTopicOutput) ToKafkaTopicOutputWithContext(ctx context.Context) KafkaTopicOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaTopicOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaTopicOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o KafkaTopicOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *KafkaTopic) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o KafkaTopicOutput) Spec() KafkaTopicSpecOutput {
	return o.ApplyT(func(v *KafkaTopic) KafkaTopicSpecOutput { return v.Spec }).(KafkaTopicSpecOutput)
}

func (o KafkaTopicOutput) Status() KafkaTopicStatusPtrOutput {
	return o.ApplyT(func(v *KafkaTopic) KafkaTopicStatusPtrOutput { return v.Status }).(KafkaTopicStatusPtrOutput)
}

type KafkaTopicArrayOutput struct{ *pulumi.OutputState }

func (KafkaTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaTopic)(nil)).Elem()
}

func (o KafkaTopicArrayOutput) ToKafkaTopicArrayOutput() KafkaTopicArrayOutput {
	return o
}

func (o KafkaTopicArrayOutput) ToKafkaTopicArrayOutputWithContext(ctx context.Context) KafkaTopicArrayOutput {
	return o
}

func (o KafkaTopicArrayOutput) Index(i pulumi.IntInput) KafkaTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaTopic {
		return vs[0].([]*KafkaTopic)[vs[1].(int)]
	}).(KafkaTopicOutput)
}

type KafkaTopicMapOutput struct{ *pulumi.OutputState }

func (KafkaTopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaTopic)(nil)).Elem()
}

func (o KafkaTopicMapOutput) ToKafkaTopicMapOutput() KafkaTopicMapOutput {
	return o
}

func (o KafkaTopicMapOutput) ToKafkaTopicMapOutputWithContext(ctx context.Context) KafkaTopicMapOutput {
	return o
}

func (o KafkaTopicMapOutput) MapIndex(k pulumi.StringInput) KafkaTopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaTopic {
		return vs[0].(map[string]*KafkaTopic)[vs[1].(string)]
	}).(KafkaTopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicInput)(nil)).Elem(), &KafkaTopic{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicArrayInput)(nil)).Elem(), KafkaTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicMapInput)(nil)).Elem(), KafkaTopicMap{})
	pulumi.RegisterOutputType(KafkaTopicOutput{})
	pulumi.RegisterOutputType(KafkaTopicArrayOutput{})
	pulumi.RegisterOutputType(KafkaTopicMapOutput{})
}
