// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// KafkaConnectorList is a list of KafkaConnector
type KafkaConnectorList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of kafkaconnectors. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items KafkaConnectorTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewKafkaConnectorList registers a new resource with the given unique name, arguments, and options.
func NewKafkaConnectorList(ctx *pulumi.Context,
	name string, args *KafkaConnectorListArgs, opts ...pulumi.ResourceOption) (*KafkaConnectorList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta2")
	args.Kind = pulumi.StringPtr("KafkaConnectorList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaConnectorList
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaConnectorList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaConnectorList gets an existing KafkaConnectorList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaConnectorList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaConnectorListState, opts ...pulumi.ResourceOption) (*KafkaConnectorList, error) {
	var resource KafkaConnectorList
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaConnectorList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaConnectorList resources.
type kafkaConnectorListState struct {
}

type KafkaConnectorListState struct {
}

func (KafkaConnectorListState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaConnectorListState)(nil)).Elem()
}

type kafkaConnectorListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of kafkaconnectors. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []KafkaConnectorType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a KafkaConnectorList resource.
type KafkaConnectorListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of kafkaconnectors. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items KafkaConnectorTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (KafkaConnectorListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaConnectorListArgs)(nil)).Elem()
}

type KafkaConnectorListInput interface {
	pulumi.Input

	ToKafkaConnectorListOutput() KafkaConnectorListOutput
	ToKafkaConnectorListOutputWithContext(ctx context.Context) KafkaConnectorListOutput
}

func (*KafkaConnectorList) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaConnectorList)(nil)).Elem()
}

func (i *KafkaConnectorList) ToKafkaConnectorListOutput() KafkaConnectorListOutput {
	return i.ToKafkaConnectorListOutputWithContext(context.Background())
}

func (i *KafkaConnectorList) ToKafkaConnectorListOutputWithContext(ctx context.Context) KafkaConnectorListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaConnectorListOutput)
}

// KafkaConnectorListArrayInput is an input type that accepts KafkaConnectorListArray and KafkaConnectorListArrayOutput values.
// You can construct a concrete instance of `KafkaConnectorListArrayInput` via:
//
//	KafkaConnectorListArray{ KafkaConnectorListArgs{...} }
type KafkaConnectorListArrayInput interface {
	pulumi.Input

	ToKafkaConnectorListArrayOutput() KafkaConnectorListArrayOutput
	ToKafkaConnectorListArrayOutputWithContext(context.Context) KafkaConnectorListArrayOutput
}

type KafkaConnectorListArray []KafkaConnectorListInput

func (KafkaConnectorListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaConnectorList)(nil)).Elem()
}

func (i KafkaConnectorListArray) ToKafkaConnectorListArrayOutput() KafkaConnectorListArrayOutput {
	return i.ToKafkaConnectorListArrayOutputWithContext(context.Background())
}

func (i KafkaConnectorListArray) ToKafkaConnectorListArrayOutputWithContext(ctx context.Context) KafkaConnectorListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaConnectorListArrayOutput)
}

// KafkaConnectorListMapInput is an input type that accepts KafkaConnectorListMap and KafkaConnectorListMapOutput values.
// You can construct a concrete instance of `KafkaConnectorListMapInput` via:
//
//	KafkaConnectorListMap{ "key": KafkaConnectorListArgs{...} }
type KafkaConnectorListMapInput interface {
	pulumi.Input

	ToKafkaConnectorListMapOutput() KafkaConnectorListMapOutput
	ToKafkaConnectorListMapOutputWithContext(context.Context) KafkaConnectorListMapOutput
}

type KafkaConnectorListMap map[string]KafkaConnectorListInput

func (KafkaConnectorListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaConnectorList)(nil)).Elem()
}

func (i KafkaConnectorListMap) ToKafkaConnectorListMapOutput() KafkaConnectorListMapOutput {
	return i.ToKafkaConnectorListMapOutputWithContext(context.Background())
}

func (i KafkaConnectorListMap) ToKafkaConnectorListMapOutputWithContext(ctx context.Context) KafkaConnectorListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaConnectorListMapOutput)
}

type KafkaConnectorListOutput struct{ *pulumi.OutputState }

func (KafkaConnectorListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaConnectorList)(nil)).Elem()
}

func (o KafkaConnectorListOutput) ToKafkaConnectorListOutput() KafkaConnectorListOutput {
	return o
}

func (o KafkaConnectorListOutput) ToKafkaConnectorListOutputWithContext(ctx context.Context) KafkaConnectorListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaConnectorListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnectorList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of kafkaconnectors. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o KafkaConnectorListOutput) Items() KafkaConnectorTypeArrayOutput {
	return o.ApplyT(func(v *KafkaConnectorList) KafkaConnectorTypeArrayOutput { return v.Items }).(KafkaConnectorTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaConnectorListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnectorList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaConnectorListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *KafkaConnectorList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type KafkaConnectorListArrayOutput struct{ *pulumi.OutputState }

func (KafkaConnectorListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaConnectorList)(nil)).Elem()
}

func (o KafkaConnectorListArrayOutput) ToKafkaConnectorListArrayOutput() KafkaConnectorListArrayOutput {
	return o
}

func (o KafkaConnectorListArrayOutput) ToKafkaConnectorListArrayOutputWithContext(ctx context.Context) KafkaConnectorListArrayOutput {
	return o
}

func (o KafkaConnectorListArrayOutput) Index(i pulumi.IntInput) KafkaConnectorListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaConnectorList {
		return vs[0].([]*KafkaConnectorList)[vs[1].(int)]
	}).(KafkaConnectorListOutput)
}

type KafkaConnectorListMapOutput struct{ *pulumi.OutputState }

func (KafkaConnectorListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaConnectorList)(nil)).Elem()
}

func (o KafkaConnectorListMapOutput) ToKafkaConnectorListMapOutput() KafkaConnectorListMapOutput {
	return o
}

func (o KafkaConnectorListMapOutput) ToKafkaConnectorListMapOutputWithContext(ctx context.Context) KafkaConnectorListMapOutput {
	return o
}

func (o KafkaConnectorListMapOutput) MapIndex(k pulumi.StringInput) KafkaConnectorListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaConnectorList {
		return vs[0].(map[string]*KafkaConnectorList)[vs[1].(string)]
	}).(KafkaConnectorListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaConnectorListInput)(nil)).Elem(), &KafkaConnectorList{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaConnectorListArrayInput)(nil)).Elem(), KafkaConnectorListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaConnectorListMapInput)(nil)).Elem(), KafkaConnectorListMap{})
	pulumi.RegisterOutputType(KafkaConnectorListOutput{})
	pulumi.RegisterOutputType(KafkaConnectorListArrayOutput{})
	pulumi.RegisterOutputType(KafkaConnectorListMapOutput{})
}
