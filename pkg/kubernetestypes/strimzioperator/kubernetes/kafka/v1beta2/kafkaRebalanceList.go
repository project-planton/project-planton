// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// KafkaRebalanceList is a list of KafkaRebalance
type KafkaRebalanceList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of kafkarebalances. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items KafkaRebalanceTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewKafkaRebalanceList registers a new resource with the given unique name, arguments, and options.
func NewKafkaRebalanceList(ctx *pulumi.Context,
	name string, args *KafkaRebalanceListArgs, opts ...pulumi.ResourceOption) (*KafkaRebalanceList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta2")
	args.Kind = pulumi.StringPtr("KafkaRebalanceList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaRebalanceList
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaRebalanceList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaRebalanceList gets an existing KafkaRebalanceList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaRebalanceList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaRebalanceListState, opts ...pulumi.ResourceOption) (*KafkaRebalanceList, error) {
	var resource KafkaRebalanceList
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaRebalanceList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaRebalanceList resources.
type kafkaRebalanceListState struct {
}

type KafkaRebalanceListState struct {
}

func (KafkaRebalanceListState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaRebalanceListState)(nil)).Elem()
}

type kafkaRebalanceListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of kafkarebalances. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []KafkaRebalanceType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a KafkaRebalanceList resource.
type KafkaRebalanceListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of kafkarebalances. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items KafkaRebalanceTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (KafkaRebalanceListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaRebalanceListArgs)(nil)).Elem()
}

type KafkaRebalanceListInput interface {
	pulumi.Input

	ToKafkaRebalanceListOutput() KafkaRebalanceListOutput
	ToKafkaRebalanceListOutputWithContext(ctx context.Context) KafkaRebalanceListOutput
}

func (*KafkaRebalanceList) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaRebalanceList)(nil)).Elem()
}

func (i *KafkaRebalanceList) ToKafkaRebalanceListOutput() KafkaRebalanceListOutput {
	return i.ToKafkaRebalanceListOutputWithContext(context.Background())
}

func (i *KafkaRebalanceList) ToKafkaRebalanceListOutputWithContext(ctx context.Context) KafkaRebalanceListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaRebalanceListOutput)
}

// KafkaRebalanceListArrayInput is an input type that accepts KafkaRebalanceListArray and KafkaRebalanceListArrayOutput values.
// You can construct a concrete instance of `KafkaRebalanceListArrayInput` via:
//
//	KafkaRebalanceListArray{ KafkaRebalanceListArgs{...} }
type KafkaRebalanceListArrayInput interface {
	pulumi.Input

	ToKafkaRebalanceListArrayOutput() KafkaRebalanceListArrayOutput
	ToKafkaRebalanceListArrayOutputWithContext(context.Context) KafkaRebalanceListArrayOutput
}

type KafkaRebalanceListArray []KafkaRebalanceListInput

func (KafkaRebalanceListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaRebalanceList)(nil)).Elem()
}

func (i KafkaRebalanceListArray) ToKafkaRebalanceListArrayOutput() KafkaRebalanceListArrayOutput {
	return i.ToKafkaRebalanceListArrayOutputWithContext(context.Background())
}

func (i KafkaRebalanceListArray) ToKafkaRebalanceListArrayOutputWithContext(ctx context.Context) KafkaRebalanceListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaRebalanceListArrayOutput)
}

// KafkaRebalanceListMapInput is an input type that accepts KafkaRebalanceListMap and KafkaRebalanceListMapOutput values.
// You can construct a concrete instance of `KafkaRebalanceListMapInput` via:
//
//	KafkaRebalanceListMap{ "key": KafkaRebalanceListArgs{...} }
type KafkaRebalanceListMapInput interface {
	pulumi.Input

	ToKafkaRebalanceListMapOutput() KafkaRebalanceListMapOutput
	ToKafkaRebalanceListMapOutputWithContext(context.Context) KafkaRebalanceListMapOutput
}

type KafkaRebalanceListMap map[string]KafkaRebalanceListInput

func (KafkaRebalanceListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaRebalanceList)(nil)).Elem()
}

func (i KafkaRebalanceListMap) ToKafkaRebalanceListMapOutput() KafkaRebalanceListMapOutput {
	return i.ToKafkaRebalanceListMapOutputWithContext(context.Background())
}

func (i KafkaRebalanceListMap) ToKafkaRebalanceListMapOutputWithContext(ctx context.Context) KafkaRebalanceListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaRebalanceListMapOutput)
}

type KafkaRebalanceListOutput struct{ *pulumi.OutputState }

func (KafkaRebalanceListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaRebalanceList)(nil)).Elem()
}

func (o KafkaRebalanceListOutput) ToKafkaRebalanceListOutput() KafkaRebalanceListOutput {
	return o
}

func (o KafkaRebalanceListOutput) ToKafkaRebalanceListOutputWithContext(ctx context.Context) KafkaRebalanceListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaRebalanceListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaRebalanceList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of kafkarebalances. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o KafkaRebalanceListOutput) Items() KafkaRebalanceTypeArrayOutput {
	return o.ApplyT(func(v *KafkaRebalanceList) KafkaRebalanceTypeArrayOutput { return v.Items }).(KafkaRebalanceTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaRebalanceListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaRebalanceList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaRebalanceListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *KafkaRebalanceList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type KafkaRebalanceListArrayOutput struct{ *pulumi.OutputState }

func (KafkaRebalanceListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaRebalanceList)(nil)).Elem()
}

func (o KafkaRebalanceListArrayOutput) ToKafkaRebalanceListArrayOutput() KafkaRebalanceListArrayOutput {
	return o
}

func (o KafkaRebalanceListArrayOutput) ToKafkaRebalanceListArrayOutputWithContext(ctx context.Context) KafkaRebalanceListArrayOutput {
	return o
}

func (o KafkaRebalanceListArrayOutput) Index(i pulumi.IntInput) KafkaRebalanceListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaRebalanceList {
		return vs[0].([]*KafkaRebalanceList)[vs[1].(int)]
	}).(KafkaRebalanceListOutput)
}

type KafkaRebalanceListMapOutput struct{ *pulumi.OutputState }

func (KafkaRebalanceListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaRebalanceList)(nil)).Elem()
}

func (o KafkaRebalanceListMapOutput) ToKafkaRebalanceListMapOutput() KafkaRebalanceListMapOutput {
	return o
}

func (o KafkaRebalanceListMapOutput) ToKafkaRebalanceListMapOutputWithContext(ctx context.Context) KafkaRebalanceListMapOutput {
	return o
}

func (o KafkaRebalanceListMapOutput) MapIndex(k pulumi.StringInput) KafkaRebalanceListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaRebalanceList {
		return vs[0].(map[string]*KafkaRebalanceList)[vs[1].(string)]
	}).(KafkaRebalanceListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaRebalanceListInput)(nil)).Elem(), &KafkaRebalanceList{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaRebalanceListArrayInput)(nil)).Elem(), KafkaRebalanceListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaRebalanceListMapInput)(nil)).Elem(), KafkaRebalanceListMap{})
	pulumi.RegisterOutputType(KafkaRebalanceListOutput{})
	pulumi.RegisterOutputType(KafkaRebalanceListArrayOutput{})
	pulumi.RegisterOutputType(KafkaRebalanceListMapOutput{})
}
