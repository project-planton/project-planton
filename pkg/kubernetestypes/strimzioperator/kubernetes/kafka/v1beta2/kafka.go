// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Kafka struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	Spec     KafkaSpecOutput         `pulumi:"spec"`
	Status   KafkaStatusPtrOutput    `pulumi:"status"`
}

// NewKafka registers a new resource with the given unique name, arguments, and options.
func NewKafka(ctx *pulumi.Context,
	name string, args *KafkaArgs, opts ...pulumi.ResourceOption) (*Kafka, error) {
	if args == nil {
		args = &KafkaArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta2")
	args.Kind = pulumi.StringPtr("Kafka")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Kafka
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta2:Kafka", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafka gets an existing Kafka resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafka(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaState, opts ...pulumi.ResourceOption) (*Kafka, error) {
	var resource Kafka
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta2:Kafka", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Kafka resources.
type kafkaState struct {
}

type KafkaState struct {
}

func (KafkaState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaState)(nil)).Elem()
}

type kafkaArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *KafkaSpec         `pulumi:"spec"`
}

// The set of arguments for constructing a Kafka resource.
type KafkaArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     KafkaSpecPtrInput
}

func (KafkaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaArgs)(nil)).Elem()
}

type KafkaInput interface {
	pulumi.Input

	ToKafkaOutput() KafkaOutput
	ToKafkaOutputWithContext(ctx context.Context) KafkaOutput
}

func (*Kafka) ElementType() reflect.Type {
	return reflect.TypeOf((**Kafka)(nil)).Elem()
}

func (i *Kafka) ToKafkaOutput() KafkaOutput {
	return i.ToKafkaOutputWithContext(context.Background())
}

func (i *Kafka) ToKafkaOutputWithContext(ctx context.Context) KafkaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaOutput)
}

// KafkaArrayInput is an input type that accepts KafkaArray and KafkaArrayOutput values.
// You can construct a concrete instance of `KafkaArrayInput` via:
//
//	KafkaArray{ KafkaArgs{...} }
type KafkaArrayInput interface {
	pulumi.Input

	ToKafkaArrayOutput() KafkaArrayOutput
	ToKafkaArrayOutputWithContext(context.Context) KafkaArrayOutput
}

type KafkaArray []KafkaInput

func (KafkaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Kafka)(nil)).Elem()
}

func (i KafkaArray) ToKafkaArrayOutput() KafkaArrayOutput {
	return i.ToKafkaArrayOutputWithContext(context.Background())
}

func (i KafkaArray) ToKafkaArrayOutputWithContext(ctx context.Context) KafkaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaArrayOutput)
}

// KafkaMapInput is an input type that accepts KafkaMap and KafkaMapOutput values.
// You can construct a concrete instance of `KafkaMapInput` via:
//
//	KafkaMap{ "key": KafkaArgs{...} }
type KafkaMapInput interface {
	pulumi.Input

	ToKafkaMapOutput() KafkaMapOutput
	ToKafkaMapOutputWithContext(context.Context) KafkaMapOutput
}

type KafkaMap map[string]KafkaInput

func (KafkaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Kafka)(nil)).Elem()
}

func (i KafkaMap) ToKafkaMapOutput() KafkaMapOutput {
	return i.ToKafkaMapOutputWithContext(context.Background())
}

func (i KafkaMap) ToKafkaMapOutputWithContext(ctx context.Context) KafkaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMapOutput)
}

type KafkaOutput struct{ *pulumi.OutputState }

func (KafkaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Kafka)(nil)).Elem()
}

func (o KafkaOutput) ToKafkaOutput() KafkaOutput {
	return o
}

func (o KafkaOutput) ToKafkaOutputWithContext(ctx context.Context) KafkaOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Kafka) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Kafka) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o KafkaOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *Kafka) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o KafkaOutput) Spec() KafkaSpecOutput {
	return o.ApplyT(func(v *Kafka) KafkaSpecOutput { return v.Spec }).(KafkaSpecOutput)
}

func (o KafkaOutput) Status() KafkaStatusPtrOutput {
	return o.ApplyT(func(v *Kafka) KafkaStatusPtrOutput { return v.Status }).(KafkaStatusPtrOutput)
}

type KafkaArrayOutput struct{ *pulumi.OutputState }

func (KafkaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Kafka)(nil)).Elem()
}

func (o KafkaArrayOutput) ToKafkaArrayOutput() KafkaArrayOutput {
	return o
}

func (o KafkaArrayOutput) ToKafkaArrayOutputWithContext(ctx context.Context) KafkaArrayOutput {
	return o
}

func (o KafkaArrayOutput) Index(i pulumi.IntInput) KafkaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Kafka {
		return vs[0].([]*Kafka)[vs[1].(int)]
	}).(KafkaOutput)
}

type KafkaMapOutput struct{ *pulumi.OutputState }

func (KafkaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Kafka)(nil)).Elem()
}

func (o KafkaMapOutput) ToKafkaMapOutput() KafkaMapOutput {
	return o
}

func (o KafkaMapOutput) ToKafkaMapOutputWithContext(ctx context.Context) KafkaMapOutput {
	return o
}

func (o KafkaMapOutput) MapIndex(k pulumi.StringInput) KafkaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Kafka {
		return vs[0].(map[string]*Kafka)[vs[1].(string)]
	}).(KafkaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaInput)(nil)).Elem(), &Kafka{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaArrayInput)(nil)).Elem(), KafkaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaMapInput)(nil)).Elem(), KafkaMap{})
	pulumi.RegisterOutputType(KafkaOutput{})
	pulumi.RegisterOutputType(KafkaArrayOutput{})
	pulumi.RegisterOutputType(KafkaMapOutput{})
}
