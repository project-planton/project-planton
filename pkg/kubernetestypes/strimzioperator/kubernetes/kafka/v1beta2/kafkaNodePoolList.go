// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// KafkaNodePoolList is a list of KafkaNodePool
type KafkaNodePoolList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of kafkanodepools. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items KafkaNodePoolTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewKafkaNodePoolList registers a new resource with the given unique name, arguments, and options.
func NewKafkaNodePoolList(ctx *pulumi.Context,
	name string, args *KafkaNodePoolListArgs, opts ...pulumi.ResourceOption) (*KafkaNodePoolList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta2")
	args.Kind = pulumi.StringPtr("KafkaNodePoolList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaNodePoolList
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaNodePoolList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaNodePoolList gets an existing KafkaNodePoolList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaNodePoolList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaNodePoolListState, opts ...pulumi.ResourceOption) (*KafkaNodePoolList, error) {
	var resource KafkaNodePoolList
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaNodePoolList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaNodePoolList resources.
type kafkaNodePoolListState struct {
}

type KafkaNodePoolListState struct {
}

func (KafkaNodePoolListState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaNodePoolListState)(nil)).Elem()
}

type kafkaNodePoolListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of kafkanodepools. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []KafkaNodePoolType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a KafkaNodePoolList resource.
type KafkaNodePoolListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of kafkanodepools. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items KafkaNodePoolTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (KafkaNodePoolListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaNodePoolListArgs)(nil)).Elem()
}

type KafkaNodePoolListInput interface {
	pulumi.Input

	ToKafkaNodePoolListOutput() KafkaNodePoolListOutput
	ToKafkaNodePoolListOutputWithContext(ctx context.Context) KafkaNodePoolListOutput
}

func (*KafkaNodePoolList) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaNodePoolList)(nil)).Elem()
}

func (i *KafkaNodePoolList) ToKafkaNodePoolListOutput() KafkaNodePoolListOutput {
	return i.ToKafkaNodePoolListOutputWithContext(context.Background())
}

func (i *KafkaNodePoolList) ToKafkaNodePoolListOutputWithContext(ctx context.Context) KafkaNodePoolListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaNodePoolListOutput)
}

// KafkaNodePoolListArrayInput is an input type that accepts KafkaNodePoolListArray and KafkaNodePoolListArrayOutput values.
// You can construct a concrete instance of `KafkaNodePoolListArrayInput` via:
//
//	KafkaNodePoolListArray{ KafkaNodePoolListArgs{...} }
type KafkaNodePoolListArrayInput interface {
	pulumi.Input

	ToKafkaNodePoolListArrayOutput() KafkaNodePoolListArrayOutput
	ToKafkaNodePoolListArrayOutputWithContext(context.Context) KafkaNodePoolListArrayOutput
}

type KafkaNodePoolListArray []KafkaNodePoolListInput

func (KafkaNodePoolListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaNodePoolList)(nil)).Elem()
}

func (i KafkaNodePoolListArray) ToKafkaNodePoolListArrayOutput() KafkaNodePoolListArrayOutput {
	return i.ToKafkaNodePoolListArrayOutputWithContext(context.Background())
}

func (i KafkaNodePoolListArray) ToKafkaNodePoolListArrayOutputWithContext(ctx context.Context) KafkaNodePoolListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaNodePoolListArrayOutput)
}

// KafkaNodePoolListMapInput is an input type that accepts KafkaNodePoolListMap and KafkaNodePoolListMapOutput values.
// You can construct a concrete instance of `KafkaNodePoolListMapInput` via:
//
//	KafkaNodePoolListMap{ "key": KafkaNodePoolListArgs{...} }
type KafkaNodePoolListMapInput interface {
	pulumi.Input

	ToKafkaNodePoolListMapOutput() KafkaNodePoolListMapOutput
	ToKafkaNodePoolListMapOutputWithContext(context.Context) KafkaNodePoolListMapOutput
}

type KafkaNodePoolListMap map[string]KafkaNodePoolListInput

func (KafkaNodePoolListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaNodePoolList)(nil)).Elem()
}

func (i KafkaNodePoolListMap) ToKafkaNodePoolListMapOutput() KafkaNodePoolListMapOutput {
	return i.ToKafkaNodePoolListMapOutputWithContext(context.Background())
}

func (i KafkaNodePoolListMap) ToKafkaNodePoolListMapOutputWithContext(ctx context.Context) KafkaNodePoolListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaNodePoolListMapOutput)
}

type KafkaNodePoolListOutput struct{ *pulumi.OutputState }

func (KafkaNodePoolListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaNodePoolList)(nil)).Elem()
}

func (o KafkaNodePoolListOutput) ToKafkaNodePoolListOutput() KafkaNodePoolListOutput {
	return o
}

func (o KafkaNodePoolListOutput) ToKafkaNodePoolListOutputWithContext(ctx context.Context) KafkaNodePoolListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaNodePoolListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaNodePoolList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of kafkanodepools. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o KafkaNodePoolListOutput) Items() KafkaNodePoolTypeArrayOutput {
	return o.ApplyT(func(v *KafkaNodePoolList) KafkaNodePoolTypeArrayOutput { return v.Items }).(KafkaNodePoolTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaNodePoolListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaNodePoolList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaNodePoolListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *KafkaNodePoolList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type KafkaNodePoolListArrayOutput struct{ *pulumi.OutputState }

func (KafkaNodePoolListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaNodePoolList)(nil)).Elem()
}

func (o KafkaNodePoolListArrayOutput) ToKafkaNodePoolListArrayOutput() KafkaNodePoolListArrayOutput {
	return o
}

func (o KafkaNodePoolListArrayOutput) ToKafkaNodePoolListArrayOutputWithContext(ctx context.Context) KafkaNodePoolListArrayOutput {
	return o
}

func (o KafkaNodePoolListArrayOutput) Index(i pulumi.IntInput) KafkaNodePoolListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaNodePoolList {
		return vs[0].([]*KafkaNodePoolList)[vs[1].(int)]
	}).(KafkaNodePoolListOutput)
}

type KafkaNodePoolListMapOutput struct{ *pulumi.OutputState }

func (KafkaNodePoolListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaNodePoolList)(nil)).Elem()
}

func (o KafkaNodePoolListMapOutput) ToKafkaNodePoolListMapOutput() KafkaNodePoolListMapOutput {
	return o
}

func (o KafkaNodePoolListMapOutput) ToKafkaNodePoolListMapOutputWithContext(ctx context.Context) KafkaNodePoolListMapOutput {
	return o
}

func (o KafkaNodePoolListMapOutput) MapIndex(k pulumi.StringInput) KafkaNodePoolListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaNodePoolList {
		return vs[0].(map[string]*KafkaNodePoolList)[vs[1].(string)]
	}).(KafkaNodePoolListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaNodePoolListInput)(nil)).Elem(), &KafkaNodePoolList{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaNodePoolListArrayInput)(nil)).Elem(), KafkaNodePoolListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaNodePoolListMapInput)(nil)).Elem(), KafkaNodePoolListMap{})
	pulumi.RegisterOutputType(KafkaNodePoolListOutput{})
	pulumi.RegisterOutputType(KafkaNodePoolListArrayOutput{})
	pulumi.RegisterOutputType(KafkaNodePoolListMapOutput{})
}
