// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type KafkaNodePoolPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput   `pulumi:"metadata"`
	Spec     KafkaNodePoolSpecPatchPtrOutput   `pulumi:"spec"`
	Status   KafkaNodePoolStatusPatchPtrOutput `pulumi:"status"`
}

// NewKafkaNodePoolPatch registers a new resource with the given unique name, arguments, and options.
func NewKafkaNodePoolPatch(ctx *pulumi.Context,
	name string, args *KafkaNodePoolPatchArgs, opts ...pulumi.ResourceOption) (*KafkaNodePoolPatch, error) {
	if args == nil {
		args = &KafkaNodePoolPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta2")
	args.Kind = pulumi.StringPtr("KafkaNodePool")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaNodePoolPatch
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaNodePoolPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaNodePoolPatch gets an existing KafkaNodePoolPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaNodePoolPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaNodePoolPatchState, opts ...pulumi.ResourceOption) (*KafkaNodePoolPatch, error) {
	var resource KafkaNodePoolPatch
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaNodePoolPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaNodePoolPatch resources.
type kafkaNodePoolPatchState struct {
}

type KafkaNodePoolPatchState struct {
}

func (KafkaNodePoolPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaNodePoolPatchState)(nil)).Elem()
}

type kafkaNodePoolPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *KafkaNodePoolSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a KafkaNodePoolPatch resource.
type KafkaNodePoolPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     KafkaNodePoolSpecPatchPtrInput
}

func (KafkaNodePoolPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaNodePoolPatchArgs)(nil)).Elem()
}

type KafkaNodePoolPatchInput interface {
	pulumi.Input

	ToKafkaNodePoolPatchOutput() KafkaNodePoolPatchOutput
	ToKafkaNodePoolPatchOutputWithContext(ctx context.Context) KafkaNodePoolPatchOutput
}

func (*KafkaNodePoolPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaNodePoolPatch)(nil)).Elem()
}

func (i *KafkaNodePoolPatch) ToKafkaNodePoolPatchOutput() KafkaNodePoolPatchOutput {
	return i.ToKafkaNodePoolPatchOutputWithContext(context.Background())
}

func (i *KafkaNodePoolPatch) ToKafkaNodePoolPatchOutputWithContext(ctx context.Context) KafkaNodePoolPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaNodePoolPatchOutput)
}

// KafkaNodePoolPatchArrayInput is an input type that accepts KafkaNodePoolPatchArray and KafkaNodePoolPatchArrayOutput values.
// You can construct a concrete instance of `KafkaNodePoolPatchArrayInput` via:
//
//	KafkaNodePoolPatchArray{ KafkaNodePoolPatchArgs{...} }
type KafkaNodePoolPatchArrayInput interface {
	pulumi.Input

	ToKafkaNodePoolPatchArrayOutput() KafkaNodePoolPatchArrayOutput
	ToKafkaNodePoolPatchArrayOutputWithContext(context.Context) KafkaNodePoolPatchArrayOutput
}

type KafkaNodePoolPatchArray []KafkaNodePoolPatchInput

func (KafkaNodePoolPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaNodePoolPatch)(nil)).Elem()
}

func (i KafkaNodePoolPatchArray) ToKafkaNodePoolPatchArrayOutput() KafkaNodePoolPatchArrayOutput {
	return i.ToKafkaNodePoolPatchArrayOutputWithContext(context.Background())
}

func (i KafkaNodePoolPatchArray) ToKafkaNodePoolPatchArrayOutputWithContext(ctx context.Context) KafkaNodePoolPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaNodePoolPatchArrayOutput)
}

// KafkaNodePoolPatchMapInput is an input type that accepts KafkaNodePoolPatchMap and KafkaNodePoolPatchMapOutput values.
// You can construct a concrete instance of `KafkaNodePoolPatchMapInput` via:
//
//	KafkaNodePoolPatchMap{ "key": KafkaNodePoolPatchArgs{...} }
type KafkaNodePoolPatchMapInput interface {
	pulumi.Input

	ToKafkaNodePoolPatchMapOutput() KafkaNodePoolPatchMapOutput
	ToKafkaNodePoolPatchMapOutputWithContext(context.Context) KafkaNodePoolPatchMapOutput
}

type KafkaNodePoolPatchMap map[string]KafkaNodePoolPatchInput

func (KafkaNodePoolPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaNodePoolPatch)(nil)).Elem()
}

func (i KafkaNodePoolPatchMap) ToKafkaNodePoolPatchMapOutput() KafkaNodePoolPatchMapOutput {
	return i.ToKafkaNodePoolPatchMapOutputWithContext(context.Background())
}

func (i KafkaNodePoolPatchMap) ToKafkaNodePoolPatchMapOutputWithContext(ctx context.Context) KafkaNodePoolPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaNodePoolPatchMapOutput)
}

type KafkaNodePoolPatchOutput struct{ *pulumi.OutputState }

func (KafkaNodePoolPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaNodePoolPatch)(nil)).Elem()
}

func (o KafkaNodePoolPatchOutput) ToKafkaNodePoolPatchOutput() KafkaNodePoolPatchOutput {
	return o
}

func (o KafkaNodePoolPatchOutput) ToKafkaNodePoolPatchOutputWithContext(ctx context.Context) KafkaNodePoolPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaNodePoolPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaNodePoolPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaNodePoolPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaNodePoolPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o KafkaNodePoolPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *KafkaNodePoolPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o KafkaNodePoolPatchOutput) Spec() KafkaNodePoolSpecPatchPtrOutput {
	return o.ApplyT(func(v *KafkaNodePoolPatch) KafkaNodePoolSpecPatchPtrOutput { return v.Spec }).(KafkaNodePoolSpecPatchPtrOutput)
}

func (o KafkaNodePoolPatchOutput) Status() KafkaNodePoolStatusPatchPtrOutput {
	return o.ApplyT(func(v *KafkaNodePoolPatch) KafkaNodePoolStatusPatchPtrOutput { return v.Status }).(KafkaNodePoolStatusPatchPtrOutput)
}

type KafkaNodePoolPatchArrayOutput struct{ *pulumi.OutputState }

func (KafkaNodePoolPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaNodePoolPatch)(nil)).Elem()
}

func (o KafkaNodePoolPatchArrayOutput) ToKafkaNodePoolPatchArrayOutput() KafkaNodePoolPatchArrayOutput {
	return o
}

func (o KafkaNodePoolPatchArrayOutput) ToKafkaNodePoolPatchArrayOutputWithContext(ctx context.Context) KafkaNodePoolPatchArrayOutput {
	return o
}

func (o KafkaNodePoolPatchArrayOutput) Index(i pulumi.IntInput) KafkaNodePoolPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaNodePoolPatch {
		return vs[0].([]*KafkaNodePoolPatch)[vs[1].(int)]
	}).(KafkaNodePoolPatchOutput)
}

type KafkaNodePoolPatchMapOutput struct{ *pulumi.OutputState }

func (KafkaNodePoolPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaNodePoolPatch)(nil)).Elem()
}

func (o KafkaNodePoolPatchMapOutput) ToKafkaNodePoolPatchMapOutput() KafkaNodePoolPatchMapOutput {
	return o
}

func (o KafkaNodePoolPatchMapOutput) ToKafkaNodePoolPatchMapOutputWithContext(ctx context.Context) KafkaNodePoolPatchMapOutput {
	return o
}

func (o KafkaNodePoolPatchMapOutput) MapIndex(k pulumi.StringInput) KafkaNodePoolPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaNodePoolPatch {
		return vs[0].(map[string]*KafkaNodePoolPatch)[vs[1].(string)]
	}).(KafkaNodePoolPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaNodePoolPatchInput)(nil)).Elem(), &KafkaNodePoolPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaNodePoolPatchArrayInput)(nil)).Elem(), KafkaNodePoolPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaNodePoolPatchMapInput)(nil)).Elem(), KafkaNodePoolPatchMap{})
	pulumi.RegisterOutputType(KafkaNodePoolPatchOutput{})
	pulumi.RegisterOutputType(KafkaNodePoolPatchArrayOutput{})
	pulumi.RegisterOutputType(KafkaNodePoolPatchMapOutput{})
}
