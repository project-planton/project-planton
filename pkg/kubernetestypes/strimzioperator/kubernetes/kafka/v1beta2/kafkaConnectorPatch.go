// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type KafkaConnectorPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput    `pulumi:"metadata"`
	Spec     KafkaConnectorSpecPatchPtrOutput   `pulumi:"spec"`
	Status   KafkaConnectorStatusPatchPtrOutput `pulumi:"status"`
}

// NewKafkaConnectorPatch registers a new resource with the given unique name, arguments, and options.
func NewKafkaConnectorPatch(ctx *pulumi.Context,
	name string, args *KafkaConnectorPatchArgs, opts ...pulumi.ResourceOption) (*KafkaConnectorPatch, error) {
	if args == nil {
		args = &KafkaConnectorPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta2")
	args.Kind = pulumi.StringPtr("KafkaConnector")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaConnectorPatch
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaConnectorPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaConnectorPatch gets an existing KafkaConnectorPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaConnectorPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaConnectorPatchState, opts ...pulumi.ResourceOption) (*KafkaConnectorPatch, error) {
	var resource KafkaConnectorPatch
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaConnectorPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaConnectorPatch resources.
type kafkaConnectorPatchState struct {
}

type KafkaConnectorPatchState struct {
}

func (KafkaConnectorPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaConnectorPatchState)(nil)).Elem()
}

type kafkaConnectorPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch  `pulumi:"metadata"`
	Spec     *KafkaConnectorSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a KafkaConnectorPatch resource.
type KafkaConnectorPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     KafkaConnectorSpecPatchPtrInput
}

func (KafkaConnectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaConnectorPatchArgs)(nil)).Elem()
}

type KafkaConnectorPatchInput interface {
	pulumi.Input

	ToKafkaConnectorPatchOutput() KafkaConnectorPatchOutput
	ToKafkaConnectorPatchOutputWithContext(ctx context.Context) KafkaConnectorPatchOutput
}

func (*KafkaConnectorPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaConnectorPatch)(nil)).Elem()
}

func (i *KafkaConnectorPatch) ToKafkaConnectorPatchOutput() KafkaConnectorPatchOutput {
	return i.ToKafkaConnectorPatchOutputWithContext(context.Background())
}

func (i *KafkaConnectorPatch) ToKafkaConnectorPatchOutputWithContext(ctx context.Context) KafkaConnectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaConnectorPatchOutput)
}

// KafkaConnectorPatchArrayInput is an input type that accepts KafkaConnectorPatchArray and KafkaConnectorPatchArrayOutput values.
// You can construct a concrete instance of `KafkaConnectorPatchArrayInput` via:
//
//	KafkaConnectorPatchArray{ KafkaConnectorPatchArgs{...} }
type KafkaConnectorPatchArrayInput interface {
	pulumi.Input

	ToKafkaConnectorPatchArrayOutput() KafkaConnectorPatchArrayOutput
	ToKafkaConnectorPatchArrayOutputWithContext(context.Context) KafkaConnectorPatchArrayOutput
}

type KafkaConnectorPatchArray []KafkaConnectorPatchInput

func (KafkaConnectorPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaConnectorPatch)(nil)).Elem()
}

func (i KafkaConnectorPatchArray) ToKafkaConnectorPatchArrayOutput() KafkaConnectorPatchArrayOutput {
	return i.ToKafkaConnectorPatchArrayOutputWithContext(context.Background())
}

func (i KafkaConnectorPatchArray) ToKafkaConnectorPatchArrayOutputWithContext(ctx context.Context) KafkaConnectorPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaConnectorPatchArrayOutput)
}

// KafkaConnectorPatchMapInput is an input type that accepts KafkaConnectorPatchMap and KafkaConnectorPatchMapOutput values.
// You can construct a concrete instance of `KafkaConnectorPatchMapInput` via:
//
//	KafkaConnectorPatchMap{ "key": KafkaConnectorPatchArgs{...} }
type KafkaConnectorPatchMapInput interface {
	pulumi.Input

	ToKafkaConnectorPatchMapOutput() KafkaConnectorPatchMapOutput
	ToKafkaConnectorPatchMapOutputWithContext(context.Context) KafkaConnectorPatchMapOutput
}

type KafkaConnectorPatchMap map[string]KafkaConnectorPatchInput

func (KafkaConnectorPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaConnectorPatch)(nil)).Elem()
}

func (i KafkaConnectorPatchMap) ToKafkaConnectorPatchMapOutput() KafkaConnectorPatchMapOutput {
	return i.ToKafkaConnectorPatchMapOutputWithContext(context.Background())
}

func (i KafkaConnectorPatchMap) ToKafkaConnectorPatchMapOutputWithContext(ctx context.Context) KafkaConnectorPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaConnectorPatchMapOutput)
}

type KafkaConnectorPatchOutput struct{ *pulumi.OutputState }

func (KafkaConnectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaConnectorPatch)(nil)).Elem()
}

func (o KafkaConnectorPatchOutput) ToKafkaConnectorPatchOutput() KafkaConnectorPatchOutput {
	return o
}

func (o KafkaConnectorPatchOutput) ToKafkaConnectorPatchOutputWithContext(ctx context.Context) KafkaConnectorPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaConnectorPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaConnectorPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaConnectorPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaConnectorPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o KafkaConnectorPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *KafkaConnectorPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o KafkaConnectorPatchOutput) Spec() KafkaConnectorSpecPatchPtrOutput {
	return o.ApplyT(func(v *KafkaConnectorPatch) KafkaConnectorSpecPatchPtrOutput { return v.Spec }).(KafkaConnectorSpecPatchPtrOutput)
}

func (o KafkaConnectorPatchOutput) Status() KafkaConnectorStatusPatchPtrOutput {
	return o.ApplyT(func(v *KafkaConnectorPatch) KafkaConnectorStatusPatchPtrOutput { return v.Status }).(KafkaConnectorStatusPatchPtrOutput)
}

type KafkaConnectorPatchArrayOutput struct{ *pulumi.OutputState }

func (KafkaConnectorPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaConnectorPatch)(nil)).Elem()
}

func (o KafkaConnectorPatchArrayOutput) ToKafkaConnectorPatchArrayOutput() KafkaConnectorPatchArrayOutput {
	return o
}

func (o KafkaConnectorPatchArrayOutput) ToKafkaConnectorPatchArrayOutputWithContext(ctx context.Context) KafkaConnectorPatchArrayOutput {
	return o
}

func (o KafkaConnectorPatchArrayOutput) Index(i pulumi.IntInput) KafkaConnectorPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaConnectorPatch {
		return vs[0].([]*KafkaConnectorPatch)[vs[1].(int)]
	}).(KafkaConnectorPatchOutput)
}

type KafkaConnectorPatchMapOutput struct{ *pulumi.OutputState }

func (KafkaConnectorPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaConnectorPatch)(nil)).Elem()
}

func (o KafkaConnectorPatchMapOutput) ToKafkaConnectorPatchMapOutput() KafkaConnectorPatchMapOutput {
	return o
}

func (o KafkaConnectorPatchMapOutput) ToKafkaConnectorPatchMapOutputWithContext(ctx context.Context) KafkaConnectorPatchMapOutput {
	return o
}

func (o KafkaConnectorPatchMapOutput) MapIndex(k pulumi.StringInput) KafkaConnectorPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaConnectorPatch {
		return vs[0].(map[string]*KafkaConnectorPatch)[vs[1].(string)]
	}).(KafkaConnectorPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaConnectorPatchInput)(nil)).Elem(), &KafkaConnectorPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaConnectorPatchArrayInput)(nil)).Elem(), KafkaConnectorPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaConnectorPatchMapInput)(nil)).Elem(), KafkaConnectorPatchMap{})
	pulumi.RegisterOutputType(KafkaConnectorPatchOutput{})
	pulumi.RegisterOutputType(KafkaConnectorPatchArrayOutput{})
	pulumi.RegisterOutputType(KafkaConnectorPatchMapOutput{})
}
