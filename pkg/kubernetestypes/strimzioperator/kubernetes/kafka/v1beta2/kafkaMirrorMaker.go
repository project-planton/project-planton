// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KafkaMirrorMaker struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput         `pulumi:"metadata"`
	Spec     KafkaMirrorMakerSpecOutput      `pulumi:"spec"`
	Status   KafkaMirrorMakerStatusPtrOutput `pulumi:"status"`
}

// NewKafkaMirrorMaker registers a new resource with the given unique name, arguments, and options.
func NewKafkaMirrorMaker(ctx *pulumi.Context,
	name string, args *KafkaMirrorMakerArgs, opts ...pulumi.ResourceOption) (*KafkaMirrorMaker, error) {
	if args == nil {
		args = &KafkaMirrorMakerArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta2")
	args.Kind = pulumi.StringPtr("KafkaMirrorMaker")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaMirrorMaker
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaMirrorMaker", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaMirrorMaker gets an existing KafkaMirrorMaker resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaMirrorMaker(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaMirrorMakerState, opts ...pulumi.ResourceOption) (*KafkaMirrorMaker, error) {
	var resource KafkaMirrorMaker
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaMirrorMaker", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaMirrorMaker resources.
type kafkaMirrorMakerState struct {
}

type KafkaMirrorMakerState struct {
}

func (KafkaMirrorMakerState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaMirrorMakerState)(nil)).Elem()
}

type kafkaMirrorMakerArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta    `pulumi:"metadata"`
	Spec     *KafkaMirrorMakerSpec `pulumi:"spec"`
}

// The set of arguments for constructing a KafkaMirrorMaker resource.
type KafkaMirrorMakerArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     KafkaMirrorMakerSpecPtrInput
}

func (KafkaMirrorMakerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaMirrorMakerArgs)(nil)).Elem()
}

type KafkaMirrorMakerInput interface {
	pulumi.Input

	ToKafkaMirrorMakerOutput() KafkaMirrorMakerOutput
	ToKafkaMirrorMakerOutputWithContext(ctx context.Context) KafkaMirrorMakerOutput
}

func (*KafkaMirrorMaker) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaMirrorMaker)(nil)).Elem()
}

func (i *KafkaMirrorMaker) ToKafkaMirrorMakerOutput() KafkaMirrorMakerOutput {
	return i.ToKafkaMirrorMakerOutputWithContext(context.Background())
}

func (i *KafkaMirrorMaker) ToKafkaMirrorMakerOutputWithContext(ctx context.Context) KafkaMirrorMakerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorMakerOutput)
}

// KafkaMirrorMakerArrayInput is an input type that accepts KafkaMirrorMakerArray and KafkaMirrorMakerArrayOutput values.
// You can construct a concrete instance of `KafkaMirrorMakerArrayInput` via:
//
//	KafkaMirrorMakerArray{ KafkaMirrorMakerArgs{...} }
type KafkaMirrorMakerArrayInput interface {
	pulumi.Input

	ToKafkaMirrorMakerArrayOutput() KafkaMirrorMakerArrayOutput
	ToKafkaMirrorMakerArrayOutputWithContext(context.Context) KafkaMirrorMakerArrayOutput
}

type KafkaMirrorMakerArray []KafkaMirrorMakerInput

func (KafkaMirrorMakerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaMirrorMaker)(nil)).Elem()
}

func (i KafkaMirrorMakerArray) ToKafkaMirrorMakerArrayOutput() KafkaMirrorMakerArrayOutput {
	return i.ToKafkaMirrorMakerArrayOutputWithContext(context.Background())
}

func (i KafkaMirrorMakerArray) ToKafkaMirrorMakerArrayOutputWithContext(ctx context.Context) KafkaMirrorMakerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorMakerArrayOutput)
}

// KafkaMirrorMakerMapInput is an input type that accepts KafkaMirrorMakerMap and KafkaMirrorMakerMapOutput values.
// You can construct a concrete instance of `KafkaMirrorMakerMapInput` via:
//
//	KafkaMirrorMakerMap{ "key": KafkaMirrorMakerArgs{...} }
type KafkaMirrorMakerMapInput interface {
	pulumi.Input

	ToKafkaMirrorMakerMapOutput() KafkaMirrorMakerMapOutput
	ToKafkaMirrorMakerMapOutputWithContext(context.Context) KafkaMirrorMakerMapOutput
}

type KafkaMirrorMakerMap map[string]KafkaMirrorMakerInput

func (KafkaMirrorMakerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaMirrorMaker)(nil)).Elem()
}

func (i KafkaMirrorMakerMap) ToKafkaMirrorMakerMapOutput() KafkaMirrorMakerMapOutput {
	return i.ToKafkaMirrorMakerMapOutputWithContext(context.Background())
}

func (i KafkaMirrorMakerMap) ToKafkaMirrorMakerMapOutputWithContext(ctx context.Context) KafkaMirrorMakerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorMakerMapOutput)
}

type KafkaMirrorMakerOutput struct{ *pulumi.OutputState }

func (KafkaMirrorMakerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaMirrorMaker)(nil)).Elem()
}

func (o KafkaMirrorMakerOutput) ToKafkaMirrorMakerOutput() KafkaMirrorMakerOutput {
	return o
}

func (o KafkaMirrorMakerOutput) ToKafkaMirrorMakerOutputWithContext(ctx context.Context) KafkaMirrorMakerOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaMirrorMakerOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaMirrorMaker) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaMirrorMakerOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaMirrorMaker) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o KafkaMirrorMakerOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *KafkaMirrorMaker) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o KafkaMirrorMakerOutput) Spec() KafkaMirrorMakerSpecOutput {
	return o.ApplyT(func(v *KafkaMirrorMaker) KafkaMirrorMakerSpecOutput { return v.Spec }).(KafkaMirrorMakerSpecOutput)
}

func (o KafkaMirrorMakerOutput) Status() KafkaMirrorMakerStatusPtrOutput {
	return o.ApplyT(func(v *KafkaMirrorMaker) KafkaMirrorMakerStatusPtrOutput { return v.Status }).(KafkaMirrorMakerStatusPtrOutput)
}

type KafkaMirrorMakerArrayOutput struct{ *pulumi.OutputState }

func (KafkaMirrorMakerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaMirrorMaker)(nil)).Elem()
}

func (o KafkaMirrorMakerArrayOutput) ToKafkaMirrorMakerArrayOutput() KafkaMirrorMakerArrayOutput {
	return o
}

func (o KafkaMirrorMakerArrayOutput) ToKafkaMirrorMakerArrayOutputWithContext(ctx context.Context) KafkaMirrorMakerArrayOutput {
	return o
}

func (o KafkaMirrorMakerArrayOutput) Index(i pulumi.IntInput) KafkaMirrorMakerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaMirrorMaker {
		return vs[0].([]*KafkaMirrorMaker)[vs[1].(int)]
	}).(KafkaMirrorMakerOutput)
}

type KafkaMirrorMakerMapOutput struct{ *pulumi.OutputState }

func (KafkaMirrorMakerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaMirrorMaker)(nil)).Elem()
}

func (o KafkaMirrorMakerMapOutput) ToKafkaMirrorMakerMapOutput() KafkaMirrorMakerMapOutput {
	return o
}

func (o KafkaMirrorMakerMapOutput) ToKafkaMirrorMakerMapOutputWithContext(ctx context.Context) KafkaMirrorMakerMapOutput {
	return o
}

func (o KafkaMirrorMakerMapOutput) MapIndex(k pulumi.StringInput) KafkaMirrorMakerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaMirrorMaker {
		return vs[0].(map[string]*KafkaMirrorMaker)[vs[1].(string)]
	}).(KafkaMirrorMakerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaMirrorMakerInput)(nil)).Elem(), &KafkaMirrorMaker{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaMirrorMakerArrayInput)(nil)).Elem(), KafkaMirrorMakerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaMirrorMakerMapInput)(nil)).Elem(), KafkaMirrorMakerMap{})
	pulumi.RegisterOutputType(KafkaMirrorMakerOutput{})
	pulumi.RegisterOutputType(KafkaMirrorMakerArrayOutput{})
	pulumi.RegisterOutputType(KafkaMirrorMakerMapOutput{})
}
