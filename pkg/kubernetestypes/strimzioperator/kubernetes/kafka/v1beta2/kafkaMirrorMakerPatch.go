// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type KafkaMirrorMakerPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput      `pulumi:"metadata"`
	Spec     KafkaMirrorMakerSpecPatchPtrOutput   `pulumi:"spec"`
	Status   KafkaMirrorMakerStatusPatchPtrOutput `pulumi:"status"`
}

// NewKafkaMirrorMakerPatch registers a new resource with the given unique name, arguments, and options.
func NewKafkaMirrorMakerPatch(ctx *pulumi.Context,
	name string, args *KafkaMirrorMakerPatchArgs, opts ...pulumi.ResourceOption) (*KafkaMirrorMakerPatch, error) {
	if args == nil {
		args = &KafkaMirrorMakerPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta2")
	args.Kind = pulumi.StringPtr("KafkaMirrorMaker")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaMirrorMakerPatch
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaMirrorMakerPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaMirrorMakerPatch gets an existing KafkaMirrorMakerPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaMirrorMakerPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaMirrorMakerPatchState, opts ...pulumi.ResourceOption) (*KafkaMirrorMakerPatch, error) {
	var resource KafkaMirrorMakerPatch
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaMirrorMakerPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaMirrorMakerPatch resources.
type kafkaMirrorMakerPatchState struct {
}

type KafkaMirrorMakerPatchState struct {
}

func (KafkaMirrorMakerPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaMirrorMakerPatchState)(nil)).Elem()
}

type kafkaMirrorMakerPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch    `pulumi:"metadata"`
	Spec     *KafkaMirrorMakerSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a KafkaMirrorMakerPatch resource.
type KafkaMirrorMakerPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     KafkaMirrorMakerSpecPatchPtrInput
}

func (KafkaMirrorMakerPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaMirrorMakerPatchArgs)(nil)).Elem()
}

type KafkaMirrorMakerPatchInput interface {
	pulumi.Input

	ToKafkaMirrorMakerPatchOutput() KafkaMirrorMakerPatchOutput
	ToKafkaMirrorMakerPatchOutputWithContext(ctx context.Context) KafkaMirrorMakerPatchOutput
}

func (*KafkaMirrorMakerPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaMirrorMakerPatch)(nil)).Elem()
}

func (i *KafkaMirrorMakerPatch) ToKafkaMirrorMakerPatchOutput() KafkaMirrorMakerPatchOutput {
	return i.ToKafkaMirrorMakerPatchOutputWithContext(context.Background())
}

func (i *KafkaMirrorMakerPatch) ToKafkaMirrorMakerPatchOutputWithContext(ctx context.Context) KafkaMirrorMakerPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorMakerPatchOutput)
}

// KafkaMirrorMakerPatchArrayInput is an input type that accepts KafkaMirrorMakerPatchArray and KafkaMirrorMakerPatchArrayOutput values.
// You can construct a concrete instance of `KafkaMirrorMakerPatchArrayInput` via:
//
//	KafkaMirrorMakerPatchArray{ KafkaMirrorMakerPatchArgs{...} }
type KafkaMirrorMakerPatchArrayInput interface {
	pulumi.Input

	ToKafkaMirrorMakerPatchArrayOutput() KafkaMirrorMakerPatchArrayOutput
	ToKafkaMirrorMakerPatchArrayOutputWithContext(context.Context) KafkaMirrorMakerPatchArrayOutput
}

type KafkaMirrorMakerPatchArray []KafkaMirrorMakerPatchInput

func (KafkaMirrorMakerPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaMirrorMakerPatch)(nil)).Elem()
}

func (i KafkaMirrorMakerPatchArray) ToKafkaMirrorMakerPatchArrayOutput() KafkaMirrorMakerPatchArrayOutput {
	return i.ToKafkaMirrorMakerPatchArrayOutputWithContext(context.Background())
}

func (i KafkaMirrorMakerPatchArray) ToKafkaMirrorMakerPatchArrayOutputWithContext(ctx context.Context) KafkaMirrorMakerPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorMakerPatchArrayOutput)
}

// KafkaMirrorMakerPatchMapInput is an input type that accepts KafkaMirrorMakerPatchMap and KafkaMirrorMakerPatchMapOutput values.
// You can construct a concrete instance of `KafkaMirrorMakerPatchMapInput` via:
//
//	KafkaMirrorMakerPatchMap{ "key": KafkaMirrorMakerPatchArgs{...} }
type KafkaMirrorMakerPatchMapInput interface {
	pulumi.Input

	ToKafkaMirrorMakerPatchMapOutput() KafkaMirrorMakerPatchMapOutput
	ToKafkaMirrorMakerPatchMapOutputWithContext(context.Context) KafkaMirrorMakerPatchMapOutput
}

type KafkaMirrorMakerPatchMap map[string]KafkaMirrorMakerPatchInput

func (KafkaMirrorMakerPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaMirrorMakerPatch)(nil)).Elem()
}

func (i KafkaMirrorMakerPatchMap) ToKafkaMirrorMakerPatchMapOutput() KafkaMirrorMakerPatchMapOutput {
	return i.ToKafkaMirrorMakerPatchMapOutputWithContext(context.Background())
}

func (i KafkaMirrorMakerPatchMap) ToKafkaMirrorMakerPatchMapOutputWithContext(ctx context.Context) KafkaMirrorMakerPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorMakerPatchMapOutput)
}

type KafkaMirrorMakerPatchOutput struct{ *pulumi.OutputState }

func (KafkaMirrorMakerPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaMirrorMakerPatch)(nil)).Elem()
}

func (o KafkaMirrorMakerPatchOutput) ToKafkaMirrorMakerPatchOutput() KafkaMirrorMakerPatchOutput {
	return o
}

func (o KafkaMirrorMakerPatchOutput) ToKafkaMirrorMakerPatchOutputWithContext(ctx context.Context) KafkaMirrorMakerPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaMirrorMakerPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaMirrorMakerPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaMirrorMakerPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaMirrorMakerPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o KafkaMirrorMakerPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *KafkaMirrorMakerPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o KafkaMirrorMakerPatchOutput) Spec() KafkaMirrorMakerSpecPatchPtrOutput {
	return o.ApplyT(func(v *KafkaMirrorMakerPatch) KafkaMirrorMakerSpecPatchPtrOutput { return v.Spec }).(KafkaMirrorMakerSpecPatchPtrOutput)
}

func (o KafkaMirrorMakerPatchOutput) Status() KafkaMirrorMakerStatusPatchPtrOutput {
	return o.ApplyT(func(v *KafkaMirrorMakerPatch) KafkaMirrorMakerStatusPatchPtrOutput { return v.Status }).(KafkaMirrorMakerStatusPatchPtrOutput)
}

type KafkaMirrorMakerPatchArrayOutput struct{ *pulumi.OutputState }

func (KafkaMirrorMakerPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaMirrorMakerPatch)(nil)).Elem()
}

func (o KafkaMirrorMakerPatchArrayOutput) ToKafkaMirrorMakerPatchArrayOutput() KafkaMirrorMakerPatchArrayOutput {
	return o
}

func (o KafkaMirrorMakerPatchArrayOutput) ToKafkaMirrorMakerPatchArrayOutputWithContext(ctx context.Context) KafkaMirrorMakerPatchArrayOutput {
	return o
}

func (o KafkaMirrorMakerPatchArrayOutput) Index(i pulumi.IntInput) KafkaMirrorMakerPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaMirrorMakerPatch {
		return vs[0].([]*KafkaMirrorMakerPatch)[vs[1].(int)]
	}).(KafkaMirrorMakerPatchOutput)
}

type KafkaMirrorMakerPatchMapOutput struct{ *pulumi.OutputState }

func (KafkaMirrorMakerPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaMirrorMakerPatch)(nil)).Elem()
}

func (o KafkaMirrorMakerPatchMapOutput) ToKafkaMirrorMakerPatchMapOutput() KafkaMirrorMakerPatchMapOutput {
	return o
}

func (o KafkaMirrorMakerPatchMapOutput) ToKafkaMirrorMakerPatchMapOutputWithContext(ctx context.Context) KafkaMirrorMakerPatchMapOutput {
	return o
}

func (o KafkaMirrorMakerPatchMapOutput) MapIndex(k pulumi.StringInput) KafkaMirrorMakerPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaMirrorMakerPatch {
		return vs[0].(map[string]*KafkaMirrorMakerPatch)[vs[1].(string)]
	}).(KafkaMirrorMakerPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaMirrorMakerPatchInput)(nil)).Elem(), &KafkaMirrorMakerPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaMirrorMakerPatchArrayInput)(nil)).Elem(), KafkaMirrorMakerPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaMirrorMakerPatchMapInput)(nil)).Elem(), KafkaMirrorMakerPatchMap{})
	pulumi.RegisterOutputType(KafkaMirrorMakerPatchOutput{})
	pulumi.RegisterOutputType(KafkaMirrorMakerPatchArrayOutput{})
	pulumi.RegisterOutputType(KafkaMirrorMakerPatchMapOutput{})
}
