// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// KafkaTopicList is a list of KafkaTopic
type KafkaTopicList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of kafkatopics. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items KafkaTopicTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewKafkaTopicList registers a new resource with the given unique name, arguments, and options.
func NewKafkaTopicList(ctx *pulumi.Context,
	name string, args *KafkaTopicListArgs, opts ...pulumi.ResourceOption) (*KafkaTopicList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta2")
	args.Kind = pulumi.StringPtr("KafkaTopicList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaTopicList
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaTopicList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaTopicList gets an existing KafkaTopicList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaTopicList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaTopicListState, opts ...pulumi.ResourceOption) (*KafkaTopicList, error) {
	var resource KafkaTopicList
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaTopicList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaTopicList resources.
type kafkaTopicListState struct {
}

type KafkaTopicListState struct {
}

func (KafkaTopicListState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaTopicListState)(nil)).Elem()
}

type kafkaTopicListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of kafkatopics. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []KafkaTopicType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a KafkaTopicList resource.
type KafkaTopicListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of kafkatopics. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items KafkaTopicTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (KafkaTopicListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaTopicListArgs)(nil)).Elem()
}

type KafkaTopicListInput interface {
	pulumi.Input

	ToKafkaTopicListOutput() KafkaTopicListOutput
	ToKafkaTopicListOutputWithContext(ctx context.Context) KafkaTopicListOutput
}

func (*KafkaTopicList) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopicList)(nil)).Elem()
}

func (i *KafkaTopicList) ToKafkaTopicListOutput() KafkaTopicListOutput {
	return i.ToKafkaTopicListOutputWithContext(context.Background())
}

func (i *KafkaTopicList) ToKafkaTopicListOutputWithContext(ctx context.Context) KafkaTopicListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicListOutput)
}

// KafkaTopicListArrayInput is an input type that accepts KafkaTopicListArray and KafkaTopicListArrayOutput values.
// You can construct a concrete instance of `KafkaTopicListArrayInput` via:
//
//	KafkaTopicListArray{ KafkaTopicListArgs{...} }
type KafkaTopicListArrayInput interface {
	pulumi.Input

	ToKafkaTopicListArrayOutput() KafkaTopicListArrayOutput
	ToKafkaTopicListArrayOutputWithContext(context.Context) KafkaTopicListArrayOutput
}

type KafkaTopicListArray []KafkaTopicListInput

func (KafkaTopicListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaTopicList)(nil)).Elem()
}

func (i KafkaTopicListArray) ToKafkaTopicListArrayOutput() KafkaTopicListArrayOutput {
	return i.ToKafkaTopicListArrayOutputWithContext(context.Background())
}

func (i KafkaTopicListArray) ToKafkaTopicListArrayOutputWithContext(ctx context.Context) KafkaTopicListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicListArrayOutput)
}

// KafkaTopicListMapInput is an input type that accepts KafkaTopicListMap and KafkaTopicListMapOutput values.
// You can construct a concrete instance of `KafkaTopicListMapInput` via:
//
//	KafkaTopicListMap{ "key": KafkaTopicListArgs{...} }
type KafkaTopicListMapInput interface {
	pulumi.Input

	ToKafkaTopicListMapOutput() KafkaTopicListMapOutput
	ToKafkaTopicListMapOutputWithContext(context.Context) KafkaTopicListMapOutput
}

type KafkaTopicListMap map[string]KafkaTopicListInput

func (KafkaTopicListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaTopicList)(nil)).Elem()
}

func (i KafkaTopicListMap) ToKafkaTopicListMapOutput() KafkaTopicListMapOutput {
	return i.ToKafkaTopicListMapOutputWithContext(context.Background())
}

func (i KafkaTopicListMap) ToKafkaTopicListMapOutputWithContext(ctx context.Context) KafkaTopicListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicListMapOutput)
}

type KafkaTopicListOutput struct{ *pulumi.OutputState }

func (KafkaTopicListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopicList)(nil)).Elem()
}

func (o KafkaTopicListOutput) ToKafkaTopicListOutput() KafkaTopicListOutput {
	return o
}

func (o KafkaTopicListOutput) ToKafkaTopicListOutputWithContext(ctx context.Context) KafkaTopicListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaTopicListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTopicList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of kafkatopics. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o KafkaTopicListOutput) Items() KafkaTopicTypeArrayOutput {
	return o.ApplyT(func(v *KafkaTopicList) KafkaTopicTypeArrayOutput { return v.Items }).(KafkaTopicTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaTopicListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTopicList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaTopicListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *KafkaTopicList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type KafkaTopicListArrayOutput struct{ *pulumi.OutputState }

func (KafkaTopicListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaTopicList)(nil)).Elem()
}

func (o KafkaTopicListArrayOutput) ToKafkaTopicListArrayOutput() KafkaTopicListArrayOutput {
	return o
}

func (o KafkaTopicListArrayOutput) ToKafkaTopicListArrayOutputWithContext(ctx context.Context) KafkaTopicListArrayOutput {
	return o
}

func (o KafkaTopicListArrayOutput) Index(i pulumi.IntInput) KafkaTopicListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaTopicList {
		return vs[0].([]*KafkaTopicList)[vs[1].(int)]
	}).(KafkaTopicListOutput)
}

type KafkaTopicListMapOutput struct{ *pulumi.OutputState }

func (KafkaTopicListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaTopicList)(nil)).Elem()
}

func (o KafkaTopicListMapOutput) ToKafkaTopicListMapOutput() KafkaTopicListMapOutput {
	return o
}

func (o KafkaTopicListMapOutput) ToKafkaTopicListMapOutputWithContext(ctx context.Context) KafkaTopicListMapOutput {
	return o
}

func (o KafkaTopicListMapOutput) MapIndex(k pulumi.StringInput) KafkaTopicListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaTopicList {
		return vs[0].(map[string]*KafkaTopicList)[vs[1].(string)]
	}).(KafkaTopicListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicListInput)(nil)).Elem(), &KafkaTopicList{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicListArrayInput)(nil)).Elem(), KafkaTopicListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicListMapInput)(nil)).Elem(), KafkaTopicListMap{})
	pulumi.RegisterOutputType(KafkaTopicListOutput{})
	pulumi.RegisterOutputType(KafkaTopicListArrayOutput{})
	pulumi.RegisterOutputType(KafkaTopicListMapOutput{})
}
