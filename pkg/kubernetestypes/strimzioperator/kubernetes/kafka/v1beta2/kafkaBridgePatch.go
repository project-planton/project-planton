// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type KafkaBridgePatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     KafkaBridgeSpecPatchPtrOutput   `pulumi:"spec"`
	Status   KafkaBridgeStatusPatchPtrOutput `pulumi:"status"`
}

// NewKafkaBridgePatch registers a new resource with the given unique name, arguments, and options.
func NewKafkaBridgePatch(ctx *pulumi.Context,
	name string, args *KafkaBridgePatchArgs, opts ...pulumi.ResourceOption) (*KafkaBridgePatch, error) {
	if args == nil {
		args = &KafkaBridgePatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta2")
	args.Kind = pulumi.StringPtr("KafkaBridge")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaBridgePatch
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaBridgePatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaBridgePatch gets an existing KafkaBridgePatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaBridgePatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaBridgePatchState, opts ...pulumi.ResourceOption) (*KafkaBridgePatch, error) {
	var resource KafkaBridgePatch
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaBridgePatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaBridgePatch resources.
type kafkaBridgePatchState struct {
}

type KafkaBridgePatchState struct {
}

func (KafkaBridgePatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaBridgePatchState)(nil)).Elem()
}

type kafkaBridgePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *KafkaBridgeSpecPatch   `pulumi:"spec"`
}

// The set of arguments for constructing a KafkaBridgePatch resource.
type KafkaBridgePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     KafkaBridgeSpecPatchPtrInput
}

func (KafkaBridgePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaBridgePatchArgs)(nil)).Elem()
}

type KafkaBridgePatchInput interface {
	pulumi.Input

	ToKafkaBridgePatchOutput() KafkaBridgePatchOutput
	ToKafkaBridgePatchOutputWithContext(ctx context.Context) KafkaBridgePatchOutput
}

func (*KafkaBridgePatch) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaBridgePatch)(nil)).Elem()
}

func (i *KafkaBridgePatch) ToKafkaBridgePatchOutput() KafkaBridgePatchOutput {
	return i.ToKafkaBridgePatchOutputWithContext(context.Background())
}

func (i *KafkaBridgePatch) ToKafkaBridgePatchOutputWithContext(ctx context.Context) KafkaBridgePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaBridgePatchOutput)
}

// KafkaBridgePatchArrayInput is an input type that accepts KafkaBridgePatchArray and KafkaBridgePatchArrayOutput values.
// You can construct a concrete instance of `KafkaBridgePatchArrayInput` via:
//
//	KafkaBridgePatchArray{ KafkaBridgePatchArgs{...} }
type KafkaBridgePatchArrayInput interface {
	pulumi.Input

	ToKafkaBridgePatchArrayOutput() KafkaBridgePatchArrayOutput
	ToKafkaBridgePatchArrayOutputWithContext(context.Context) KafkaBridgePatchArrayOutput
}

type KafkaBridgePatchArray []KafkaBridgePatchInput

func (KafkaBridgePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaBridgePatch)(nil)).Elem()
}

func (i KafkaBridgePatchArray) ToKafkaBridgePatchArrayOutput() KafkaBridgePatchArrayOutput {
	return i.ToKafkaBridgePatchArrayOutputWithContext(context.Background())
}

func (i KafkaBridgePatchArray) ToKafkaBridgePatchArrayOutputWithContext(ctx context.Context) KafkaBridgePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaBridgePatchArrayOutput)
}

// KafkaBridgePatchMapInput is an input type that accepts KafkaBridgePatchMap and KafkaBridgePatchMapOutput values.
// You can construct a concrete instance of `KafkaBridgePatchMapInput` via:
//
//	KafkaBridgePatchMap{ "key": KafkaBridgePatchArgs{...} }
type KafkaBridgePatchMapInput interface {
	pulumi.Input

	ToKafkaBridgePatchMapOutput() KafkaBridgePatchMapOutput
	ToKafkaBridgePatchMapOutputWithContext(context.Context) KafkaBridgePatchMapOutput
}

type KafkaBridgePatchMap map[string]KafkaBridgePatchInput

func (KafkaBridgePatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaBridgePatch)(nil)).Elem()
}

func (i KafkaBridgePatchMap) ToKafkaBridgePatchMapOutput() KafkaBridgePatchMapOutput {
	return i.ToKafkaBridgePatchMapOutputWithContext(context.Background())
}

func (i KafkaBridgePatchMap) ToKafkaBridgePatchMapOutputWithContext(ctx context.Context) KafkaBridgePatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaBridgePatchMapOutput)
}

type KafkaBridgePatchOutput struct{ *pulumi.OutputState }

func (KafkaBridgePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaBridgePatch)(nil)).Elem()
}

func (o KafkaBridgePatchOutput) ToKafkaBridgePatchOutput() KafkaBridgePatchOutput {
	return o
}

func (o KafkaBridgePatchOutput) ToKafkaBridgePatchOutputWithContext(ctx context.Context) KafkaBridgePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaBridgePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaBridgePatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaBridgePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaBridgePatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o KafkaBridgePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *KafkaBridgePatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o KafkaBridgePatchOutput) Spec() KafkaBridgeSpecPatchPtrOutput {
	return o.ApplyT(func(v *KafkaBridgePatch) KafkaBridgeSpecPatchPtrOutput { return v.Spec }).(KafkaBridgeSpecPatchPtrOutput)
}

func (o KafkaBridgePatchOutput) Status() KafkaBridgeStatusPatchPtrOutput {
	return o.ApplyT(func(v *KafkaBridgePatch) KafkaBridgeStatusPatchPtrOutput { return v.Status }).(KafkaBridgeStatusPatchPtrOutput)
}

type KafkaBridgePatchArrayOutput struct{ *pulumi.OutputState }

func (KafkaBridgePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaBridgePatch)(nil)).Elem()
}

func (o KafkaBridgePatchArrayOutput) ToKafkaBridgePatchArrayOutput() KafkaBridgePatchArrayOutput {
	return o
}

func (o KafkaBridgePatchArrayOutput) ToKafkaBridgePatchArrayOutputWithContext(ctx context.Context) KafkaBridgePatchArrayOutput {
	return o
}

func (o KafkaBridgePatchArrayOutput) Index(i pulumi.IntInput) KafkaBridgePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaBridgePatch {
		return vs[0].([]*KafkaBridgePatch)[vs[1].(int)]
	}).(KafkaBridgePatchOutput)
}

type KafkaBridgePatchMapOutput struct{ *pulumi.OutputState }

func (KafkaBridgePatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaBridgePatch)(nil)).Elem()
}

func (o KafkaBridgePatchMapOutput) ToKafkaBridgePatchMapOutput() KafkaBridgePatchMapOutput {
	return o
}

func (o KafkaBridgePatchMapOutput) ToKafkaBridgePatchMapOutputWithContext(ctx context.Context) KafkaBridgePatchMapOutput {
	return o
}

func (o KafkaBridgePatchMapOutput) MapIndex(k pulumi.StringInput) KafkaBridgePatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaBridgePatch {
		return vs[0].(map[string]*KafkaBridgePatch)[vs[1].(string)]
	}).(KafkaBridgePatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaBridgePatchInput)(nil)).Elem(), &KafkaBridgePatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaBridgePatchArrayInput)(nil)).Elem(), KafkaBridgePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaBridgePatchMapInput)(nil)).Elem(), KafkaBridgePatchMap{})
	pulumi.RegisterOutputType(KafkaBridgePatchOutput{})
	pulumi.RegisterOutputType(KafkaBridgePatchArrayOutput{})
	pulumi.RegisterOutputType(KafkaBridgePatchMapOutput{})
}
