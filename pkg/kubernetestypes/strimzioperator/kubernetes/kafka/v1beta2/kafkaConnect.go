// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KafkaConnect struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput     `pulumi:"metadata"`
	Spec     KafkaConnectSpecOutput      `pulumi:"spec"`
	Status   KafkaConnectStatusPtrOutput `pulumi:"status"`
}

// NewKafkaConnect registers a new resource with the given unique name, arguments, and options.
func NewKafkaConnect(ctx *pulumi.Context,
	name string, args *KafkaConnectArgs, opts ...pulumi.ResourceOption) (*KafkaConnect, error) {
	if args == nil {
		args = &KafkaConnectArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta2")
	args.Kind = pulumi.StringPtr("KafkaConnect")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaConnect
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaConnect", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaConnect gets an existing KafkaConnect resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaConnect(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaConnectState, opts ...pulumi.ResourceOption) (*KafkaConnect, error) {
	var resource KafkaConnect
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaConnect", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaConnect resources.
type kafkaConnectState struct {
}

type KafkaConnectState struct {
}

func (KafkaConnectState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaConnectState)(nil)).Elem()
}

type kafkaConnectArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *KafkaConnectSpec  `pulumi:"spec"`
}

// The set of arguments for constructing a KafkaConnect resource.
type KafkaConnectArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     KafkaConnectSpecPtrInput
}

func (KafkaConnectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaConnectArgs)(nil)).Elem()
}

type KafkaConnectInput interface {
	pulumi.Input

	ToKafkaConnectOutput() KafkaConnectOutput
	ToKafkaConnectOutputWithContext(ctx context.Context) KafkaConnectOutput
}

func (*KafkaConnect) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaConnect)(nil)).Elem()
}

func (i *KafkaConnect) ToKafkaConnectOutput() KafkaConnectOutput {
	return i.ToKafkaConnectOutputWithContext(context.Background())
}

func (i *KafkaConnect) ToKafkaConnectOutputWithContext(ctx context.Context) KafkaConnectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaConnectOutput)
}

// KafkaConnectArrayInput is an input type that accepts KafkaConnectArray and KafkaConnectArrayOutput values.
// You can construct a concrete instance of `KafkaConnectArrayInput` via:
//
//	KafkaConnectArray{ KafkaConnectArgs{...} }
type KafkaConnectArrayInput interface {
	pulumi.Input

	ToKafkaConnectArrayOutput() KafkaConnectArrayOutput
	ToKafkaConnectArrayOutputWithContext(context.Context) KafkaConnectArrayOutput
}

type KafkaConnectArray []KafkaConnectInput

func (KafkaConnectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaConnect)(nil)).Elem()
}

func (i KafkaConnectArray) ToKafkaConnectArrayOutput() KafkaConnectArrayOutput {
	return i.ToKafkaConnectArrayOutputWithContext(context.Background())
}

func (i KafkaConnectArray) ToKafkaConnectArrayOutputWithContext(ctx context.Context) KafkaConnectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaConnectArrayOutput)
}

// KafkaConnectMapInput is an input type that accepts KafkaConnectMap and KafkaConnectMapOutput values.
// You can construct a concrete instance of `KafkaConnectMapInput` via:
//
//	KafkaConnectMap{ "key": KafkaConnectArgs{...} }
type KafkaConnectMapInput interface {
	pulumi.Input

	ToKafkaConnectMapOutput() KafkaConnectMapOutput
	ToKafkaConnectMapOutputWithContext(context.Context) KafkaConnectMapOutput
}

type KafkaConnectMap map[string]KafkaConnectInput

func (KafkaConnectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaConnect)(nil)).Elem()
}

func (i KafkaConnectMap) ToKafkaConnectMapOutput() KafkaConnectMapOutput {
	return i.ToKafkaConnectMapOutputWithContext(context.Background())
}

func (i KafkaConnectMap) ToKafkaConnectMapOutputWithContext(ctx context.Context) KafkaConnectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaConnectMapOutput)
}

type KafkaConnectOutput struct{ *pulumi.OutputState }

func (KafkaConnectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaConnect)(nil)).Elem()
}

func (o KafkaConnectOutput) ToKafkaConnectOutput() KafkaConnectOutput {
	return o
}

func (o KafkaConnectOutput) ToKafkaConnectOutputWithContext(ctx context.Context) KafkaConnectOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaConnectOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnect) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaConnectOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaConnect) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o KafkaConnectOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *KafkaConnect) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o KafkaConnectOutput) Spec() KafkaConnectSpecOutput {
	return o.ApplyT(func(v *KafkaConnect) KafkaConnectSpecOutput { return v.Spec }).(KafkaConnectSpecOutput)
}

func (o KafkaConnectOutput) Status() KafkaConnectStatusPtrOutput {
	return o.ApplyT(func(v *KafkaConnect) KafkaConnectStatusPtrOutput { return v.Status }).(KafkaConnectStatusPtrOutput)
}

type KafkaConnectArrayOutput struct{ *pulumi.OutputState }

func (KafkaConnectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaConnect)(nil)).Elem()
}

func (o KafkaConnectArrayOutput) ToKafkaConnectArrayOutput() KafkaConnectArrayOutput {
	return o
}

func (o KafkaConnectArrayOutput) ToKafkaConnectArrayOutputWithContext(ctx context.Context) KafkaConnectArrayOutput {
	return o
}

func (o KafkaConnectArrayOutput) Index(i pulumi.IntInput) KafkaConnectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaConnect {
		return vs[0].([]*KafkaConnect)[vs[1].(int)]
	}).(KafkaConnectOutput)
}

type KafkaConnectMapOutput struct{ *pulumi.OutputState }

func (KafkaConnectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaConnect)(nil)).Elem()
}

func (o KafkaConnectMapOutput) ToKafkaConnectMapOutput() KafkaConnectMapOutput {
	return o
}

func (o KafkaConnectMapOutput) ToKafkaConnectMapOutputWithContext(ctx context.Context) KafkaConnectMapOutput {
	return o
}

func (o KafkaConnectMapOutput) MapIndex(k pulumi.StringInput) KafkaConnectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaConnect {
		return vs[0].(map[string]*KafkaConnect)[vs[1].(string)]
	}).(KafkaConnectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaConnectInput)(nil)).Elem(), &KafkaConnect{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaConnectArrayInput)(nil)).Elem(), KafkaConnectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaConnectMapInput)(nil)).Elem(), KafkaConnectMap{})
	pulumi.RegisterOutputType(KafkaConnectOutput{})
	pulumi.RegisterOutputType(KafkaConnectArrayOutput{})
	pulumi.RegisterOutputType(KafkaConnectMapOutput{})
}
