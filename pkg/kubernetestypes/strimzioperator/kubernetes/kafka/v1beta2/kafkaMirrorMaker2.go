// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KafkaMirrorMaker2 struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput          `pulumi:"metadata"`
	Spec     KafkaMirrorMaker2SpecOutput      `pulumi:"spec"`
	Status   KafkaMirrorMaker2StatusPtrOutput `pulumi:"status"`
}

// NewKafkaMirrorMaker2 registers a new resource with the given unique name, arguments, and options.
func NewKafkaMirrorMaker2(ctx *pulumi.Context,
	name string, args *KafkaMirrorMaker2Args, opts ...pulumi.ResourceOption) (*KafkaMirrorMaker2, error) {
	if args == nil {
		args = &KafkaMirrorMaker2Args{}
	}

	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta2")
	args.Kind = pulumi.StringPtr("KafkaMirrorMaker2")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaMirrorMaker2
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaMirrorMaker2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaMirrorMaker2 gets an existing KafkaMirrorMaker2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaMirrorMaker2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaMirrorMaker2State, opts ...pulumi.ResourceOption) (*KafkaMirrorMaker2, error) {
	var resource KafkaMirrorMaker2
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaMirrorMaker2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaMirrorMaker2 resources.
type kafkaMirrorMaker2State struct {
}

type KafkaMirrorMaker2State struct {
}

func (KafkaMirrorMaker2State) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaMirrorMaker2State)(nil)).Elem()
}

type kafkaMirrorMaker2Args struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta     `pulumi:"metadata"`
	Spec     *KafkaMirrorMaker2Spec `pulumi:"spec"`
}

// The set of arguments for constructing a KafkaMirrorMaker2 resource.
type KafkaMirrorMaker2Args struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     KafkaMirrorMaker2SpecPtrInput
}

func (KafkaMirrorMaker2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaMirrorMaker2Args)(nil)).Elem()
}

type KafkaMirrorMaker2Input interface {
	pulumi.Input

	ToKafkaMirrorMaker2Output() KafkaMirrorMaker2Output
	ToKafkaMirrorMaker2OutputWithContext(ctx context.Context) KafkaMirrorMaker2Output
}

func (*KafkaMirrorMaker2) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaMirrorMaker2)(nil)).Elem()
}

func (i *KafkaMirrorMaker2) ToKafkaMirrorMaker2Output() KafkaMirrorMaker2Output {
	return i.ToKafkaMirrorMaker2OutputWithContext(context.Background())
}

func (i *KafkaMirrorMaker2) ToKafkaMirrorMaker2OutputWithContext(ctx context.Context) KafkaMirrorMaker2Output {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorMaker2Output)
}

// KafkaMirrorMaker2ArrayInput is an input type that accepts KafkaMirrorMaker2Array and KafkaMirrorMaker2ArrayOutput values.
// You can construct a concrete instance of `KafkaMirrorMaker2ArrayInput` via:
//
//	KafkaMirrorMaker2Array{ KafkaMirrorMaker2Args{...} }
type KafkaMirrorMaker2ArrayInput interface {
	pulumi.Input

	ToKafkaMirrorMaker2ArrayOutput() KafkaMirrorMaker2ArrayOutput
	ToKafkaMirrorMaker2ArrayOutputWithContext(context.Context) KafkaMirrorMaker2ArrayOutput
}

type KafkaMirrorMaker2Array []KafkaMirrorMaker2Input

func (KafkaMirrorMaker2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaMirrorMaker2)(nil)).Elem()
}

func (i KafkaMirrorMaker2Array) ToKafkaMirrorMaker2ArrayOutput() KafkaMirrorMaker2ArrayOutput {
	return i.ToKafkaMirrorMaker2ArrayOutputWithContext(context.Background())
}

func (i KafkaMirrorMaker2Array) ToKafkaMirrorMaker2ArrayOutputWithContext(ctx context.Context) KafkaMirrorMaker2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorMaker2ArrayOutput)
}

// KafkaMirrorMaker2MapInput is an input type that accepts KafkaMirrorMaker2Map and KafkaMirrorMaker2MapOutput values.
// You can construct a concrete instance of `KafkaMirrorMaker2MapInput` via:
//
//	KafkaMirrorMaker2Map{ "key": KafkaMirrorMaker2Args{...} }
type KafkaMirrorMaker2MapInput interface {
	pulumi.Input

	ToKafkaMirrorMaker2MapOutput() KafkaMirrorMaker2MapOutput
	ToKafkaMirrorMaker2MapOutputWithContext(context.Context) KafkaMirrorMaker2MapOutput
}

type KafkaMirrorMaker2Map map[string]KafkaMirrorMaker2Input

func (KafkaMirrorMaker2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaMirrorMaker2)(nil)).Elem()
}

func (i KafkaMirrorMaker2Map) ToKafkaMirrorMaker2MapOutput() KafkaMirrorMaker2MapOutput {
	return i.ToKafkaMirrorMaker2MapOutputWithContext(context.Background())
}

func (i KafkaMirrorMaker2Map) ToKafkaMirrorMaker2MapOutputWithContext(ctx context.Context) KafkaMirrorMaker2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorMaker2MapOutput)
}

type KafkaMirrorMaker2Output struct{ *pulumi.OutputState }

func (KafkaMirrorMaker2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaMirrorMaker2)(nil)).Elem()
}

func (o KafkaMirrorMaker2Output) ToKafkaMirrorMaker2Output() KafkaMirrorMaker2Output {
	return o
}

func (o KafkaMirrorMaker2Output) ToKafkaMirrorMaker2OutputWithContext(ctx context.Context) KafkaMirrorMaker2Output {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaMirrorMaker2Output) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaMirrorMaker2) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaMirrorMaker2Output) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaMirrorMaker2) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o KafkaMirrorMaker2Output) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *KafkaMirrorMaker2) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o KafkaMirrorMaker2Output) Spec() KafkaMirrorMaker2SpecOutput {
	return o.ApplyT(func(v *KafkaMirrorMaker2) KafkaMirrorMaker2SpecOutput { return v.Spec }).(KafkaMirrorMaker2SpecOutput)
}

func (o KafkaMirrorMaker2Output) Status() KafkaMirrorMaker2StatusPtrOutput {
	return o.ApplyT(func(v *KafkaMirrorMaker2) KafkaMirrorMaker2StatusPtrOutput { return v.Status }).(KafkaMirrorMaker2StatusPtrOutput)
}

type KafkaMirrorMaker2ArrayOutput struct{ *pulumi.OutputState }

func (KafkaMirrorMaker2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaMirrorMaker2)(nil)).Elem()
}

func (o KafkaMirrorMaker2ArrayOutput) ToKafkaMirrorMaker2ArrayOutput() KafkaMirrorMaker2ArrayOutput {
	return o
}

func (o KafkaMirrorMaker2ArrayOutput) ToKafkaMirrorMaker2ArrayOutputWithContext(ctx context.Context) KafkaMirrorMaker2ArrayOutput {
	return o
}

func (o KafkaMirrorMaker2ArrayOutput) Index(i pulumi.IntInput) KafkaMirrorMaker2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaMirrorMaker2 {
		return vs[0].([]*KafkaMirrorMaker2)[vs[1].(int)]
	}).(KafkaMirrorMaker2Output)
}

type KafkaMirrorMaker2MapOutput struct{ *pulumi.OutputState }

func (KafkaMirrorMaker2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaMirrorMaker2)(nil)).Elem()
}

func (o KafkaMirrorMaker2MapOutput) ToKafkaMirrorMaker2MapOutput() KafkaMirrorMaker2MapOutput {
	return o
}

func (o KafkaMirrorMaker2MapOutput) ToKafkaMirrorMaker2MapOutputWithContext(ctx context.Context) KafkaMirrorMaker2MapOutput {
	return o
}

func (o KafkaMirrorMaker2MapOutput) MapIndex(k pulumi.StringInput) KafkaMirrorMaker2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaMirrorMaker2 {
		return vs[0].(map[string]*KafkaMirrorMaker2)[vs[1].(string)]
	}).(KafkaMirrorMaker2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaMirrorMaker2Input)(nil)).Elem(), &KafkaMirrorMaker2{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaMirrorMaker2ArrayInput)(nil)).Elem(), KafkaMirrorMaker2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaMirrorMaker2MapInput)(nil)).Elem(), KafkaMirrorMaker2Map{})
	pulumi.RegisterOutputType(KafkaMirrorMaker2Output{})
	pulumi.RegisterOutputType(KafkaMirrorMaker2ArrayOutput{})
	pulumi.RegisterOutputType(KafkaMirrorMaker2MapOutput{})
}
