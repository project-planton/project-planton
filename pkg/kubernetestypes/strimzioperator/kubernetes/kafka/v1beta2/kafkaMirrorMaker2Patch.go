// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type KafkaMirrorMaker2Patch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput       `pulumi:"metadata"`
	Spec     KafkaMirrorMaker2SpecPatchPtrOutput   `pulumi:"spec"`
	Status   KafkaMirrorMaker2StatusPatchPtrOutput `pulumi:"status"`
}

// NewKafkaMirrorMaker2Patch registers a new resource with the given unique name, arguments, and options.
func NewKafkaMirrorMaker2Patch(ctx *pulumi.Context,
	name string, args *KafkaMirrorMaker2PatchArgs, opts ...pulumi.ResourceOption) (*KafkaMirrorMaker2Patch, error) {
	if args == nil {
		args = &KafkaMirrorMaker2PatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta2")
	args.Kind = pulumi.StringPtr("KafkaMirrorMaker2")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaMirrorMaker2Patch
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaMirrorMaker2Patch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaMirrorMaker2Patch gets an existing KafkaMirrorMaker2Patch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaMirrorMaker2Patch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaMirrorMaker2PatchState, opts ...pulumi.ResourceOption) (*KafkaMirrorMaker2Patch, error) {
	var resource KafkaMirrorMaker2Patch
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaMirrorMaker2Patch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaMirrorMaker2Patch resources.
type kafkaMirrorMaker2PatchState struct {
}

type KafkaMirrorMaker2PatchState struct {
}

func (KafkaMirrorMaker2PatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaMirrorMaker2PatchState)(nil)).Elem()
}

type kafkaMirrorMaker2PatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch     `pulumi:"metadata"`
	Spec     *KafkaMirrorMaker2SpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a KafkaMirrorMaker2Patch resource.
type KafkaMirrorMaker2PatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     KafkaMirrorMaker2SpecPatchPtrInput
}

func (KafkaMirrorMaker2PatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaMirrorMaker2PatchArgs)(nil)).Elem()
}

type KafkaMirrorMaker2PatchInput interface {
	pulumi.Input

	ToKafkaMirrorMaker2PatchOutput() KafkaMirrorMaker2PatchOutput
	ToKafkaMirrorMaker2PatchOutputWithContext(ctx context.Context) KafkaMirrorMaker2PatchOutput
}

func (*KafkaMirrorMaker2Patch) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaMirrorMaker2Patch)(nil)).Elem()
}

func (i *KafkaMirrorMaker2Patch) ToKafkaMirrorMaker2PatchOutput() KafkaMirrorMaker2PatchOutput {
	return i.ToKafkaMirrorMaker2PatchOutputWithContext(context.Background())
}

func (i *KafkaMirrorMaker2Patch) ToKafkaMirrorMaker2PatchOutputWithContext(ctx context.Context) KafkaMirrorMaker2PatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorMaker2PatchOutput)
}

// KafkaMirrorMaker2PatchArrayInput is an input type that accepts KafkaMirrorMaker2PatchArray and KafkaMirrorMaker2PatchArrayOutput values.
// You can construct a concrete instance of `KafkaMirrorMaker2PatchArrayInput` via:
//
//	KafkaMirrorMaker2PatchArray{ KafkaMirrorMaker2PatchArgs{...} }
type KafkaMirrorMaker2PatchArrayInput interface {
	pulumi.Input

	ToKafkaMirrorMaker2PatchArrayOutput() KafkaMirrorMaker2PatchArrayOutput
	ToKafkaMirrorMaker2PatchArrayOutputWithContext(context.Context) KafkaMirrorMaker2PatchArrayOutput
}

type KafkaMirrorMaker2PatchArray []KafkaMirrorMaker2PatchInput

func (KafkaMirrorMaker2PatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaMirrorMaker2Patch)(nil)).Elem()
}

func (i KafkaMirrorMaker2PatchArray) ToKafkaMirrorMaker2PatchArrayOutput() KafkaMirrorMaker2PatchArrayOutput {
	return i.ToKafkaMirrorMaker2PatchArrayOutputWithContext(context.Background())
}

func (i KafkaMirrorMaker2PatchArray) ToKafkaMirrorMaker2PatchArrayOutputWithContext(ctx context.Context) KafkaMirrorMaker2PatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorMaker2PatchArrayOutput)
}

// KafkaMirrorMaker2PatchMapInput is an input type that accepts KafkaMirrorMaker2PatchMap and KafkaMirrorMaker2PatchMapOutput values.
// You can construct a concrete instance of `KafkaMirrorMaker2PatchMapInput` via:
//
//	KafkaMirrorMaker2PatchMap{ "key": KafkaMirrorMaker2PatchArgs{...} }
type KafkaMirrorMaker2PatchMapInput interface {
	pulumi.Input

	ToKafkaMirrorMaker2PatchMapOutput() KafkaMirrorMaker2PatchMapOutput
	ToKafkaMirrorMaker2PatchMapOutputWithContext(context.Context) KafkaMirrorMaker2PatchMapOutput
}

type KafkaMirrorMaker2PatchMap map[string]KafkaMirrorMaker2PatchInput

func (KafkaMirrorMaker2PatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaMirrorMaker2Patch)(nil)).Elem()
}

func (i KafkaMirrorMaker2PatchMap) ToKafkaMirrorMaker2PatchMapOutput() KafkaMirrorMaker2PatchMapOutput {
	return i.ToKafkaMirrorMaker2PatchMapOutputWithContext(context.Background())
}

func (i KafkaMirrorMaker2PatchMap) ToKafkaMirrorMaker2PatchMapOutputWithContext(ctx context.Context) KafkaMirrorMaker2PatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorMaker2PatchMapOutput)
}

type KafkaMirrorMaker2PatchOutput struct{ *pulumi.OutputState }

func (KafkaMirrorMaker2PatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaMirrorMaker2Patch)(nil)).Elem()
}

func (o KafkaMirrorMaker2PatchOutput) ToKafkaMirrorMaker2PatchOutput() KafkaMirrorMaker2PatchOutput {
	return o
}

func (o KafkaMirrorMaker2PatchOutput) ToKafkaMirrorMaker2PatchOutputWithContext(ctx context.Context) KafkaMirrorMaker2PatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaMirrorMaker2PatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaMirrorMaker2Patch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaMirrorMaker2PatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaMirrorMaker2Patch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o KafkaMirrorMaker2PatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *KafkaMirrorMaker2Patch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o KafkaMirrorMaker2PatchOutput) Spec() KafkaMirrorMaker2SpecPatchPtrOutput {
	return o.ApplyT(func(v *KafkaMirrorMaker2Patch) KafkaMirrorMaker2SpecPatchPtrOutput { return v.Spec }).(KafkaMirrorMaker2SpecPatchPtrOutput)
}

func (o KafkaMirrorMaker2PatchOutput) Status() KafkaMirrorMaker2StatusPatchPtrOutput {
	return o.ApplyT(func(v *KafkaMirrorMaker2Patch) KafkaMirrorMaker2StatusPatchPtrOutput { return v.Status }).(KafkaMirrorMaker2StatusPatchPtrOutput)
}

type KafkaMirrorMaker2PatchArrayOutput struct{ *pulumi.OutputState }

func (KafkaMirrorMaker2PatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaMirrorMaker2Patch)(nil)).Elem()
}

func (o KafkaMirrorMaker2PatchArrayOutput) ToKafkaMirrorMaker2PatchArrayOutput() KafkaMirrorMaker2PatchArrayOutput {
	return o
}

func (o KafkaMirrorMaker2PatchArrayOutput) ToKafkaMirrorMaker2PatchArrayOutputWithContext(ctx context.Context) KafkaMirrorMaker2PatchArrayOutput {
	return o
}

func (o KafkaMirrorMaker2PatchArrayOutput) Index(i pulumi.IntInput) KafkaMirrorMaker2PatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaMirrorMaker2Patch {
		return vs[0].([]*KafkaMirrorMaker2Patch)[vs[1].(int)]
	}).(KafkaMirrorMaker2PatchOutput)
}

type KafkaMirrorMaker2PatchMapOutput struct{ *pulumi.OutputState }

func (KafkaMirrorMaker2PatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaMirrorMaker2Patch)(nil)).Elem()
}

func (o KafkaMirrorMaker2PatchMapOutput) ToKafkaMirrorMaker2PatchMapOutput() KafkaMirrorMaker2PatchMapOutput {
	return o
}

func (o KafkaMirrorMaker2PatchMapOutput) ToKafkaMirrorMaker2PatchMapOutputWithContext(ctx context.Context) KafkaMirrorMaker2PatchMapOutput {
	return o
}

func (o KafkaMirrorMaker2PatchMapOutput) MapIndex(k pulumi.StringInput) KafkaMirrorMaker2PatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaMirrorMaker2Patch {
		return vs[0].(map[string]*KafkaMirrorMaker2Patch)[vs[1].(string)]
	}).(KafkaMirrorMaker2PatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaMirrorMaker2PatchInput)(nil)).Elem(), &KafkaMirrorMaker2Patch{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaMirrorMaker2PatchArrayInput)(nil)).Elem(), KafkaMirrorMaker2PatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaMirrorMaker2PatchMapInput)(nil)).Elem(), KafkaMirrorMaker2PatchMap{})
	pulumi.RegisterOutputType(KafkaMirrorMaker2PatchOutput{})
	pulumi.RegisterOutputType(KafkaMirrorMaker2PatchArrayOutput{})
	pulumi.RegisterOutputType(KafkaMirrorMaker2PatchMapOutput{})
}
