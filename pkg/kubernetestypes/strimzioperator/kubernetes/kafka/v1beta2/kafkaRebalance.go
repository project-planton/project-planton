// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KafkaRebalance struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput       `pulumi:"metadata"`
	Spec     KafkaRebalanceSpecOutput      `pulumi:"spec"`
	Status   KafkaRebalanceStatusPtrOutput `pulumi:"status"`
}

// NewKafkaRebalance registers a new resource with the given unique name, arguments, and options.
func NewKafkaRebalance(ctx *pulumi.Context,
	name string, args *KafkaRebalanceArgs, opts ...pulumi.ResourceOption) (*KafkaRebalance, error) {
	if args == nil {
		args = &KafkaRebalanceArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta2")
	args.Kind = pulumi.StringPtr("KafkaRebalance")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaRebalance
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaRebalance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaRebalance gets an existing KafkaRebalance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaRebalance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaRebalanceState, opts ...pulumi.ResourceOption) (*KafkaRebalance, error) {
	var resource KafkaRebalance
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaRebalance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaRebalance resources.
type kafkaRebalanceState struct {
}

type KafkaRebalanceState struct {
}

func (KafkaRebalanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaRebalanceState)(nil)).Elem()
}

type kafkaRebalanceArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta  `pulumi:"metadata"`
	Spec     *KafkaRebalanceSpec `pulumi:"spec"`
}

// The set of arguments for constructing a KafkaRebalance resource.
type KafkaRebalanceArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     KafkaRebalanceSpecPtrInput
}

func (KafkaRebalanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaRebalanceArgs)(nil)).Elem()
}

type KafkaRebalanceInput interface {
	pulumi.Input

	ToKafkaRebalanceOutput() KafkaRebalanceOutput
	ToKafkaRebalanceOutputWithContext(ctx context.Context) KafkaRebalanceOutput
}

func (*KafkaRebalance) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaRebalance)(nil)).Elem()
}

func (i *KafkaRebalance) ToKafkaRebalanceOutput() KafkaRebalanceOutput {
	return i.ToKafkaRebalanceOutputWithContext(context.Background())
}

func (i *KafkaRebalance) ToKafkaRebalanceOutputWithContext(ctx context.Context) KafkaRebalanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaRebalanceOutput)
}

// KafkaRebalanceArrayInput is an input type that accepts KafkaRebalanceArray and KafkaRebalanceArrayOutput values.
// You can construct a concrete instance of `KafkaRebalanceArrayInput` via:
//
//	KafkaRebalanceArray{ KafkaRebalanceArgs{...} }
type KafkaRebalanceArrayInput interface {
	pulumi.Input

	ToKafkaRebalanceArrayOutput() KafkaRebalanceArrayOutput
	ToKafkaRebalanceArrayOutputWithContext(context.Context) KafkaRebalanceArrayOutput
}

type KafkaRebalanceArray []KafkaRebalanceInput

func (KafkaRebalanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaRebalance)(nil)).Elem()
}

func (i KafkaRebalanceArray) ToKafkaRebalanceArrayOutput() KafkaRebalanceArrayOutput {
	return i.ToKafkaRebalanceArrayOutputWithContext(context.Background())
}

func (i KafkaRebalanceArray) ToKafkaRebalanceArrayOutputWithContext(ctx context.Context) KafkaRebalanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaRebalanceArrayOutput)
}

// KafkaRebalanceMapInput is an input type that accepts KafkaRebalanceMap and KafkaRebalanceMapOutput values.
// You can construct a concrete instance of `KafkaRebalanceMapInput` via:
//
//	KafkaRebalanceMap{ "key": KafkaRebalanceArgs{...} }
type KafkaRebalanceMapInput interface {
	pulumi.Input

	ToKafkaRebalanceMapOutput() KafkaRebalanceMapOutput
	ToKafkaRebalanceMapOutputWithContext(context.Context) KafkaRebalanceMapOutput
}

type KafkaRebalanceMap map[string]KafkaRebalanceInput

func (KafkaRebalanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaRebalance)(nil)).Elem()
}

func (i KafkaRebalanceMap) ToKafkaRebalanceMapOutput() KafkaRebalanceMapOutput {
	return i.ToKafkaRebalanceMapOutputWithContext(context.Background())
}

func (i KafkaRebalanceMap) ToKafkaRebalanceMapOutputWithContext(ctx context.Context) KafkaRebalanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaRebalanceMapOutput)
}

type KafkaRebalanceOutput struct{ *pulumi.OutputState }

func (KafkaRebalanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaRebalance)(nil)).Elem()
}

func (o KafkaRebalanceOutput) ToKafkaRebalanceOutput() KafkaRebalanceOutput {
	return o
}

func (o KafkaRebalanceOutput) ToKafkaRebalanceOutputWithContext(ctx context.Context) KafkaRebalanceOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KafkaRebalanceOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaRebalance) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KafkaRebalanceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaRebalance) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o KafkaRebalanceOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *KafkaRebalance) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o KafkaRebalanceOutput) Spec() KafkaRebalanceSpecOutput {
	return o.ApplyT(func(v *KafkaRebalance) KafkaRebalanceSpecOutput { return v.Spec }).(KafkaRebalanceSpecOutput)
}

func (o KafkaRebalanceOutput) Status() KafkaRebalanceStatusPtrOutput {
	return o.ApplyT(func(v *KafkaRebalance) KafkaRebalanceStatusPtrOutput { return v.Status }).(KafkaRebalanceStatusPtrOutput)
}

type KafkaRebalanceArrayOutput struct{ *pulumi.OutputState }

func (KafkaRebalanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaRebalance)(nil)).Elem()
}

func (o KafkaRebalanceArrayOutput) ToKafkaRebalanceArrayOutput() KafkaRebalanceArrayOutput {
	return o
}

func (o KafkaRebalanceArrayOutput) ToKafkaRebalanceArrayOutputWithContext(ctx context.Context) KafkaRebalanceArrayOutput {
	return o
}

func (o KafkaRebalanceArrayOutput) Index(i pulumi.IntInput) KafkaRebalanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaRebalance {
		return vs[0].([]*KafkaRebalance)[vs[1].(int)]
	}).(KafkaRebalanceOutput)
}

type KafkaRebalanceMapOutput struct{ *pulumi.OutputState }

func (KafkaRebalanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaRebalance)(nil)).Elem()
}

func (o KafkaRebalanceMapOutput) ToKafkaRebalanceMapOutput() KafkaRebalanceMapOutput {
	return o
}

func (o KafkaRebalanceMapOutput) ToKafkaRebalanceMapOutputWithContext(ctx context.Context) KafkaRebalanceMapOutput {
	return o
}

func (o KafkaRebalanceMapOutput) MapIndex(k pulumi.StringInput) KafkaRebalanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaRebalance {
		return vs[0].(map[string]*KafkaRebalance)[vs[1].(string)]
	}).(KafkaRebalanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaRebalanceInput)(nil)).Elem(), &KafkaRebalance{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaRebalanceArrayInput)(nil)).Elem(), KafkaRebalanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaRebalanceMapInput)(nil)).Elem(), KafkaRebalanceMap{})
	pulumi.RegisterOutputType(KafkaRebalanceOutput{})
	pulumi.RegisterOutputType(KafkaRebalanceArrayOutput{})
	pulumi.RegisterOutputType(KafkaRebalanceMapOutput{})
}
