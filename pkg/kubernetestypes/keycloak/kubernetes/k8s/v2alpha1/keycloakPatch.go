// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
type KeycloakPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     KeycloakSpecPatchPtrOutput      `pulumi:"spec"`
	Status   KeycloakStatusPatchPtrOutput    `pulumi:"status"`
}

// NewKeycloakPatch registers a new resource with the given unique name, arguments, and options.
func NewKeycloakPatch(ctx *pulumi.Context,
	name string, args *KeycloakPatchArgs, opts ...pulumi.ResourceOption) (*KeycloakPatch, error) {
	if args == nil {
		args = &KeycloakPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("k8s.keycloak.org/v2alpha1")
	args.Kind = pulumi.StringPtr("Keycloak")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KeycloakPatch
	err := ctx.RegisterResource("kubernetes:k8s.keycloak.org/v2alpha1:KeycloakPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeycloakPatch gets an existing KeycloakPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeycloakPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeycloakPatchState, opts ...pulumi.ResourceOption) (*KeycloakPatch, error) {
	var resource KeycloakPatch
	err := ctx.ReadResource("kubernetes:k8s.keycloak.org/v2alpha1:KeycloakPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeycloakPatch resources.
type keycloakPatchState struct {
}

type KeycloakPatchState struct {
}

func (KeycloakPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*keycloakPatchState)(nil)).Elem()
}

type keycloakPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *KeycloakSpecPatch      `pulumi:"spec"`
}

// The set of arguments for constructing a KeycloakPatch resource.
type KeycloakPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     KeycloakSpecPatchPtrInput
}

func (KeycloakPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keycloakPatchArgs)(nil)).Elem()
}

type KeycloakPatchInput interface {
	pulumi.Input

	ToKeycloakPatchOutput() KeycloakPatchOutput
	ToKeycloakPatchOutputWithContext(ctx context.Context) KeycloakPatchOutput
}

func (*KeycloakPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**KeycloakPatch)(nil)).Elem()
}

func (i *KeycloakPatch) ToKeycloakPatchOutput() KeycloakPatchOutput {
	return i.ToKeycloakPatchOutputWithContext(context.Background())
}

func (i *KeycloakPatch) ToKeycloakPatchOutputWithContext(ctx context.Context) KeycloakPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeycloakPatchOutput)
}

// KeycloakPatchArrayInput is an input type that accepts KeycloakPatchArray and KeycloakPatchArrayOutput values.
// You can construct a concrete instance of `KeycloakPatchArrayInput` via:
//
//	KeycloakPatchArray{ KeycloakPatchArgs{...} }
type KeycloakPatchArrayInput interface {
	pulumi.Input

	ToKeycloakPatchArrayOutput() KeycloakPatchArrayOutput
	ToKeycloakPatchArrayOutputWithContext(context.Context) KeycloakPatchArrayOutput
}

type KeycloakPatchArray []KeycloakPatchInput

func (KeycloakPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeycloakPatch)(nil)).Elem()
}

func (i KeycloakPatchArray) ToKeycloakPatchArrayOutput() KeycloakPatchArrayOutput {
	return i.ToKeycloakPatchArrayOutputWithContext(context.Background())
}

func (i KeycloakPatchArray) ToKeycloakPatchArrayOutputWithContext(ctx context.Context) KeycloakPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeycloakPatchArrayOutput)
}

// KeycloakPatchMapInput is an input type that accepts KeycloakPatchMap and KeycloakPatchMapOutput values.
// You can construct a concrete instance of `KeycloakPatchMapInput` via:
//
//	KeycloakPatchMap{ "key": KeycloakPatchArgs{...} }
type KeycloakPatchMapInput interface {
	pulumi.Input

	ToKeycloakPatchMapOutput() KeycloakPatchMapOutput
	ToKeycloakPatchMapOutputWithContext(context.Context) KeycloakPatchMapOutput
}

type KeycloakPatchMap map[string]KeycloakPatchInput

func (KeycloakPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeycloakPatch)(nil)).Elem()
}

func (i KeycloakPatchMap) ToKeycloakPatchMapOutput() KeycloakPatchMapOutput {
	return i.ToKeycloakPatchMapOutputWithContext(context.Background())
}

func (i KeycloakPatchMap) ToKeycloakPatchMapOutputWithContext(ctx context.Context) KeycloakPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeycloakPatchMapOutput)
}

type KeycloakPatchOutput struct{ *pulumi.OutputState }

func (KeycloakPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeycloakPatch)(nil)).Elem()
}

func (o KeycloakPatchOutput) ToKeycloakPatchOutput() KeycloakPatchOutput {
	return o
}

func (o KeycloakPatchOutput) ToKeycloakPatchOutputWithContext(ctx context.Context) KeycloakPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KeycloakPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeycloakPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KeycloakPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeycloakPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o KeycloakPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *KeycloakPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o KeycloakPatchOutput) Spec() KeycloakSpecPatchPtrOutput {
	return o.ApplyT(func(v *KeycloakPatch) KeycloakSpecPatchPtrOutput { return v.Spec }).(KeycloakSpecPatchPtrOutput)
}

func (o KeycloakPatchOutput) Status() KeycloakStatusPatchPtrOutput {
	return o.ApplyT(func(v *KeycloakPatch) KeycloakStatusPatchPtrOutput { return v.Status }).(KeycloakStatusPatchPtrOutput)
}

type KeycloakPatchArrayOutput struct{ *pulumi.OutputState }

func (KeycloakPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeycloakPatch)(nil)).Elem()
}

func (o KeycloakPatchArrayOutput) ToKeycloakPatchArrayOutput() KeycloakPatchArrayOutput {
	return o
}

func (o KeycloakPatchArrayOutput) ToKeycloakPatchArrayOutputWithContext(ctx context.Context) KeycloakPatchArrayOutput {
	return o
}

func (o KeycloakPatchArrayOutput) Index(i pulumi.IntInput) KeycloakPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KeycloakPatch {
		return vs[0].([]*KeycloakPatch)[vs[1].(int)]
	}).(KeycloakPatchOutput)
}

type KeycloakPatchMapOutput struct{ *pulumi.OutputState }

func (KeycloakPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeycloakPatch)(nil)).Elem()
}

func (o KeycloakPatchMapOutput) ToKeycloakPatchMapOutput() KeycloakPatchMapOutput {
	return o
}

func (o KeycloakPatchMapOutput) ToKeycloakPatchMapOutputWithContext(ctx context.Context) KeycloakPatchMapOutput {
	return o
}

func (o KeycloakPatchMapOutput) MapIndex(k pulumi.StringInput) KeycloakPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KeycloakPatch {
		return vs[0].(map[string]*KeycloakPatch)[vs[1].(string)]
	}).(KeycloakPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeycloakPatchInput)(nil)).Elem(), &KeycloakPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeycloakPatchArrayInput)(nil)).Elem(), KeycloakPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeycloakPatchMapInput)(nil)).Elem(), KeycloakPatchMap{})
	pulumi.RegisterOutputType(KeycloakPatchOutput{})
	pulumi.RegisterOutputType(KeycloakPatchArrayOutput{})
	pulumi.RegisterOutputType(KeycloakPatchMapOutput{})
}
