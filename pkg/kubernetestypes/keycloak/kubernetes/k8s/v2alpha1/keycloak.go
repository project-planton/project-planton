// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Keycloak struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	Spec     KeycloakSpecOutput      `pulumi:"spec"`
	Status   KeycloakStatusPtrOutput `pulumi:"status"`
}

// NewKeycloak registers a new resource with the given unique name, arguments, and options.
func NewKeycloak(ctx *pulumi.Context,
	name string, args *KeycloakArgs, opts ...pulumi.ResourceOption) (*Keycloak, error) {
	if args == nil {
		args = &KeycloakArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("k8s.keycloak.org/v2alpha1")
	args.Kind = pulumi.StringPtr("Keycloak")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Keycloak
	err := ctx.RegisterResource("kubernetes:k8s.keycloak.org/v2alpha1:Keycloak", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeycloak gets an existing Keycloak resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeycloak(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeycloakState, opts ...pulumi.ResourceOption) (*Keycloak, error) {
	var resource Keycloak
	err := ctx.ReadResource("kubernetes:k8s.keycloak.org/v2alpha1:Keycloak", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Keycloak resources.
type keycloakState struct {
}

type KeycloakState struct {
}

func (KeycloakState) ElementType() reflect.Type {
	return reflect.TypeOf((*keycloakState)(nil)).Elem()
}

type keycloakArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *KeycloakSpec      `pulumi:"spec"`
}

// The set of arguments for constructing a Keycloak resource.
type KeycloakArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     KeycloakSpecPtrInput
}

func (KeycloakArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keycloakArgs)(nil)).Elem()
}

type KeycloakInput interface {
	pulumi.Input

	ToKeycloakOutput() KeycloakOutput
	ToKeycloakOutputWithContext(ctx context.Context) KeycloakOutput
}

func (*Keycloak) ElementType() reflect.Type {
	return reflect.TypeOf((**Keycloak)(nil)).Elem()
}

func (i *Keycloak) ToKeycloakOutput() KeycloakOutput {
	return i.ToKeycloakOutputWithContext(context.Background())
}

func (i *Keycloak) ToKeycloakOutputWithContext(ctx context.Context) KeycloakOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeycloakOutput)
}

// KeycloakArrayInput is an input type that accepts KeycloakArray and KeycloakArrayOutput values.
// You can construct a concrete instance of `KeycloakArrayInput` via:
//
//	KeycloakArray{ KeycloakArgs{...} }
type KeycloakArrayInput interface {
	pulumi.Input

	ToKeycloakArrayOutput() KeycloakArrayOutput
	ToKeycloakArrayOutputWithContext(context.Context) KeycloakArrayOutput
}

type KeycloakArray []KeycloakInput

func (KeycloakArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Keycloak)(nil)).Elem()
}

func (i KeycloakArray) ToKeycloakArrayOutput() KeycloakArrayOutput {
	return i.ToKeycloakArrayOutputWithContext(context.Background())
}

func (i KeycloakArray) ToKeycloakArrayOutputWithContext(ctx context.Context) KeycloakArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeycloakArrayOutput)
}

// KeycloakMapInput is an input type that accepts KeycloakMap and KeycloakMapOutput values.
// You can construct a concrete instance of `KeycloakMapInput` via:
//
//	KeycloakMap{ "key": KeycloakArgs{...} }
type KeycloakMapInput interface {
	pulumi.Input

	ToKeycloakMapOutput() KeycloakMapOutput
	ToKeycloakMapOutputWithContext(context.Context) KeycloakMapOutput
}

type KeycloakMap map[string]KeycloakInput

func (KeycloakMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Keycloak)(nil)).Elem()
}

func (i KeycloakMap) ToKeycloakMapOutput() KeycloakMapOutput {
	return i.ToKeycloakMapOutputWithContext(context.Background())
}

func (i KeycloakMap) ToKeycloakMapOutputWithContext(ctx context.Context) KeycloakMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeycloakMapOutput)
}

type KeycloakOutput struct{ *pulumi.OutputState }

func (KeycloakOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Keycloak)(nil)).Elem()
}

func (o KeycloakOutput) ToKeycloakOutput() KeycloakOutput {
	return o
}

func (o KeycloakOutput) ToKeycloakOutputWithContext(ctx context.Context) KeycloakOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o KeycloakOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Keycloak) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o KeycloakOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Keycloak) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o KeycloakOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *Keycloak) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o KeycloakOutput) Spec() KeycloakSpecOutput {
	return o.ApplyT(func(v *Keycloak) KeycloakSpecOutput { return v.Spec }).(KeycloakSpecOutput)
}

func (o KeycloakOutput) Status() KeycloakStatusPtrOutput {
	return o.ApplyT(func(v *Keycloak) KeycloakStatusPtrOutput { return v.Status }).(KeycloakStatusPtrOutput)
}

type KeycloakArrayOutput struct{ *pulumi.OutputState }

func (KeycloakArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Keycloak)(nil)).Elem()
}

func (o KeycloakArrayOutput) ToKeycloakArrayOutput() KeycloakArrayOutput {
	return o
}

func (o KeycloakArrayOutput) ToKeycloakArrayOutputWithContext(ctx context.Context) KeycloakArrayOutput {
	return o
}

func (o KeycloakArrayOutput) Index(i pulumi.IntInput) KeycloakOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Keycloak {
		return vs[0].([]*Keycloak)[vs[1].(int)]
	}).(KeycloakOutput)
}

type KeycloakMapOutput struct{ *pulumi.OutputState }

func (KeycloakMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Keycloak)(nil)).Elem()
}

func (o KeycloakMapOutput) ToKeycloakMapOutput() KeycloakMapOutput {
	return o
}

func (o KeycloakMapOutput) ToKeycloakMapOutputWithContext(ctx context.Context) KeycloakMapOutput {
	return o
}

func (o KeycloakMapOutput) MapIndex(k pulumi.StringInput) KeycloakOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Keycloak {
		return vs[0].(map[string]*Keycloak)[vs[1].(string)]
	}).(KeycloakOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeycloakInput)(nil)).Elem(), &Keycloak{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeycloakArrayInput)(nil)).Elem(), KeycloakArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeycloakMapInput)(nil)).Elem(), KeycloakMap{})
	pulumi.RegisterOutputType(KeycloakOutput{})
	pulumi.RegisterOutputType(KeycloakArrayOutput{})
	pulumi.RegisterOutputType(KeycloakMapOutput{})
}
