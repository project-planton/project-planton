// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// DeleteOptions may be provided when deleting an API object.
type DeleteOptions struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
	DryRun []string `pulumi:"dryRun"`
	// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
	GracePeriodSeconds *int `pulumi:"gracePeriodSeconds"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
	OrphanDependents *bool `pulumi:"orphanDependents"`
	// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
	Preconditions *Preconditions `pulumi:"preconditions"`
	// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
	PropagationPolicy *string `pulumi:"propagationPolicy"`
}

// DeleteOptionsInput is an input type that accepts DeleteOptionsArgs and DeleteOptionsOutput values.
// You can construct a concrete instance of `DeleteOptionsInput` via:
//
//	DeleteOptionsArgs{...}
type DeleteOptionsInput interface {
	pulumi.Input

	ToDeleteOptionsOutput() DeleteOptionsOutput
	ToDeleteOptionsOutputWithContext(context.Context) DeleteOptionsOutput
}

// DeleteOptions may be provided when deleting an API object.
type DeleteOptionsArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
	DryRun pulumi.StringArrayInput `pulumi:"dryRun"`
	// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
	GracePeriodSeconds pulumi.IntPtrInput `pulumi:"gracePeriodSeconds"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
	OrphanDependents pulumi.BoolPtrInput `pulumi:"orphanDependents"`
	// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
	Preconditions PreconditionsPtrInput `pulumi:"preconditions"`
	// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
	PropagationPolicy pulumi.StringPtrInput `pulumi:"propagationPolicy"`
}

func (DeleteOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeleteOptions)(nil)).Elem()
}

func (i DeleteOptionsArgs) ToDeleteOptionsOutput() DeleteOptionsOutput {
	return i.ToDeleteOptionsOutputWithContext(context.Background())
}

func (i DeleteOptionsArgs) ToDeleteOptionsOutputWithContext(ctx context.Context) DeleteOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeleteOptionsOutput)
}

// DeleteOptions may be provided when deleting an API object.
type DeleteOptionsOutput struct{ *pulumi.OutputState }

func (DeleteOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeleteOptions)(nil)).Elem()
}

func (o DeleteOptionsOutput) ToDeleteOptionsOutput() DeleteOptionsOutput {
	return o
}

func (o DeleteOptionsOutput) ToDeleteOptionsOutputWithContext(ctx context.Context) DeleteOptionsOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o DeleteOptionsOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeleteOptions) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (o DeleteOptionsOutput) DryRun() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeleteOptions) []string { return v.DryRun }).(pulumi.StringArrayOutput)
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (o DeleteOptionsOutput) GracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeleteOptions) *int { return v.GracePeriodSeconds }).(pulumi.IntPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o DeleteOptionsOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeleteOptions) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (o DeleteOptionsOutput) OrphanDependents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeleteOptions) *bool { return v.OrphanDependents }).(pulumi.BoolPtrOutput)
}

// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
func (o DeleteOptionsOutput) Preconditions() PreconditionsPtrOutput {
	return o.ApplyT(func(v DeleteOptions) *Preconditions { return v.Preconditions }).(PreconditionsPtrOutput)
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
func (o DeleteOptionsOutput) PropagationPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeleteOptions) *string { return v.PropagationPolicy }).(pulumi.StringPtrOutput)
}

// DeleteOptions may be provided when deleting an API object.
type DeleteOptionsPatch struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
	DryRun []string `pulumi:"dryRun"`
	// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
	GracePeriodSeconds *int `pulumi:"gracePeriodSeconds"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
	OrphanDependents *bool `pulumi:"orphanDependents"`
	// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
	Preconditions *PreconditionsPatch `pulumi:"preconditions"`
	// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
	PropagationPolicy *string `pulumi:"propagationPolicy"`
}

// DeleteOptionsPatchInput is an input type that accepts DeleteOptionsPatchArgs and DeleteOptionsPatchOutput values.
// You can construct a concrete instance of `DeleteOptionsPatchInput` via:
//
//	DeleteOptionsPatchArgs{...}
type DeleteOptionsPatchInput interface {
	pulumi.Input

	ToDeleteOptionsPatchOutput() DeleteOptionsPatchOutput
	ToDeleteOptionsPatchOutputWithContext(context.Context) DeleteOptionsPatchOutput
}

// DeleteOptions may be provided when deleting an API object.
type DeleteOptionsPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
	DryRun pulumi.StringArrayInput `pulumi:"dryRun"`
	// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
	GracePeriodSeconds pulumi.IntPtrInput `pulumi:"gracePeriodSeconds"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
	OrphanDependents pulumi.BoolPtrInput `pulumi:"orphanDependents"`
	// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
	Preconditions PreconditionsPatchPtrInput `pulumi:"preconditions"`
	// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
	PropagationPolicy pulumi.StringPtrInput `pulumi:"propagationPolicy"`
}

func (DeleteOptionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeleteOptionsPatch)(nil)).Elem()
}

func (i DeleteOptionsPatchArgs) ToDeleteOptionsPatchOutput() DeleteOptionsPatchOutput {
	return i.ToDeleteOptionsPatchOutputWithContext(context.Background())
}

func (i DeleteOptionsPatchArgs) ToDeleteOptionsPatchOutputWithContext(ctx context.Context) DeleteOptionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeleteOptionsPatchOutput)
}

// DeleteOptions may be provided when deleting an API object.
type DeleteOptionsPatchOutput struct{ *pulumi.OutputState }

func (DeleteOptionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeleteOptionsPatch)(nil)).Elem()
}

func (o DeleteOptionsPatchOutput) ToDeleteOptionsPatchOutput() DeleteOptionsPatchOutput {
	return o
}

func (o DeleteOptionsPatchOutput) ToDeleteOptionsPatchOutputWithContext(ctx context.Context) DeleteOptionsPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o DeleteOptionsPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeleteOptionsPatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
func (o DeleteOptionsPatchOutput) DryRun() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeleteOptionsPatch) []string { return v.DryRun }).(pulumi.StringArrayOutput)
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (o DeleteOptionsPatchOutput) GracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeleteOptionsPatch) *int { return v.GracePeriodSeconds }).(pulumi.IntPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o DeleteOptionsPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeleteOptionsPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the "orphan" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (o DeleteOptionsPatchOutput) OrphanDependents() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DeleteOptionsPatch) *bool { return v.OrphanDependents }).(pulumi.BoolPtrOutput)
}

// Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.
func (o DeleteOptionsPatchOutput) Preconditions() PreconditionsPatchPtrOutput {
	return o.ApplyT(func(v DeleteOptionsPatch) *PreconditionsPatch { return v.Preconditions }).(PreconditionsPatchPtrOutput)
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.
func (o DeleteOptionsPatchOutput) PropagationPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeleteOptionsPatch) *string { return v.PropagationPolicy }).(pulumi.StringPtrOutput)
}

// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
type ListMeta struct {
	// continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
	Continue *string `pulumi:"continue"`
	// remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
	RemainingItemCount *int `pulumi:"remainingItemCount"`
	// String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
	SelfLink *string `pulumi:"selfLink"`
}

// ListMetaInput is an input type that accepts ListMetaArgs and ListMetaOutput values.
// You can construct a concrete instance of `ListMetaInput` via:
//
//	ListMetaArgs{...}
type ListMetaInput interface {
	pulumi.Input

	ToListMetaOutput() ListMetaOutput
	ToListMetaOutputWithContext(context.Context) ListMetaOutput
}

// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
type ListMetaArgs struct {
	// continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
	Continue pulumi.StringPtrInput `pulumi:"continue"`
	// remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
	RemainingItemCount pulumi.IntPtrInput `pulumi:"remainingItemCount"`
	// String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
	SelfLink pulumi.StringPtrInput `pulumi:"selfLink"`
}

func (ListMetaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListMeta)(nil)).Elem()
}

func (i ListMetaArgs) ToListMetaOutput() ListMetaOutput {
	return i.ToListMetaOutputWithContext(context.Background())
}

func (i ListMetaArgs) ToListMetaOutputWithContext(ctx context.Context) ListMetaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListMetaOutput)
}

func (i ListMetaArgs) ToListMetaPtrOutput() ListMetaPtrOutput {
	return i.ToListMetaPtrOutputWithContext(context.Background())
}

func (i ListMetaArgs) ToListMetaPtrOutputWithContext(ctx context.Context) ListMetaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListMetaOutput).ToListMetaPtrOutputWithContext(ctx)
}

// ListMetaPtrInput is an input type that accepts ListMetaArgs, ListMetaPtr and ListMetaPtrOutput values.
// You can construct a concrete instance of `ListMetaPtrInput` via:
//
//	        ListMetaArgs{...}
//
//	or:
//
//	        nil
type ListMetaPtrInput interface {
	pulumi.Input

	ToListMetaPtrOutput() ListMetaPtrOutput
	ToListMetaPtrOutputWithContext(context.Context) ListMetaPtrOutput
}

type listMetaPtrType ListMetaArgs

func ListMetaPtr(v *ListMetaArgs) ListMetaPtrInput {
	return (*listMetaPtrType)(v)
}

func (*listMetaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ListMeta)(nil)).Elem()
}

func (i *listMetaPtrType) ToListMetaPtrOutput() ListMetaPtrOutput {
	return i.ToListMetaPtrOutputWithContext(context.Background())
}

func (i *listMetaPtrType) ToListMetaPtrOutputWithContext(ctx context.Context) ListMetaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListMetaPtrOutput)
}

// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
type ListMetaOutput struct{ *pulumi.OutputState }

func (ListMetaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListMeta)(nil)).Elem()
}

func (o ListMetaOutput) ToListMetaOutput() ListMetaOutput {
	return o
}

func (o ListMetaOutput) ToListMetaOutputWithContext(ctx context.Context) ListMetaOutput {
	return o
}

func (o ListMetaOutput) ToListMetaPtrOutput() ListMetaPtrOutput {
	return o.ToListMetaPtrOutputWithContext(context.Background())
}

func (o ListMetaOutput) ToListMetaPtrOutputWithContext(ctx context.Context) ListMetaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ListMeta) *ListMeta {
		return &v
	}).(ListMetaPtrOutput)
}

// continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
func (o ListMetaOutput) Continue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListMeta) *string { return v.Continue }).(pulumi.StringPtrOutput)
}

// remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
func (o ListMetaOutput) RemainingItemCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListMeta) *int { return v.RemainingItemCount }).(pulumi.IntPtrOutput)
}

// String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ListMetaOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListMeta) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
func (o ListMetaOutput) SelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListMeta) *string { return v.SelfLink }).(pulumi.StringPtrOutput)
}

type ListMetaPtrOutput struct{ *pulumi.OutputState }

func (ListMetaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ListMeta)(nil)).Elem()
}

func (o ListMetaPtrOutput) ToListMetaPtrOutput() ListMetaPtrOutput {
	return o
}

func (o ListMetaPtrOutput) ToListMetaPtrOutputWithContext(ctx context.Context) ListMetaPtrOutput {
	return o
}

func (o ListMetaPtrOutput) Elem() ListMetaOutput {
	return o.ApplyT(func(v *ListMeta) ListMeta {
		if v != nil {
			return *v
		}
		var ret ListMeta
		return ret
	}).(ListMetaOutput)
}

// continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
func (o ListMetaPtrOutput) Continue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListMeta) *string {
		if v == nil {
			return nil
		}
		return v.Continue
	}).(pulumi.StringPtrOutput)
}

// remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
func (o ListMetaPtrOutput) RemainingItemCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ListMeta) *int {
		if v == nil {
			return nil
		}
		return v.RemainingItemCount
	}).(pulumi.IntPtrOutput)
}

// String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ListMetaPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListMeta) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
func (o ListMetaPtrOutput) SelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListMeta) *string {
		if v == nil {
			return nil
		}
		return v.SelfLink
	}).(pulumi.StringPtrOutput)
}

// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
type ListMetaPatch struct {
	// continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
	Continue *string `pulumi:"continue"`
	// remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
	RemainingItemCount *int `pulumi:"remainingItemCount"`
	// String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
	SelfLink *string `pulumi:"selfLink"`
}

// ListMetaPatchInput is an input type that accepts ListMetaPatchArgs and ListMetaPatchOutput values.
// You can construct a concrete instance of `ListMetaPatchInput` via:
//
//	ListMetaPatchArgs{...}
type ListMetaPatchInput interface {
	pulumi.Input

	ToListMetaPatchOutput() ListMetaPatchOutput
	ToListMetaPatchOutputWithContext(context.Context) ListMetaPatchOutput
}

// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
type ListMetaPatchArgs struct {
	// continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
	Continue pulumi.StringPtrInput `pulumi:"continue"`
	// remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
	RemainingItemCount pulumi.IntPtrInput `pulumi:"remainingItemCount"`
	// String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
	SelfLink pulumi.StringPtrInput `pulumi:"selfLink"`
}

func (ListMetaPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListMetaPatch)(nil)).Elem()
}

func (i ListMetaPatchArgs) ToListMetaPatchOutput() ListMetaPatchOutput {
	return i.ToListMetaPatchOutputWithContext(context.Background())
}

func (i ListMetaPatchArgs) ToListMetaPatchOutputWithContext(ctx context.Context) ListMetaPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListMetaPatchOutput)
}

func (i ListMetaPatchArgs) ToListMetaPatchPtrOutput() ListMetaPatchPtrOutput {
	return i.ToListMetaPatchPtrOutputWithContext(context.Background())
}

func (i ListMetaPatchArgs) ToListMetaPatchPtrOutputWithContext(ctx context.Context) ListMetaPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListMetaPatchOutput).ToListMetaPatchPtrOutputWithContext(ctx)
}

// ListMetaPatchPtrInput is an input type that accepts ListMetaPatchArgs, ListMetaPatchPtr and ListMetaPatchPtrOutput values.
// You can construct a concrete instance of `ListMetaPatchPtrInput` via:
//
//	        ListMetaPatchArgs{...}
//
//	or:
//
//	        nil
type ListMetaPatchPtrInput interface {
	pulumi.Input

	ToListMetaPatchPtrOutput() ListMetaPatchPtrOutput
	ToListMetaPatchPtrOutputWithContext(context.Context) ListMetaPatchPtrOutput
}

type listMetaPatchPtrType ListMetaPatchArgs

func ListMetaPatchPtr(v *ListMetaPatchArgs) ListMetaPatchPtrInput {
	return (*listMetaPatchPtrType)(v)
}

func (*listMetaPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ListMetaPatch)(nil)).Elem()
}

func (i *listMetaPatchPtrType) ToListMetaPatchPtrOutput() ListMetaPatchPtrOutput {
	return i.ToListMetaPatchPtrOutputWithContext(context.Background())
}

func (i *listMetaPatchPtrType) ToListMetaPatchPtrOutputWithContext(ctx context.Context) ListMetaPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListMetaPatchPtrOutput)
}

// ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
type ListMetaPatchOutput struct{ *pulumi.OutputState }

func (ListMetaPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListMetaPatch)(nil)).Elem()
}

func (o ListMetaPatchOutput) ToListMetaPatchOutput() ListMetaPatchOutput {
	return o
}

func (o ListMetaPatchOutput) ToListMetaPatchOutputWithContext(ctx context.Context) ListMetaPatchOutput {
	return o
}

func (o ListMetaPatchOutput) ToListMetaPatchPtrOutput() ListMetaPatchPtrOutput {
	return o.ToListMetaPatchPtrOutputWithContext(context.Background())
}

func (o ListMetaPatchOutput) ToListMetaPatchPtrOutputWithContext(ctx context.Context) ListMetaPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ListMetaPatch) *ListMetaPatch {
		return &v
	}).(ListMetaPatchPtrOutput)
}

// continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
func (o ListMetaPatchOutput) Continue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListMetaPatch) *string { return v.Continue }).(pulumi.StringPtrOutput)
}

// remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
func (o ListMetaPatchOutput) RemainingItemCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListMetaPatch) *int { return v.RemainingItemCount }).(pulumi.IntPtrOutput)
}

// String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ListMetaPatchOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListMetaPatch) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
func (o ListMetaPatchOutput) SelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListMetaPatch) *string { return v.SelfLink }).(pulumi.StringPtrOutput)
}

type ListMetaPatchPtrOutput struct{ *pulumi.OutputState }

func (ListMetaPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ListMetaPatch)(nil)).Elem()
}

func (o ListMetaPatchPtrOutput) ToListMetaPatchPtrOutput() ListMetaPatchPtrOutput {
	return o
}

func (o ListMetaPatchPtrOutput) ToListMetaPatchPtrOutputWithContext(ctx context.Context) ListMetaPatchPtrOutput {
	return o
}

func (o ListMetaPatchPtrOutput) Elem() ListMetaPatchOutput {
	return o.ApplyT(func(v *ListMetaPatch) ListMetaPatch {
		if v != nil {
			return *v
		}
		var ret ListMetaPatch
		return ret
	}).(ListMetaPatchOutput)
}

// continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
func (o ListMetaPatchPtrOutput) Continue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListMetaPatch) *string {
		if v == nil {
			return nil
		}
		return v.Continue
	}).(pulumi.StringPtrOutput)
}

// remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
func (o ListMetaPatchPtrOutput) RemainingItemCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ListMetaPatch) *int {
		if v == nil {
			return nil
		}
		return v.RemainingItemCount
	}).(pulumi.IntPtrOutput)
}

// String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ListMetaPatchPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListMetaPatch) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
func (o ListMetaPatchPtrOutput) SelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListMetaPatch) *string {
		if v == nil {
			return nil
		}
		return v.SelfLink
	}).(pulumi.StringPtrOutput)
}

// ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
type ManagedFieldsEntry struct {
	// APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
	ApiVersion *string `pulumi:"apiVersion"`
	// FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
	FieldsType *string `pulumi:"fieldsType"`
	// FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
	FieldsV1 interface{} `pulumi:"fieldsV1"`
	// Manager is an identifier of the workflow managing these fields.
	Manager *string `pulumi:"manager"`
	// Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
	Operation *string `pulumi:"operation"`
	// Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
	Subresource *string `pulumi:"subresource"`
	// Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
	Time *string `pulumi:"time"`
}

// ManagedFieldsEntryInput is an input type that accepts ManagedFieldsEntryArgs and ManagedFieldsEntryOutput values.
// You can construct a concrete instance of `ManagedFieldsEntryInput` via:
//
//	ManagedFieldsEntryArgs{...}
type ManagedFieldsEntryInput interface {
	pulumi.Input

	ToManagedFieldsEntryOutput() ManagedFieldsEntryOutput
	ToManagedFieldsEntryOutputWithContext(context.Context) ManagedFieldsEntryOutput
}

// ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
type ManagedFieldsEntryArgs struct {
	// APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
	FieldsType pulumi.StringPtrInput `pulumi:"fieldsType"`
	// FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
	FieldsV1 pulumi.Input `pulumi:"fieldsV1"`
	// Manager is an identifier of the workflow managing these fields.
	Manager pulumi.StringPtrInput `pulumi:"manager"`
	// Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
	Operation pulumi.StringPtrInput `pulumi:"operation"`
	// Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
	Subresource pulumi.StringPtrInput `pulumi:"subresource"`
	// Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (ManagedFieldsEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedFieldsEntry)(nil)).Elem()
}

func (i ManagedFieldsEntryArgs) ToManagedFieldsEntryOutput() ManagedFieldsEntryOutput {
	return i.ToManagedFieldsEntryOutputWithContext(context.Background())
}

func (i ManagedFieldsEntryArgs) ToManagedFieldsEntryOutputWithContext(ctx context.Context) ManagedFieldsEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedFieldsEntryOutput)
}

// ManagedFieldsEntryArrayInput is an input type that accepts ManagedFieldsEntryArray and ManagedFieldsEntryArrayOutput values.
// You can construct a concrete instance of `ManagedFieldsEntryArrayInput` via:
//
//	ManagedFieldsEntryArray{ ManagedFieldsEntryArgs{...} }
type ManagedFieldsEntryArrayInput interface {
	pulumi.Input

	ToManagedFieldsEntryArrayOutput() ManagedFieldsEntryArrayOutput
	ToManagedFieldsEntryArrayOutputWithContext(context.Context) ManagedFieldsEntryArrayOutput
}

type ManagedFieldsEntryArray []ManagedFieldsEntryInput

func (ManagedFieldsEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedFieldsEntry)(nil)).Elem()
}

func (i ManagedFieldsEntryArray) ToManagedFieldsEntryArrayOutput() ManagedFieldsEntryArrayOutput {
	return i.ToManagedFieldsEntryArrayOutputWithContext(context.Background())
}

func (i ManagedFieldsEntryArray) ToManagedFieldsEntryArrayOutputWithContext(ctx context.Context) ManagedFieldsEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedFieldsEntryArrayOutput)
}

// ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
type ManagedFieldsEntryOutput struct{ *pulumi.OutputState }

func (ManagedFieldsEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedFieldsEntry)(nil)).Elem()
}

func (o ManagedFieldsEntryOutput) ToManagedFieldsEntryOutput() ManagedFieldsEntryOutput {
	return o
}

func (o ManagedFieldsEntryOutput) ToManagedFieldsEntryOutputWithContext(ctx context.Context) ManagedFieldsEntryOutput {
	return o
}

// APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
func (o ManagedFieldsEntryOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedFieldsEntry) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
func (o ManagedFieldsEntryOutput) FieldsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedFieldsEntry) *string { return v.FieldsType }).(pulumi.StringPtrOutput)
}

// FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
func (o ManagedFieldsEntryOutput) FieldsV1() pulumi.AnyOutput {
	return o.ApplyT(func(v ManagedFieldsEntry) interface{} { return v.FieldsV1 }).(pulumi.AnyOutput)
}

// Manager is an identifier of the workflow managing these fields.
func (o ManagedFieldsEntryOutput) Manager() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedFieldsEntry) *string { return v.Manager }).(pulumi.StringPtrOutput)
}

// Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
func (o ManagedFieldsEntryOutput) Operation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedFieldsEntry) *string { return v.Operation }).(pulumi.StringPtrOutput)
}

// Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
func (o ManagedFieldsEntryOutput) Subresource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedFieldsEntry) *string { return v.Subresource }).(pulumi.StringPtrOutput)
}

// Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
func (o ManagedFieldsEntryOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedFieldsEntry) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type ManagedFieldsEntryArrayOutput struct{ *pulumi.OutputState }

func (ManagedFieldsEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedFieldsEntry)(nil)).Elem()
}

func (o ManagedFieldsEntryArrayOutput) ToManagedFieldsEntryArrayOutput() ManagedFieldsEntryArrayOutput {
	return o
}

func (o ManagedFieldsEntryArrayOutput) ToManagedFieldsEntryArrayOutputWithContext(ctx context.Context) ManagedFieldsEntryArrayOutput {
	return o
}

func (o ManagedFieldsEntryArrayOutput) Index(i pulumi.IntInput) ManagedFieldsEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedFieldsEntry {
		return vs[0].([]ManagedFieldsEntry)[vs[1].(int)]
	}).(ManagedFieldsEntryOutput)
}

// ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
type ManagedFieldsEntryPatch struct {
	// APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
	ApiVersion *string `pulumi:"apiVersion"`
	// FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
	FieldsType *string `pulumi:"fieldsType"`
	// FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
	FieldsV1 interface{} `pulumi:"fieldsV1"`
	// Manager is an identifier of the workflow managing these fields.
	Manager *string `pulumi:"manager"`
	// Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
	Operation *string `pulumi:"operation"`
	// Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
	Subresource *string `pulumi:"subresource"`
	// Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
	Time *string `pulumi:"time"`
}

// ManagedFieldsEntryPatchInput is an input type that accepts ManagedFieldsEntryPatchArgs and ManagedFieldsEntryPatchOutput values.
// You can construct a concrete instance of `ManagedFieldsEntryPatchInput` via:
//
//	ManagedFieldsEntryPatchArgs{...}
type ManagedFieldsEntryPatchInput interface {
	pulumi.Input

	ToManagedFieldsEntryPatchOutput() ManagedFieldsEntryPatchOutput
	ToManagedFieldsEntryPatchOutputWithContext(context.Context) ManagedFieldsEntryPatchOutput
}

// ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
type ManagedFieldsEntryPatchArgs struct {
	// APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
	FieldsType pulumi.StringPtrInput `pulumi:"fieldsType"`
	// FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
	FieldsV1 pulumi.Input `pulumi:"fieldsV1"`
	// Manager is an identifier of the workflow managing these fields.
	Manager pulumi.StringPtrInput `pulumi:"manager"`
	// Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
	Operation pulumi.StringPtrInput `pulumi:"operation"`
	// Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
	Subresource pulumi.StringPtrInput `pulumi:"subresource"`
	// Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (ManagedFieldsEntryPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedFieldsEntryPatch)(nil)).Elem()
}

func (i ManagedFieldsEntryPatchArgs) ToManagedFieldsEntryPatchOutput() ManagedFieldsEntryPatchOutput {
	return i.ToManagedFieldsEntryPatchOutputWithContext(context.Background())
}

func (i ManagedFieldsEntryPatchArgs) ToManagedFieldsEntryPatchOutputWithContext(ctx context.Context) ManagedFieldsEntryPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedFieldsEntryPatchOutput)
}

// ManagedFieldsEntryPatchArrayInput is an input type that accepts ManagedFieldsEntryPatchArray and ManagedFieldsEntryPatchArrayOutput values.
// You can construct a concrete instance of `ManagedFieldsEntryPatchArrayInput` via:
//
//	ManagedFieldsEntryPatchArray{ ManagedFieldsEntryPatchArgs{...} }
type ManagedFieldsEntryPatchArrayInput interface {
	pulumi.Input

	ToManagedFieldsEntryPatchArrayOutput() ManagedFieldsEntryPatchArrayOutput
	ToManagedFieldsEntryPatchArrayOutputWithContext(context.Context) ManagedFieldsEntryPatchArrayOutput
}

type ManagedFieldsEntryPatchArray []ManagedFieldsEntryPatchInput

func (ManagedFieldsEntryPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedFieldsEntryPatch)(nil)).Elem()
}

func (i ManagedFieldsEntryPatchArray) ToManagedFieldsEntryPatchArrayOutput() ManagedFieldsEntryPatchArrayOutput {
	return i.ToManagedFieldsEntryPatchArrayOutputWithContext(context.Background())
}

func (i ManagedFieldsEntryPatchArray) ToManagedFieldsEntryPatchArrayOutputWithContext(ctx context.Context) ManagedFieldsEntryPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedFieldsEntryPatchArrayOutput)
}

// ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
type ManagedFieldsEntryPatchOutput struct{ *pulumi.OutputState }

func (ManagedFieldsEntryPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedFieldsEntryPatch)(nil)).Elem()
}

func (o ManagedFieldsEntryPatchOutput) ToManagedFieldsEntryPatchOutput() ManagedFieldsEntryPatchOutput {
	return o
}

func (o ManagedFieldsEntryPatchOutput) ToManagedFieldsEntryPatchOutputWithContext(ctx context.Context) ManagedFieldsEntryPatchOutput {
	return o
}

// APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
func (o ManagedFieldsEntryPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedFieldsEntryPatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
func (o ManagedFieldsEntryPatchOutput) FieldsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedFieldsEntryPatch) *string { return v.FieldsType }).(pulumi.StringPtrOutput)
}

// FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
func (o ManagedFieldsEntryPatchOutput) FieldsV1() pulumi.AnyOutput {
	return o.ApplyT(func(v ManagedFieldsEntryPatch) interface{} { return v.FieldsV1 }).(pulumi.AnyOutput)
}

// Manager is an identifier of the workflow managing these fields.
func (o ManagedFieldsEntryPatchOutput) Manager() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedFieldsEntryPatch) *string { return v.Manager }).(pulumi.StringPtrOutput)
}

// Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
func (o ManagedFieldsEntryPatchOutput) Operation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedFieldsEntryPatch) *string { return v.Operation }).(pulumi.StringPtrOutput)
}

// Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
func (o ManagedFieldsEntryPatchOutput) Subresource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedFieldsEntryPatch) *string { return v.Subresource }).(pulumi.StringPtrOutput)
}

// Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
func (o ManagedFieldsEntryPatchOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedFieldsEntryPatch) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type ManagedFieldsEntryPatchArrayOutput struct{ *pulumi.OutputState }

func (ManagedFieldsEntryPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedFieldsEntryPatch)(nil)).Elem()
}

func (o ManagedFieldsEntryPatchArrayOutput) ToManagedFieldsEntryPatchArrayOutput() ManagedFieldsEntryPatchArrayOutput {
	return o
}

func (o ManagedFieldsEntryPatchArrayOutput) ToManagedFieldsEntryPatchArrayOutputWithContext(ctx context.Context) ManagedFieldsEntryPatchArrayOutput {
	return o
}

func (o ManagedFieldsEntryPatchArrayOutput) Index(i pulumi.IntInput) ManagedFieldsEntryPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedFieldsEntryPatch {
		return vs[0].([]ManagedFieldsEntryPatch)[vs[1].(int)]
	}).(ManagedFieldsEntryPatchOutput)
}

// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
type ObjectMeta struct {
	// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
	Annotations map[string]string `pulumi:"annotations"`
	// CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
	//
	// Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
	DeletionGracePeriodSeconds *int `pulumi:"deletionGracePeriodSeconds"`
	// DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
	//
	// Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	DeletionTimestamp *string `pulumi:"deletionTimestamp"`
	// Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
	Finalizers []string `pulumi:"finalizers"`
	// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
	//
	// If this field is specified and the generated name exists, the server will return a 409.
	//
	// Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
	GenerateName *string `pulumi:"generateName"`
	// A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
	Generation *int `pulumi:"generation"`
	// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
	Labels map[string]string `pulumi:"labels"`
	// ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
	ManagedFields []ManagedFieldsEntry `pulumi:"managedFields"`
	// Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
	Name *string `pulumi:"name"`
	// Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
	//
	// Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
	Namespace *string `pulumi:"namespace"`
	// List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
	OwnerReferences []OwnerReference `pulumi:"ownerReferences"`
	// An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
	//
	// Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
	SelfLink *string `pulumi:"selfLink"`
	// UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
	//
	// Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	Uid *string `pulumi:"uid"`
}

// ObjectMetaInput is an input type that accepts ObjectMetaArgs and ObjectMetaOutput values.
// You can construct a concrete instance of `ObjectMetaInput` via:
//
//	ObjectMetaArgs{...}
type ObjectMetaInput interface {
	pulumi.Input

	ToObjectMetaOutput() ObjectMetaOutput
	ToObjectMetaOutputWithContext(context.Context) ObjectMetaOutput
}

// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
type ObjectMetaArgs struct {
	// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
	//
	// Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	CreationTimestamp pulumi.StringPtrInput `pulumi:"creationTimestamp"`
	// Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
	DeletionGracePeriodSeconds pulumi.IntPtrInput `pulumi:"deletionGracePeriodSeconds"`
	// DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
	//
	// Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	DeletionTimestamp pulumi.StringPtrInput `pulumi:"deletionTimestamp"`
	// Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
	Finalizers pulumi.StringArrayInput `pulumi:"finalizers"`
	// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
	//
	// If this field is specified and the generated name exists, the server will return a 409.
	//
	// Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
	GenerateName pulumi.StringPtrInput `pulumi:"generateName"`
	// A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
	Generation pulumi.IntPtrInput `pulumi:"generation"`
	// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
	ManagedFields ManagedFieldsEntryArrayInput `pulumi:"managedFields"`
	// Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
	//
	// Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
	OwnerReferences OwnerReferenceArrayInput `pulumi:"ownerReferences"`
	// An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
	//
	// Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
	SelfLink pulumi.StringPtrInput `pulumi:"selfLink"`
	// UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
	//
	// Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ObjectMetaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectMeta)(nil)).Elem()
}

func (i ObjectMetaArgs) ToObjectMetaOutput() ObjectMetaOutput {
	return i.ToObjectMetaOutputWithContext(context.Background())
}

func (i ObjectMetaArgs) ToObjectMetaOutputWithContext(ctx context.Context) ObjectMetaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectMetaOutput)
}

func (i ObjectMetaArgs) ToObjectMetaPtrOutput() ObjectMetaPtrOutput {
	return i.ToObjectMetaPtrOutputWithContext(context.Background())
}

func (i ObjectMetaArgs) ToObjectMetaPtrOutputWithContext(ctx context.Context) ObjectMetaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectMetaOutput).ToObjectMetaPtrOutputWithContext(ctx)
}

// ObjectMetaPtrInput is an input type that accepts ObjectMetaArgs, ObjectMetaPtr and ObjectMetaPtrOutput values.
// You can construct a concrete instance of `ObjectMetaPtrInput` via:
//
//	        ObjectMetaArgs{...}
//
//	or:
//
//	        nil
type ObjectMetaPtrInput interface {
	pulumi.Input

	ToObjectMetaPtrOutput() ObjectMetaPtrOutput
	ToObjectMetaPtrOutputWithContext(context.Context) ObjectMetaPtrOutput
}

type objectMetaPtrType ObjectMetaArgs

func ObjectMetaPtr(v *ObjectMetaArgs) ObjectMetaPtrInput {
	return (*objectMetaPtrType)(v)
}

func (*objectMetaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectMeta)(nil)).Elem()
}

func (i *objectMetaPtrType) ToObjectMetaPtrOutput() ObjectMetaPtrOutput {
	return i.ToObjectMetaPtrOutputWithContext(context.Background())
}

func (i *objectMetaPtrType) ToObjectMetaPtrOutputWithContext(ctx context.Context) ObjectMetaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectMetaPtrOutput)
}

// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
type ObjectMetaOutput struct{ *pulumi.OutputState }

func (ObjectMetaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectMeta)(nil)).Elem()
}

func (o ObjectMetaOutput) ToObjectMetaOutput() ObjectMetaOutput {
	return o
}

func (o ObjectMetaOutput) ToObjectMetaOutputWithContext(ctx context.Context) ObjectMetaOutput {
	return o
}

func (o ObjectMetaOutput) ToObjectMetaPtrOutput() ObjectMetaPtrOutput {
	return o.ToObjectMetaPtrOutputWithContext(context.Background())
}

func (o ObjectMetaOutput) ToObjectMetaPtrOutputWithContext(ctx context.Context) ObjectMetaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ObjectMeta) *ObjectMeta {
		return &v
	}).(ObjectMetaPtrOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
func (o ObjectMetaOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ObjectMeta) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
//
// Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ObjectMetaOutput) CreationTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.CreationTimestamp }).(pulumi.StringPtrOutput)
}

// Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
func (o ObjectMetaOutput) DeletionGracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *int { return v.DeletionGracePeriodSeconds }).(pulumi.IntPtrOutput)
}

// DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
//
// Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ObjectMetaOutput) DeletionTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.DeletionTimestamp }).(pulumi.StringPtrOutput)
}

// Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
func (o ObjectMetaOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ObjectMeta) []string { return v.Finalizers }).(pulumi.StringArrayOutput)
}

// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
//
// If this field is specified and the generated name exists, the server will return a 409.
//
// Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
func (o ObjectMetaOutput) GenerateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.GenerateName }).(pulumi.StringPtrOutput)
}

// A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
func (o ObjectMetaOutput) Generation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *int { return v.Generation }).(pulumi.IntPtrOutput)
}

// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
func (o ObjectMetaOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ObjectMeta) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
func (o ObjectMetaOutput) ManagedFields() ManagedFieldsEntryArrayOutput {
	return o.ApplyT(func(v ObjectMeta) []ManagedFieldsEntry { return v.ManagedFields }).(ManagedFieldsEntryArrayOutput)
}

// Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
func (o ObjectMetaOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
//
// Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
func (o ObjectMetaOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
func (o ObjectMetaOutput) OwnerReferences() OwnerReferenceArrayOutput {
	return o.ApplyT(func(v ObjectMeta) []OwnerReference { return v.OwnerReferences }).(OwnerReferenceArrayOutput)
}

// An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
//
// Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ObjectMetaOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
func (o ObjectMetaOutput) SelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.SelfLink }).(pulumi.StringPtrOutput)
}

// UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
//
// Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
func (o ObjectMetaOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMeta) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ObjectMetaPtrOutput struct{ *pulumi.OutputState }

func (ObjectMetaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectMeta)(nil)).Elem()
}

func (o ObjectMetaPtrOutput) ToObjectMetaPtrOutput() ObjectMetaPtrOutput {
	return o
}

func (o ObjectMetaPtrOutput) ToObjectMetaPtrOutputWithContext(ctx context.Context) ObjectMetaPtrOutput {
	return o
}

func (o ObjectMetaPtrOutput) Elem() ObjectMetaOutput {
	return o.ApplyT(func(v *ObjectMeta) ObjectMeta {
		if v != nil {
			return *v
		}
		var ret ObjectMeta
		return ret
	}).(ObjectMetaOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
func (o ObjectMetaPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ObjectMeta) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
//
// Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ObjectMetaPtrOutput) CreationTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.CreationTimestamp
	}).(pulumi.StringPtrOutput)
}

// Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
func (o ObjectMetaPtrOutput) DeletionGracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *int {
		if v == nil {
			return nil
		}
		return v.DeletionGracePeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
//
// Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ObjectMetaPtrOutput) DeletionTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.DeletionTimestamp
	}).(pulumi.StringPtrOutput)
}

// Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
func (o ObjectMetaPtrOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ObjectMeta) []string {
		if v == nil {
			return nil
		}
		return v.Finalizers
	}).(pulumi.StringArrayOutput)
}

// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
//
// If this field is specified and the generated name exists, the server will return a 409.
//
// Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
func (o ObjectMetaPtrOutput) GenerateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.GenerateName
	}).(pulumi.StringPtrOutput)
}

// A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
func (o ObjectMetaPtrOutput) Generation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *int {
		if v == nil {
			return nil
		}
		return v.Generation
	}).(pulumi.IntPtrOutput)
}

// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
func (o ObjectMetaPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ObjectMeta) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
func (o ObjectMetaPtrOutput) ManagedFields() ManagedFieldsEntryArrayOutput {
	return o.ApplyT(func(v *ObjectMeta) []ManagedFieldsEntry {
		if v == nil {
			return nil
		}
		return v.ManagedFields
	}).(ManagedFieldsEntryArrayOutput)
}

// Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
func (o ObjectMetaPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
//
// Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
func (o ObjectMetaPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
func (o ObjectMetaPtrOutput) OwnerReferences() OwnerReferenceArrayOutput {
	return o.ApplyT(func(v *ObjectMeta) []OwnerReference {
		if v == nil {
			return nil
		}
		return v.OwnerReferences
	}).(OwnerReferenceArrayOutput)
}

// An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
//
// Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ObjectMetaPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
func (o ObjectMetaPtrOutput) SelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.SelfLink
	}).(pulumi.StringPtrOutput)
}

// UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
//
// Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
func (o ObjectMetaPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMeta) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
type ObjectMetaPatch struct {
	// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
	Annotations map[string]string `pulumi:"annotations"`
	// CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
	//
	// Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	CreationTimestamp *string `pulumi:"creationTimestamp"`
	// Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
	DeletionGracePeriodSeconds *int `pulumi:"deletionGracePeriodSeconds"`
	// DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
	//
	// Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	DeletionTimestamp *string `pulumi:"deletionTimestamp"`
	// Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
	Finalizers []string `pulumi:"finalizers"`
	// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
	//
	// If this field is specified and the generated name exists, the server will return a 409.
	//
	// Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
	GenerateName *string `pulumi:"generateName"`
	// A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
	Generation *int `pulumi:"generation"`
	// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
	Labels map[string]string `pulumi:"labels"`
	// ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
	ManagedFields []ManagedFieldsEntryPatch `pulumi:"managedFields"`
	// Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
	Name *string `pulumi:"name"`
	// Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
	//
	// Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
	Namespace *string `pulumi:"namespace"`
	// List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
	OwnerReferences []OwnerReferencePatch `pulumi:"ownerReferences"`
	// An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
	//
	// Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
	SelfLink *string `pulumi:"selfLink"`
	// UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
	//
	// Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	Uid *string `pulumi:"uid"`
}

// ObjectMetaPatchInput is an input type that accepts ObjectMetaPatchArgs and ObjectMetaPatchOutput values.
// You can construct a concrete instance of `ObjectMetaPatchInput` via:
//
//	ObjectMetaPatchArgs{...}
type ObjectMetaPatchInput interface {
	pulumi.Input

	ToObjectMetaPatchOutput() ObjectMetaPatchOutput
	ToObjectMetaPatchOutputWithContext(context.Context) ObjectMetaPatchOutput
}

// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
type ObjectMetaPatchArgs struct {
	// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
	//
	// Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	CreationTimestamp pulumi.StringPtrInput `pulumi:"creationTimestamp"`
	// Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
	DeletionGracePeriodSeconds pulumi.IntPtrInput `pulumi:"deletionGracePeriodSeconds"`
	// DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
	//
	// Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	DeletionTimestamp pulumi.StringPtrInput `pulumi:"deletionTimestamp"`
	// Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
	Finalizers pulumi.StringArrayInput `pulumi:"finalizers"`
	// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
	//
	// If this field is specified and the generated name exists, the server will return a 409.
	//
	// Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
	GenerateName pulumi.StringPtrInput `pulumi:"generateName"`
	// A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
	Generation pulumi.IntPtrInput `pulumi:"generation"`
	// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
	ManagedFields ManagedFieldsEntryPatchArrayInput `pulumi:"managedFields"`
	// Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
	//
	// Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
	OwnerReferences OwnerReferencePatchArrayInput `pulumi:"ownerReferences"`
	// An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
	//
	// Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
	SelfLink pulumi.StringPtrInput `pulumi:"selfLink"`
	// UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
	//
	// Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ObjectMetaPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectMetaPatch)(nil)).Elem()
}

func (i ObjectMetaPatchArgs) ToObjectMetaPatchOutput() ObjectMetaPatchOutput {
	return i.ToObjectMetaPatchOutputWithContext(context.Background())
}

func (i ObjectMetaPatchArgs) ToObjectMetaPatchOutputWithContext(ctx context.Context) ObjectMetaPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectMetaPatchOutput)
}

func (i ObjectMetaPatchArgs) ToObjectMetaPatchPtrOutput() ObjectMetaPatchPtrOutput {
	return i.ToObjectMetaPatchPtrOutputWithContext(context.Background())
}

func (i ObjectMetaPatchArgs) ToObjectMetaPatchPtrOutputWithContext(ctx context.Context) ObjectMetaPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectMetaPatchOutput).ToObjectMetaPatchPtrOutputWithContext(ctx)
}

// ObjectMetaPatchPtrInput is an input type that accepts ObjectMetaPatchArgs, ObjectMetaPatchPtr and ObjectMetaPatchPtrOutput values.
// You can construct a concrete instance of `ObjectMetaPatchPtrInput` via:
//
//	        ObjectMetaPatchArgs{...}
//
//	or:
//
//	        nil
type ObjectMetaPatchPtrInput interface {
	pulumi.Input

	ToObjectMetaPatchPtrOutput() ObjectMetaPatchPtrOutput
	ToObjectMetaPatchPtrOutputWithContext(context.Context) ObjectMetaPatchPtrOutput
}

type objectMetaPatchPtrType ObjectMetaPatchArgs

func ObjectMetaPatchPtr(v *ObjectMetaPatchArgs) ObjectMetaPatchPtrInput {
	return (*objectMetaPatchPtrType)(v)
}

func (*objectMetaPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectMetaPatch)(nil)).Elem()
}

func (i *objectMetaPatchPtrType) ToObjectMetaPatchPtrOutput() ObjectMetaPatchPtrOutput {
	return i.ToObjectMetaPatchPtrOutputWithContext(context.Background())
}

func (i *objectMetaPatchPtrType) ToObjectMetaPatchPtrOutputWithContext(ctx context.Context) ObjectMetaPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectMetaPatchPtrOutput)
}

// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
type ObjectMetaPatchOutput struct{ *pulumi.OutputState }

func (ObjectMetaPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectMetaPatch)(nil)).Elem()
}

func (o ObjectMetaPatchOutput) ToObjectMetaPatchOutput() ObjectMetaPatchOutput {
	return o
}

func (o ObjectMetaPatchOutput) ToObjectMetaPatchOutputWithContext(ctx context.Context) ObjectMetaPatchOutput {
	return o
}

func (o ObjectMetaPatchOutput) ToObjectMetaPatchPtrOutput() ObjectMetaPatchPtrOutput {
	return o.ToObjectMetaPatchPtrOutputWithContext(context.Background())
}

func (o ObjectMetaPatchOutput) ToObjectMetaPatchPtrOutputWithContext(ctx context.Context) ObjectMetaPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ObjectMetaPatch) *ObjectMetaPatch {
		return &v
	}).(ObjectMetaPatchPtrOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
func (o ObjectMetaPatchOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ObjectMetaPatch) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
//
// Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ObjectMetaPatchOutput) CreationTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMetaPatch) *string { return v.CreationTimestamp }).(pulumi.StringPtrOutput)
}

// Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
func (o ObjectMetaPatchOutput) DeletionGracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ObjectMetaPatch) *int { return v.DeletionGracePeriodSeconds }).(pulumi.IntPtrOutput)
}

// DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
//
// Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ObjectMetaPatchOutput) DeletionTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMetaPatch) *string { return v.DeletionTimestamp }).(pulumi.StringPtrOutput)
}

// Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
func (o ObjectMetaPatchOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ObjectMetaPatch) []string { return v.Finalizers }).(pulumi.StringArrayOutput)
}

// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
//
// If this field is specified and the generated name exists, the server will return a 409.
//
// Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
func (o ObjectMetaPatchOutput) GenerateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMetaPatch) *string { return v.GenerateName }).(pulumi.StringPtrOutput)
}

// A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
func (o ObjectMetaPatchOutput) Generation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ObjectMetaPatch) *int { return v.Generation }).(pulumi.IntPtrOutput)
}

// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
func (o ObjectMetaPatchOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ObjectMetaPatch) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
func (o ObjectMetaPatchOutput) ManagedFields() ManagedFieldsEntryPatchArrayOutput {
	return o.ApplyT(func(v ObjectMetaPatch) []ManagedFieldsEntryPatch { return v.ManagedFields }).(ManagedFieldsEntryPatchArrayOutput)
}

// Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
func (o ObjectMetaPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMetaPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
//
// Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
func (o ObjectMetaPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMetaPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
func (o ObjectMetaPatchOutput) OwnerReferences() OwnerReferencePatchArrayOutput {
	return o.ApplyT(func(v ObjectMetaPatch) []OwnerReferencePatch { return v.OwnerReferences }).(OwnerReferencePatchArrayOutput)
}

// An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
//
// Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ObjectMetaPatchOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMetaPatch) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
func (o ObjectMetaPatchOutput) SelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMetaPatch) *string { return v.SelfLink }).(pulumi.StringPtrOutput)
}

// UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
//
// Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
func (o ObjectMetaPatchOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectMetaPatch) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ObjectMetaPatchPtrOutput struct{ *pulumi.OutputState }

func (ObjectMetaPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectMetaPatch)(nil)).Elem()
}

func (o ObjectMetaPatchPtrOutput) ToObjectMetaPatchPtrOutput() ObjectMetaPatchPtrOutput {
	return o
}

func (o ObjectMetaPatchPtrOutput) ToObjectMetaPatchPtrOutputWithContext(ctx context.Context) ObjectMetaPatchPtrOutput {
	return o
}

func (o ObjectMetaPatchPtrOutput) Elem() ObjectMetaPatchOutput {
	return o.ApplyT(func(v *ObjectMetaPatch) ObjectMetaPatch {
		if v != nil {
			return *v
		}
		var ret ObjectMetaPatch
		return ret
	}).(ObjectMetaPatchOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
func (o ObjectMetaPatchPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ObjectMetaPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
//
// Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ObjectMetaPatchPtrOutput) CreationTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMetaPatch) *string {
		if v == nil {
			return nil
		}
		return v.CreationTimestamp
	}).(pulumi.StringPtrOutput)
}

// Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
func (o ObjectMetaPatchPtrOutput) DeletionGracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ObjectMetaPatch) *int {
		if v == nil {
			return nil
		}
		return v.DeletionGracePeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
//
// Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ObjectMetaPatchPtrOutput) DeletionTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMetaPatch) *string {
		if v == nil {
			return nil
		}
		return v.DeletionTimestamp
	}).(pulumi.StringPtrOutput)
}

// Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
func (o ObjectMetaPatchPtrOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ObjectMetaPatch) []string {
		if v == nil {
			return nil
		}
		return v.Finalizers
	}).(pulumi.StringArrayOutput)
}

// GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
//
// If this field is specified and the generated name exists, the server will return a 409.
//
// Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
func (o ObjectMetaPatchPtrOutput) GenerateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMetaPatch) *string {
		if v == nil {
			return nil
		}
		return v.GenerateName
	}).(pulumi.StringPtrOutput)
}

// A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
func (o ObjectMetaPatchPtrOutput) Generation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ObjectMetaPatch) *int {
		if v == nil {
			return nil
		}
		return v.Generation
	}).(pulumi.IntPtrOutput)
}

// Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
func (o ObjectMetaPatchPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ObjectMetaPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
func (o ObjectMetaPatchPtrOutput) ManagedFields() ManagedFieldsEntryPatchArrayOutput {
	return o.ApplyT(func(v *ObjectMetaPatch) []ManagedFieldsEntryPatch {
		if v == nil {
			return nil
		}
		return v.ManagedFields
	}).(ManagedFieldsEntryPatchArrayOutput)
}

// Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
func (o ObjectMetaPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMetaPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
//
// Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
func (o ObjectMetaPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMetaPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
func (o ObjectMetaPatchPtrOutput) OwnerReferences() OwnerReferencePatchArrayOutput {
	return o.ApplyT(func(v *ObjectMetaPatch) []OwnerReferencePatch {
		if v == nil {
			return nil
		}
		return v.OwnerReferences
	}).(OwnerReferencePatchArrayOutput)
}

// An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
//
// Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ObjectMetaPatchPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMetaPatch) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
func (o ObjectMetaPatchPtrOutput) SelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMetaPatch) *string {
		if v == nil {
			return nil
		}
		return v.SelfLink
	}).(pulumi.StringPtrOutput)
}

// UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
//
// Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
func (o ObjectMetaPatchPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ObjectMetaPatch) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
type OwnerReference struct {
	// API version of the referent.
	ApiVersion string `pulumi:"apiVersion"`
	// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
	BlockOwnerDeletion *bool `pulumi:"blockOwnerDeletion"`
	// If true, this reference points to the managing controller.
	Controller *bool `pulumi:"controller"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
	Name string `pulumi:"name"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	Uid string `pulumi:"uid"`
}

// OwnerReferenceInput is an input type that accepts OwnerReferenceArgs and OwnerReferenceOutput values.
// You can construct a concrete instance of `OwnerReferenceInput` via:
//
//	OwnerReferenceArgs{...}
type OwnerReferenceInput interface {
	pulumi.Input

	ToOwnerReferenceOutput() OwnerReferenceOutput
	ToOwnerReferenceOutputWithContext(context.Context) OwnerReferenceOutput
}

// OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
type OwnerReferenceArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`
	// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
	BlockOwnerDeletion pulumi.BoolPtrInput `pulumi:"blockOwnerDeletion"`
	// If true, this reference points to the managing controller.
	Controller pulumi.BoolPtrInput `pulumi:"controller"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
	Name pulumi.StringInput `pulumi:"name"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	Uid pulumi.StringInput `pulumi:"uid"`
}

func (OwnerReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OwnerReference)(nil)).Elem()
}

func (i OwnerReferenceArgs) ToOwnerReferenceOutput() OwnerReferenceOutput {
	return i.ToOwnerReferenceOutputWithContext(context.Background())
}

func (i OwnerReferenceArgs) ToOwnerReferenceOutputWithContext(ctx context.Context) OwnerReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OwnerReferenceOutput)
}

// OwnerReferenceArrayInput is an input type that accepts OwnerReferenceArray and OwnerReferenceArrayOutput values.
// You can construct a concrete instance of `OwnerReferenceArrayInput` via:
//
//	OwnerReferenceArray{ OwnerReferenceArgs{...} }
type OwnerReferenceArrayInput interface {
	pulumi.Input

	ToOwnerReferenceArrayOutput() OwnerReferenceArrayOutput
	ToOwnerReferenceArrayOutputWithContext(context.Context) OwnerReferenceArrayOutput
}

type OwnerReferenceArray []OwnerReferenceInput

func (OwnerReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OwnerReference)(nil)).Elem()
}

func (i OwnerReferenceArray) ToOwnerReferenceArrayOutput() OwnerReferenceArrayOutput {
	return i.ToOwnerReferenceArrayOutputWithContext(context.Background())
}

func (i OwnerReferenceArray) ToOwnerReferenceArrayOutputWithContext(ctx context.Context) OwnerReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OwnerReferenceArrayOutput)
}

// OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
type OwnerReferenceOutput struct{ *pulumi.OutputState }

func (OwnerReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OwnerReference)(nil)).Elem()
}

func (o OwnerReferenceOutput) ToOwnerReferenceOutput() OwnerReferenceOutput {
	return o
}

func (o OwnerReferenceOutput) ToOwnerReferenceOutputWithContext(ctx context.Context) OwnerReferenceOutput {
	return o
}

// API version of the referent.
func (o OwnerReferenceOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v OwnerReference) string { return v.ApiVersion }).(pulumi.StringOutput)
}

// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
func (o OwnerReferenceOutput) BlockOwnerDeletion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OwnerReference) *bool { return v.BlockOwnerDeletion }).(pulumi.BoolPtrOutput)
}

// If true, this reference points to the managing controller.
func (o OwnerReferenceOutput) Controller() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OwnerReference) *bool { return v.Controller }).(pulumi.BoolPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o OwnerReferenceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v OwnerReference) string { return v.Kind }).(pulumi.StringOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
func (o OwnerReferenceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v OwnerReference) string { return v.Name }).(pulumi.StringOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
func (o OwnerReferenceOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v OwnerReference) string { return v.Uid }).(pulumi.StringOutput)
}

type OwnerReferenceArrayOutput struct{ *pulumi.OutputState }

func (OwnerReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OwnerReference)(nil)).Elem()
}

func (o OwnerReferenceArrayOutput) ToOwnerReferenceArrayOutput() OwnerReferenceArrayOutput {
	return o
}

func (o OwnerReferenceArrayOutput) ToOwnerReferenceArrayOutputWithContext(ctx context.Context) OwnerReferenceArrayOutput {
	return o
}

func (o OwnerReferenceArrayOutput) Index(i pulumi.IntInput) OwnerReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OwnerReference {
		return vs[0].([]OwnerReference)[vs[1].(int)]
	}).(OwnerReferenceOutput)
}

// OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
type OwnerReferencePatch struct {
	// API version of the referent.
	ApiVersion *string `pulumi:"apiVersion"`
	// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
	BlockOwnerDeletion *bool `pulumi:"blockOwnerDeletion"`
	// If true, this reference points to the managing controller.
	Controller *bool `pulumi:"controller"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
	Name *string `pulumi:"name"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	Uid *string `pulumi:"uid"`
}

// OwnerReferencePatchInput is an input type that accepts OwnerReferencePatchArgs and OwnerReferencePatchOutput values.
// You can construct a concrete instance of `OwnerReferencePatchInput` via:
//
//	OwnerReferencePatchArgs{...}
type OwnerReferencePatchInput interface {
	pulumi.Input

	ToOwnerReferencePatchOutput() OwnerReferencePatchOutput
	ToOwnerReferencePatchOutputWithContext(context.Context) OwnerReferencePatchOutput
}

// OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
type OwnerReferencePatchArgs struct {
	// API version of the referent.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
	BlockOwnerDeletion pulumi.BoolPtrInput `pulumi:"blockOwnerDeletion"`
	// If true, this reference points to the managing controller.
	Controller pulumi.BoolPtrInput `pulumi:"controller"`
	// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (OwnerReferencePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OwnerReferencePatch)(nil)).Elem()
}

func (i OwnerReferencePatchArgs) ToOwnerReferencePatchOutput() OwnerReferencePatchOutput {
	return i.ToOwnerReferencePatchOutputWithContext(context.Background())
}

func (i OwnerReferencePatchArgs) ToOwnerReferencePatchOutputWithContext(ctx context.Context) OwnerReferencePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OwnerReferencePatchOutput)
}

// OwnerReferencePatchArrayInput is an input type that accepts OwnerReferencePatchArray and OwnerReferencePatchArrayOutput values.
// You can construct a concrete instance of `OwnerReferencePatchArrayInput` via:
//
//	OwnerReferencePatchArray{ OwnerReferencePatchArgs{...} }
type OwnerReferencePatchArrayInput interface {
	pulumi.Input

	ToOwnerReferencePatchArrayOutput() OwnerReferencePatchArrayOutput
	ToOwnerReferencePatchArrayOutputWithContext(context.Context) OwnerReferencePatchArrayOutput
}

type OwnerReferencePatchArray []OwnerReferencePatchInput

func (OwnerReferencePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OwnerReferencePatch)(nil)).Elem()
}

func (i OwnerReferencePatchArray) ToOwnerReferencePatchArrayOutput() OwnerReferencePatchArrayOutput {
	return i.ToOwnerReferencePatchArrayOutputWithContext(context.Background())
}

func (i OwnerReferencePatchArray) ToOwnerReferencePatchArrayOutputWithContext(ctx context.Context) OwnerReferencePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OwnerReferencePatchArrayOutput)
}

// OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
type OwnerReferencePatchOutput struct{ *pulumi.OutputState }

func (OwnerReferencePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OwnerReferencePatch)(nil)).Elem()
}

func (o OwnerReferencePatchOutput) ToOwnerReferencePatchOutput() OwnerReferencePatchOutput {
	return o
}

func (o OwnerReferencePatchOutput) ToOwnerReferencePatchOutputWithContext(ctx context.Context) OwnerReferencePatchOutput {
	return o
}

// API version of the referent.
func (o OwnerReferencePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OwnerReferencePatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
func (o OwnerReferencePatchOutput) BlockOwnerDeletion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OwnerReferencePatch) *bool { return v.BlockOwnerDeletion }).(pulumi.BoolPtrOutput)
}

// If true, this reference points to the managing controller.
func (o OwnerReferencePatchOutput) Controller() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OwnerReferencePatch) *bool { return v.Controller }).(pulumi.BoolPtrOutput)
}

// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o OwnerReferencePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OwnerReferencePatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
func (o OwnerReferencePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OwnerReferencePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
func (o OwnerReferencePatchOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OwnerReferencePatch) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type OwnerReferencePatchArrayOutput struct{ *pulumi.OutputState }

func (OwnerReferencePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OwnerReferencePatch)(nil)).Elem()
}

func (o OwnerReferencePatchArrayOutput) ToOwnerReferencePatchArrayOutput() OwnerReferencePatchArrayOutput {
	return o
}

func (o OwnerReferencePatchArrayOutput) ToOwnerReferencePatchArrayOutputWithContext(ctx context.Context) OwnerReferencePatchArrayOutput {
	return o
}

func (o OwnerReferencePatchArrayOutput) Index(i pulumi.IntInput) OwnerReferencePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OwnerReferencePatch {
		return vs[0].([]OwnerReferencePatch)[vs[1].(int)]
	}).(OwnerReferencePatchOutput)
}

// Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.
type Preconditions struct {
	// Specifies the target ResourceVersion
	ResourceVersion *string `pulumi:"resourceVersion"`
	// Specifies the target UID.
	Uid *string `pulumi:"uid"`
}

// PreconditionsInput is an input type that accepts PreconditionsArgs and PreconditionsOutput values.
// You can construct a concrete instance of `PreconditionsInput` via:
//
//	PreconditionsArgs{...}
type PreconditionsInput interface {
	pulumi.Input

	ToPreconditionsOutput() PreconditionsOutput
	ToPreconditionsOutputWithContext(context.Context) PreconditionsOutput
}

// Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.
type PreconditionsArgs struct {
	// Specifies the target ResourceVersion
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// Specifies the target UID.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (PreconditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Preconditions)(nil)).Elem()
}

func (i PreconditionsArgs) ToPreconditionsOutput() PreconditionsOutput {
	return i.ToPreconditionsOutputWithContext(context.Background())
}

func (i PreconditionsArgs) ToPreconditionsOutputWithContext(ctx context.Context) PreconditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreconditionsOutput)
}

func (i PreconditionsArgs) ToPreconditionsPtrOutput() PreconditionsPtrOutput {
	return i.ToPreconditionsPtrOutputWithContext(context.Background())
}

func (i PreconditionsArgs) ToPreconditionsPtrOutputWithContext(ctx context.Context) PreconditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreconditionsOutput).ToPreconditionsPtrOutputWithContext(ctx)
}

// PreconditionsPtrInput is an input type that accepts PreconditionsArgs, PreconditionsPtr and PreconditionsPtrOutput values.
// You can construct a concrete instance of `PreconditionsPtrInput` via:
//
//	        PreconditionsArgs{...}
//
//	or:
//
//	        nil
type PreconditionsPtrInput interface {
	pulumi.Input

	ToPreconditionsPtrOutput() PreconditionsPtrOutput
	ToPreconditionsPtrOutputWithContext(context.Context) PreconditionsPtrOutput
}

type preconditionsPtrType PreconditionsArgs

func PreconditionsPtr(v *PreconditionsArgs) PreconditionsPtrInput {
	return (*preconditionsPtrType)(v)
}

func (*preconditionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Preconditions)(nil)).Elem()
}

func (i *preconditionsPtrType) ToPreconditionsPtrOutput() PreconditionsPtrOutput {
	return i.ToPreconditionsPtrOutputWithContext(context.Background())
}

func (i *preconditionsPtrType) ToPreconditionsPtrOutputWithContext(ctx context.Context) PreconditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreconditionsPtrOutput)
}

// Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.
type PreconditionsOutput struct{ *pulumi.OutputState }

func (PreconditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Preconditions)(nil)).Elem()
}

func (o PreconditionsOutput) ToPreconditionsOutput() PreconditionsOutput {
	return o
}

func (o PreconditionsOutput) ToPreconditionsOutputWithContext(ctx context.Context) PreconditionsOutput {
	return o
}

func (o PreconditionsOutput) ToPreconditionsPtrOutput() PreconditionsPtrOutput {
	return o.ToPreconditionsPtrOutputWithContext(context.Background())
}

func (o PreconditionsOutput) ToPreconditionsPtrOutputWithContext(ctx context.Context) PreconditionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Preconditions) *Preconditions {
		return &v
	}).(PreconditionsPtrOutput)
}

// Specifies the target ResourceVersion
func (o PreconditionsOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Preconditions) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// Specifies the target UID.
func (o PreconditionsOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Preconditions) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type PreconditionsPtrOutput struct{ *pulumi.OutputState }

func (PreconditionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Preconditions)(nil)).Elem()
}

func (o PreconditionsPtrOutput) ToPreconditionsPtrOutput() PreconditionsPtrOutput {
	return o
}

func (o PreconditionsPtrOutput) ToPreconditionsPtrOutputWithContext(ctx context.Context) PreconditionsPtrOutput {
	return o
}

func (o PreconditionsPtrOutput) Elem() PreconditionsOutput {
	return o.ApplyT(func(v *Preconditions) Preconditions {
		if v != nil {
			return *v
		}
		var ret Preconditions
		return ret
	}).(PreconditionsOutput)
}

// Specifies the target ResourceVersion
func (o PreconditionsPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Preconditions) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// Specifies the target UID.
func (o PreconditionsPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Preconditions) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.
type PreconditionsPatch struct {
	// Specifies the target ResourceVersion
	ResourceVersion *string `pulumi:"resourceVersion"`
	// Specifies the target UID.
	Uid *string `pulumi:"uid"`
}

// PreconditionsPatchInput is an input type that accepts PreconditionsPatchArgs and PreconditionsPatchOutput values.
// You can construct a concrete instance of `PreconditionsPatchInput` via:
//
//	PreconditionsPatchArgs{...}
type PreconditionsPatchInput interface {
	pulumi.Input

	ToPreconditionsPatchOutput() PreconditionsPatchOutput
	ToPreconditionsPatchOutputWithContext(context.Context) PreconditionsPatchOutput
}

// Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.
type PreconditionsPatchArgs struct {
	// Specifies the target ResourceVersion
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// Specifies the target UID.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (PreconditionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PreconditionsPatch)(nil)).Elem()
}

func (i PreconditionsPatchArgs) ToPreconditionsPatchOutput() PreconditionsPatchOutput {
	return i.ToPreconditionsPatchOutputWithContext(context.Background())
}

func (i PreconditionsPatchArgs) ToPreconditionsPatchOutputWithContext(ctx context.Context) PreconditionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreconditionsPatchOutput)
}

func (i PreconditionsPatchArgs) ToPreconditionsPatchPtrOutput() PreconditionsPatchPtrOutput {
	return i.ToPreconditionsPatchPtrOutputWithContext(context.Background())
}

func (i PreconditionsPatchArgs) ToPreconditionsPatchPtrOutputWithContext(ctx context.Context) PreconditionsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreconditionsPatchOutput).ToPreconditionsPatchPtrOutputWithContext(ctx)
}

// PreconditionsPatchPtrInput is an input type that accepts PreconditionsPatchArgs, PreconditionsPatchPtr and PreconditionsPatchPtrOutput values.
// You can construct a concrete instance of `PreconditionsPatchPtrInput` via:
//
//	        PreconditionsPatchArgs{...}
//
//	or:
//
//	        nil
type PreconditionsPatchPtrInput interface {
	pulumi.Input

	ToPreconditionsPatchPtrOutput() PreconditionsPatchPtrOutput
	ToPreconditionsPatchPtrOutputWithContext(context.Context) PreconditionsPatchPtrOutput
}

type preconditionsPatchPtrType PreconditionsPatchArgs

func PreconditionsPatchPtr(v *PreconditionsPatchArgs) PreconditionsPatchPtrInput {
	return (*preconditionsPatchPtrType)(v)
}

func (*preconditionsPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PreconditionsPatch)(nil)).Elem()
}

func (i *preconditionsPatchPtrType) ToPreconditionsPatchPtrOutput() PreconditionsPatchPtrOutput {
	return i.ToPreconditionsPatchPtrOutputWithContext(context.Background())
}

func (i *preconditionsPatchPtrType) ToPreconditionsPatchPtrOutputWithContext(ctx context.Context) PreconditionsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreconditionsPatchPtrOutput)
}

// Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.
type PreconditionsPatchOutput struct{ *pulumi.OutputState }

func (PreconditionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PreconditionsPatch)(nil)).Elem()
}

func (o PreconditionsPatchOutput) ToPreconditionsPatchOutput() PreconditionsPatchOutput {
	return o
}

func (o PreconditionsPatchOutput) ToPreconditionsPatchOutputWithContext(ctx context.Context) PreconditionsPatchOutput {
	return o
}

func (o PreconditionsPatchOutput) ToPreconditionsPatchPtrOutput() PreconditionsPatchPtrOutput {
	return o.ToPreconditionsPatchPtrOutputWithContext(context.Background())
}

func (o PreconditionsPatchOutput) ToPreconditionsPatchPtrOutputWithContext(ctx context.Context) PreconditionsPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PreconditionsPatch) *PreconditionsPatch {
		return &v
	}).(PreconditionsPatchPtrOutput)
}

// Specifies the target ResourceVersion
func (o PreconditionsPatchOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PreconditionsPatch) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// Specifies the target UID.
func (o PreconditionsPatchOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PreconditionsPatch) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type PreconditionsPatchPtrOutput struct{ *pulumi.OutputState }

func (PreconditionsPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PreconditionsPatch)(nil)).Elem()
}

func (o PreconditionsPatchPtrOutput) ToPreconditionsPatchPtrOutput() PreconditionsPatchPtrOutput {
	return o
}

func (o PreconditionsPatchPtrOutput) ToPreconditionsPatchPtrOutputWithContext(ctx context.Context) PreconditionsPatchPtrOutput {
	return o
}

func (o PreconditionsPatchPtrOutput) Elem() PreconditionsPatchOutput {
	return o.ApplyT(func(v *PreconditionsPatch) PreconditionsPatch {
		if v != nil {
			return *v
		}
		var ret PreconditionsPatch
		return ret
	}).(PreconditionsPatchOutput)
}

// Specifies the target ResourceVersion
func (o PreconditionsPatchPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PreconditionsPatch) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// Specifies the target UID.
func (o PreconditionsPatchPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PreconditionsPatch) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// Status is a return value for calls that don't return other objects.
type Status struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Suggested HTTP return code for this status, 0 if not set.
	Code *int `pulumi:"code"`
	// Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.
	Details *StatusDetails `pulumi:"details"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// A human-readable description of the status of this operation.
	Message *string `pulumi:"message"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *ListMeta `pulumi:"metadata"`
	// A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
	Reason *string `pulumi:"reason"`
	// Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *string `pulumi:"status"`
}

// StatusInput is an input type that accepts StatusArgs and StatusOutput values.
// You can construct a concrete instance of `StatusInput` via:
//
//	StatusArgs{...}
type StatusInput interface {
	pulumi.Input

	ToStatusOutput() StatusOutput
	ToStatusOutputWithContext(context.Context) StatusOutput
}

// Status is a return value for calls that don't return other objects.
type StatusArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Suggested HTTP return code for this status, 0 if not set.
	Code pulumi.IntPtrInput `pulumi:"code"`
	// Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.
	Details StatusDetailsPtrInput `pulumi:"details"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// A human-readable description of the status of this operation.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata ListMetaPtrInput `pulumi:"metadata"`
	// A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (StatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Status)(nil)).Elem()
}

func (i StatusArgs) ToStatusOutput() StatusOutput {
	return i.ToStatusOutputWithContext(context.Background())
}

func (i StatusArgs) ToStatusOutputWithContext(ctx context.Context) StatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusOutput)
}

// Status is a return value for calls that don't return other objects.
type StatusOutput struct{ *pulumi.OutputState }

func (StatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Status)(nil)).Elem()
}

func (o StatusOutput) ToStatusOutput() StatusOutput {
	return o
}

func (o StatusOutput) ToStatusOutputWithContext(ctx context.Context) StatusOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o StatusOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Status) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Suggested HTTP return code for this status, 0 if not set.
func (o StatusOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Status) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.
func (o StatusOutput) Details() StatusDetailsPtrOutput {
	return o.ApplyT(func(v Status) *StatusDetails { return v.Details }).(StatusDetailsPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StatusOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Status) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// A human-readable description of the status of this operation.
func (o StatusOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Status) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StatusOutput) Metadata() ListMetaPtrOutput {
	return o.ApplyT(func(v Status) *ListMeta { return v.Metadata }).(ListMetaPtrOutput)
}

// A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
func (o StatusOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Status) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o StatusOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Status) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.
type StatusCause struct {
	// The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.
	//
	// Examples:
	//   "name" - the field "name" on the current resource
	//   "items[0].name" - the field "name" on the first array entry in "items"
	Field *string `pulumi:"field"`
	// A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
	Message *string `pulumi:"message"`
	// A machine-readable description of the cause of the error. If this value is empty there is no information available.
	Reason *string `pulumi:"reason"`
}

// StatusCauseInput is an input type that accepts StatusCauseArgs and StatusCauseOutput values.
// You can construct a concrete instance of `StatusCauseInput` via:
//
//	StatusCauseArgs{...}
type StatusCauseInput interface {
	pulumi.Input

	ToStatusCauseOutput() StatusCauseOutput
	ToStatusCauseOutputWithContext(context.Context) StatusCauseOutput
}

// StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.
type StatusCauseArgs struct {
	// The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.
	//
	// Examples:
	//   "name" - the field "name" on the current resource
	//   "items[0].name" - the field "name" on the first array entry in "items"
	Field pulumi.StringPtrInput `pulumi:"field"`
	// A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// A machine-readable description of the cause of the error. If this value is empty there is no information available.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
}

func (StatusCauseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusCause)(nil)).Elem()
}

func (i StatusCauseArgs) ToStatusCauseOutput() StatusCauseOutput {
	return i.ToStatusCauseOutputWithContext(context.Background())
}

func (i StatusCauseArgs) ToStatusCauseOutputWithContext(ctx context.Context) StatusCauseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusCauseOutput)
}

// StatusCauseArrayInput is an input type that accepts StatusCauseArray and StatusCauseArrayOutput values.
// You can construct a concrete instance of `StatusCauseArrayInput` via:
//
//	StatusCauseArray{ StatusCauseArgs{...} }
type StatusCauseArrayInput interface {
	pulumi.Input

	ToStatusCauseArrayOutput() StatusCauseArrayOutput
	ToStatusCauseArrayOutputWithContext(context.Context) StatusCauseArrayOutput
}

type StatusCauseArray []StatusCauseInput

func (StatusCauseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatusCause)(nil)).Elem()
}

func (i StatusCauseArray) ToStatusCauseArrayOutput() StatusCauseArrayOutput {
	return i.ToStatusCauseArrayOutputWithContext(context.Background())
}

func (i StatusCauseArray) ToStatusCauseArrayOutputWithContext(ctx context.Context) StatusCauseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusCauseArrayOutput)
}

// StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.
type StatusCauseOutput struct{ *pulumi.OutputState }

func (StatusCauseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusCause)(nil)).Elem()
}

func (o StatusCauseOutput) ToStatusCauseOutput() StatusCauseOutput {
	return o
}

func (o StatusCauseOutput) ToStatusCauseOutputWithContext(ctx context.Context) StatusCauseOutput {
	return o
}

// The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.
//
// Examples:
//
//	"name" - the field "name" on the current resource
//	"items[0].name" - the field "name" on the first array entry in "items"
func (o StatusCauseOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatusCause) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
func (o StatusCauseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatusCause) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// A machine-readable description of the cause of the error. If this value is empty there is no information available.
func (o StatusCauseOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatusCause) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

type StatusCauseArrayOutput struct{ *pulumi.OutputState }

func (StatusCauseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatusCause)(nil)).Elem()
}

func (o StatusCauseArrayOutput) ToStatusCauseArrayOutput() StatusCauseArrayOutput {
	return o
}

func (o StatusCauseArrayOutput) ToStatusCauseArrayOutputWithContext(ctx context.Context) StatusCauseArrayOutput {
	return o
}

func (o StatusCauseArrayOutput) Index(i pulumi.IntInput) StatusCauseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StatusCause {
		return vs[0].([]StatusCause)[vs[1].(int)]
	}).(StatusCauseOutput)
}

// StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.
type StatusCausePatch struct {
	// The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.
	//
	// Examples:
	//   "name" - the field "name" on the current resource
	//   "items[0].name" - the field "name" on the first array entry in "items"
	Field *string `pulumi:"field"`
	// A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
	Message *string `pulumi:"message"`
	// A machine-readable description of the cause of the error. If this value is empty there is no information available.
	Reason *string `pulumi:"reason"`
}

// StatusCausePatchInput is an input type that accepts StatusCausePatchArgs and StatusCausePatchOutput values.
// You can construct a concrete instance of `StatusCausePatchInput` via:
//
//	StatusCausePatchArgs{...}
type StatusCausePatchInput interface {
	pulumi.Input

	ToStatusCausePatchOutput() StatusCausePatchOutput
	ToStatusCausePatchOutputWithContext(context.Context) StatusCausePatchOutput
}

// StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.
type StatusCausePatchArgs struct {
	// The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.
	//
	// Examples:
	//   "name" - the field "name" on the current resource
	//   "items[0].name" - the field "name" on the first array entry in "items"
	Field pulumi.StringPtrInput `pulumi:"field"`
	// A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// A machine-readable description of the cause of the error. If this value is empty there is no information available.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
}

func (StatusCausePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusCausePatch)(nil)).Elem()
}

func (i StatusCausePatchArgs) ToStatusCausePatchOutput() StatusCausePatchOutput {
	return i.ToStatusCausePatchOutputWithContext(context.Background())
}

func (i StatusCausePatchArgs) ToStatusCausePatchOutputWithContext(ctx context.Context) StatusCausePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusCausePatchOutput)
}

// StatusCausePatchArrayInput is an input type that accepts StatusCausePatchArray and StatusCausePatchArrayOutput values.
// You can construct a concrete instance of `StatusCausePatchArrayInput` via:
//
//	StatusCausePatchArray{ StatusCausePatchArgs{...} }
type StatusCausePatchArrayInput interface {
	pulumi.Input

	ToStatusCausePatchArrayOutput() StatusCausePatchArrayOutput
	ToStatusCausePatchArrayOutputWithContext(context.Context) StatusCausePatchArrayOutput
}

type StatusCausePatchArray []StatusCausePatchInput

func (StatusCausePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatusCausePatch)(nil)).Elem()
}

func (i StatusCausePatchArray) ToStatusCausePatchArrayOutput() StatusCausePatchArrayOutput {
	return i.ToStatusCausePatchArrayOutputWithContext(context.Background())
}

func (i StatusCausePatchArray) ToStatusCausePatchArrayOutputWithContext(ctx context.Context) StatusCausePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusCausePatchArrayOutput)
}

// StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.
type StatusCausePatchOutput struct{ *pulumi.OutputState }

func (StatusCausePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusCausePatch)(nil)).Elem()
}

func (o StatusCausePatchOutput) ToStatusCausePatchOutput() StatusCausePatchOutput {
	return o
}

func (o StatusCausePatchOutput) ToStatusCausePatchOutputWithContext(ctx context.Context) StatusCausePatchOutput {
	return o
}

// The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.
//
// Examples:
//
//	"name" - the field "name" on the current resource
//	"items[0].name" - the field "name" on the first array entry in "items"
func (o StatusCausePatchOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatusCausePatch) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
func (o StatusCausePatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatusCausePatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// A machine-readable description of the cause of the error. If this value is empty there is no information available.
func (o StatusCausePatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatusCausePatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

type StatusCausePatchArrayOutput struct{ *pulumi.OutputState }

func (StatusCausePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatusCausePatch)(nil)).Elem()
}

func (o StatusCausePatchArrayOutput) ToStatusCausePatchArrayOutput() StatusCausePatchArrayOutput {
	return o
}

func (o StatusCausePatchArrayOutput) ToStatusCausePatchArrayOutputWithContext(ctx context.Context) StatusCausePatchArrayOutput {
	return o
}

func (o StatusCausePatchArrayOutput) Index(i pulumi.IntInput) StatusCausePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StatusCausePatch {
		return vs[0].([]StatusCausePatch)[vs[1].(int)]
	}).(StatusCausePatchOutput)
}

// StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
type StatusDetails struct {
	// The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
	Causes []StatusCause `pulumi:"causes"`
	// The group attribute of the resource associated with the status StatusReason.
	Group *string `pulumi:"group"`
	// The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
	Name *string `pulumi:"name"`
	// If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
	RetryAfterSeconds *int `pulumi:"retryAfterSeconds"`
	// UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	Uid *string `pulumi:"uid"`
}

// StatusDetailsInput is an input type that accepts StatusDetailsArgs and StatusDetailsOutput values.
// You can construct a concrete instance of `StatusDetailsInput` via:
//
//	StatusDetailsArgs{...}
type StatusDetailsInput interface {
	pulumi.Input

	ToStatusDetailsOutput() StatusDetailsOutput
	ToStatusDetailsOutputWithContext(context.Context) StatusDetailsOutput
}

// StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
type StatusDetailsArgs struct {
	// The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
	Causes StatusCauseArrayInput `pulumi:"causes"`
	// The group attribute of the resource associated with the status StatusReason.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
	Name pulumi.StringPtrInput `pulumi:"name"`
	// If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
	RetryAfterSeconds pulumi.IntPtrInput `pulumi:"retryAfterSeconds"`
	// UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (StatusDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusDetails)(nil)).Elem()
}

func (i StatusDetailsArgs) ToStatusDetailsOutput() StatusDetailsOutput {
	return i.ToStatusDetailsOutputWithContext(context.Background())
}

func (i StatusDetailsArgs) ToStatusDetailsOutputWithContext(ctx context.Context) StatusDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusDetailsOutput)
}

func (i StatusDetailsArgs) ToStatusDetailsPtrOutput() StatusDetailsPtrOutput {
	return i.ToStatusDetailsPtrOutputWithContext(context.Background())
}

func (i StatusDetailsArgs) ToStatusDetailsPtrOutputWithContext(ctx context.Context) StatusDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusDetailsOutput).ToStatusDetailsPtrOutputWithContext(ctx)
}

// StatusDetailsPtrInput is an input type that accepts StatusDetailsArgs, StatusDetailsPtr and StatusDetailsPtrOutput values.
// You can construct a concrete instance of `StatusDetailsPtrInput` via:
//
//	        StatusDetailsArgs{...}
//
//	or:
//
//	        nil
type StatusDetailsPtrInput interface {
	pulumi.Input

	ToStatusDetailsPtrOutput() StatusDetailsPtrOutput
	ToStatusDetailsPtrOutputWithContext(context.Context) StatusDetailsPtrOutput
}

type statusDetailsPtrType StatusDetailsArgs

func StatusDetailsPtr(v *StatusDetailsArgs) StatusDetailsPtrInput {
	return (*statusDetailsPtrType)(v)
}

func (*statusDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StatusDetails)(nil)).Elem()
}

func (i *statusDetailsPtrType) ToStatusDetailsPtrOutput() StatusDetailsPtrOutput {
	return i.ToStatusDetailsPtrOutputWithContext(context.Background())
}

func (i *statusDetailsPtrType) ToStatusDetailsPtrOutputWithContext(ctx context.Context) StatusDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusDetailsPtrOutput)
}

// StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
type StatusDetailsOutput struct{ *pulumi.OutputState }

func (StatusDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusDetails)(nil)).Elem()
}

func (o StatusDetailsOutput) ToStatusDetailsOutput() StatusDetailsOutput {
	return o
}

func (o StatusDetailsOutput) ToStatusDetailsOutputWithContext(ctx context.Context) StatusDetailsOutput {
	return o
}

func (o StatusDetailsOutput) ToStatusDetailsPtrOutput() StatusDetailsPtrOutput {
	return o.ToStatusDetailsPtrOutputWithContext(context.Background())
}

func (o StatusDetailsOutput) ToStatusDetailsPtrOutputWithContext(ctx context.Context) StatusDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StatusDetails) *StatusDetails {
		return &v
	}).(StatusDetailsPtrOutput)
}

// The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
func (o StatusDetailsOutput) Causes() StatusCauseArrayOutput {
	return o.ApplyT(func(v StatusDetails) []StatusCause { return v.Causes }).(StatusCauseArrayOutput)
}

// The group attribute of the resource associated with the status StatusReason.
func (o StatusDetailsOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatusDetails) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StatusDetailsOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatusDetails) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
func (o StatusDetailsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatusDetails) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
func (o StatusDetailsOutput) RetryAfterSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StatusDetails) *int { return v.RetryAfterSeconds }).(pulumi.IntPtrOutput)
}

// UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
func (o StatusDetailsOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatusDetails) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type StatusDetailsPtrOutput struct{ *pulumi.OutputState }

func (StatusDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StatusDetails)(nil)).Elem()
}

func (o StatusDetailsPtrOutput) ToStatusDetailsPtrOutput() StatusDetailsPtrOutput {
	return o
}

func (o StatusDetailsPtrOutput) ToStatusDetailsPtrOutputWithContext(ctx context.Context) StatusDetailsPtrOutput {
	return o
}

func (o StatusDetailsPtrOutput) Elem() StatusDetailsOutput {
	return o.ApplyT(func(v *StatusDetails) StatusDetails {
		if v != nil {
			return *v
		}
		var ret StatusDetails
		return ret
	}).(StatusDetailsOutput)
}

// The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
func (o StatusDetailsPtrOutput) Causes() StatusCauseArrayOutput {
	return o.ApplyT(func(v *StatusDetails) []StatusCause {
		if v == nil {
			return nil
		}
		return v.Causes
	}).(StatusCauseArrayOutput)
}

// The group attribute of the resource associated with the status StatusReason.
func (o StatusDetailsPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StatusDetails) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StatusDetailsPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StatusDetails) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
func (o StatusDetailsPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StatusDetails) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
func (o StatusDetailsPtrOutput) RetryAfterSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StatusDetails) *int {
		if v == nil {
			return nil
		}
		return v.RetryAfterSeconds
	}).(pulumi.IntPtrOutput)
}

// UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
func (o StatusDetailsPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StatusDetails) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
type StatusDetailsPatch struct {
	// The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
	Causes []StatusCausePatch `pulumi:"causes"`
	// The group attribute of the resource associated with the status StatusReason.
	Group *string `pulumi:"group"`
	// The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
	Name *string `pulumi:"name"`
	// If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
	RetryAfterSeconds *int `pulumi:"retryAfterSeconds"`
	// UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	Uid *string `pulumi:"uid"`
}

// StatusDetailsPatchInput is an input type that accepts StatusDetailsPatchArgs and StatusDetailsPatchOutput values.
// You can construct a concrete instance of `StatusDetailsPatchInput` via:
//
//	StatusDetailsPatchArgs{...}
type StatusDetailsPatchInput interface {
	pulumi.Input

	ToStatusDetailsPatchOutput() StatusDetailsPatchOutput
	ToStatusDetailsPatchOutputWithContext(context.Context) StatusDetailsPatchOutput
}

// StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
type StatusDetailsPatchArgs struct {
	// The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
	Causes StatusCausePatchArrayInput `pulumi:"causes"`
	// The group attribute of the resource associated with the status StatusReason.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
	Name pulumi.StringPtrInput `pulumi:"name"`
	// If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
	RetryAfterSeconds pulumi.IntPtrInput `pulumi:"retryAfterSeconds"`
	// UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (StatusDetailsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusDetailsPatch)(nil)).Elem()
}

func (i StatusDetailsPatchArgs) ToStatusDetailsPatchOutput() StatusDetailsPatchOutput {
	return i.ToStatusDetailsPatchOutputWithContext(context.Background())
}

func (i StatusDetailsPatchArgs) ToStatusDetailsPatchOutputWithContext(ctx context.Context) StatusDetailsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusDetailsPatchOutput)
}

func (i StatusDetailsPatchArgs) ToStatusDetailsPatchPtrOutput() StatusDetailsPatchPtrOutput {
	return i.ToStatusDetailsPatchPtrOutputWithContext(context.Background())
}

func (i StatusDetailsPatchArgs) ToStatusDetailsPatchPtrOutputWithContext(ctx context.Context) StatusDetailsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusDetailsPatchOutput).ToStatusDetailsPatchPtrOutputWithContext(ctx)
}

// StatusDetailsPatchPtrInput is an input type that accepts StatusDetailsPatchArgs, StatusDetailsPatchPtr and StatusDetailsPatchPtrOutput values.
// You can construct a concrete instance of `StatusDetailsPatchPtrInput` via:
//
//	        StatusDetailsPatchArgs{...}
//
//	or:
//
//	        nil
type StatusDetailsPatchPtrInput interface {
	pulumi.Input

	ToStatusDetailsPatchPtrOutput() StatusDetailsPatchPtrOutput
	ToStatusDetailsPatchPtrOutputWithContext(context.Context) StatusDetailsPatchPtrOutput
}

type statusDetailsPatchPtrType StatusDetailsPatchArgs

func StatusDetailsPatchPtr(v *StatusDetailsPatchArgs) StatusDetailsPatchPtrInput {
	return (*statusDetailsPatchPtrType)(v)
}

func (*statusDetailsPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StatusDetailsPatch)(nil)).Elem()
}

func (i *statusDetailsPatchPtrType) ToStatusDetailsPatchPtrOutput() StatusDetailsPatchPtrOutput {
	return i.ToStatusDetailsPatchPtrOutputWithContext(context.Background())
}

func (i *statusDetailsPatchPtrType) ToStatusDetailsPatchPtrOutputWithContext(ctx context.Context) StatusDetailsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusDetailsPatchPtrOutput)
}

// StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
type StatusDetailsPatchOutput struct{ *pulumi.OutputState }

func (StatusDetailsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusDetailsPatch)(nil)).Elem()
}

func (o StatusDetailsPatchOutput) ToStatusDetailsPatchOutput() StatusDetailsPatchOutput {
	return o
}

func (o StatusDetailsPatchOutput) ToStatusDetailsPatchOutputWithContext(ctx context.Context) StatusDetailsPatchOutput {
	return o
}

func (o StatusDetailsPatchOutput) ToStatusDetailsPatchPtrOutput() StatusDetailsPatchPtrOutput {
	return o.ToStatusDetailsPatchPtrOutputWithContext(context.Background())
}

func (o StatusDetailsPatchOutput) ToStatusDetailsPatchPtrOutputWithContext(ctx context.Context) StatusDetailsPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StatusDetailsPatch) *StatusDetailsPatch {
		return &v
	}).(StatusDetailsPatchPtrOutput)
}

// The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
func (o StatusDetailsPatchOutput) Causes() StatusCausePatchArrayOutput {
	return o.ApplyT(func(v StatusDetailsPatch) []StatusCausePatch { return v.Causes }).(StatusCausePatchArrayOutput)
}

// The group attribute of the resource associated with the status StatusReason.
func (o StatusDetailsPatchOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatusDetailsPatch) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StatusDetailsPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatusDetailsPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
func (o StatusDetailsPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatusDetailsPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
func (o StatusDetailsPatchOutput) RetryAfterSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StatusDetailsPatch) *int { return v.RetryAfterSeconds }).(pulumi.IntPtrOutput)
}

// UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
func (o StatusDetailsPatchOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatusDetailsPatch) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type StatusDetailsPatchPtrOutput struct{ *pulumi.OutputState }

func (StatusDetailsPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StatusDetailsPatch)(nil)).Elem()
}

func (o StatusDetailsPatchPtrOutput) ToStatusDetailsPatchPtrOutput() StatusDetailsPatchPtrOutput {
	return o
}

func (o StatusDetailsPatchPtrOutput) ToStatusDetailsPatchPtrOutputWithContext(ctx context.Context) StatusDetailsPatchPtrOutput {
	return o
}

func (o StatusDetailsPatchPtrOutput) Elem() StatusDetailsPatchOutput {
	return o.ApplyT(func(v *StatusDetailsPatch) StatusDetailsPatch {
		if v != nil {
			return *v
		}
		var ret StatusDetailsPatch
		return ret
	}).(StatusDetailsPatchOutput)
}

// The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
func (o StatusDetailsPatchPtrOutput) Causes() StatusCausePatchArrayOutput {
	return o.ApplyT(func(v *StatusDetailsPatch) []StatusCausePatch {
		if v == nil {
			return nil
		}
		return v.Causes
	}).(StatusCausePatchArrayOutput)
}

// The group attribute of the resource associated with the status StatusReason.
func (o StatusDetailsPatchPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StatusDetailsPatch) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StatusDetailsPatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StatusDetailsPatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
func (o StatusDetailsPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StatusDetailsPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
func (o StatusDetailsPatchPtrOutput) RetryAfterSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StatusDetailsPatch) *int {
		if v == nil {
			return nil
		}
		return v.RetryAfterSeconds
	}).(pulumi.IntPtrOutput)
}

// UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
func (o StatusDetailsPatchPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StatusDetailsPatch) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

// Status is a return value for calls that don't return other objects.
type StatusPatch struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Suggested HTTP return code for this status, 0 if not set.
	Code *int `pulumi:"code"`
	// Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.
	Details *StatusDetailsPatch `pulumi:"details"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// A human-readable description of the status of this operation.
	Message *string `pulumi:"message"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *ListMetaPatch `pulumi:"metadata"`
	// A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
	Reason *string `pulumi:"reason"`
	// Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *string `pulumi:"status"`
}

// StatusPatchInput is an input type that accepts StatusPatchArgs and StatusPatchOutput values.
// You can construct a concrete instance of `StatusPatchInput` via:
//
//	StatusPatchArgs{...}
type StatusPatchInput interface {
	pulumi.Input

	ToStatusPatchOutput() StatusPatchOutput
	ToStatusPatchOutputWithContext(context.Context) StatusPatchOutput
}

// Status is a return value for calls that don't return other objects.
type StatusPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Suggested HTTP return code for this status, 0 if not set.
	Code pulumi.IntPtrInput `pulumi:"code"`
	// Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.
	Details StatusDetailsPatchPtrInput `pulumi:"details"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// A human-readable description of the status of this operation.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata ListMetaPatchPtrInput `pulumi:"metadata"`
	// A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (StatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusPatch)(nil)).Elem()
}

func (i StatusPatchArgs) ToStatusPatchOutput() StatusPatchOutput {
	return i.ToStatusPatchOutputWithContext(context.Background())
}

func (i StatusPatchArgs) ToStatusPatchOutputWithContext(ctx context.Context) StatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusPatchOutput)
}

// Status is a return value for calls that don't return other objects.
type StatusPatchOutput struct{ *pulumi.OutputState }

func (StatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusPatch)(nil)).Elem()
}

func (o StatusPatchOutput) ToStatusPatchOutput() StatusPatchOutput {
	return o
}

func (o StatusPatchOutput) ToStatusPatchOutputWithContext(ctx context.Context) StatusPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o StatusPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatusPatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Suggested HTTP return code for this status, 0 if not set.
func (o StatusPatchOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StatusPatch) *int { return v.Code }).(pulumi.IntPtrOutput)
}

// Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.
func (o StatusPatchOutput) Details() StatusDetailsPatchPtrOutput {
	return o.ApplyT(func(v StatusPatch) *StatusDetailsPatch { return v.Details }).(StatusDetailsPatchPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StatusPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatusPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// A human-readable description of the status of this operation.
func (o StatusPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatusPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StatusPatchOutput) Metadata() ListMetaPatchPtrOutput {
	return o.ApplyT(func(v StatusPatch) *ListMetaPatch { return v.Metadata }).(ListMetaPatchPtrOutput)
}

// A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
func (o StatusPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatusPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (o StatusPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StatusPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeleteOptionsInput)(nil)).Elem(), DeleteOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeleteOptionsPatchInput)(nil)).Elem(), DeleteOptionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListMetaInput)(nil)).Elem(), ListMetaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListMetaPtrInput)(nil)).Elem(), ListMetaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListMetaPatchInput)(nil)).Elem(), ListMetaPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListMetaPatchPtrInput)(nil)).Elem(), ListMetaPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedFieldsEntryInput)(nil)).Elem(), ManagedFieldsEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedFieldsEntryArrayInput)(nil)).Elem(), ManagedFieldsEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedFieldsEntryPatchInput)(nil)).Elem(), ManagedFieldsEntryPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedFieldsEntryPatchArrayInput)(nil)).Elem(), ManagedFieldsEntryPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectMetaInput)(nil)).Elem(), ObjectMetaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectMetaPtrInput)(nil)).Elem(), ObjectMetaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectMetaPatchInput)(nil)).Elem(), ObjectMetaPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectMetaPatchPtrInput)(nil)).Elem(), ObjectMetaPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OwnerReferenceInput)(nil)).Elem(), OwnerReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OwnerReferenceArrayInput)(nil)).Elem(), OwnerReferenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OwnerReferencePatchInput)(nil)).Elem(), OwnerReferencePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OwnerReferencePatchArrayInput)(nil)).Elem(), OwnerReferencePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreconditionsInput)(nil)).Elem(), PreconditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreconditionsPtrInput)(nil)).Elem(), PreconditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreconditionsPatchInput)(nil)).Elem(), PreconditionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreconditionsPatchPtrInput)(nil)).Elem(), PreconditionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusInput)(nil)).Elem(), StatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusCauseInput)(nil)).Elem(), StatusCauseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusCauseArrayInput)(nil)).Elem(), StatusCauseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusCausePatchInput)(nil)).Elem(), StatusCausePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusCausePatchArrayInput)(nil)).Elem(), StatusCausePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusDetailsInput)(nil)).Elem(), StatusDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusDetailsPtrInput)(nil)).Elem(), StatusDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusDetailsPatchInput)(nil)).Elem(), StatusDetailsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusDetailsPatchPtrInput)(nil)).Elem(), StatusDetailsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusPatchInput)(nil)).Elem(), StatusPatchArgs{})
	pulumi.RegisterOutputType(DeleteOptionsOutput{})
	pulumi.RegisterOutputType(DeleteOptionsPatchOutput{})
	pulumi.RegisterOutputType(ListMetaOutput{})
	pulumi.RegisterOutputType(ListMetaPtrOutput{})
	pulumi.RegisterOutputType(ListMetaPatchOutput{})
	pulumi.RegisterOutputType(ListMetaPatchPtrOutput{})
	pulumi.RegisterOutputType(ManagedFieldsEntryOutput{})
	pulumi.RegisterOutputType(ManagedFieldsEntryArrayOutput{})
	pulumi.RegisterOutputType(ManagedFieldsEntryPatchOutput{})
	pulumi.RegisterOutputType(ManagedFieldsEntryPatchArrayOutput{})
	pulumi.RegisterOutputType(ObjectMetaOutput{})
	pulumi.RegisterOutputType(ObjectMetaPtrOutput{})
	pulumi.RegisterOutputType(ObjectMetaPatchOutput{})
	pulumi.RegisterOutputType(ObjectMetaPatchPtrOutput{})
	pulumi.RegisterOutputType(OwnerReferenceOutput{})
	pulumi.RegisterOutputType(OwnerReferenceArrayOutput{})
	pulumi.RegisterOutputType(OwnerReferencePatchOutput{})
	pulumi.RegisterOutputType(OwnerReferencePatchArrayOutput{})
	pulumi.RegisterOutputType(PreconditionsOutput{})
	pulumi.RegisterOutputType(PreconditionsPtrOutput{})
	pulumi.RegisterOutputType(PreconditionsPatchOutput{})
	pulumi.RegisterOutputType(PreconditionsPatchPtrOutput{})
	pulumi.RegisterOutputType(StatusOutput{})
	pulumi.RegisterOutputType(StatusCauseOutput{})
	pulumi.RegisterOutputType(StatusCauseArrayOutput{})
	pulumi.RegisterOutputType(StatusCausePatchOutput{})
	pulumi.RegisterOutputType(StatusCausePatchArrayOutput{})
	pulumi.RegisterOutputType(StatusDetailsOutput{})
	pulumi.RegisterOutputType(StatusDetailsPtrOutput{})
	pulumi.RegisterOutputType(StatusDetailsPatchOutput{})
	pulumi.RegisterOutputType(StatusDetailsPatchPtrOutput{})
	pulumi.RegisterOutputType(StatusPatchOutput{})
}
