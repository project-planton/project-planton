// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// SolrCloud is the Schema for the solrclouds API
type SolrCloudPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     SolrCloudSpecPatchPtrOutput     `pulumi:"spec"`
	Status   SolrCloudStatusPatchPtrOutput   `pulumi:"status"`
}

// NewSolrCloudPatch registers a new resource with the given unique name, arguments, and options.
func NewSolrCloudPatch(ctx *pulumi.Context,
	name string, args *SolrCloudPatchArgs, opts ...pulumi.ResourceOption) (*SolrCloudPatch, error) {
	if args == nil {
		args = &SolrCloudPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("solr.apache.org/v1beta1")
	args.Kind = pulumi.StringPtr("SolrCloud")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SolrCloudPatch
	err := ctx.RegisterResource("kubernetes:solr.apache.org/v1beta1:SolrCloudPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSolrCloudPatch gets an existing SolrCloudPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSolrCloudPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SolrCloudPatchState, opts ...pulumi.ResourceOption) (*SolrCloudPatch, error) {
	var resource SolrCloudPatch
	err := ctx.ReadResource("kubernetes:solr.apache.org/v1beta1:SolrCloudPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SolrCloudPatch resources.
type solrCloudPatchState struct {
}

type SolrCloudPatchState struct {
}

func (SolrCloudPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*solrCloudPatchState)(nil)).Elem()
}

type solrCloudPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *SolrCloudSpecPatch     `pulumi:"spec"`
}

// The set of arguments for constructing a SolrCloudPatch resource.
type SolrCloudPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     SolrCloudSpecPatchPtrInput
}

func (SolrCloudPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*solrCloudPatchArgs)(nil)).Elem()
}

type SolrCloudPatchInput interface {
	pulumi.Input

	ToSolrCloudPatchOutput() SolrCloudPatchOutput
	ToSolrCloudPatchOutputWithContext(ctx context.Context) SolrCloudPatchOutput
}

func (*SolrCloudPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**SolrCloudPatch)(nil)).Elem()
}

func (i *SolrCloudPatch) ToSolrCloudPatchOutput() SolrCloudPatchOutput {
	return i.ToSolrCloudPatchOutputWithContext(context.Background())
}

func (i *SolrCloudPatch) ToSolrCloudPatchOutputWithContext(ctx context.Context) SolrCloudPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolrCloudPatchOutput)
}

// SolrCloudPatchArrayInput is an input type that accepts SolrCloudPatchArray and SolrCloudPatchArrayOutput values.
// You can construct a concrete instance of `SolrCloudPatchArrayInput` via:
//
//	SolrCloudPatchArray{ SolrCloudPatchArgs{...} }
type SolrCloudPatchArrayInput interface {
	pulumi.Input

	ToSolrCloudPatchArrayOutput() SolrCloudPatchArrayOutput
	ToSolrCloudPatchArrayOutputWithContext(context.Context) SolrCloudPatchArrayOutput
}

type SolrCloudPatchArray []SolrCloudPatchInput

func (SolrCloudPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SolrCloudPatch)(nil)).Elem()
}

func (i SolrCloudPatchArray) ToSolrCloudPatchArrayOutput() SolrCloudPatchArrayOutput {
	return i.ToSolrCloudPatchArrayOutputWithContext(context.Background())
}

func (i SolrCloudPatchArray) ToSolrCloudPatchArrayOutputWithContext(ctx context.Context) SolrCloudPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolrCloudPatchArrayOutput)
}

// SolrCloudPatchMapInput is an input type that accepts SolrCloudPatchMap and SolrCloudPatchMapOutput values.
// You can construct a concrete instance of `SolrCloudPatchMapInput` via:
//
//	SolrCloudPatchMap{ "key": SolrCloudPatchArgs{...} }
type SolrCloudPatchMapInput interface {
	pulumi.Input

	ToSolrCloudPatchMapOutput() SolrCloudPatchMapOutput
	ToSolrCloudPatchMapOutputWithContext(context.Context) SolrCloudPatchMapOutput
}

type SolrCloudPatchMap map[string]SolrCloudPatchInput

func (SolrCloudPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SolrCloudPatch)(nil)).Elem()
}

func (i SolrCloudPatchMap) ToSolrCloudPatchMapOutput() SolrCloudPatchMapOutput {
	return i.ToSolrCloudPatchMapOutputWithContext(context.Background())
}

func (i SolrCloudPatchMap) ToSolrCloudPatchMapOutputWithContext(ctx context.Context) SolrCloudPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolrCloudPatchMapOutput)
}

type SolrCloudPatchOutput struct{ *pulumi.OutputState }

func (SolrCloudPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SolrCloudPatch)(nil)).Elem()
}

func (o SolrCloudPatchOutput) ToSolrCloudPatchOutput() SolrCloudPatchOutput {
	return o
}

func (o SolrCloudPatchOutput) ToSolrCloudPatchOutputWithContext(ctx context.Context) SolrCloudPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SolrCloudPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SolrCloudPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SolrCloudPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SolrCloudPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o SolrCloudPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *SolrCloudPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o SolrCloudPatchOutput) Spec() SolrCloudSpecPatchPtrOutput {
	return o.ApplyT(func(v *SolrCloudPatch) SolrCloudSpecPatchPtrOutput { return v.Spec }).(SolrCloudSpecPatchPtrOutput)
}

func (o SolrCloudPatchOutput) Status() SolrCloudStatusPatchPtrOutput {
	return o.ApplyT(func(v *SolrCloudPatch) SolrCloudStatusPatchPtrOutput { return v.Status }).(SolrCloudStatusPatchPtrOutput)
}

type SolrCloudPatchArrayOutput struct{ *pulumi.OutputState }

func (SolrCloudPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SolrCloudPatch)(nil)).Elem()
}

func (o SolrCloudPatchArrayOutput) ToSolrCloudPatchArrayOutput() SolrCloudPatchArrayOutput {
	return o
}

func (o SolrCloudPatchArrayOutput) ToSolrCloudPatchArrayOutputWithContext(ctx context.Context) SolrCloudPatchArrayOutput {
	return o
}

func (o SolrCloudPatchArrayOutput) Index(i pulumi.IntInput) SolrCloudPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SolrCloudPatch {
		return vs[0].([]*SolrCloudPatch)[vs[1].(int)]
	}).(SolrCloudPatchOutput)
}

type SolrCloudPatchMapOutput struct{ *pulumi.OutputState }

func (SolrCloudPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SolrCloudPatch)(nil)).Elem()
}

func (o SolrCloudPatchMapOutput) ToSolrCloudPatchMapOutput() SolrCloudPatchMapOutput {
	return o
}

func (o SolrCloudPatchMapOutput) ToSolrCloudPatchMapOutputWithContext(ctx context.Context) SolrCloudPatchMapOutput {
	return o
}

func (o SolrCloudPatchMapOutput) MapIndex(k pulumi.StringInput) SolrCloudPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SolrCloudPatch {
		return vs[0].(map[string]*SolrCloudPatch)[vs[1].(string)]
	}).(SolrCloudPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SolrCloudPatchInput)(nil)).Elem(), &SolrCloudPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*SolrCloudPatchArrayInput)(nil)).Elem(), SolrCloudPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SolrCloudPatchMapInput)(nil)).Elem(), SolrCloudPatchMap{})
	pulumi.RegisterOutputType(SolrCloudPatchOutput{})
	pulumi.RegisterOutputType(SolrCloudPatchArrayOutput{})
	pulumi.RegisterOutputType(SolrCloudPatchMapOutput{})
}
