// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SolrCloud is the Schema for the solrclouds API
type SolrCloud struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput  `pulumi:"metadata"`
	Spec     SolrCloudSpecOutput      `pulumi:"spec"`
	Status   SolrCloudStatusPtrOutput `pulumi:"status"`
}

// NewSolrCloud registers a new resource with the given unique name, arguments, and options.
func NewSolrCloud(ctx *pulumi.Context,
	name string, args *SolrCloudArgs, opts ...pulumi.ResourceOption) (*SolrCloud, error) {
	if args == nil {
		args = &SolrCloudArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("solr.apache.org/v1beta1")
	args.Kind = pulumi.StringPtr("SolrCloud")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SolrCloud
	err := ctx.RegisterResource("kubernetes:solr.apache.org/v1beta1:SolrCloud", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSolrCloud gets an existing SolrCloud resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSolrCloud(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SolrCloudState, opts ...pulumi.ResourceOption) (*SolrCloud, error) {
	var resource SolrCloud
	err := ctx.ReadResource("kubernetes:solr.apache.org/v1beta1:SolrCloud", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SolrCloud resources.
type solrCloudState struct {
}

type SolrCloudState struct {
}

func (SolrCloudState) ElementType() reflect.Type {
	return reflect.TypeOf((*solrCloudState)(nil)).Elem()
}

type solrCloudArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *SolrCloudSpec     `pulumi:"spec"`
}

// The set of arguments for constructing a SolrCloud resource.
type SolrCloudArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     SolrCloudSpecPtrInput
}

func (SolrCloudArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*solrCloudArgs)(nil)).Elem()
}

type SolrCloudInput interface {
	pulumi.Input

	ToSolrCloudOutput() SolrCloudOutput
	ToSolrCloudOutputWithContext(ctx context.Context) SolrCloudOutput
}

func (*SolrCloud) ElementType() reflect.Type {
	return reflect.TypeOf((**SolrCloud)(nil)).Elem()
}

func (i *SolrCloud) ToSolrCloudOutput() SolrCloudOutput {
	return i.ToSolrCloudOutputWithContext(context.Background())
}

func (i *SolrCloud) ToSolrCloudOutputWithContext(ctx context.Context) SolrCloudOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolrCloudOutput)
}

// SolrCloudArrayInput is an input type that accepts SolrCloudArray and SolrCloudArrayOutput values.
// You can construct a concrete instance of `SolrCloudArrayInput` via:
//
//	SolrCloudArray{ SolrCloudArgs{...} }
type SolrCloudArrayInput interface {
	pulumi.Input

	ToSolrCloudArrayOutput() SolrCloudArrayOutput
	ToSolrCloudArrayOutputWithContext(context.Context) SolrCloudArrayOutput
}

type SolrCloudArray []SolrCloudInput

func (SolrCloudArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SolrCloud)(nil)).Elem()
}

func (i SolrCloudArray) ToSolrCloudArrayOutput() SolrCloudArrayOutput {
	return i.ToSolrCloudArrayOutputWithContext(context.Background())
}

func (i SolrCloudArray) ToSolrCloudArrayOutputWithContext(ctx context.Context) SolrCloudArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolrCloudArrayOutput)
}

// SolrCloudMapInput is an input type that accepts SolrCloudMap and SolrCloudMapOutput values.
// You can construct a concrete instance of `SolrCloudMapInput` via:
//
//	SolrCloudMap{ "key": SolrCloudArgs{...} }
type SolrCloudMapInput interface {
	pulumi.Input

	ToSolrCloudMapOutput() SolrCloudMapOutput
	ToSolrCloudMapOutputWithContext(context.Context) SolrCloudMapOutput
}

type SolrCloudMap map[string]SolrCloudInput

func (SolrCloudMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SolrCloud)(nil)).Elem()
}

func (i SolrCloudMap) ToSolrCloudMapOutput() SolrCloudMapOutput {
	return i.ToSolrCloudMapOutputWithContext(context.Background())
}

func (i SolrCloudMap) ToSolrCloudMapOutputWithContext(ctx context.Context) SolrCloudMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolrCloudMapOutput)
}

type SolrCloudOutput struct{ *pulumi.OutputState }

func (SolrCloudOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SolrCloud)(nil)).Elem()
}

func (o SolrCloudOutput) ToSolrCloudOutput() SolrCloudOutput {
	return o
}

func (o SolrCloudOutput) ToSolrCloudOutputWithContext(ctx context.Context) SolrCloudOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SolrCloudOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *SolrCloud) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SolrCloudOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *SolrCloud) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o SolrCloudOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *SolrCloud) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o SolrCloudOutput) Spec() SolrCloudSpecOutput {
	return o.ApplyT(func(v *SolrCloud) SolrCloudSpecOutput { return v.Spec }).(SolrCloudSpecOutput)
}

func (o SolrCloudOutput) Status() SolrCloudStatusPtrOutput {
	return o.ApplyT(func(v *SolrCloud) SolrCloudStatusPtrOutput { return v.Status }).(SolrCloudStatusPtrOutput)
}

type SolrCloudArrayOutput struct{ *pulumi.OutputState }

func (SolrCloudArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SolrCloud)(nil)).Elem()
}

func (o SolrCloudArrayOutput) ToSolrCloudArrayOutput() SolrCloudArrayOutput {
	return o
}

func (o SolrCloudArrayOutput) ToSolrCloudArrayOutputWithContext(ctx context.Context) SolrCloudArrayOutput {
	return o
}

func (o SolrCloudArrayOutput) Index(i pulumi.IntInput) SolrCloudOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SolrCloud {
		return vs[0].([]*SolrCloud)[vs[1].(int)]
	}).(SolrCloudOutput)
}

type SolrCloudMapOutput struct{ *pulumi.OutputState }

func (SolrCloudMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SolrCloud)(nil)).Elem()
}

func (o SolrCloudMapOutput) ToSolrCloudMapOutput() SolrCloudMapOutput {
	return o
}

func (o SolrCloudMapOutput) ToSolrCloudMapOutputWithContext(ctx context.Context) SolrCloudMapOutput {
	return o
}

func (o SolrCloudMapOutput) MapIndex(k pulumi.StringInput) SolrCloudOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SolrCloud {
		return vs[0].(map[string]*SolrCloud)[vs[1].(string)]
	}).(SolrCloudOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SolrCloudInput)(nil)).Elem(), &SolrCloud{})
	pulumi.RegisterInputType(reflect.TypeOf((*SolrCloudArrayInput)(nil)).Elem(), SolrCloudArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SolrCloudMapInput)(nil)).Elem(), SolrCloudMap{})
	pulumi.RegisterOutputType(SolrCloudOutput{})
	pulumi.RegisterOutputType(SolrCloudArrayOutput{})
	pulumi.RegisterOutputType(SolrCloudMapOutput{})
}
