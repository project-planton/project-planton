// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SolrBackup is the Schema for the solrbackups API
type SolrBackup struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput   `pulumi:"metadata"`
	Spec     SolrBackupSpecOutput      `pulumi:"spec"`
	Status   SolrBackupStatusPtrOutput `pulumi:"status"`
}

// NewSolrBackup registers a new resource with the given unique name, arguments, and options.
func NewSolrBackup(ctx *pulumi.Context,
	name string, args *SolrBackupArgs, opts ...pulumi.ResourceOption) (*SolrBackup, error) {
	if args == nil {
		args = &SolrBackupArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("solr.apache.org/v1beta1")
	args.Kind = pulumi.StringPtr("SolrBackup")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SolrBackup
	err := ctx.RegisterResource("kubernetes:solr.apache.org/v1beta1:SolrBackup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSolrBackup gets an existing SolrBackup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSolrBackup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SolrBackupState, opts ...pulumi.ResourceOption) (*SolrBackup, error) {
	var resource SolrBackup
	err := ctx.ReadResource("kubernetes:solr.apache.org/v1beta1:SolrBackup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SolrBackup resources.
type solrBackupState struct {
}

type SolrBackupState struct {
}

func (SolrBackupState) ElementType() reflect.Type {
	return reflect.TypeOf((*solrBackupState)(nil)).Elem()
}

type solrBackupArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *SolrBackupSpec    `pulumi:"spec"`
}

// The set of arguments for constructing a SolrBackup resource.
type SolrBackupArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     SolrBackupSpecPtrInput
}

func (SolrBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*solrBackupArgs)(nil)).Elem()
}

type SolrBackupInput interface {
	pulumi.Input

	ToSolrBackupOutput() SolrBackupOutput
	ToSolrBackupOutputWithContext(ctx context.Context) SolrBackupOutput
}

func (*SolrBackup) ElementType() reflect.Type {
	return reflect.TypeOf((**SolrBackup)(nil)).Elem()
}

func (i *SolrBackup) ToSolrBackupOutput() SolrBackupOutput {
	return i.ToSolrBackupOutputWithContext(context.Background())
}

func (i *SolrBackup) ToSolrBackupOutputWithContext(ctx context.Context) SolrBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolrBackupOutput)
}

// SolrBackupArrayInput is an input type that accepts SolrBackupArray and SolrBackupArrayOutput values.
// You can construct a concrete instance of `SolrBackupArrayInput` via:
//
//	SolrBackupArray{ SolrBackupArgs{...} }
type SolrBackupArrayInput interface {
	pulumi.Input

	ToSolrBackupArrayOutput() SolrBackupArrayOutput
	ToSolrBackupArrayOutputWithContext(context.Context) SolrBackupArrayOutput
}

type SolrBackupArray []SolrBackupInput

func (SolrBackupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SolrBackup)(nil)).Elem()
}

func (i SolrBackupArray) ToSolrBackupArrayOutput() SolrBackupArrayOutput {
	return i.ToSolrBackupArrayOutputWithContext(context.Background())
}

func (i SolrBackupArray) ToSolrBackupArrayOutputWithContext(ctx context.Context) SolrBackupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolrBackupArrayOutput)
}

// SolrBackupMapInput is an input type that accepts SolrBackupMap and SolrBackupMapOutput values.
// You can construct a concrete instance of `SolrBackupMapInput` via:
//
//	SolrBackupMap{ "key": SolrBackupArgs{...} }
type SolrBackupMapInput interface {
	pulumi.Input

	ToSolrBackupMapOutput() SolrBackupMapOutput
	ToSolrBackupMapOutputWithContext(context.Context) SolrBackupMapOutput
}

type SolrBackupMap map[string]SolrBackupInput

func (SolrBackupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SolrBackup)(nil)).Elem()
}

func (i SolrBackupMap) ToSolrBackupMapOutput() SolrBackupMapOutput {
	return i.ToSolrBackupMapOutputWithContext(context.Background())
}

func (i SolrBackupMap) ToSolrBackupMapOutputWithContext(ctx context.Context) SolrBackupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolrBackupMapOutput)
}

type SolrBackupOutput struct{ *pulumi.OutputState }

func (SolrBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SolrBackup)(nil)).Elem()
}

func (o SolrBackupOutput) ToSolrBackupOutput() SolrBackupOutput {
	return o
}

func (o SolrBackupOutput) ToSolrBackupOutputWithContext(ctx context.Context) SolrBackupOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SolrBackupOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *SolrBackup) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SolrBackupOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *SolrBackup) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o SolrBackupOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *SolrBackup) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o SolrBackupOutput) Spec() SolrBackupSpecOutput {
	return o.ApplyT(func(v *SolrBackup) SolrBackupSpecOutput { return v.Spec }).(SolrBackupSpecOutput)
}

func (o SolrBackupOutput) Status() SolrBackupStatusPtrOutput {
	return o.ApplyT(func(v *SolrBackup) SolrBackupStatusPtrOutput { return v.Status }).(SolrBackupStatusPtrOutput)
}

type SolrBackupArrayOutput struct{ *pulumi.OutputState }

func (SolrBackupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SolrBackup)(nil)).Elem()
}

func (o SolrBackupArrayOutput) ToSolrBackupArrayOutput() SolrBackupArrayOutput {
	return o
}

func (o SolrBackupArrayOutput) ToSolrBackupArrayOutputWithContext(ctx context.Context) SolrBackupArrayOutput {
	return o
}

func (o SolrBackupArrayOutput) Index(i pulumi.IntInput) SolrBackupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SolrBackup {
		return vs[0].([]*SolrBackup)[vs[1].(int)]
	}).(SolrBackupOutput)
}

type SolrBackupMapOutput struct{ *pulumi.OutputState }

func (SolrBackupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SolrBackup)(nil)).Elem()
}

func (o SolrBackupMapOutput) ToSolrBackupMapOutput() SolrBackupMapOutput {
	return o
}

func (o SolrBackupMapOutput) ToSolrBackupMapOutputWithContext(ctx context.Context) SolrBackupMapOutput {
	return o
}

func (o SolrBackupMapOutput) MapIndex(k pulumi.StringInput) SolrBackupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SolrBackup {
		return vs[0].(map[string]*SolrBackup)[vs[1].(string)]
	}).(SolrBackupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SolrBackupInput)(nil)).Elem(), &SolrBackup{})
	pulumi.RegisterInputType(reflect.TypeOf((*SolrBackupArrayInput)(nil)).Elem(), SolrBackupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SolrBackupMapInput)(nil)).Elem(), SolrBackupMap{})
	pulumi.RegisterOutputType(SolrBackupOutput{})
	pulumi.RegisterOutputType(SolrBackupArrayOutput{})
	pulumi.RegisterOutputType(SolrBackupMapOutput{})
}
