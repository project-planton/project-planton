// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// SolrBackup is the Schema for the solrbackups API
type SolrBackupPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     SolrBackupSpecPatchPtrOutput    `pulumi:"spec"`
	Status   SolrBackupStatusPatchPtrOutput  `pulumi:"status"`
}

// NewSolrBackupPatch registers a new resource with the given unique name, arguments, and options.
func NewSolrBackupPatch(ctx *pulumi.Context,
	name string, args *SolrBackupPatchArgs, opts ...pulumi.ResourceOption) (*SolrBackupPatch, error) {
	if args == nil {
		args = &SolrBackupPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("solr.apache.org/v1beta1")
	args.Kind = pulumi.StringPtr("SolrBackup")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SolrBackupPatch
	err := ctx.RegisterResource("kubernetes:solr.apache.org/v1beta1:SolrBackupPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSolrBackupPatch gets an existing SolrBackupPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSolrBackupPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SolrBackupPatchState, opts ...pulumi.ResourceOption) (*SolrBackupPatch, error) {
	var resource SolrBackupPatch
	err := ctx.ReadResource("kubernetes:solr.apache.org/v1beta1:SolrBackupPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SolrBackupPatch resources.
type solrBackupPatchState struct {
}

type SolrBackupPatchState struct {
}

func (SolrBackupPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*solrBackupPatchState)(nil)).Elem()
}

type solrBackupPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *SolrBackupSpecPatch    `pulumi:"spec"`
}

// The set of arguments for constructing a SolrBackupPatch resource.
type SolrBackupPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     SolrBackupSpecPatchPtrInput
}

func (SolrBackupPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*solrBackupPatchArgs)(nil)).Elem()
}

type SolrBackupPatchInput interface {
	pulumi.Input

	ToSolrBackupPatchOutput() SolrBackupPatchOutput
	ToSolrBackupPatchOutputWithContext(ctx context.Context) SolrBackupPatchOutput
}

func (*SolrBackupPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**SolrBackupPatch)(nil)).Elem()
}

func (i *SolrBackupPatch) ToSolrBackupPatchOutput() SolrBackupPatchOutput {
	return i.ToSolrBackupPatchOutputWithContext(context.Background())
}

func (i *SolrBackupPatch) ToSolrBackupPatchOutputWithContext(ctx context.Context) SolrBackupPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolrBackupPatchOutput)
}

// SolrBackupPatchArrayInput is an input type that accepts SolrBackupPatchArray and SolrBackupPatchArrayOutput values.
// You can construct a concrete instance of `SolrBackupPatchArrayInput` via:
//
//	SolrBackupPatchArray{ SolrBackupPatchArgs{...} }
type SolrBackupPatchArrayInput interface {
	pulumi.Input

	ToSolrBackupPatchArrayOutput() SolrBackupPatchArrayOutput
	ToSolrBackupPatchArrayOutputWithContext(context.Context) SolrBackupPatchArrayOutput
}

type SolrBackupPatchArray []SolrBackupPatchInput

func (SolrBackupPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SolrBackupPatch)(nil)).Elem()
}

func (i SolrBackupPatchArray) ToSolrBackupPatchArrayOutput() SolrBackupPatchArrayOutput {
	return i.ToSolrBackupPatchArrayOutputWithContext(context.Background())
}

func (i SolrBackupPatchArray) ToSolrBackupPatchArrayOutputWithContext(ctx context.Context) SolrBackupPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolrBackupPatchArrayOutput)
}

// SolrBackupPatchMapInput is an input type that accepts SolrBackupPatchMap and SolrBackupPatchMapOutput values.
// You can construct a concrete instance of `SolrBackupPatchMapInput` via:
//
//	SolrBackupPatchMap{ "key": SolrBackupPatchArgs{...} }
type SolrBackupPatchMapInput interface {
	pulumi.Input

	ToSolrBackupPatchMapOutput() SolrBackupPatchMapOutput
	ToSolrBackupPatchMapOutputWithContext(context.Context) SolrBackupPatchMapOutput
}

type SolrBackupPatchMap map[string]SolrBackupPatchInput

func (SolrBackupPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SolrBackupPatch)(nil)).Elem()
}

func (i SolrBackupPatchMap) ToSolrBackupPatchMapOutput() SolrBackupPatchMapOutput {
	return i.ToSolrBackupPatchMapOutputWithContext(context.Background())
}

func (i SolrBackupPatchMap) ToSolrBackupPatchMapOutputWithContext(ctx context.Context) SolrBackupPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolrBackupPatchMapOutput)
}

type SolrBackupPatchOutput struct{ *pulumi.OutputState }

func (SolrBackupPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SolrBackupPatch)(nil)).Elem()
}

func (o SolrBackupPatchOutput) ToSolrBackupPatchOutput() SolrBackupPatchOutput {
	return o
}

func (o SolrBackupPatchOutput) ToSolrBackupPatchOutputWithContext(ctx context.Context) SolrBackupPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o SolrBackupPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SolrBackupPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o SolrBackupPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SolrBackupPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o SolrBackupPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *SolrBackupPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o SolrBackupPatchOutput) Spec() SolrBackupSpecPatchPtrOutput {
	return o.ApplyT(func(v *SolrBackupPatch) SolrBackupSpecPatchPtrOutput { return v.Spec }).(SolrBackupSpecPatchPtrOutput)
}

func (o SolrBackupPatchOutput) Status() SolrBackupStatusPatchPtrOutput {
	return o.ApplyT(func(v *SolrBackupPatch) SolrBackupStatusPatchPtrOutput { return v.Status }).(SolrBackupStatusPatchPtrOutput)
}

type SolrBackupPatchArrayOutput struct{ *pulumi.OutputState }

func (SolrBackupPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SolrBackupPatch)(nil)).Elem()
}

func (o SolrBackupPatchArrayOutput) ToSolrBackupPatchArrayOutput() SolrBackupPatchArrayOutput {
	return o
}

func (o SolrBackupPatchArrayOutput) ToSolrBackupPatchArrayOutputWithContext(ctx context.Context) SolrBackupPatchArrayOutput {
	return o
}

func (o SolrBackupPatchArrayOutput) Index(i pulumi.IntInput) SolrBackupPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SolrBackupPatch {
		return vs[0].([]*SolrBackupPatch)[vs[1].(int)]
	}).(SolrBackupPatchOutput)
}

type SolrBackupPatchMapOutput struct{ *pulumi.OutputState }

func (SolrBackupPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SolrBackupPatch)(nil)).Elem()
}

func (o SolrBackupPatchMapOutput) ToSolrBackupPatchMapOutput() SolrBackupPatchMapOutput {
	return o
}

func (o SolrBackupPatchMapOutput) ToSolrBackupPatchMapOutputWithContext(ctx context.Context) SolrBackupPatchMapOutput {
	return o
}

func (o SolrBackupPatchMapOutput) MapIndex(k pulumi.StringInput) SolrBackupPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SolrBackupPatch {
		return vs[0].(map[string]*SolrBackupPatch)[vs[1].(string)]
	}).(SolrBackupPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SolrBackupPatchInput)(nil)).Elem(), &SolrBackupPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*SolrBackupPatchArrayInput)(nil)).Elem(), SolrBackupPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SolrBackupPatchMapInput)(nil)).Elem(), SolrBackupPatchMap{})
	pulumi.RegisterOutputType(SolrBackupPatchOutput{})
	pulumi.RegisterOutputType(SolrBackupPatchArrayOutput{})
	pulumi.RegisterOutputType(SolrBackupPatchMapOutput{})
}
