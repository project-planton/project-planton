// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Kibana struct {
	pulumi.CustomResourceState
}

// NewKibana registers a new resource with the given unique name, arguments, and options.
func NewKibana(ctx *pulumi.Context,
	name string, args *KibanaArgs, opts ...pulumi.ResourceOption) (*Kibana, error) {
	if args == nil {
		args = &KibanaArgs{}
	}

	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Kibana
	err := ctx.RegisterResource("kubernetes:kibana.k8s.elastic.co/v1alpha1:Kibana", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKibana gets an existing Kibana resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKibana(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KibanaState, opts ...pulumi.ResourceOption) (*Kibana, error) {
	var resource Kibana
	err := ctx.ReadResource("kubernetes:kibana.k8s.elastic.co/v1alpha1:Kibana", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Kibana resources.
type kibanaState struct {
}

type KibanaState struct {
}

func (KibanaState) ElementType() reflect.Type {
	return reflect.TypeOf((*kibanaState)(nil)).Elem()
}

type kibanaArgs struct {
}

// The set of arguments for constructing a Kibana resource.
type KibanaArgs struct {
}

func (KibanaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kibanaArgs)(nil)).Elem()
}

type KibanaInput interface {
	pulumi.Input

	ToKibanaOutput() KibanaOutput
	ToKibanaOutputWithContext(ctx context.Context) KibanaOutput
}

func (*Kibana) ElementType() reflect.Type {
	return reflect.TypeOf((**Kibana)(nil)).Elem()
}

func (i *Kibana) ToKibanaOutput() KibanaOutput {
	return i.ToKibanaOutputWithContext(context.Background())
}

func (i *Kibana) ToKibanaOutputWithContext(ctx context.Context) KibanaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaOutput)
}

type KibanaOutput struct{ *pulumi.OutputState }

func (KibanaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Kibana)(nil)).Elem()
}

func (o KibanaOutput) ToKibanaOutput() KibanaOutput {
	return o
}

func (o KibanaOutput) ToKibanaOutputWithContext(ctx context.Context) KibanaOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaInput)(nil)).Elem(), &Kibana{})
	pulumi.RegisterOutputType(KibanaOutput{})
}
