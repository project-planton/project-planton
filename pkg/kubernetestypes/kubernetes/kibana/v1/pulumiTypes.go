// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Kibana represents a Kibana resource in a Kubernetes cluster.
type KibanaType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// KibanaSpec holds the specification of a Kibana instance.
	Spec *KibanaSpec `pulumi:"spec"`
	// KibanaStatus defines the observed state of Kibana
	Status *KibanaStatus `pulumi:"status"`
}

type KibanaMetadata struct {
}

// KibanaSpec holds the specification of a Kibana instance.
type KibanaSpec struct {
	// Config holds the Kibana configuration. See: https://www.elastic.co/guide/en/kibana/current/settings.html
	Config map[string]interface{} `pulumi:"config"`
	// Count of Kibana instances to deploy.
	Count *int `pulumi:"count"`
	// ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
	ElasticsearchRef *KibanaSpecElasticsearchRef `pulumi:"elasticsearchRef"`
	// EnterpriseSearchRef is a reference to an EnterpriseSearch running in the same Kubernetes cluster.
	// Kibana provides the default Enterprise Search UI starting version 7.14.
	EnterpriseSearchRef *KibanaSpecEnterpriseSearchRef `pulumi:"enterpriseSearchRef"`
	// HTTP holds the HTTP layer configuration for Kibana.
	Http *KibanaSpecHttp `pulumi:"http"`
	// Image is the Kibana Docker image to deploy.
	Image *string `pulumi:"image"`
	// Monitoring enables you to collect and ship log and monitoring data of this Kibana.
	// See https://www.elastic.co/guide/en/kibana/current/xpack-monitoring.html.
	// Metricbeat and Filebeat are deployed in the same Pod as sidecars and each one sends data to one or two different
	// Elasticsearch monitoring clusters running in the same Kubernetes cluster.
	Monitoring *KibanaSpecMonitoring `pulumi:"monitoring"`
	// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Kibana pods
	PodTemplate map[string]interface{} `pulumi:"podTemplate"`
	// RevisionHistoryLimit is the number of revisions to retain to allow rollback in the underlying Deployment.
	RevisionHistoryLimit *int `pulumi:"revisionHistoryLimit"`
	// SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Kibana.
	SecureSettings []KibanaSpecSecureSettings `pulumi:"secureSettings"`
	// ServiceAccountName is used to check access from the current resource to a resource (for ex. Elasticsearch) in a different namespace.
	// Can only be used if ECK is enforcing RBAC on references.
	ServiceAccountName *string `pulumi:"serviceAccountName"`
	// Version of Kibana.
	Version string `pulumi:"version"`
}

// KibanaSpecInput is an input type that accepts KibanaSpecArgs and KibanaSpecOutput values.
// You can construct a concrete instance of `KibanaSpecInput` via:
//
//	KibanaSpecArgs{...}
type KibanaSpecInput interface {
	pulumi.Input

	ToKibanaSpecOutput() KibanaSpecOutput
	ToKibanaSpecOutputWithContext(context.Context) KibanaSpecOutput
}

// KibanaSpec holds the specification of a Kibana instance.
type KibanaSpecArgs struct {
	// Config holds the Kibana configuration. See: https://www.elastic.co/guide/en/kibana/current/settings.html
	Config pulumi.MapInput `pulumi:"config"`
	// Count of Kibana instances to deploy.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
	ElasticsearchRef KibanaSpecElasticsearchRefPtrInput `pulumi:"elasticsearchRef"`
	// EnterpriseSearchRef is a reference to an EnterpriseSearch running in the same Kubernetes cluster.
	// Kibana provides the default Enterprise Search UI starting version 7.14.
	EnterpriseSearchRef KibanaSpecEnterpriseSearchRefPtrInput `pulumi:"enterpriseSearchRef"`
	// HTTP holds the HTTP layer configuration for Kibana.
	Http KibanaSpecHttpPtrInput `pulumi:"http"`
	// Image is the Kibana Docker image to deploy.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Monitoring enables you to collect and ship log and monitoring data of this Kibana.
	// See https://www.elastic.co/guide/en/kibana/current/xpack-monitoring.html.
	// Metricbeat and Filebeat are deployed in the same Pod as sidecars and each one sends data to one or two different
	// Elasticsearch monitoring clusters running in the same Kubernetes cluster.
	Monitoring KibanaSpecMonitoringPtrInput `pulumi:"monitoring"`
	// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Kibana pods
	PodTemplate pulumi.MapInput `pulumi:"podTemplate"`
	// RevisionHistoryLimit is the number of revisions to retain to allow rollback in the underlying Deployment.
	RevisionHistoryLimit pulumi.IntPtrInput `pulumi:"revisionHistoryLimit"`
	// SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Kibana.
	SecureSettings KibanaSpecSecureSettingsArrayInput `pulumi:"secureSettings"`
	// ServiceAccountName is used to check access from the current resource to a resource (for ex. Elasticsearch) in a different namespace.
	// Can only be used if ECK is enforcing RBAC on references.
	ServiceAccountName pulumi.StringPtrInput `pulumi:"serviceAccountName"`
	// Version of Kibana.
	Version pulumi.StringInput `pulumi:"version"`
}

func (KibanaSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpec)(nil)).Elem()
}

func (i KibanaSpecArgs) ToKibanaSpecOutput() KibanaSpecOutput {
	return i.ToKibanaSpecOutputWithContext(context.Background())
}

func (i KibanaSpecArgs) ToKibanaSpecOutputWithContext(ctx context.Context) KibanaSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecOutput)
}

func (i KibanaSpecArgs) ToKibanaSpecPtrOutput() KibanaSpecPtrOutput {
	return i.ToKibanaSpecPtrOutputWithContext(context.Background())
}

func (i KibanaSpecArgs) ToKibanaSpecPtrOutputWithContext(ctx context.Context) KibanaSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecOutput).ToKibanaSpecPtrOutputWithContext(ctx)
}

// KibanaSpecPtrInput is an input type that accepts KibanaSpecArgs, KibanaSpecPtr and KibanaSpecPtrOutput values.
// You can construct a concrete instance of `KibanaSpecPtrInput` via:
//
//	        KibanaSpecArgs{...}
//
//	or:
//
//	        nil
type KibanaSpecPtrInput interface {
	pulumi.Input

	ToKibanaSpecPtrOutput() KibanaSpecPtrOutput
	ToKibanaSpecPtrOutputWithContext(context.Context) KibanaSpecPtrOutput
}

type kibanaSpecPtrType KibanaSpecArgs

func KibanaSpecPtr(v *KibanaSpecArgs) KibanaSpecPtrInput {
	return (*kibanaSpecPtrType)(v)
}

func (*kibanaSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpec)(nil)).Elem()
}

func (i *kibanaSpecPtrType) ToKibanaSpecPtrOutput() KibanaSpecPtrOutput {
	return i.ToKibanaSpecPtrOutputWithContext(context.Background())
}

func (i *kibanaSpecPtrType) ToKibanaSpecPtrOutputWithContext(ctx context.Context) KibanaSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecPtrOutput)
}

// KibanaSpec holds the specification of a Kibana instance.
type KibanaSpecOutput struct{ *pulumi.OutputState }

func (KibanaSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpec)(nil)).Elem()
}

func (o KibanaSpecOutput) ToKibanaSpecOutput() KibanaSpecOutput {
	return o
}

func (o KibanaSpecOutput) ToKibanaSpecOutputWithContext(ctx context.Context) KibanaSpecOutput {
	return o
}

func (o KibanaSpecOutput) ToKibanaSpecPtrOutput() KibanaSpecPtrOutput {
	return o.ToKibanaSpecPtrOutputWithContext(context.Background())
}

func (o KibanaSpecOutput) ToKibanaSpecPtrOutputWithContext(ctx context.Context) KibanaSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KibanaSpec) *KibanaSpec {
		return &v
	}).(KibanaSpecPtrOutput)
}

// Config holds the Kibana configuration. See: https://www.elastic.co/guide/en/kibana/current/settings.html
func (o KibanaSpecOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v KibanaSpec) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

// Count of Kibana instances to deploy.
func (o KibanaSpecOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KibanaSpec) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
func (o KibanaSpecOutput) ElasticsearchRef() KibanaSpecElasticsearchRefPtrOutput {
	return o.ApplyT(func(v KibanaSpec) *KibanaSpecElasticsearchRef { return v.ElasticsearchRef }).(KibanaSpecElasticsearchRefPtrOutput)
}

// EnterpriseSearchRef is a reference to an EnterpriseSearch running in the same Kubernetes cluster.
// Kibana provides the default Enterprise Search UI starting version 7.14.
func (o KibanaSpecOutput) EnterpriseSearchRef() KibanaSpecEnterpriseSearchRefPtrOutput {
	return o.ApplyT(func(v KibanaSpec) *KibanaSpecEnterpriseSearchRef { return v.EnterpriseSearchRef }).(KibanaSpecEnterpriseSearchRefPtrOutput)
}

// HTTP holds the HTTP layer configuration for Kibana.
func (o KibanaSpecOutput) Http() KibanaSpecHttpPtrOutput {
	return o.ApplyT(func(v KibanaSpec) *KibanaSpecHttp { return v.Http }).(KibanaSpecHttpPtrOutput)
}

// Image is the Kibana Docker image to deploy.
func (o KibanaSpecOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpec) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Monitoring enables you to collect and ship log and monitoring data of this Kibana.
// See https://www.elastic.co/guide/en/kibana/current/xpack-monitoring.html.
// Metricbeat and Filebeat are deployed in the same Pod as sidecars and each one sends data to one or two different
// Elasticsearch monitoring clusters running in the same Kubernetes cluster.
func (o KibanaSpecOutput) Monitoring() KibanaSpecMonitoringPtrOutput {
	return o.ApplyT(func(v KibanaSpec) *KibanaSpecMonitoring { return v.Monitoring }).(KibanaSpecMonitoringPtrOutput)
}

// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Kibana pods
func (o KibanaSpecOutput) PodTemplate() pulumi.MapOutput {
	return o.ApplyT(func(v KibanaSpec) map[string]interface{} { return v.PodTemplate }).(pulumi.MapOutput)
}

// RevisionHistoryLimit is the number of revisions to retain to allow rollback in the underlying Deployment.
func (o KibanaSpecOutput) RevisionHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KibanaSpec) *int { return v.RevisionHistoryLimit }).(pulumi.IntPtrOutput)
}

// SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Kibana.
func (o KibanaSpecOutput) SecureSettings() KibanaSpecSecureSettingsArrayOutput {
	return o.ApplyT(func(v KibanaSpec) []KibanaSpecSecureSettings { return v.SecureSettings }).(KibanaSpecSecureSettingsArrayOutput)
}

// ServiceAccountName is used to check access from the current resource to a resource (for ex. Elasticsearch) in a different namespace.
// Can only be used if ECK is enforcing RBAC on references.
func (o KibanaSpecOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpec) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

// Version of Kibana.
func (o KibanaSpecOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v KibanaSpec) string { return v.Version }).(pulumi.StringOutput)
}

type KibanaSpecPtrOutput struct{ *pulumi.OutputState }

func (KibanaSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpec)(nil)).Elem()
}

func (o KibanaSpecPtrOutput) ToKibanaSpecPtrOutput() KibanaSpecPtrOutput {
	return o
}

func (o KibanaSpecPtrOutput) ToKibanaSpecPtrOutputWithContext(ctx context.Context) KibanaSpecPtrOutput {
	return o
}

func (o KibanaSpecPtrOutput) Elem() KibanaSpecOutput {
	return o.ApplyT(func(v *KibanaSpec) KibanaSpec {
		if v != nil {
			return *v
		}
		var ret KibanaSpec
		return ret
	}).(KibanaSpecOutput)
}

// Config holds the Kibana configuration. See: https://www.elastic.co/guide/en/kibana/current/settings.html
func (o KibanaSpecPtrOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v *KibanaSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.MapOutput)
}

// Count of Kibana instances to deploy.
func (o KibanaSpecPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KibanaSpec) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
func (o KibanaSpecPtrOutput) ElasticsearchRef() KibanaSpecElasticsearchRefPtrOutput {
	return o.ApplyT(func(v *KibanaSpec) *KibanaSpecElasticsearchRef {
		if v == nil {
			return nil
		}
		return v.ElasticsearchRef
	}).(KibanaSpecElasticsearchRefPtrOutput)
}

// EnterpriseSearchRef is a reference to an EnterpriseSearch running in the same Kubernetes cluster.
// Kibana provides the default Enterprise Search UI starting version 7.14.
func (o KibanaSpecPtrOutput) EnterpriseSearchRef() KibanaSpecEnterpriseSearchRefPtrOutput {
	return o.ApplyT(func(v *KibanaSpec) *KibanaSpecEnterpriseSearchRef {
		if v == nil {
			return nil
		}
		return v.EnterpriseSearchRef
	}).(KibanaSpecEnterpriseSearchRefPtrOutput)
}

// HTTP holds the HTTP layer configuration for Kibana.
func (o KibanaSpecPtrOutput) Http() KibanaSpecHttpPtrOutput {
	return o.ApplyT(func(v *KibanaSpec) *KibanaSpecHttp {
		if v == nil {
			return nil
		}
		return v.Http
	}).(KibanaSpecHttpPtrOutput)
}

// Image is the Kibana Docker image to deploy.
func (o KibanaSpecPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpec) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// Monitoring enables you to collect and ship log and monitoring data of this Kibana.
// See https://www.elastic.co/guide/en/kibana/current/xpack-monitoring.html.
// Metricbeat and Filebeat are deployed in the same Pod as sidecars and each one sends data to one or two different
// Elasticsearch monitoring clusters running in the same Kubernetes cluster.
func (o KibanaSpecPtrOutput) Monitoring() KibanaSpecMonitoringPtrOutput {
	return o.ApplyT(func(v *KibanaSpec) *KibanaSpecMonitoring {
		if v == nil {
			return nil
		}
		return v.Monitoring
	}).(KibanaSpecMonitoringPtrOutput)
}

// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Kibana pods
func (o KibanaSpecPtrOutput) PodTemplate() pulumi.MapOutput {
	return o.ApplyT(func(v *KibanaSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.MapOutput)
}

// RevisionHistoryLimit is the number of revisions to retain to allow rollback in the underlying Deployment.
func (o KibanaSpecPtrOutput) RevisionHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KibanaSpec) *int {
		if v == nil {
			return nil
		}
		return v.RevisionHistoryLimit
	}).(pulumi.IntPtrOutput)
}

// SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Kibana.
func (o KibanaSpecPtrOutput) SecureSettings() KibanaSpecSecureSettingsArrayOutput {
	return o.ApplyT(func(v *KibanaSpec) []KibanaSpecSecureSettings {
		if v == nil {
			return nil
		}
		return v.SecureSettings
	}).(KibanaSpecSecureSettingsArrayOutput)
}

// ServiceAccountName is used to check access from the current resource to a resource (for ex. Elasticsearch) in a different namespace.
// Can only be used if ECK is enforcing RBAC on references.
func (o KibanaSpecPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpec) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

// Version of Kibana.
func (o KibanaSpecPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

// ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
type KibanaSpecElasticsearchRef struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name *string `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace *string `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName *string `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName *string `pulumi:"serviceName"`
}

// KibanaSpecElasticsearchRefInput is an input type that accepts KibanaSpecElasticsearchRefArgs and KibanaSpecElasticsearchRefOutput values.
// You can construct a concrete instance of `KibanaSpecElasticsearchRefInput` via:
//
//	KibanaSpecElasticsearchRefArgs{...}
type KibanaSpecElasticsearchRefInput interface {
	pulumi.Input

	ToKibanaSpecElasticsearchRefOutput() KibanaSpecElasticsearchRefOutput
	ToKibanaSpecElasticsearchRefOutputWithContext(context.Context) KibanaSpecElasticsearchRefOutput
}

// ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
type KibanaSpecElasticsearchRefArgs struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
}

func (KibanaSpecElasticsearchRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecElasticsearchRef)(nil)).Elem()
}

func (i KibanaSpecElasticsearchRefArgs) ToKibanaSpecElasticsearchRefOutput() KibanaSpecElasticsearchRefOutput {
	return i.ToKibanaSpecElasticsearchRefOutputWithContext(context.Background())
}

func (i KibanaSpecElasticsearchRefArgs) ToKibanaSpecElasticsearchRefOutputWithContext(ctx context.Context) KibanaSpecElasticsearchRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecElasticsearchRefOutput)
}

func (i KibanaSpecElasticsearchRefArgs) ToKibanaSpecElasticsearchRefPtrOutput() KibanaSpecElasticsearchRefPtrOutput {
	return i.ToKibanaSpecElasticsearchRefPtrOutputWithContext(context.Background())
}

func (i KibanaSpecElasticsearchRefArgs) ToKibanaSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) KibanaSpecElasticsearchRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecElasticsearchRefOutput).ToKibanaSpecElasticsearchRefPtrOutputWithContext(ctx)
}

// KibanaSpecElasticsearchRefPtrInput is an input type that accepts KibanaSpecElasticsearchRefArgs, KibanaSpecElasticsearchRefPtr and KibanaSpecElasticsearchRefPtrOutput values.
// You can construct a concrete instance of `KibanaSpecElasticsearchRefPtrInput` via:
//
//	        KibanaSpecElasticsearchRefArgs{...}
//
//	or:
//
//	        nil
type KibanaSpecElasticsearchRefPtrInput interface {
	pulumi.Input

	ToKibanaSpecElasticsearchRefPtrOutput() KibanaSpecElasticsearchRefPtrOutput
	ToKibanaSpecElasticsearchRefPtrOutputWithContext(context.Context) KibanaSpecElasticsearchRefPtrOutput
}

type kibanaSpecElasticsearchRefPtrType KibanaSpecElasticsearchRefArgs

func KibanaSpecElasticsearchRefPtr(v *KibanaSpecElasticsearchRefArgs) KibanaSpecElasticsearchRefPtrInput {
	return (*kibanaSpecElasticsearchRefPtrType)(v)
}

func (*kibanaSpecElasticsearchRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecElasticsearchRef)(nil)).Elem()
}

func (i *kibanaSpecElasticsearchRefPtrType) ToKibanaSpecElasticsearchRefPtrOutput() KibanaSpecElasticsearchRefPtrOutput {
	return i.ToKibanaSpecElasticsearchRefPtrOutputWithContext(context.Background())
}

func (i *kibanaSpecElasticsearchRefPtrType) ToKibanaSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) KibanaSpecElasticsearchRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecElasticsearchRefPtrOutput)
}

// ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
type KibanaSpecElasticsearchRefOutput struct{ *pulumi.OutputState }

func (KibanaSpecElasticsearchRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecElasticsearchRef)(nil)).Elem()
}

func (o KibanaSpecElasticsearchRefOutput) ToKibanaSpecElasticsearchRefOutput() KibanaSpecElasticsearchRefOutput {
	return o
}

func (o KibanaSpecElasticsearchRefOutput) ToKibanaSpecElasticsearchRefOutputWithContext(ctx context.Context) KibanaSpecElasticsearchRefOutput {
	return o
}

func (o KibanaSpecElasticsearchRefOutput) ToKibanaSpecElasticsearchRefPtrOutput() KibanaSpecElasticsearchRefPtrOutput {
	return o.ToKibanaSpecElasticsearchRefPtrOutputWithContext(context.Background())
}

func (o KibanaSpecElasticsearchRefOutput) ToKibanaSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) KibanaSpecElasticsearchRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KibanaSpecElasticsearchRef) *KibanaSpecElasticsearchRef {
		return &v
	}).(KibanaSpecElasticsearchRefPtrOutput)
}

// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
func (o KibanaSpecElasticsearchRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecElasticsearchRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o KibanaSpecElasticsearchRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecElasticsearchRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
// Elastic resource not managed by the operator. The referenced secret must contain the following:
//   - `url`: the URL to reach the Elastic resource
//   - `username`: the username of the user to be authenticated to the Elastic resource
//   - `password`: the password of the user to be authenticated to the Elastic resource
//   - `ca.crt`: the CA certificate in PEM format (optional)
//   - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
//     This field cannot be used in combination with the other fields name, namespace or serviceName.
func (o KibanaSpecElasticsearchRefOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecElasticsearchRef) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
// the referenced resource is used.
func (o KibanaSpecElasticsearchRefOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecElasticsearchRef) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

type KibanaSpecElasticsearchRefPtrOutput struct{ *pulumi.OutputState }

func (KibanaSpecElasticsearchRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecElasticsearchRef)(nil)).Elem()
}

func (o KibanaSpecElasticsearchRefPtrOutput) ToKibanaSpecElasticsearchRefPtrOutput() KibanaSpecElasticsearchRefPtrOutput {
	return o
}

func (o KibanaSpecElasticsearchRefPtrOutput) ToKibanaSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) KibanaSpecElasticsearchRefPtrOutput {
	return o
}

func (o KibanaSpecElasticsearchRefPtrOutput) Elem() KibanaSpecElasticsearchRefOutput {
	return o.ApplyT(func(v *KibanaSpecElasticsearchRef) KibanaSpecElasticsearchRef {
		if v != nil {
			return *v
		}
		var ret KibanaSpecElasticsearchRef
		return ret
	}).(KibanaSpecElasticsearchRefOutput)
}

// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
func (o KibanaSpecElasticsearchRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o KibanaSpecElasticsearchRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
// Elastic resource not managed by the operator. The referenced secret must contain the following:
//   - `url`: the URL to reach the Elastic resource
//   - `username`: the username of the user to be authenticated to the Elastic resource
//   - `password`: the password of the user to be authenticated to the Elastic resource
//   - `ca.crt`: the CA certificate in PEM format (optional)
//   - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
//     This field cannot be used in combination with the other fields name, namespace or serviceName.
func (o KibanaSpecElasticsearchRefPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
// the referenced resource is used.
func (o KibanaSpecElasticsearchRefPtrOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return v.ServiceName
	}).(pulumi.StringPtrOutput)
}

// EnterpriseSearchRef is a reference to an EnterpriseSearch running in the same Kubernetes cluster.
// Kibana provides the default Enterprise Search UI starting version 7.14.
type KibanaSpecEnterpriseSearchRef struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name *string `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace *string `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName *string `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName *string `pulumi:"serviceName"`
}

// KibanaSpecEnterpriseSearchRefInput is an input type that accepts KibanaSpecEnterpriseSearchRefArgs and KibanaSpecEnterpriseSearchRefOutput values.
// You can construct a concrete instance of `KibanaSpecEnterpriseSearchRefInput` via:
//
//	KibanaSpecEnterpriseSearchRefArgs{...}
type KibanaSpecEnterpriseSearchRefInput interface {
	pulumi.Input

	ToKibanaSpecEnterpriseSearchRefOutput() KibanaSpecEnterpriseSearchRefOutput
	ToKibanaSpecEnterpriseSearchRefOutputWithContext(context.Context) KibanaSpecEnterpriseSearchRefOutput
}

// EnterpriseSearchRef is a reference to an EnterpriseSearch running in the same Kubernetes cluster.
// Kibana provides the default Enterprise Search UI starting version 7.14.
type KibanaSpecEnterpriseSearchRefArgs struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
}

func (KibanaSpecEnterpriseSearchRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecEnterpriseSearchRef)(nil)).Elem()
}

func (i KibanaSpecEnterpriseSearchRefArgs) ToKibanaSpecEnterpriseSearchRefOutput() KibanaSpecEnterpriseSearchRefOutput {
	return i.ToKibanaSpecEnterpriseSearchRefOutputWithContext(context.Background())
}

func (i KibanaSpecEnterpriseSearchRefArgs) ToKibanaSpecEnterpriseSearchRefOutputWithContext(ctx context.Context) KibanaSpecEnterpriseSearchRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecEnterpriseSearchRefOutput)
}

func (i KibanaSpecEnterpriseSearchRefArgs) ToKibanaSpecEnterpriseSearchRefPtrOutput() KibanaSpecEnterpriseSearchRefPtrOutput {
	return i.ToKibanaSpecEnterpriseSearchRefPtrOutputWithContext(context.Background())
}

func (i KibanaSpecEnterpriseSearchRefArgs) ToKibanaSpecEnterpriseSearchRefPtrOutputWithContext(ctx context.Context) KibanaSpecEnterpriseSearchRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecEnterpriseSearchRefOutput).ToKibanaSpecEnterpriseSearchRefPtrOutputWithContext(ctx)
}

// KibanaSpecEnterpriseSearchRefPtrInput is an input type that accepts KibanaSpecEnterpriseSearchRefArgs, KibanaSpecEnterpriseSearchRefPtr and KibanaSpecEnterpriseSearchRefPtrOutput values.
// You can construct a concrete instance of `KibanaSpecEnterpriseSearchRefPtrInput` via:
//
//	        KibanaSpecEnterpriseSearchRefArgs{...}
//
//	or:
//
//	        nil
type KibanaSpecEnterpriseSearchRefPtrInput interface {
	pulumi.Input

	ToKibanaSpecEnterpriseSearchRefPtrOutput() KibanaSpecEnterpriseSearchRefPtrOutput
	ToKibanaSpecEnterpriseSearchRefPtrOutputWithContext(context.Context) KibanaSpecEnterpriseSearchRefPtrOutput
}

type kibanaSpecEnterpriseSearchRefPtrType KibanaSpecEnterpriseSearchRefArgs

func KibanaSpecEnterpriseSearchRefPtr(v *KibanaSpecEnterpriseSearchRefArgs) KibanaSpecEnterpriseSearchRefPtrInput {
	return (*kibanaSpecEnterpriseSearchRefPtrType)(v)
}

func (*kibanaSpecEnterpriseSearchRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecEnterpriseSearchRef)(nil)).Elem()
}

func (i *kibanaSpecEnterpriseSearchRefPtrType) ToKibanaSpecEnterpriseSearchRefPtrOutput() KibanaSpecEnterpriseSearchRefPtrOutput {
	return i.ToKibanaSpecEnterpriseSearchRefPtrOutputWithContext(context.Background())
}

func (i *kibanaSpecEnterpriseSearchRefPtrType) ToKibanaSpecEnterpriseSearchRefPtrOutputWithContext(ctx context.Context) KibanaSpecEnterpriseSearchRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecEnterpriseSearchRefPtrOutput)
}

// EnterpriseSearchRef is a reference to an EnterpriseSearch running in the same Kubernetes cluster.
// Kibana provides the default Enterprise Search UI starting version 7.14.
type KibanaSpecEnterpriseSearchRefOutput struct{ *pulumi.OutputState }

func (KibanaSpecEnterpriseSearchRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecEnterpriseSearchRef)(nil)).Elem()
}

func (o KibanaSpecEnterpriseSearchRefOutput) ToKibanaSpecEnterpriseSearchRefOutput() KibanaSpecEnterpriseSearchRefOutput {
	return o
}

func (o KibanaSpecEnterpriseSearchRefOutput) ToKibanaSpecEnterpriseSearchRefOutputWithContext(ctx context.Context) KibanaSpecEnterpriseSearchRefOutput {
	return o
}

func (o KibanaSpecEnterpriseSearchRefOutput) ToKibanaSpecEnterpriseSearchRefPtrOutput() KibanaSpecEnterpriseSearchRefPtrOutput {
	return o.ToKibanaSpecEnterpriseSearchRefPtrOutputWithContext(context.Background())
}

func (o KibanaSpecEnterpriseSearchRefOutput) ToKibanaSpecEnterpriseSearchRefPtrOutputWithContext(ctx context.Context) KibanaSpecEnterpriseSearchRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KibanaSpecEnterpriseSearchRef) *KibanaSpecEnterpriseSearchRef {
		return &v
	}).(KibanaSpecEnterpriseSearchRefPtrOutput)
}

// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
func (o KibanaSpecEnterpriseSearchRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecEnterpriseSearchRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o KibanaSpecEnterpriseSearchRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecEnterpriseSearchRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
// Elastic resource not managed by the operator. The referenced secret must contain the following:
//   - `url`: the URL to reach the Elastic resource
//   - `username`: the username of the user to be authenticated to the Elastic resource
//   - `password`: the password of the user to be authenticated to the Elastic resource
//   - `ca.crt`: the CA certificate in PEM format (optional)
//   - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
//     This field cannot be used in combination with the other fields name, namespace or serviceName.
func (o KibanaSpecEnterpriseSearchRefOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecEnterpriseSearchRef) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
// the referenced resource is used.
func (o KibanaSpecEnterpriseSearchRefOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecEnterpriseSearchRef) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

type KibanaSpecEnterpriseSearchRefPtrOutput struct{ *pulumi.OutputState }

func (KibanaSpecEnterpriseSearchRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecEnterpriseSearchRef)(nil)).Elem()
}

func (o KibanaSpecEnterpriseSearchRefPtrOutput) ToKibanaSpecEnterpriseSearchRefPtrOutput() KibanaSpecEnterpriseSearchRefPtrOutput {
	return o
}

func (o KibanaSpecEnterpriseSearchRefPtrOutput) ToKibanaSpecEnterpriseSearchRefPtrOutputWithContext(ctx context.Context) KibanaSpecEnterpriseSearchRefPtrOutput {
	return o
}

func (o KibanaSpecEnterpriseSearchRefPtrOutput) Elem() KibanaSpecEnterpriseSearchRefOutput {
	return o.ApplyT(func(v *KibanaSpecEnterpriseSearchRef) KibanaSpecEnterpriseSearchRef {
		if v != nil {
			return *v
		}
		var ret KibanaSpecEnterpriseSearchRef
		return ret
	}).(KibanaSpecEnterpriseSearchRefOutput)
}

// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
func (o KibanaSpecEnterpriseSearchRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecEnterpriseSearchRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o KibanaSpecEnterpriseSearchRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecEnterpriseSearchRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
// Elastic resource not managed by the operator. The referenced secret must contain the following:
//   - `url`: the URL to reach the Elastic resource
//   - `username`: the username of the user to be authenticated to the Elastic resource
//   - `password`: the password of the user to be authenticated to the Elastic resource
//   - `ca.crt`: the CA certificate in PEM format (optional)
//   - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
//     This field cannot be used in combination with the other fields name, namespace or serviceName.
func (o KibanaSpecEnterpriseSearchRefPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecEnterpriseSearchRef) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
// the referenced resource is used.
func (o KibanaSpecEnterpriseSearchRefPtrOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecEnterpriseSearchRef) *string {
		if v == nil {
			return nil
		}
		return v.ServiceName
	}).(pulumi.StringPtrOutput)
}

// HTTP holds the HTTP layer configuration for Kibana.
type KibanaSpecHttp struct {
	// Service defines the template for the associated Kubernetes Service object.
	Service *KibanaSpecHttpService `pulumi:"service"`
	// TLS defines options for configuring TLS for HTTP.
	Tls *KibanaSpecHttpTls `pulumi:"tls"`
}

// KibanaSpecHttpInput is an input type that accepts KibanaSpecHttpArgs and KibanaSpecHttpOutput values.
// You can construct a concrete instance of `KibanaSpecHttpInput` via:
//
//	KibanaSpecHttpArgs{...}
type KibanaSpecHttpInput interface {
	pulumi.Input

	ToKibanaSpecHttpOutput() KibanaSpecHttpOutput
	ToKibanaSpecHttpOutputWithContext(context.Context) KibanaSpecHttpOutput
}

// HTTP holds the HTTP layer configuration for Kibana.
type KibanaSpecHttpArgs struct {
	// Service defines the template for the associated Kubernetes Service object.
	Service KibanaSpecHttpServicePtrInput `pulumi:"service"`
	// TLS defines options for configuring TLS for HTTP.
	Tls KibanaSpecHttpTlsPtrInput `pulumi:"tls"`
}

func (KibanaSpecHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttp)(nil)).Elem()
}

func (i KibanaSpecHttpArgs) ToKibanaSpecHttpOutput() KibanaSpecHttpOutput {
	return i.ToKibanaSpecHttpOutputWithContext(context.Background())
}

func (i KibanaSpecHttpArgs) ToKibanaSpecHttpOutputWithContext(ctx context.Context) KibanaSpecHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpOutput)
}

func (i KibanaSpecHttpArgs) ToKibanaSpecHttpPtrOutput() KibanaSpecHttpPtrOutput {
	return i.ToKibanaSpecHttpPtrOutputWithContext(context.Background())
}

func (i KibanaSpecHttpArgs) ToKibanaSpecHttpPtrOutputWithContext(ctx context.Context) KibanaSpecHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpOutput).ToKibanaSpecHttpPtrOutputWithContext(ctx)
}

// KibanaSpecHttpPtrInput is an input type that accepts KibanaSpecHttpArgs, KibanaSpecHttpPtr and KibanaSpecHttpPtrOutput values.
// You can construct a concrete instance of `KibanaSpecHttpPtrInput` via:
//
//	        KibanaSpecHttpArgs{...}
//
//	or:
//
//	        nil
type KibanaSpecHttpPtrInput interface {
	pulumi.Input

	ToKibanaSpecHttpPtrOutput() KibanaSpecHttpPtrOutput
	ToKibanaSpecHttpPtrOutputWithContext(context.Context) KibanaSpecHttpPtrOutput
}

type kibanaSpecHttpPtrType KibanaSpecHttpArgs

func KibanaSpecHttpPtr(v *KibanaSpecHttpArgs) KibanaSpecHttpPtrInput {
	return (*kibanaSpecHttpPtrType)(v)
}

func (*kibanaSpecHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttp)(nil)).Elem()
}

func (i *kibanaSpecHttpPtrType) ToKibanaSpecHttpPtrOutput() KibanaSpecHttpPtrOutput {
	return i.ToKibanaSpecHttpPtrOutputWithContext(context.Background())
}

func (i *kibanaSpecHttpPtrType) ToKibanaSpecHttpPtrOutputWithContext(ctx context.Context) KibanaSpecHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpPtrOutput)
}

// HTTP holds the HTTP layer configuration for Kibana.
type KibanaSpecHttpOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttp)(nil)).Elem()
}

func (o KibanaSpecHttpOutput) ToKibanaSpecHttpOutput() KibanaSpecHttpOutput {
	return o
}

func (o KibanaSpecHttpOutput) ToKibanaSpecHttpOutputWithContext(ctx context.Context) KibanaSpecHttpOutput {
	return o
}

func (o KibanaSpecHttpOutput) ToKibanaSpecHttpPtrOutput() KibanaSpecHttpPtrOutput {
	return o.ToKibanaSpecHttpPtrOutputWithContext(context.Background())
}

func (o KibanaSpecHttpOutput) ToKibanaSpecHttpPtrOutputWithContext(ctx context.Context) KibanaSpecHttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KibanaSpecHttp) *KibanaSpecHttp {
		return &v
	}).(KibanaSpecHttpPtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
func (o KibanaSpecHttpOutput) Service() KibanaSpecHttpServicePtrOutput {
	return o.ApplyT(func(v KibanaSpecHttp) *KibanaSpecHttpService { return v.Service }).(KibanaSpecHttpServicePtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
func (o KibanaSpecHttpOutput) Tls() KibanaSpecHttpTlsPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttp) *KibanaSpecHttpTls { return v.Tls }).(KibanaSpecHttpTlsPtrOutput)
}

type KibanaSpecHttpPtrOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttp)(nil)).Elem()
}

func (o KibanaSpecHttpPtrOutput) ToKibanaSpecHttpPtrOutput() KibanaSpecHttpPtrOutput {
	return o
}

func (o KibanaSpecHttpPtrOutput) ToKibanaSpecHttpPtrOutputWithContext(ctx context.Context) KibanaSpecHttpPtrOutput {
	return o
}

func (o KibanaSpecHttpPtrOutput) Elem() KibanaSpecHttpOutput {
	return o.ApplyT(func(v *KibanaSpecHttp) KibanaSpecHttp {
		if v != nil {
			return *v
		}
		var ret KibanaSpecHttp
		return ret
	}).(KibanaSpecHttpOutput)
}

// Service defines the template for the associated Kubernetes Service object.
func (o KibanaSpecHttpPtrOutput) Service() KibanaSpecHttpServicePtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttp) *KibanaSpecHttpService {
		if v == nil {
			return nil
		}
		return v.Service
	}).(KibanaSpecHttpServicePtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
func (o KibanaSpecHttpPtrOutput) Tls() KibanaSpecHttpTlsPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttp) *KibanaSpecHttpTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(KibanaSpecHttpTlsPtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
type KibanaSpecHttpService struct {
	// ObjectMeta is the metadata of the service.
	// The name and namespace provided here are managed by ECK and will be ignored.
	Metadata *KibanaSpecHttpServiceMetadata `pulumi:"metadata"`
	// Spec is the specification of the service.
	Spec *KibanaSpecHttpServiceSpec `pulumi:"spec"`
}

// KibanaSpecHttpServiceInput is an input type that accepts KibanaSpecHttpServiceArgs and KibanaSpecHttpServiceOutput values.
// You can construct a concrete instance of `KibanaSpecHttpServiceInput` via:
//
//	KibanaSpecHttpServiceArgs{...}
type KibanaSpecHttpServiceInput interface {
	pulumi.Input

	ToKibanaSpecHttpServiceOutput() KibanaSpecHttpServiceOutput
	ToKibanaSpecHttpServiceOutputWithContext(context.Context) KibanaSpecHttpServiceOutput
}

// Service defines the template for the associated Kubernetes Service object.
type KibanaSpecHttpServiceArgs struct {
	// ObjectMeta is the metadata of the service.
	// The name and namespace provided here are managed by ECK and will be ignored.
	Metadata KibanaSpecHttpServiceMetadataPtrInput `pulumi:"metadata"`
	// Spec is the specification of the service.
	Spec KibanaSpecHttpServiceSpecPtrInput `pulumi:"spec"`
}

func (KibanaSpecHttpServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpService)(nil)).Elem()
}

func (i KibanaSpecHttpServiceArgs) ToKibanaSpecHttpServiceOutput() KibanaSpecHttpServiceOutput {
	return i.ToKibanaSpecHttpServiceOutputWithContext(context.Background())
}

func (i KibanaSpecHttpServiceArgs) ToKibanaSpecHttpServiceOutputWithContext(ctx context.Context) KibanaSpecHttpServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceOutput)
}

func (i KibanaSpecHttpServiceArgs) ToKibanaSpecHttpServicePtrOutput() KibanaSpecHttpServicePtrOutput {
	return i.ToKibanaSpecHttpServicePtrOutputWithContext(context.Background())
}

func (i KibanaSpecHttpServiceArgs) ToKibanaSpecHttpServicePtrOutputWithContext(ctx context.Context) KibanaSpecHttpServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceOutput).ToKibanaSpecHttpServicePtrOutputWithContext(ctx)
}

// KibanaSpecHttpServicePtrInput is an input type that accepts KibanaSpecHttpServiceArgs, KibanaSpecHttpServicePtr and KibanaSpecHttpServicePtrOutput values.
// You can construct a concrete instance of `KibanaSpecHttpServicePtrInput` via:
//
//	        KibanaSpecHttpServiceArgs{...}
//
//	or:
//
//	        nil
type KibanaSpecHttpServicePtrInput interface {
	pulumi.Input

	ToKibanaSpecHttpServicePtrOutput() KibanaSpecHttpServicePtrOutput
	ToKibanaSpecHttpServicePtrOutputWithContext(context.Context) KibanaSpecHttpServicePtrOutput
}

type kibanaSpecHttpServicePtrType KibanaSpecHttpServiceArgs

func KibanaSpecHttpServicePtr(v *KibanaSpecHttpServiceArgs) KibanaSpecHttpServicePtrInput {
	return (*kibanaSpecHttpServicePtrType)(v)
}

func (*kibanaSpecHttpServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpService)(nil)).Elem()
}

func (i *kibanaSpecHttpServicePtrType) ToKibanaSpecHttpServicePtrOutput() KibanaSpecHttpServicePtrOutput {
	return i.ToKibanaSpecHttpServicePtrOutputWithContext(context.Background())
}

func (i *kibanaSpecHttpServicePtrType) ToKibanaSpecHttpServicePtrOutputWithContext(ctx context.Context) KibanaSpecHttpServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServicePtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
type KibanaSpecHttpServiceOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpService)(nil)).Elem()
}

func (o KibanaSpecHttpServiceOutput) ToKibanaSpecHttpServiceOutput() KibanaSpecHttpServiceOutput {
	return o
}

func (o KibanaSpecHttpServiceOutput) ToKibanaSpecHttpServiceOutputWithContext(ctx context.Context) KibanaSpecHttpServiceOutput {
	return o
}

func (o KibanaSpecHttpServiceOutput) ToKibanaSpecHttpServicePtrOutput() KibanaSpecHttpServicePtrOutput {
	return o.ToKibanaSpecHttpServicePtrOutputWithContext(context.Background())
}

func (o KibanaSpecHttpServiceOutput) ToKibanaSpecHttpServicePtrOutputWithContext(ctx context.Context) KibanaSpecHttpServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KibanaSpecHttpService) *KibanaSpecHttpService {
		return &v
	}).(KibanaSpecHttpServicePtrOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
func (o KibanaSpecHttpServiceOutput) Metadata() KibanaSpecHttpServiceMetadataPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpService) *KibanaSpecHttpServiceMetadata { return v.Metadata }).(KibanaSpecHttpServiceMetadataPtrOutput)
}

// Spec is the specification of the service.
func (o KibanaSpecHttpServiceOutput) Spec() KibanaSpecHttpServiceSpecPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpService) *KibanaSpecHttpServiceSpec { return v.Spec }).(KibanaSpecHttpServiceSpecPtrOutput)
}

type KibanaSpecHttpServicePtrOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpService)(nil)).Elem()
}

func (o KibanaSpecHttpServicePtrOutput) ToKibanaSpecHttpServicePtrOutput() KibanaSpecHttpServicePtrOutput {
	return o
}

func (o KibanaSpecHttpServicePtrOutput) ToKibanaSpecHttpServicePtrOutputWithContext(ctx context.Context) KibanaSpecHttpServicePtrOutput {
	return o
}

func (o KibanaSpecHttpServicePtrOutput) Elem() KibanaSpecHttpServiceOutput {
	return o.ApplyT(func(v *KibanaSpecHttpService) KibanaSpecHttpService {
		if v != nil {
			return *v
		}
		var ret KibanaSpecHttpService
		return ret
	}).(KibanaSpecHttpServiceOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
func (o KibanaSpecHttpServicePtrOutput) Metadata() KibanaSpecHttpServiceMetadataPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpService) *KibanaSpecHttpServiceMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(KibanaSpecHttpServiceMetadataPtrOutput)
}

// Spec is the specification of the service.
func (o KibanaSpecHttpServicePtrOutput) Spec() KibanaSpecHttpServiceSpecPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpService) *KibanaSpecHttpServiceSpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(KibanaSpecHttpServiceSpecPtrOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type KibanaSpecHttpServiceMetadata struct {
	Annotations map[string]string `pulumi:"annotations"`
	Finalizers  []string          `pulumi:"finalizers"`
	Labels      map[string]string `pulumi:"labels"`
	Name        *string           `pulumi:"name"`
	Namespace   *string           `pulumi:"namespace"`
}

// KibanaSpecHttpServiceMetadataInput is an input type that accepts KibanaSpecHttpServiceMetadataArgs and KibanaSpecHttpServiceMetadataOutput values.
// You can construct a concrete instance of `KibanaSpecHttpServiceMetadataInput` via:
//
//	KibanaSpecHttpServiceMetadataArgs{...}
type KibanaSpecHttpServiceMetadataInput interface {
	pulumi.Input

	ToKibanaSpecHttpServiceMetadataOutput() KibanaSpecHttpServiceMetadataOutput
	ToKibanaSpecHttpServiceMetadataOutputWithContext(context.Context) KibanaSpecHttpServiceMetadataOutput
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type KibanaSpecHttpServiceMetadataArgs struct {
	Annotations pulumi.StringMapInput   `pulumi:"annotations"`
	Finalizers  pulumi.StringArrayInput `pulumi:"finalizers"`
	Labels      pulumi.StringMapInput   `pulumi:"labels"`
	Name        pulumi.StringPtrInput   `pulumi:"name"`
	Namespace   pulumi.StringPtrInput   `pulumi:"namespace"`
}

func (KibanaSpecHttpServiceMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpServiceMetadata)(nil)).Elem()
}

func (i KibanaSpecHttpServiceMetadataArgs) ToKibanaSpecHttpServiceMetadataOutput() KibanaSpecHttpServiceMetadataOutput {
	return i.ToKibanaSpecHttpServiceMetadataOutputWithContext(context.Background())
}

func (i KibanaSpecHttpServiceMetadataArgs) ToKibanaSpecHttpServiceMetadataOutputWithContext(ctx context.Context) KibanaSpecHttpServiceMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceMetadataOutput)
}

func (i KibanaSpecHttpServiceMetadataArgs) ToKibanaSpecHttpServiceMetadataPtrOutput() KibanaSpecHttpServiceMetadataPtrOutput {
	return i.ToKibanaSpecHttpServiceMetadataPtrOutputWithContext(context.Background())
}

func (i KibanaSpecHttpServiceMetadataArgs) ToKibanaSpecHttpServiceMetadataPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceMetadataOutput).ToKibanaSpecHttpServiceMetadataPtrOutputWithContext(ctx)
}

// KibanaSpecHttpServiceMetadataPtrInput is an input type that accepts KibanaSpecHttpServiceMetadataArgs, KibanaSpecHttpServiceMetadataPtr and KibanaSpecHttpServiceMetadataPtrOutput values.
// You can construct a concrete instance of `KibanaSpecHttpServiceMetadataPtrInput` via:
//
//	        KibanaSpecHttpServiceMetadataArgs{...}
//
//	or:
//
//	        nil
type KibanaSpecHttpServiceMetadataPtrInput interface {
	pulumi.Input

	ToKibanaSpecHttpServiceMetadataPtrOutput() KibanaSpecHttpServiceMetadataPtrOutput
	ToKibanaSpecHttpServiceMetadataPtrOutputWithContext(context.Context) KibanaSpecHttpServiceMetadataPtrOutput
}

type kibanaSpecHttpServiceMetadataPtrType KibanaSpecHttpServiceMetadataArgs

func KibanaSpecHttpServiceMetadataPtr(v *KibanaSpecHttpServiceMetadataArgs) KibanaSpecHttpServiceMetadataPtrInput {
	return (*kibanaSpecHttpServiceMetadataPtrType)(v)
}

func (*kibanaSpecHttpServiceMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpServiceMetadata)(nil)).Elem()
}

func (i *kibanaSpecHttpServiceMetadataPtrType) ToKibanaSpecHttpServiceMetadataPtrOutput() KibanaSpecHttpServiceMetadataPtrOutput {
	return i.ToKibanaSpecHttpServiceMetadataPtrOutputWithContext(context.Background())
}

func (i *kibanaSpecHttpServiceMetadataPtrType) ToKibanaSpecHttpServiceMetadataPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceMetadataPtrOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type KibanaSpecHttpServiceMetadataOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpServiceMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpServiceMetadata)(nil)).Elem()
}

func (o KibanaSpecHttpServiceMetadataOutput) ToKibanaSpecHttpServiceMetadataOutput() KibanaSpecHttpServiceMetadataOutput {
	return o
}

func (o KibanaSpecHttpServiceMetadataOutput) ToKibanaSpecHttpServiceMetadataOutputWithContext(ctx context.Context) KibanaSpecHttpServiceMetadataOutput {
	return o
}

func (o KibanaSpecHttpServiceMetadataOutput) ToKibanaSpecHttpServiceMetadataPtrOutput() KibanaSpecHttpServiceMetadataPtrOutput {
	return o.ToKibanaSpecHttpServiceMetadataPtrOutputWithContext(context.Background())
}

func (o KibanaSpecHttpServiceMetadataOutput) ToKibanaSpecHttpServiceMetadataPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KibanaSpecHttpServiceMetadata) *KibanaSpecHttpServiceMetadata {
		return &v
	}).(KibanaSpecHttpServiceMetadataPtrOutput)
}

func (o KibanaSpecHttpServiceMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o KibanaSpecHttpServiceMetadataOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceMetadata) []string { return v.Finalizers }).(pulumi.StringArrayOutput)
}

func (o KibanaSpecHttpServiceMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o KibanaSpecHttpServiceMetadataOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceMetadata) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o KibanaSpecHttpServiceMetadataOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceMetadata) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type KibanaSpecHttpServiceMetadataPtrOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpServiceMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpServiceMetadata)(nil)).Elem()
}

func (o KibanaSpecHttpServiceMetadataPtrOutput) ToKibanaSpecHttpServiceMetadataPtrOutput() KibanaSpecHttpServiceMetadataPtrOutput {
	return o
}

func (o KibanaSpecHttpServiceMetadataPtrOutput) ToKibanaSpecHttpServiceMetadataPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceMetadataPtrOutput {
	return o
}

func (o KibanaSpecHttpServiceMetadataPtrOutput) Elem() KibanaSpecHttpServiceMetadataOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceMetadata) KibanaSpecHttpServiceMetadata {
		if v != nil {
			return *v
		}
		var ret KibanaSpecHttpServiceMetadata
		return ret
	}).(KibanaSpecHttpServiceMetadataOutput)
}

func (o KibanaSpecHttpServiceMetadataPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o KibanaSpecHttpServiceMetadataPtrOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceMetadata) []string {
		if v == nil {
			return nil
		}
		return v.Finalizers
	}).(pulumi.StringArrayOutput)
}

func (o KibanaSpecHttpServiceMetadataPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

func (o KibanaSpecHttpServiceMetadataPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o KibanaSpecHttpServiceMetadataPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type KibanaSpecHttpServiceMetadataAnnotations struct {
}

type KibanaSpecHttpServiceMetadataLabels struct {
}

// Spec is the specification of the service.
type KibanaSpecHttpServiceSpec struct {
	// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
	// allocated for services with type LoadBalancer.  Default is "true". It
	// may be set to "false" if the cluster load-balancer does not rely on
	// NodePorts.  If the caller requests specific NodePorts (by specifying a
	// value), those requests will be respected, regardless of this field.
	// This field may only be set for services with type LoadBalancer and will
	// be cleared if the type is changed to any other type.
	AllocateLoadBalancerNodePorts *bool `pulumi:"allocateLoadBalancerNodePorts"`
	// clusterIP is the IP address of the service and is usually assigned
	// randomly. If an address is specified manually, is in-range (as per
	// system configuration), and is not in use, it will be allocated to the
	// service; otherwise creation of the service will fail. This field may not
	// be changed through updates unless the type field is also being changed
	// to ExternalName (which requires this field to be blank) or the type
	// field is being changed from ExternalName (in which case this field may
	// optionally be specified, as describe above).  Valid values are "None",
	// empty string (""), or a valid IP address. Setting this to "None" makes a
	// "headless service" (no virtual IP), which is useful when direct endpoint
	// connections are preferred and proxying is not required.  Only applies to
	// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
	// when creating a Service of type ExternalName, creation will fail. This
	// field will be wiped when updating a Service to type ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP *string `pulumi:"clusterIP"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are
	// usually assigned randomly.  If an address is specified manually, is
	// in-range (as per system configuration), and is not in use, it will be
	// allocated to the service; otherwise creation of the service will fail.
	// This field may not be changed through updates unless the type field is
	// also being changed to ExternalName (which requires this field to be
	// empty) or the type field is being changed from ExternalName (in which
	// case this field may optionally be specified, as describe above).  Valid
	// values are "None", empty string (""), or a valid IP address.  Setting
	// this to "None" makes a "headless service" (no virtual IP), which is
	// useful when direct endpoint connections are preferred and proxying is
	// not required.  Only applies to types ClusterIP, NodePort, and
	// LoadBalancer. If this field is specified when creating a Service of type
	// ExternalName, creation will fail. This field will be wiped when updating
	// a Service to type ExternalName.  If this field is not specified, it will
	// be initialized from the clusterIP field.  If this field is specified,
	// clients must ensure that clusterIPs[0] and clusterIP have the same
	// value.
	//
	// This field may hold a maximum of two entries (dual-stack IPs, in either order).
	// These IPs must correspond to the values of the ipFamilies field. Both
	// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIPs []string `pulumi:"clusterIPs"`
	// externalIPs is a list of IP addresses for which nodes in the cluster
	// will also accept traffic for this service.  These IPs are not managed by
	// Kubernetes.  The user is responsible for ensuring that traffic arrives
	// at a node with this IP.  A common example is external load-balancers
	// that are not part of the Kubernetes system.
	ExternalIPs []string `pulumi:"externalIPs"`
	// externalName is the external reference that discovery mechanisms will
	// return as an alias for this service (e.g. a DNS CNAME record). No
	// proxying will be involved.  Must be a lowercase RFC-1123 hostname
	// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName *string `pulumi:"externalName"`
	// externalTrafficPolicy describes how nodes distribute service traffic they
	// receive on one of the Service's "externally-facing" addresses (NodePorts,
	// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
	// the service in a way that assumes that external load balancers will take care
	// of balancing the service traffic between nodes, and so each node will deliver
	// traffic only to the node-local endpoints of the service, without masquerading
	// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
	// be dropped.) The default value, "Cluster", uses the standard behavior of
	// routing to all endpoints evenly (possibly modified by topology and other
	// features). Note that traffic sent to an External IP or LoadBalancer IP from
	// within the cluster will always get "Cluster" semantics, but clients sending to
	// a NodePort from within the cluster may need to take traffic policy into account
	// when picking a node.
	ExternalTrafficPolicy *string `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service.
	// This only applies when type is set to LoadBalancer and
	// externalTrafficPolicy is set to Local. If a value is specified, is
	// in-range, and is not in use, it will be used.  If not specified, a value
	// will be automatically allocated.  External systems (e.g. load-balancers)
	// can use this port to determine if a given node holds endpoints for this
	// service or not.  If this field is specified when creating a Service
	// which does not need it, creation will fail. This field will be wiped
	// when updating a Service to no longer need it (e.g. changing type).
	// This field cannot be updated once set.
	HealthCheckNodePort *int `pulumi:"healthCheckNodePort"`
	// InternalTrafficPolicy describes how nodes distribute service traffic they
	// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
	// only want to talk to endpoints of the service on the same node as the pod,
	// dropping the traffic if there are no local endpoints. The default value,
	// "Cluster", uses the standard behavior of routing to all endpoints evenly
	// (possibly modified by topology and other features).
	InternalTrafficPolicy *string `pulumi:"internalTrafficPolicy"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
	// service. This field is usually assigned automatically based on cluster
	// configuration and the ipFamilyPolicy field. If this field is specified
	// manually, the requested family is available in the cluster,
	// and ipFamilyPolicy allows it, it will be used; otherwise creation of
	// the service will fail. This field is conditionally mutable: it allows
	// for adding or removing a secondary IP family, but it does not allow
	// changing the primary IP family of the Service. Valid values are "IPv4"
	// and "IPv6".  This field only applies to Services of types ClusterIP,
	// NodePort, and LoadBalancer, and does apply to "headless" services.
	// This field will be wiped when updating a Service to type ExternalName.
	//
	// This field may hold a maximum of two entries (dual-stack families, in
	// either order).  These families must correspond to the values of the
	// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
	// governed by the ipFamilyPolicy field.
	IpFamilies []string `pulumi:"ipFamilies"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by
	// this Service. If there is no value provided, then this field will be set
	// to SingleStack. Services can be "SingleStack" (a single IP family),
	// "PreferDualStack" (two IP families on dual-stack configured clusters or
	// a single IP family on single-stack clusters), or "RequireDualStack"
	// (two IP families on dual-stack configured clusters, otherwise fail). The
	// ipFamilies and clusterIPs fields depend on the value of this field. This
	// field will be wiped when updating a service to type ExternalName.
	IpFamilyPolicy *string `pulumi:"ipFamilyPolicy"`
	// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
	// If specified, the value of this field must be a label-style identifier, with an optional prefix,
	// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
	// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
	// balancer implementation is used, today this is typically done through the cloud provider integration,
	// but should apply for any default implementation. If set, it is assumed that a load balancer
	// implementation is watching for Services with a matching class. Any default load balancer
	// implementation (e.g. cloud providers) should ignore Services that set this field.
	// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
	// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass *string `pulumi:"loadBalancerClass"`
	// Only applies to Service Type: LoadBalancer.
	// This feature depends on whether the underlying cloud-provider supports specifying
	// the loadBalancerIP when a load balancer is created.
	// This field will be ignored if the cloud-provider does not support the feature.
	// Deprecated: This field was under-specified and its meaning varies across implementations.
	// Using it is non-portable and it may not support dual-stack.
	// Users are encouraged to use implementation-specific annotations when available.
	LoadBalancerIP *string `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider
	// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
	// cloud-provider does not support the feature."
	// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
	LoadBalancerSourceRanges []string `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports []KibanaSpecHttpServiceSpecPorts `pulumi:"ports"`
	// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
	// Service should disregard any indications of ready/not-ready.
	// The primary use case for setting this field is for a StatefulSet's Headless Service to
	// propagate SRV DNS records for its Pods for the purpose of peer discovery.
	// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
	// Services interpret this to mean that all endpoints are considered "ready" even if the
	// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
	// through the Endpoints or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses *bool `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this
	// selector. If empty or not present, the service is assumed to have an
	// external process managing its endpoints, which Kubernetes will not
	// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
	// Ignored if type is ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector map[string]string `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity.
	// Enable client IP based session affinity.
	// Must be ClientIP or None.
	// Defaults to None.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity *string `pulumi:"sessionAffinity"`
	// sessionAffinityConfig contains the configurations of session affinity.
	SessionAffinityConfig *KibanaSpecHttpServiceSpecSessionAffinityConfig `pulumi:"sessionAffinityConfig"`
	// TrafficDistribution offers a way to express preferences for how traffic is
	// distributed to Service endpoints. Implementations can use this field as a
	// hint, but are not required to guarantee strict adherence. If the field is
	// not set, the implementation will apply its default routing strategy. If set
	// to "PreferClose", implementations should prioritize endpoints that are
	// topologically close (e.g., same zone).
	// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
	TrafficDistribution *string `pulumi:"trafficDistribution"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid
	// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
	// "ClusterIP" allocates a cluster-internal IP address for load-balancing
	// to endpoints. Endpoints are determined by the selector or if that is not
	// specified, by manual construction of an Endpoints object or
	// EndpointSlice objects. If clusterIP is "None", no virtual IP is
	// allocated and the endpoints are published as a set of endpoints rather
	// than a virtual IP.
	// "NodePort" builds on ClusterIP and allocates a port on every node which
	// routes to the same endpoints as the clusterIP.
	// "LoadBalancer" builds on NodePort and creates an external load-balancer
	// (if supported in the current cloud) which routes to the same endpoints
	// as the clusterIP.
	// "ExternalName" aliases this service to the specified externalName.
	// Several other fields do not apply to ExternalName services.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type *string `pulumi:"type"`
}

// KibanaSpecHttpServiceSpecInput is an input type that accepts KibanaSpecHttpServiceSpecArgs and KibanaSpecHttpServiceSpecOutput values.
// You can construct a concrete instance of `KibanaSpecHttpServiceSpecInput` via:
//
//	KibanaSpecHttpServiceSpecArgs{...}
type KibanaSpecHttpServiceSpecInput interface {
	pulumi.Input

	ToKibanaSpecHttpServiceSpecOutput() KibanaSpecHttpServiceSpecOutput
	ToKibanaSpecHttpServiceSpecOutputWithContext(context.Context) KibanaSpecHttpServiceSpecOutput
}

// Spec is the specification of the service.
type KibanaSpecHttpServiceSpecArgs struct {
	// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
	// allocated for services with type LoadBalancer.  Default is "true". It
	// may be set to "false" if the cluster load-balancer does not rely on
	// NodePorts.  If the caller requests specific NodePorts (by specifying a
	// value), those requests will be respected, regardless of this field.
	// This field may only be set for services with type LoadBalancer and will
	// be cleared if the type is changed to any other type.
	AllocateLoadBalancerNodePorts pulumi.BoolPtrInput `pulumi:"allocateLoadBalancerNodePorts"`
	// clusterIP is the IP address of the service and is usually assigned
	// randomly. If an address is specified manually, is in-range (as per
	// system configuration), and is not in use, it will be allocated to the
	// service; otherwise creation of the service will fail. This field may not
	// be changed through updates unless the type field is also being changed
	// to ExternalName (which requires this field to be blank) or the type
	// field is being changed from ExternalName (in which case this field may
	// optionally be specified, as describe above).  Valid values are "None",
	// empty string (""), or a valid IP address. Setting this to "None" makes a
	// "headless service" (no virtual IP), which is useful when direct endpoint
	// connections are preferred and proxying is not required.  Only applies to
	// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
	// when creating a Service of type ExternalName, creation will fail. This
	// field will be wiped when updating a Service to type ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP pulumi.StringPtrInput `pulumi:"clusterIP"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are
	// usually assigned randomly.  If an address is specified manually, is
	// in-range (as per system configuration), and is not in use, it will be
	// allocated to the service; otherwise creation of the service will fail.
	// This field may not be changed through updates unless the type field is
	// also being changed to ExternalName (which requires this field to be
	// empty) or the type field is being changed from ExternalName (in which
	// case this field may optionally be specified, as describe above).  Valid
	// values are "None", empty string (""), or a valid IP address.  Setting
	// this to "None" makes a "headless service" (no virtual IP), which is
	// useful when direct endpoint connections are preferred and proxying is
	// not required.  Only applies to types ClusterIP, NodePort, and
	// LoadBalancer. If this field is specified when creating a Service of type
	// ExternalName, creation will fail. This field will be wiped when updating
	// a Service to type ExternalName.  If this field is not specified, it will
	// be initialized from the clusterIP field.  If this field is specified,
	// clients must ensure that clusterIPs[0] and clusterIP have the same
	// value.
	//
	// This field may hold a maximum of two entries (dual-stack IPs, in either order).
	// These IPs must correspond to the values of the ipFamilies field. Both
	// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIPs pulumi.StringArrayInput `pulumi:"clusterIPs"`
	// externalIPs is a list of IP addresses for which nodes in the cluster
	// will also accept traffic for this service.  These IPs are not managed by
	// Kubernetes.  The user is responsible for ensuring that traffic arrives
	// at a node with this IP.  A common example is external load-balancers
	// that are not part of the Kubernetes system.
	ExternalIPs pulumi.StringArrayInput `pulumi:"externalIPs"`
	// externalName is the external reference that discovery mechanisms will
	// return as an alias for this service (e.g. a DNS CNAME record). No
	// proxying will be involved.  Must be a lowercase RFC-1123 hostname
	// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName pulumi.StringPtrInput `pulumi:"externalName"`
	// externalTrafficPolicy describes how nodes distribute service traffic they
	// receive on one of the Service's "externally-facing" addresses (NodePorts,
	// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
	// the service in a way that assumes that external load balancers will take care
	// of balancing the service traffic between nodes, and so each node will deliver
	// traffic only to the node-local endpoints of the service, without masquerading
	// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
	// be dropped.) The default value, "Cluster", uses the standard behavior of
	// routing to all endpoints evenly (possibly modified by topology and other
	// features). Note that traffic sent to an External IP or LoadBalancer IP from
	// within the cluster will always get "Cluster" semantics, but clients sending to
	// a NodePort from within the cluster may need to take traffic policy into account
	// when picking a node.
	ExternalTrafficPolicy pulumi.StringPtrInput `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service.
	// This only applies when type is set to LoadBalancer and
	// externalTrafficPolicy is set to Local. If a value is specified, is
	// in-range, and is not in use, it will be used.  If not specified, a value
	// will be automatically allocated.  External systems (e.g. load-balancers)
	// can use this port to determine if a given node holds endpoints for this
	// service or not.  If this field is specified when creating a Service
	// which does not need it, creation will fail. This field will be wiped
	// when updating a Service to no longer need it (e.g. changing type).
	// This field cannot be updated once set.
	HealthCheckNodePort pulumi.IntPtrInput `pulumi:"healthCheckNodePort"`
	// InternalTrafficPolicy describes how nodes distribute service traffic they
	// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
	// only want to talk to endpoints of the service on the same node as the pod,
	// dropping the traffic if there are no local endpoints. The default value,
	// "Cluster", uses the standard behavior of routing to all endpoints evenly
	// (possibly modified by topology and other features).
	InternalTrafficPolicy pulumi.StringPtrInput `pulumi:"internalTrafficPolicy"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
	// service. This field is usually assigned automatically based on cluster
	// configuration and the ipFamilyPolicy field. If this field is specified
	// manually, the requested family is available in the cluster,
	// and ipFamilyPolicy allows it, it will be used; otherwise creation of
	// the service will fail. This field is conditionally mutable: it allows
	// for adding or removing a secondary IP family, but it does not allow
	// changing the primary IP family of the Service. Valid values are "IPv4"
	// and "IPv6".  This field only applies to Services of types ClusterIP,
	// NodePort, and LoadBalancer, and does apply to "headless" services.
	// This field will be wiped when updating a Service to type ExternalName.
	//
	// This field may hold a maximum of two entries (dual-stack families, in
	// either order).  These families must correspond to the values of the
	// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
	// governed by the ipFamilyPolicy field.
	IpFamilies pulumi.StringArrayInput `pulumi:"ipFamilies"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by
	// this Service. If there is no value provided, then this field will be set
	// to SingleStack. Services can be "SingleStack" (a single IP family),
	// "PreferDualStack" (two IP families on dual-stack configured clusters or
	// a single IP family on single-stack clusters), or "RequireDualStack"
	// (two IP families on dual-stack configured clusters, otherwise fail). The
	// ipFamilies and clusterIPs fields depend on the value of this field. This
	// field will be wiped when updating a service to type ExternalName.
	IpFamilyPolicy pulumi.StringPtrInput `pulumi:"ipFamilyPolicy"`
	// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
	// If specified, the value of this field must be a label-style identifier, with an optional prefix,
	// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
	// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
	// balancer implementation is used, today this is typically done through the cloud provider integration,
	// but should apply for any default implementation. If set, it is assumed that a load balancer
	// implementation is watching for Services with a matching class. Any default load balancer
	// implementation (e.g. cloud providers) should ignore Services that set this field.
	// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
	// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass pulumi.StringPtrInput `pulumi:"loadBalancerClass"`
	// Only applies to Service Type: LoadBalancer.
	// This feature depends on whether the underlying cloud-provider supports specifying
	// the loadBalancerIP when a load balancer is created.
	// This field will be ignored if the cloud-provider does not support the feature.
	// Deprecated: This field was under-specified and its meaning varies across implementations.
	// Using it is non-portable and it may not support dual-stack.
	// Users are encouraged to use implementation-specific annotations when available.
	LoadBalancerIP pulumi.StringPtrInput `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider
	// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
	// cloud-provider does not support the feature."
	// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
	LoadBalancerSourceRanges pulumi.StringArrayInput `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports KibanaSpecHttpServiceSpecPortsArrayInput `pulumi:"ports"`
	// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
	// Service should disregard any indications of ready/not-ready.
	// The primary use case for setting this field is for a StatefulSet's Headless Service to
	// propagate SRV DNS records for its Pods for the purpose of peer discovery.
	// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
	// Services interpret this to mean that all endpoints are considered "ready" even if the
	// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
	// through the Endpoints or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses pulumi.BoolPtrInput `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this
	// selector. If empty or not present, the service is assumed to have an
	// external process managing its endpoints, which Kubernetes will not
	// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
	// Ignored if type is ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector pulumi.StringMapInput `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity.
	// Enable client IP based session affinity.
	// Must be ClientIP or None.
	// Defaults to None.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity pulumi.StringPtrInput `pulumi:"sessionAffinity"`
	// sessionAffinityConfig contains the configurations of session affinity.
	SessionAffinityConfig KibanaSpecHttpServiceSpecSessionAffinityConfigPtrInput `pulumi:"sessionAffinityConfig"`
	// TrafficDistribution offers a way to express preferences for how traffic is
	// distributed to Service endpoints. Implementations can use this field as a
	// hint, but are not required to guarantee strict adherence. If the field is
	// not set, the implementation will apply its default routing strategy. If set
	// to "PreferClose", implementations should prioritize endpoints that are
	// topologically close (e.g., same zone).
	// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
	TrafficDistribution pulumi.StringPtrInput `pulumi:"trafficDistribution"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid
	// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
	// "ClusterIP" allocates a cluster-internal IP address for load-balancing
	// to endpoints. Endpoints are determined by the selector or if that is not
	// specified, by manual construction of an Endpoints object or
	// EndpointSlice objects. If clusterIP is "None", no virtual IP is
	// allocated and the endpoints are published as a set of endpoints rather
	// than a virtual IP.
	// "NodePort" builds on ClusterIP and allocates a port on every node which
	// routes to the same endpoints as the clusterIP.
	// "LoadBalancer" builds on NodePort and creates an external load-balancer
	// (if supported in the current cloud) which routes to the same endpoints
	// as the clusterIP.
	// "ExternalName" aliases this service to the specified externalName.
	// Several other fields do not apply to ExternalName services.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (KibanaSpecHttpServiceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpServiceSpec)(nil)).Elem()
}

func (i KibanaSpecHttpServiceSpecArgs) ToKibanaSpecHttpServiceSpecOutput() KibanaSpecHttpServiceSpecOutput {
	return i.ToKibanaSpecHttpServiceSpecOutputWithContext(context.Background())
}

func (i KibanaSpecHttpServiceSpecArgs) ToKibanaSpecHttpServiceSpecOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceSpecOutput)
}

func (i KibanaSpecHttpServiceSpecArgs) ToKibanaSpecHttpServiceSpecPtrOutput() KibanaSpecHttpServiceSpecPtrOutput {
	return i.ToKibanaSpecHttpServiceSpecPtrOutputWithContext(context.Background())
}

func (i KibanaSpecHttpServiceSpecArgs) ToKibanaSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceSpecOutput).ToKibanaSpecHttpServiceSpecPtrOutputWithContext(ctx)
}

// KibanaSpecHttpServiceSpecPtrInput is an input type that accepts KibanaSpecHttpServiceSpecArgs, KibanaSpecHttpServiceSpecPtr and KibanaSpecHttpServiceSpecPtrOutput values.
// You can construct a concrete instance of `KibanaSpecHttpServiceSpecPtrInput` via:
//
//	        KibanaSpecHttpServiceSpecArgs{...}
//
//	or:
//
//	        nil
type KibanaSpecHttpServiceSpecPtrInput interface {
	pulumi.Input

	ToKibanaSpecHttpServiceSpecPtrOutput() KibanaSpecHttpServiceSpecPtrOutput
	ToKibanaSpecHttpServiceSpecPtrOutputWithContext(context.Context) KibanaSpecHttpServiceSpecPtrOutput
}

type kibanaSpecHttpServiceSpecPtrType KibanaSpecHttpServiceSpecArgs

func KibanaSpecHttpServiceSpecPtr(v *KibanaSpecHttpServiceSpecArgs) KibanaSpecHttpServiceSpecPtrInput {
	return (*kibanaSpecHttpServiceSpecPtrType)(v)
}

func (*kibanaSpecHttpServiceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpServiceSpec)(nil)).Elem()
}

func (i *kibanaSpecHttpServiceSpecPtrType) ToKibanaSpecHttpServiceSpecPtrOutput() KibanaSpecHttpServiceSpecPtrOutput {
	return i.ToKibanaSpecHttpServiceSpecPtrOutputWithContext(context.Background())
}

func (i *kibanaSpecHttpServiceSpecPtrType) ToKibanaSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceSpecPtrOutput)
}

// Spec is the specification of the service.
type KibanaSpecHttpServiceSpecOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpServiceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpServiceSpec)(nil)).Elem()
}

func (o KibanaSpecHttpServiceSpecOutput) ToKibanaSpecHttpServiceSpecOutput() KibanaSpecHttpServiceSpecOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecOutput) ToKibanaSpecHttpServiceSpecOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecOutput) ToKibanaSpecHttpServiceSpecPtrOutput() KibanaSpecHttpServiceSpecPtrOutput {
	return o.ToKibanaSpecHttpServiceSpecPtrOutputWithContext(context.Background())
}

func (o KibanaSpecHttpServiceSpecOutput) ToKibanaSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KibanaSpecHttpServiceSpec) *KibanaSpecHttpServiceSpec {
		return &v
	}).(KibanaSpecHttpServiceSpecPtrOutput)
}

// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
// allocated for services with type LoadBalancer.  Default is "true". It
// may be set to "false" if the cluster load-balancer does not rely on
// NodePorts.  If the caller requests specific NodePorts (by specifying a
// value), those requests will be respected, regardless of this field.
// This field may only be set for services with type LoadBalancer and will
// be cleared if the type is changed to any other type.
func (o KibanaSpecHttpServiceSpecOutput) AllocateLoadBalancerNodePorts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) *bool { return v.AllocateLoadBalancerNodePorts }).(pulumi.BoolPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned
// randomly. If an address is specified manually, is in-range (as per
// system configuration), and is not in use, it will be allocated to the
// service; otherwise creation of the service will fail. This field may not
// be changed through updates unless the type field is also being changed
// to ExternalName (which requires this field to be blank) or the type
// field is being changed from ExternalName (in which case this field may
// optionally be specified, as describe above).  Valid values are "None",
// empty string (""), or a valid IP address. Setting this to "None" makes a
// "headless service" (no virtual IP), which is useful when direct endpoint
// connections are preferred and proxying is not required.  Only applies to
// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
// when creating a Service of type ExternalName, creation will fail. This
// field will be wiped when updating a Service to type ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o KibanaSpecHttpServiceSpecOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) *string { return v.ClusterIP }).(pulumi.StringPtrOutput)
}

// ClusterIPs is a list of IP addresses assigned to this service, and are
// usually assigned randomly.  If an address is specified manually, is
// in-range (as per system configuration), and is not in use, it will be
// allocated to the service; otherwise creation of the service will fail.
// This field may not be changed through updates unless the type field is
// also being changed to ExternalName (which requires this field to be
// empty) or the type field is being changed from ExternalName (in which
// case this field may optionally be specified, as describe above).  Valid
// values are "None", empty string (""), or a valid IP address.  Setting
// this to "None" makes a "headless service" (no virtual IP), which is
// useful when direct endpoint connections are preferred and proxying is
// not required.  Only applies to types ClusterIP, NodePort, and
// LoadBalancer. If this field is specified when creating a Service of type
// ExternalName, creation will fail. This field will be wiped when updating
// a Service to type ExternalName.  If this field is not specified, it will
// be initialized from the clusterIP field.  If this field is specified,
// clients must ensure that clusterIPs[0] and clusterIP have the same
// value.
//
// This field may hold a maximum of two entries (dual-stack IPs, in either order).
// These IPs must correspond to the values of the ipFamilies field. Both
// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o KibanaSpecHttpServiceSpecOutput) ClusterIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) []string { return v.ClusterIPs }).(pulumi.StringArrayOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster
// will also accept traffic for this service.  These IPs are not managed by
// Kubernetes.  The user is responsible for ensuring that traffic arrives
// at a node with this IP.  A common example is external load-balancers
// that are not part of the Kubernetes system.
func (o KibanaSpecHttpServiceSpecOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) []string { return v.ExternalIPs }).(pulumi.StringArrayOutput)
}

// externalName is the external reference that discovery mechanisms will
// return as an alias for this service (e.g. a DNS CNAME record). No
// proxying will be involved.  Must be a lowercase RFC-1123 hostname
// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
func (o KibanaSpecHttpServiceSpecOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) *string { return v.ExternalName }).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy describes how nodes distribute service traffic they
// receive on one of the Service's "externally-facing" addresses (NodePorts,
// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
// the service in a way that assumes that external load balancers will take care
// of balancing the service traffic between nodes, and so each node will deliver
// traffic only to the node-local endpoints of the service, without masquerading
// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
// be dropped.) The default value, "Cluster", uses the standard behavior of
// routing to all endpoints evenly (possibly modified by topology and other
// features). Note that traffic sent to an External IP or LoadBalancer IP from
// within the cluster will always get "Cluster" semantics, but clients sending to
// a NodePort from within the cluster may need to take traffic policy into account
// when picking a node.
func (o KibanaSpecHttpServiceSpecOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) *string { return v.ExternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service.
// This only applies when type is set to LoadBalancer and
// externalTrafficPolicy is set to Local. If a value is specified, is
// in-range, and is not in use, it will be used.  If not specified, a value
// will be automatically allocated.  External systems (e.g. load-balancers)
// can use this port to determine if a given node holds endpoints for this
// service or not.  If this field is specified when creating a Service
// which does not need it, creation will fail. This field will be wiped
// when updating a Service to no longer need it (e.g. changing type).
// This field cannot be updated once set.
func (o KibanaSpecHttpServiceSpecOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) *int { return v.HealthCheckNodePort }).(pulumi.IntPtrOutput)
}

// InternalTrafficPolicy describes how nodes distribute service traffic they
// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
// only want to talk to endpoints of the service on the same node as the pod,
// dropping the traffic if there are no local endpoints. The default value,
// "Cluster", uses the standard behavior of routing to all endpoints evenly
// (possibly modified by topology and other features).
func (o KibanaSpecHttpServiceSpecOutput) InternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) *string { return v.InternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
// service. This field is usually assigned automatically based on cluster
// configuration and the ipFamilyPolicy field. If this field is specified
// manually, the requested family is available in the cluster,
// and ipFamilyPolicy allows it, it will be used; otherwise creation of
// the service will fail. This field is conditionally mutable: it allows
// for adding or removing a secondary IP family, but it does not allow
// changing the primary IP family of the Service. Valid values are "IPv4"
// and "IPv6".  This field only applies to Services of types ClusterIP,
// NodePort, and LoadBalancer, and does apply to "headless" services.
// This field will be wiped when updating a Service to type ExternalName.
//
// This field may hold a maximum of two entries (dual-stack families, in
// either order).  These families must correspond to the values of the
// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
// governed by the ipFamilyPolicy field.
func (o KibanaSpecHttpServiceSpecOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) []string { return v.IpFamilies }).(pulumi.StringArrayOutput)
}

// IPFamilyPolicy represents the dual-stack-ness requested or required by
// this Service. If there is no value provided, then this field will be set
// to SingleStack. Services can be "SingleStack" (a single IP family),
// "PreferDualStack" (two IP families on dual-stack configured clusters or
// a single IP family on single-stack clusters), or "RequireDualStack"
// (two IP families on dual-stack configured clusters, otherwise fail). The
// ipFamilies and clusterIPs fields depend on the value of this field. This
// field will be wiped when updating a service to type ExternalName.
func (o KibanaSpecHttpServiceSpecOutput) IpFamilyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) *string { return v.IpFamilyPolicy }).(pulumi.StringPtrOutput)
}

// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
// If specified, the value of this field must be a label-style identifier, with an optional prefix,
// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
// balancer implementation is used, today this is typically done through the cloud provider integration,
// but should apply for any default implementation. If set, it is assumed that a load balancer
// implementation is watching for Services with a matching class. Any default load balancer
// implementation (e.g. cloud providers) should ignore Services that set this field.
// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
func (o KibanaSpecHttpServiceSpecOutput) LoadBalancerClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) *string { return v.LoadBalancerClass }).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer.
// This feature depends on whether the underlying cloud-provider supports specifying
// the loadBalancerIP when a load balancer is created.
// This field will be ignored if the cloud-provider does not support the feature.
// Deprecated: This field was under-specified and its meaning varies across implementations.
// Using it is non-portable and it may not support dual-stack.
// Users are encouraged to use implementation-specific annotations when available.
func (o KibanaSpecHttpServiceSpecOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) *string { return v.LoadBalancerIP }).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider
// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
// cloud-provider does not support the feature."
// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
func (o KibanaSpecHttpServiceSpecOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) []string { return v.LoadBalancerSourceRanges }).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o KibanaSpecHttpServiceSpecOutput) Ports() KibanaSpecHttpServiceSpecPortsArrayOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) []KibanaSpecHttpServiceSpecPorts { return v.Ports }).(KibanaSpecHttpServiceSpecPortsArrayOutput)
}

// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
// Service should disregard any indications of ready/not-ready.
// The primary use case for setting this field is for a StatefulSet's Headless Service to
// propagate SRV DNS records for its Pods for the purpose of peer discovery.
// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
// Services interpret this to mean that all endpoints are considered "ready" even if the
// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
// through the Endpoints or EndpointSlice resources can safely assume this behavior.
func (o KibanaSpecHttpServiceSpecOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) *bool { return v.PublishNotReadyAddresses }).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this
// selector. If empty or not present, the service is assumed to have an
// external process managing its endpoints, which Kubernetes will not
// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
// Ignored if type is ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o KibanaSpecHttpServiceSpecOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) map[string]string { return v.Selector }).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity.
// Enable client IP based session affinity.
// Must be ClientIP or None.
// Defaults to None.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o KibanaSpecHttpServiceSpecOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) *string { return v.SessionAffinity }).(pulumi.StringPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
func (o KibanaSpecHttpServiceSpecOutput) SessionAffinityConfig() KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) *KibanaSpecHttpServiceSpecSessionAffinityConfig {
		return v.SessionAffinityConfig
	}).(KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// TrafficDistribution offers a way to express preferences for how traffic is
// distributed to Service endpoints. Implementations can use this field as a
// hint, but are not required to guarantee strict adherence. If the field is
// not set, the implementation will apply its default routing strategy. If set
// to "PreferClose", implementations should prioritize endpoints that are
// topologically close (e.g., same zone).
// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
func (o KibanaSpecHttpServiceSpecOutput) TrafficDistribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) *string { return v.TrafficDistribution }).(pulumi.StringPtrOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid
// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
// "ClusterIP" allocates a cluster-internal IP address for load-balancing
// to endpoints. Endpoints are determined by the selector or if that is not
// specified, by manual construction of an Endpoints object or
// EndpointSlice objects. If clusterIP is "None", no virtual IP is
// allocated and the endpoints are published as a set of endpoints rather
// than a virtual IP.
// "NodePort" builds on ClusterIP and allocates a port on every node which
// routes to the same endpoints as the clusterIP.
// "LoadBalancer" builds on NodePort and creates an external load-balancer
// (if supported in the current cloud) which routes to the same endpoints
// as the clusterIP.
// "ExternalName" aliases this service to the specified externalName.
// Several other fields do not apply to ExternalName services.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o KibanaSpecHttpServiceSpecOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpec) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type KibanaSpecHttpServiceSpecPtrOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpServiceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpServiceSpec)(nil)).Elem()
}

func (o KibanaSpecHttpServiceSpecPtrOutput) ToKibanaSpecHttpServiceSpecPtrOutput() KibanaSpecHttpServiceSpecPtrOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecPtrOutput) ToKibanaSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecPtrOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecPtrOutput) Elem() KibanaSpecHttpServiceSpecOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) KibanaSpecHttpServiceSpec {
		if v != nil {
			return *v
		}
		var ret KibanaSpecHttpServiceSpec
		return ret
	}).(KibanaSpecHttpServiceSpecOutput)
}

// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
// allocated for services with type LoadBalancer.  Default is "true". It
// may be set to "false" if the cluster load-balancer does not rely on
// NodePorts.  If the caller requests specific NodePorts (by specifying a
// value), those requests will be respected, regardless of this field.
// This field may only be set for services with type LoadBalancer and will
// be cleared if the type is changed to any other type.
func (o KibanaSpecHttpServiceSpecPtrOutput) AllocateLoadBalancerNodePorts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.AllocateLoadBalancerNodePorts
	}).(pulumi.BoolPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned
// randomly. If an address is specified manually, is in-range (as per
// system configuration), and is not in use, it will be allocated to the
// service; otherwise creation of the service will fail. This field may not
// be changed through updates unless the type field is also being changed
// to ExternalName (which requires this field to be blank) or the type
// field is being changed from ExternalName (in which case this field may
// optionally be specified, as describe above).  Valid values are "None",
// empty string (""), or a valid IP address. Setting this to "None" makes a
// "headless service" (no virtual IP), which is useful when direct endpoint
// connections are preferred and proxying is not required.  Only applies to
// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
// when creating a Service of type ExternalName, creation will fail. This
// field will be wiped when updating a Service to type ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o KibanaSpecHttpServiceSpecPtrOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ClusterIP
	}).(pulumi.StringPtrOutput)
}

// ClusterIPs is a list of IP addresses assigned to this service, and are
// usually assigned randomly.  If an address is specified manually, is
// in-range (as per system configuration), and is not in use, it will be
// allocated to the service; otherwise creation of the service will fail.
// This field may not be changed through updates unless the type field is
// also being changed to ExternalName (which requires this field to be
// empty) or the type field is being changed from ExternalName (in which
// case this field may optionally be specified, as describe above).  Valid
// values are "None", empty string (""), or a valid IP address.  Setting
// this to "None" makes a "headless service" (no virtual IP), which is
// useful when direct endpoint connections are preferred and proxying is
// not required.  Only applies to types ClusterIP, NodePort, and
// LoadBalancer. If this field is specified when creating a Service of type
// ExternalName, creation will fail. This field will be wiped when updating
// a Service to type ExternalName.  If this field is not specified, it will
// be initialized from the clusterIP field.  If this field is specified,
// clients must ensure that clusterIPs[0] and clusterIP have the same
// value.
//
// This field may hold a maximum of two entries (dual-stack IPs, in either order).
// These IPs must correspond to the values of the ipFamilies field. Both
// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o KibanaSpecHttpServiceSpecPtrOutput) ClusterIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.ClusterIPs
	}).(pulumi.StringArrayOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster
// will also accept traffic for this service.  These IPs are not managed by
// Kubernetes.  The user is responsible for ensuring that traffic arrives
// at a node with this IP.  A common example is external load-balancers
// that are not part of the Kubernetes system.
func (o KibanaSpecHttpServiceSpecPtrOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.ExternalIPs
	}).(pulumi.StringArrayOutput)
}

// externalName is the external reference that discovery mechanisms will
// return as an alias for this service (e.g. a DNS CNAME record). No
// proxying will be involved.  Must be a lowercase RFC-1123 hostname
// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
func (o KibanaSpecHttpServiceSpecPtrOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ExternalName
	}).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy describes how nodes distribute service traffic they
// receive on one of the Service's "externally-facing" addresses (NodePorts,
// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
// the service in a way that assumes that external load balancers will take care
// of balancing the service traffic between nodes, and so each node will deliver
// traffic only to the node-local endpoints of the service, without masquerading
// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
// be dropped.) The default value, "Cluster", uses the standard behavior of
// routing to all endpoints evenly (possibly modified by topology and other
// features). Note that traffic sent to an External IP or LoadBalancer IP from
// within the cluster will always get "Cluster" semantics, but clients sending to
// a NodePort from within the cluster may need to take traffic policy into account
// when picking a node.
func (o KibanaSpecHttpServiceSpecPtrOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ExternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service.
// This only applies when type is set to LoadBalancer and
// externalTrafficPolicy is set to Local. If a value is specified, is
// in-range, and is not in use, it will be used.  If not specified, a value
// will be automatically allocated.  External systems (e.g. load-balancers)
// can use this port to determine if a given node holds endpoints for this
// service or not.  If this field is specified when creating a Service
// which does not need it, creation will fail. This field will be wiped
// when updating a Service to no longer need it (e.g. changing type).
// This field cannot be updated once set.
func (o KibanaSpecHttpServiceSpecPtrOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) *int {
		if v == nil {
			return nil
		}
		return v.HealthCheckNodePort
	}).(pulumi.IntPtrOutput)
}

// InternalTrafficPolicy describes how nodes distribute service traffic they
// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
// only want to talk to endpoints of the service on the same node as the pod,
// dropping the traffic if there are no local endpoints. The default value,
// "Cluster", uses the standard behavior of routing to all endpoints evenly
// (possibly modified by topology and other features).
func (o KibanaSpecHttpServiceSpecPtrOutput) InternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.InternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
// service. This field is usually assigned automatically based on cluster
// configuration and the ipFamilyPolicy field. If this field is specified
// manually, the requested family is available in the cluster,
// and ipFamilyPolicy allows it, it will be used; otherwise creation of
// the service will fail. This field is conditionally mutable: it allows
// for adding or removing a secondary IP family, but it does not allow
// changing the primary IP family of the Service. Valid values are "IPv4"
// and "IPv6".  This field only applies to Services of types ClusterIP,
// NodePort, and LoadBalancer, and does apply to "headless" services.
// This field will be wiped when updating a Service to type ExternalName.
//
// This field may hold a maximum of two entries (dual-stack families, in
// either order).  These families must correspond to the values of the
// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
// governed by the ipFamilyPolicy field.
func (o KibanaSpecHttpServiceSpecPtrOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.IpFamilies
	}).(pulumi.StringArrayOutput)
}

// IPFamilyPolicy represents the dual-stack-ness requested or required by
// this Service. If there is no value provided, then this field will be set
// to SingleStack. Services can be "SingleStack" (a single IP family),
// "PreferDualStack" (two IP families on dual-stack configured clusters or
// a single IP family on single-stack clusters), or "RequireDualStack"
// (two IP families on dual-stack configured clusters, otherwise fail). The
// ipFamilies and clusterIPs fields depend on the value of this field. This
// field will be wiped when updating a service to type ExternalName.
func (o KibanaSpecHttpServiceSpecPtrOutput) IpFamilyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.IpFamilyPolicy
	}).(pulumi.StringPtrOutput)
}

// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
// If specified, the value of this field must be a label-style identifier, with an optional prefix,
// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
// balancer implementation is used, today this is typically done through the cloud provider integration,
// but should apply for any default implementation. If set, it is assumed that a load balancer
// implementation is watching for Services with a matching class. Any default load balancer
// implementation (e.g. cloud providers) should ignore Services that set this field.
// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
func (o KibanaSpecHttpServiceSpecPtrOutput) LoadBalancerClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerClass
	}).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer.
// This feature depends on whether the underlying cloud-provider supports specifying
// the loadBalancerIP when a load balancer is created.
// This field will be ignored if the cloud-provider does not support the feature.
// Deprecated: This field was under-specified and its meaning varies across implementations.
// Using it is non-portable and it may not support dual-stack.
// Users are encouraged to use implementation-specific annotations when available.
func (o KibanaSpecHttpServiceSpecPtrOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerIP
	}).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider
// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
// cloud-provider does not support the feature."
// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
func (o KibanaSpecHttpServiceSpecPtrOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSourceRanges
	}).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o KibanaSpecHttpServiceSpecPtrOutput) Ports() KibanaSpecHttpServiceSpecPortsArrayOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) []KibanaSpecHttpServiceSpecPorts {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(KibanaSpecHttpServiceSpecPortsArrayOutput)
}

// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
// Service should disregard any indications of ready/not-ready.
// The primary use case for setting this field is for a StatefulSet's Headless Service to
// propagate SRV DNS records for its Pods for the purpose of peer discovery.
// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
// Services interpret this to mean that all endpoints are considered "ready" even if the
// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
// through the Endpoints or EndpointSlice resources can safely assume this behavior.
func (o KibanaSpecHttpServiceSpecPtrOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.PublishNotReadyAddresses
	}).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this
// selector. If empty or not present, the service is assumed to have an
// external process managing its endpoints, which Kubernetes will not
// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
// Ignored if type is ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o KibanaSpecHttpServiceSpecPtrOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity.
// Enable client IP based session affinity.
// Must be ClientIP or None.
// Defaults to None.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o KibanaSpecHttpServiceSpecPtrOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.SessionAffinity
	}).(pulumi.StringPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
func (o KibanaSpecHttpServiceSpecPtrOutput) SessionAffinityConfig() KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) *KibanaSpecHttpServiceSpecSessionAffinityConfig {
		if v == nil {
			return nil
		}
		return v.SessionAffinityConfig
	}).(KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// TrafficDistribution offers a way to express preferences for how traffic is
// distributed to Service endpoints. Implementations can use this field as a
// hint, but are not required to guarantee strict adherence. If the field is
// not set, the implementation will apply its default routing strategy. If set
// to "PreferClose", implementations should prioritize endpoints that are
// topologically close (e.g., same zone).
// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
func (o KibanaSpecHttpServiceSpecPtrOutput) TrafficDistribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.TrafficDistribution
	}).(pulumi.StringPtrOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid
// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
// "ClusterIP" allocates a cluster-internal IP address for load-balancing
// to endpoints. Endpoints are determined by the selector or if that is not
// specified, by manual construction of an Endpoints object or
// EndpointSlice objects. If clusterIP is "None", no virtual IP is
// allocated and the endpoints are published as a set of endpoints rather
// than a virtual IP.
// "NodePort" builds on ClusterIP and allocates a port on every node which
// routes to the same endpoints as the clusterIP.
// "LoadBalancer" builds on NodePort and creates an external load-balancer
// (if supported in the current cloud) which routes to the same endpoints
// as the clusterIP.
// "ExternalName" aliases this service to the specified externalName.
// Several other fields do not apply to ExternalName services.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o KibanaSpecHttpServiceSpecPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// ServicePort contains information on service's port.
type KibanaSpecHttpServiceSpecPorts struct {
	// The application protocol for this port.
	// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
	// This field follows standard Kubernetes label syntax.
	// Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per
	// RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
	//   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
	//   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
	//
	// * Other protocols should use implementation-defined prefixed names such as
	// mycompany.com/my-custom-protocol.
	AppProtocol *string `pulumi:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL.
	// All ports within a ServiceSpec must have unique names. When considering
	// the endpoints for a Service, this must match the 'name' field in the
	// EndpointPort.
	// Optional if only one ServicePort is defined on this service.
	Name *string `pulumi:"name"`
	// The port on each node on which this service is exposed when type is
	// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
	// specified, in-range, and not in use it will be used, otherwise the
	// operation will fail.  If not specified, a port will be allocated if this
	// Service requires one.  If this field is specified when creating a
	// Service which does not need it, creation will fail. This field will be
	// wiped when updating a Service to no longer need it (e.g. changing type
	// from NodePort to ClusterIP).
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort *int `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port int `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
	// Default is TCP.
	Protocol *string `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service.
	// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	// If this is a string, it will be looked up as a named port in the
	// target Pod's container ports. If this is not specified, the value
	// of the 'port' field is used (an identity map).
	// This field is ignored for services with clusterIP=None, and should be
	// omitted or set equal to the 'port' field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort interface{} `pulumi:"targetPort"`
}

// Defaults sets the appropriate defaults for KibanaSpecHttpServiceSpecPorts
func (val *KibanaSpecHttpServiceSpecPorts) Defaults() *KibanaSpecHttpServiceSpecPorts {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		protocol_ := "TCP"
		tmp.Protocol = &protocol_
	}
	return &tmp
}

// KibanaSpecHttpServiceSpecPortsInput is an input type that accepts KibanaSpecHttpServiceSpecPortsArgs and KibanaSpecHttpServiceSpecPortsOutput values.
// You can construct a concrete instance of `KibanaSpecHttpServiceSpecPortsInput` via:
//
//	KibanaSpecHttpServiceSpecPortsArgs{...}
type KibanaSpecHttpServiceSpecPortsInput interface {
	pulumi.Input

	ToKibanaSpecHttpServiceSpecPortsOutput() KibanaSpecHttpServiceSpecPortsOutput
	ToKibanaSpecHttpServiceSpecPortsOutputWithContext(context.Context) KibanaSpecHttpServiceSpecPortsOutput
}

// ServicePort contains information on service's port.
type KibanaSpecHttpServiceSpecPortsArgs struct {
	// The application protocol for this port.
	// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
	// This field follows standard Kubernetes label syntax.
	// Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per
	// RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
	//   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
	//   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
	//
	// * Other protocols should use implementation-defined prefixed names such as
	// mycompany.com/my-custom-protocol.
	AppProtocol pulumi.StringPtrInput `pulumi:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL.
	// All ports within a ServiceSpec must have unique names. When considering
	// the endpoints for a Service, this must match the 'name' field in the
	// EndpointPort.
	// Optional if only one ServicePort is defined on this service.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port on each node on which this service is exposed when type is
	// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
	// specified, in-range, and not in use it will be used, otherwise the
	// operation will fail.  If not specified, a port will be allocated if this
	// Service requires one.  If this field is specified when creating a
	// Service which does not need it, creation will fail. This field will be
	// wiped when updating a Service to no longer need it (e.g. changing type
	// from NodePort to ClusterIP).
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort pulumi.IntPtrInput `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port pulumi.IntInput `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
	// Default is TCP.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service.
	// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	// If this is a string, it will be looked up as a named port in the
	// target Pod's container ports. If this is not specified, the value
	// of the 'port' field is used (an identity map).
	// This field is ignored for services with clusterIP=None, and should be
	// omitted or set equal to the 'port' field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort pulumi.Input `pulumi:"targetPort"`
}

// Defaults sets the appropriate defaults for KibanaSpecHttpServiceSpecPortsArgs
func (val *KibanaSpecHttpServiceSpecPortsArgs) Defaults() *KibanaSpecHttpServiceSpecPortsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		tmp.Protocol = pulumi.StringPtr("TCP")
	}
	return &tmp
}
func (KibanaSpecHttpServiceSpecPortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (i KibanaSpecHttpServiceSpecPortsArgs) ToKibanaSpecHttpServiceSpecPortsOutput() KibanaSpecHttpServiceSpecPortsOutput {
	return i.ToKibanaSpecHttpServiceSpecPortsOutputWithContext(context.Background())
}

func (i KibanaSpecHttpServiceSpecPortsArgs) ToKibanaSpecHttpServiceSpecPortsOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecPortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceSpecPortsOutput)
}

// KibanaSpecHttpServiceSpecPortsArrayInput is an input type that accepts KibanaSpecHttpServiceSpecPortsArray and KibanaSpecHttpServiceSpecPortsArrayOutput values.
// You can construct a concrete instance of `KibanaSpecHttpServiceSpecPortsArrayInput` via:
//
//	KibanaSpecHttpServiceSpecPortsArray{ KibanaSpecHttpServiceSpecPortsArgs{...} }
type KibanaSpecHttpServiceSpecPortsArrayInput interface {
	pulumi.Input

	ToKibanaSpecHttpServiceSpecPortsArrayOutput() KibanaSpecHttpServiceSpecPortsArrayOutput
	ToKibanaSpecHttpServiceSpecPortsArrayOutputWithContext(context.Context) KibanaSpecHttpServiceSpecPortsArrayOutput
}

type KibanaSpecHttpServiceSpecPortsArray []KibanaSpecHttpServiceSpecPortsInput

func (KibanaSpecHttpServiceSpecPortsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KibanaSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (i KibanaSpecHttpServiceSpecPortsArray) ToKibanaSpecHttpServiceSpecPortsArrayOutput() KibanaSpecHttpServiceSpecPortsArrayOutput {
	return i.ToKibanaSpecHttpServiceSpecPortsArrayOutputWithContext(context.Background())
}

func (i KibanaSpecHttpServiceSpecPortsArray) ToKibanaSpecHttpServiceSpecPortsArrayOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecPortsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceSpecPortsArrayOutput)
}

// ServicePort contains information on service's port.
type KibanaSpecHttpServiceSpecPortsOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpServiceSpecPortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (o KibanaSpecHttpServiceSpecPortsOutput) ToKibanaSpecHttpServiceSpecPortsOutput() KibanaSpecHttpServiceSpecPortsOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecPortsOutput) ToKibanaSpecHttpServiceSpecPortsOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecPortsOutput {
	return o
}

// The application protocol for this port.
// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
// This field follows standard Kubernetes label syntax.
// Valid values are either:
//
// * Un-prefixed protocol names - reserved for IANA standard service names (as per
// RFC-6335 and https://www.iana.org/assignments/service-names).
//
// * Kubernetes-defined prefixed names:
//   - 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
//   - 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
//   - 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
//
// * Other protocols should use implementation-defined prefixed names such as
// mycompany.com/my-custom-protocol.
func (o KibanaSpecHttpServiceSpecPortsOutput) AppProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpecPorts) *string { return v.AppProtocol }).(pulumi.StringPtrOutput)
}

// The name of this port within the service. This must be a DNS_LABEL.
// All ports within a ServiceSpec must have unique names. When considering
// the endpoints for a Service, this must match the 'name' field in the
// EndpointPort.
// Optional if only one ServicePort is defined on this service.
func (o KibanaSpecHttpServiceSpecPortsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpecPorts) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port on each node on which this service is exposed when type is
// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
// specified, in-range, and not in use it will be used, otherwise the
// operation will fail.  If not specified, a port will be allocated if this
// Service requires one.  If this field is specified when creating a
// Service which does not need it, creation will fail. This field will be
// wiped when updating a Service to no longer need it (e.g. changing type
// from NodePort to ClusterIP).
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
func (o KibanaSpecHttpServiceSpecPortsOutput) NodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpecPorts) *int { return v.NodePort }).(pulumi.IntPtrOutput)
}

// The port that will be exposed by this service.
func (o KibanaSpecHttpServiceSpecPortsOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpecPorts) int { return v.Port }).(pulumi.IntOutput)
}

// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
// Default is TCP.
func (o KibanaSpecHttpServiceSpecPortsOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpecPorts) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the pods targeted by the service.
// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
// If this is a string, it will be looked up as a named port in the
// target Pod's container ports. If this is not specified, the value
// of the 'port' field is used (an identity map).
// This field is ignored for services with clusterIP=None, and should be
// omitted or set equal to the 'port' field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
func (o KibanaSpecHttpServiceSpecPortsOutput) TargetPort() pulumi.AnyOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpecPorts) interface{} { return v.TargetPort }).(pulumi.AnyOutput)
}

type KibanaSpecHttpServiceSpecPortsArrayOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpServiceSpecPortsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KibanaSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (o KibanaSpecHttpServiceSpecPortsArrayOutput) ToKibanaSpecHttpServiceSpecPortsArrayOutput() KibanaSpecHttpServiceSpecPortsArrayOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecPortsArrayOutput) ToKibanaSpecHttpServiceSpecPortsArrayOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecPortsArrayOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecPortsArrayOutput) Index(i pulumi.IntInput) KibanaSpecHttpServiceSpecPortsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KibanaSpecHttpServiceSpecPorts {
		return vs[0].([]KibanaSpecHttpServiceSpecPorts)[vs[1].(int)]
	}).(KibanaSpecHttpServiceSpecPortsOutput)
}

// Route service traffic to pods with label keys and values matching this
// selector. If empty or not present, the service is assumed to have an
// external process managing its endpoints, which Kubernetes will not
// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
// Ignored if type is ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
type KibanaSpecHttpServiceSpecSelector struct {
}

// sessionAffinityConfig contains the configurations of session affinity.
type KibanaSpecHttpServiceSpecSessionAffinityConfig struct {
	// clientIP contains the configurations of Client IP based session affinity.
	ClientIP *KibanaSpecHttpServiceSpecSessionAffinityConfigClientIp `pulumi:"clientIP"`
}

// KibanaSpecHttpServiceSpecSessionAffinityConfigInput is an input type that accepts KibanaSpecHttpServiceSpecSessionAffinityConfigArgs and KibanaSpecHttpServiceSpecSessionAffinityConfigOutput values.
// You can construct a concrete instance of `KibanaSpecHttpServiceSpecSessionAffinityConfigInput` via:
//
//	KibanaSpecHttpServiceSpecSessionAffinityConfigArgs{...}
type KibanaSpecHttpServiceSpecSessionAffinityConfigInput interface {
	pulumi.Input

	ToKibanaSpecHttpServiceSpecSessionAffinityConfigOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigOutput
	ToKibanaSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigOutput
}

// sessionAffinityConfig contains the configurations of session affinity.
type KibanaSpecHttpServiceSpecSessionAffinityConfigArgs struct {
	// clientIP contains the configurations of Client IP based session affinity.
	ClientIP KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrInput `pulumi:"clientIP"`
}

func (KibanaSpecHttpServiceSpecSessionAffinityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (i KibanaSpecHttpServiceSpecSessionAffinityConfigArgs) ToKibanaSpecHttpServiceSpecSessionAffinityConfigOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigOutput {
	return i.ToKibanaSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(context.Background())
}

func (i KibanaSpecHttpServiceSpecSessionAffinityConfigArgs) ToKibanaSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceSpecSessionAffinityConfigOutput)
}

func (i KibanaSpecHttpServiceSpecSessionAffinityConfigArgs) ToKibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return i.ToKibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (i KibanaSpecHttpServiceSpecSessionAffinityConfigArgs) ToKibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceSpecSessionAffinityConfigOutput).ToKibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx)
}

// KibanaSpecHttpServiceSpecSessionAffinityConfigPtrInput is an input type that accepts KibanaSpecHttpServiceSpecSessionAffinityConfigArgs, KibanaSpecHttpServiceSpecSessionAffinityConfigPtr and KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput values.
// You can construct a concrete instance of `KibanaSpecHttpServiceSpecSessionAffinityConfigPtrInput` via:
//
//	        KibanaSpecHttpServiceSpecSessionAffinityConfigArgs{...}
//
//	or:
//
//	        nil
type KibanaSpecHttpServiceSpecSessionAffinityConfigPtrInput interface {
	pulumi.Input

	ToKibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput
	ToKibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput
}

type kibanaSpecHttpServiceSpecSessionAffinityConfigPtrType KibanaSpecHttpServiceSpecSessionAffinityConfigArgs

func KibanaSpecHttpServiceSpecSessionAffinityConfigPtr(v *KibanaSpecHttpServiceSpecSessionAffinityConfigArgs) KibanaSpecHttpServiceSpecSessionAffinityConfigPtrInput {
	return (*kibanaSpecHttpServiceSpecSessionAffinityConfigPtrType)(v)
}

func (*kibanaSpecHttpServiceSpecSessionAffinityConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (i *kibanaSpecHttpServiceSpecSessionAffinityConfigPtrType) ToKibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return i.ToKibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (i *kibanaSpecHttpServiceSpecSessionAffinityConfigPtrType) ToKibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
type KibanaSpecHttpServiceSpecSessionAffinityConfigOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpServiceSpecSessionAffinityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (o KibanaSpecHttpServiceSpecSessionAffinityConfigOutput) ToKibanaSpecHttpServiceSpecSessionAffinityConfigOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecSessionAffinityConfigOutput) ToKibanaSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecSessionAffinityConfigOutput) ToKibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ToKibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (o KibanaSpecHttpServiceSpecSessionAffinityConfigOutput) ToKibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KibanaSpecHttpServiceSpecSessionAffinityConfig) *KibanaSpecHttpServiceSpecSessionAffinityConfig {
		return &v
	}).(KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
func (o KibanaSpecHttpServiceSpecSessionAffinityConfigOutput) ClientIP() KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpecSessionAffinityConfig) *KibanaSpecHttpServiceSpecSessionAffinityConfigClientIp {
		return v.ClientIP
	}).(KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput)
}

type KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (o KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ToKibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ToKibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput) Elem() KibanaSpecHttpServiceSpecSessionAffinityConfigOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpecSessionAffinityConfig) KibanaSpecHttpServiceSpecSessionAffinityConfig {
		if v != nil {
			return *v
		}
		var ret KibanaSpecHttpServiceSpecSessionAffinityConfig
		return ret
	}).(KibanaSpecHttpServiceSpecSessionAffinityConfigOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
func (o KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ClientIP() KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpecSessionAffinityConfig) *KibanaSpecHttpServiceSpecSessionAffinityConfigClientIp {
		if v == nil {
			return nil
		}
		return v.ClientIP
	}).(KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
type KibanaSpecHttpServiceSpecSessionAffinityConfigClientIp struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
	// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
	// Default value is 10800(for 3 hours).
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpInput is an input type that accepts KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpArgs and KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpOutput values.
// You can construct a concrete instance of `KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpInput` via:
//
//	KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpArgs{...}
type KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpInput interface {
	pulumi.Input

	ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIpOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpOutput
	ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIpOutputWithContext(context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpOutput
}

// clientIP contains the configurations of Client IP based session affinity.
type KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpArgs struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
	// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
	// Default value is 10800(for 3 hours).
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpServiceSpecSessionAffinityConfigClientIp)(nil)).Elem()
}

func (i KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpArgs) ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIpOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpOutput {
	return i.ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIpOutputWithContext(context.Background())
}

func (i KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpArgs) ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIpOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpOutput)
}

func (i KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpArgs) ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return i.ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(context.Background())
}

func (i KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpArgs) ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpOutput).ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(ctx)
}

// KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrInput is an input type that accepts KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpArgs, KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtr and KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput values.
// You can construct a concrete instance of `KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrInput` via:
//
//	        KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpArgs{...}
//
//	or:
//
//	        nil
type KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrInput interface {
	pulumi.Input

	ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput
	ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput
}

type kibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrType KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpArgs

func KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtr(v *KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpArgs) KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrInput {
	return (*kibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrType)(v)
}

func (*kibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpServiceSpecSessionAffinityConfigClientIp)(nil)).Elem()
}

func (i *kibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrType) ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return i.ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(context.Background())
}

func (i *kibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrType) ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
type KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpServiceSpecSessionAffinityConfigClientIp)(nil)).Elem()
}

func (o KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpOutput) ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIpOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpOutput) ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIpOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpOutput) ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o.ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(context.Background())
}

func (o KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpOutput) ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KibanaSpecHttpServiceSpecSessionAffinityConfigClientIp) *KibanaSpecHttpServiceSpecSessionAffinityConfigClientIp {
		return &v
	}).(KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
// Default value is 10800(for 3 hours).
func (o KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpServiceSpecSessionAffinityConfigClientIp) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpServiceSpecSessionAffinityConfigClientIp)(nil)).Elem()
}

func (o KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput) ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput() KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput) ToKibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(ctx context.Context) KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o
}

func (o KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput) Elem() KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpecSessionAffinityConfigClientIp) KibanaSpecHttpServiceSpecSessionAffinityConfigClientIp {
		if v != nil {
			return *v
		}
		var ret KibanaSpecHttpServiceSpecSessionAffinityConfigClientIp
		return ret
	}).(KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
// Default value is 10800(for 3 hours).
func (o KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpServiceSpecSessionAffinityConfigClientIp) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
type KibanaSpecHttpTls struct {
	// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
	// The referenced secret should contain the following:
	//
	// - `ca.crt`: The certificate authority (optional).
	// - `tls.crt`: The certificate (or a chain).
	// - `tls.key`: The private key to the first certificate in the certificate chain.
	Certificate *KibanaSpecHttpTlsCertificate `pulumi:"certificate"`
	// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
	SelfSignedCertificate *KibanaSpecHttpTlsSelfSignedCertificate `pulumi:"selfSignedCertificate"`
}

// KibanaSpecHttpTlsInput is an input type that accepts KibanaSpecHttpTlsArgs and KibanaSpecHttpTlsOutput values.
// You can construct a concrete instance of `KibanaSpecHttpTlsInput` via:
//
//	KibanaSpecHttpTlsArgs{...}
type KibanaSpecHttpTlsInput interface {
	pulumi.Input

	ToKibanaSpecHttpTlsOutput() KibanaSpecHttpTlsOutput
	ToKibanaSpecHttpTlsOutputWithContext(context.Context) KibanaSpecHttpTlsOutput
}

// TLS defines options for configuring TLS for HTTP.
type KibanaSpecHttpTlsArgs struct {
	// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
	// The referenced secret should contain the following:
	//
	// - `ca.crt`: The certificate authority (optional).
	// - `tls.crt`: The certificate (or a chain).
	// - `tls.key`: The private key to the first certificate in the certificate chain.
	Certificate KibanaSpecHttpTlsCertificatePtrInput `pulumi:"certificate"`
	// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
	SelfSignedCertificate KibanaSpecHttpTlsSelfSignedCertificatePtrInput `pulumi:"selfSignedCertificate"`
}

func (KibanaSpecHttpTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpTls)(nil)).Elem()
}

func (i KibanaSpecHttpTlsArgs) ToKibanaSpecHttpTlsOutput() KibanaSpecHttpTlsOutput {
	return i.ToKibanaSpecHttpTlsOutputWithContext(context.Background())
}

func (i KibanaSpecHttpTlsArgs) ToKibanaSpecHttpTlsOutputWithContext(ctx context.Context) KibanaSpecHttpTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpTlsOutput)
}

func (i KibanaSpecHttpTlsArgs) ToKibanaSpecHttpTlsPtrOutput() KibanaSpecHttpTlsPtrOutput {
	return i.ToKibanaSpecHttpTlsPtrOutputWithContext(context.Background())
}

func (i KibanaSpecHttpTlsArgs) ToKibanaSpecHttpTlsPtrOutputWithContext(ctx context.Context) KibanaSpecHttpTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpTlsOutput).ToKibanaSpecHttpTlsPtrOutputWithContext(ctx)
}

// KibanaSpecHttpTlsPtrInput is an input type that accepts KibanaSpecHttpTlsArgs, KibanaSpecHttpTlsPtr and KibanaSpecHttpTlsPtrOutput values.
// You can construct a concrete instance of `KibanaSpecHttpTlsPtrInput` via:
//
//	        KibanaSpecHttpTlsArgs{...}
//
//	or:
//
//	        nil
type KibanaSpecHttpTlsPtrInput interface {
	pulumi.Input

	ToKibanaSpecHttpTlsPtrOutput() KibanaSpecHttpTlsPtrOutput
	ToKibanaSpecHttpTlsPtrOutputWithContext(context.Context) KibanaSpecHttpTlsPtrOutput
}

type kibanaSpecHttpTlsPtrType KibanaSpecHttpTlsArgs

func KibanaSpecHttpTlsPtr(v *KibanaSpecHttpTlsArgs) KibanaSpecHttpTlsPtrInput {
	return (*kibanaSpecHttpTlsPtrType)(v)
}

func (*kibanaSpecHttpTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpTls)(nil)).Elem()
}

func (i *kibanaSpecHttpTlsPtrType) ToKibanaSpecHttpTlsPtrOutput() KibanaSpecHttpTlsPtrOutput {
	return i.ToKibanaSpecHttpTlsPtrOutputWithContext(context.Background())
}

func (i *kibanaSpecHttpTlsPtrType) ToKibanaSpecHttpTlsPtrOutputWithContext(ctx context.Context) KibanaSpecHttpTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpTlsPtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
type KibanaSpecHttpTlsOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpTls)(nil)).Elem()
}

func (o KibanaSpecHttpTlsOutput) ToKibanaSpecHttpTlsOutput() KibanaSpecHttpTlsOutput {
	return o
}

func (o KibanaSpecHttpTlsOutput) ToKibanaSpecHttpTlsOutputWithContext(ctx context.Context) KibanaSpecHttpTlsOutput {
	return o
}

func (o KibanaSpecHttpTlsOutput) ToKibanaSpecHttpTlsPtrOutput() KibanaSpecHttpTlsPtrOutput {
	return o.ToKibanaSpecHttpTlsPtrOutputWithContext(context.Background())
}

func (o KibanaSpecHttpTlsOutput) ToKibanaSpecHttpTlsPtrOutputWithContext(ctx context.Context) KibanaSpecHttpTlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KibanaSpecHttpTls) *KibanaSpecHttpTls {
		return &v
	}).(KibanaSpecHttpTlsPtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
func (o KibanaSpecHttpTlsOutput) Certificate() KibanaSpecHttpTlsCertificatePtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpTls) *KibanaSpecHttpTlsCertificate { return v.Certificate }).(KibanaSpecHttpTlsCertificatePtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
func (o KibanaSpecHttpTlsOutput) SelfSignedCertificate() KibanaSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpTls) *KibanaSpecHttpTlsSelfSignedCertificate { return v.SelfSignedCertificate }).(KibanaSpecHttpTlsSelfSignedCertificatePtrOutput)
}

type KibanaSpecHttpTlsPtrOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpTls)(nil)).Elem()
}

func (o KibanaSpecHttpTlsPtrOutput) ToKibanaSpecHttpTlsPtrOutput() KibanaSpecHttpTlsPtrOutput {
	return o
}

func (o KibanaSpecHttpTlsPtrOutput) ToKibanaSpecHttpTlsPtrOutputWithContext(ctx context.Context) KibanaSpecHttpTlsPtrOutput {
	return o
}

func (o KibanaSpecHttpTlsPtrOutput) Elem() KibanaSpecHttpTlsOutput {
	return o.ApplyT(func(v *KibanaSpecHttpTls) KibanaSpecHttpTls {
		if v != nil {
			return *v
		}
		var ret KibanaSpecHttpTls
		return ret
	}).(KibanaSpecHttpTlsOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
func (o KibanaSpecHttpTlsPtrOutput) Certificate() KibanaSpecHttpTlsCertificatePtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpTls) *KibanaSpecHttpTlsCertificate {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(KibanaSpecHttpTlsCertificatePtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
func (o KibanaSpecHttpTlsPtrOutput) SelfSignedCertificate() KibanaSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpTls) *KibanaSpecHttpTlsSelfSignedCertificate {
		if v == nil {
			return nil
		}
		return v.SelfSignedCertificate
	}).(KibanaSpecHttpTlsSelfSignedCertificatePtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
type KibanaSpecHttpTlsCertificate struct {
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// KibanaSpecHttpTlsCertificateInput is an input type that accepts KibanaSpecHttpTlsCertificateArgs and KibanaSpecHttpTlsCertificateOutput values.
// You can construct a concrete instance of `KibanaSpecHttpTlsCertificateInput` via:
//
//	KibanaSpecHttpTlsCertificateArgs{...}
type KibanaSpecHttpTlsCertificateInput interface {
	pulumi.Input

	ToKibanaSpecHttpTlsCertificateOutput() KibanaSpecHttpTlsCertificateOutput
	ToKibanaSpecHttpTlsCertificateOutputWithContext(context.Context) KibanaSpecHttpTlsCertificateOutput
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
type KibanaSpecHttpTlsCertificateArgs struct {
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (KibanaSpecHttpTlsCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpTlsCertificate)(nil)).Elem()
}

func (i KibanaSpecHttpTlsCertificateArgs) ToKibanaSpecHttpTlsCertificateOutput() KibanaSpecHttpTlsCertificateOutput {
	return i.ToKibanaSpecHttpTlsCertificateOutputWithContext(context.Background())
}

func (i KibanaSpecHttpTlsCertificateArgs) ToKibanaSpecHttpTlsCertificateOutputWithContext(ctx context.Context) KibanaSpecHttpTlsCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpTlsCertificateOutput)
}

func (i KibanaSpecHttpTlsCertificateArgs) ToKibanaSpecHttpTlsCertificatePtrOutput() KibanaSpecHttpTlsCertificatePtrOutput {
	return i.ToKibanaSpecHttpTlsCertificatePtrOutputWithContext(context.Background())
}

func (i KibanaSpecHttpTlsCertificateArgs) ToKibanaSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) KibanaSpecHttpTlsCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpTlsCertificateOutput).ToKibanaSpecHttpTlsCertificatePtrOutputWithContext(ctx)
}

// KibanaSpecHttpTlsCertificatePtrInput is an input type that accepts KibanaSpecHttpTlsCertificateArgs, KibanaSpecHttpTlsCertificatePtr and KibanaSpecHttpTlsCertificatePtrOutput values.
// You can construct a concrete instance of `KibanaSpecHttpTlsCertificatePtrInput` via:
//
//	        KibanaSpecHttpTlsCertificateArgs{...}
//
//	or:
//
//	        nil
type KibanaSpecHttpTlsCertificatePtrInput interface {
	pulumi.Input

	ToKibanaSpecHttpTlsCertificatePtrOutput() KibanaSpecHttpTlsCertificatePtrOutput
	ToKibanaSpecHttpTlsCertificatePtrOutputWithContext(context.Context) KibanaSpecHttpTlsCertificatePtrOutput
}

type kibanaSpecHttpTlsCertificatePtrType KibanaSpecHttpTlsCertificateArgs

func KibanaSpecHttpTlsCertificatePtr(v *KibanaSpecHttpTlsCertificateArgs) KibanaSpecHttpTlsCertificatePtrInput {
	return (*kibanaSpecHttpTlsCertificatePtrType)(v)
}

func (*kibanaSpecHttpTlsCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpTlsCertificate)(nil)).Elem()
}

func (i *kibanaSpecHttpTlsCertificatePtrType) ToKibanaSpecHttpTlsCertificatePtrOutput() KibanaSpecHttpTlsCertificatePtrOutput {
	return i.ToKibanaSpecHttpTlsCertificatePtrOutputWithContext(context.Background())
}

func (i *kibanaSpecHttpTlsCertificatePtrType) ToKibanaSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) KibanaSpecHttpTlsCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpTlsCertificatePtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
type KibanaSpecHttpTlsCertificateOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpTlsCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpTlsCertificate)(nil)).Elem()
}

func (o KibanaSpecHttpTlsCertificateOutput) ToKibanaSpecHttpTlsCertificateOutput() KibanaSpecHttpTlsCertificateOutput {
	return o
}

func (o KibanaSpecHttpTlsCertificateOutput) ToKibanaSpecHttpTlsCertificateOutputWithContext(ctx context.Context) KibanaSpecHttpTlsCertificateOutput {
	return o
}

func (o KibanaSpecHttpTlsCertificateOutput) ToKibanaSpecHttpTlsCertificatePtrOutput() KibanaSpecHttpTlsCertificatePtrOutput {
	return o.ToKibanaSpecHttpTlsCertificatePtrOutputWithContext(context.Background())
}

func (o KibanaSpecHttpTlsCertificateOutput) ToKibanaSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) KibanaSpecHttpTlsCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KibanaSpecHttpTlsCertificate) *KibanaSpecHttpTlsCertificate {
		return &v
	}).(KibanaSpecHttpTlsCertificatePtrOutput)
}

// SecretName is the name of the secret.
func (o KibanaSpecHttpTlsCertificateOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpTlsCertificate) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type KibanaSpecHttpTlsCertificatePtrOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpTlsCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpTlsCertificate)(nil)).Elem()
}

func (o KibanaSpecHttpTlsCertificatePtrOutput) ToKibanaSpecHttpTlsCertificatePtrOutput() KibanaSpecHttpTlsCertificatePtrOutput {
	return o
}

func (o KibanaSpecHttpTlsCertificatePtrOutput) ToKibanaSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) KibanaSpecHttpTlsCertificatePtrOutput {
	return o
}

func (o KibanaSpecHttpTlsCertificatePtrOutput) Elem() KibanaSpecHttpTlsCertificateOutput {
	return o.ApplyT(func(v *KibanaSpecHttpTlsCertificate) KibanaSpecHttpTlsCertificate {
		if v != nil {
			return *v
		}
		var ret KibanaSpecHttpTlsCertificate
		return ret
	}).(KibanaSpecHttpTlsCertificateOutput)
}

// SecretName is the name of the secret.
func (o KibanaSpecHttpTlsCertificatePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpTlsCertificate) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type KibanaSpecHttpTlsSelfSignedCertificate struct {
	// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
	Disabled *bool `pulumi:"disabled"`
	// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
	SubjectAltNames []KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames `pulumi:"subjectAltNames"`
}

// KibanaSpecHttpTlsSelfSignedCertificateInput is an input type that accepts KibanaSpecHttpTlsSelfSignedCertificateArgs and KibanaSpecHttpTlsSelfSignedCertificateOutput values.
// You can construct a concrete instance of `KibanaSpecHttpTlsSelfSignedCertificateInput` via:
//
//	KibanaSpecHttpTlsSelfSignedCertificateArgs{...}
type KibanaSpecHttpTlsSelfSignedCertificateInput interface {
	pulumi.Input

	ToKibanaSpecHttpTlsSelfSignedCertificateOutput() KibanaSpecHttpTlsSelfSignedCertificateOutput
	ToKibanaSpecHttpTlsSelfSignedCertificateOutputWithContext(context.Context) KibanaSpecHttpTlsSelfSignedCertificateOutput
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type KibanaSpecHttpTlsSelfSignedCertificateArgs struct {
	// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
	SubjectAltNames KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput `pulumi:"subjectAltNames"`
}

func (KibanaSpecHttpTlsSelfSignedCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (i KibanaSpecHttpTlsSelfSignedCertificateArgs) ToKibanaSpecHttpTlsSelfSignedCertificateOutput() KibanaSpecHttpTlsSelfSignedCertificateOutput {
	return i.ToKibanaSpecHttpTlsSelfSignedCertificateOutputWithContext(context.Background())
}

func (i KibanaSpecHttpTlsSelfSignedCertificateArgs) ToKibanaSpecHttpTlsSelfSignedCertificateOutputWithContext(ctx context.Context) KibanaSpecHttpTlsSelfSignedCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpTlsSelfSignedCertificateOutput)
}

func (i KibanaSpecHttpTlsSelfSignedCertificateArgs) ToKibanaSpecHttpTlsSelfSignedCertificatePtrOutput() KibanaSpecHttpTlsSelfSignedCertificatePtrOutput {
	return i.ToKibanaSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Background())
}

func (i KibanaSpecHttpTlsSelfSignedCertificateArgs) ToKibanaSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) KibanaSpecHttpTlsSelfSignedCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpTlsSelfSignedCertificateOutput).ToKibanaSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx)
}

// KibanaSpecHttpTlsSelfSignedCertificatePtrInput is an input type that accepts KibanaSpecHttpTlsSelfSignedCertificateArgs, KibanaSpecHttpTlsSelfSignedCertificatePtr and KibanaSpecHttpTlsSelfSignedCertificatePtrOutput values.
// You can construct a concrete instance of `KibanaSpecHttpTlsSelfSignedCertificatePtrInput` via:
//
//	        KibanaSpecHttpTlsSelfSignedCertificateArgs{...}
//
//	or:
//
//	        nil
type KibanaSpecHttpTlsSelfSignedCertificatePtrInput interface {
	pulumi.Input

	ToKibanaSpecHttpTlsSelfSignedCertificatePtrOutput() KibanaSpecHttpTlsSelfSignedCertificatePtrOutput
	ToKibanaSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Context) KibanaSpecHttpTlsSelfSignedCertificatePtrOutput
}

type kibanaSpecHttpTlsSelfSignedCertificatePtrType KibanaSpecHttpTlsSelfSignedCertificateArgs

func KibanaSpecHttpTlsSelfSignedCertificatePtr(v *KibanaSpecHttpTlsSelfSignedCertificateArgs) KibanaSpecHttpTlsSelfSignedCertificatePtrInput {
	return (*kibanaSpecHttpTlsSelfSignedCertificatePtrType)(v)
}

func (*kibanaSpecHttpTlsSelfSignedCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (i *kibanaSpecHttpTlsSelfSignedCertificatePtrType) ToKibanaSpecHttpTlsSelfSignedCertificatePtrOutput() KibanaSpecHttpTlsSelfSignedCertificatePtrOutput {
	return i.ToKibanaSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Background())
}

func (i *kibanaSpecHttpTlsSelfSignedCertificatePtrType) ToKibanaSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) KibanaSpecHttpTlsSelfSignedCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpTlsSelfSignedCertificatePtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type KibanaSpecHttpTlsSelfSignedCertificateOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpTlsSelfSignedCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (o KibanaSpecHttpTlsSelfSignedCertificateOutput) ToKibanaSpecHttpTlsSelfSignedCertificateOutput() KibanaSpecHttpTlsSelfSignedCertificateOutput {
	return o
}

func (o KibanaSpecHttpTlsSelfSignedCertificateOutput) ToKibanaSpecHttpTlsSelfSignedCertificateOutputWithContext(ctx context.Context) KibanaSpecHttpTlsSelfSignedCertificateOutput {
	return o
}

func (o KibanaSpecHttpTlsSelfSignedCertificateOutput) ToKibanaSpecHttpTlsSelfSignedCertificatePtrOutput() KibanaSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ToKibanaSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Background())
}

func (o KibanaSpecHttpTlsSelfSignedCertificateOutput) ToKibanaSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) KibanaSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KibanaSpecHttpTlsSelfSignedCertificate) *KibanaSpecHttpTlsSelfSignedCertificate {
		return &v
	}).(KibanaSpecHttpTlsSelfSignedCertificatePtrOutput)
}

// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
func (o KibanaSpecHttpTlsSelfSignedCertificateOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpTlsSelfSignedCertificate) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
func (o KibanaSpecHttpTlsSelfSignedCertificateOutput) SubjectAltNames() KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o.ApplyT(func(v KibanaSpecHttpTlsSelfSignedCertificate) []KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames {
		return v.SubjectAltNames
	}).(KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput)
}

type KibanaSpecHttpTlsSelfSignedCertificatePtrOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpTlsSelfSignedCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (o KibanaSpecHttpTlsSelfSignedCertificatePtrOutput) ToKibanaSpecHttpTlsSelfSignedCertificatePtrOutput() KibanaSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o
}

func (o KibanaSpecHttpTlsSelfSignedCertificatePtrOutput) ToKibanaSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) KibanaSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o
}

func (o KibanaSpecHttpTlsSelfSignedCertificatePtrOutput) Elem() KibanaSpecHttpTlsSelfSignedCertificateOutput {
	return o.ApplyT(func(v *KibanaSpecHttpTlsSelfSignedCertificate) KibanaSpecHttpTlsSelfSignedCertificate {
		if v != nil {
			return *v
		}
		var ret KibanaSpecHttpTlsSelfSignedCertificate
		return ret
	}).(KibanaSpecHttpTlsSelfSignedCertificateOutput)
}

// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
func (o KibanaSpecHttpTlsSelfSignedCertificatePtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KibanaSpecHttpTlsSelfSignedCertificate) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
func (o KibanaSpecHttpTlsSelfSignedCertificatePtrOutput) SubjectAltNames() KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o.ApplyT(func(v *KibanaSpecHttpTlsSelfSignedCertificate) []KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput)
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames struct {
	// DNS is the DNS name of the subject.
	Dns *string `pulumi:"dns"`
	// IP is the IP address of the subject.
	Ip *string `pulumi:"ip"`
}

// KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput is an input type that accepts KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs and KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput values.
// You can construct a concrete instance of `KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput` via:
//
//	KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs{...}
type KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput interface {
	pulumi.Input

	ToKibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput() KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput
	ToKibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(context.Context) KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs struct {
	// DNS is the DNS name of the subject.
	Dns pulumi.StringPtrInput `pulumi:"dns"`
	// IP is the IP address of the subject.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
}

func (KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (i KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs) ToKibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput() KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return i.ToKibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(context.Background())
}

func (i KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs) ToKibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(ctx context.Context) KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput)
}

// KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput is an input type that accepts KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray and KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput values.
// You can construct a concrete instance of `KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput` via:
//
//	KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray{ KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs{...} }
type KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput interface {
	pulumi.Input

	ToKibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput() KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput
	ToKibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(context.Context) KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput
}

type KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray []KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput

func (KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (i KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray) ToKibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput() KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return i.ToKibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(context.Background())
}

func (i KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray) ToKibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(ctx context.Context) KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput)
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (o KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) ToKibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput() KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return o
}

func (o KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) ToKibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(ctx context.Context) KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return o
}

// DNS is the DNS name of the subject.
func (o KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) Dns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames) *string { return v.Dns }).(pulumi.StringPtrOutput)
}

// IP is the IP address of the subject.
func (o KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput struct{ *pulumi.OutputState }

func (KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (o KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) ToKibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput() KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o
}

func (o KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) ToKibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(ctx context.Context) KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o
}

func (o KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) Index(i pulumi.IntInput) KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames {
		return vs[0].([]KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNames)[vs[1].(int)]
	}).(KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput)
}

// Monitoring enables you to collect and ship log and monitoring data of this Kibana.
// See https://www.elastic.co/guide/en/kibana/current/xpack-monitoring.html.
// Metricbeat and Filebeat are deployed in the same Pod as sidecars and each one sends data to one or two different
// Elasticsearch monitoring clusters running in the same Kubernetes cluster.
type KibanaSpecMonitoring struct {
	// Logs holds references to Elasticsearch clusters which receive log data from an associated resource.
	Logs *KibanaSpecMonitoringLogs `pulumi:"logs"`
	// Metrics holds references to Elasticsearch clusters which receive monitoring data from this resource.
	Metrics *KibanaSpecMonitoringMetrics `pulumi:"metrics"`
}

// KibanaSpecMonitoringInput is an input type that accepts KibanaSpecMonitoringArgs and KibanaSpecMonitoringOutput values.
// You can construct a concrete instance of `KibanaSpecMonitoringInput` via:
//
//	KibanaSpecMonitoringArgs{...}
type KibanaSpecMonitoringInput interface {
	pulumi.Input

	ToKibanaSpecMonitoringOutput() KibanaSpecMonitoringOutput
	ToKibanaSpecMonitoringOutputWithContext(context.Context) KibanaSpecMonitoringOutput
}

// Monitoring enables you to collect and ship log and monitoring data of this Kibana.
// See https://www.elastic.co/guide/en/kibana/current/xpack-monitoring.html.
// Metricbeat and Filebeat are deployed in the same Pod as sidecars and each one sends data to one or two different
// Elasticsearch monitoring clusters running in the same Kubernetes cluster.
type KibanaSpecMonitoringArgs struct {
	// Logs holds references to Elasticsearch clusters which receive log data from an associated resource.
	Logs KibanaSpecMonitoringLogsPtrInput `pulumi:"logs"`
	// Metrics holds references to Elasticsearch clusters which receive monitoring data from this resource.
	Metrics KibanaSpecMonitoringMetricsPtrInput `pulumi:"metrics"`
}

func (KibanaSpecMonitoringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecMonitoring)(nil)).Elem()
}

func (i KibanaSpecMonitoringArgs) ToKibanaSpecMonitoringOutput() KibanaSpecMonitoringOutput {
	return i.ToKibanaSpecMonitoringOutputWithContext(context.Background())
}

func (i KibanaSpecMonitoringArgs) ToKibanaSpecMonitoringOutputWithContext(ctx context.Context) KibanaSpecMonitoringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecMonitoringOutput)
}

func (i KibanaSpecMonitoringArgs) ToKibanaSpecMonitoringPtrOutput() KibanaSpecMonitoringPtrOutput {
	return i.ToKibanaSpecMonitoringPtrOutputWithContext(context.Background())
}

func (i KibanaSpecMonitoringArgs) ToKibanaSpecMonitoringPtrOutputWithContext(ctx context.Context) KibanaSpecMonitoringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecMonitoringOutput).ToKibanaSpecMonitoringPtrOutputWithContext(ctx)
}

// KibanaSpecMonitoringPtrInput is an input type that accepts KibanaSpecMonitoringArgs, KibanaSpecMonitoringPtr and KibanaSpecMonitoringPtrOutput values.
// You can construct a concrete instance of `KibanaSpecMonitoringPtrInput` via:
//
//	        KibanaSpecMonitoringArgs{...}
//
//	or:
//
//	        nil
type KibanaSpecMonitoringPtrInput interface {
	pulumi.Input

	ToKibanaSpecMonitoringPtrOutput() KibanaSpecMonitoringPtrOutput
	ToKibanaSpecMonitoringPtrOutputWithContext(context.Context) KibanaSpecMonitoringPtrOutput
}

type kibanaSpecMonitoringPtrType KibanaSpecMonitoringArgs

func KibanaSpecMonitoringPtr(v *KibanaSpecMonitoringArgs) KibanaSpecMonitoringPtrInput {
	return (*kibanaSpecMonitoringPtrType)(v)
}

func (*kibanaSpecMonitoringPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecMonitoring)(nil)).Elem()
}

func (i *kibanaSpecMonitoringPtrType) ToKibanaSpecMonitoringPtrOutput() KibanaSpecMonitoringPtrOutput {
	return i.ToKibanaSpecMonitoringPtrOutputWithContext(context.Background())
}

func (i *kibanaSpecMonitoringPtrType) ToKibanaSpecMonitoringPtrOutputWithContext(ctx context.Context) KibanaSpecMonitoringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecMonitoringPtrOutput)
}

// Monitoring enables you to collect and ship log and monitoring data of this Kibana.
// See https://www.elastic.co/guide/en/kibana/current/xpack-monitoring.html.
// Metricbeat and Filebeat are deployed in the same Pod as sidecars and each one sends data to one or two different
// Elasticsearch monitoring clusters running in the same Kubernetes cluster.
type KibanaSpecMonitoringOutput struct{ *pulumi.OutputState }

func (KibanaSpecMonitoringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecMonitoring)(nil)).Elem()
}

func (o KibanaSpecMonitoringOutput) ToKibanaSpecMonitoringOutput() KibanaSpecMonitoringOutput {
	return o
}

func (o KibanaSpecMonitoringOutput) ToKibanaSpecMonitoringOutputWithContext(ctx context.Context) KibanaSpecMonitoringOutput {
	return o
}

func (o KibanaSpecMonitoringOutput) ToKibanaSpecMonitoringPtrOutput() KibanaSpecMonitoringPtrOutput {
	return o.ToKibanaSpecMonitoringPtrOutputWithContext(context.Background())
}

func (o KibanaSpecMonitoringOutput) ToKibanaSpecMonitoringPtrOutputWithContext(ctx context.Context) KibanaSpecMonitoringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KibanaSpecMonitoring) *KibanaSpecMonitoring {
		return &v
	}).(KibanaSpecMonitoringPtrOutput)
}

// Logs holds references to Elasticsearch clusters which receive log data from an associated resource.
func (o KibanaSpecMonitoringOutput) Logs() KibanaSpecMonitoringLogsPtrOutput {
	return o.ApplyT(func(v KibanaSpecMonitoring) *KibanaSpecMonitoringLogs { return v.Logs }).(KibanaSpecMonitoringLogsPtrOutput)
}

// Metrics holds references to Elasticsearch clusters which receive monitoring data from this resource.
func (o KibanaSpecMonitoringOutput) Metrics() KibanaSpecMonitoringMetricsPtrOutput {
	return o.ApplyT(func(v KibanaSpecMonitoring) *KibanaSpecMonitoringMetrics { return v.Metrics }).(KibanaSpecMonitoringMetricsPtrOutput)
}

type KibanaSpecMonitoringPtrOutput struct{ *pulumi.OutputState }

func (KibanaSpecMonitoringPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecMonitoring)(nil)).Elem()
}

func (o KibanaSpecMonitoringPtrOutput) ToKibanaSpecMonitoringPtrOutput() KibanaSpecMonitoringPtrOutput {
	return o
}

func (o KibanaSpecMonitoringPtrOutput) ToKibanaSpecMonitoringPtrOutputWithContext(ctx context.Context) KibanaSpecMonitoringPtrOutput {
	return o
}

func (o KibanaSpecMonitoringPtrOutput) Elem() KibanaSpecMonitoringOutput {
	return o.ApplyT(func(v *KibanaSpecMonitoring) KibanaSpecMonitoring {
		if v != nil {
			return *v
		}
		var ret KibanaSpecMonitoring
		return ret
	}).(KibanaSpecMonitoringOutput)
}

// Logs holds references to Elasticsearch clusters which receive log data from an associated resource.
func (o KibanaSpecMonitoringPtrOutput) Logs() KibanaSpecMonitoringLogsPtrOutput {
	return o.ApplyT(func(v *KibanaSpecMonitoring) *KibanaSpecMonitoringLogs {
		if v == nil {
			return nil
		}
		return v.Logs
	}).(KibanaSpecMonitoringLogsPtrOutput)
}

// Metrics holds references to Elasticsearch clusters which receive monitoring data from this resource.
func (o KibanaSpecMonitoringPtrOutput) Metrics() KibanaSpecMonitoringMetricsPtrOutput {
	return o.ApplyT(func(v *KibanaSpecMonitoring) *KibanaSpecMonitoringMetrics {
		if v == nil {
			return nil
		}
		return v.Metrics
	}).(KibanaSpecMonitoringMetricsPtrOutput)
}

// Logs holds references to Elasticsearch clusters which receive log data from an associated resource.
type KibanaSpecMonitoringLogs struct {
	// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
	// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
	ElasticsearchRefs []KibanaSpecMonitoringLogsElasticsearchRefs `pulumi:"elasticsearchRefs"`
}

// KibanaSpecMonitoringLogsInput is an input type that accepts KibanaSpecMonitoringLogsArgs and KibanaSpecMonitoringLogsOutput values.
// You can construct a concrete instance of `KibanaSpecMonitoringLogsInput` via:
//
//	KibanaSpecMonitoringLogsArgs{...}
type KibanaSpecMonitoringLogsInput interface {
	pulumi.Input

	ToKibanaSpecMonitoringLogsOutput() KibanaSpecMonitoringLogsOutput
	ToKibanaSpecMonitoringLogsOutputWithContext(context.Context) KibanaSpecMonitoringLogsOutput
}

// Logs holds references to Elasticsearch clusters which receive log data from an associated resource.
type KibanaSpecMonitoringLogsArgs struct {
	// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
	// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
	ElasticsearchRefs KibanaSpecMonitoringLogsElasticsearchRefsArrayInput `pulumi:"elasticsearchRefs"`
}

func (KibanaSpecMonitoringLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecMonitoringLogs)(nil)).Elem()
}

func (i KibanaSpecMonitoringLogsArgs) ToKibanaSpecMonitoringLogsOutput() KibanaSpecMonitoringLogsOutput {
	return i.ToKibanaSpecMonitoringLogsOutputWithContext(context.Background())
}

func (i KibanaSpecMonitoringLogsArgs) ToKibanaSpecMonitoringLogsOutputWithContext(ctx context.Context) KibanaSpecMonitoringLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecMonitoringLogsOutput)
}

func (i KibanaSpecMonitoringLogsArgs) ToKibanaSpecMonitoringLogsPtrOutput() KibanaSpecMonitoringLogsPtrOutput {
	return i.ToKibanaSpecMonitoringLogsPtrOutputWithContext(context.Background())
}

func (i KibanaSpecMonitoringLogsArgs) ToKibanaSpecMonitoringLogsPtrOutputWithContext(ctx context.Context) KibanaSpecMonitoringLogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecMonitoringLogsOutput).ToKibanaSpecMonitoringLogsPtrOutputWithContext(ctx)
}

// KibanaSpecMonitoringLogsPtrInput is an input type that accepts KibanaSpecMonitoringLogsArgs, KibanaSpecMonitoringLogsPtr and KibanaSpecMonitoringLogsPtrOutput values.
// You can construct a concrete instance of `KibanaSpecMonitoringLogsPtrInput` via:
//
//	        KibanaSpecMonitoringLogsArgs{...}
//
//	or:
//
//	        nil
type KibanaSpecMonitoringLogsPtrInput interface {
	pulumi.Input

	ToKibanaSpecMonitoringLogsPtrOutput() KibanaSpecMonitoringLogsPtrOutput
	ToKibanaSpecMonitoringLogsPtrOutputWithContext(context.Context) KibanaSpecMonitoringLogsPtrOutput
}

type kibanaSpecMonitoringLogsPtrType KibanaSpecMonitoringLogsArgs

func KibanaSpecMonitoringLogsPtr(v *KibanaSpecMonitoringLogsArgs) KibanaSpecMonitoringLogsPtrInput {
	return (*kibanaSpecMonitoringLogsPtrType)(v)
}

func (*kibanaSpecMonitoringLogsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecMonitoringLogs)(nil)).Elem()
}

func (i *kibanaSpecMonitoringLogsPtrType) ToKibanaSpecMonitoringLogsPtrOutput() KibanaSpecMonitoringLogsPtrOutput {
	return i.ToKibanaSpecMonitoringLogsPtrOutputWithContext(context.Background())
}

func (i *kibanaSpecMonitoringLogsPtrType) ToKibanaSpecMonitoringLogsPtrOutputWithContext(ctx context.Context) KibanaSpecMonitoringLogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecMonitoringLogsPtrOutput)
}

// Logs holds references to Elasticsearch clusters which receive log data from an associated resource.
type KibanaSpecMonitoringLogsOutput struct{ *pulumi.OutputState }

func (KibanaSpecMonitoringLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecMonitoringLogs)(nil)).Elem()
}

func (o KibanaSpecMonitoringLogsOutput) ToKibanaSpecMonitoringLogsOutput() KibanaSpecMonitoringLogsOutput {
	return o
}

func (o KibanaSpecMonitoringLogsOutput) ToKibanaSpecMonitoringLogsOutputWithContext(ctx context.Context) KibanaSpecMonitoringLogsOutput {
	return o
}

func (o KibanaSpecMonitoringLogsOutput) ToKibanaSpecMonitoringLogsPtrOutput() KibanaSpecMonitoringLogsPtrOutput {
	return o.ToKibanaSpecMonitoringLogsPtrOutputWithContext(context.Background())
}

func (o KibanaSpecMonitoringLogsOutput) ToKibanaSpecMonitoringLogsPtrOutputWithContext(ctx context.Context) KibanaSpecMonitoringLogsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KibanaSpecMonitoringLogs) *KibanaSpecMonitoringLogs {
		return &v
	}).(KibanaSpecMonitoringLogsPtrOutput)
}

// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
func (o KibanaSpecMonitoringLogsOutput) ElasticsearchRefs() KibanaSpecMonitoringLogsElasticsearchRefsArrayOutput {
	return o.ApplyT(func(v KibanaSpecMonitoringLogs) []KibanaSpecMonitoringLogsElasticsearchRefs {
		return v.ElasticsearchRefs
	}).(KibanaSpecMonitoringLogsElasticsearchRefsArrayOutput)
}

type KibanaSpecMonitoringLogsPtrOutput struct{ *pulumi.OutputState }

func (KibanaSpecMonitoringLogsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecMonitoringLogs)(nil)).Elem()
}

func (o KibanaSpecMonitoringLogsPtrOutput) ToKibanaSpecMonitoringLogsPtrOutput() KibanaSpecMonitoringLogsPtrOutput {
	return o
}

func (o KibanaSpecMonitoringLogsPtrOutput) ToKibanaSpecMonitoringLogsPtrOutputWithContext(ctx context.Context) KibanaSpecMonitoringLogsPtrOutput {
	return o
}

func (o KibanaSpecMonitoringLogsPtrOutput) Elem() KibanaSpecMonitoringLogsOutput {
	return o.ApplyT(func(v *KibanaSpecMonitoringLogs) KibanaSpecMonitoringLogs {
		if v != nil {
			return *v
		}
		var ret KibanaSpecMonitoringLogs
		return ret
	}).(KibanaSpecMonitoringLogsOutput)
}

// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
func (o KibanaSpecMonitoringLogsPtrOutput) ElasticsearchRefs() KibanaSpecMonitoringLogsElasticsearchRefsArrayOutput {
	return o.ApplyT(func(v *KibanaSpecMonitoringLogs) []KibanaSpecMonitoringLogsElasticsearchRefs {
		if v == nil {
			return nil
		}
		return v.ElasticsearchRefs
	}).(KibanaSpecMonitoringLogsElasticsearchRefsArrayOutput)
}

// ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator
// or a Secret describing an external Elastic resource not managed by the operator.
type KibanaSpecMonitoringLogsElasticsearchRefs struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name *string `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace *string `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName *string `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName *string `pulumi:"serviceName"`
}

// KibanaSpecMonitoringLogsElasticsearchRefsInput is an input type that accepts KibanaSpecMonitoringLogsElasticsearchRefsArgs and KibanaSpecMonitoringLogsElasticsearchRefsOutput values.
// You can construct a concrete instance of `KibanaSpecMonitoringLogsElasticsearchRefsInput` via:
//
//	KibanaSpecMonitoringLogsElasticsearchRefsArgs{...}
type KibanaSpecMonitoringLogsElasticsearchRefsInput interface {
	pulumi.Input

	ToKibanaSpecMonitoringLogsElasticsearchRefsOutput() KibanaSpecMonitoringLogsElasticsearchRefsOutput
	ToKibanaSpecMonitoringLogsElasticsearchRefsOutputWithContext(context.Context) KibanaSpecMonitoringLogsElasticsearchRefsOutput
}

// ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator
// or a Secret describing an external Elastic resource not managed by the operator.
type KibanaSpecMonitoringLogsElasticsearchRefsArgs struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
}

func (KibanaSpecMonitoringLogsElasticsearchRefsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecMonitoringLogsElasticsearchRefs)(nil)).Elem()
}

func (i KibanaSpecMonitoringLogsElasticsearchRefsArgs) ToKibanaSpecMonitoringLogsElasticsearchRefsOutput() KibanaSpecMonitoringLogsElasticsearchRefsOutput {
	return i.ToKibanaSpecMonitoringLogsElasticsearchRefsOutputWithContext(context.Background())
}

func (i KibanaSpecMonitoringLogsElasticsearchRefsArgs) ToKibanaSpecMonitoringLogsElasticsearchRefsOutputWithContext(ctx context.Context) KibanaSpecMonitoringLogsElasticsearchRefsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecMonitoringLogsElasticsearchRefsOutput)
}

// KibanaSpecMonitoringLogsElasticsearchRefsArrayInput is an input type that accepts KibanaSpecMonitoringLogsElasticsearchRefsArray and KibanaSpecMonitoringLogsElasticsearchRefsArrayOutput values.
// You can construct a concrete instance of `KibanaSpecMonitoringLogsElasticsearchRefsArrayInput` via:
//
//	KibanaSpecMonitoringLogsElasticsearchRefsArray{ KibanaSpecMonitoringLogsElasticsearchRefsArgs{...} }
type KibanaSpecMonitoringLogsElasticsearchRefsArrayInput interface {
	pulumi.Input

	ToKibanaSpecMonitoringLogsElasticsearchRefsArrayOutput() KibanaSpecMonitoringLogsElasticsearchRefsArrayOutput
	ToKibanaSpecMonitoringLogsElasticsearchRefsArrayOutputWithContext(context.Context) KibanaSpecMonitoringLogsElasticsearchRefsArrayOutput
}

type KibanaSpecMonitoringLogsElasticsearchRefsArray []KibanaSpecMonitoringLogsElasticsearchRefsInput

func (KibanaSpecMonitoringLogsElasticsearchRefsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KibanaSpecMonitoringLogsElasticsearchRefs)(nil)).Elem()
}

func (i KibanaSpecMonitoringLogsElasticsearchRefsArray) ToKibanaSpecMonitoringLogsElasticsearchRefsArrayOutput() KibanaSpecMonitoringLogsElasticsearchRefsArrayOutput {
	return i.ToKibanaSpecMonitoringLogsElasticsearchRefsArrayOutputWithContext(context.Background())
}

func (i KibanaSpecMonitoringLogsElasticsearchRefsArray) ToKibanaSpecMonitoringLogsElasticsearchRefsArrayOutputWithContext(ctx context.Context) KibanaSpecMonitoringLogsElasticsearchRefsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecMonitoringLogsElasticsearchRefsArrayOutput)
}

// ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator
// or a Secret describing an external Elastic resource not managed by the operator.
type KibanaSpecMonitoringLogsElasticsearchRefsOutput struct{ *pulumi.OutputState }

func (KibanaSpecMonitoringLogsElasticsearchRefsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecMonitoringLogsElasticsearchRefs)(nil)).Elem()
}

func (o KibanaSpecMonitoringLogsElasticsearchRefsOutput) ToKibanaSpecMonitoringLogsElasticsearchRefsOutput() KibanaSpecMonitoringLogsElasticsearchRefsOutput {
	return o
}

func (o KibanaSpecMonitoringLogsElasticsearchRefsOutput) ToKibanaSpecMonitoringLogsElasticsearchRefsOutputWithContext(ctx context.Context) KibanaSpecMonitoringLogsElasticsearchRefsOutput {
	return o
}

// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
func (o KibanaSpecMonitoringLogsElasticsearchRefsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecMonitoringLogsElasticsearchRefs) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o KibanaSpecMonitoringLogsElasticsearchRefsOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecMonitoringLogsElasticsearchRefs) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
// Elastic resource not managed by the operator. The referenced secret must contain the following:
//   - `url`: the URL to reach the Elastic resource
//   - `username`: the username of the user to be authenticated to the Elastic resource
//   - `password`: the password of the user to be authenticated to the Elastic resource
//   - `ca.crt`: the CA certificate in PEM format (optional)
//   - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
//     This field cannot be used in combination with the other fields name, namespace or serviceName.
func (o KibanaSpecMonitoringLogsElasticsearchRefsOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecMonitoringLogsElasticsearchRefs) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
// the referenced resource is used.
func (o KibanaSpecMonitoringLogsElasticsearchRefsOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecMonitoringLogsElasticsearchRefs) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

type KibanaSpecMonitoringLogsElasticsearchRefsArrayOutput struct{ *pulumi.OutputState }

func (KibanaSpecMonitoringLogsElasticsearchRefsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KibanaSpecMonitoringLogsElasticsearchRefs)(nil)).Elem()
}

func (o KibanaSpecMonitoringLogsElasticsearchRefsArrayOutput) ToKibanaSpecMonitoringLogsElasticsearchRefsArrayOutput() KibanaSpecMonitoringLogsElasticsearchRefsArrayOutput {
	return o
}

func (o KibanaSpecMonitoringLogsElasticsearchRefsArrayOutput) ToKibanaSpecMonitoringLogsElasticsearchRefsArrayOutputWithContext(ctx context.Context) KibanaSpecMonitoringLogsElasticsearchRefsArrayOutput {
	return o
}

func (o KibanaSpecMonitoringLogsElasticsearchRefsArrayOutput) Index(i pulumi.IntInput) KibanaSpecMonitoringLogsElasticsearchRefsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KibanaSpecMonitoringLogsElasticsearchRefs {
		return vs[0].([]KibanaSpecMonitoringLogsElasticsearchRefs)[vs[1].(int)]
	}).(KibanaSpecMonitoringLogsElasticsearchRefsOutput)
}

// Metrics holds references to Elasticsearch clusters which receive monitoring data from this resource.
type KibanaSpecMonitoringMetrics struct {
	// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
	// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
	ElasticsearchRefs []KibanaSpecMonitoringMetricsElasticsearchRefs `pulumi:"elasticsearchRefs"`
}

// KibanaSpecMonitoringMetricsInput is an input type that accepts KibanaSpecMonitoringMetricsArgs and KibanaSpecMonitoringMetricsOutput values.
// You can construct a concrete instance of `KibanaSpecMonitoringMetricsInput` via:
//
//	KibanaSpecMonitoringMetricsArgs{...}
type KibanaSpecMonitoringMetricsInput interface {
	pulumi.Input

	ToKibanaSpecMonitoringMetricsOutput() KibanaSpecMonitoringMetricsOutput
	ToKibanaSpecMonitoringMetricsOutputWithContext(context.Context) KibanaSpecMonitoringMetricsOutput
}

// Metrics holds references to Elasticsearch clusters which receive monitoring data from this resource.
type KibanaSpecMonitoringMetricsArgs struct {
	// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
	// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
	ElasticsearchRefs KibanaSpecMonitoringMetricsElasticsearchRefsArrayInput `pulumi:"elasticsearchRefs"`
}

func (KibanaSpecMonitoringMetricsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecMonitoringMetrics)(nil)).Elem()
}

func (i KibanaSpecMonitoringMetricsArgs) ToKibanaSpecMonitoringMetricsOutput() KibanaSpecMonitoringMetricsOutput {
	return i.ToKibanaSpecMonitoringMetricsOutputWithContext(context.Background())
}

func (i KibanaSpecMonitoringMetricsArgs) ToKibanaSpecMonitoringMetricsOutputWithContext(ctx context.Context) KibanaSpecMonitoringMetricsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecMonitoringMetricsOutput)
}

func (i KibanaSpecMonitoringMetricsArgs) ToKibanaSpecMonitoringMetricsPtrOutput() KibanaSpecMonitoringMetricsPtrOutput {
	return i.ToKibanaSpecMonitoringMetricsPtrOutputWithContext(context.Background())
}

func (i KibanaSpecMonitoringMetricsArgs) ToKibanaSpecMonitoringMetricsPtrOutputWithContext(ctx context.Context) KibanaSpecMonitoringMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecMonitoringMetricsOutput).ToKibanaSpecMonitoringMetricsPtrOutputWithContext(ctx)
}

// KibanaSpecMonitoringMetricsPtrInput is an input type that accepts KibanaSpecMonitoringMetricsArgs, KibanaSpecMonitoringMetricsPtr and KibanaSpecMonitoringMetricsPtrOutput values.
// You can construct a concrete instance of `KibanaSpecMonitoringMetricsPtrInput` via:
//
//	        KibanaSpecMonitoringMetricsArgs{...}
//
//	or:
//
//	        nil
type KibanaSpecMonitoringMetricsPtrInput interface {
	pulumi.Input

	ToKibanaSpecMonitoringMetricsPtrOutput() KibanaSpecMonitoringMetricsPtrOutput
	ToKibanaSpecMonitoringMetricsPtrOutputWithContext(context.Context) KibanaSpecMonitoringMetricsPtrOutput
}

type kibanaSpecMonitoringMetricsPtrType KibanaSpecMonitoringMetricsArgs

func KibanaSpecMonitoringMetricsPtr(v *KibanaSpecMonitoringMetricsArgs) KibanaSpecMonitoringMetricsPtrInput {
	return (*kibanaSpecMonitoringMetricsPtrType)(v)
}

func (*kibanaSpecMonitoringMetricsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecMonitoringMetrics)(nil)).Elem()
}

func (i *kibanaSpecMonitoringMetricsPtrType) ToKibanaSpecMonitoringMetricsPtrOutput() KibanaSpecMonitoringMetricsPtrOutput {
	return i.ToKibanaSpecMonitoringMetricsPtrOutputWithContext(context.Background())
}

func (i *kibanaSpecMonitoringMetricsPtrType) ToKibanaSpecMonitoringMetricsPtrOutputWithContext(ctx context.Context) KibanaSpecMonitoringMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecMonitoringMetricsPtrOutput)
}

// Metrics holds references to Elasticsearch clusters which receive monitoring data from this resource.
type KibanaSpecMonitoringMetricsOutput struct{ *pulumi.OutputState }

func (KibanaSpecMonitoringMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecMonitoringMetrics)(nil)).Elem()
}

func (o KibanaSpecMonitoringMetricsOutput) ToKibanaSpecMonitoringMetricsOutput() KibanaSpecMonitoringMetricsOutput {
	return o
}

func (o KibanaSpecMonitoringMetricsOutput) ToKibanaSpecMonitoringMetricsOutputWithContext(ctx context.Context) KibanaSpecMonitoringMetricsOutput {
	return o
}

func (o KibanaSpecMonitoringMetricsOutput) ToKibanaSpecMonitoringMetricsPtrOutput() KibanaSpecMonitoringMetricsPtrOutput {
	return o.ToKibanaSpecMonitoringMetricsPtrOutputWithContext(context.Background())
}

func (o KibanaSpecMonitoringMetricsOutput) ToKibanaSpecMonitoringMetricsPtrOutputWithContext(ctx context.Context) KibanaSpecMonitoringMetricsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KibanaSpecMonitoringMetrics) *KibanaSpecMonitoringMetrics {
		return &v
	}).(KibanaSpecMonitoringMetricsPtrOutput)
}

// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
func (o KibanaSpecMonitoringMetricsOutput) ElasticsearchRefs() KibanaSpecMonitoringMetricsElasticsearchRefsArrayOutput {
	return o.ApplyT(func(v KibanaSpecMonitoringMetrics) []KibanaSpecMonitoringMetricsElasticsearchRefs {
		return v.ElasticsearchRefs
	}).(KibanaSpecMonitoringMetricsElasticsearchRefsArrayOutput)
}

type KibanaSpecMonitoringMetricsPtrOutput struct{ *pulumi.OutputState }

func (KibanaSpecMonitoringMetricsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaSpecMonitoringMetrics)(nil)).Elem()
}

func (o KibanaSpecMonitoringMetricsPtrOutput) ToKibanaSpecMonitoringMetricsPtrOutput() KibanaSpecMonitoringMetricsPtrOutput {
	return o
}

func (o KibanaSpecMonitoringMetricsPtrOutput) ToKibanaSpecMonitoringMetricsPtrOutputWithContext(ctx context.Context) KibanaSpecMonitoringMetricsPtrOutput {
	return o
}

func (o KibanaSpecMonitoringMetricsPtrOutput) Elem() KibanaSpecMonitoringMetricsOutput {
	return o.ApplyT(func(v *KibanaSpecMonitoringMetrics) KibanaSpecMonitoringMetrics {
		if v != nil {
			return *v
		}
		var ret KibanaSpecMonitoringMetrics
		return ret
	}).(KibanaSpecMonitoringMetricsOutput)
}

// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
func (o KibanaSpecMonitoringMetricsPtrOutput) ElasticsearchRefs() KibanaSpecMonitoringMetricsElasticsearchRefsArrayOutput {
	return o.ApplyT(func(v *KibanaSpecMonitoringMetrics) []KibanaSpecMonitoringMetricsElasticsearchRefs {
		if v == nil {
			return nil
		}
		return v.ElasticsearchRefs
	}).(KibanaSpecMonitoringMetricsElasticsearchRefsArrayOutput)
}

// ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator
// or a Secret describing an external Elastic resource not managed by the operator.
type KibanaSpecMonitoringMetricsElasticsearchRefs struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name *string `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace *string `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName *string `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName *string `pulumi:"serviceName"`
}

// KibanaSpecMonitoringMetricsElasticsearchRefsInput is an input type that accepts KibanaSpecMonitoringMetricsElasticsearchRefsArgs and KibanaSpecMonitoringMetricsElasticsearchRefsOutput values.
// You can construct a concrete instance of `KibanaSpecMonitoringMetricsElasticsearchRefsInput` via:
//
//	KibanaSpecMonitoringMetricsElasticsearchRefsArgs{...}
type KibanaSpecMonitoringMetricsElasticsearchRefsInput interface {
	pulumi.Input

	ToKibanaSpecMonitoringMetricsElasticsearchRefsOutput() KibanaSpecMonitoringMetricsElasticsearchRefsOutput
	ToKibanaSpecMonitoringMetricsElasticsearchRefsOutputWithContext(context.Context) KibanaSpecMonitoringMetricsElasticsearchRefsOutput
}

// ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator
// or a Secret describing an external Elastic resource not managed by the operator.
type KibanaSpecMonitoringMetricsElasticsearchRefsArgs struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
}

func (KibanaSpecMonitoringMetricsElasticsearchRefsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecMonitoringMetricsElasticsearchRefs)(nil)).Elem()
}

func (i KibanaSpecMonitoringMetricsElasticsearchRefsArgs) ToKibanaSpecMonitoringMetricsElasticsearchRefsOutput() KibanaSpecMonitoringMetricsElasticsearchRefsOutput {
	return i.ToKibanaSpecMonitoringMetricsElasticsearchRefsOutputWithContext(context.Background())
}

func (i KibanaSpecMonitoringMetricsElasticsearchRefsArgs) ToKibanaSpecMonitoringMetricsElasticsearchRefsOutputWithContext(ctx context.Context) KibanaSpecMonitoringMetricsElasticsearchRefsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecMonitoringMetricsElasticsearchRefsOutput)
}

// KibanaSpecMonitoringMetricsElasticsearchRefsArrayInput is an input type that accepts KibanaSpecMonitoringMetricsElasticsearchRefsArray and KibanaSpecMonitoringMetricsElasticsearchRefsArrayOutput values.
// You can construct a concrete instance of `KibanaSpecMonitoringMetricsElasticsearchRefsArrayInput` via:
//
//	KibanaSpecMonitoringMetricsElasticsearchRefsArray{ KibanaSpecMonitoringMetricsElasticsearchRefsArgs{...} }
type KibanaSpecMonitoringMetricsElasticsearchRefsArrayInput interface {
	pulumi.Input

	ToKibanaSpecMonitoringMetricsElasticsearchRefsArrayOutput() KibanaSpecMonitoringMetricsElasticsearchRefsArrayOutput
	ToKibanaSpecMonitoringMetricsElasticsearchRefsArrayOutputWithContext(context.Context) KibanaSpecMonitoringMetricsElasticsearchRefsArrayOutput
}

type KibanaSpecMonitoringMetricsElasticsearchRefsArray []KibanaSpecMonitoringMetricsElasticsearchRefsInput

func (KibanaSpecMonitoringMetricsElasticsearchRefsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KibanaSpecMonitoringMetricsElasticsearchRefs)(nil)).Elem()
}

func (i KibanaSpecMonitoringMetricsElasticsearchRefsArray) ToKibanaSpecMonitoringMetricsElasticsearchRefsArrayOutput() KibanaSpecMonitoringMetricsElasticsearchRefsArrayOutput {
	return i.ToKibanaSpecMonitoringMetricsElasticsearchRefsArrayOutputWithContext(context.Background())
}

func (i KibanaSpecMonitoringMetricsElasticsearchRefsArray) ToKibanaSpecMonitoringMetricsElasticsearchRefsArrayOutputWithContext(ctx context.Context) KibanaSpecMonitoringMetricsElasticsearchRefsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecMonitoringMetricsElasticsearchRefsArrayOutput)
}

// ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator
// or a Secret describing an external Elastic resource not managed by the operator.
type KibanaSpecMonitoringMetricsElasticsearchRefsOutput struct{ *pulumi.OutputState }

func (KibanaSpecMonitoringMetricsElasticsearchRefsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecMonitoringMetricsElasticsearchRefs)(nil)).Elem()
}

func (o KibanaSpecMonitoringMetricsElasticsearchRefsOutput) ToKibanaSpecMonitoringMetricsElasticsearchRefsOutput() KibanaSpecMonitoringMetricsElasticsearchRefsOutput {
	return o
}

func (o KibanaSpecMonitoringMetricsElasticsearchRefsOutput) ToKibanaSpecMonitoringMetricsElasticsearchRefsOutputWithContext(ctx context.Context) KibanaSpecMonitoringMetricsElasticsearchRefsOutput {
	return o
}

// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
func (o KibanaSpecMonitoringMetricsElasticsearchRefsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecMonitoringMetricsElasticsearchRefs) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o KibanaSpecMonitoringMetricsElasticsearchRefsOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecMonitoringMetricsElasticsearchRefs) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
// Elastic resource not managed by the operator. The referenced secret must contain the following:
//   - `url`: the URL to reach the Elastic resource
//   - `username`: the username of the user to be authenticated to the Elastic resource
//   - `password`: the password of the user to be authenticated to the Elastic resource
//   - `ca.crt`: the CA certificate in PEM format (optional)
//   - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
//     This field cannot be used in combination with the other fields name, namespace or serviceName.
func (o KibanaSpecMonitoringMetricsElasticsearchRefsOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecMonitoringMetricsElasticsearchRefs) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
// the referenced resource is used.
func (o KibanaSpecMonitoringMetricsElasticsearchRefsOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecMonitoringMetricsElasticsearchRefs) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

type KibanaSpecMonitoringMetricsElasticsearchRefsArrayOutput struct{ *pulumi.OutputState }

func (KibanaSpecMonitoringMetricsElasticsearchRefsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KibanaSpecMonitoringMetricsElasticsearchRefs)(nil)).Elem()
}

func (o KibanaSpecMonitoringMetricsElasticsearchRefsArrayOutput) ToKibanaSpecMonitoringMetricsElasticsearchRefsArrayOutput() KibanaSpecMonitoringMetricsElasticsearchRefsArrayOutput {
	return o
}

func (o KibanaSpecMonitoringMetricsElasticsearchRefsArrayOutput) ToKibanaSpecMonitoringMetricsElasticsearchRefsArrayOutputWithContext(ctx context.Context) KibanaSpecMonitoringMetricsElasticsearchRefsArrayOutput {
	return o
}

func (o KibanaSpecMonitoringMetricsElasticsearchRefsArrayOutput) Index(i pulumi.IntInput) KibanaSpecMonitoringMetricsElasticsearchRefsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KibanaSpecMonitoringMetricsElasticsearchRefs {
		return vs[0].([]KibanaSpecMonitoringMetricsElasticsearchRefs)[vs[1].(int)]
	}).(KibanaSpecMonitoringMetricsElasticsearchRefsOutput)
}

// SecretSource defines a data source based on a Kubernetes Secret.
type KibanaSpecSecureSettings struct {
	// Entries define how to project each key-value pair in the secret to filesystem paths.
	// If not defined, all keys will be projected to similarly named paths in the filesystem.
	// If defined, only the specified keys will be projected to the corresponding paths.
	Entries []KibanaSpecSecureSettingsEntries `pulumi:"entries"`
	// SecretName is the name of the secret.
	SecretName string `pulumi:"secretName"`
}

// KibanaSpecSecureSettingsInput is an input type that accepts KibanaSpecSecureSettingsArgs and KibanaSpecSecureSettingsOutput values.
// You can construct a concrete instance of `KibanaSpecSecureSettingsInput` via:
//
//	KibanaSpecSecureSettingsArgs{...}
type KibanaSpecSecureSettingsInput interface {
	pulumi.Input

	ToKibanaSpecSecureSettingsOutput() KibanaSpecSecureSettingsOutput
	ToKibanaSpecSecureSettingsOutputWithContext(context.Context) KibanaSpecSecureSettingsOutput
}

// SecretSource defines a data source based on a Kubernetes Secret.
type KibanaSpecSecureSettingsArgs struct {
	// Entries define how to project each key-value pair in the secret to filesystem paths.
	// If not defined, all keys will be projected to similarly named paths in the filesystem.
	// If defined, only the specified keys will be projected to the corresponding paths.
	Entries KibanaSpecSecureSettingsEntriesArrayInput `pulumi:"entries"`
	// SecretName is the name of the secret.
	SecretName pulumi.StringInput `pulumi:"secretName"`
}

func (KibanaSpecSecureSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecSecureSettings)(nil)).Elem()
}

func (i KibanaSpecSecureSettingsArgs) ToKibanaSpecSecureSettingsOutput() KibanaSpecSecureSettingsOutput {
	return i.ToKibanaSpecSecureSettingsOutputWithContext(context.Background())
}

func (i KibanaSpecSecureSettingsArgs) ToKibanaSpecSecureSettingsOutputWithContext(ctx context.Context) KibanaSpecSecureSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecSecureSettingsOutput)
}

// KibanaSpecSecureSettingsArrayInput is an input type that accepts KibanaSpecSecureSettingsArray and KibanaSpecSecureSettingsArrayOutput values.
// You can construct a concrete instance of `KibanaSpecSecureSettingsArrayInput` via:
//
//	KibanaSpecSecureSettingsArray{ KibanaSpecSecureSettingsArgs{...} }
type KibanaSpecSecureSettingsArrayInput interface {
	pulumi.Input

	ToKibanaSpecSecureSettingsArrayOutput() KibanaSpecSecureSettingsArrayOutput
	ToKibanaSpecSecureSettingsArrayOutputWithContext(context.Context) KibanaSpecSecureSettingsArrayOutput
}

type KibanaSpecSecureSettingsArray []KibanaSpecSecureSettingsInput

func (KibanaSpecSecureSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KibanaSpecSecureSettings)(nil)).Elem()
}

func (i KibanaSpecSecureSettingsArray) ToKibanaSpecSecureSettingsArrayOutput() KibanaSpecSecureSettingsArrayOutput {
	return i.ToKibanaSpecSecureSettingsArrayOutputWithContext(context.Background())
}

func (i KibanaSpecSecureSettingsArray) ToKibanaSpecSecureSettingsArrayOutputWithContext(ctx context.Context) KibanaSpecSecureSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecSecureSettingsArrayOutput)
}

// SecretSource defines a data source based on a Kubernetes Secret.
type KibanaSpecSecureSettingsOutput struct{ *pulumi.OutputState }

func (KibanaSpecSecureSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecSecureSettings)(nil)).Elem()
}

func (o KibanaSpecSecureSettingsOutput) ToKibanaSpecSecureSettingsOutput() KibanaSpecSecureSettingsOutput {
	return o
}

func (o KibanaSpecSecureSettingsOutput) ToKibanaSpecSecureSettingsOutputWithContext(ctx context.Context) KibanaSpecSecureSettingsOutput {
	return o
}

// Entries define how to project each key-value pair in the secret to filesystem paths.
// If not defined, all keys will be projected to similarly named paths in the filesystem.
// If defined, only the specified keys will be projected to the corresponding paths.
func (o KibanaSpecSecureSettingsOutput) Entries() KibanaSpecSecureSettingsEntriesArrayOutput {
	return o.ApplyT(func(v KibanaSpecSecureSettings) []KibanaSpecSecureSettingsEntries { return v.Entries }).(KibanaSpecSecureSettingsEntriesArrayOutput)
}

// SecretName is the name of the secret.
func (o KibanaSpecSecureSettingsOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v KibanaSpecSecureSettings) string { return v.SecretName }).(pulumi.StringOutput)
}

type KibanaSpecSecureSettingsArrayOutput struct{ *pulumi.OutputState }

func (KibanaSpecSecureSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KibanaSpecSecureSettings)(nil)).Elem()
}

func (o KibanaSpecSecureSettingsArrayOutput) ToKibanaSpecSecureSettingsArrayOutput() KibanaSpecSecureSettingsArrayOutput {
	return o
}

func (o KibanaSpecSecureSettingsArrayOutput) ToKibanaSpecSecureSettingsArrayOutputWithContext(ctx context.Context) KibanaSpecSecureSettingsArrayOutput {
	return o
}

func (o KibanaSpecSecureSettingsArrayOutput) Index(i pulumi.IntInput) KibanaSpecSecureSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KibanaSpecSecureSettings {
		return vs[0].([]KibanaSpecSecureSettings)[vs[1].(int)]
	}).(KibanaSpecSecureSettingsOutput)
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type KibanaSpecSecureSettingsEntries struct {
	// Key is the key contained in the secret.
	Key string `pulumi:"key"`
	// Path is the relative file path to map the key to.
	// Path must not be an absolute file path and must not contain any ".." components.
	Path *string `pulumi:"path"`
}

// KibanaSpecSecureSettingsEntriesInput is an input type that accepts KibanaSpecSecureSettingsEntriesArgs and KibanaSpecSecureSettingsEntriesOutput values.
// You can construct a concrete instance of `KibanaSpecSecureSettingsEntriesInput` via:
//
//	KibanaSpecSecureSettingsEntriesArgs{...}
type KibanaSpecSecureSettingsEntriesInput interface {
	pulumi.Input

	ToKibanaSpecSecureSettingsEntriesOutput() KibanaSpecSecureSettingsEntriesOutput
	ToKibanaSpecSecureSettingsEntriesOutputWithContext(context.Context) KibanaSpecSecureSettingsEntriesOutput
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type KibanaSpecSecureSettingsEntriesArgs struct {
	// Key is the key contained in the secret.
	Key pulumi.StringInput `pulumi:"key"`
	// Path is the relative file path to map the key to.
	// Path must not be an absolute file path and must not contain any ".." components.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (KibanaSpecSecureSettingsEntriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecSecureSettingsEntries)(nil)).Elem()
}

func (i KibanaSpecSecureSettingsEntriesArgs) ToKibanaSpecSecureSettingsEntriesOutput() KibanaSpecSecureSettingsEntriesOutput {
	return i.ToKibanaSpecSecureSettingsEntriesOutputWithContext(context.Background())
}

func (i KibanaSpecSecureSettingsEntriesArgs) ToKibanaSpecSecureSettingsEntriesOutputWithContext(ctx context.Context) KibanaSpecSecureSettingsEntriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecSecureSettingsEntriesOutput)
}

// KibanaSpecSecureSettingsEntriesArrayInput is an input type that accepts KibanaSpecSecureSettingsEntriesArray and KibanaSpecSecureSettingsEntriesArrayOutput values.
// You can construct a concrete instance of `KibanaSpecSecureSettingsEntriesArrayInput` via:
//
//	KibanaSpecSecureSettingsEntriesArray{ KibanaSpecSecureSettingsEntriesArgs{...} }
type KibanaSpecSecureSettingsEntriesArrayInput interface {
	pulumi.Input

	ToKibanaSpecSecureSettingsEntriesArrayOutput() KibanaSpecSecureSettingsEntriesArrayOutput
	ToKibanaSpecSecureSettingsEntriesArrayOutputWithContext(context.Context) KibanaSpecSecureSettingsEntriesArrayOutput
}

type KibanaSpecSecureSettingsEntriesArray []KibanaSpecSecureSettingsEntriesInput

func (KibanaSpecSecureSettingsEntriesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KibanaSpecSecureSettingsEntries)(nil)).Elem()
}

func (i KibanaSpecSecureSettingsEntriesArray) ToKibanaSpecSecureSettingsEntriesArrayOutput() KibanaSpecSecureSettingsEntriesArrayOutput {
	return i.ToKibanaSpecSecureSettingsEntriesArrayOutputWithContext(context.Background())
}

func (i KibanaSpecSecureSettingsEntriesArray) ToKibanaSpecSecureSettingsEntriesArrayOutputWithContext(ctx context.Context) KibanaSpecSecureSettingsEntriesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaSpecSecureSettingsEntriesArrayOutput)
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type KibanaSpecSecureSettingsEntriesOutput struct{ *pulumi.OutputState }

func (KibanaSpecSecureSettingsEntriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaSpecSecureSettingsEntries)(nil)).Elem()
}

func (o KibanaSpecSecureSettingsEntriesOutput) ToKibanaSpecSecureSettingsEntriesOutput() KibanaSpecSecureSettingsEntriesOutput {
	return o
}

func (o KibanaSpecSecureSettingsEntriesOutput) ToKibanaSpecSecureSettingsEntriesOutputWithContext(ctx context.Context) KibanaSpecSecureSettingsEntriesOutput {
	return o
}

// Key is the key contained in the secret.
func (o KibanaSpecSecureSettingsEntriesOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KibanaSpecSecureSettingsEntries) string { return v.Key }).(pulumi.StringOutput)
}

// Path is the relative file path to map the key to.
// Path must not be an absolute file path and must not contain any ".." components.
func (o KibanaSpecSecureSettingsEntriesOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaSpecSecureSettingsEntries) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type KibanaSpecSecureSettingsEntriesArrayOutput struct{ *pulumi.OutputState }

func (KibanaSpecSecureSettingsEntriesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KibanaSpecSecureSettingsEntries)(nil)).Elem()
}

func (o KibanaSpecSecureSettingsEntriesArrayOutput) ToKibanaSpecSecureSettingsEntriesArrayOutput() KibanaSpecSecureSettingsEntriesArrayOutput {
	return o
}

func (o KibanaSpecSecureSettingsEntriesArrayOutput) ToKibanaSpecSecureSettingsEntriesArrayOutputWithContext(ctx context.Context) KibanaSpecSecureSettingsEntriesArrayOutput {
	return o
}

func (o KibanaSpecSecureSettingsEntriesArrayOutput) Index(i pulumi.IntInput) KibanaSpecSecureSettingsEntriesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KibanaSpecSecureSettingsEntries {
		return vs[0].([]KibanaSpecSecureSettingsEntries)[vs[1].(int)]
	}).(KibanaSpecSecureSettingsEntriesOutput)
}

// KibanaStatus defines the observed state of Kibana
type KibanaStatus struct {
	// AssociationStatus is the status of any auto-linking to Elasticsearch clusters.
	// This field is deprecated and will be removed in a future release. Use ElasticsearchAssociationStatus instead.
	AssociationStatus *string `pulumi:"associationStatus"`
	// AvailableNodes is the number of available replicas in the deployment.
	AvailableNodes *int `pulumi:"availableNodes"`
	// Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
	Count *int `pulumi:"count"`
	// ElasticsearchAssociationStatus is the status of any auto-linking to Elasticsearch clusters.
	ElasticsearchAssociationStatus *string `pulumi:"elasticsearchAssociationStatus"`
	// EnterpriseSearchAssociationStatus is the status of any auto-linking to Enterprise Search.
	EnterpriseSearchAssociationStatus *string `pulumi:"enterpriseSearchAssociationStatus"`
	// Health of the deployment.
	Health *string `pulumi:"health"`
	// MonitoringAssociationStatus is the status of any auto-linking to monitoring Elasticsearch clusters.
	MonitoringAssociationStatus map[string]string `pulumi:"monitoringAssociationStatus"`
	// ObservedGeneration is the most recent generation observed for this Kibana instance.
	// It corresponds to the metadata generation, which is updated on mutation by the API Server.
	// If the generation observed in status diverges from the generation in metadata, the Kibana
	// controller has not yet processed the changes contained in the Kibana specification.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// Selector is the label selector used to find all pods.
	Selector *string `pulumi:"selector"`
	// Version of the stack resource currently running. During version upgrades, multiple versions may run
	// in parallel: this value specifies the lowest version currently running.
	Version *string `pulumi:"version"`
}

// KibanaStatusInput is an input type that accepts KibanaStatusArgs and KibanaStatusOutput values.
// You can construct a concrete instance of `KibanaStatusInput` via:
//
//	KibanaStatusArgs{...}
type KibanaStatusInput interface {
	pulumi.Input

	ToKibanaStatusOutput() KibanaStatusOutput
	ToKibanaStatusOutputWithContext(context.Context) KibanaStatusOutput
}

// KibanaStatus defines the observed state of Kibana
type KibanaStatusArgs struct {
	// AssociationStatus is the status of any auto-linking to Elasticsearch clusters.
	// This field is deprecated and will be removed in a future release. Use ElasticsearchAssociationStatus instead.
	AssociationStatus pulumi.StringPtrInput `pulumi:"associationStatus"`
	// AvailableNodes is the number of available replicas in the deployment.
	AvailableNodes pulumi.IntPtrInput `pulumi:"availableNodes"`
	// Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// ElasticsearchAssociationStatus is the status of any auto-linking to Elasticsearch clusters.
	ElasticsearchAssociationStatus pulumi.StringPtrInput `pulumi:"elasticsearchAssociationStatus"`
	// EnterpriseSearchAssociationStatus is the status of any auto-linking to Enterprise Search.
	EnterpriseSearchAssociationStatus pulumi.StringPtrInput `pulumi:"enterpriseSearchAssociationStatus"`
	// Health of the deployment.
	Health pulumi.StringPtrInput `pulumi:"health"`
	// MonitoringAssociationStatus is the status of any auto-linking to monitoring Elasticsearch clusters.
	MonitoringAssociationStatus pulumi.StringMapInput `pulumi:"monitoringAssociationStatus"`
	// ObservedGeneration is the most recent generation observed for this Kibana instance.
	// It corresponds to the metadata generation, which is updated on mutation by the API Server.
	// If the generation observed in status diverges from the generation in metadata, the Kibana
	// controller has not yet processed the changes contained in the Kibana specification.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// Selector is the label selector used to find all pods.
	Selector pulumi.StringPtrInput `pulumi:"selector"`
	// Version of the stack resource currently running. During version upgrades, multiple versions may run
	// in parallel: this value specifies the lowest version currently running.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (KibanaStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaStatus)(nil)).Elem()
}

func (i KibanaStatusArgs) ToKibanaStatusOutput() KibanaStatusOutput {
	return i.ToKibanaStatusOutputWithContext(context.Background())
}

func (i KibanaStatusArgs) ToKibanaStatusOutputWithContext(ctx context.Context) KibanaStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaStatusOutput)
}

func (i KibanaStatusArgs) ToKibanaStatusPtrOutput() KibanaStatusPtrOutput {
	return i.ToKibanaStatusPtrOutputWithContext(context.Background())
}

func (i KibanaStatusArgs) ToKibanaStatusPtrOutputWithContext(ctx context.Context) KibanaStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaStatusOutput).ToKibanaStatusPtrOutputWithContext(ctx)
}

// KibanaStatusPtrInput is an input type that accepts KibanaStatusArgs, KibanaStatusPtr and KibanaStatusPtrOutput values.
// You can construct a concrete instance of `KibanaStatusPtrInput` via:
//
//	        KibanaStatusArgs{...}
//
//	or:
//
//	        nil
type KibanaStatusPtrInput interface {
	pulumi.Input

	ToKibanaStatusPtrOutput() KibanaStatusPtrOutput
	ToKibanaStatusPtrOutputWithContext(context.Context) KibanaStatusPtrOutput
}

type kibanaStatusPtrType KibanaStatusArgs

func KibanaStatusPtr(v *KibanaStatusArgs) KibanaStatusPtrInput {
	return (*kibanaStatusPtrType)(v)
}

func (*kibanaStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaStatus)(nil)).Elem()
}

func (i *kibanaStatusPtrType) ToKibanaStatusPtrOutput() KibanaStatusPtrOutput {
	return i.ToKibanaStatusPtrOutputWithContext(context.Background())
}

func (i *kibanaStatusPtrType) ToKibanaStatusPtrOutputWithContext(ctx context.Context) KibanaStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KibanaStatusPtrOutput)
}

// KibanaStatus defines the observed state of Kibana
type KibanaStatusOutput struct{ *pulumi.OutputState }

func (KibanaStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KibanaStatus)(nil)).Elem()
}

func (o KibanaStatusOutput) ToKibanaStatusOutput() KibanaStatusOutput {
	return o
}

func (o KibanaStatusOutput) ToKibanaStatusOutputWithContext(ctx context.Context) KibanaStatusOutput {
	return o
}

func (o KibanaStatusOutput) ToKibanaStatusPtrOutput() KibanaStatusPtrOutput {
	return o.ToKibanaStatusPtrOutputWithContext(context.Background())
}

func (o KibanaStatusOutput) ToKibanaStatusPtrOutputWithContext(ctx context.Context) KibanaStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KibanaStatus) *KibanaStatus {
		return &v
	}).(KibanaStatusPtrOutput)
}

// AssociationStatus is the status of any auto-linking to Elasticsearch clusters.
// This field is deprecated and will be removed in a future release. Use ElasticsearchAssociationStatus instead.
func (o KibanaStatusOutput) AssociationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaStatus) *string { return v.AssociationStatus }).(pulumi.StringPtrOutput)
}

// AvailableNodes is the number of available replicas in the deployment.
func (o KibanaStatusOutput) AvailableNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KibanaStatus) *int { return v.AvailableNodes }).(pulumi.IntPtrOutput)
}

// Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
func (o KibanaStatusOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KibanaStatus) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// ElasticsearchAssociationStatus is the status of any auto-linking to Elasticsearch clusters.
func (o KibanaStatusOutput) ElasticsearchAssociationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaStatus) *string { return v.ElasticsearchAssociationStatus }).(pulumi.StringPtrOutput)
}

// EnterpriseSearchAssociationStatus is the status of any auto-linking to Enterprise Search.
func (o KibanaStatusOutput) EnterpriseSearchAssociationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaStatus) *string { return v.EnterpriseSearchAssociationStatus }).(pulumi.StringPtrOutput)
}

// Health of the deployment.
func (o KibanaStatusOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaStatus) *string { return v.Health }).(pulumi.StringPtrOutput)
}

// MonitoringAssociationStatus is the status of any auto-linking to monitoring Elasticsearch clusters.
func (o KibanaStatusOutput) MonitoringAssociationStatus() pulumi.StringMapOutput {
	return o.ApplyT(func(v KibanaStatus) map[string]string { return v.MonitoringAssociationStatus }).(pulumi.StringMapOutput)
}

// ObservedGeneration is the most recent generation observed for this Kibana instance.
// It corresponds to the metadata generation, which is updated on mutation by the API Server.
// If the generation observed in status diverges from the generation in metadata, the Kibana
// controller has not yet processed the changes contained in the Kibana specification.
func (o KibanaStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KibanaStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// Selector is the label selector used to find all pods.
func (o KibanaStatusOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaStatus) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

// Version of the stack resource currently running. During version upgrades, multiple versions may run
// in parallel: this value specifies the lowest version currently running.
func (o KibanaStatusOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KibanaStatus) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type KibanaStatusPtrOutput struct{ *pulumi.OutputState }

func (KibanaStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KibanaStatus)(nil)).Elem()
}

func (o KibanaStatusPtrOutput) ToKibanaStatusPtrOutput() KibanaStatusPtrOutput {
	return o
}

func (o KibanaStatusPtrOutput) ToKibanaStatusPtrOutputWithContext(ctx context.Context) KibanaStatusPtrOutput {
	return o
}

func (o KibanaStatusPtrOutput) Elem() KibanaStatusOutput {
	return o.ApplyT(func(v *KibanaStatus) KibanaStatus {
		if v != nil {
			return *v
		}
		var ret KibanaStatus
		return ret
	}).(KibanaStatusOutput)
}

// AssociationStatus is the status of any auto-linking to Elasticsearch clusters.
// This field is deprecated and will be removed in a future release. Use ElasticsearchAssociationStatus instead.
func (o KibanaStatusPtrOutput) AssociationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaStatus) *string {
		if v == nil {
			return nil
		}
		return v.AssociationStatus
	}).(pulumi.StringPtrOutput)
}

// AvailableNodes is the number of available replicas in the deployment.
func (o KibanaStatusPtrOutput) AvailableNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KibanaStatus) *int {
		if v == nil {
			return nil
		}
		return v.AvailableNodes
	}).(pulumi.IntPtrOutput)
}

// Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
func (o KibanaStatusPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KibanaStatus) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// ElasticsearchAssociationStatus is the status of any auto-linking to Elasticsearch clusters.
func (o KibanaStatusPtrOutput) ElasticsearchAssociationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaStatus) *string {
		if v == nil {
			return nil
		}
		return v.ElasticsearchAssociationStatus
	}).(pulumi.StringPtrOutput)
}

// EnterpriseSearchAssociationStatus is the status of any auto-linking to Enterprise Search.
func (o KibanaStatusPtrOutput) EnterpriseSearchAssociationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaStatus) *string {
		if v == nil {
			return nil
		}
		return v.EnterpriseSearchAssociationStatus
	}).(pulumi.StringPtrOutput)
}

// Health of the deployment.
func (o KibanaStatusPtrOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaStatus) *string {
		if v == nil {
			return nil
		}
		return v.Health
	}).(pulumi.StringPtrOutput)
}

// MonitoringAssociationStatus is the status of any auto-linking to monitoring Elasticsearch clusters.
func (o KibanaStatusPtrOutput) MonitoringAssociationStatus() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KibanaStatus) map[string]string {
		if v == nil {
			return nil
		}
		return v.MonitoringAssociationStatus
	}).(pulumi.StringMapOutput)
}

// ObservedGeneration is the most recent generation observed for this Kibana instance.
// It corresponds to the metadata generation, which is updated on mutation by the API Server.
// If the generation observed in status diverges from the generation in metadata, the Kibana
// controller has not yet processed the changes contained in the Kibana specification.
func (o KibanaStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KibanaStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// Selector is the label selector used to find all pods.
func (o KibanaStatusPtrOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaStatus) *string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringPtrOutput)
}

// Version of the stack resource currently running. During version upgrades, multiple versions may run
// in parallel: this value specifies the lowest version currently running.
func (o KibanaStatusPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KibanaStatus) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// MonitoringAssociationStatus is the status of any auto-linking to monitoring Elasticsearch clusters.
type KibanaStatusMonitoringAssociationStatus struct {
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecInput)(nil)).Elem(), KibanaSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecPtrInput)(nil)).Elem(), KibanaSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecElasticsearchRefInput)(nil)).Elem(), KibanaSpecElasticsearchRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecElasticsearchRefPtrInput)(nil)).Elem(), KibanaSpecElasticsearchRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecEnterpriseSearchRefInput)(nil)).Elem(), KibanaSpecEnterpriseSearchRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecEnterpriseSearchRefPtrInput)(nil)).Elem(), KibanaSpecEnterpriseSearchRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecHttpInput)(nil)).Elem(), KibanaSpecHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecHttpPtrInput)(nil)).Elem(), KibanaSpecHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecHttpServiceInput)(nil)).Elem(), KibanaSpecHttpServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecHttpServicePtrInput)(nil)).Elem(), KibanaSpecHttpServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecHttpServiceMetadataInput)(nil)).Elem(), KibanaSpecHttpServiceMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecHttpServiceMetadataPtrInput)(nil)).Elem(), KibanaSpecHttpServiceMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecHttpServiceSpecInput)(nil)).Elem(), KibanaSpecHttpServiceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecHttpServiceSpecPtrInput)(nil)).Elem(), KibanaSpecHttpServiceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecHttpServiceSpecPortsInput)(nil)).Elem(), KibanaSpecHttpServiceSpecPortsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecHttpServiceSpecPortsArrayInput)(nil)).Elem(), KibanaSpecHttpServiceSpecPortsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecHttpServiceSpecSessionAffinityConfigInput)(nil)).Elem(), KibanaSpecHttpServiceSpecSessionAffinityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecHttpServiceSpecSessionAffinityConfigPtrInput)(nil)).Elem(), KibanaSpecHttpServiceSpecSessionAffinityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpInput)(nil)).Elem(), KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrInput)(nil)).Elem(), KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecHttpTlsInput)(nil)).Elem(), KibanaSpecHttpTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecHttpTlsPtrInput)(nil)).Elem(), KibanaSpecHttpTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecHttpTlsCertificateInput)(nil)).Elem(), KibanaSpecHttpTlsCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecHttpTlsCertificatePtrInput)(nil)).Elem(), KibanaSpecHttpTlsCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecHttpTlsSelfSignedCertificateInput)(nil)).Elem(), KibanaSpecHttpTlsSelfSignedCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecHttpTlsSelfSignedCertificatePtrInput)(nil)).Elem(), KibanaSpecHttpTlsSelfSignedCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput)(nil)).Elem(), KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput)(nil)).Elem(), KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecMonitoringInput)(nil)).Elem(), KibanaSpecMonitoringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecMonitoringPtrInput)(nil)).Elem(), KibanaSpecMonitoringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecMonitoringLogsInput)(nil)).Elem(), KibanaSpecMonitoringLogsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecMonitoringLogsPtrInput)(nil)).Elem(), KibanaSpecMonitoringLogsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecMonitoringLogsElasticsearchRefsInput)(nil)).Elem(), KibanaSpecMonitoringLogsElasticsearchRefsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecMonitoringLogsElasticsearchRefsArrayInput)(nil)).Elem(), KibanaSpecMonitoringLogsElasticsearchRefsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecMonitoringMetricsInput)(nil)).Elem(), KibanaSpecMonitoringMetricsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecMonitoringMetricsPtrInput)(nil)).Elem(), KibanaSpecMonitoringMetricsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecMonitoringMetricsElasticsearchRefsInput)(nil)).Elem(), KibanaSpecMonitoringMetricsElasticsearchRefsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecMonitoringMetricsElasticsearchRefsArrayInput)(nil)).Elem(), KibanaSpecMonitoringMetricsElasticsearchRefsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecSecureSettingsInput)(nil)).Elem(), KibanaSpecSecureSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecSecureSettingsArrayInput)(nil)).Elem(), KibanaSpecSecureSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecSecureSettingsEntriesInput)(nil)).Elem(), KibanaSpecSecureSettingsEntriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaSpecSecureSettingsEntriesArrayInput)(nil)).Elem(), KibanaSpecSecureSettingsEntriesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaStatusInput)(nil)).Elem(), KibanaStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KibanaStatusPtrInput)(nil)).Elem(), KibanaStatusArgs{})
	pulumi.RegisterOutputType(KibanaSpecOutput{})
	pulumi.RegisterOutputType(KibanaSpecPtrOutput{})
	pulumi.RegisterOutputType(KibanaSpecElasticsearchRefOutput{})
	pulumi.RegisterOutputType(KibanaSpecElasticsearchRefPtrOutput{})
	pulumi.RegisterOutputType(KibanaSpecEnterpriseSearchRefOutput{})
	pulumi.RegisterOutputType(KibanaSpecEnterpriseSearchRefPtrOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpPtrOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpServiceOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpServicePtrOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpServiceMetadataOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpServiceMetadataPtrOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpServiceSpecOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpServiceSpecPtrOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpServiceSpecPortsOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpServiceSpecPortsArrayOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpServiceSpecSessionAffinityConfigOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpServiceSpecSessionAffinityConfigPtrOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpTlsOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpTlsPtrOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpTlsCertificateOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpTlsCertificatePtrOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpTlsSelfSignedCertificateOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpTlsSelfSignedCertificatePtrOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput{})
	pulumi.RegisterOutputType(KibanaSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput{})
	pulumi.RegisterOutputType(KibanaSpecMonitoringOutput{})
	pulumi.RegisterOutputType(KibanaSpecMonitoringPtrOutput{})
	pulumi.RegisterOutputType(KibanaSpecMonitoringLogsOutput{})
	pulumi.RegisterOutputType(KibanaSpecMonitoringLogsPtrOutput{})
	pulumi.RegisterOutputType(KibanaSpecMonitoringLogsElasticsearchRefsOutput{})
	pulumi.RegisterOutputType(KibanaSpecMonitoringLogsElasticsearchRefsArrayOutput{})
	pulumi.RegisterOutputType(KibanaSpecMonitoringMetricsOutput{})
	pulumi.RegisterOutputType(KibanaSpecMonitoringMetricsPtrOutput{})
	pulumi.RegisterOutputType(KibanaSpecMonitoringMetricsElasticsearchRefsOutput{})
	pulumi.RegisterOutputType(KibanaSpecMonitoringMetricsElasticsearchRefsArrayOutput{})
	pulumi.RegisterOutputType(KibanaSpecSecureSettingsOutput{})
	pulumi.RegisterOutputType(KibanaSpecSecureSettingsArrayOutput{})
	pulumi.RegisterOutputType(KibanaSpecSecureSettingsEntriesOutput{})
	pulumi.RegisterOutputType(KibanaSpecSecureSettingsEntriesArrayOutput{})
	pulumi.RegisterOutputType(KibanaStatusOutput{})
	pulumi.RegisterOutputType(KibanaStatusPtrOutput{})
}
