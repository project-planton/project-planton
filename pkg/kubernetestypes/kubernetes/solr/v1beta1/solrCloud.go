// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SolrCloud is the Schema for the solrclouds API
type SolrCloud struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// SolrCloudSpec defines the desired state of SolrCloud
	Spec SolrCloudSpecPtrOutput `pulumi:"spec"`
	// SolrCloudStatus defines the observed state of SolrCloud
	Status SolrCloudStatusPtrOutput `pulumi:"status"`
}

// NewSolrCloud registers a new resource with the given unique name, arguments, and options.
func NewSolrCloud(ctx *pulumi.Context,
	name string, args *SolrCloudArgs, opts ...pulumi.ResourceOption) (*SolrCloud, error) {
	if args == nil {
		args = &SolrCloudArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("solr.apache.org/v1beta1")
	args.Kind = pulumi.StringPtr("SolrCloud")
	if args.Spec != nil {
		args.Spec = args.Spec.ToSolrCloudSpecPtrOutput().ApplyT(func(v *SolrCloudSpec) *SolrCloudSpec { return v.Defaults() }).(SolrCloudSpecPtrOutput)
	}
	if args.Status != nil {
		args.Status = args.Status.ToSolrCloudStatusPtrOutput().ApplyT(func(v *SolrCloudStatus) *SolrCloudStatus { return v.Defaults() }).(SolrCloudStatusPtrOutput)
	}
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SolrCloud
	err := ctx.RegisterResource("kubernetes:solr.apache.org/v1beta1:SolrCloud", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSolrCloud gets an existing SolrCloud resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSolrCloud(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SolrCloudState, opts ...pulumi.ResourceOption) (*SolrCloud, error) {
	var resource SolrCloud
	err := ctx.ReadResource("kubernetes:solr.apache.org/v1beta1:SolrCloud", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SolrCloud resources.
type solrCloudState struct {
}

type SolrCloudState struct {
}

func (SolrCloudState) ElementType() reflect.Type {
	return reflect.TypeOf((*solrCloudState)(nil)).Elem()
}

type solrCloudArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// SolrCloudSpec defines the desired state of SolrCloud
	Spec *SolrCloudSpec `pulumi:"spec"`
	// SolrCloudStatus defines the observed state of SolrCloud
	Status *SolrCloudStatus `pulumi:"status"`
}

// The set of arguments for constructing a SolrCloud resource.
type SolrCloudArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// SolrCloudSpec defines the desired state of SolrCloud
	Spec SolrCloudSpecPtrInput
	// SolrCloudStatus defines the observed state of SolrCloud
	Status SolrCloudStatusPtrInput
}

func (SolrCloudArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*solrCloudArgs)(nil)).Elem()
}

type SolrCloudInput interface {
	pulumi.Input

	ToSolrCloudOutput() SolrCloudOutput
	ToSolrCloudOutputWithContext(ctx context.Context) SolrCloudOutput
}

func (*SolrCloud) ElementType() reflect.Type {
	return reflect.TypeOf((**SolrCloud)(nil)).Elem()
}

func (i *SolrCloud) ToSolrCloudOutput() SolrCloudOutput {
	return i.ToSolrCloudOutputWithContext(context.Background())
}

func (i *SolrCloud) ToSolrCloudOutputWithContext(ctx context.Context) SolrCloudOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolrCloudOutput)
}

type SolrCloudOutput struct{ *pulumi.OutputState }

func (SolrCloudOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SolrCloud)(nil)).Elem()
}

func (o SolrCloudOutput) ToSolrCloudOutput() SolrCloudOutput {
	return o
}

func (o SolrCloudOutput) ToSolrCloudOutputWithContext(ctx context.Context) SolrCloudOutput {
	return o
}

func (o SolrCloudOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SolrCloud) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o SolrCloudOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SolrCloud) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o SolrCloudOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *SolrCloud) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// SolrCloudSpec defines the desired state of SolrCloud
func (o SolrCloudOutput) Spec() SolrCloudSpecPtrOutput {
	return o.ApplyT(func(v *SolrCloud) SolrCloudSpecPtrOutput { return v.Spec }).(SolrCloudSpecPtrOutput)
}

// SolrCloudStatus defines the observed state of SolrCloud
func (o SolrCloudOutput) Status() SolrCloudStatusPtrOutput {
	return o.ApplyT(func(v *SolrCloud) SolrCloudStatusPtrOutput { return v.Status }).(SolrCloudStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SolrCloudInput)(nil)).Elem(), &SolrCloud{})
	pulumi.RegisterOutputType(SolrCloudOutput{})
}
