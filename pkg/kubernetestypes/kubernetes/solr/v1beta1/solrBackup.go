// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SolrBackup is the Schema for the solrbackups API
type SolrBackup struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// SolrBackupSpec defines the desired state of SolrBackup
	Spec SolrBackupSpecPtrOutput `pulumi:"spec"`
	// SolrBackupStatus defines the observed state of SolrBackup
	Status SolrBackupStatusPtrOutput `pulumi:"status"`
}

// NewSolrBackup registers a new resource with the given unique name, arguments, and options.
func NewSolrBackup(ctx *pulumi.Context,
	name string, args *SolrBackupArgs, opts ...pulumi.ResourceOption) (*SolrBackup, error) {
	if args == nil {
		args = &SolrBackupArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("solr.apache.org/v1beta1")
	args.Kind = pulumi.StringPtr("SolrBackup")
	if args.Spec != nil {
		args.Spec = args.Spec.ToSolrBackupSpecPtrOutput().ApplyT(func(v *SolrBackupSpec) *SolrBackupSpec { return v.Defaults() }).(SolrBackupSpecPtrOutput)
	}
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SolrBackup
	err := ctx.RegisterResource("kubernetes:solr.apache.org/v1beta1:SolrBackup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSolrBackup gets an existing SolrBackup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSolrBackup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SolrBackupState, opts ...pulumi.ResourceOption) (*SolrBackup, error) {
	var resource SolrBackup
	err := ctx.ReadResource("kubernetes:solr.apache.org/v1beta1:SolrBackup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SolrBackup resources.
type solrBackupState struct {
}

type SolrBackupState struct {
}

func (SolrBackupState) ElementType() reflect.Type {
	return reflect.TypeOf((*solrBackupState)(nil)).Elem()
}

type solrBackupArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// SolrBackupSpec defines the desired state of SolrBackup
	Spec *SolrBackupSpec `pulumi:"spec"`
	// SolrBackupStatus defines the observed state of SolrBackup
	Status *SolrBackupStatus `pulumi:"status"`
}

// The set of arguments for constructing a SolrBackup resource.
type SolrBackupArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// SolrBackupSpec defines the desired state of SolrBackup
	Spec SolrBackupSpecPtrInput
	// SolrBackupStatus defines the observed state of SolrBackup
	Status SolrBackupStatusPtrInput
}

func (SolrBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*solrBackupArgs)(nil)).Elem()
}

type SolrBackupInput interface {
	pulumi.Input

	ToSolrBackupOutput() SolrBackupOutput
	ToSolrBackupOutputWithContext(ctx context.Context) SolrBackupOutput
}

func (*SolrBackup) ElementType() reflect.Type {
	return reflect.TypeOf((**SolrBackup)(nil)).Elem()
}

func (i *SolrBackup) ToSolrBackupOutput() SolrBackupOutput {
	return i.ToSolrBackupOutputWithContext(context.Background())
}

func (i *SolrBackup) ToSolrBackupOutputWithContext(ctx context.Context) SolrBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SolrBackupOutput)
}

type SolrBackupOutput struct{ *pulumi.OutputState }

func (SolrBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SolrBackup)(nil)).Elem()
}

func (o SolrBackupOutput) ToSolrBackupOutput() SolrBackupOutput {
	return o
}

func (o SolrBackupOutput) ToSolrBackupOutputWithContext(ctx context.Context) SolrBackupOutput {
	return o
}

func (o SolrBackupOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SolrBackup) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o SolrBackupOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SolrBackup) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o SolrBackupOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *SolrBackup) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// SolrBackupSpec defines the desired state of SolrBackup
func (o SolrBackupOutput) Spec() SolrBackupSpecPtrOutput {
	return o.ApplyT(func(v *SolrBackup) SolrBackupSpecPtrOutput { return v.Spec }).(SolrBackupSpecPtrOutput)
}

// SolrBackupStatus defines the observed state of SolrBackup
func (o SolrBackupOutput) Status() SolrBackupStatusPtrOutput {
	return o.ApplyT(func(v *SolrBackup) SolrBackupStatusPtrOutput { return v.Status }).(SolrBackupStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SolrBackupInput)(nil)).Elem(), &SolrBackup{})
	pulumi.RegisterOutputType(SolrBackupOutput{})
}
