// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// EnterpriseSearch is a Kubernetes CRD to represent Enterprise Search.
type EnterpriseSearchType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// EnterpriseSearchSpec holds the specification of an Enterprise Search resource.
	Spec *EnterpriseSearchSpec `pulumi:"spec"`
	// EnterpriseSearchStatus defines the observed state of EnterpriseSearch
	Status *EnterpriseSearchStatus `pulumi:"status"`
}

type EnterpriseSearchMetadata struct {
}

// EnterpriseSearchSpec holds the specification of an Enterprise Search resource.
type EnterpriseSearchSpec struct {
	// Config holds the Enterprise Search configuration.
	Config map[string]interface{} `pulumi:"config"`
	// ConfigRef contains a reference to an existing Kubernetes Secret holding the Enterprise Search configuration.
	// Configuration settings are merged and have precedence over settings specified in `config`.
	ConfigRef *EnterpriseSearchSpecConfigRef `pulumi:"configRef"`
	// Count of Enterprise Search instances to deploy.
	Count *int `pulumi:"count"`
	// ElasticsearchRef is a reference to the Elasticsearch cluster running in the same Kubernetes cluster.
	ElasticsearchRef *EnterpriseSearchSpecElasticsearchRef `pulumi:"elasticsearchRef"`
	// HTTP holds the HTTP layer configuration for Enterprise Search resource.
	Http *EnterpriseSearchSpecHttp `pulumi:"http"`
	// Image is the Enterprise Search Docker image to deploy.
	Image *string `pulumi:"image"`
	// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on)
	// for the Enterprise Search pods.
	PodTemplate map[string]interface{} `pulumi:"podTemplate"`
	// RevisionHistoryLimit is the number of revisions to retain to allow rollback in the underlying Deployment.
	RevisionHistoryLimit *int `pulumi:"revisionHistoryLimit"`
	// ServiceAccountName is used to check access from the current resource to a resource (for ex. Elasticsearch) in a different namespace.
	// Can only be used if ECK is enforcing RBAC on references.
	ServiceAccountName *string `pulumi:"serviceAccountName"`
	// Version of Enterprise Search.
	Version *string `pulumi:"version"`
}

// EnterpriseSearchSpecInput is an input type that accepts EnterpriseSearchSpecArgs and EnterpriseSearchSpecOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecInput` via:
//
//	EnterpriseSearchSpecArgs{...}
type EnterpriseSearchSpecInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecOutput() EnterpriseSearchSpecOutput
	ToEnterpriseSearchSpecOutputWithContext(context.Context) EnterpriseSearchSpecOutput
}

// EnterpriseSearchSpec holds the specification of an Enterprise Search resource.
type EnterpriseSearchSpecArgs struct {
	// Config holds the Enterprise Search configuration.
	Config pulumi.MapInput `pulumi:"config"`
	// ConfigRef contains a reference to an existing Kubernetes Secret holding the Enterprise Search configuration.
	// Configuration settings are merged and have precedence over settings specified in `config`.
	ConfigRef EnterpriseSearchSpecConfigRefPtrInput `pulumi:"configRef"`
	// Count of Enterprise Search instances to deploy.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// ElasticsearchRef is a reference to the Elasticsearch cluster running in the same Kubernetes cluster.
	ElasticsearchRef EnterpriseSearchSpecElasticsearchRefPtrInput `pulumi:"elasticsearchRef"`
	// HTTP holds the HTTP layer configuration for Enterprise Search resource.
	Http EnterpriseSearchSpecHttpPtrInput `pulumi:"http"`
	// Image is the Enterprise Search Docker image to deploy.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on)
	// for the Enterprise Search pods.
	PodTemplate pulumi.MapInput `pulumi:"podTemplate"`
	// RevisionHistoryLimit is the number of revisions to retain to allow rollback in the underlying Deployment.
	RevisionHistoryLimit pulumi.IntPtrInput `pulumi:"revisionHistoryLimit"`
	// ServiceAccountName is used to check access from the current resource to a resource (for ex. Elasticsearch) in a different namespace.
	// Can only be used if ECK is enforcing RBAC on references.
	ServiceAccountName pulumi.StringPtrInput `pulumi:"serviceAccountName"`
	// Version of Enterprise Search.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (EnterpriseSearchSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpec)(nil)).Elem()
}

func (i EnterpriseSearchSpecArgs) ToEnterpriseSearchSpecOutput() EnterpriseSearchSpecOutput {
	return i.ToEnterpriseSearchSpecOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecArgs) ToEnterpriseSearchSpecOutputWithContext(ctx context.Context) EnterpriseSearchSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecOutput)
}

func (i EnterpriseSearchSpecArgs) ToEnterpriseSearchSpecPtrOutput() EnterpriseSearchSpecPtrOutput {
	return i.ToEnterpriseSearchSpecPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecArgs) ToEnterpriseSearchSpecPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecOutput).ToEnterpriseSearchSpecPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecPtrInput is an input type that accepts EnterpriseSearchSpecArgs, EnterpriseSearchSpecPtr and EnterpriseSearchSpecPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecPtrInput` via:
//
//	        EnterpriseSearchSpecArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecPtrOutput() EnterpriseSearchSpecPtrOutput
	ToEnterpriseSearchSpecPtrOutputWithContext(context.Context) EnterpriseSearchSpecPtrOutput
}

type enterpriseSearchSpecPtrType EnterpriseSearchSpecArgs

func EnterpriseSearchSpecPtr(v *EnterpriseSearchSpecArgs) EnterpriseSearchSpecPtrInput {
	return (*enterpriseSearchSpecPtrType)(v)
}

func (*enterpriseSearchSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpec)(nil)).Elem()
}

func (i *enterpriseSearchSpecPtrType) ToEnterpriseSearchSpecPtrOutput() EnterpriseSearchSpecPtrOutput {
	return i.ToEnterpriseSearchSpecPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecPtrType) ToEnterpriseSearchSpecPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecPtrOutput)
}

// EnterpriseSearchSpec holds the specification of an Enterprise Search resource.
type EnterpriseSearchSpecOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpec)(nil)).Elem()
}

func (o EnterpriseSearchSpecOutput) ToEnterpriseSearchSpecOutput() EnterpriseSearchSpecOutput {
	return o
}

func (o EnterpriseSearchSpecOutput) ToEnterpriseSearchSpecOutputWithContext(ctx context.Context) EnterpriseSearchSpecOutput {
	return o
}

func (o EnterpriseSearchSpecOutput) ToEnterpriseSearchSpecPtrOutput() EnterpriseSearchSpecPtrOutput {
	return o.ToEnterpriseSearchSpecPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecOutput) ToEnterpriseSearchSpecPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpec) *EnterpriseSearchSpec {
		return &v
	}).(EnterpriseSearchSpecPtrOutput)
}

// Config holds the Enterprise Search configuration.
func (o EnterpriseSearchSpecOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v EnterpriseSearchSpec) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

// ConfigRef contains a reference to an existing Kubernetes Secret holding the Enterprise Search configuration.
// Configuration settings are merged and have precedence over settings specified in `config`.
func (o EnterpriseSearchSpecOutput) ConfigRef() EnterpriseSearchSpecConfigRefPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpec) *EnterpriseSearchSpecConfigRef { return v.ConfigRef }).(EnterpriseSearchSpecConfigRefPtrOutput)
}

// Count of Enterprise Search instances to deploy.
func (o EnterpriseSearchSpecOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpec) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// ElasticsearchRef is a reference to the Elasticsearch cluster running in the same Kubernetes cluster.
func (o EnterpriseSearchSpecOutput) ElasticsearchRef() EnterpriseSearchSpecElasticsearchRefPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpec) *EnterpriseSearchSpecElasticsearchRef { return v.ElasticsearchRef }).(EnterpriseSearchSpecElasticsearchRefPtrOutput)
}

// HTTP holds the HTTP layer configuration for Enterprise Search resource.
func (o EnterpriseSearchSpecOutput) Http() EnterpriseSearchSpecHttpPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpec) *EnterpriseSearchSpecHttp { return v.Http }).(EnterpriseSearchSpecHttpPtrOutput)
}

// Image is the Enterprise Search Docker image to deploy.
func (o EnterpriseSearchSpecOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpec) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on)
// for the Enterprise Search pods.
func (o EnterpriseSearchSpecOutput) PodTemplate() pulumi.MapOutput {
	return o.ApplyT(func(v EnterpriseSearchSpec) map[string]interface{} { return v.PodTemplate }).(pulumi.MapOutput)
}

// RevisionHistoryLimit is the number of revisions to retain to allow rollback in the underlying Deployment.
func (o EnterpriseSearchSpecOutput) RevisionHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpec) *int { return v.RevisionHistoryLimit }).(pulumi.IntPtrOutput)
}

// ServiceAccountName is used to check access from the current resource to a resource (for ex. Elasticsearch) in a different namespace.
// Can only be used if ECK is enforcing RBAC on references.
func (o EnterpriseSearchSpecOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpec) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

// Version of Enterprise Search.
func (o EnterpriseSearchSpecOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpec) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchSpecPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpec)(nil)).Elem()
}

func (o EnterpriseSearchSpecPtrOutput) ToEnterpriseSearchSpecPtrOutput() EnterpriseSearchSpecPtrOutput {
	return o
}

func (o EnterpriseSearchSpecPtrOutput) ToEnterpriseSearchSpecPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecPtrOutput {
	return o
}

func (o EnterpriseSearchSpecPtrOutput) Elem() EnterpriseSearchSpecOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) EnterpriseSearchSpec {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpec
		return ret
	}).(EnterpriseSearchSpecOutput)
}

// Config holds the Enterprise Search configuration.
func (o EnterpriseSearchSpecPtrOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.MapOutput)
}

// ConfigRef contains a reference to an existing Kubernetes Secret holding the Enterprise Search configuration.
// Configuration settings are merged and have precedence over settings specified in `config`.
func (o EnterpriseSearchSpecPtrOutput) ConfigRef() EnterpriseSearchSpecConfigRefPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) *EnterpriseSearchSpecConfigRef {
		if v == nil {
			return nil
		}
		return v.ConfigRef
	}).(EnterpriseSearchSpecConfigRefPtrOutput)
}

// Count of Enterprise Search instances to deploy.
func (o EnterpriseSearchSpecPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// ElasticsearchRef is a reference to the Elasticsearch cluster running in the same Kubernetes cluster.
func (o EnterpriseSearchSpecPtrOutput) ElasticsearchRef() EnterpriseSearchSpecElasticsearchRefPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) *EnterpriseSearchSpecElasticsearchRef {
		if v == nil {
			return nil
		}
		return v.ElasticsearchRef
	}).(EnterpriseSearchSpecElasticsearchRefPtrOutput)
}

// HTTP holds the HTTP layer configuration for Enterprise Search resource.
func (o EnterpriseSearchSpecPtrOutput) Http() EnterpriseSearchSpecHttpPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) *EnterpriseSearchSpecHttp {
		if v == nil {
			return nil
		}
		return v.Http
	}).(EnterpriseSearchSpecHttpPtrOutput)
}

// Image is the Enterprise Search Docker image to deploy.
func (o EnterpriseSearchSpecPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on)
// for the Enterprise Search pods.
func (o EnterpriseSearchSpecPtrOutput) PodTemplate() pulumi.MapOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.MapOutput)
}

// RevisionHistoryLimit is the number of revisions to retain to allow rollback in the underlying Deployment.
func (o EnterpriseSearchSpecPtrOutput) RevisionHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) *int {
		if v == nil {
			return nil
		}
		return v.RevisionHistoryLimit
	}).(pulumi.IntPtrOutput)
}

// ServiceAccountName is used to check access from the current resource to a resource (for ex. Elasticsearch) in a different namespace.
// Can only be used if ECK is enforcing RBAC on references.
func (o EnterpriseSearchSpecPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

// Version of Enterprise Search.
func (o EnterpriseSearchSpecPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpec) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// ConfigRef contains a reference to an existing Kubernetes Secret holding the Enterprise Search configuration.
// Configuration settings are merged and have precedence over settings specified in `config`.
type EnterpriseSearchSpecConfigRef struct {
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// EnterpriseSearchSpecConfigRefInput is an input type that accepts EnterpriseSearchSpecConfigRefArgs and EnterpriseSearchSpecConfigRefOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecConfigRefInput` via:
//
//	EnterpriseSearchSpecConfigRefArgs{...}
type EnterpriseSearchSpecConfigRefInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecConfigRefOutput() EnterpriseSearchSpecConfigRefOutput
	ToEnterpriseSearchSpecConfigRefOutputWithContext(context.Context) EnterpriseSearchSpecConfigRefOutput
}

// ConfigRef contains a reference to an existing Kubernetes Secret holding the Enterprise Search configuration.
// Configuration settings are merged and have precedence over settings specified in `config`.
type EnterpriseSearchSpecConfigRefArgs struct {
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (EnterpriseSearchSpecConfigRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecConfigRef)(nil)).Elem()
}

func (i EnterpriseSearchSpecConfigRefArgs) ToEnterpriseSearchSpecConfigRefOutput() EnterpriseSearchSpecConfigRefOutput {
	return i.ToEnterpriseSearchSpecConfigRefOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecConfigRefArgs) ToEnterpriseSearchSpecConfigRefOutputWithContext(ctx context.Context) EnterpriseSearchSpecConfigRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecConfigRefOutput)
}

func (i EnterpriseSearchSpecConfigRefArgs) ToEnterpriseSearchSpecConfigRefPtrOutput() EnterpriseSearchSpecConfigRefPtrOutput {
	return i.ToEnterpriseSearchSpecConfigRefPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecConfigRefArgs) ToEnterpriseSearchSpecConfigRefPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecConfigRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecConfigRefOutput).ToEnterpriseSearchSpecConfigRefPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecConfigRefPtrInput is an input type that accepts EnterpriseSearchSpecConfigRefArgs, EnterpriseSearchSpecConfigRefPtr and EnterpriseSearchSpecConfigRefPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecConfigRefPtrInput` via:
//
//	        EnterpriseSearchSpecConfigRefArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecConfigRefPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecConfigRefPtrOutput() EnterpriseSearchSpecConfigRefPtrOutput
	ToEnterpriseSearchSpecConfigRefPtrOutputWithContext(context.Context) EnterpriseSearchSpecConfigRefPtrOutput
}

type enterpriseSearchSpecConfigRefPtrType EnterpriseSearchSpecConfigRefArgs

func EnterpriseSearchSpecConfigRefPtr(v *EnterpriseSearchSpecConfigRefArgs) EnterpriseSearchSpecConfigRefPtrInput {
	return (*enterpriseSearchSpecConfigRefPtrType)(v)
}

func (*enterpriseSearchSpecConfigRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecConfigRef)(nil)).Elem()
}

func (i *enterpriseSearchSpecConfigRefPtrType) ToEnterpriseSearchSpecConfigRefPtrOutput() EnterpriseSearchSpecConfigRefPtrOutput {
	return i.ToEnterpriseSearchSpecConfigRefPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecConfigRefPtrType) ToEnterpriseSearchSpecConfigRefPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecConfigRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecConfigRefPtrOutput)
}

// ConfigRef contains a reference to an existing Kubernetes Secret holding the Enterprise Search configuration.
// Configuration settings are merged and have precedence over settings specified in `config`.
type EnterpriseSearchSpecConfigRefOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecConfigRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecConfigRef)(nil)).Elem()
}

func (o EnterpriseSearchSpecConfigRefOutput) ToEnterpriseSearchSpecConfigRefOutput() EnterpriseSearchSpecConfigRefOutput {
	return o
}

func (o EnterpriseSearchSpecConfigRefOutput) ToEnterpriseSearchSpecConfigRefOutputWithContext(ctx context.Context) EnterpriseSearchSpecConfigRefOutput {
	return o
}

func (o EnterpriseSearchSpecConfigRefOutput) ToEnterpriseSearchSpecConfigRefPtrOutput() EnterpriseSearchSpecConfigRefPtrOutput {
	return o.ToEnterpriseSearchSpecConfigRefPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecConfigRefOutput) ToEnterpriseSearchSpecConfigRefPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecConfigRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecConfigRef) *EnterpriseSearchSpecConfigRef {
		return &v
	}).(EnterpriseSearchSpecConfigRefPtrOutput)
}

// SecretName is the name of the secret.
func (o EnterpriseSearchSpecConfigRefOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecConfigRef) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchSpecConfigRefPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecConfigRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecConfigRef)(nil)).Elem()
}

func (o EnterpriseSearchSpecConfigRefPtrOutput) ToEnterpriseSearchSpecConfigRefPtrOutput() EnterpriseSearchSpecConfigRefPtrOutput {
	return o
}

func (o EnterpriseSearchSpecConfigRefPtrOutput) ToEnterpriseSearchSpecConfigRefPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecConfigRefPtrOutput {
	return o
}

func (o EnterpriseSearchSpecConfigRefPtrOutput) Elem() EnterpriseSearchSpecConfigRefOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecConfigRef) EnterpriseSearchSpecConfigRef {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecConfigRef
		return ret
	}).(EnterpriseSearchSpecConfigRefOutput)
}

// SecretName is the name of the secret.
func (o EnterpriseSearchSpecConfigRefPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// ElasticsearchRef is a reference to the Elasticsearch cluster running in the same Kubernetes cluster.
type EnterpriseSearchSpecElasticsearchRef struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name *string `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace *string `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName *string `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName *string `pulumi:"serviceName"`
}

// EnterpriseSearchSpecElasticsearchRefInput is an input type that accepts EnterpriseSearchSpecElasticsearchRefArgs and EnterpriseSearchSpecElasticsearchRefOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecElasticsearchRefInput` via:
//
//	EnterpriseSearchSpecElasticsearchRefArgs{...}
type EnterpriseSearchSpecElasticsearchRefInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecElasticsearchRefOutput() EnterpriseSearchSpecElasticsearchRefOutput
	ToEnterpriseSearchSpecElasticsearchRefOutputWithContext(context.Context) EnterpriseSearchSpecElasticsearchRefOutput
}

// ElasticsearchRef is a reference to the Elasticsearch cluster running in the same Kubernetes cluster.
type EnterpriseSearchSpecElasticsearchRefArgs struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
}

func (EnterpriseSearchSpecElasticsearchRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecElasticsearchRef)(nil)).Elem()
}

func (i EnterpriseSearchSpecElasticsearchRefArgs) ToEnterpriseSearchSpecElasticsearchRefOutput() EnterpriseSearchSpecElasticsearchRefOutput {
	return i.ToEnterpriseSearchSpecElasticsearchRefOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecElasticsearchRefArgs) ToEnterpriseSearchSpecElasticsearchRefOutputWithContext(ctx context.Context) EnterpriseSearchSpecElasticsearchRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecElasticsearchRefOutput)
}

func (i EnterpriseSearchSpecElasticsearchRefArgs) ToEnterpriseSearchSpecElasticsearchRefPtrOutput() EnterpriseSearchSpecElasticsearchRefPtrOutput {
	return i.ToEnterpriseSearchSpecElasticsearchRefPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecElasticsearchRefArgs) ToEnterpriseSearchSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecElasticsearchRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecElasticsearchRefOutput).ToEnterpriseSearchSpecElasticsearchRefPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecElasticsearchRefPtrInput is an input type that accepts EnterpriseSearchSpecElasticsearchRefArgs, EnterpriseSearchSpecElasticsearchRefPtr and EnterpriseSearchSpecElasticsearchRefPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecElasticsearchRefPtrInput` via:
//
//	        EnterpriseSearchSpecElasticsearchRefArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecElasticsearchRefPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecElasticsearchRefPtrOutput() EnterpriseSearchSpecElasticsearchRefPtrOutput
	ToEnterpriseSearchSpecElasticsearchRefPtrOutputWithContext(context.Context) EnterpriseSearchSpecElasticsearchRefPtrOutput
}

type enterpriseSearchSpecElasticsearchRefPtrType EnterpriseSearchSpecElasticsearchRefArgs

func EnterpriseSearchSpecElasticsearchRefPtr(v *EnterpriseSearchSpecElasticsearchRefArgs) EnterpriseSearchSpecElasticsearchRefPtrInput {
	return (*enterpriseSearchSpecElasticsearchRefPtrType)(v)
}

func (*enterpriseSearchSpecElasticsearchRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecElasticsearchRef)(nil)).Elem()
}

func (i *enterpriseSearchSpecElasticsearchRefPtrType) ToEnterpriseSearchSpecElasticsearchRefPtrOutput() EnterpriseSearchSpecElasticsearchRefPtrOutput {
	return i.ToEnterpriseSearchSpecElasticsearchRefPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecElasticsearchRefPtrType) ToEnterpriseSearchSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecElasticsearchRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecElasticsearchRefPtrOutput)
}

// ElasticsearchRef is a reference to the Elasticsearch cluster running in the same Kubernetes cluster.
type EnterpriseSearchSpecElasticsearchRefOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecElasticsearchRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecElasticsearchRef)(nil)).Elem()
}

func (o EnterpriseSearchSpecElasticsearchRefOutput) ToEnterpriseSearchSpecElasticsearchRefOutput() EnterpriseSearchSpecElasticsearchRefOutput {
	return o
}

func (o EnterpriseSearchSpecElasticsearchRefOutput) ToEnterpriseSearchSpecElasticsearchRefOutputWithContext(ctx context.Context) EnterpriseSearchSpecElasticsearchRefOutput {
	return o
}

func (o EnterpriseSearchSpecElasticsearchRefOutput) ToEnterpriseSearchSpecElasticsearchRefPtrOutput() EnterpriseSearchSpecElasticsearchRefPtrOutput {
	return o.ToEnterpriseSearchSpecElasticsearchRefPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecElasticsearchRefOutput) ToEnterpriseSearchSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecElasticsearchRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecElasticsearchRef) *EnterpriseSearchSpecElasticsearchRef {
		return &v
	}).(EnterpriseSearchSpecElasticsearchRefPtrOutput)
}

// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
func (o EnterpriseSearchSpecElasticsearchRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecElasticsearchRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o EnterpriseSearchSpecElasticsearchRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecElasticsearchRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
// Elastic resource not managed by the operator. The referenced secret must contain the following:
//   - `url`: the URL to reach the Elastic resource
//   - `username`: the username of the user to be authenticated to the Elastic resource
//   - `password`: the password of the user to be authenticated to the Elastic resource
//   - `ca.crt`: the CA certificate in PEM format (optional)
//   - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
//     This field cannot be used in combination with the other fields name, namespace or serviceName.
func (o EnterpriseSearchSpecElasticsearchRefOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecElasticsearchRef) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
// the referenced resource is used.
func (o EnterpriseSearchSpecElasticsearchRefOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecElasticsearchRef) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchSpecElasticsearchRefPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecElasticsearchRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecElasticsearchRef)(nil)).Elem()
}

func (o EnterpriseSearchSpecElasticsearchRefPtrOutput) ToEnterpriseSearchSpecElasticsearchRefPtrOutput() EnterpriseSearchSpecElasticsearchRefPtrOutput {
	return o
}

func (o EnterpriseSearchSpecElasticsearchRefPtrOutput) ToEnterpriseSearchSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecElasticsearchRefPtrOutput {
	return o
}

func (o EnterpriseSearchSpecElasticsearchRefPtrOutput) Elem() EnterpriseSearchSpecElasticsearchRefOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecElasticsearchRef) EnterpriseSearchSpecElasticsearchRef {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecElasticsearchRef
		return ret
	}).(EnterpriseSearchSpecElasticsearchRefOutput)
}

// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
func (o EnterpriseSearchSpecElasticsearchRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o EnterpriseSearchSpecElasticsearchRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
// Elastic resource not managed by the operator. The referenced secret must contain the following:
//   - `url`: the URL to reach the Elastic resource
//   - `username`: the username of the user to be authenticated to the Elastic resource
//   - `password`: the password of the user to be authenticated to the Elastic resource
//   - `ca.crt`: the CA certificate in PEM format (optional)
//   - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
//     This field cannot be used in combination with the other fields name, namespace or serviceName.
func (o EnterpriseSearchSpecElasticsearchRefPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
// the referenced resource is used.
func (o EnterpriseSearchSpecElasticsearchRefPtrOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return v.ServiceName
	}).(pulumi.StringPtrOutput)
}

// HTTP holds the HTTP layer configuration for Enterprise Search resource.
type EnterpriseSearchSpecHttp struct {
	// Service defines the template for the associated Kubernetes Service object.
	Service *EnterpriseSearchSpecHttpService `pulumi:"service"`
	// TLS defines options for configuring TLS for HTTP.
	Tls *EnterpriseSearchSpecHttpTls `pulumi:"tls"`
}

// EnterpriseSearchSpecHttpInput is an input type that accepts EnterpriseSearchSpecHttpArgs and EnterpriseSearchSpecHttpOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpInput` via:
//
//	EnterpriseSearchSpecHttpArgs{...}
type EnterpriseSearchSpecHttpInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpOutput() EnterpriseSearchSpecHttpOutput
	ToEnterpriseSearchSpecHttpOutputWithContext(context.Context) EnterpriseSearchSpecHttpOutput
}

// HTTP holds the HTTP layer configuration for Enterprise Search resource.
type EnterpriseSearchSpecHttpArgs struct {
	// Service defines the template for the associated Kubernetes Service object.
	Service EnterpriseSearchSpecHttpServicePtrInput `pulumi:"service"`
	// TLS defines options for configuring TLS for HTTP.
	Tls EnterpriseSearchSpecHttpTlsPtrInput `pulumi:"tls"`
}

func (EnterpriseSearchSpecHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttp)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpArgs) ToEnterpriseSearchSpecHttpOutput() EnterpriseSearchSpecHttpOutput {
	return i.ToEnterpriseSearchSpecHttpOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpArgs) ToEnterpriseSearchSpecHttpOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpOutput)
}

func (i EnterpriseSearchSpecHttpArgs) ToEnterpriseSearchSpecHttpPtrOutput() EnterpriseSearchSpecHttpPtrOutput {
	return i.ToEnterpriseSearchSpecHttpPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpArgs) ToEnterpriseSearchSpecHttpPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpOutput).ToEnterpriseSearchSpecHttpPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpPtrInput is an input type that accepts EnterpriseSearchSpecHttpArgs, EnterpriseSearchSpecHttpPtr and EnterpriseSearchSpecHttpPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpPtrInput` via:
//
//	        EnterpriseSearchSpecHttpArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecHttpPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpPtrOutput() EnterpriseSearchSpecHttpPtrOutput
	ToEnterpriseSearchSpecHttpPtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpPtrOutput
}

type enterpriseSearchSpecHttpPtrType EnterpriseSearchSpecHttpArgs

func EnterpriseSearchSpecHttpPtr(v *EnterpriseSearchSpecHttpArgs) EnterpriseSearchSpecHttpPtrInput {
	return (*enterpriseSearchSpecHttpPtrType)(v)
}

func (*enterpriseSearchSpecHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttp)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpPtrType) ToEnterpriseSearchSpecHttpPtrOutput() EnterpriseSearchSpecHttpPtrOutput {
	return i.ToEnterpriseSearchSpecHttpPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpPtrType) ToEnterpriseSearchSpecHttpPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpPtrOutput)
}

// HTTP holds the HTTP layer configuration for Enterprise Search resource.
type EnterpriseSearchSpecHttpOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttp)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpOutput) ToEnterpriseSearchSpecHttpOutput() EnterpriseSearchSpecHttpOutput {
	return o
}

func (o EnterpriseSearchSpecHttpOutput) ToEnterpriseSearchSpecHttpOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpOutput {
	return o
}

func (o EnterpriseSearchSpecHttpOutput) ToEnterpriseSearchSpecHttpPtrOutput() EnterpriseSearchSpecHttpPtrOutput {
	return o.ToEnterpriseSearchSpecHttpPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpOutput) ToEnterpriseSearchSpecHttpPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecHttp) *EnterpriseSearchSpecHttp {
		return &v
	}).(EnterpriseSearchSpecHttpPtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
func (o EnterpriseSearchSpecHttpOutput) Service() EnterpriseSearchSpecHttpServicePtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttp) *EnterpriseSearchSpecHttpService { return v.Service }).(EnterpriseSearchSpecHttpServicePtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
func (o EnterpriseSearchSpecHttpOutput) Tls() EnterpriseSearchSpecHttpTlsPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttp) *EnterpriseSearchSpecHttpTls { return v.Tls }).(EnterpriseSearchSpecHttpTlsPtrOutput)
}

type EnterpriseSearchSpecHttpPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttp)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpPtrOutput) ToEnterpriseSearchSpecHttpPtrOutput() EnterpriseSearchSpecHttpPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpPtrOutput) ToEnterpriseSearchSpecHttpPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpPtrOutput) Elem() EnterpriseSearchSpecHttpOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttp) EnterpriseSearchSpecHttp {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecHttp
		return ret
	}).(EnterpriseSearchSpecHttpOutput)
}

// Service defines the template for the associated Kubernetes Service object.
func (o EnterpriseSearchSpecHttpPtrOutput) Service() EnterpriseSearchSpecHttpServicePtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttp) *EnterpriseSearchSpecHttpService {
		if v == nil {
			return nil
		}
		return v.Service
	}).(EnterpriseSearchSpecHttpServicePtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
func (o EnterpriseSearchSpecHttpPtrOutput) Tls() EnterpriseSearchSpecHttpTlsPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttp) *EnterpriseSearchSpecHttpTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(EnterpriseSearchSpecHttpTlsPtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
type EnterpriseSearchSpecHttpService struct {
	// ObjectMeta is the metadata of the service.
	// The name and namespace provided here are managed by ECK and will be ignored.
	Metadata *EnterpriseSearchSpecHttpServiceMetadata `pulumi:"metadata"`
	// Spec is the specification of the service.
	Spec *EnterpriseSearchSpecHttpServiceSpec `pulumi:"spec"`
}

// EnterpriseSearchSpecHttpServiceInput is an input type that accepts EnterpriseSearchSpecHttpServiceArgs and EnterpriseSearchSpecHttpServiceOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceInput` via:
//
//	EnterpriseSearchSpecHttpServiceArgs{...}
type EnterpriseSearchSpecHttpServiceInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceOutput() EnterpriseSearchSpecHttpServiceOutput
	ToEnterpriseSearchSpecHttpServiceOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceOutput
}

// Service defines the template for the associated Kubernetes Service object.
type EnterpriseSearchSpecHttpServiceArgs struct {
	// ObjectMeta is the metadata of the service.
	// The name and namespace provided here are managed by ECK and will be ignored.
	Metadata EnterpriseSearchSpecHttpServiceMetadataPtrInput `pulumi:"metadata"`
	// Spec is the specification of the service.
	Spec EnterpriseSearchSpecHttpServiceSpecPtrInput `pulumi:"spec"`
}

func (EnterpriseSearchSpecHttpServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpService)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpServiceArgs) ToEnterpriseSearchSpecHttpServiceOutput() EnterpriseSearchSpecHttpServiceOutput {
	return i.ToEnterpriseSearchSpecHttpServiceOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceArgs) ToEnterpriseSearchSpecHttpServiceOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceOutput)
}

func (i EnterpriseSearchSpecHttpServiceArgs) ToEnterpriseSearchSpecHttpServicePtrOutput() EnterpriseSearchSpecHttpServicePtrOutput {
	return i.ToEnterpriseSearchSpecHttpServicePtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceArgs) ToEnterpriseSearchSpecHttpServicePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceOutput).ToEnterpriseSearchSpecHttpServicePtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpServicePtrInput is an input type that accepts EnterpriseSearchSpecHttpServiceArgs, EnterpriseSearchSpecHttpServicePtr and EnterpriseSearchSpecHttpServicePtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServicePtrInput` via:
//
//	        EnterpriseSearchSpecHttpServiceArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecHttpServicePtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServicePtrOutput() EnterpriseSearchSpecHttpServicePtrOutput
	ToEnterpriseSearchSpecHttpServicePtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpServicePtrOutput
}

type enterpriseSearchSpecHttpServicePtrType EnterpriseSearchSpecHttpServiceArgs

func EnterpriseSearchSpecHttpServicePtr(v *EnterpriseSearchSpecHttpServiceArgs) EnterpriseSearchSpecHttpServicePtrInput {
	return (*enterpriseSearchSpecHttpServicePtrType)(v)
}

func (*enterpriseSearchSpecHttpServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpService)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpServicePtrType) ToEnterpriseSearchSpecHttpServicePtrOutput() EnterpriseSearchSpecHttpServicePtrOutput {
	return i.ToEnterpriseSearchSpecHttpServicePtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpServicePtrType) ToEnterpriseSearchSpecHttpServicePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServicePtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
type EnterpriseSearchSpecHttpServiceOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpService)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceOutput) ToEnterpriseSearchSpecHttpServiceOutput() EnterpriseSearchSpecHttpServiceOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceOutput) ToEnterpriseSearchSpecHttpServiceOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceOutput) ToEnterpriseSearchSpecHttpServicePtrOutput() EnterpriseSearchSpecHttpServicePtrOutput {
	return o.ToEnterpriseSearchSpecHttpServicePtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpServiceOutput) ToEnterpriseSearchSpecHttpServicePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecHttpService) *EnterpriseSearchSpecHttpService {
		return &v
	}).(EnterpriseSearchSpecHttpServicePtrOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
func (o EnterpriseSearchSpecHttpServiceOutput) Metadata() EnterpriseSearchSpecHttpServiceMetadataPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpService) *EnterpriseSearchSpecHttpServiceMetadata { return v.Metadata }).(EnterpriseSearchSpecHttpServiceMetadataPtrOutput)
}

// Spec is the specification of the service.
func (o EnterpriseSearchSpecHttpServiceOutput) Spec() EnterpriseSearchSpecHttpServiceSpecPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpService) *EnterpriseSearchSpecHttpServiceSpec { return v.Spec }).(EnterpriseSearchSpecHttpServiceSpecPtrOutput)
}

type EnterpriseSearchSpecHttpServicePtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpService)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServicePtrOutput) ToEnterpriseSearchSpecHttpServicePtrOutput() EnterpriseSearchSpecHttpServicePtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServicePtrOutput) ToEnterpriseSearchSpecHttpServicePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServicePtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServicePtrOutput) Elem() EnterpriseSearchSpecHttpServiceOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpService) EnterpriseSearchSpecHttpService {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecHttpService
		return ret
	}).(EnterpriseSearchSpecHttpServiceOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
func (o EnterpriseSearchSpecHttpServicePtrOutput) Metadata() EnterpriseSearchSpecHttpServiceMetadataPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpService) *EnterpriseSearchSpecHttpServiceMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(EnterpriseSearchSpecHttpServiceMetadataPtrOutput)
}

// Spec is the specification of the service.
func (o EnterpriseSearchSpecHttpServicePtrOutput) Spec() EnterpriseSearchSpecHttpServiceSpecPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpService) *EnterpriseSearchSpecHttpServiceSpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(EnterpriseSearchSpecHttpServiceSpecPtrOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type EnterpriseSearchSpecHttpServiceMetadata struct {
	Annotations map[string]string `pulumi:"annotations"`
	Finalizers  []string          `pulumi:"finalizers"`
	Labels      map[string]string `pulumi:"labels"`
	Name        *string           `pulumi:"name"`
	Namespace   *string           `pulumi:"namespace"`
}

// EnterpriseSearchSpecHttpServiceMetadataInput is an input type that accepts EnterpriseSearchSpecHttpServiceMetadataArgs and EnterpriseSearchSpecHttpServiceMetadataOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceMetadataInput` via:
//
//	EnterpriseSearchSpecHttpServiceMetadataArgs{...}
type EnterpriseSearchSpecHttpServiceMetadataInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceMetadataOutput() EnterpriseSearchSpecHttpServiceMetadataOutput
	ToEnterpriseSearchSpecHttpServiceMetadataOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceMetadataOutput
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type EnterpriseSearchSpecHttpServiceMetadataArgs struct {
	Annotations pulumi.StringMapInput   `pulumi:"annotations"`
	Finalizers  pulumi.StringArrayInput `pulumi:"finalizers"`
	Labels      pulumi.StringMapInput   `pulumi:"labels"`
	Name        pulumi.StringPtrInput   `pulumi:"name"`
	Namespace   pulumi.StringPtrInput   `pulumi:"namespace"`
}

func (EnterpriseSearchSpecHttpServiceMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceMetadata)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpServiceMetadataArgs) ToEnterpriseSearchSpecHttpServiceMetadataOutput() EnterpriseSearchSpecHttpServiceMetadataOutput {
	return i.ToEnterpriseSearchSpecHttpServiceMetadataOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceMetadataArgs) ToEnterpriseSearchSpecHttpServiceMetadataOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceMetadataOutput)
}

func (i EnterpriseSearchSpecHttpServiceMetadataArgs) ToEnterpriseSearchSpecHttpServiceMetadataPtrOutput() EnterpriseSearchSpecHttpServiceMetadataPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceMetadataPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceMetadataArgs) ToEnterpriseSearchSpecHttpServiceMetadataPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceMetadataOutput).ToEnterpriseSearchSpecHttpServiceMetadataPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpServiceMetadataPtrInput is an input type that accepts EnterpriseSearchSpecHttpServiceMetadataArgs, EnterpriseSearchSpecHttpServiceMetadataPtr and EnterpriseSearchSpecHttpServiceMetadataPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceMetadataPtrInput` via:
//
//	        EnterpriseSearchSpecHttpServiceMetadataArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecHttpServiceMetadataPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceMetadataPtrOutput() EnterpriseSearchSpecHttpServiceMetadataPtrOutput
	ToEnterpriseSearchSpecHttpServiceMetadataPtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceMetadataPtrOutput
}

type enterpriseSearchSpecHttpServiceMetadataPtrType EnterpriseSearchSpecHttpServiceMetadataArgs

func EnterpriseSearchSpecHttpServiceMetadataPtr(v *EnterpriseSearchSpecHttpServiceMetadataArgs) EnterpriseSearchSpecHttpServiceMetadataPtrInput {
	return (*enterpriseSearchSpecHttpServiceMetadataPtrType)(v)
}

func (*enterpriseSearchSpecHttpServiceMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceMetadata)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpServiceMetadataPtrType) ToEnterpriseSearchSpecHttpServiceMetadataPtrOutput() EnterpriseSearchSpecHttpServiceMetadataPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceMetadataPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpServiceMetadataPtrType) ToEnterpriseSearchSpecHttpServiceMetadataPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceMetadataPtrOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type EnterpriseSearchSpecHttpServiceMetadataOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceMetadata)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceMetadataOutput) ToEnterpriseSearchSpecHttpServiceMetadataOutput() EnterpriseSearchSpecHttpServiceMetadataOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceMetadataOutput) ToEnterpriseSearchSpecHttpServiceMetadataOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceMetadataOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceMetadataOutput) ToEnterpriseSearchSpecHttpServiceMetadataPtrOutput() EnterpriseSearchSpecHttpServiceMetadataPtrOutput {
	return o.ToEnterpriseSearchSpecHttpServiceMetadataPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpServiceMetadataOutput) ToEnterpriseSearchSpecHttpServiceMetadataPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecHttpServiceMetadata) *EnterpriseSearchSpecHttpServiceMetadata {
		return &v
	}).(EnterpriseSearchSpecHttpServiceMetadataPtrOutput)
}

func (o EnterpriseSearchSpecHttpServiceMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o EnterpriseSearchSpecHttpServiceMetadataOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceMetadata) []string { return v.Finalizers }).(pulumi.StringArrayOutput)
}

func (o EnterpriseSearchSpecHttpServiceMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o EnterpriseSearchSpecHttpServiceMetadataOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceMetadata) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o EnterpriseSearchSpecHttpServiceMetadataOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceMetadata) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchSpecHttpServiceMetadataPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceMetadata)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceMetadataPtrOutput) ToEnterpriseSearchSpecHttpServiceMetadataPtrOutput() EnterpriseSearchSpecHttpServiceMetadataPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceMetadataPtrOutput) ToEnterpriseSearchSpecHttpServiceMetadataPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceMetadataPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceMetadataPtrOutput) Elem() EnterpriseSearchSpecHttpServiceMetadataOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceMetadata) EnterpriseSearchSpecHttpServiceMetadata {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecHttpServiceMetadata
		return ret
	}).(EnterpriseSearchSpecHttpServiceMetadataOutput)
}

func (o EnterpriseSearchSpecHttpServiceMetadataPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o EnterpriseSearchSpecHttpServiceMetadataPtrOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceMetadata) []string {
		if v == nil {
			return nil
		}
		return v.Finalizers
	}).(pulumi.StringArrayOutput)
}

func (o EnterpriseSearchSpecHttpServiceMetadataPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

func (o EnterpriseSearchSpecHttpServiceMetadataPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o EnterpriseSearchSpecHttpServiceMetadataPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type EnterpriseSearchSpecHttpServiceMetadataAnnotations struct {
}

type EnterpriseSearchSpecHttpServiceMetadataLabels struct {
}

// Spec is the specification of the service.
type EnterpriseSearchSpecHttpServiceSpec struct {
	// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
	// allocated for services with type LoadBalancer.  Default is "true". It
	// may be set to "false" if the cluster load-balancer does not rely on
	// NodePorts.  If the caller requests specific NodePorts (by specifying a
	// value), those requests will be respected, regardless of this field.
	// This field may only be set for services with type LoadBalancer and will
	// be cleared if the type is changed to any other type.
	AllocateLoadBalancerNodePorts *bool `pulumi:"allocateLoadBalancerNodePorts"`
	// clusterIP is the IP address of the service and is usually assigned
	// randomly. If an address is specified manually, is in-range (as per
	// system configuration), and is not in use, it will be allocated to the
	// service; otherwise creation of the service will fail. This field may not
	// be changed through updates unless the type field is also being changed
	// to ExternalName (which requires this field to be blank) or the type
	// field is being changed from ExternalName (in which case this field may
	// optionally be specified, as describe above).  Valid values are "None",
	// empty string (""), or a valid IP address. Setting this to "None" makes a
	// "headless service" (no virtual IP), which is useful when direct endpoint
	// connections are preferred and proxying is not required.  Only applies to
	// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
	// when creating a Service of type ExternalName, creation will fail. This
	// field will be wiped when updating a Service to type ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP *string `pulumi:"clusterIP"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are
	// usually assigned randomly.  If an address is specified manually, is
	// in-range (as per system configuration), and is not in use, it will be
	// allocated to the service; otherwise creation of the service will fail.
	// This field may not be changed through updates unless the type field is
	// also being changed to ExternalName (which requires this field to be
	// empty) or the type field is being changed from ExternalName (in which
	// case this field may optionally be specified, as describe above).  Valid
	// values are "None", empty string (""), or a valid IP address.  Setting
	// this to "None" makes a "headless service" (no virtual IP), which is
	// useful when direct endpoint connections are preferred and proxying is
	// not required.  Only applies to types ClusterIP, NodePort, and
	// LoadBalancer. If this field is specified when creating a Service of type
	// ExternalName, creation will fail. This field will be wiped when updating
	// a Service to type ExternalName.  If this field is not specified, it will
	// be initialized from the clusterIP field.  If this field is specified,
	// clients must ensure that clusterIPs[0] and clusterIP have the same
	// value.
	//
	// This field may hold a maximum of two entries (dual-stack IPs, in either order).
	// These IPs must correspond to the values of the ipFamilies field. Both
	// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIPs []string `pulumi:"clusterIPs"`
	// externalIPs is a list of IP addresses for which nodes in the cluster
	// will also accept traffic for this service.  These IPs are not managed by
	// Kubernetes.  The user is responsible for ensuring that traffic arrives
	// at a node with this IP.  A common example is external load-balancers
	// that are not part of the Kubernetes system.
	ExternalIPs []string `pulumi:"externalIPs"`
	// externalName is the external reference that discovery mechanisms will
	// return as an alias for this service (e.g. a DNS CNAME record). No
	// proxying will be involved.  Must be a lowercase RFC-1123 hostname
	// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName *string `pulumi:"externalName"`
	// externalTrafficPolicy describes how nodes distribute service traffic they
	// receive on one of the Service's "externally-facing" addresses (NodePorts,
	// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
	// the service in a way that assumes that external load balancers will take care
	// of balancing the service traffic between nodes, and so each node will deliver
	// traffic only to the node-local endpoints of the service, without masquerading
	// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
	// be dropped.) The default value, "Cluster", uses the standard behavior of
	// routing to all endpoints evenly (possibly modified by topology and other
	// features). Note that traffic sent to an External IP or LoadBalancer IP from
	// within the cluster will always get "Cluster" semantics, but clients sending to
	// a NodePort from within the cluster may need to take traffic policy into account
	// when picking a node.
	ExternalTrafficPolicy *string `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service.
	// This only applies when type is set to LoadBalancer and
	// externalTrafficPolicy is set to Local. If a value is specified, is
	// in-range, and is not in use, it will be used.  If not specified, a value
	// will be automatically allocated.  External systems (e.g. load-balancers)
	// can use this port to determine if a given node holds endpoints for this
	// service or not.  If this field is specified when creating a Service
	// which does not need it, creation will fail. This field will be wiped
	// when updating a Service to no longer need it (e.g. changing type).
	// This field cannot be updated once set.
	HealthCheckNodePort *int `pulumi:"healthCheckNodePort"`
	// InternalTrafficPolicy describes how nodes distribute service traffic they
	// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
	// only want to talk to endpoints of the service on the same node as the pod,
	// dropping the traffic if there are no local endpoints. The default value,
	// "Cluster", uses the standard behavior of routing to all endpoints evenly
	// (possibly modified by topology and other features).
	InternalTrafficPolicy *string `pulumi:"internalTrafficPolicy"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
	// service. This field is usually assigned automatically based on cluster
	// configuration and the ipFamilyPolicy field. If this field is specified
	// manually, the requested family is available in the cluster,
	// and ipFamilyPolicy allows it, it will be used; otherwise creation of
	// the service will fail. This field is conditionally mutable: it allows
	// for adding or removing a secondary IP family, but it does not allow
	// changing the primary IP family of the Service. Valid values are "IPv4"
	// and "IPv6".  This field only applies to Services of types ClusterIP,
	// NodePort, and LoadBalancer, and does apply to "headless" services.
	// This field will be wiped when updating a Service to type ExternalName.
	//
	// This field may hold a maximum of two entries (dual-stack families, in
	// either order).  These families must correspond to the values of the
	// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
	// governed by the ipFamilyPolicy field.
	IpFamilies []string `pulumi:"ipFamilies"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by
	// this Service. If there is no value provided, then this field will be set
	// to SingleStack. Services can be "SingleStack" (a single IP family),
	// "PreferDualStack" (two IP families on dual-stack configured clusters or
	// a single IP family on single-stack clusters), or "RequireDualStack"
	// (two IP families on dual-stack configured clusters, otherwise fail). The
	// ipFamilies and clusterIPs fields depend on the value of this field. This
	// field will be wiped when updating a service to type ExternalName.
	IpFamilyPolicy *string `pulumi:"ipFamilyPolicy"`
	// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
	// If specified, the value of this field must be a label-style identifier, with an optional prefix,
	// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
	// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
	// balancer implementation is used, today this is typically done through the cloud provider integration,
	// but should apply for any default implementation. If set, it is assumed that a load balancer
	// implementation is watching for Services with a matching class. Any default load balancer
	// implementation (e.g. cloud providers) should ignore Services that set this field.
	// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
	// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass *string `pulumi:"loadBalancerClass"`
	// Only applies to Service Type: LoadBalancer.
	// This feature depends on whether the underlying cloud-provider supports specifying
	// the loadBalancerIP when a load balancer is created.
	// This field will be ignored if the cloud-provider does not support the feature.
	// Deprecated: This field was under-specified and its meaning varies across implementations.
	// Using it is non-portable and it may not support dual-stack.
	// Users are encouraged to use implementation-specific annotations when available.
	LoadBalancerIP *string `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider
	// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
	// cloud-provider does not support the feature."
	// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
	LoadBalancerSourceRanges []string `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports []EnterpriseSearchSpecHttpServiceSpecPorts `pulumi:"ports"`
	// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
	// Service should disregard any indications of ready/not-ready.
	// The primary use case for setting this field is for a StatefulSet's Headless Service to
	// propagate SRV DNS records for its Pods for the purpose of peer discovery.
	// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
	// Services interpret this to mean that all endpoints are considered "ready" even if the
	// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
	// through the Endpoints or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses *bool `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this
	// selector. If empty or not present, the service is assumed to have an
	// external process managing its endpoints, which Kubernetes will not
	// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
	// Ignored if type is ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector map[string]string `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity.
	// Enable client IP based session affinity.
	// Must be ClientIP or None.
	// Defaults to None.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity *string `pulumi:"sessionAffinity"`
	// sessionAffinityConfig contains the configurations of session affinity.
	SessionAffinityConfig *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig `pulumi:"sessionAffinityConfig"`
	// TrafficDistribution offers a way to express preferences for how traffic is
	// distributed to Service endpoints. Implementations can use this field as a
	// hint, but are not required to guarantee strict adherence. If the field is
	// not set, the implementation will apply its default routing strategy. If set
	// to "PreferClose", implementations should prioritize endpoints that are
	// topologically close (e.g., same zone).
	// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
	TrafficDistribution *string `pulumi:"trafficDistribution"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid
	// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
	// "ClusterIP" allocates a cluster-internal IP address for load-balancing
	// to endpoints. Endpoints are determined by the selector or if that is not
	// specified, by manual construction of an Endpoints object or
	// EndpointSlice objects. If clusterIP is "None", no virtual IP is
	// allocated and the endpoints are published as a set of endpoints rather
	// than a virtual IP.
	// "NodePort" builds on ClusterIP and allocates a port on every node which
	// routes to the same endpoints as the clusterIP.
	// "LoadBalancer" builds on NodePort and creates an external load-balancer
	// (if supported in the current cloud) which routes to the same endpoints
	// as the clusterIP.
	// "ExternalName" aliases this service to the specified externalName.
	// Several other fields do not apply to ExternalName services.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type *string `pulumi:"type"`
}

// EnterpriseSearchSpecHttpServiceSpecInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecArgs and EnterpriseSearchSpecHttpServiceSpecOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecInput` via:
//
//	EnterpriseSearchSpecHttpServiceSpecArgs{...}
type EnterpriseSearchSpecHttpServiceSpecInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecOutput() EnterpriseSearchSpecHttpServiceSpecOutput
	ToEnterpriseSearchSpecHttpServiceSpecOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecOutput
}

// Spec is the specification of the service.
type EnterpriseSearchSpecHttpServiceSpecArgs struct {
	// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
	// allocated for services with type LoadBalancer.  Default is "true". It
	// may be set to "false" if the cluster load-balancer does not rely on
	// NodePorts.  If the caller requests specific NodePorts (by specifying a
	// value), those requests will be respected, regardless of this field.
	// This field may only be set for services with type LoadBalancer and will
	// be cleared if the type is changed to any other type.
	AllocateLoadBalancerNodePorts pulumi.BoolPtrInput `pulumi:"allocateLoadBalancerNodePorts"`
	// clusterIP is the IP address of the service and is usually assigned
	// randomly. If an address is specified manually, is in-range (as per
	// system configuration), and is not in use, it will be allocated to the
	// service; otherwise creation of the service will fail. This field may not
	// be changed through updates unless the type field is also being changed
	// to ExternalName (which requires this field to be blank) or the type
	// field is being changed from ExternalName (in which case this field may
	// optionally be specified, as describe above).  Valid values are "None",
	// empty string (""), or a valid IP address. Setting this to "None" makes a
	// "headless service" (no virtual IP), which is useful when direct endpoint
	// connections are preferred and proxying is not required.  Only applies to
	// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
	// when creating a Service of type ExternalName, creation will fail. This
	// field will be wiped when updating a Service to type ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP pulumi.StringPtrInput `pulumi:"clusterIP"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are
	// usually assigned randomly.  If an address is specified manually, is
	// in-range (as per system configuration), and is not in use, it will be
	// allocated to the service; otherwise creation of the service will fail.
	// This field may not be changed through updates unless the type field is
	// also being changed to ExternalName (which requires this field to be
	// empty) or the type field is being changed from ExternalName (in which
	// case this field may optionally be specified, as describe above).  Valid
	// values are "None", empty string (""), or a valid IP address.  Setting
	// this to "None" makes a "headless service" (no virtual IP), which is
	// useful when direct endpoint connections are preferred and proxying is
	// not required.  Only applies to types ClusterIP, NodePort, and
	// LoadBalancer. If this field is specified when creating a Service of type
	// ExternalName, creation will fail. This field will be wiped when updating
	// a Service to type ExternalName.  If this field is not specified, it will
	// be initialized from the clusterIP field.  If this field is specified,
	// clients must ensure that clusterIPs[0] and clusterIP have the same
	// value.
	//
	// This field may hold a maximum of two entries (dual-stack IPs, in either order).
	// These IPs must correspond to the values of the ipFamilies field. Both
	// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIPs pulumi.StringArrayInput `pulumi:"clusterIPs"`
	// externalIPs is a list of IP addresses for which nodes in the cluster
	// will also accept traffic for this service.  These IPs are not managed by
	// Kubernetes.  The user is responsible for ensuring that traffic arrives
	// at a node with this IP.  A common example is external load-balancers
	// that are not part of the Kubernetes system.
	ExternalIPs pulumi.StringArrayInput `pulumi:"externalIPs"`
	// externalName is the external reference that discovery mechanisms will
	// return as an alias for this service (e.g. a DNS CNAME record). No
	// proxying will be involved.  Must be a lowercase RFC-1123 hostname
	// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName pulumi.StringPtrInput `pulumi:"externalName"`
	// externalTrafficPolicy describes how nodes distribute service traffic they
	// receive on one of the Service's "externally-facing" addresses (NodePorts,
	// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
	// the service in a way that assumes that external load balancers will take care
	// of balancing the service traffic between nodes, and so each node will deliver
	// traffic only to the node-local endpoints of the service, without masquerading
	// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
	// be dropped.) The default value, "Cluster", uses the standard behavior of
	// routing to all endpoints evenly (possibly modified by topology and other
	// features). Note that traffic sent to an External IP or LoadBalancer IP from
	// within the cluster will always get "Cluster" semantics, but clients sending to
	// a NodePort from within the cluster may need to take traffic policy into account
	// when picking a node.
	ExternalTrafficPolicy pulumi.StringPtrInput `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service.
	// This only applies when type is set to LoadBalancer and
	// externalTrafficPolicy is set to Local. If a value is specified, is
	// in-range, and is not in use, it will be used.  If not specified, a value
	// will be automatically allocated.  External systems (e.g. load-balancers)
	// can use this port to determine if a given node holds endpoints for this
	// service or not.  If this field is specified when creating a Service
	// which does not need it, creation will fail. This field will be wiped
	// when updating a Service to no longer need it (e.g. changing type).
	// This field cannot be updated once set.
	HealthCheckNodePort pulumi.IntPtrInput `pulumi:"healthCheckNodePort"`
	// InternalTrafficPolicy describes how nodes distribute service traffic they
	// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
	// only want to talk to endpoints of the service on the same node as the pod,
	// dropping the traffic if there are no local endpoints. The default value,
	// "Cluster", uses the standard behavior of routing to all endpoints evenly
	// (possibly modified by topology and other features).
	InternalTrafficPolicy pulumi.StringPtrInput `pulumi:"internalTrafficPolicy"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
	// service. This field is usually assigned automatically based on cluster
	// configuration and the ipFamilyPolicy field. If this field is specified
	// manually, the requested family is available in the cluster,
	// and ipFamilyPolicy allows it, it will be used; otherwise creation of
	// the service will fail. This field is conditionally mutable: it allows
	// for adding or removing a secondary IP family, but it does not allow
	// changing the primary IP family of the Service. Valid values are "IPv4"
	// and "IPv6".  This field only applies to Services of types ClusterIP,
	// NodePort, and LoadBalancer, and does apply to "headless" services.
	// This field will be wiped when updating a Service to type ExternalName.
	//
	// This field may hold a maximum of two entries (dual-stack families, in
	// either order).  These families must correspond to the values of the
	// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
	// governed by the ipFamilyPolicy field.
	IpFamilies pulumi.StringArrayInput `pulumi:"ipFamilies"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by
	// this Service. If there is no value provided, then this field will be set
	// to SingleStack. Services can be "SingleStack" (a single IP family),
	// "PreferDualStack" (two IP families on dual-stack configured clusters or
	// a single IP family on single-stack clusters), or "RequireDualStack"
	// (two IP families on dual-stack configured clusters, otherwise fail). The
	// ipFamilies and clusterIPs fields depend on the value of this field. This
	// field will be wiped when updating a service to type ExternalName.
	IpFamilyPolicy pulumi.StringPtrInput `pulumi:"ipFamilyPolicy"`
	// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
	// If specified, the value of this field must be a label-style identifier, with an optional prefix,
	// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
	// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
	// balancer implementation is used, today this is typically done through the cloud provider integration,
	// but should apply for any default implementation. If set, it is assumed that a load balancer
	// implementation is watching for Services with a matching class. Any default load balancer
	// implementation (e.g. cloud providers) should ignore Services that set this field.
	// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
	// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass pulumi.StringPtrInput `pulumi:"loadBalancerClass"`
	// Only applies to Service Type: LoadBalancer.
	// This feature depends on whether the underlying cloud-provider supports specifying
	// the loadBalancerIP when a load balancer is created.
	// This field will be ignored if the cloud-provider does not support the feature.
	// Deprecated: This field was under-specified and its meaning varies across implementations.
	// Using it is non-portable and it may not support dual-stack.
	// Users are encouraged to use implementation-specific annotations when available.
	LoadBalancerIP pulumi.StringPtrInput `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider
	// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
	// cloud-provider does not support the feature."
	// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
	LoadBalancerSourceRanges pulumi.StringArrayInput `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports EnterpriseSearchSpecHttpServiceSpecPortsArrayInput `pulumi:"ports"`
	// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
	// Service should disregard any indications of ready/not-ready.
	// The primary use case for setting this field is for a StatefulSet's Headless Service to
	// propagate SRV DNS records for its Pods for the purpose of peer discovery.
	// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
	// Services interpret this to mean that all endpoints are considered "ready" even if the
	// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
	// through the Endpoints or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses pulumi.BoolPtrInput `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this
	// selector. If empty or not present, the service is assumed to have an
	// external process managing its endpoints, which Kubernetes will not
	// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
	// Ignored if type is ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector pulumi.StringMapInput `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity.
	// Enable client IP based session affinity.
	// Must be ClientIP or None.
	// Defaults to None.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity pulumi.StringPtrInput `pulumi:"sessionAffinity"`
	// sessionAffinityConfig contains the configurations of session affinity.
	SessionAffinityConfig EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrInput `pulumi:"sessionAffinityConfig"`
	// TrafficDistribution offers a way to express preferences for how traffic is
	// distributed to Service endpoints. Implementations can use this field as a
	// hint, but are not required to guarantee strict adherence. If the field is
	// not set, the implementation will apply its default routing strategy. If set
	// to "PreferClose", implementations should prioritize endpoints that are
	// topologically close (e.g., same zone).
	// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
	TrafficDistribution pulumi.StringPtrInput `pulumi:"trafficDistribution"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid
	// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
	// "ClusterIP" allocates a cluster-internal IP address for load-balancing
	// to endpoints. Endpoints are determined by the selector or if that is not
	// specified, by manual construction of an Endpoints object or
	// EndpointSlice objects. If clusterIP is "None", no virtual IP is
	// allocated and the endpoints are published as a set of endpoints rather
	// than a virtual IP.
	// "NodePort" builds on ClusterIP and allocates a port on every node which
	// routes to the same endpoints as the clusterIP.
	// "LoadBalancer" builds on NodePort and creates an external load-balancer
	// (if supported in the current cloud) which routes to the same endpoints
	// as the clusterIP.
	// "ExternalName" aliases this service to the specified externalName.
	// Several other fields do not apply to ExternalName services.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EnterpriseSearchSpecHttpServiceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpec)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpServiceSpecArgs) ToEnterpriseSearchSpecHttpServiceSpecOutput() EnterpriseSearchSpecHttpServiceSpecOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecArgs) ToEnterpriseSearchSpecHttpServiceSpecOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecOutput)
}

func (i EnterpriseSearchSpecHttpServiceSpecArgs) ToEnterpriseSearchSpecHttpServiceSpecPtrOutput() EnterpriseSearchSpecHttpServiceSpecPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecArgs) ToEnterpriseSearchSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecOutput).ToEnterpriseSearchSpecHttpServiceSpecPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpServiceSpecPtrInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecArgs, EnterpriseSearchSpecHttpServiceSpecPtr and EnterpriseSearchSpecHttpServiceSpecPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecPtrInput` via:
//
//	        EnterpriseSearchSpecHttpServiceSpecArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecHttpServiceSpecPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecPtrOutput() EnterpriseSearchSpecHttpServiceSpecPtrOutput
	ToEnterpriseSearchSpecHttpServiceSpecPtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecPtrOutput
}

type enterpriseSearchSpecHttpServiceSpecPtrType EnterpriseSearchSpecHttpServiceSpecArgs

func EnterpriseSearchSpecHttpServiceSpecPtr(v *EnterpriseSearchSpecHttpServiceSpecArgs) EnterpriseSearchSpecHttpServiceSpecPtrInput {
	return (*enterpriseSearchSpecHttpServiceSpecPtrType)(v)
}

func (*enterpriseSearchSpecHttpServiceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceSpec)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpServiceSpecPtrType) ToEnterpriseSearchSpecHttpServiceSpecPtrOutput() EnterpriseSearchSpecHttpServiceSpecPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpServiceSpecPtrType) ToEnterpriseSearchSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecPtrOutput)
}

// Spec is the specification of the service.
type EnterpriseSearchSpecHttpServiceSpecOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpec)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecOutput) ToEnterpriseSearchSpecHttpServiceSpecOutput() EnterpriseSearchSpecHttpServiceSpecOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecOutput) ToEnterpriseSearchSpecHttpServiceSpecOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecOutput) ToEnterpriseSearchSpecHttpServiceSpecPtrOutput() EnterpriseSearchSpecHttpServiceSpecPtrOutput {
	return o.ToEnterpriseSearchSpecHttpServiceSpecPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpServiceSpecOutput) ToEnterpriseSearchSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecHttpServiceSpec) *EnterpriseSearchSpecHttpServiceSpec {
		return &v
	}).(EnterpriseSearchSpecHttpServiceSpecPtrOutput)
}

// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
// allocated for services with type LoadBalancer.  Default is "true". It
// may be set to "false" if the cluster load-balancer does not rely on
// NodePorts.  If the caller requests specific NodePorts (by specifying a
// value), those requests will be respected, regardless of this field.
// This field may only be set for services with type LoadBalancer and will
// be cleared if the type is changed to any other type.
func (o EnterpriseSearchSpecHttpServiceSpecOutput) AllocateLoadBalancerNodePorts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *bool { return v.AllocateLoadBalancerNodePorts }).(pulumi.BoolPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned
// randomly. If an address is specified manually, is in-range (as per
// system configuration), and is not in use, it will be allocated to the
// service; otherwise creation of the service will fail. This field may not
// be changed through updates unless the type field is also being changed
// to ExternalName (which requires this field to be blank) or the type
// field is being changed from ExternalName (in which case this field may
// optionally be specified, as describe above).  Valid values are "None",
// empty string (""), or a valid IP address. Setting this to "None" makes a
// "headless service" (no virtual IP), which is useful when direct endpoint
// connections are preferred and proxying is not required.  Only applies to
// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
// when creating a Service of type ExternalName, creation will fail. This
// field will be wiped when updating a Service to type ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o EnterpriseSearchSpecHttpServiceSpecOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *string { return v.ClusterIP }).(pulumi.StringPtrOutput)
}

// ClusterIPs is a list of IP addresses assigned to this service, and are
// usually assigned randomly.  If an address is specified manually, is
// in-range (as per system configuration), and is not in use, it will be
// allocated to the service; otherwise creation of the service will fail.
// This field may not be changed through updates unless the type field is
// also being changed to ExternalName (which requires this field to be
// empty) or the type field is being changed from ExternalName (in which
// case this field may optionally be specified, as describe above).  Valid
// values are "None", empty string (""), or a valid IP address.  Setting
// this to "None" makes a "headless service" (no virtual IP), which is
// useful when direct endpoint connections are preferred and proxying is
// not required.  Only applies to types ClusterIP, NodePort, and
// LoadBalancer. If this field is specified when creating a Service of type
// ExternalName, creation will fail. This field will be wiped when updating
// a Service to type ExternalName.  If this field is not specified, it will
// be initialized from the clusterIP field.  If this field is specified,
// clients must ensure that clusterIPs[0] and clusterIP have the same
// value.
//
// This field may hold a maximum of two entries (dual-stack IPs, in either order).
// These IPs must correspond to the values of the ipFamilies field. Both
// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o EnterpriseSearchSpecHttpServiceSpecOutput) ClusterIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) []string { return v.ClusterIPs }).(pulumi.StringArrayOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster
// will also accept traffic for this service.  These IPs are not managed by
// Kubernetes.  The user is responsible for ensuring that traffic arrives
// at a node with this IP.  A common example is external load-balancers
// that are not part of the Kubernetes system.
func (o EnterpriseSearchSpecHttpServiceSpecOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) []string { return v.ExternalIPs }).(pulumi.StringArrayOutput)
}

// externalName is the external reference that discovery mechanisms will
// return as an alias for this service (e.g. a DNS CNAME record). No
// proxying will be involved.  Must be a lowercase RFC-1123 hostname
// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
func (o EnterpriseSearchSpecHttpServiceSpecOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *string { return v.ExternalName }).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy describes how nodes distribute service traffic they
// receive on one of the Service's "externally-facing" addresses (NodePorts,
// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
// the service in a way that assumes that external load balancers will take care
// of balancing the service traffic between nodes, and so each node will deliver
// traffic only to the node-local endpoints of the service, without masquerading
// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
// be dropped.) The default value, "Cluster", uses the standard behavior of
// routing to all endpoints evenly (possibly modified by topology and other
// features). Note that traffic sent to an External IP or LoadBalancer IP from
// within the cluster will always get "Cluster" semantics, but clients sending to
// a NodePort from within the cluster may need to take traffic policy into account
// when picking a node.
func (o EnterpriseSearchSpecHttpServiceSpecOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *string { return v.ExternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service.
// This only applies when type is set to LoadBalancer and
// externalTrafficPolicy is set to Local. If a value is specified, is
// in-range, and is not in use, it will be used.  If not specified, a value
// will be automatically allocated.  External systems (e.g. load-balancers)
// can use this port to determine if a given node holds endpoints for this
// service or not.  If this field is specified when creating a Service
// which does not need it, creation will fail. This field will be wiped
// when updating a Service to no longer need it (e.g. changing type).
// This field cannot be updated once set.
func (o EnterpriseSearchSpecHttpServiceSpecOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *int { return v.HealthCheckNodePort }).(pulumi.IntPtrOutput)
}

// InternalTrafficPolicy describes how nodes distribute service traffic they
// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
// only want to talk to endpoints of the service on the same node as the pod,
// dropping the traffic if there are no local endpoints. The default value,
// "Cluster", uses the standard behavior of routing to all endpoints evenly
// (possibly modified by topology and other features).
func (o EnterpriseSearchSpecHttpServiceSpecOutput) InternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *string { return v.InternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
// service. This field is usually assigned automatically based on cluster
// configuration and the ipFamilyPolicy field. If this field is specified
// manually, the requested family is available in the cluster,
// and ipFamilyPolicy allows it, it will be used; otherwise creation of
// the service will fail. This field is conditionally mutable: it allows
// for adding or removing a secondary IP family, but it does not allow
// changing the primary IP family of the Service. Valid values are "IPv4"
// and "IPv6".  This field only applies to Services of types ClusterIP,
// NodePort, and LoadBalancer, and does apply to "headless" services.
// This field will be wiped when updating a Service to type ExternalName.
//
// This field may hold a maximum of two entries (dual-stack families, in
// either order).  These families must correspond to the values of the
// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
// governed by the ipFamilyPolicy field.
func (o EnterpriseSearchSpecHttpServiceSpecOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) []string { return v.IpFamilies }).(pulumi.StringArrayOutput)
}

// IPFamilyPolicy represents the dual-stack-ness requested or required by
// this Service. If there is no value provided, then this field will be set
// to SingleStack. Services can be "SingleStack" (a single IP family),
// "PreferDualStack" (two IP families on dual-stack configured clusters or
// a single IP family on single-stack clusters), or "RequireDualStack"
// (two IP families on dual-stack configured clusters, otherwise fail). The
// ipFamilies and clusterIPs fields depend on the value of this field. This
// field will be wiped when updating a service to type ExternalName.
func (o EnterpriseSearchSpecHttpServiceSpecOutput) IpFamilyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *string { return v.IpFamilyPolicy }).(pulumi.StringPtrOutput)
}

// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
// If specified, the value of this field must be a label-style identifier, with an optional prefix,
// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
// balancer implementation is used, today this is typically done through the cloud provider integration,
// but should apply for any default implementation. If set, it is assumed that a load balancer
// implementation is watching for Services with a matching class. Any default load balancer
// implementation (e.g. cloud providers) should ignore Services that set this field.
// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
func (o EnterpriseSearchSpecHttpServiceSpecOutput) LoadBalancerClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *string { return v.LoadBalancerClass }).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer.
// This feature depends on whether the underlying cloud-provider supports specifying
// the loadBalancerIP when a load balancer is created.
// This field will be ignored if the cloud-provider does not support the feature.
// Deprecated: This field was under-specified and its meaning varies across implementations.
// Using it is non-portable and it may not support dual-stack.
// Users are encouraged to use implementation-specific annotations when available.
func (o EnterpriseSearchSpecHttpServiceSpecOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *string { return v.LoadBalancerIP }).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider
// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
// cloud-provider does not support the feature."
// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
func (o EnterpriseSearchSpecHttpServiceSpecOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) []string { return v.LoadBalancerSourceRanges }).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o EnterpriseSearchSpecHttpServiceSpecOutput) Ports() EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) []EnterpriseSearchSpecHttpServiceSpecPorts { return v.Ports }).(EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput)
}

// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
// Service should disregard any indications of ready/not-ready.
// The primary use case for setting this field is for a StatefulSet's Headless Service to
// propagate SRV DNS records for its Pods for the purpose of peer discovery.
// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
// Services interpret this to mean that all endpoints are considered "ready" even if the
// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
// through the Endpoints or EndpointSlice resources can safely assume this behavior.
func (o EnterpriseSearchSpecHttpServiceSpecOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *bool { return v.PublishNotReadyAddresses }).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this
// selector. If empty or not present, the service is assumed to have an
// external process managing its endpoints, which Kubernetes will not
// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
// Ignored if type is ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o EnterpriseSearchSpecHttpServiceSpecOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) map[string]string { return v.Selector }).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity.
// Enable client IP based session affinity.
// Must be ClientIP or None.
// Defaults to None.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o EnterpriseSearchSpecHttpServiceSpecOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *string { return v.SessionAffinity }).(pulumi.StringPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
func (o EnterpriseSearchSpecHttpServiceSpecOutput) SessionAffinityConfig() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig {
		return v.SessionAffinityConfig
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// TrafficDistribution offers a way to express preferences for how traffic is
// distributed to Service endpoints. Implementations can use this field as a
// hint, but are not required to guarantee strict adherence. If the field is
// not set, the implementation will apply its default routing strategy. If set
// to "PreferClose", implementations should prioritize endpoints that are
// topologically close (e.g., same zone).
// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
func (o EnterpriseSearchSpecHttpServiceSpecOutput) TrafficDistribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *string { return v.TrafficDistribution }).(pulumi.StringPtrOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid
// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
// "ClusterIP" allocates a cluster-internal IP address for load-balancing
// to endpoints. Endpoints are determined by the selector or if that is not
// specified, by manual construction of an Endpoints object or
// EndpointSlice objects. If clusterIP is "None", no virtual IP is
// allocated and the endpoints are published as a set of endpoints rather
// than a virtual IP.
// "NodePort" builds on ClusterIP and allocates a port on every node which
// routes to the same endpoints as the clusterIP.
// "LoadBalancer" builds on NodePort and creates an external load-balancer
// (if supported in the current cloud) which routes to the same endpoints
// as the clusterIP.
// "ExternalName" aliases this service to the specified externalName.
// Several other fields do not apply to ExternalName services.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o EnterpriseSearchSpecHttpServiceSpecOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpec) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchSpecHttpServiceSpecPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceSpec)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) ToEnterpriseSearchSpecHttpServiceSpecPtrOutput() EnterpriseSearchSpecHttpServiceSpecPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) ToEnterpriseSearchSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) Elem() EnterpriseSearchSpecHttpServiceSpecOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) EnterpriseSearchSpecHttpServiceSpec {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecHttpServiceSpec
		return ret
	}).(EnterpriseSearchSpecHttpServiceSpecOutput)
}

// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
// allocated for services with type LoadBalancer.  Default is "true". It
// may be set to "false" if the cluster load-balancer does not rely on
// NodePorts.  If the caller requests specific NodePorts (by specifying a
// value), those requests will be respected, regardless of this field.
// This field may only be set for services with type LoadBalancer and will
// be cleared if the type is changed to any other type.
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) AllocateLoadBalancerNodePorts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.AllocateLoadBalancerNodePorts
	}).(pulumi.BoolPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned
// randomly. If an address is specified manually, is in-range (as per
// system configuration), and is not in use, it will be allocated to the
// service; otherwise creation of the service will fail. This field may not
// be changed through updates unless the type field is also being changed
// to ExternalName (which requires this field to be blank) or the type
// field is being changed from ExternalName (in which case this field may
// optionally be specified, as describe above).  Valid values are "None",
// empty string (""), or a valid IP address. Setting this to "None" makes a
// "headless service" (no virtual IP), which is useful when direct endpoint
// connections are preferred and proxying is not required.  Only applies to
// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
// when creating a Service of type ExternalName, creation will fail. This
// field will be wiped when updating a Service to type ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ClusterIP
	}).(pulumi.StringPtrOutput)
}

// ClusterIPs is a list of IP addresses assigned to this service, and are
// usually assigned randomly.  If an address is specified manually, is
// in-range (as per system configuration), and is not in use, it will be
// allocated to the service; otherwise creation of the service will fail.
// This field may not be changed through updates unless the type field is
// also being changed to ExternalName (which requires this field to be
// empty) or the type field is being changed from ExternalName (in which
// case this field may optionally be specified, as describe above).  Valid
// values are "None", empty string (""), or a valid IP address.  Setting
// this to "None" makes a "headless service" (no virtual IP), which is
// useful when direct endpoint connections are preferred and proxying is
// not required.  Only applies to types ClusterIP, NodePort, and
// LoadBalancer. If this field is specified when creating a Service of type
// ExternalName, creation will fail. This field will be wiped when updating
// a Service to type ExternalName.  If this field is not specified, it will
// be initialized from the clusterIP field.  If this field is specified,
// clients must ensure that clusterIPs[0] and clusterIP have the same
// value.
//
// This field may hold a maximum of two entries (dual-stack IPs, in either order).
// These IPs must correspond to the values of the ipFamilies field. Both
// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) ClusterIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.ClusterIPs
	}).(pulumi.StringArrayOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster
// will also accept traffic for this service.  These IPs are not managed by
// Kubernetes.  The user is responsible for ensuring that traffic arrives
// at a node with this IP.  A common example is external load-balancers
// that are not part of the Kubernetes system.
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.ExternalIPs
	}).(pulumi.StringArrayOutput)
}

// externalName is the external reference that discovery mechanisms will
// return as an alias for this service (e.g. a DNS CNAME record). No
// proxying will be involved.  Must be a lowercase RFC-1123 hostname
// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ExternalName
	}).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy describes how nodes distribute service traffic they
// receive on one of the Service's "externally-facing" addresses (NodePorts,
// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
// the service in a way that assumes that external load balancers will take care
// of balancing the service traffic between nodes, and so each node will deliver
// traffic only to the node-local endpoints of the service, without masquerading
// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
// be dropped.) The default value, "Cluster", uses the standard behavior of
// routing to all endpoints evenly (possibly modified by topology and other
// features). Note that traffic sent to an External IP or LoadBalancer IP from
// within the cluster will always get "Cluster" semantics, but clients sending to
// a NodePort from within the cluster may need to take traffic policy into account
// when picking a node.
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ExternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service.
// This only applies when type is set to LoadBalancer and
// externalTrafficPolicy is set to Local. If a value is specified, is
// in-range, and is not in use, it will be used.  If not specified, a value
// will be automatically allocated.  External systems (e.g. load-balancers)
// can use this port to determine if a given node holds endpoints for this
// service or not.  If this field is specified when creating a Service
// which does not need it, creation will fail. This field will be wiped
// when updating a Service to no longer need it (e.g. changing type).
// This field cannot be updated once set.
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *int {
		if v == nil {
			return nil
		}
		return v.HealthCheckNodePort
	}).(pulumi.IntPtrOutput)
}

// InternalTrafficPolicy describes how nodes distribute service traffic they
// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
// only want to talk to endpoints of the service on the same node as the pod,
// dropping the traffic if there are no local endpoints. The default value,
// "Cluster", uses the standard behavior of routing to all endpoints evenly
// (possibly modified by topology and other features).
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) InternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.InternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
// service. This field is usually assigned automatically based on cluster
// configuration and the ipFamilyPolicy field. If this field is specified
// manually, the requested family is available in the cluster,
// and ipFamilyPolicy allows it, it will be used; otherwise creation of
// the service will fail. This field is conditionally mutable: it allows
// for adding or removing a secondary IP family, but it does not allow
// changing the primary IP family of the Service. Valid values are "IPv4"
// and "IPv6".  This field only applies to Services of types ClusterIP,
// NodePort, and LoadBalancer, and does apply to "headless" services.
// This field will be wiped when updating a Service to type ExternalName.
//
// This field may hold a maximum of two entries (dual-stack families, in
// either order).  These families must correspond to the values of the
// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
// governed by the ipFamilyPolicy field.
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.IpFamilies
	}).(pulumi.StringArrayOutput)
}

// IPFamilyPolicy represents the dual-stack-ness requested or required by
// this Service. If there is no value provided, then this field will be set
// to SingleStack. Services can be "SingleStack" (a single IP family),
// "PreferDualStack" (two IP families on dual-stack configured clusters or
// a single IP family on single-stack clusters), or "RequireDualStack"
// (two IP families on dual-stack configured clusters, otherwise fail). The
// ipFamilies and clusterIPs fields depend on the value of this field. This
// field will be wiped when updating a service to type ExternalName.
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) IpFamilyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.IpFamilyPolicy
	}).(pulumi.StringPtrOutput)
}

// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
// If specified, the value of this field must be a label-style identifier, with an optional prefix,
// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
// balancer implementation is used, today this is typically done through the cloud provider integration,
// but should apply for any default implementation. If set, it is assumed that a load balancer
// implementation is watching for Services with a matching class. Any default load balancer
// implementation (e.g. cloud providers) should ignore Services that set this field.
// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) LoadBalancerClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerClass
	}).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer.
// This feature depends on whether the underlying cloud-provider supports specifying
// the loadBalancerIP when a load balancer is created.
// This field will be ignored if the cloud-provider does not support the feature.
// Deprecated: This field was under-specified and its meaning varies across implementations.
// Using it is non-portable and it may not support dual-stack.
// Users are encouraged to use implementation-specific annotations when available.
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerIP
	}).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider
// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
// cloud-provider does not support the feature."
// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSourceRanges
	}).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) Ports() EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) []EnterpriseSearchSpecHttpServiceSpecPorts {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput)
}

// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
// Service should disregard any indications of ready/not-ready.
// The primary use case for setting this field is for a StatefulSet's Headless Service to
// propagate SRV DNS records for its Pods for the purpose of peer discovery.
// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
// Services interpret this to mean that all endpoints are considered "ready" even if the
// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
// through the Endpoints or EndpointSlice resources can safely assume this behavior.
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.PublishNotReadyAddresses
	}).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this
// selector. If empty or not present, the service is assumed to have an
// external process managing its endpoints, which Kubernetes will not
// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
// Ignored if type is ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity.
// Enable client IP based session affinity.
// Must be ClientIP or None.
// Defaults to None.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.SessionAffinity
	}).(pulumi.StringPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) SessionAffinityConfig() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig {
		if v == nil {
			return nil
		}
		return v.SessionAffinityConfig
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// TrafficDistribution offers a way to express preferences for how traffic is
// distributed to Service endpoints. Implementations can use this field as a
// hint, but are not required to guarantee strict adherence. If the field is
// not set, the implementation will apply its default routing strategy. If set
// to "PreferClose", implementations should prioritize endpoints that are
// topologically close (e.g., same zone).
// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) TrafficDistribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.TrafficDistribution
	}).(pulumi.StringPtrOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid
// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
// "ClusterIP" allocates a cluster-internal IP address for load-balancing
// to endpoints. Endpoints are determined by the selector or if that is not
// specified, by manual construction of an Endpoints object or
// EndpointSlice objects. If clusterIP is "None", no virtual IP is
// allocated and the endpoints are published as a set of endpoints rather
// than a virtual IP.
// "NodePort" builds on ClusterIP and allocates a port on every node which
// routes to the same endpoints as the clusterIP.
// "LoadBalancer" builds on NodePort and creates an external load-balancer
// (if supported in the current cloud) which routes to the same endpoints
// as the clusterIP.
// "ExternalName" aliases this service to the specified externalName.
// Several other fields do not apply to ExternalName services.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o EnterpriseSearchSpecHttpServiceSpecPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// ServicePort contains information on service's port.
type EnterpriseSearchSpecHttpServiceSpecPorts struct {
	// The application protocol for this port.
	// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
	// This field follows standard Kubernetes label syntax.
	// Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per
	// RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
	//   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
	//   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
	//
	// * Other protocols should use implementation-defined prefixed names such as
	// mycompany.com/my-custom-protocol.
	AppProtocol *string `pulumi:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL.
	// All ports within a ServiceSpec must have unique names. When considering
	// the endpoints for a Service, this must match the 'name' field in the
	// EndpointPort.
	// Optional if only one ServicePort is defined on this service.
	Name *string `pulumi:"name"`
	// The port on each node on which this service is exposed when type is
	// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
	// specified, in-range, and not in use it will be used, otherwise the
	// operation will fail.  If not specified, a port will be allocated if this
	// Service requires one.  If this field is specified when creating a
	// Service which does not need it, creation will fail. This field will be
	// wiped when updating a Service to no longer need it (e.g. changing type
	// from NodePort to ClusterIP).
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort *int `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port int `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
	// Default is TCP.
	Protocol *string `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service.
	// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	// If this is a string, it will be looked up as a named port in the
	// target Pod's container ports. If this is not specified, the value
	// of the 'port' field is used (an identity map).
	// This field is ignored for services with clusterIP=None, and should be
	// omitted or set equal to the 'port' field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort interface{} `pulumi:"targetPort"`
}

// Defaults sets the appropriate defaults for EnterpriseSearchSpecHttpServiceSpecPorts
func (val *EnterpriseSearchSpecHttpServiceSpecPorts) Defaults() *EnterpriseSearchSpecHttpServiceSpecPorts {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		protocol_ := "TCP"
		tmp.Protocol = &protocol_
	}
	return &tmp
}

// EnterpriseSearchSpecHttpServiceSpecPortsInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecPortsArgs and EnterpriseSearchSpecHttpServiceSpecPortsOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecPortsInput` via:
//
//	EnterpriseSearchSpecHttpServiceSpecPortsArgs{...}
type EnterpriseSearchSpecHttpServiceSpecPortsInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecPortsOutput() EnterpriseSearchSpecHttpServiceSpecPortsOutput
	ToEnterpriseSearchSpecHttpServiceSpecPortsOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecPortsOutput
}

// ServicePort contains information on service's port.
type EnterpriseSearchSpecHttpServiceSpecPortsArgs struct {
	// The application protocol for this port.
	// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
	// This field follows standard Kubernetes label syntax.
	// Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per
	// RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
	//   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
	//   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
	//
	// * Other protocols should use implementation-defined prefixed names such as
	// mycompany.com/my-custom-protocol.
	AppProtocol pulumi.StringPtrInput `pulumi:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL.
	// All ports within a ServiceSpec must have unique names. When considering
	// the endpoints for a Service, this must match the 'name' field in the
	// EndpointPort.
	// Optional if only one ServicePort is defined on this service.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port on each node on which this service is exposed when type is
	// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
	// specified, in-range, and not in use it will be used, otherwise the
	// operation will fail.  If not specified, a port will be allocated if this
	// Service requires one.  If this field is specified when creating a
	// Service which does not need it, creation will fail. This field will be
	// wiped when updating a Service to no longer need it (e.g. changing type
	// from NodePort to ClusterIP).
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort pulumi.IntPtrInput `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port pulumi.IntInput `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
	// Default is TCP.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service.
	// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	// If this is a string, it will be looked up as a named port in the
	// target Pod's container ports. If this is not specified, the value
	// of the 'port' field is used (an identity map).
	// This field is ignored for services with clusterIP=None, and should be
	// omitted or set equal to the 'port' field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort pulumi.Input `pulumi:"targetPort"`
}

// Defaults sets the appropriate defaults for EnterpriseSearchSpecHttpServiceSpecPortsArgs
func (val *EnterpriseSearchSpecHttpServiceSpecPortsArgs) Defaults() *EnterpriseSearchSpecHttpServiceSpecPortsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		tmp.Protocol = pulumi.StringPtr("TCP")
	}
	return &tmp
}
func (EnterpriseSearchSpecHttpServiceSpecPortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpServiceSpecPortsArgs) ToEnterpriseSearchSpecHttpServiceSpecPortsOutput() EnterpriseSearchSpecHttpServiceSpecPortsOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecPortsOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecPortsArgs) ToEnterpriseSearchSpecHttpServiceSpecPortsOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecPortsOutput)
}

// EnterpriseSearchSpecHttpServiceSpecPortsArrayInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecPortsArray and EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecPortsArrayInput` via:
//
//	EnterpriseSearchSpecHttpServiceSpecPortsArray{ EnterpriseSearchSpecHttpServiceSpecPortsArgs{...} }
type EnterpriseSearchSpecHttpServiceSpecPortsArrayInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecPortsArrayOutput() EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput
	ToEnterpriseSearchSpecHttpServiceSpecPortsArrayOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput
}

type EnterpriseSearchSpecHttpServiceSpecPortsArray []EnterpriseSearchSpecHttpServiceSpecPortsInput

func (EnterpriseSearchSpecHttpServiceSpecPortsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseSearchSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpServiceSpecPortsArray) ToEnterpriseSearchSpecHttpServiceSpecPortsArrayOutput() EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecPortsArrayOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecPortsArray) ToEnterpriseSearchSpecHttpServiceSpecPortsArrayOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput)
}

// ServicePort contains information on service's port.
type EnterpriseSearchSpecHttpServiceSpecPortsOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecPortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecPortsOutput) ToEnterpriseSearchSpecHttpServiceSpecPortsOutput() EnterpriseSearchSpecHttpServiceSpecPortsOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecPortsOutput) ToEnterpriseSearchSpecHttpServiceSpecPortsOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPortsOutput {
	return o
}

// The application protocol for this port.
// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
// This field follows standard Kubernetes label syntax.
// Valid values are either:
//
// * Un-prefixed protocol names - reserved for IANA standard service names (as per
// RFC-6335 and https://www.iana.org/assignments/service-names).
//
// * Kubernetes-defined prefixed names:
//   - 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
//   - 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
//   - 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
//
// * Other protocols should use implementation-defined prefixed names such as
// mycompany.com/my-custom-protocol.
func (o EnterpriseSearchSpecHttpServiceSpecPortsOutput) AppProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPorts) *string { return v.AppProtocol }).(pulumi.StringPtrOutput)
}

// The name of this port within the service. This must be a DNS_LABEL.
// All ports within a ServiceSpec must have unique names. When considering
// the endpoints for a Service, this must match the 'name' field in the
// EndpointPort.
// Optional if only one ServicePort is defined on this service.
func (o EnterpriseSearchSpecHttpServiceSpecPortsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPorts) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port on each node on which this service is exposed when type is
// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
// specified, in-range, and not in use it will be used, otherwise the
// operation will fail.  If not specified, a port will be allocated if this
// Service requires one.  If this field is specified when creating a
// Service which does not need it, creation will fail. This field will be
// wiped when updating a Service to no longer need it (e.g. changing type
// from NodePort to ClusterIP).
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
func (o EnterpriseSearchSpecHttpServiceSpecPortsOutput) NodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPorts) *int { return v.NodePort }).(pulumi.IntPtrOutput)
}

// The port that will be exposed by this service.
func (o EnterpriseSearchSpecHttpServiceSpecPortsOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPorts) int { return v.Port }).(pulumi.IntOutput)
}

// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
// Default is TCP.
func (o EnterpriseSearchSpecHttpServiceSpecPortsOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPorts) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the pods targeted by the service.
// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
// If this is a string, it will be looked up as a named port in the
// target Pod's container ports. If this is not specified, the value
// of the 'port' field is used (an identity map).
// This field is ignored for services with clusterIP=None, and should be
// omitted or set equal to the 'port' field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
func (o EnterpriseSearchSpecHttpServiceSpecPortsOutput) TargetPort() pulumi.AnyOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecPorts) interface{} { return v.TargetPort }).(pulumi.AnyOutput)
}

type EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseSearchSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput) ToEnterpriseSearchSpecHttpServiceSpecPortsArrayOutput() EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput) ToEnterpriseSearchSpecHttpServiceSpecPortsArrayOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput) Index(i pulumi.IntInput) EnterpriseSearchSpecHttpServiceSpecPortsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnterpriseSearchSpecHttpServiceSpecPorts {
		return vs[0].([]EnterpriseSearchSpecHttpServiceSpecPorts)[vs[1].(int)]
	}).(EnterpriseSearchSpecHttpServiceSpecPortsOutput)
}

// Route service traffic to pods with label keys and values matching this
// selector. If empty or not present, the service is assumed to have an
// external process managing its endpoints, which Kubernetes will not
// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
// Ignored if type is ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
type EnterpriseSearchSpecHttpServiceSpecSelector struct {
}

// sessionAffinityConfig contains the configurations of session affinity.
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig struct {
	// clientIP contains the configurations of Client IP based session affinity.
	ClientIP *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIp `pulumi:"clientIP"`
}

// EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs and EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigInput` via:
//
//	EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs{...}
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput
	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput
}

// sessionAffinityConfig contains the configurations of session affinity.
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs struct {
	// clientIP contains the configurations of Client IP based session affinity.
	ClientIP EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrInput `pulumi:"clientIP"`
}

func (EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput)
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput).ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs, EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtr and EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrInput` via:
//
//	        EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput
	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput
}

type enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrType EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs

func EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtr(v *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrInput {
	return (*enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrType)(v)
}

func (*enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrType) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrType) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig) *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig {
		return &v
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput) ClientIP() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig) *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIp {
		return v.ClientIP
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput)
}

type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput) Elem() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig
		return ret
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ClientIP() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfig) *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIp {
		if v == nil {
			return nil
		}
		return v.ClientIP
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIp struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
	// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
	// Default value is 10800(for 3 hours).
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpArgs and EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpInput` via:
//
//	EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpArgs{...}
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput
	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput
}

// clientIP contains the configurations of Client IP based session affinity.
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpArgs struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
	// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
	// Default value is 10800(for 3 hours).
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIp)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput)
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpArgs) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput).ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrInput is an input type that accepts EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpArgs, EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtr and EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrInput` via:
//
//	        EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput
	ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput
}

type enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrType EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpArgs

func EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtr(v *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpArgs) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrInput {
	return (*enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrType)(v)
}

func (*enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIp)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrType) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return i.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrType) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIp)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o.ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIp) *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIp {
		return &v
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
// Default value is 10800(for 3 hours).
func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIp) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIp)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput) ToEnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput) Elem() EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIp) EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIp {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIp
		return ret
	}).(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
// Default value is 10800(for 3 hours).
func (o EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIp) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
type EnterpriseSearchSpecHttpTls struct {
	// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
	// The referenced secret should contain the following:
	//
	// - `ca.crt`: The certificate authority (optional).
	// - `tls.crt`: The certificate (or a chain).
	// - `tls.key`: The private key to the first certificate in the certificate chain.
	Certificate *EnterpriseSearchSpecHttpTlsCertificate `pulumi:"certificate"`
	// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
	SelfSignedCertificate *EnterpriseSearchSpecHttpTlsSelfSignedCertificate `pulumi:"selfSignedCertificate"`
}

// EnterpriseSearchSpecHttpTlsInput is an input type that accepts EnterpriseSearchSpecHttpTlsArgs and EnterpriseSearchSpecHttpTlsOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsInput` via:
//
//	EnterpriseSearchSpecHttpTlsArgs{...}
type EnterpriseSearchSpecHttpTlsInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsOutput() EnterpriseSearchSpecHttpTlsOutput
	ToEnterpriseSearchSpecHttpTlsOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsOutput
}

// TLS defines options for configuring TLS for HTTP.
type EnterpriseSearchSpecHttpTlsArgs struct {
	// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
	// The referenced secret should contain the following:
	//
	// - `ca.crt`: The certificate authority (optional).
	// - `tls.crt`: The certificate (or a chain).
	// - `tls.key`: The private key to the first certificate in the certificate chain.
	Certificate EnterpriseSearchSpecHttpTlsCertificatePtrInput `pulumi:"certificate"`
	// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
	SelfSignedCertificate EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrInput `pulumi:"selfSignedCertificate"`
}

func (EnterpriseSearchSpecHttpTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTls)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpTlsArgs) ToEnterpriseSearchSpecHttpTlsOutput() EnterpriseSearchSpecHttpTlsOutput {
	return i.ToEnterpriseSearchSpecHttpTlsOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsArgs) ToEnterpriseSearchSpecHttpTlsOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsOutput)
}

func (i EnterpriseSearchSpecHttpTlsArgs) ToEnterpriseSearchSpecHttpTlsPtrOutput() EnterpriseSearchSpecHttpTlsPtrOutput {
	return i.ToEnterpriseSearchSpecHttpTlsPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsArgs) ToEnterpriseSearchSpecHttpTlsPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsOutput).ToEnterpriseSearchSpecHttpTlsPtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpTlsPtrInput is an input type that accepts EnterpriseSearchSpecHttpTlsArgs, EnterpriseSearchSpecHttpTlsPtr and EnterpriseSearchSpecHttpTlsPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsPtrInput` via:
//
//	        EnterpriseSearchSpecHttpTlsArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecHttpTlsPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsPtrOutput() EnterpriseSearchSpecHttpTlsPtrOutput
	ToEnterpriseSearchSpecHttpTlsPtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsPtrOutput
}

type enterpriseSearchSpecHttpTlsPtrType EnterpriseSearchSpecHttpTlsArgs

func EnterpriseSearchSpecHttpTlsPtr(v *EnterpriseSearchSpecHttpTlsArgs) EnterpriseSearchSpecHttpTlsPtrInput {
	return (*enterpriseSearchSpecHttpTlsPtrType)(v)
}

func (*enterpriseSearchSpecHttpTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpTls)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpTlsPtrType) ToEnterpriseSearchSpecHttpTlsPtrOutput() EnterpriseSearchSpecHttpTlsPtrOutput {
	return i.ToEnterpriseSearchSpecHttpTlsPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpTlsPtrType) ToEnterpriseSearchSpecHttpTlsPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsPtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
type EnterpriseSearchSpecHttpTlsOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTls)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsOutput) ToEnterpriseSearchSpecHttpTlsOutput() EnterpriseSearchSpecHttpTlsOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsOutput) ToEnterpriseSearchSpecHttpTlsOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsOutput) ToEnterpriseSearchSpecHttpTlsPtrOutput() EnterpriseSearchSpecHttpTlsPtrOutput {
	return o.ToEnterpriseSearchSpecHttpTlsPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpTlsOutput) ToEnterpriseSearchSpecHttpTlsPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecHttpTls) *EnterpriseSearchSpecHttpTls {
		return &v
	}).(EnterpriseSearchSpecHttpTlsPtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
func (o EnterpriseSearchSpecHttpTlsOutput) Certificate() EnterpriseSearchSpecHttpTlsCertificatePtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTls) *EnterpriseSearchSpecHttpTlsCertificate { return v.Certificate }).(EnterpriseSearchSpecHttpTlsCertificatePtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
func (o EnterpriseSearchSpecHttpTlsOutput) SelfSignedCertificate() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTls) *EnterpriseSearchSpecHttpTlsSelfSignedCertificate {
		return v.SelfSignedCertificate
	}).(EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput)
}

type EnterpriseSearchSpecHttpTlsPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpTls)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsPtrOutput) ToEnterpriseSearchSpecHttpTlsPtrOutput() EnterpriseSearchSpecHttpTlsPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsPtrOutput) ToEnterpriseSearchSpecHttpTlsPtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsPtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsPtrOutput) Elem() EnterpriseSearchSpecHttpTlsOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTls) EnterpriseSearchSpecHttpTls {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecHttpTls
		return ret
	}).(EnterpriseSearchSpecHttpTlsOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
func (o EnterpriseSearchSpecHttpTlsPtrOutput) Certificate() EnterpriseSearchSpecHttpTlsCertificatePtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTls) *EnterpriseSearchSpecHttpTlsCertificate {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(EnterpriseSearchSpecHttpTlsCertificatePtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
func (o EnterpriseSearchSpecHttpTlsPtrOutput) SelfSignedCertificate() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTls) *EnterpriseSearchSpecHttpTlsSelfSignedCertificate {
		if v == nil {
			return nil
		}
		return v.SelfSignedCertificate
	}).(EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
type EnterpriseSearchSpecHttpTlsCertificate struct {
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// EnterpriseSearchSpecHttpTlsCertificateInput is an input type that accepts EnterpriseSearchSpecHttpTlsCertificateArgs and EnterpriseSearchSpecHttpTlsCertificateOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsCertificateInput` via:
//
//	EnterpriseSearchSpecHttpTlsCertificateArgs{...}
type EnterpriseSearchSpecHttpTlsCertificateInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsCertificateOutput() EnterpriseSearchSpecHttpTlsCertificateOutput
	ToEnterpriseSearchSpecHttpTlsCertificateOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsCertificateOutput
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
type EnterpriseSearchSpecHttpTlsCertificateArgs struct {
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (EnterpriseSearchSpecHttpTlsCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTlsCertificate)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpTlsCertificateArgs) ToEnterpriseSearchSpecHttpTlsCertificateOutput() EnterpriseSearchSpecHttpTlsCertificateOutput {
	return i.ToEnterpriseSearchSpecHttpTlsCertificateOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsCertificateArgs) ToEnterpriseSearchSpecHttpTlsCertificateOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsCertificateOutput)
}

func (i EnterpriseSearchSpecHttpTlsCertificateArgs) ToEnterpriseSearchSpecHttpTlsCertificatePtrOutput() EnterpriseSearchSpecHttpTlsCertificatePtrOutput {
	return i.ToEnterpriseSearchSpecHttpTlsCertificatePtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsCertificateArgs) ToEnterpriseSearchSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsCertificateOutput).ToEnterpriseSearchSpecHttpTlsCertificatePtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpTlsCertificatePtrInput is an input type that accepts EnterpriseSearchSpecHttpTlsCertificateArgs, EnterpriseSearchSpecHttpTlsCertificatePtr and EnterpriseSearchSpecHttpTlsCertificatePtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsCertificatePtrInput` via:
//
//	        EnterpriseSearchSpecHttpTlsCertificateArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecHttpTlsCertificatePtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsCertificatePtrOutput() EnterpriseSearchSpecHttpTlsCertificatePtrOutput
	ToEnterpriseSearchSpecHttpTlsCertificatePtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsCertificatePtrOutput
}

type enterpriseSearchSpecHttpTlsCertificatePtrType EnterpriseSearchSpecHttpTlsCertificateArgs

func EnterpriseSearchSpecHttpTlsCertificatePtr(v *EnterpriseSearchSpecHttpTlsCertificateArgs) EnterpriseSearchSpecHttpTlsCertificatePtrInput {
	return (*enterpriseSearchSpecHttpTlsCertificatePtrType)(v)
}

func (*enterpriseSearchSpecHttpTlsCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpTlsCertificate)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpTlsCertificatePtrType) ToEnterpriseSearchSpecHttpTlsCertificatePtrOutput() EnterpriseSearchSpecHttpTlsCertificatePtrOutput {
	return i.ToEnterpriseSearchSpecHttpTlsCertificatePtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpTlsCertificatePtrType) ToEnterpriseSearchSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsCertificatePtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
type EnterpriseSearchSpecHttpTlsCertificateOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTlsCertificate)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsCertificateOutput) ToEnterpriseSearchSpecHttpTlsCertificateOutput() EnterpriseSearchSpecHttpTlsCertificateOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsCertificateOutput) ToEnterpriseSearchSpecHttpTlsCertificateOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsCertificateOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsCertificateOutput) ToEnterpriseSearchSpecHttpTlsCertificatePtrOutput() EnterpriseSearchSpecHttpTlsCertificatePtrOutput {
	return o.ToEnterpriseSearchSpecHttpTlsCertificatePtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpTlsCertificateOutput) ToEnterpriseSearchSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecHttpTlsCertificate) *EnterpriseSearchSpecHttpTlsCertificate {
		return &v
	}).(EnterpriseSearchSpecHttpTlsCertificatePtrOutput)
}

// SecretName is the name of the secret.
func (o EnterpriseSearchSpecHttpTlsCertificateOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTlsCertificate) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchSpecHttpTlsCertificatePtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpTlsCertificate)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsCertificatePtrOutput) ToEnterpriseSearchSpecHttpTlsCertificatePtrOutput() EnterpriseSearchSpecHttpTlsCertificatePtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsCertificatePtrOutput) ToEnterpriseSearchSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsCertificatePtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsCertificatePtrOutput) Elem() EnterpriseSearchSpecHttpTlsCertificateOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTlsCertificate) EnterpriseSearchSpecHttpTlsCertificate {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecHttpTlsCertificate
		return ret
	}).(EnterpriseSearchSpecHttpTlsCertificateOutput)
}

// SecretName is the name of the secret.
func (o EnterpriseSearchSpecHttpTlsCertificatePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTlsCertificate) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type EnterpriseSearchSpecHttpTlsSelfSignedCertificate struct {
	// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
	Disabled *bool `pulumi:"disabled"`
	// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
	SubjectAltNames []EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames `pulumi:"subjectAltNames"`
}

// EnterpriseSearchSpecHttpTlsSelfSignedCertificateInput is an input type that accepts EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs and EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsSelfSignedCertificateInput` via:
//
//	EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs{...}
type EnterpriseSearchSpecHttpTlsSelfSignedCertificateInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput
	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs struct {
	// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
	SubjectAltNames EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput `pulumi:"subjectAltNames"`
}

func (EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput {
	return i.ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput)
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return i.ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput).ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx)
}

// EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrInput is an input type that accepts EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs, EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtr and EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrInput` via:
//
//	        EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput
	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput
}

type enterpriseSearchSpecHttpTlsSelfSignedCertificatePtrType EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs

func EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtr(v *EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs) EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrInput {
	return (*enterpriseSearchSpecHttpTlsSelfSignedCertificatePtrType)(v)
}

func (*enterpriseSearchSpecHttpTlsSelfSignedCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (i *enterpriseSearchSpecHttpTlsSelfSignedCertificatePtrType) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return i.ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchSpecHttpTlsSelfSignedCertificatePtrType) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchSpecHttpTlsSelfSignedCertificate) *EnterpriseSearchSpecHttpTlsSelfSignedCertificate {
		return &v
	}).(EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput)
}

// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTlsSelfSignedCertificate) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput) SubjectAltNames() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTlsSelfSignedCertificate) []EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames {
		return v.SubjectAltNames
	}).(EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput)
}

type EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput) Elem() EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTlsSelfSignedCertificate) EnterpriseSearchSpecHttpTlsSelfSignedCertificate {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchSpecHttpTlsSelfSignedCertificate
		return ret
	}).(EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput)
}

// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTlsSelfSignedCertificate) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput) SubjectAltNames() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o.ApplyT(func(v *EnterpriseSearchSpecHttpTlsSelfSignedCertificate) []EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput)
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames struct {
	// DNS is the DNS name of the subject.
	Dns *string `pulumi:"dns"`
	// IP is the IP address of the subject.
	Ip *string `pulumi:"ip"`
}

// EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput is an input type that accepts EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs and EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput` via:
//
//	EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs{...}
type EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput
	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs struct {
	// DNS is the DNS name of the subject.
	Dns pulumi.StringPtrInput `pulumi:"dns"`
	// IP is the IP address of the subject.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
}

func (EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return i.ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput)
}

// EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput is an input type that accepts EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray and EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput values.
// You can construct a concrete instance of `EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput` via:
//
//	EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray{ EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs{...} }
type EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput interface {
	pulumi.Input

	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput
	ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput
}

type EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray []EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput

func (EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return i.ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(context.Background())
}

func (i EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput)
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return o
}

// DNS is the DNS name of the subject.
func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) Dns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames) *string { return v.Dns }).(pulumi.StringPtrOutput)
}

// IP is the IP address of the subject.
func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput() EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) ToEnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(ctx context.Context) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o
}

func (o EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) Index(i pulumi.IntInput) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames {
		return vs[0].([]EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNames)[vs[1].(int)]
	}).(EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput)
}

// EnterpriseSearchStatus defines the observed state of EnterpriseSearch
type EnterpriseSearchStatus struct {
	// Association is the status of any auto-linking to Elasticsearch clusters.
	AssociationStatus *string `pulumi:"associationStatus"`
	// AvailableNodes is the number of available replicas in the deployment.
	AvailableNodes *int `pulumi:"availableNodes"`
	// Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
	Count *int `pulumi:"count"`
	// Health of the deployment.
	Health *string `pulumi:"health"`
	// ObservedGeneration represents the .metadata.generation that the status is based upon.
	// It corresponds to the metadata generation, which is updated on mutation by the API Server.
	// If the generation observed in status diverges from the generation in metadata, the Enterprise Search
	// controller has not yet processed the changes contained in the Enterprise Search specification.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// Selector is the label selector used to find all pods.
	Selector *string `pulumi:"selector"`
	// ExternalService is the name of the service associated to the Enterprise Search Pods.
	Service *string `pulumi:"service"`
	// Version of the stack resource currently running. During version upgrades, multiple versions may run
	// in parallel: this value specifies the lowest version currently running.
	Version *string `pulumi:"version"`
}

// EnterpriseSearchStatusInput is an input type that accepts EnterpriseSearchStatusArgs and EnterpriseSearchStatusOutput values.
// You can construct a concrete instance of `EnterpriseSearchStatusInput` via:
//
//	EnterpriseSearchStatusArgs{...}
type EnterpriseSearchStatusInput interface {
	pulumi.Input

	ToEnterpriseSearchStatusOutput() EnterpriseSearchStatusOutput
	ToEnterpriseSearchStatusOutputWithContext(context.Context) EnterpriseSearchStatusOutput
}

// EnterpriseSearchStatus defines the observed state of EnterpriseSearch
type EnterpriseSearchStatusArgs struct {
	// Association is the status of any auto-linking to Elasticsearch clusters.
	AssociationStatus pulumi.StringPtrInput `pulumi:"associationStatus"`
	// AvailableNodes is the number of available replicas in the deployment.
	AvailableNodes pulumi.IntPtrInput `pulumi:"availableNodes"`
	// Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// Health of the deployment.
	Health pulumi.StringPtrInput `pulumi:"health"`
	// ObservedGeneration represents the .metadata.generation that the status is based upon.
	// It corresponds to the metadata generation, which is updated on mutation by the API Server.
	// If the generation observed in status diverges from the generation in metadata, the Enterprise Search
	// controller has not yet processed the changes contained in the Enterprise Search specification.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// Selector is the label selector used to find all pods.
	Selector pulumi.StringPtrInput `pulumi:"selector"`
	// ExternalService is the name of the service associated to the Enterprise Search Pods.
	Service pulumi.StringPtrInput `pulumi:"service"`
	// Version of the stack resource currently running. During version upgrades, multiple versions may run
	// in parallel: this value specifies the lowest version currently running.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (EnterpriseSearchStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchStatus)(nil)).Elem()
}

func (i EnterpriseSearchStatusArgs) ToEnterpriseSearchStatusOutput() EnterpriseSearchStatusOutput {
	return i.ToEnterpriseSearchStatusOutputWithContext(context.Background())
}

func (i EnterpriseSearchStatusArgs) ToEnterpriseSearchStatusOutputWithContext(ctx context.Context) EnterpriseSearchStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchStatusOutput)
}

func (i EnterpriseSearchStatusArgs) ToEnterpriseSearchStatusPtrOutput() EnterpriseSearchStatusPtrOutput {
	return i.ToEnterpriseSearchStatusPtrOutputWithContext(context.Background())
}

func (i EnterpriseSearchStatusArgs) ToEnterpriseSearchStatusPtrOutputWithContext(ctx context.Context) EnterpriseSearchStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchStatusOutput).ToEnterpriseSearchStatusPtrOutputWithContext(ctx)
}

// EnterpriseSearchStatusPtrInput is an input type that accepts EnterpriseSearchStatusArgs, EnterpriseSearchStatusPtr and EnterpriseSearchStatusPtrOutput values.
// You can construct a concrete instance of `EnterpriseSearchStatusPtrInput` via:
//
//	        EnterpriseSearchStatusArgs{...}
//
//	or:
//
//	        nil
type EnterpriseSearchStatusPtrInput interface {
	pulumi.Input

	ToEnterpriseSearchStatusPtrOutput() EnterpriseSearchStatusPtrOutput
	ToEnterpriseSearchStatusPtrOutputWithContext(context.Context) EnterpriseSearchStatusPtrOutput
}

type enterpriseSearchStatusPtrType EnterpriseSearchStatusArgs

func EnterpriseSearchStatusPtr(v *EnterpriseSearchStatusArgs) EnterpriseSearchStatusPtrInput {
	return (*enterpriseSearchStatusPtrType)(v)
}

func (*enterpriseSearchStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchStatus)(nil)).Elem()
}

func (i *enterpriseSearchStatusPtrType) ToEnterpriseSearchStatusPtrOutput() EnterpriseSearchStatusPtrOutput {
	return i.ToEnterpriseSearchStatusPtrOutputWithContext(context.Background())
}

func (i *enterpriseSearchStatusPtrType) ToEnterpriseSearchStatusPtrOutputWithContext(ctx context.Context) EnterpriseSearchStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnterpriseSearchStatusPtrOutput)
}

// EnterpriseSearchStatus defines the observed state of EnterpriseSearch
type EnterpriseSearchStatusOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnterpriseSearchStatus)(nil)).Elem()
}

func (o EnterpriseSearchStatusOutput) ToEnterpriseSearchStatusOutput() EnterpriseSearchStatusOutput {
	return o
}

func (o EnterpriseSearchStatusOutput) ToEnterpriseSearchStatusOutputWithContext(ctx context.Context) EnterpriseSearchStatusOutput {
	return o
}

func (o EnterpriseSearchStatusOutput) ToEnterpriseSearchStatusPtrOutput() EnterpriseSearchStatusPtrOutput {
	return o.ToEnterpriseSearchStatusPtrOutputWithContext(context.Background())
}

func (o EnterpriseSearchStatusOutput) ToEnterpriseSearchStatusPtrOutputWithContext(ctx context.Context) EnterpriseSearchStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnterpriseSearchStatus) *EnterpriseSearchStatus {
		return &v
	}).(EnterpriseSearchStatusPtrOutput)
}

// Association is the status of any auto-linking to Elasticsearch clusters.
func (o EnterpriseSearchStatusOutput) AssociationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchStatus) *string { return v.AssociationStatus }).(pulumi.StringPtrOutput)
}

// AvailableNodes is the number of available replicas in the deployment.
func (o EnterpriseSearchStatusOutput) AvailableNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchStatus) *int { return v.AvailableNodes }).(pulumi.IntPtrOutput)
}

// Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
func (o EnterpriseSearchStatusOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchStatus) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// Health of the deployment.
func (o EnterpriseSearchStatusOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchStatus) *string { return v.Health }).(pulumi.StringPtrOutput)
}

// ObservedGeneration represents the .metadata.generation that the status is based upon.
// It corresponds to the metadata generation, which is updated on mutation by the API Server.
// If the generation observed in status diverges from the generation in metadata, the Enterprise Search
// controller has not yet processed the changes contained in the Enterprise Search specification.
func (o EnterpriseSearchStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// Selector is the label selector used to find all pods.
func (o EnterpriseSearchStatusOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchStatus) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

// ExternalService is the name of the service associated to the Enterprise Search Pods.
func (o EnterpriseSearchStatusOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchStatus) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// Version of the stack resource currently running. During version upgrades, multiple versions may run
// in parallel: this value specifies the lowest version currently running.
func (o EnterpriseSearchStatusOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnterpriseSearchStatus) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type EnterpriseSearchStatusPtrOutput struct{ *pulumi.OutputState }

func (EnterpriseSearchStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnterpriseSearchStatus)(nil)).Elem()
}

func (o EnterpriseSearchStatusPtrOutput) ToEnterpriseSearchStatusPtrOutput() EnterpriseSearchStatusPtrOutput {
	return o
}

func (o EnterpriseSearchStatusPtrOutput) ToEnterpriseSearchStatusPtrOutputWithContext(ctx context.Context) EnterpriseSearchStatusPtrOutput {
	return o
}

func (o EnterpriseSearchStatusPtrOutput) Elem() EnterpriseSearchStatusOutput {
	return o.ApplyT(func(v *EnterpriseSearchStatus) EnterpriseSearchStatus {
		if v != nil {
			return *v
		}
		var ret EnterpriseSearchStatus
		return ret
	}).(EnterpriseSearchStatusOutput)
}

// Association is the status of any auto-linking to Elasticsearch clusters.
func (o EnterpriseSearchStatusPtrOutput) AssociationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchStatus) *string {
		if v == nil {
			return nil
		}
		return v.AssociationStatus
	}).(pulumi.StringPtrOutput)
}

// AvailableNodes is the number of available replicas in the deployment.
func (o EnterpriseSearchStatusPtrOutput) AvailableNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchStatus) *int {
		if v == nil {
			return nil
		}
		return v.AvailableNodes
	}).(pulumi.IntPtrOutput)
}

// Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
func (o EnterpriseSearchStatusPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchStatus) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// Health of the deployment.
func (o EnterpriseSearchStatusPtrOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchStatus) *string {
		if v == nil {
			return nil
		}
		return v.Health
	}).(pulumi.StringPtrOutput)
}

// ObservedGeneration represents the .metadata.generation that the status is based upon.
// It corresponds to the metadata generation, which is updated on mutation by the API Server.
// If the generation observed in status diverges from the generation in metadata, the Enterprise Search
// controller has not yet processed the changes contained in the Enterprise Search specification.
func (o EnterpriseSearchStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// Selector is the label selector used to find all pods.
func (o EnterpriseSearchStatusPtrOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchStatus) *string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringPtrOutput)
}

// ExternalService is the name of the service associated to the Enterprise Search Pods.
func (o EnterpriseSearchStatusPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchStatus) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Version of the stack resource currently running. During version upgrades, multiple versions may run
// in parallel: this value specifies the lowest version currently running.
func (o EnterpriseSearchStatusPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EnterpriseSearchStatus) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecInput)(nil)).Elem(), EnterpriseSearchSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecPtrInput)(nil)).Elem(), EnterpriseSearchSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecConfigRefInput)(nil)).Elem(), EnterpriseSearchSpecConfigRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecConfigRefPtrInput)(nil)).Elem(), EnterpriseSearchSpecConfigRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecElasticsearchRefInput)(nil)).Elem(), EnterpriseSearchSpecElasticsearchRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecElasticsearchRefPtrInput)(nil)).Elem(), EnterpriseSearchSpecElasticsearchRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpInput)(nil)).Elem(), EnterpriseSearchSpecHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpPtrInput)(nil)).Elem(), EnterpriseSearchSpecHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServicePtrInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceMetadataInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceMetadataPtrInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecPtrInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecPortsInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceSpecPortsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecPortsArrayInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceSpecPortsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrInput)(nil)).Elem(), EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpTlsInput)(nil)).Elem(), EnterpriseSearchSpecHttpTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpTlsPtrInput)(nil)).Elem(), EnterpriseSearchSpecHttpTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpTlsCertificateInput)(nil)).Elem(), EnterpriseSearchSpecHttpTlsCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpTlsCertificatePtrInput)(nil)).Elem(), EnterpriseSearchSpecHttpTlsCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpTlsSelfSignedCertificateInput)(nil)).Elem(), EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrInput)(nil)).Elem(), EnterpriseSearchSpecHttpTlsSelfSignedCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput)(nil)).Elem(), EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput)(nil)).Elem(), EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchStatusInput)(nil)).Elem(), EnterpriseSearchStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnterpriseSearchStatusPtrInput)(nil)).Elem(), EnterpriseSearchStatusArgs{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecConfigRefOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecConfigRefPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecElasticsearchRefOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecElasticsearchRefPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServicePtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceMetadataOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceMetadataPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecPortsOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecPortsArrayOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsPtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsCertificateOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsCertificatePtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsSelfSignedCertificateOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsSelfSignedCertificatePtrOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchStatusOutput{})
	pulumi.RegisterOutputType(EnterpriseSearchStatusPtrOutput{})
}
