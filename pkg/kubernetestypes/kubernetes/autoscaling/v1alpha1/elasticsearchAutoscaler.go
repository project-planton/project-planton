// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ElasticsearchAutoscaler represents an ElasticsearchAutoscaler resource in a Kubernetes cluster.
type ElasticsearchAutoscaler struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// ElasticsearchAutoscalerSpec holds the specification of an Elasticsearch autoscaler resource.
	Spec   ElasticsearchAutoscalerSpecPtrOutput   `pulumi:"spec"`
	Status ElasticsearchAutoscalerStatusPtrOutput `pulumi:"status"`
}

// NewElasticsearchAutoscaler registers a new resource with the given unique name, arguments, and options.
func NewElasticsearchAutoscaler(ctx *pulumi.Context,
	name string, args *ElasticsearchAutoscalerArgs, opts ...pulumi.ResourceOption) (*ElasticsearchAutoscaler, error) {
	if args == nil {
		args = &ElasticsearchAutoscalerArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("autoscaling.k8s.elastic.co/v1alpha1")
	args.Kind = pulumi.StringPtr("ElasticsearchAutoscaler")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ElasticsearchAutoscaler
	err := ctx.RegisterResource("kubernetes:autoscaling.k8s.elastic.co/v1alpha1:ElasticsearchAutoscaler", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticsearchAutoscaler gets an existing ElasticsearchAutoscaler resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticsearchAutoscaler(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticsearchAutoscalerState, opts ...pulumi.ResourceOption) (*ElasticsearchAutoscaler, error) {
	var resource ElasticsearchAutoscaler
	err := ctx.ReadResource("kubernetes:autoscaling.k8s.elastic.co/v1alpha1:ElasticsearchAutoscaler", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElasticsearchAutoscaler resources.
type elasticsearchAutoscalerState struct {
}

type ElasticsearchAutoscalerState struct {
}

func (ElasticsearchAutoscalerState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchAutoscalerState)(nil)).Elem()
}

type elasticsearchAutoscalerArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ElasticsearchAutoscalerSpec holds the specification of an Elasticsearch autoscaler resource.
	Spec   *ElasticsearchAutoscalerSpec   `pulumi:"spec"`
	Status *ElasticsearchAutoscalerStatus `pulumi:"status"`
}

// The set of arguments for constructing a ElasticsearchAutoscaler resource.
type ElasticsearchAutoscalerArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// ElasticsearchAutoscalerSpec holds the specification of an Elasticsearch autoscaler resource.
	Spec   ElasticsearchAutoscalerSpecPtrInput
	Status ElasticsearchAutoscalerStatusPtrInput
}

func (ElasticsearchAutoscalerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchAutoscalerArgs)(nil)).Elem()
}

type ElasticsearchAutoscalerInput interface {
	pulumi.Input

	ToElasticsearchAutoscalerOutput() ElasticsearchAutoscalerOutput
	ToElasticsearchAutoscalerOutputWithContext(ctx context.Context) ElasticsearchAutoscalerOutput
}

func (*ElasticsearchAutoscaler) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchAutoscaler)(nil)).Elem()
}

func (i *ElasticsearchAutoscaler) ToElasticsearchAutoscalerOutput() ElasticsearchAutoscalerOutput {
	return i.ToElasticsearchAutoscalerOutputWithContext(context.Background())
}

func (i *ElasticsearchAutoscaler) ToElasticsearchAutoscalerOutputWithContext(ctx context.Context) ElasticsearchAutoscalerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchAutoscalerOutput)
}

type ElasticsearchAutoscalerOutput struct{ *pulumi.OutputState }

func (ElasticsearchAutoscalerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchAutoscaler)(nil)).Elem()
}

func (o ElasticsearchAutoscalerOutput) ToElasticsearchAutoscalerOutput() ElasticsearchAutoscalerOutput {
	return o
}

func (o ElasticsearchAutoscalerOutput) ToElasticsearchAutoscalerOutputWithContext(ctx context.Context) ElasticsearchAutoscalerOutput {
	return o
}

func (o ElasticsearchAutoscalerOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchAutoscaler) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchAutoscalerOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchAutoscaler) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchAutoscalerOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *ElasticsearchAutoscaler) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// ElasticsearchAutoscalerSpec holds the specification of an Elasticsearch autoscaler resource.
func (o ElasticsearchAutoscalerOutput) Spec() ElasticsearchAutoscalerSpecPtrOutput {
	return o.ApplyT(func(v *ElasticsearchAutoscaler) ElasticsearchAutoscalerSpecPtrOutput { return v.Spec }).(ElasticsearchAutoscalerSpecPtrOutput)
}

func (o ElasticsearchAutoscalerOutput) Status() ElasticsearchAutoscalerStatusPtrOutput {
	return o.ApplyT(func(v *ElasticsearchAutoscaler) ElasticsearchAutoscalerStatusPtrOutput { return v.Status }).(ElasticsearchAutoscalerStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchAutoscalerInput)(nil)).Elem(), &ElasticsearchAutoscaler{})
	pulumi.RegisterOutputType(ElasticsearchAutoscalerOutput{})
}
