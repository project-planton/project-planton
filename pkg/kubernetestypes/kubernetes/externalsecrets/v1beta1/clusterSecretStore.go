// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ClusterSecretStore represents a secure external location for storing secrets, which can be referenced as part of `storeRef` fields.
type ClusterSecretStore struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// SecretStoreSpec defines the desired state of SecretStore.
	Spec ClusterSecretStoreSpecPtrOutput `pulumi:"spec"`
	// SecretStoreStatus defines the observed state of the SecretStore.
	Status ClusterSecretStoreStatusPtrOutput `pulumi:"status"`
}

// NewClusterSecretStore registers a new resource with the given unique name, arguments, and options.
func NewClusterSecretStore(ctx *pulumi.Context,
	name string, args *ClusterSecretStoreArgs, opts ...pulumi.ResourceOption) (*ClusterSecretStore, error) {
	if args == nil {
		args = &ClusterSecretStoreArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("external-secrets.io/v1beta1")
	args.Kind = pulumi.StringPtr("ClusterSecretStore")
	if args.Spec != nil {
		args.Spec = args.Spec.ToClusterSecretStoreSpecPtrOutput().ApplyT(func(v *ClusterSecretStoreSpec) *ClusterSecretStoreSpec { return v.Defaults() }).(ClusterSecretStoreSpecPtrOutput)
	}
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ClusterSecretStore
	err := ctx.RegisterResource("kubernetes:external-secrets.io/v1beta1:ClusterSecretStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterSecretStore gets an existing ClusterSecretStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterSecretStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterSecretStoreState, opts ...pulumi.ResourceOption) (*ClusterSecretStore, error) {
	var resource ClusterSecretStore
	err := ctx.ReadResource("kubernetes:external-secrets.io/v1beta1:ClusterSecretStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterSecretStore resources.
type clusterSecretStoreState struct {
}

type ClusterSecretStoreState struct {
}

func (ClusterSecretStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterSecretStoreState)(nil)).Elem()
}

type clusterSecretStoreArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// SecretStoreSpec defines the desired state of SecretStore.
	Spec *ClusterSecretStoreSpec `pulumi:"spec"`
	// SecretStoreStatus defines the observed state of the SecretStore.
	Status *ClusterSecretStoreStatus `pulumi:"status"`
}

// The set of arguments for constructing a ClusterSecretStore resource.
type ClusterSecretStoreArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// SecretStoreSpec defines the desired state of SecretStore.
	Spec ClusterSecretStoreSpecPtrInput
	// SecretStoreStatus defines the observed state of the SecretStore.
	Status ClusterSecretStoreStatusPtrInput
}

func (ClusterSecretStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterSecretStoreArgs)(nil)).Elem()
}

type ClusterSecretStoreInput interface {
	pulumi.Input

	ToClusterSecretStoreOutput() ClusterSecretStoreOutput
	ToClusterSecretStoreOutputWithContext(ctx context.Context) ClusterSecretStoreOutput
}

func (*ClusterSecretStore) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSecretStore)(nil)).Elem()
}

func (i *ClusterSecretStore) ToClusterSecretStoreOutput() ClusterSecretStoreOutput {
	return i.ToClusterSecretStoreOutputWithContext(context.Background())
}

func (i *ClusterSecretStore) ToClusterSecretStoreOutputWithContext(ctx context.Context) ClusterSecretStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSecretStoreOutput)
}

type ClusterSecretStoreOutput struct{ *pulumi.OutputState }

func (ClusterSecretStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSecretStore)(nil)).Elem()
}

func (o ClusterSecretStoreOutput) ToClusterSecretStoreOutput() ClusterSecretStoreOutput {
	return o
}

func (o ClusterSecretStoreOutput) ToClusterSecretStoreOutputWithContext(ctx context.Context) ClusterSecretStoreOutput {
	return o
}

func (o ClusterSecretStoreOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSecretStore) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o ClusterSecretStoreOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterSecretStore) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ClusterSecretStoreOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *ClusterSecretStore) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// SecretStoreSpec defines the desired state of SecretStore.
func (o ClusterSecretStoreOutput) Spec() ClusterSecretStoreSpecPtrOutput {
	return o.ApplyT(func(v *ClusterSecretStore) ClusterSecretStoreSpecPtrOutput { return v.Spec }).(ClusterSecretStoreSpecPtrOutput)
}

// SecretStoreStatus defines the observed state of the SecretStore.
func (o ClusterSecretStoreOutput) Status() ClusterSecretStoreStatusPtrOutput {
	return o.ApplyT(func(v *ClusterSecretStore) ClusterSecretStoreStatusPtrOutput { return v.Status }).(ClusterSecretStoreStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSecretStoreInput)(nil)).Elem(), &ClusterSecretStore{})
	pulumi.RegisterOutputType(ClusterSecretStoreOutput{})
}
