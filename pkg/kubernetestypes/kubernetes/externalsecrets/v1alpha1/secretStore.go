// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// SecretStore represents a secure external location for storing secrets, which can be referenced as part of `storeRef` fields.
type SecretStore struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// SecretStoreSpec defines the desired state of SecretStore.
	Spec SecretStoreSpecPtrOutput `pulumi:"spec"`
	// SecretStoreStatus defines the observed state of the SecretStore.
	Status SecretStoreStatusPtrOutput `pulumi:"status"`
}

// NewSecretStore registers a new resource with the given unique name, arguments, and options.
func NewSecretStore(ctx *pulumi.Context,
	name string, args *SecretStoreArgs, opts ...pulumi.ResourceOption) (*SecretStore, error) {
	if args == nil {
		args = &SecretStoreArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("external-secrets.io/v1alpha1")
	args.Kind = pulumi.StringPtr("SecretStore")
	if args.Spec != nil {
		args.Spec = args.Spec.ToSecretStoreSpecPtrOutput().ApplyT(func(v *SecretStoreSpec) *SecretStoreSpec { return v.Defaults() }).(SecretStoreSpecPtrOutput)
	}
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource SecretStore
	err := ctx.RegisterResource("kubernetes:external-secrets.io/v1alpha1:SecretStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretStore gets an existing SecretStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretStoreState, opts ...pulumi.ResourceOption) (*SecretStore, error) {
	var resource SecretStore
	err := ctx.ReadResource("kubernetes:external-secrets.io/v1alpha1:SecretStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecretStore resources.
type secretStoreState struct {
}

type SecretStoreState struct {
}

func (SecretStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretStoreState)(nil)).Elem()
}

type secretStoreArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// SecretStoreSpec defines the desired state of SecretStore.
	Spec *SecretStoreSpec `pulumi:"spec"`
	// SecretStoreStatus defines the observed state of the SecretStore.
	Status *SecretStoreStatus `pulumi:"status"`
}

// The set of arguments for constructing a SecretStore resource.
type SecretStoreArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// SecretStoreSpec defines the desired state of SecretStore.
	Spec SecretStoreSpecPtrInput
	// SecretStoreStatus defines the observed state of the SecretStore.
	Status SecretStoreStatusPtrInput
}

func (SecretStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretStoreArgs)(nil)).Elem()
}

type SecretStoreInput interface {
	pulumi.Input

	ToSecretStoreOutput() SecretStoreOutput
	ToSecretStoreOutputWithContext(ctx context.Context) SecretStoreOutput
}

func (*SecretStore) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStore)(nil)).Elem()
}

func (i *SecretStore) ToSecretStoreOutput() SecretStoreOutput {
	return i.ToSecretStoreOutputWithContext(context.Background())
}

func (i *SecretStore) ToSecretStoreOutputWithContext(ctx context.Context) SecretStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretStoreOutput)
}

type SecretStoreOutput struct{ *pulumi.OutputState }

func (SecretStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretStore)(nil)).Elem()
}

func (o SecretStoreOutput) ToSecretStoreOutput() SecretStoreOutput {
	return o
}

func (o SecretStoreOutput) ToSecretStoreOutputWithContext(ctx context.Context) SecretStoreOutput {
	return o
}

func (o SecretStoreOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStore) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o SecretStoreOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretStore) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o SecretStoreOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *SecretStore) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// SecretStoreSpec defines the desired state of SecretStore.
func (o SecretStoreOutput) Spec() SecretStoreSpecPtrOutput {
	return o.ApplyT(func(v *SecretStore) SecretStoreSpecPtrOutput { return v.Spec }).(SecretStoreSpecPtrOutput)
}

// SecretStoreStatus defines the observed state of the SecretStore.
func (o SecretStoreOutput) Status() SecretStoreStatusPtrOutput {
	return o.ApplyT(func(v *SecretStore) SecretStoreStatusPtrOutput { return v.Status }).(SecretStoreStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretStoreInput)(nil)).Elem(), &SecretStore{})
	pulumi.RegisterOutputType(SecretStoreOutput{})
}
