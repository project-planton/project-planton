// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Logstash is the Schema for the logstashes API
type Logstash struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// LogstashSpec defines the desired state of Logstash
	Spec LogstashSpecPtrOutput `pulumi:"spec"`
	// LogstashStatus defines the observed state of Logstash
	Status LogstashStatusPtrOutput `pulumi:"status"`
}

// NewLogstash registers a new resource with the given unique name, arguments, and options.
func NewLogstash(ctx *pulumi.Context,
	name string, args *LogstashArgs, opts ...pulumi.ResourceOption) (*Logstash, error) {
	if args == nil {
		args = &LogstashArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("logstash.k8s.elastic.co/v1alpha1")
	args.Kind = pulumi.StringPtr("Logstash")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Logstash
	err := ctx.RegisterResource("kubernetes:logstash.k8s.elastic.co/v1alpha1:Logstash", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogstash gets an existing Logstash resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogstash(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogstashState, opts ...pulumi.ResourceOption) (*Logstash, error) {
	var resource Logstash
	err := ctx.ReadResource("kubernetes:logstash.k8s.elastic.co/v1alpha1:Logstash", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Logstash resources.
type logstashState struct {
}

type LogstashState struct {
}

func (LogstashState) ElementType() reflect.Type {
	return reflect.TypeOf((*logstashState)(nil)).Elem()
}

type logstashArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// LogstashSpec defines the desired state of Logstash
	Spec *LogstashSpec `pulumi:"spec"`
	// LogstashStatus defines the observed state of Logstash
	Status *LogstashStatus `pulumi:"status"`
}

// The set of arguments for constructing a Logstash resource.
type LogstashArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// LogstashSpec defines the desired state of Logstash
	Spec LogstashSpecPtrInput
	// LogstashStatus defines the observed state of Logstash
	Status LogstashStatusPtrInput
}

func (LogstashArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logstashArgs)(nil)).Elem()
}

type LogstashInput interface {
	pulumi.Input

	ToLogstashOutput() LogstashOutput
	ToLogstashOutputWithContext(ctx context.Context) LogstashOutput
}

func (*Logstash) ElementType() reflect.Type {
	return reflect.TypeOf((**Logstash)(nil)).Elem()
}

func (i *Logstash) ToLogstashOutput() LogstashOutput {
	return i.ToLogstashOutputWithContext(context.Background())
}

func (i *Logstash) ToLogstashOutputWithContext(ctx context.Context) LogstashOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogstashOutput)
}

type LogstashOutput struct{ *pulumi.OutputState }

func (LogstashOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Logstash)(nil)).Elem()
}

func (o LogstashOutput) ToLogstashOutput() LogstashOutput {
	return o
}

func (o LogstashOutput) ToLogstashOutputWithContext(ctx context.Context) LogstashOutput {
	return o
}

func (o LogstashOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Logstash) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o LogstashOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Logstash) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o LogstashOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *Logstash) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// LogstashSpec defines the desired state of Logstash
func (o LogstashOutput) Spec() LogstashSpecPtrOutput {
	return o.ApplyT(func(v *Logstash) LogstashSpecPtrOutput { return v.Spec }).(LogstashSpecPtrOutput)
}

// LogstashStatus defines the observed state of Logstash
func (o LogstashOutput) Status() LogstashStatusPtrOutput {
	return o.ApplyT(func(v *Logstash) LogstashStatusPtrOutput { return v.Status }).(LogstashStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogstashInput)(nil)).Elem(), &Logstash{})
	pulumi.RegisterOutputType(LogstashOutput{})
}
