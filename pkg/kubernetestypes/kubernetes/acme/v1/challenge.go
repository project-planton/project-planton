// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Challenge is a type to represent a Challenge request with an ACME server
type Challenge struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput   `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput   `pulumi:"kind"`
	Metadata   metav1.ObjectMetaOutput  `pulumi:"metadata"`
	Spec       ChallengeSpecOutput      `pulumi:"spec"`
	Status     ChallengeStatusPtrOutput `pulumi:"status"`
}

// NewChallenge registers a new resource with the given unique name, arguments, and options.
func NewChallenge(ctx *pulumi.Context,
	name string, args *ChallengeArgs, opts ...pulumi.ResourceOption) (*Challenge, error) {
	if args == nil {
		args = &ChallengeArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("acme.cert-manager.io/v1")
	args.Kind = pulumi.StringPtr("Challenge")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Challenge
	err := ctx.RegisterResource("kubernetes:acme.cert-manager.io/v1:Challenge", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChallenge gets an existing Challenge resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChallenge(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChallengeState, opts ...pulumi.ResourceOption) (*Challenge, error) {
	var resource Challenge
	err := ctx.ReadResource("kubernetes:acme.cert-manager.io/v1:Challenge", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Challenge resources.
type challengeState struct {
}

type ChallengeState struct {
}

func (ChallengeState) ElementType() reflect.Type {
	return reflect.TypeOf((*challengeState)(nil)).Elem()
}

type challengeArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Spec       *ChallengeSpec     `pulumi:"spec"`
	Status     *ChallengeStatus   `pulumi:"status"`
}

// The set of arguments for constructing a Challenge resource.
type ChallengeArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	Spec       ChallengeSpecPtrInput
	Status     ChallengeStatusPtrInput
}

func (ChallengeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*challengeArgs)(nil)).Elem()
}

type ChallengeInput interface {
	pulumi.Input

	ToChallengeOutput() ChallengeOutput
	ToChallengeOutputWithContext(ctx context.Context) ChallengeOutput
}

func (*Challenge) ElementType() reflect.Type {
	return reflect.TypeOf((**Challenge)(nil)).Elem()
}

func (i *Challenge) ToChallengeOutput() ChallengeOutput {
	return i.ToChallengeOutputWithContext(context.Background())
}

func (i *Challenge) ToChallengeOutputWithContext(ctx context.Context) ChallengeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChallengeOutput)
}

type ChallengeOutput struct{ *pulumi.OutputState }

func (ChallengeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Challenge)(nil)).Elem()
}

func (o ChallengeOutput) ToChallengeOutput() ChallengeOutput {
	return o
}

func (o ChallengeOutput) ToChallengeOutputWithContext(ctx context.Context) ChallengeOutput {
	return o
}

func (o ChallengeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Challenge) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o ChallengeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Challenge) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ChallengeOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *Challenge) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o ChallengeOutput) Spec() ChallengeSpecOutput {
	return o.ApplyT(func(v *Challenge) ChallengeSpecOutput { return v.Spec }).(ChallengeSpecOutput)
}

func (o ChallengeOutput) Status() ChallengeStatusPtrOutput {
	return o.ApplyT(func(v *Challenge) ChallengeStatusPtrOutput { return v.Status }).(ChallengeStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChallengeInput)(nil)).Elem(), &Challenge{})
	pulumi.RegisterOutputType(ChallengeOutput{})
}
