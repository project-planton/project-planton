// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// ACRAccessToken returns a Azure Container Registry token
// that can be used for pushing/pulling images.
// Note: by default it will return an ACR Refresh Token with full access
// (depending on the identity).
// This can be scoped down to the repository level using .spec.scope.
// In case scope is defined it will return an ACR Access Token.
//
// See docs: https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md
type ACRAccessTokenType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ACRAccessTokenSpec defines how to generate the access token
	// e.g. how to authenticate and which registry to use.
	// see: https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md#overview
	Spec *ACRAccessTokenSpec `pulumi:"spec"`
}

// Defaults sets the appropriate defaults for ACRAccessTokenType
func (val *ACRAccessTokenType) Defaults() *ACRAccessTokenType {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Spec = tmp.Spec.Defaults()

	return &tmp
}

type ACRAccessTokenMetadata struct {
}

// ACRAccessTokenSpec defines how to generate the access token
// e.g. how to authenticate and which registry to use.
// see: https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md#overview
type ACRAccessTokenSpec struct {
	Auth ACRAccessTokenSpecAuth `pulumi:"auth"`
	// EnvironmentType specifies the Azure cloud environment endpoints to use for
	// connecting and authenticating with Azure. By default it points to the public cloud AAD endpoint.
	// The following endpoints are available, also see here: https://github.com/Azure/go-autorest/blob/main/autorest/azure/environments.go#L152
	// PublicCloud, USGovernmentCloud, ChinaCloud, GermanCloud
	EnvironmentType *string `pulumi:"environmentType"`
	// the domain name of the ACR registry
	// e.g. foobarexample.azurecr.io
	Registry string `pulumi:"registry"`
	// Define the scope for the access token, e.g. pull/push access for a repository.
	// if not provided it will return a refresh token that has full scope.
	// Note: you need to pin it down to the repository level, there is no wildcard available.
	//
	// examples:
	// repository:my-repository:pull,push
	// repository:my-repository:pull
	//
	// see docs for details: https://docs.docker.com/registry/spec/auth/scope/
	Scope *string `pulumi:"scope"`
	// TenantID configures the Azure Tenant to send requests to. Required for ServicePrincipal auth type.
	TenantId *string `pulumi:"tenantId"`
}

// Defaults sets the appropriate defaults for ACRAccessTokenSpec
func (val *ACRAccessTokenSpec) Defaults() *ACRAccessTokenSpec {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnvironmentType == nil {
		environmentType_ := "PublicCloud"
		tmp.EnvironmentType = &environmentType_
	}
	return &tmp
}

// ACRAccessTokenSpecInput is an input type that accepts ACRAccessTokenSpecArgs and ACRAccessTokenSpecOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecInput` via:
//
//	ACRAccessTokenSpecArgs{...}
type ACRAccessTokenSpecInput interface {
	pulumi.Input

	ToACRAccessTokenSpecOutput() ACRAccessTokenSpecOutput
	ToACRAccessTokenSpecOutputWithContext(context.Context) ACRAccessTokenSpecOutput
}

// ACRAccessTokenSpec defines how to generate the access token
// e.g. how to authenticate and which registry to use.
// see: https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md#overview
type ACRAccessTokenSpecArgs struct {
	Auth ACRAccessTokenSpecAuthInput `pulumi:"auth"`
	// EnvironmentType specifies the Azure cloud environment endpoints to use for
	// connecting and authenticating with Azure. By default it points to the public cloud AAD endpoint.
	// The following endpoints are available, also see here: https://github.com/Azure/go-autorest/blob/main/autorest/azure/environments.go#L152
	// PublicCloud, USGovernmentCloud, ChinaCloud, GermanCloud
	EnvironmentType pulumi.StringPtrInput `pulumi:"environmentType"`
	// the domain name of the ACR registry
	// e.g. foobarexample.azurecr.io
	Registry pulumi.StringInput `pulumi:"registry"`
	// Define the scope for the access token, e.g. pull/push access for a repository.
	// if not provided it will return a refresh token that has full scope.
	// Note: you need to pin it down to the repository level, there is no wildcard available.
	//
	// examples:
	// repository:my-repository:pull,push
	// repository:my-repository:pull
	//
	// see docs for details: https://docs.docker.com/registry/spec/auth/scope/
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// TenantID configures the Azure Tenant to send requests to. Required for ServicePrincipal auth type.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

// Defaults sets the appropriate defaults for ACRAccessTokenSpecArgs
func (val *ACRAccessTokenSpecArgs) Defaults() *ACRAccessTokenSpecArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnvironmentType == nil {
		tmp.EnvironmentType = pulumi.StringPtr("PublicCloud")
	}
	return &tmp
}
func (ACRAccessTokenSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpec)(nil)).Elem()
}

func (i ACRAccessTokenSpecArgs) ToACRAccessTokenSpecOutput() ACRAccessTokenSpecOutput {
	return i.ToACRAccessTokenSpecOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecArgs) ToACRAccessTokenSpecOutputWithContext(ctx context.Context) ACRAccessTokenSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecOutput)
}

func (i ACRAccessTokenSpecArgs) ToACRAccessTokenSpecPtrOutput() ACRAccessTokenSpecPtrOutput {
	return i.ToACRAccessTokenSpecPtrOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecArgs) ToACRAccessTokenSpecPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecOutput).ToACRAccessTokenSpecPtrOutputWithContext(ctx)
}

// ACRAccessTokenSpecPtrInput is an input type that accepts ACRAccessTokenSpecArgs, ACRAccessTokenSpecPtr and ACRAccessTokenSpecPtrOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecPtrInput` via:
//
//	        ACRAccessTokenSpecArgs{...}
//
//	or:
//
//	        nil
type ACRAccessTokenSpecPtrInput interface {
	pulumi.Input

	ToACRAccessTokenSpecPtrOutput() ACRAccessTokenSpecPtrOutput
	ToACRAccessTokenSpecPtrOutputWithContext(context.Context) ACRAccessTokenSpecPtrOutput
}

type acraccessTokenSpecPtrType ACRAccessTokenSpecArgs

func ACRAccessTokenSpecPtr(v *ACRAccessTokenSpecArgs) ACRAccessTokenSpecPtrInput {
	return (*acraccessTokenSpecPtrType)(v)
}

func (*acraccessTokenSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpec)(nil)).Elem()
}

func (i *acraccessTokenSpecPtrType) ToACRAccessTokenSpecPtrOutput() ACRAccessTokenSpecPtrOutput {
	return i.ToACRAccessTokenSpecPtrOutputWithContext(context.Background())
}

func (i *acraccessTokenSpecPtrType) ToACRAccessTokenSpecPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecPtrOutput)
}

// ACRAccessTokenSpec defines how to generate the access token
// e.g. how to authenticate and which registry to use.
// see: https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md#overview
type ACRAccessTokenSpecOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpec)(nil)).Elem()
}

func (o ACRAccessTokenSpecOutput) ToACRAccessTokenSpecOutput() ACRAccessTokenSpecOutput {
	return o
}

func (o ACRAccessTokenSpecOutput) ToACRAccessTokenSpecOutputWithContext(ctx context.Context) ACRAccessTokenSpecOutput {
	return o
}

func (o ACRAccessTokenSpecOutput) ToACRAccessTokenSpecPtrOutput() ACRAccessTokenSpecPtrOutput {
	return o.ToACRAccessTokenSpecPtrOutputWithContext(context.Background())
}

func (o ACRAccessTokenSpecOutput) ToACRAccessTokenSpecPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ACRAccessTokenSpec) *ACRAccessTokenSpec {
		return &v
	}).(ACRAccessTokenSpecPtrOutput)
}

func (o ACRAccessTokenSpecOutput) Auth() ACRAccessTokenSpecAuthOutput {
	return o.ApplyT(func(v ACRAccessTokenSpec) ACRAccessTokenSpecAuth { return v.Auth }).(ACRAccessTokenSpecAuthOutput)
}

// EnvironmentType specifies the Azure cloud environment endpoints to use for
// connecting and authenticating with Azure. By default it points to the public cloud AAD endpoint.
// The following endpoints are available, also see here: https://github.com/Azure/go-autorest/blob/main/autorest/azure/environments.go#L152
// PublicCloud, USGovernmentCloud, ChinaCloud, GermanCloud
func (o ACRAccessTokenSpecOutput) EnvironmentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpec) *string { return v.EnvironmentType }).(pulumi.StringPtrOutput)
}

// the domain name of the ACR registry
// e.g. foobarexample.azurecr.io
func (o ACRAccessTokenSpecOutput) Registry() pulumi.StringOutput {
	return o.ApplyT(func(v ACRAccessTokenSpec) string { return v.Registry }).(pulumi.StringOutput)
}

// Define the scope for the access token, e.g. pull/push access for a repository.
// if not provided it will return a refresh token that has full scope.
// Note: you need to pin it down to the repository level, there is no wildcard available.
//
// examples:
// repository:my-repository:pull,push
// repository:my-repository:pull
//
// see docs for details: https://docs.docker.com/registry/spec/auth/scope/
func (o ACRAccessTokenSpecOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpec) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// TenantID configures the Azure Tenant to send requests to. Required for ServicePrincipal auth type.
func (o ACRAccessTokenSpecOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpec) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type ACRAccessTokenSpecPtrOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpec)(nil)).Elem()
}

func (o ACRAccessTokenSpecPtrOutput) ToACRAccessTokenSpecPtrOutput() ACRAccessTokenSpecPtrOutput {
	return o
}

func (o ACRAccessTokenSpecPtrOutput) ToACRAccessTokenSpecPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecPtrOutput {
	return o
}

func (o ACRAccessTokenSpecPtrOutput) Elem() ACRAccessTokenSpecOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpec) ACRAccessTokenSpec {
		if v != nil {
			return *v
		}
		var ret ACRAccessTokenSpec
		return ret
	}).(ACRAccessTokenSpecOutput)
}

func (o ACRAccessTokenSpecPtrOutput) Auth() ACRAccessTokenSpecAuthPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpec) *ACRAccessTokenSpecAuth {
		if v == nil {
			return nil
		}
		return &v.Auth
	}).(ACRAccessTokenSpecAuthPtrOutput)
}

// EnvironmentType specifies the Azure cloud environment endpoints to use for
// connecting and authenticating with Azure. By default it points to the public cloud AAD endpoint.
// The following endpoints are available, also see here: https://github.com/Azure/go-autorest/blob/main/autorest/azure/environments.go#L152
// PublicCloud, USGovernmentCloud, ChinaCloud, GermanCloud
func (o ACRAccessTokenSpecPtrOutput) EnvironmentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpec) *string {
		if v == nil {
			return nil
		}
		return v.EnvironmentType
	}).(pulumi.StringPtrOutput)
}

// the domain name of the ACR registry
// e.g. foobarexample.azurecr.io
func (o ACRAccessTokenSpecPtrOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Registry
	}).(pulumi.StringPtrOutput)
}

// Define the scope for the access token, e.g. pull/push access for a repository.
// if not provided it will return a refresh token that has full scope.
// Note: you need to pin it down to the repository level, there is no wildcard available.
//
// examples:
// repository:my-repository:pull,push
// repository:my-repository:pull
//
// see docs for details: https://docs.docker.com/registry/spec/auth/scope/
func (o ACRAccessTokenSpecPtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpec) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// TenantID configures the Azure Tenant to send requests to. Required for ServicePrincipal auth type.
func (o ACRAccessTokenSpecPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpec) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

type ACRAccessTokenSpecAuth struct {
	// ManagedIdentity uses Azure Managed Identity to authenticate with Azure.
	ManagedIdentity *ACRAccessTokenSpecAuthManagedIdentity `pulumi:"managedIdentity"`
	// ServicePrincipal uses Azure Service Principal credentials to authenticate with Azure.
	ServicePrincipal *ACRAccessTokenSpecAuthServicePrincipal `pulumi:"servicePrincipal"`
	// WorkloadIdentity uses Azure Workload Identity to authenticate with Azure.
	WorkloadIdentity *ACRAccessTokenSpecAuthWorkloadIdentity `pulumi:"workloadIdentity"`
}

// ACRAccessTokenSpecAuthInput is an input type that accepts ACRAccessTokenSpecAuthArgs and ACRAccessTokenSpecAuthOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthInput` via:
//
//	ACRAccessTokenSpecAuthArgs{...}
type ACRAccessTokenSpecAuthInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthOutput() ACRAccessTokenSpecAuthOutput
	ToACRAccessTokenSpecAuthOutputWithContext(context.Context) ACRAccessTokenSpecAuthOutput
}

type ACRAccessTokenSpecAuthArgs struct {
	// ManagedIdentity uses Azure Managed Identity to authenticate with Azure.
	ManagedIdentity ACRAccessTokenSpecAuthManagedIdentityPtrInput `pulumi:"managedIdentity"`
	// ServicePrincipal uses Azure Service Principal credentials to authenticate with Azure.
	ServicePrincipal ACRAccessTokenSpecAuthServicePrincipalPtrInput `pulumi:"servicePrincipal"`
	// WorkloadIdentity uses Azure Workload Identity to authenticate with Azure.
	WorkloadIdentity ACRAccessTokenSpecAuthWorkloadIdentityPtrInput `pulumi:"workloadIdentity"`
}

func (ACRAccessTokenSpecAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuth)(nil)).Elem()
}

func (i ACRAccessTokenSpecAuthArgs) ToACRAccessTokenSpecAuthOutput() ACRAccessTokenSpecAuthOutput {
	return i.ToACRAccessTokenSpecAuthOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthArgs) ToACRAccessTokenSpecAuthOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthOutput)
}

func (i ACRAccessTokenSpecAuthArgs) ToACRAccessTokenSpecAuthPtrOutput() ACRAccessTokenSpecAuthPtrOutput {
	return i.ToACRAccessTokenSpecAuthPtrOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthArgs) ToACRAccessTokenSpecAuthPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthOutput).ToACRAccessTokenSpecAuthPtrOutputWithContext(ctx)
}

// ACRAccessTokenSpecAuthPtrInput is an input type that accepts ACRAccessTokenSpecAuthArgs, ACRAccessTokenSpecAuthPtr and ACRAccessTokenSpecAuthPtrOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthPtrInput` via:
//
//	        ACRAccessTokenSpecAuthArgs{...}
//
//	or:
//
//	        nil
type ACRAccessTokenSpecAuthPtrInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthPtrOutput() ACRAccessTokenSpecAuthPtrOutput
	ToACRAccessTokenSpecAuthPtrOutputWithContext(context.Context) ACRAccessTokenSpecAuthPtrOutput
}

type acraccessTokenSpecAuthPtrType ACRAccessTokenSpecAuthArgs

func ACRAccessTokenSpecAuthPtr(v *ACRAccessTokenSpecAuthArgs) ACRAccessTokenSpecAuthPtrInput {
	return (*acraccessTokenSpecAuthPtrType)(v)
}

func (*acraccessTokenSpecAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuth)(nil)).Elem()
}

func (i *acraccessTokenSpecAuthPtrType) ToACRAccessTokenSpecAuthPtrOutput() ACRAccessTokenSpecAuthPtrOutput {
	return i.ToACRAccessTokenSpecAuthPtrOutputWithContext(context.Background())
}

func (i *acraccessTokenSpecAuthPtrType) ToACRAccessTokenSpecAuthPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthPtrOutput)
}

type ACRAccessTokenSpecAuthOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuth)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthOutput) ToACRAccessTokenSpecAuthOutput() ACRAccessTokenSpecAuthOutput {
	return o
}

func (o ACRAccessTokenSpecAuthOutput) ToACRAccessTokenSpecAuthOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthOutput {
	return o
}

func (o ACRAccessTokenSpecAuthOutput) ToACRAccessTokenSpecAuthPtrOutput() ACRAccessTokenSpecAuthPtrOutput {
	return o.ToACRAccessTokenSpecAuthPtrOutputWithContext(context.Background())
}

func (o ACRAccessTokenSpecAuthOutput) ToACRAccessTokenSpecAuthPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ACRAccessTokenSpecAuth) *ACRAccessTokenSpecAuth {
		return &v
	}).(ACRAccessTokenSpecAuthPtrOutput)
}

// ManagedIdentity uses Azure Managed Identity to authenticate with Azure.
func (o ACRAccessTokenSpecAuthOutput) ManagedIdentity() ACRAccessTokenSpecAuthManagedIdentityPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuth) *ACRAccessTokenSpecAuthManagedIdentity { return v.ManagedIdentity }).(ACRAccessTokenSpecAuthManagedIdentityPtrOutput)
}

// ServicePrincipal uses Azure Service Principal credentials to authenticate with Azure.
func (o ACRAccessTokenSpecAuthOutput) ServicePrincipal() ACRAccessTokenSpecAuthServicePrincipalPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuth) *ACRAccessTokenSpecAuthServicePrincipal { return v.ServicePrincipal }).(ACRAccessTokenSpecAuthServicePrincipalPtrOutput)
}

// WorkloadIdentity uses Azure Workload Identity to authenticate with Azure.
func (o ACRAccessTokenSpecAuthOutput) WorkloadIdentity() ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuth) *ACRAccessTokenSpecAuthWorkloadIdentity { return v.WorkloadIdentity }).(ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput)
}

type ACRAccessTokenSpecAuthPtrOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuth)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthPtrOutput) ToACRAccessTokenSpecAuthPtrOutput() ACRAccessTokenSpecAuthPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthPtrOutput) ToACRAccessTokenSpecAuthPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthPtrOutput) Elem() ACRAccessTokenSpecAuthOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuth) ACRAccessTokenSpecAuth {
		if v != nil {
			return *v
		}
		var ret ACRAccessTokenSpecAuth
		return ret
	}).(ACRAccessTokenSpecAuthOutput)
}

// ManagedIdentity uses Azure Managed Identity to authenticate with Azure.
func (o ACRAccessTokenSpecAuthPtrOutput) ManagedIdentity() ACRAccessTokenSpecAuthManagedIdentityPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuth) *ACRAccessTokenSpecAuthManagedIdentity {
		if v == nil {
			return nil
		}
		return v.ManagedIdentity
	}).(ACRAccessTokenSpecAuthManagedIdentityPtrOutput)
}

// ServicePrincipal uses Azure Service Principal credentials to authenticate with Azure.
func (o ACRAccessTokenSpecAuthPtrOutput) ServicePrincipal() ACRAccessTokenSpecAuthServicePrincipalPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuth) *ACRAccessTokenSpecAuthServicePrincipal {
		if v == nil {
			return nil
		}
		return v.ServicePrincipal
	}).(ACRAccessTokenSpecAuthServicePrincipalPtrOutput)
}

// WorkloadIdentity uses Azure Workload Identity to authenticate with Azure.
func (o ACRAccessTokenSpecAuthPtrOutput) WorkloadIdentity() ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuth) *ACRAccessTokenSpecAuthWorkloadIdentity {
		if v == nil {
			return nil
		}
		return v.WorkloadIdentity
	}).(ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput)
}

// ManagedIdentity uses Azure Managed Identity to authenticate with Azure.
type ACRAccessTokenSpecAuthManagedIdentity struct {
	// If multiple Managed Identity is assigned to the pod, you can select the one to be used
	IdentityId *string `pulumi:"identityId"`
}

// ACRAccessTokenSpecAuthManagedIdentityInput is an input type that accepts ACRAccessTokenSpecAuthManagedIdentityArgs and ACRAccessTokenSpecAuthManagedIdentityOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthManagedIdentityInput` via:
//
//	ACRAccessTokenSpecAuthManagedIdentityArgs{...}
type ACRAccessTokenSpecAuthManagedIdentityInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthManagedIdentityOutput() ACRAccessTokenSpecAuthManagedIdentityOutput
	ToACRAccessTokenSpecAuthManagedIdentityOutputWithContext(context.Context) ACRAccessTokenSpecAuthManagedIdentityOutput
}

// ManagedIdentity uses Azure Managed Identity to authenticate with Azure.
type ACRAccessTokenSpecAuthManagedIdentityArgs struct {
	// If multiple Managed Identity is assigned to the pod, you can select the one to be used
	IdentityId pulumi.StringPtrInput `pulumi:"identityId"`
}

func (ACRAccessTokenSpecAuthManagedIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthManagedIdentity)(nil)).Elem()
}

func (i ACRAccessTokenSpecAuthManagedIdentityArgs) ToACRAccessTokenSpecAuthManagedIdentityOutput() ACRAccessTokenSpecAuthManagedIdentityOutput {
	return i.ToACRAccessTokenSpecAuthManagedIdentityOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthManagedIdentityArgs) ToACRAccessTokenSpecAuthManagedIdentityOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthManagedIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthManagedIdentityOutput)
}

func (i ACRAccessTokenSpecAuthManagedIdentityArgs) ToACRAccessTokenSpecAuthManagedIdentityPtrOutput() ACRAccessTokenSpecAuthManagedIdentityPtrOutput {
	return i.ToACRAccessTokenSpecAuthManagedIdentityPtrOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthManagedIdentityArgs) ToACRAccessTokenSpecAuthManagedIdentityPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthManagedIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthManagedIdentityOutput).ToACRAccessTokenSpecAuthManagedIdentityPtrOutputWithContext(ctx)
}

// ACRAccessTokenSpecAuthManagedIdentityPtrInput is an input type that accepts ACRAccessTokenSpecAuthManagedIdentityArgs, ACRAccessTokenSpecAuthManagedIdentityPtr and ACRAccessTokenSpecAuthManagedIdentityPtrOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthManagedIdentityPtrInput` via:
//
//	        ACRAccessTokenSpecAuthManagedIdentityArgs{...}
//
//	or:
//
//	        nil
type ACRAccessTokenSpecAuthManagedIdentityPtrInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthManagedIdentityPtrOutput() ACRAccessTokenSpecAuthManagedIdentityPtrOutput
	ToACRAccessTokenSpecAuthManagedIdentityPtrOutputWithContext(context.Context) ACRAccessTokenSpecAuthManagedIdentityPtrOutput
}

type acraccessTokenSpecAuthManagedIdentityPtrType ACRAccessTokenSpecAuthManagedIdentityArgs

func ACRAccessTokenSpecAuthManagedIdentityPtr(v *ACRAccessTokenSpecAuthManagedIdentityArgs) ACRAccessTokenSpecAuthManagedIdentityPtrInput {
	return (*acraccessTokenSpecAuthManagedIdentityPtrType)(v)
}

func (*acraccessTokenSpecAuthManagedIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthManagedIdentity)(nil)).Elem()
}

func (i *acraccessTokenSpecAuthManagedIdentityPtrType) ToACRAccessTokenSpecAuthManagedIdentityPtrOutput() ACRAccessTokenSpecAuthManagedIdentityPtrOutput {
	return i.ToACRAccessTokenSpecAuthManagedIdentityPtrOutputWithContext(context.Background())
}

func (i *acraccessTokenSpecAuthManagedIdentityPtrType) ToACRAccessTokenSpecAuthManagedIdentityPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthManagedIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthManagedIdentityPtrOutput)
}

// ManagedIdentity uses Azure Managed Identity to authenticate with Azure.
type ACRAccessTokenSpecAuthManagedIdentityOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthManagedIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthManagedIdentity)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthManagedIdentityOutput) ToACRAccessTokenSpecAuthManagedIdentityOutput() ACRAccessTokenSpecAuthManagedIdentityOutput {
	return o
}

func (o ACRAccessTokenSpecAuthManagedIdentityOutput) ToACRAccessTokenSpecAuthManagedIdentityOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthManagedIdentityOutput {
	return o
}

func (o ACRAccessTokenSpecAuthManagedIdentityOutput) ToACRAccessTokenSpecAuthManagedIdentityPtrOutput() ACRAccessTokenSpecAuthManagedIdentityPtrOutput {
	return o.ToACRAccessTokenSpecAuthManagedIdentityPtrOutputWithContext(context.Background())
}

func (o ACRAccessTokenSpecAuthManagedIdentityOutput) ToACRAccessTokenSpecAuthManagedIdentityPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthManagedIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ACRAccessTokenSpecAuthManagedIdentity) *ACRAccessTokenSpecAuthManagedIdentity {
		return &v
	}).(ACRAccessTokenSpecAuthManagedIdentityPtrOutput)
}

// If multiple Managed Identity is assigned to the pod, you can select the one to be used
func (o ACRAccessTokenSpecAuthManagedIdentityOutput) IdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthManagedIdentity) *string { return v.IdentityId }).(pulumi.StringPtrOutput)
}

type ACRAccessTokenSpecAuthManagedIdentityPtrOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthManagedIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthManagedIdentity)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthManagedIdentityPtrOutput) ToACRAccessTokenSpecAuthManagedIdentityPtrOutput() ACRAccessTokenSpecAuthManagedIdentityPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthManagedIdentityPtrOutput) ToACRAccessTokenSpecAuthManagedIdentityPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthManagedIdentityPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthManagedIdentityPtrOutput) Elem() ACRAccessTokenSpecAuthManagedIdentityOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthManagedIdentity) ACRAccessTokenSpecAuthManagedIdentity {
		if v != nil {
			return *v
		}
		var ret ACRAccessTokenSpecAuthManagedIdentity
		return ret
	}).(ACRAccessTokenSpecAuthManagedIdentityOutput)
}

// If multiple Managed Identity is assigned to the pod, you can select the one to be used
func (o ACRAccessTokenSpecAuthManagedIdentityPtrOutput) IdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return v.IdentityId
	}).(pulumi.StringPtrOutput)
}

// ServicePrincipal uses Azure Service Principal credentials to authenticate with Azure.
type ACRAccessTokenSpecAuthServicePrincipal struct {
	// Configuration used to authenticate with Azure using static
	// credentials stored in a Kind=Secret.
	SecretRef ACRAccessTokenSpecAuthServicePrincipalSecretRef `pulumi:"secretRef"`
}

// ACRAccessTokenSpecAuthServicePrincipalInput is an input type that accepts ACRAccessTokenSpecAuthServicePrincipalArgs and ACRAccessTokenSpecAuthServicePrincipalOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthServicePrincipalInput` via:
//
//	ACRAccessTokenSpecAuthServicePrincipalArgs{...}
type ACRAccessTokenSpecAuthServicePrincipalInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthServicePrincipalOutput() ACRAccessTokenSpecAuthServicePrincipalOutput
	ToACRAccessTokenSpecAuthServicePrincipalOutputWithContext(context.Context) ACRAccessTokenSpecAuthServicePrincipalOutput
}

// ServicePrincipal uses Azure Service Principal credentials to authenticate with Azure.
type ACRAccessTokenSpecAuthServicePrincipalArgs struct {
	// Configuration used to authenticate with Azure using static
	// credentials stored in a Kind=Secret.
	SecretRef ACRAccessTokenSpecAuthServicePrincipalSecretRefInput `pulumi:"secretRef"`
}

func (ACRAccessTokenSpecAuthServicePrincipalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipal)(nil)).Elem()
}

func (i ACRAccessTokenSpecAuthServicePrincipalArgs) ToACRAccessTokenSpecAuthServicePrincipalOutput() ACRAccessTokenSpecAuthServicePrincipalOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthServicePrincipalArgs) ToACRAccessTokenSpecAuthServicePrincipalOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalOutput)
}

func (i ACRAccessTokenSpecAuthServicePrincipalArgs) ToACRAccessTokenSpecAuthServicePrincipalPtrOutput() ACRAccessTokenSpecAuthServicePrincipalPtrOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalPtrOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthServicePrincipalArgs) ToACRAccessTokenSpecAuthServicePrincipalPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalOutput).ToACRAccessTokenSpecAuthServicePrincipalPtrOutputWithContext(ctx)
}

// ACRAccessTokenSpecAuthServicePrincipalPtrInput is an input type that accepts ACRAccessTokenSpecAuthServicePrincipalArgs, ACRAccessTokenSpecAuthServicePrincipalPtr and ACRAccessTokenSpecAuthServicePrincipalPtrOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthServicePrincipalPtrInput` via:
//
//	        ACRAccessTokenSpecAuthServicePrincipalArgs{...}
//
//	or:
//
//	        nil
type ACRAccessTokenSpecAuthServicePrincipalPtrInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthServicePrincipalPtrOutput() ACRAccessTokenSpecAuthServicePrincipalPtrOutput
	ToACRAccessTokenSpecAuthServicePrincipalPtrOutputWithContext(context.Context) ACRAccessTokenSpecAuthServicePrincipalPtrOutput
}

type acraccessTokenSpecAuthServicePrincipalPtrType ACRAccessTokenSpecAuthServicePrincipalArgs

func ACRAccessTokenSpecAuthServicePrincipalPtr(v *ACRAccessTokenSpecAuthServicePrincipalArgs) ACRAccessTokenSpecAuthServicePrincipalPtrInput {
	return (*acraccessTokenSpecAuthServicePrincipalPtrType)(v)
}

func (*acraccessTokenSpecAuthServicePrincipalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthServicePrincipal)(nil)).Elem()
}

func (i *acraccessTokenSpecAuthServicePrincipalPtrType) ToACRAccessTokenSpecAuthServicePrincipalPtrOutput() ACRAccessTokenSpecAuthServicePrincipalPtrOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalPtrOutputWithContext(context.Background())
}

func (i *acraccessTokenSpecAuthServicePrincipalPtrType) ToACRAccessTokenSpecAuthServicePrincipalPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalPtrOutput)
}

// ServicePrincipal uses Azure Service Principal credentials to authenticate with Azure.
type ACRAccessTokenSpecAuthServicePrincipalOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthServicePrincipalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipal)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthServicePrincipalOutput) ToACRAccessTokenSpecAuthServicePrincipalOutput() ACRAccessTokenSpecAuthServicePrincipalOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalOutput) ToACRAccessTokenSpecAuthServicePrincipalOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalOutput) ToACRAccessTokenSpecAuthServicePrincipalPtrOutput() ACRAccessTokenSpecAuthServicePrincipalPtrOutput {
	return o.ToACRAccessTokenSpecAuthServicePrincipalPtrOutputWithContext(context.Background())
}

func (o ACRAccessTokenSpecAuthServicePrincipalOutput) ToACRAccessTokenSpecAuthServicePrincipalPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ACRAccessTokenSpecAuthServicePrincipal) *ACRAccessTokenSpecAuthServicePrincipal {
		return &v
	}).(ACRAccessTokenSpecAuthServicePrincipalPtrOutput)
}

// Configuration used to authenticate with Azure using static
// credentials stored in a Kind=Secret.
func (o ACRAccessTokenSpecAuthServicePrincipalOutput) SecretRef() ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthServicePrincipal) ACRAccessTokenSpecAuthServicePrincipalSecretRef {
		return v.SecretRef
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput)
}

type ACRAccessTokenSpecAuthServicePrincipalPtrOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthServicePrincipalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthServicePrincipal)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthServicePrincipalPtrOutput) ToACRAccessTokenSpecAuthServicePrincipalPtrOutput() ACRAccessTokenSpecAuthServicePrincipalPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalPtrOutput) ToACRAccessTokenSpecAuthServicePrincipalPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalPtrOutput) Elem() ACRAccessTokenSpecAuthServicePrincipalOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipal) ACRAccessTokenSpecAuthServicePrincipal {
		if v != nil {
			return *v
		}
		var ret ACRAccessTokenSpecAuthServicePrincipal
		return ret
	}).(ACRAccessTokenSpecAuthServicePrincipalOutput)
}

// Configuration used to authenticate with Azure using static
// credentials stored in a Kind=Secret.
func (o ACRAccessTokenSpecAuthServicePrincipalPtrOutput) SecretRef() ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipal) *ACRAccessTokenSpecAuthServicePrincipalSecretRef {
		if v == nil {
			return nil
		}
		return &v.SecretRef
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput)
}

// Configuration used to authenticate with Azure using static
// credentials stored in a Kind=Secret.
type ACRAccessTokenSpecAuthServicePrincipalSecretRef struct {
	// The Azure clientId of the service principle used for authentication.
	ClientId *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId `pulumi:"clientId"`
	// The Azure ClientSecret of the service principle used for authentication.
	ClientSecret *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret `pulumi:"clientSecret"`
}

// ACRAccessTokenSpecAuthServicePrincipalSecretRefInput is an input type that accepts ACRAccessTokenSpecAuthServicePrincipalSecretRefArgs and ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthServicePrincipalSecretRefInput` via:
//
//	ACRAccessTokenSpecAuthServicePrincipalSecretRefArgs{...}
type ACRAccessTokenSpecAuthServicePrincipalSecretRefInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthServicePrincipalSecretRefOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput
	ToACRAccessTokenSpecAuthServicePrincipalSecretRefOutputWithContext(context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput
}

// Configuration used to authenticate with Azure using static
// credentials stored in a Kind=Secret.
type ACRAccessTokenSpecAuthServicePrincipalSecretRefArgs struct {
	// The Azure clientId of the service principle used for authentication.
	ClientId ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrInput `pulumi:"clientId"`
	// The Azure ClientSecret of the service principle used for authentication.
	ClientSecret ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrInput `pulumi:"clientSecret"`
}

func (ACRAccessTokenSpecAuthServicePrincipalSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRef)(nil)).Elem()
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalSecretRefOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput)
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput).ToACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutputWithContext(ctx)
}

// ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrInput is an input type that accepts ACRAccessTokenSpecAuthServicePrincipalSecretRefArgs, ACRAccessTokenSpecAuthServicePrincipalSecretRefPtr and ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrInput` via:
//
//	        ACRAccessTokenSpecAuthServicePrincipalSecretRefArgs{...}
//
//	or:
//
//	        nil
type ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput
	ToACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutputWithContext(context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput
}

type acraccessTokenSpecAuthServicePrincipalSecretRefPtrType ACRAccessTokenSpecAuthServicePrincipalSecretRefArgs

func ACRAccessTokenSpecAuthServicePrincipalSecretRefPtr(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefArgs) ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrInput {
	return (*acraccessTokenSpecAuthServicePrincipalSecretRefPtrType)(v)
}

func (*acraccessTokenSpecAuthServicePrincipalSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthServicePrincipalSecretRef)(nil)).Elem()
}

func (i *acraccessTokenSpecAuthServicePrincipalSecretRefPtrType) ToACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutputWithContext(context.Background())
}

func (i *acraccessTokenSpecAuthServicePrincipalSecretRefPtrType) ToACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput)
}

// Configuration used to authenticate with Azure using static
// credentials stored in a Kind=Secret.
type ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRef)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput {
	return o.ToACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutputWithContext(context.Background())
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ACRAccessTokenSpecAuthServicePrincipalSecretRef) *ACRAccessTokenSpecAuthServicePrincipalSecretRef {
		return &v
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput)
}

// The Azure clientId of the service principle used for authentication.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput) ClientId() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthServicePrincipalSecretRef) *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId {
		return v.ClientId
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput)
}

// The Azure ClientSecret of the service principle used for authentication.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput) ClientSecret() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthServicePrincipalSecretRef) *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret {
		return v.ClientSecret
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput)
}

type ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthServicePrincipalSecretRef)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput) Elem() ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRef) ACRAccessTokenSpecAuthServicePrincipalSecretRef {
		if v != nil {
			return *v
		}
		var ret ACRAccessTokenSpecAuthServicePrincipalSecretRef
		return ret
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput)
}

// The Azure clientId of the service principle used for authentication.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput) ClientId() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRef) *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput)
}

// The Azure ClientSecret of the service principle used for authentication.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput) ClientSecret() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRef) *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput)
}

// The Azure clientId of the service principle used for authentication.
type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdInput is an input type that accepts ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdArgs and ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdInput` via:
//
//	ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdArgs{...}
type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput
	ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutputWithContext(context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput
}

// The Azure clientId of the service principle used for authentication.
type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId)(nil)).Elem()
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput)
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput).ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutputWithContext(ctx)
}

// ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrInput is an input type that accepts ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdArgs, ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtr and ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrInput` via:
//
//	        ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdArgs{...}
//
//	or:
//
//	        nil
type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput
	ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutputWithContext(context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput
}

type acraccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrType ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdArgs

func ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtr(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdArgs) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrInput {
	return (*acraccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrType)(v)
}

func (*acraccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId)(nil)).Elem()
}

func (i *acraccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrType) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutputWithContext(context.Background())
}

func (i *acraccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrType) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput)
}

// The Azure clientId of the service principle used for authentication.
type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput {
	return o.ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutputWithContext(context.Background())
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId) *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId {
		return &v
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput) Elem() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId {
		if v != nil {
			return *v
		}
		var ret ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId
		return ret
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientId) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The Azure ClientSecret of the service principle used for authentication.
type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretInput is an input type that accepts ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretArgs and ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretInput` via:
//
//	ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretArgs{...}
type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput
	ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutputWithContext(context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput
}

// The Azure ClientSecret of the service principle used for authentication.
type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret)(nil)).Elem()
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput)
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretArgs) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput).ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutputWithContext(ctx)
}

// ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrInput is an input type that accepts ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretArgs, ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtr and ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrInput` via:
//
//	        ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretArgs{...}
//
//	or:
//
//	        nil
type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput
	ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutputWithContext(context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput
}

type acraccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrType ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretArgs

func ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtr(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretArgs) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrInput {
	return (*acraccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrType)(v)
}

func (*acraccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret)(nil)).Elem()
}

func (i *acraccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrType) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput {
	return i.ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutputWithContext(context.Background())
}

func (i *acraccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrType) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput)
}

// The Azure ClientSecret of the service principle used for authentication.
type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput {
	return o.ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutputWithContext(context.Background())
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret) *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret {
		return &v
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput) ToACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput) Elem() ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret) ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret {
		if v != nil {
			return *v
		}
		var ret ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret
		return ret
	}).(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecret) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// WorkloadIdentity uses Azure Workload Identity to authenticate with Azure.
type ACRAccessTokenSpecAuthWorkloadIdentity struct {
	// ServiceAccountRef specified the service account
	// that should be used when authenticating with WorkloadIdentity.
	ServiceAccountRef *ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef `pulumi:"serviceAccountRef"`
}

// ACRAccessTokenSpecAuthWorkloadIdentityInput is an input type that accepts ACRAccessTokenSpecAuthWorkloadIdentityArgs and ACRAccessTokenSpecAuthWorkloadIdentityOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthWorkloadIdentityInput` via:
//
//	ACRAccessTokenSpecAuthWorkloadIdentityArgs{...}
type ACRAccessTokenSpecAuthWorkloadIdentityInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthWorkloadIdentityOutput() ACRAccessTokenSpecAuthWorkloadIdentityOutput
	ToACRAccessTokenSpecAuthWorkloadIdentityOutputWithContext(context.Context) ACRAccessTokenSpecAuthWorkloadIdentityOutput
}

// WorkloadIdentity uses Azure Workload Identity to authenticate with Azure.
type ACRAccessTokenSpecAuthWorkloadIdentityArgs struct {
	// ServiceAccountRef specified the service account
	// that should be used when authenticating with WorkloadIdentity.
	ServiceAccountRef ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrInput `pulumi:"serviceAccountRef"`
}

func (ACRAccessTokenSpecAuthWorkloadIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthWorkloadIdentity)(nil)).Elem()
}

func (i ACRAccessTokenSpecAuthWorkloadIdentityArgs) ToACRAccessTokenSpecAuthWorkloadIdentityOutput() ACRAccessTokenSpecAuthWorkloadIdentityOutput {
	return i.ToACRAccessTokenSpecAuthWorkloadIdentityOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthWorkloadIdentityArgs) ToACRAccessTokenSpecAuthWorkloadIdentityOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthWorkloadIdentityOutput)
}

func (i ACRAccessTokenSpecAuthWorkloadIdentityArgs) ToACRAccessTokenSpecAuthWorkloadIdentityPtrOutput() ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return i.ToACRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthWorkloadIdentityArgs) ToACRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthWorkloadIdentityOutput).ToACRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(ctx)
}

// ACRAccessTokenSpecAuthWorkloadIdentityPtrInput is an input type that accepts ACRAccessTokenSpecAuthWorkloadIdentityArgs, ACRAccessTokenSpecAuthWorkloadIdentityPtr and ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthWorkloadIdentityPtrInput` via:
//
//	        ACRAccessTokenSpecAuthWorkloadIdentityArgs{...}
//
//	or:
//
//	        nil
type ACRAccessTokenSpecAuthWorkloadIdentityPtrInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthWorkloadIdentityPtrOutput() ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput
	ToACRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(context.Context) ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput
}

type acraccessTokenSpecAuthWorkloadIdentityPtrType ACRAccessTokenSpecAuthWorkloadIdentityArgs

func ACRAccessTokenSpecAuthWorkloadIdentityPtr(v *ACRAccessTokenSpecAuthWorkloadIdentityArgs) ACRAccessTokenSpecAuthWorkloadIdentityPtrInput {
	return (*acraccessTokenSpecAuthWorkloadIdentityPtrType)(v)
}

func (*acraccessTokenSpecAuthWorkloadIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthWorkloadIdentity)(nil)).Elem()
}

func (i *acraccessTokenSpecAuthWorkloadIdentityPtrType) ToACRAccessTokenSpecAuthWorkloadIdentityPtrOutput() ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return i.ToACRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(context.Background())
}

func (i *acraccessTokenSpecAuthWorkloadIdentityPtrType) ToACRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput)
}

// WorkloadIdentity uses Azure Workload Identity to authenticate with Azure.
type ACRAccessTokenSpecAuthWorkloadIdentityOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthWorkloadIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthWorkloadIdentity)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityOutput) ToACRAccessTokenSpecAuthWorkloadIdentityOutput() ACRAccessTokenSpecAuthWorkloadIdentityOutput {
	return o
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityOutput) ToACRAccessTokenSpecAuthWorkloadIdentityOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityOutput {
	return o
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityOutput) ToACRAccessTokenSpecAuthWorkloadIdentityPtrOutput() ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return o.ToACRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(context.Background())
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityOutput) ToACRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ACRAccessTokenSpecAuthWorkloadIdentity) *ACRAccessTokenSpecAuthWorkloadIdentity {
		return &v
	}).(ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput)
}

// ServiceAccountRef specified the service account
// that should be used when authenticating with WorkloadIdentity.
func (o ACRAccessTokenSpecAuthWorkloadIdentityOutput) ServiceAccountRef() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthWorkloadIdentity) *ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef {
		return v.ServiceAccountRef
	}).(ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput)
}

type ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthWorkloadIdentity)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput) ToACRAccessTokenSpecAuthWorkloadIdentityPtrOutput() ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput) ToACRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput) Elem() ACRAccessTokenSpecAuthWorkloadIdentityOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthWorkloadIdentity) ACRAccessTokenSpecAuthWorkloadIdentity {
		if v != nil {
			return *v
		}
		var ret ACRAccessTokenSpecAuthWorkloadIdentity
		return ret
	}).(ACRAccessTokenSpecAuthWorkloadIdentityOutput)
}

// ServiceAccountRef specified the service account
// that should be used when authenticating with WorkloadIdentity.
func (o ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput) ServiceAccountRef() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthWorkloadIdentity) *ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef {
		if v == nil {
			return nil
		}
		return v.ServiceAccountRef
	}).(ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput)
}

// ServiceAccountRef specified the service account
// that should be used when authenticating with WorkloadIdentity.
type ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences []string `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefInput is an input type that accepts ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs and ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefInput` via:
//
//	ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs{...}
type ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput
	ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutputWithContext(context.Context) ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput
}

// ServiceAccountRef specified the service account
// that should be used when authenticating with WorkloadIdentity.
type ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef)(nil)).Elem()
}

func (i ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput {
	return i.ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput)
}

func (i ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return i.ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(context.Background())
}

func (i ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput).ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(ctx)
}

// ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrInput is an input type that accepts ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs, ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtr and ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput values.
// You can construct a concrete instance of `ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrInput` via:
//
//	        ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs{...}
//
//	or:
//
//	        nil
type ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrInput interface {
	pulumi.Input

	ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput
	ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(context.Context) ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput
}

type acraccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrType ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs

func ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtr(v *ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs) ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrInput {
	return (*acraccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrType)(v)
}

func (*acraccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef)(nil)).Elem()
}

func (i *acraccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrType) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return i.ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(context.Background())
}

func (i *acraccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrType) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput)
}

// ServiceAccountRef specified the service account
// that should be used when authenticating with WorkloadIdentity.
type ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput {
	return o
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput {
	return o
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return o.ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(context.Background())
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) *ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef {
		return &v
	}).(ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) []string { return v.Audiences }).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef)(nil)).Elem()
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput) ToACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(ctx context.Context) ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return o
}

func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput) Elem() ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef {
		if v != nil {
			return *v
		}
		var ret ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef
		return ret
	}).(ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// ECRAuthorizationTokenSpec uses the GetAuthorizationToken API to retrieve an
// authorization token.
// The authorization token is valid for 12 hours.
// The authorizationToken returned is a base64 encoded string that can be decoded
// and used in a docker login command to authenticate to a registry.
// For more information, see Registry authentication (https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html#registry_auth) in the Amazon Elastic Container Registry User Guide.
type ECRAuthorizationTokenType struct {
	ApiVersion *string                    `pulumi:"apiVersion"`
	Kind       *string                    `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta         `pulumi:"metadata"`
	Spec       *ECRAuthorizationTokenSpec `pulumi:"spec"`
}

type ECRAuthorizationTokenMetadata struct {
}

type ECRAuthorizationTokenSpec struct {
	// Auth defines how to authenticate with AWS
	Auth *ECRAuthorizationTokenSpecAuth `pulumi:"auth"`
	// Region specifies the region to operate in.
	Region string `pulumi:"region"`
	// You can assume a role before making calls to the
	// desired AWS service.
	Role *string `pulumi:"role"`
}

// ECRAuthorizationTokenSpecInput is an input type that accepts ECRAuthorizationTokenSpecArgs and ECRAuthorizationTokenSpecOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecInput` via:
//
//	ECRAuthorizationTokenSpecArgs{...}
type ECRAuthorizationTokenSpecInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecOutput() ECRAuthorizationTokenSpecOutput
	ToECRAuthorizationTokenSpecOutputWithContext(context.Context) ECRAuthorizationTokenSpecOutput
}

type ECRAuthorizationTokenSpecArgs struct {
	// Auth defines how to authenticate with AWS
	Auth ECRAuthorizationTokenSpecAuthPtrInput `pulumi:"auth"`
	// Region specifies the region to operate in.
	Region pulumi.StringInput `pulumi:"region"`
	// You can assume a role before making calls to the
	// desired AWS service.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (ECRAuthorizationTokenSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpec)(nil)).Elem()
}

func (i ECRAuthorizationTokenSpecArgs) ToECRAuthorizationTokenSpecOutput() ECRAuthorizationTokenSpecOutput {
	return i.ToECRAuthorizationTokenSpecOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecArgs) ToECRAuthorizationTokenSpecOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecOutput)
}

func (i ECRAuthorizationTokenSpecArgs) ToECRAuthorizationTokenSpecPtrOutput() ECRAuthorizationTokenSpecPtrOutput {
	return i.ToECRAuthorizationTokenSpecPtrOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecArgs) ToECRAuthorizationTokenSpecPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecOutput).ToECRAuthorizationTokenSpecPtrOutputWithContext(ctx)
}

// ECRAuthorizationTokenSpecPtrInput is an input type that accepts ECRAuthorizationTokenSpecArgs, ECRAuthorizationTokenSpecPtr and ECRAuthorizationTokenSpecPtrOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecPtrInput` via:
//
//	        ECRAuthorizationTokenSpecArgs{...}
//
//	or:
//
//	        nil
type ECRAuthorizationTokenSpecPtrInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecPtrOutput() ECRAuthorizationTokenSpecPtrOutput
	ToECRAuthorizationTokenSpecPtrOutputWithContext(context.Context) ECRAuthorizationTokenSpecPtrOutput
}

type ecrauthorizationTokenSpecPtrType ECRAuthorizationTokenSpecArgs

func ECRAuthorizationTokenSpecPtr(v *ECRAuthorizationTokenSpecArgs) ECRAuthorizationTokenSpecPtrInput {
	return (*ecrauthorizationTokenSpecPtrType)(v)
}

func (*ecrauthorizationTokenSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpec)(nil)).Elem()
}

func (i *ecrauthorizationTokenSpecPtrType) ToECRAuthorizationTokenSpecPtrOutput() ECRAuthorizationTokenSpecPtrOutput {
	return i.ToECRAuthorizationTokenSpecPtrOutputWithContext(context.Background())
}

func (i *ecrauthorizationTokenSpecPtrType) ToECRAuthorizationTokenSpecPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecPtrOutput)
}

type ECRAuthorizationTokenSpecOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpec)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecOutput) ToECRAuthorizationTokenSpecOutput() ECRAuthorizationTokenSpecOutput {
	return o
}

func (o ECRAuthorizationTokenSpecOutput) ToECRAuthorizationTokenSpecOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecOutput {
	return o
}

func (o ECRAuthorizationTokenSpecOutput) ToECRAuthorizationTokenSpecPtrOutput() ECRAuthorizationTokenSpecPtrOutput {
	return o.ToECRAuthorizationTokenSpecPtrOutputWithContext(context.Background())
}

func (o ECRAuthorizationTokenSpecOutput) ToECRAuthorizationTokenSpecPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ECRAuthorizationTokenSpec) *ECRAuthorizationTokenSpec {
		return &v
	}).(ECRAuthorizationTokenSpecPtrOutput)
}

// Auth defines how to authenticate with AWS
func (o ECRAuthorizationTokenSpecOutput) Auth() ECRAuthorizationTokenSpecAuthPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpec) *ECRAuthorizationTokenSpecAuth { return v.Auth }).(ECRAuthorizationTokenSpecAuthPtrOutput)
}

// Region specifies the region to operate in.
func (o ECRAuthorizationTokenSpecOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpec) string { return v.Region }).(pulumi.StringOutput)
}

// You can assume a role before making calls to the
// desired AWS service.
func (o ECRAuthorizationTokenSpecOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpec) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type ECRAuthorizationTokenSpecPtrOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpec)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecPtrOutput) ToECRAuthorizationTokenSpecPtrOutput() ECRAuthorizationTokenSpecPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecPtrOutput) ToECRAuthorizationTokenSpecPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecPtrOutput) Elem() ECRAuthorizationTokenSpecOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpec) ECRAuthorizationTokenSpec {
		if v != nil {
			return *v
		}
		var ret ECRAuthorizationTokenSpec
		return ret
	}).(ECRAuthorizationTokenSpecOutput)
}

// Auth defines how to authenticate with AWS
func (o ECRAuthorizationTokenSpecPtrOutput) Auth() ECRAuthorizationTokenSpecAuthPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpec) *ECRAuthorizationTokenSpecAuth {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(ECRAuthorizationTokenSpecAuthPtrOutput)
}

// Region specifies the region to operate in.
func (o ECRAuthorizationTokenSpecPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

// You can assume a role before making calls to the
// desired AWS service.
func (o ECRAuthorizationTokenSpecPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpec) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

// Auth defines how to authenticate with AWS
type ECRAuthorizationTokenSpecAuth struct {
	// Authenticate against AWS using service account tokens.
	Jwt *ECRAuthorizationTokenSpecAuthJwt `pulumi:"jwt"`
	// AWSAuthSecretRef holds secret references for AWS credentials
	// both AccessKeyID and SecretAccessKey must be defined in order to properly authenticate.
	SecretRef *ECRAuthorizationTokenSpecAuthSecretRef `pulumi:"secretRef"`
}

// ECRAuthorizationTokenSpecAuthInput is an input type that accepts ECRAuthorizationTokenSpecAuthArgs and ECRAuthorizationTokenSpecAuthOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthInput` via:
//
//	ECRAuthorizationTokenSpecAuthArgs{...}
type ECRAuthorizationTokenSpecAuthInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthOutput() ECRAuthorizationTokenSpecAuthOutput
	ToECRAuthorizationTokenSpecAuthOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthOutput
}

// Auth defines how to authenticate with AWS
type ECRAuthorizationTokenSpecAuthArgs struct {
	// Authenticate against AWS using service account tokens.
	Jwt ECRAuthorizationTokenSpecAuthJwtPtrInput `pulumi:"jwt"`
	// AWSAuthSecretRef holds secret references for AWS credentials
	// both AccessKeyID and SecretAccessKey must be defined in order to properly authenticate.
	SecretRef ECRAuthorizationTokenSpecAuthSecretRefPtrInput `pulumi:"secretRef"`
}

func (ECRAuthorizationTokenSpecAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuth)(nil)).Elem()
}

func (i ECRAuthorizationTokenSpecAuthArgs) ToECRAuthorizationTokenSpecAuthOutput() ECRAuthorizationTokenSpecAuthOutput {
	return i.ToECRAuthorizationTokenSpecAuthOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthArgs) ToECRAuthorizationTokenSpecAuthOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthOutput)
}

func (i ECRAuthorizationTokenSpecAuthArgs) ToECRAuthorizationTokenSpecAuthPtrOutput() ECRAuthorizationTokenSpecAuthPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthPtrOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthArgs) ToECRAuthorizationTokenSpecAuthPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthOutput).ToECRAuthorizationTokenSpecAuthPtrOutputWithContext(ctx)
}

// ECRAuthorizationTokenSpecAuthPtrInput is an input type that accepts ECRAuthorizationTokenSpecAuthArgs, ECRAuthorizationTokenSpecAuthPtr and ECRAuthorizationTokenSpecAuthPtrOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthPtrInput` via:
//
//	        ECRAuthorizationTokenSpecAuthArgs{...}
//
//	or:
//
//	        nil
type ECRAuthorizationTokenSpecAuthPtrInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthPtrOutput() ECRAuthorizationTokenSpecAuthPtrOutput
	ToECRAuthorizationTokenSpecAuthPtrOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthPtrOutput
}

type ecrauthorizationTokenSpecAuthPtrType ECRAuthorizationTokenSpecAuthArgs

func ECRAuthorizationTokenSpecAuthPtr(v *ECRAuthorizationTokenSpecAuthArgs) ECRAuthorizationTokenSpecAuthPtrInput {
	return (*ecrauthorizationTokenSpecAuthPtrType)(v)
}

func (*ecrauthorizationTokenSpecAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuth)(nil)).Elem()
}

func (i *ecrauthorizationTokenSpecAuthPtrType) ToECRAuthorizationTokenSpecAuthPtrOutput() ECRAuthorizationTokenSpecAuthPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthPtrOutputWithContext(context.Background())
}

func (i *ecrauthorizationTokenSpecAuthPtrType) ToECRAuthorizationTokenSpecAuthPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthPtrOutput)
}

// Auth defines how to authenticate with AWS
type ECRAuthorizationTokenSpecAuthOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuth)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthOutput) ToECRAuthorizationTokenSpecAuthOutput() ECRAuthorizationTokenSpecAuthOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthOutput) ToECRAuthorizationTokenSpecAuthOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthOutput) ToECRAuthorizationTokenSpecAuthPtrOutput() ECRAuthorizationTokenSpecAuthPtrOutput {
	return o.ToECRAuthorizationTokenSpecAuthPtrOutputWithContext(context.Background())
}

func (o ECRAuthorizationTokenSpecAuthOutput) ToECRAuthorizationTokenSpecAuthPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ECRAuthorizationTokenSpecAuth) *ECRAuthorizationTokenSpecAuth {
		return &v
	}).(ECRAuthorizationTokenSpecAuthPtrOutput)
}

// Authenticate against AWS using service account tokens.
func (o ECRAuthorizationTokenSpecAuthOutput) Jwt() ECRAuthorizationTokenSpecAuthJwtPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuth) *ECRAuthorizationTokenSpecAuthJwt { return v.Jwt }).(ECRAuthorizationTokenSpecAuthJwtPtrOutput)
}

// AWSAuthSecretRef holds secret references for AWS credentials
// both AccessKeyID and SecretAccessKey must be defined in order to properly authenticate.
func (o ECRAuthorizationTokenSpecAuthOutput) SecretRef() ECRAuthorizationTokenSpecAuthSecretRefPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuth) *ECRAuthorizationTokenSpecAuthSecretRef { return v.SecretRef }).(ECRAuthorizationTokenSpecAuthSecretRefPtrOutput)
}

type ECRAuthorizationTokenSpecAuthPtrOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuth)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthPtrOutput) ToECRAuthorizationTokenSpecAuthPtrOutput() ECRAuthorizationTokenSpecAuthPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthPtrOutput) ToECRAuthorizationTokenSpecAuthPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthPtrOutput) Elem() ECRAuthorizationTokenSpecAuthOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuth) ECRAuthorizationTokenSpecAuth {
		if v != nil {
			return *v
		}
		var ret ECRAuthorizationTokenSpecAuth
		return ret
	}).(ECRAuthorizationTokenSpecAuthOutput)
}

// Authenticate against AWS using service account tokens.
func (o ECRAuthorizationTokenSpecAuthPtrOutput) Jwt() ECRAuthorizationTokenSpecAuthJwtPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuth) *ECRAuthorizationTokenSpecAuthJwt {
		if v == nil {
			return nil
		}
		return v.Jwt
	}).(ECRAuthorizationTokenSpecAuthJwtPtrOutput)
}

// AWSAuthSecretRef holds secret references for AWS credentials
// both AccessKeyID and SecretAccessKey must be defined in order to properly authenticate.
func (o ECRAuthorizationTokenSpecAuthPtrOutput) SecretRef() ECRAuthorizationTokenSpecAuthSecretRefPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuth) *ECRAuthorizationTokenSpecAuthSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(ECRAuthorizationTokenSpecAuthSecretRefPtrOutput)
}

// Authenticate against AWS using service account tokens.
type ECRAuthorizationTokenSpecAuthJwt struct {
	// A reference to a ServiceAccount resource.
	ServiceAccountRef *ECRAuthorizationTokenSpecAuthJwtServiceAccountRef `pulumi:"serviceAccountRef"`
}

// ECRAuthorizationTokenSpecAuthJwtInput is an input type that accepts ECRAuthorizationTokenSpecAuthJwtArgs and ECRAuthorizationTokenSpecAuthJwtOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthJwtInput` via:
//
//	ECRAuthorizationTokenSpecAuthJwtArgs{...}
type ECRAuthorizationTokenSpecAuthJwtInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthJwtOutput() ECRAuthorizationTokenSpecAuthJwtOutput
	ToECRAuthorizationTokenSpecAuthJwtOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthJwtOutput
}

// Authenticate against AWS using service account tokens.
type ECRAuthorizationTokenSpecAuthJwtArgs struct {
	// A reference to a ServiceAccount resource.
	ServiceAccountRef ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrInput `pulumi:"serviceAccountRef"`
}

func (ECRAuthorizationTokenSpecAuthJwtArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthJwt)(nil)).Elem()
}

func (i ECRAuthorizationTokenSpecAuthJwtArgs) ToECRAuthorizationTokenSpecAuthJwtOutput() ECRAuthorizationTokenSpecAuthJwtOutput {
	return i.ToECRAuthorizationTokenSpecAuthJwtOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthJwtArgs) ToECRAuthorizationTokenSpecAuthJwtOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthJwtOutput)
}

func (i ECRAuthorizationTokenSpecAuthJwtArgs) ToECRAuthorizationTokenSpecAuthJwtPtrOutput() ECRAuthorizationTokenSpecAuthJwtPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthJwtPtrOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthJwtArgs) ToECRAuthorizationTokenSpecAuthJwtPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthJwtOutput).ToECRAuthorizationTokenSpecAuthJwtPtrOutputWithContext(ctx)
}

// ECRAuthorizationTokenSpecAuthJwtPtrInput is an input type that accepts ECRAuthorizationTokenSpecAuthJwtArgs, ECRAuthorizationTokenSpecAuthJwtPtr and ECRAuthorizationTokenSpecAuthJwtPtrOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthJwtPtrInput` via:
//
//	        ECRAuthorizationTokenSpecAuthJwtArgs{...}
//
//	or:
//
//	        nil
type ECRAuthorizationTokenSpecAuthJwtPtrInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthJwtPtrOutput() ECRAuthorizationTokenSpecAuthJwtPtrOutput
	ToECRAuthorizationTokenSpecAuthJwtPtrOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthJwtPtrOutput
}

type ecrauthorizationTokenSpecAuthJwtPtrType ECRAuthorizationTokenSpecAuthJwtArgs

func ECRAuthorizationTokenSpecAuthJwtPtr(v *ECRAuthorizationTokenSpecAuthJwtArgs) ECRAuthorizationTokenSpecAuthJwtPtrInput {
	return (*ecrauthorizationTokenSpecAuthJwtPtrType)(v)
}

func (*ecrauthorizationTokenSpecAuthJwtPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthJwt)(nil)).Elem()
}

func (i *ecrauthorizationTokenSpecAuthJwtPtrType) ToECRAuthorizationTokenSpecAuthJwtPtrOutput() ECRAuthorizationTokenSpecAuthJwtPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthJwtPtrOutputWithContext(context.Background())
}

func (i *ecrauthorizationTokenSpecAuthJwtPtrType) ToECRAuthorizationTokenSpecAuthJwtPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthJwtPtrOutput)
}

// Authenticate against AWS using service account tokens.
type ECRAuthorizationTokenSpecAuthJwtOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthJwtOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthJwt)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthJwtOutput) ToECRAuthorizationTokenSpecAuthJwtOutput() ECRAuthorizationTokenSpecAuthJwtOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthJwtOutput) ToECRAuthorizationTokenSpecAuthJwtOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthJwtOutput) ToECRAuthorizationTokenSpecAuthJwtPtrOutput() ECRAuthorizationTokenSpecAuthJwtPtrOutput {
	return o.ToECRAuthorizationTokenSpecAuthJwtPtrOutputWithContext(context.Background())
}

func (o ECRAuthorizationTokenSpecAuthJwtOutput) ToECRAuthorizationTokenSpecAuthJwtPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ECRAuthorizationTokenSpecAuthJwt) *ECRAuthorizationTokenSpecAuthJwt {
		return &v
	}).(ECRAuthorizationTokenSpecAuthJwtPtrOutput)
}

// A reference to a ServiceAccount resource.
func (o ECRAuthorizationTokenSpecAuthJwtOutput) ServiceAccountRef() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthJwt) *ECRAuthorizationTokenSpecAuthJwtServiceAccountRef {
		return v.ServiceAccountRef
	}).(ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput)
}

type ECRAuthorizationTokenSpecAuthJwtPtrOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthJwtPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthJwt)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthJwtPtrOutput) ToECRAuthorizationTokenSpecAuthJwtPtrOutput() ECRAuthorizationTokenSpecAuthJwtPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthJwtPtrOutput) ToECRAuthorizationTokenSpecAuthJwtPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthJwtPtrOutput) Elem() ECRAuthorizationTokenSpecAuthJwtOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthJwt) ECRAuthorizationTokenSpecAuthJwt {
		if v != nil {
			return *v
		}
		var ret ECRAuthorizationTokenSpecAuthJwt
		return ret
	}).(ECRAuthorizationTokenSpecAuthJwtOutput)
}

// A reference to a ServiceAccount resource.
func (o ECRAuthorizationTokenSpecAuthJwtPtrOutput) ServiceAccountRef() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthJwt) *ECRAuthorizationTokenSpecAuthJwtServiceAccountRef {
		if v == nil {
			return nil
		}
		return v.ServiceAccountRef
	}).(ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput)
}

// A reference to a ServiceAccount resource.
type ECRAuthorizationTokenSpecAuthJwtServiceAccountRef struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences []string `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// ECRAuthorizationTokenSpecAuthJwtServiceAccountRefInput is an input type that accepts ECRAuthorizationTokenSpecAuthJwtServiceAccountRefArgs and ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthJwtServiceAccountRefInput` via:
//
//	ECRAuthorizationTokenSpecAuthJwtServiceAccountRefArgs{...}
type ECRAuthorizationTokenSpecAuthJwtServiceAccountRefInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput
	ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput
}

// A reference to a ServiceAccount resource.
type ECRAuthorizationTokenSpecAuthJwtServiceAccountRefArgs struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ECRAuthorizationTokenSpecAuthJwtServiceAccountRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthJwtServiceAccountRef)(nil)).Elem()
}

func (i ECRAuthorizationTokenSpecAuthJwtServiceAccountRefArgs) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput {
	return i.ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthJwtServiceAccountRefArgs) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput)
}

func (i ECRAuthorizationTokenSpecAuthJwtServiceAccountRefArgs) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthJwtServiceAccountRefArgs) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput).ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutputWithContext(ctx)
}

// ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrInput is an input type that accepts ECRAuthorizationTokenSpecAuthJwtServiceAccountRefArgs, ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtr and ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrInput` via:
//
//	        ECRAuthorizationTokenSpecAuthJwtServiceAccountRefArgs{...}
//
//	or:
//
//	        nil
type ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput
	ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput
}

type ecrauthorizationTokenSpecAuthJwtServiceAccountRefPtrType ECRAuthorizationTokenSpecAuthJwtServiceAccountRefArgs

func ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtr(v *ECRAuthorizationTokenSpecAuthJwtServiceAccountRefArgs) ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrInput {
	return (*ecrauthorizationTokenSpecAuthJwtServiceAccountRefPtrType)(v)
}

func (*ecrauthorizationTokenSpecAuthJwtServiceAccountRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthJwtServiceAccountRef)(nil)).Elem()
}

func (i *ecrauthorizationTokenSpecAuthJwtServiceAccountRefPtrType) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutputWithContext(context.Background())
}

func (i *ecrauthorizationTokenSpecAuthJwtServiceAccountRefPtrType) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput)
}

// A reference to a ServiceAccount resource.
type ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthJwtServiceAccountRef)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput {
	return o.ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutputWithContext(context.Background())
}

func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ECRAuthorizationTokenSpecAuthJwtServiceAccountRef) *ECRAuthorizationTokenSpecAuthJwtServiceAccountRef {
		return &v
	}).(ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthJwtServiceAccountRef) []string { return v.Audiences }).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthJwtServiceAccountRef) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthJwtServiceAccountRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthJwtServiceAccountRef)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput) ToECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput) Elem() ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthJwtServiceAccountRef) ECRAuthorizationTokenSpecAuthJwtServiceAccountRef {
		if v != nil {
			return *v
		}
		var ret ECRAuthorizationTokenSpecAuthJwtServiceAccountRef
		return ret
	}).(ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthJwtServiceAccountRef) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthJwtServiceAccountRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthJwtServiceAccountRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// AWSAuthSecretRef holds secret references for AWS credentials
// both AccessKeyID and SecretAccessKey must be defined in order to properly authenticate.
type ECRAuthorizationTokenSpecAuthSecretRef struct {
	// The AccessKeyID is used for authentication
	AccessKeyIDSecretRef *ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRef `pulumi:"accessKeyIDSecretRef"`
	// The SecretAccessKey is used for authentication
	SecretAccessKeySecretRef *ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef `pulumi:"secretAccessKeySecretRef"`
	// The SessionToken used for authentication
	// This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
	// see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html
	SessionTokenSecretRef *ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef `pulumi:"sessionTokenSecretRef"`
}

// ECRAuthorizationTokenSpecAuthSecretRefInput is an input type that accepts ECRAuthorizationTokenSpecAuthSecretRefArgs and ECRAuthorizationTokenSpecAuthSecretRefOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthSecretRefInput` via:
//
//	ECRAuthorizationTokenSpecAuthSecretRefArgs{...}
type ECRAuthorizationTokenSpecAuthSecretRefInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthSecretRefOutput() ECRAuthorizationTokenSpecAuthSecretRefOutput
	ToECRAuthorizationTokenSpecAuthSecretRefOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthSecretRefOutput
}

// AWSAuthSecretRef holds secret references for AWS credentials
// both AccessKeyID and SecretAccessKey must be defined in order to properly authenticate.
type ECRAuthorizationTokenSpecAuthSecretRefArgs struct {
	// The AccessKeyID is used for authentication
	AccessKeyIDSecretRef ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrInput `pulumi:"accessKeyIDSecretRef"`
	// The SecretAccessKey is used for authentication
	SecretAccessKeySecretRef ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrInput `pulumi:"secretAccessKeySecretRef"`
	// The SessionToken used for authentication
	// This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
	// see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html
	SessionTokenSecretRef ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrInput `pulumi:"sessionTokenSecretRef"`
}

func (ECRAuthorizationTokenSpecAuthSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRef)(nil)).Elem()
}

func (i ECRAuthorizationTokenSpecAuthSecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefOutput() ECRAuthorizationTokenSpecAuthSecretRefOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthSecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefOutput)
}

func (i ECRAuthorizationTokenSpecAuthSecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefPtrOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthSecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefOutput).ToECRAuthorizationTokenSpecAuthSecretRefPtrOutputWithContext(ctx)
}

// ECRAuthorizationTokenSpecAuthSecretRefPtrInput is an input type that accepts ECRAuthorizationTokenSpecAuthSecretRefArgs, ECRAuthorizationTokenSpecAuthSecretRefPtr and ECRAuthorizationTokenSpecAuthSecretRefPtrOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthSecretRefPtrInput` via:
//
//	        ECRAuthorizationTokenSpecAuthSecretRefArgs{...}
//
//	or:
//
//	        nil
type ECRAuthorizationTokenSpecAuthSecretRefPtrInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthSecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefPtrOutput
	ToECRAuthorizationTokenSpecAuthSecretRefPtrOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthSecretRefPtrOutput
}

type ecrauthorizationTokenSpecAuthSecretRefPtrType ECRAuthorizationTokenSpecAuthSecretRefArgs

func ECRAuthorizationTokenSpecAuthSecretRefPtr(v *ECRAuthorizationTokenSpecAuthSecretRefArgs) ECRAuthorizationTokenSpecAuthSecretRefPtrInput {
	return (*ecrauthorizationTokenSpecAuthSecretRefPtrType)(v)
}

func (*ecrauthorizationTokenSpecAuthSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthSecretRef)(nil)).Elem()
}

func (i *ecrauthorizationTokenSpecAuthSecretRefPtrType) ToECRAuthorizationTokenSpecAuthSecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefPtrOutputWithContext(context.Background())
}

func (i *ecrauthorizationTokenSpecAuthSecretRefPtrType) ToECRAuthorizationTokenSpecAuthSecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefPtrOutput)
}

// AWSAuthSecretRef holds secret references for AWS credentials
// both AccessKeyID and SecretAccessKey must be defined in order to properly authenticate.
type ECRAuthorizationTokenSpecAuthSecretRefOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRef)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthSecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefOutput() ECRAuthorizationTokenSpecAuthSecretRefOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefPtrOutput {
	return o.ToECRAuthorizationTokenSpecAuthSecretRefPtrOutputWithContext(context.Background())
}

func (o ECRAuthorizationTokenSpecAuthSecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ECRAuthorizationTokenSpecAuthSecretRef) *ECRAuthorizationTokenSpecAuthSecretRef {
		return &v
	}).(ECRAuthorizationTokenSpecAuthSecretRefPtrOutput)
}

// The AccessKeyID is used for authentication
func (o ECRAuthorizationTokenSpecAuthSecretRefOutput) AccessKeyIDSecretRef() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRef) *ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRef {
		return v.AccessKeyIDSecretRef
	}).(ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput)
}

// The SecretAccessKey is used for authentication
func (o ECRAuthorizationTokenSpecAuthSecretRefOutput) SecretAccessKeySecretRef() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRef) *ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef {
		return v.SecretAccessKeySecretRef
	}).(ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput)
}

// The SessionToken used for authentication
// This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
// see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html
func (o ECRAuthorizationTokenSpecAuthSecretRefOutput) SessionTokenSecretRef() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRef) *ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef {
		return v.SessionTokenSecretRef
	}).(ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput)
}

type ECRAuthorizationTokenSpecAuthSecretRefPtrOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthSecretRef)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthSecretRefPtrOutput) ToECRAuthorizationTokenSpecAuthSecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefPtrOutput) ToECRAuthorizationTokenSpecAuthSecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefPtrOutput) Elem() ECRAuthorizationTokenSpecAuthSecretRefOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRef) ECRAuthorizationTokenSpecAuthSecretRef {
		if v != nil {
			return *v
		}
		var ret ECRAuthorizationTokenSpecAuthSecretRef
		return ret
	}).(ECRAuthorizationTokenSpecAuthSecretRefOutput)
}

// The AccessKeyID is used for authentication
func (o ECRAuthorizationTokenSpecAuthSecretRefPtrOutput) AccessKeyIDSecretRef() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRef) *ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRef {
		if v == nil {
			return nil
		}
		return v.AccessKeyIDSecretRef
	}).(ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput)
}

// The SecretAccessKey is used for authentication
func (o ECRAuthorizationTokenSpecAuthSecretRefPtrOutput) SecretAccessKeySecretRef() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRef) *ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef {
		if v == nil {
			return nil
		}
		return v.SecretAccessKeySecretRef
	}).(ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput)
}

// The SessionToken used for authentication
// This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
// see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html
func (o ECRAuthorizationTokenSpecAuthSecretRefPtrOutput) SessionTokenSecretRef() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRef) *ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef {
		if v == nil {
			return nil
		}
		return v.SessionTokenSecretRef
	}).(ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput)
}

// The AccessKeyID is used for authentication
type ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefInput is an input type that accepts ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefArgs and ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefInput` via:
//
//	ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefArgs{...}
type ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefOutput() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefOutput
	ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefOutput
}

// The AccessKeyID is used for authentication
type ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRef)(nil)).Elem()
}

func (i ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefOutput() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefOutput)
}

func (i ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefOutput).ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutputWithContext(ctx)
}

// ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrInput is an input type that accepts ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefArgs, ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtr and ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrInput` via:
//
//	        ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefArgs{...}
//
//	or:
//
//	        nil
type ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput
	ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput
}

type ecrauthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrType ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefArgs

func ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtr(v *ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefArgs) ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrInput {
	return (*ecrauthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrType)(v)
}

func (*ecrauthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRef)(nil)).Elem()
}

func (i *ecrauthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrType) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutputWithContext(context.Background())
}

func (i *ecrauthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrType) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput)
}

// The AccessKeyID is used for authentication
type ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRef)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefOutput() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput {
	return o.ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutputWithContext(context.Background())
}

func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRef) *ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRef {
		return &v
	}).(ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRef)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput) ToECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput) Elem() ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRef) ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRef {
		if v != nil {
			return *v
		}
		var ret ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRef
		return ret
	}).(ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The SecretAccessKey is used for authentication
type ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefInput is an input type that accepts ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs and ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefInput` via:
//
//	ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs{...}
type ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput
	ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput
}

// The SecretAccessKey is used for authentication
type ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef)(nil)).Elem()
}

func (i ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput)
}

func (i ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput).ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(ctx)
}

// ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrInput is an input type that accepts ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs, ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtr and ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrInput` via:
//
//	        ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs{...}
//
//	or:
//
//	        nil
type ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput
	ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput
}

type ecrauthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrType ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs

func ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtr(v *ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs) ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrInput {
	return (*ecrauthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrType)(v)
}

func (*ecrauthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef)(nil)).Elem()
}

func (i *ecrauthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrType) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(context.Background())
}

func (i *ecrauthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrType) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput)
}

// The SecretAccessKey is used for authentication
type ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return o.ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(context.Background())
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef) *ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef {
		return &v
	}).(ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput) ToECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput) Elem() ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef) ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef {
		if v != nil {
			return *v
		}
		var ret ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef
		return ret
	}).(ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The SessionToken used for authentication
// This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
// see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html
type ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefInput is an input type that accepts ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefArgs and ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefInput` via:
//
//	ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefArgs{...}
type ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput
	ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput
}

// The SessionToken used for authentication
// This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
// see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html
type ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef)(nil)).Elem()
}

func (i ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput)
}

func (i ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutputWithContext(context.Background())
}

func (i ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefArgs) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput).ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutputWithContext(ctx)
}

// ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrInput is an input type that accepts ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefArgs, ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtr and ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput values.
// You can construct a concrete instance of `ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrInput` via:
//
//	        ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefArgs{...}
//
//	or:
//
//	        nil
type ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrInput interface {
	pulumi.Input

	ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput
	ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutputWithContext(context.Context) ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput
}

type ecrauthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrType ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefArgs

func ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtr(v *ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefArgs) ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrInput {
	return (*ecrauthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrType)(v)
}

func (*ecrauthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef)(nil)).Elem()
}

func (i *ecrauthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrType) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput {
	return i.ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutputWithContext(context.Background())
}

func (i *ecrauthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrType) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput)
}

// The SessionToken used for authentication
// This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
// see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html
type ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput {
	return o.ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutputWithContext(context.Background())
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef) *ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef {
		return &v
	}).(ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput struct{ *pulumi.OutputState }

func (ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef)(nil)).Elem()
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput) ToECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutputWithContext(ctx context.Context) ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput {
	return o
}

func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput) Elem() ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef) ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef {
		if v != nil {
			return *v
		}
		var ret ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef
		return ret
	}).(ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Fake generator is used for testing. It lets you define
// a static set of credentials that is always returned.
type FakeType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// FakeSpec contains the static data.
	Spec *FakeSpec `pulumi:"spec"`
}

type FakeMetadata struct {
}

// FakeSpec contains the static data.
type FakeSpec struct {
	// Used to select the correct ESO controller (think: ingress.ingressClassName)
	// The ESO controller is instantiated with a specific controller name and filters VDS based on this property
	Controller *string `pulumi:"controller"`
	// Data defines the static data returned
	// by this generator.
	Data map[string]string `pulumi:"data"`
}

// FakeSpecInput is an input type that accepts FakeSpecArgs and FakeSpecOutput values.
// You can construct a concrete instance of `FakeSpecInput` via:
//
//	FakeSpecArgs{...}
type FakeSpecInput interface {
	pulumi.Input

	ToFakeSpecOutput() FakeSpecOutput
	ToFakeSpecOutputWithContext(context.Context) FakeSpecOutput
}

// FakeSpec contains the static data.
type FakeSpecArgs struct {
	// Used to select the correct ESO controller (think: ingress.ingressClassName)
	// The ESO controller is instantiated with a specific controller name and filters VDS based on this property
	Controller pulumi.StringPtrInput `pulumi:"controller"`
	// Data defines the static data returned
	// by this generator.
	Data pulumi.StringMapInput `pulumi:"data"`
}

func (FakeSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FakeSpec)(nil)).Elem()
}

func (i FakeSpecArgs) ToFakeSpecOutput() FakeSpecOutput {
	return i.ToFakeSpecOutputWithContext(context.Background())
}

func (i FakeSpecArgs) ToFakeSpecOutputWithContext(ctx context.Context) FakeSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FakeSpecOutput)
}

func (i FakeSpecArgs) ToFakeSpecPtrOutput() FakeSpecPtrOutput {
	return i.ToFakeSpecPtrOutputWithContext(context.Background())
}

func (i FakeSpecArgs) ToFakeSpecPtrOutputWithContext(ctx context.Context) FakeSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FakeSpecOutput).ToFakeSpecPtrOutputWithContext(ctx)
}

// FakeSpecPtrInput is an input type that accepts FakeSpecArgs, FakeSpecPtr and FakeSpecPtrOutput values.
// You can construct a concrete instance of `FakeSpecPtrInput` via:
//
//	        FakeSpecArgs{...}
//
//	or:
//
//	        nil
type FakeSpecPtrInput interface {
	pulumi.Input

	ToFakeSpecPtrOutput() FakeSpecPtrOutput
	ToFakeSpecPtrOutputWithContext(context.Context) FakeSpecPtrOutput
}

type fakeSpecPtrType FakeSpecArgs

func FakeSpecPtr(v *FakeSpecArgs) FakeSpecPtrInput {
	return (*fakeSpecPtrType)(v)
}

func (*fakeSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FakeSpec)(nil)).Elem()
}

func (i *fakeSpecPtrType) ToFakeSpecPtrOutput() FakeSpecPtrOutput {
	return i.ToFakeSpecPtrOutputWithContext(context.Background())
}

func (i *fakeSpecPtrType) ToFakeSpecPtrOutputWithContext(ctx context.Context) FakeSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FakeSpecPtrOutput)
}

// FakeSpec contains the static data.
type FakeSpecOutput struct{ *pulumi.OutputState }

func (FakeSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FakeSpec)(nil)).Elem()
}

func (o FakeSpecOutput) ToFakeSpecOutput() FakeSpecOutput {
	return o
}

func (o FakeSpecOutput) ToFakeSpecOutputWithContext(ctx context.Context) FakeSpecOutput {
	return o
}

func (o FakeSpecOutput) ToFakeSpecPtrOutput() FakeSpecPtrOutput {
	return o.ToFakeSpecPtrOutputWithContext(context.Background())
}

func (o FakeSpecOutput) ToFakeSpecPtrOutputWithContext(ctx context.Context) FakeSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FakeSpec) *FakeSpec {
		return &v
	}).(FakeSpecPtrOutput)
}

// Used to select the correct ESO controller (think: ingress.ingressClassName)
// The ESO controller is instantiated with a specific controller name and filters VDS based on this property
func (o FakeSpecOutput) Controller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FakeSpec) *string { return v.Controller }).(pulumi.StringPtrOutput)
}

// Data defines the static data returned
// by this generator.
func (o FakeSpecOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v FakeSpec) map[string]string { return v.Data }).(pulumi.StringMapOutput)
}

type FakeSpecPtrOutput struct{ *pulumi.OutputState }

func (FakeSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FakeSpec)(nil)).Elem()
}

func (o FakeSpecPtrOutput) ToFakeSpecPtrOutput() FakeSpecPtrOutput {
	return o
}

func (o FakeSpecPtrOutput) ToFakeSpecPtrOutputWithContext(ctx context.Context) FakeSpecPtrOutput {
	return o
}

func (o FakeSpecPtrOutput) Elem() FakeSpecOutput {
	return o.ApplyT(func(v *FakeSpec) FakeSpec {
		if v != nil {
			return *v
		}
		var ret FakeSpec
		return ret
	}).(FakeSpecOutput)
}

// Used to select the correct ESO controller (think: ingress.ingressClassName)
// The ESO controller is instantiated with a specific controller name and filters VDS based on this property
func (o FakeSpecPtrOutput) Controller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FakeSpec) *string {
		if v == nil {
			return nil
		}
		return v.Controller
	}).(pulumi.StringPtrOutput)
}

// Data defines the static data returned
// by this generator.
func (o FakeSpecPtrOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FakeSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Data
	}).(pulumi.StringMapOutput)
}

// Data defines the static data returned
// by this generator.
type FakeSpecData struct {
}

// GCRAccessToken generates an GCP access token
// that can be used to authenticate with GCR.
type GCRAccessTokenType struct {
	ApiVersion *string             `pulumi:"apiVersion"`
	Kind       *string             `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta  `pulumi:"metadata"`
	Spec       *GCRAccessTokenSpec `pulumi:"spec"`
}

type GCRAccessTokenMetadata struct {
}

type GCRAccessTokenSpec struct {
	// Auth defines the means for authenticating with GCP
	Auth GCRAccessTokenSpecAuth `pulumi:"auth"`
	// ProjectID defines which project to use to authenticate with
	ProjectID string `pulumi:"projectID"`
}

// GCRAccessTokenSpecInput is an input type that accepts GCRAccessTokenSpecArgs and GCRAccessTokenSpecOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecInput` via:
//
//	GCRAccessTokenSpecArgs{...}
type GCRAccessTokenSpecInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecOutput() GCRAccessTokenSpecOutput
	ToGCRAccessTokenSpecOutputWithContext(context.Context) GCRAccessTokenSpecOutput
}

type GCRAccessTokenSpecArgs struct {
	// Auth defines the means for authenticating with GCP
	Auth GCRAccessTokenSpecAuthInput `pulumi:"auth"`
	// ProjectID defines which project to use to authenticate with
	ProjectID pulumi.StringInput `pulumi:"projectID"`
}

func (GCRAccessTokenSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpec)(nil)).Elem()
}

func (i GCRAccessTokenSpecArgs) ToGCRAccessTokenSpecOutput() GCRAccessTokenSpecOutput {
	return i.ToGCRAccessTokenSpecOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecArgs) ToGCRAccessTokenSpecOutputWithContext(ctx context.Context) GCRAccessTokenSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecOutput)
}

func (i GCRAccessTokenSpecArgs) ToGCRAccessTokenSpecPtrOutput() GCRAccessTokenSpecPtrOutput {
	return i.ToGCRAccessTokenSpecPtrOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecArgs) ToGCRAccessTokenSpecPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecOutput).ToGCRAccessTokenSpecPtrOutputWithContext(ctx)
}

// GCRAccessTokenSpecPtrInput is an input type that accepts GCRAccessTokenSpecArgs, GCRAccessTokenSpecPtr and GCRAccessTokenSpecPtrOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecPtrInput` via:
//
//	        GCRAccessTokenSpecArgs{...}
//
//	or:
//
//	        nil
type GCRAccessTokenSpecPtrInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecPtrOutput() GCRAccessTokenSpecPtrOutput
	ToGCRAccessTokenSpecPtrOutputWithContext(context.Context) GCRAccessTokenSpecPtrOutput
}

type gcraccessTokenSpecPtrType GCRAccessTokenSpecArgs

func GCRAccessTokenSpecPtr(v *GCRAccessTokenSpecArgs) GCRAccessTokenSpecPtrInput {
	return (*gcraccessTokenSpecPtrType)(v)
}

func (*gcraccessTokenSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpec)(nil)).Elem()
}

func (i *gcraccessTokenSpecPtrType) ToGCRAccessTokenSpecPtrOutput() GCRAccessTokenSpecPtrOutput {
	return i.ToGCRAccessTokenSpecPtrOutputWithContext(context.Background())
}

func (i *gcraccessTokenSpecPtrType) ToGCRAccessTokenSpecPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecPtrOutput)
}

type GCRAccessTokenSpecOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpec)(nil)).Elem()
}

func (o GCRAccessTokenSpecOutput) ToGCRAccessTokenSpecOutput() GCRAccessTokenSpecOutput {
	return o
}

func (o GCRAccessTokenSpecOutput) ToGCRAccessTokenSpecOutputWithContext(ctx context.Context) GCRAccessTokenSpecOutput {
	return o
}

func (o GCRAccessTokenSpecOutput) ToGCRAccessTokenSpecPtrOutput() GCRAccessTokenSpecPtrOutput {
	return o.ToGCRAccessTokenSpecPtrOutputWithContext(context.Background())
}

func (o GCRAccessTokenSpecOutput) ToGCRAccessTokenSpecPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GCRAccessTokenSpec) *GCRAccessTokenSpec {
		return &v
	}).(GCRAccessTokenSpecPtrOutput)
}

// Auth defines the means for authenticating with GCP
func (o GCRAccessTokenSpecOutput) Auth() GCRAccessTokenSpecAuthOutput {
	return o.ApplyT(func(v GCRAccessTokenSpec) GCRAccessTokenSpecAuth { return v.Auth }).(GCRAccessTokenSpecAuthOutput)
}

// ProjectID defines which project to use to authenticate with
func (o GCRAccessTokenSpecOutput) ProjectID() pulumi.StringOutput {
	return o.ApplyT(func(v GCRAccessTokenSpec) string { return v.ProjectID }).(pulumi.StringOutput)
}

type GCRAccessTokenSpecPtrOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpec)(nil)).Elem()
}

func (o GCRAccessTokenSpecPtrOutput) ToGCRAccessTokenSpecPtrOutput() GCRAccessTokenSpecPtrOutput {
	return o
}

func (o GCRAccessTokenSpecPtrOutput) ToGCRAccessTokenSpecPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecPtrOutput {
	return o
}

func (o GCRAccessTokenSpecPtrOutput) Elem() GCRAccessTokenSpecOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpec) GCRAccessTokenSpec {
		if v != nil {
			return *v
		}
		var ret GCRAccessTokenSpec
		return ret
	}).(GCRAccessTokenSpecOutput)
}

// Auth defines the means for authenticating with GCP
func (o GCRAccessTokenSpecPtrOutput) Auth() GCRAccessTokenSpecAuthPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpec) *GCRAccessTokenSpecAuth {
		if v == nil {
			return nil
		}
		return &v.Auth
	}).(GCRAccessTokenSpecAuthPtrOutput)
}

// ProjectID defines which project to use to authenticate with
func (o GCRAccessTokenSpecPtrOutput) ProjectID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpec) *string {
		if v == nil {
			return nil
		}
		return &v.ProjectID
	}).(pulumi.StringPtrOutput)
}

// Auth defines the means for authenticating with GCP
type GCRAccessTokenSpecAuth struct {
	SecretRef        *GCRAccessTokenSpecAuthSecretRef        `pulumi:"secretRef"`
	WorkloadIdentity *GCRAccessTokenSpecAuthWorkloadIdentity `pulumi:"workloadIdentity"`
}

// GCRAccessTokenSpecAuthInput is an input type that accepts GCRAccessTokenSpecAuthArgs and GCRAccessTokenSpecAuthOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecAuthInput` via:
//
//	GCRAccessTokenSpecAuthArgs{...}
type GCRAccessTokenSpecAuthInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecAuthOutput() GCRAccessTokenSpecAuthOutput
	ToGCRAccessTokenSpecAuthOutputWithContext(context.Context) GCRAccessTokenSpecAuthOutput
}

// Auth defines the means for authenticating with GCP
type GCRAccessTokenSpecAuthArgs struct {
	SecretRef        GCRAccessTokenSpecAuthSecretRefPtrInput        `pulumi:"secretRef"`
	WorkloadIdentity GCRAccessTokenSpecAuthWorkloadIdentityPtrInput `pulumi:"workloadIdentity"`
}

func (GCRAccessTokenSpecAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecAuth)(nil)).Elem()
}

func (i GCRAccessTokenSpecAuthArgs) ToGCRAccessTokenSpecAuthOutput() GCRAccessTokenSpecAuthOutput {
	return i.ToGCRAccessTokenSpecAuthOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecAuthArgs) ToGCRAccessTokenSpecAuthOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthOutput)
}

func (i GCRAccessTokenSpecAuthArgs) ToGCRAccessTokenSpecAuthPtrOutput() GCRAccessTokenSpecAuthPtrOutput {
	return i.ToGCRAccessTokenSpecAuthPtrOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecAuthArgs) ToGCRAccessTokenSpecAuthPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthOutput).ToGCRAccessTokenSpecAuthPtrOutputWithContext(ctx)
}

// GCRAccessTokenSpecAuthPtrInput is an input type that accepts GCRAccessTokenSpecAuthArgs, GCRAccessTokenSpecAuthPtr and GCRAccessTokenSpecAuthPtrOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecAuthPtrInput` via:
//
//	        GCRAccessTokenSpecAuthArgs{...}
//
//	or:
//
//	        nil
type GCRAccessTokenSpecAuthPtrInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecAuthPtrOutput() GCRAccessTokenSpecAuthPtrOutput
	ToGCRAccessTokenSpecAuthPtrOutputWithContext(context.Context) GCRAccessTokenSpecAuthPtrOutput
}

type gcraccessTokenSpecAuthPtrType GCRAccessTokenSpecAuthArgs

func GCRAccessTokenSpecAuthPtr(v *GCRAccessTokenSpecAuthArgs) GCRAccessTokenSpecAuthPtrInput {
	return (*gcraccessTokenSpecAuthPtrType)(v)
}

func (*gcraccessTokenSpecAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecAuth)(nil)).Elem()
}

func (i *gcraccessTokenSpecAuthPtrType) ToGCRAccessTokenSpecAuthPtrOutput() GCRAccessTokenSpecAuthPtrOutput {
	return i.ToGCRAccessTokenSpecAuthPtrOutputWithContext(context.Background())
}

func (i *gcraccessTokenSpecAuthPtrType) ToGCRAccessTokenSpecAuthPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthPtrOutput)
}

// Auth defines the means for authenticating with GCP
type GCRAccessTokenSpecAuthOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecAuth)(nil)).Elem()
}

func (o GCRAccessTokenSpecAuthOutput) ToGCRAccessTokenSpecAuthOutput() GCRAccessTokenSpecAuthOutput {
	return o
}

func (o GCRAccessTokenSpecAuthOutput) ToGCRAccessTokenSpecAuthOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthOutput {
	return o
}

func (o GCRAccessTokenSpecAuthOutput) ToGCRAccessTokenSpecAuthPtrOutput() GCRAccessTokenSpecAuthPtrOutput {
	return o.ToGCRAccessTokenSpecAuthPtrOutputWithContext(context.Background())
}

func (o GCRAccessTokenSpecAuthOutput) ToGCRAccessTokenSpecAuthPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GCRAccessTokenSpecAuth) *GCRAccessTokenSpecAuth {
		return &v
	}).(GCRAccessTokenSpecAuthPtrOutput)
}

func (o GCRAccessTokenSpecAuthOutput) SecretRef() GCRAccessTokenSpecAuthSecretRefPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuth) *GCRAccessTokenSpecAuthSecretRef { return v.SecretRef }).(GCRAccessTokenSpecAuthSecretRefPtrOutput)
}

func (o GCRAccessTokenSpecAuthOutput) WorkloadIdentity() GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuth) *GCRAccessTokenSpecAuthWorkloadIdentity { return v.WorkloadIdentity }).(GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput)
}

type GCRAccessTokenSpecAuthPtrOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecAuth)(nil)).Elem()
}

func (o GCRAccessTokenSpecAuthPtrOutput) ToGCRAccessTokenSpecAuthPtrOutput() GCRAccessTokenSpecAuthPtrOutput {
	return o
}

func (o GCRAccessTokenSpecAuthPtrOutput) ToGCRAccessTokenSpecAuthPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthPtrOutput {
	return o
}

func (o GCRAccessTokenSpecAuthPtrOutput) Elem() GCRAccessTokenSpecAuthOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuth) GCRAccessTokenSpecAuth {
		if v != nil {
			return *v
		}
		var ret GCRAccessTokenSpecAuth
		return ret
	}).(GCRAccessTokenSpecAuthOutput)
}

func (o GCRAccessTokenSpecAuthPtrOutput) SecretRef() GCRAccessTokenSpecAuthSecretRefPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuth) *GCRAccessTokenSpecAuthSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(GCRAccessTokenSpecAuthSecretRefPtrOutput)
}

func (o GCRAccessTokenSpecAuthPtrOutput) WorkloadIdentity() GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuth) *GCRAccessTokenSpecAuthWorkloadIdentity {
		if v == nil {
			return nil
		}
		return v.WorkloadIdentity
	}).(GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput)
}

type GCRAccessTokenSpecAuthSecretRef struct {
	// The SecretAccessKey is used for authentication
	SecretAccessKeySecretRef *GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef `pulumi:"secretAccessKeySecretRef"`
}

// GCRAccessTokenSpecAuthSecretRefInput is an input type that accepts GCRAccessTokenSpecAuthSecretRefArgs and GCRAccessTokenSpecAuthSecretRefOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecAuthSecretRefInput` via:
//
//	GCRAccessTokenSpecAuthSecretRefArgs{...}
type GCRAccessTokenSpecAuthSecretRefInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecAuthSecretRefOutput() GCRAccessTokenSpecAuthSecretRefOutput
	ToGCRAccessTokenSpecAuthSecretRefOutputWithContext(context.Context) GCRAccessTokenSpecAuthSecretRefOutput
}

type GCRAccessTokenSpecAuthSecretRefArgs struct {
	// The SecretAccessKey is used for authentication
	SecretAccessKeySecretRef GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrInput `pulumi:"secretAccessKeySecretRef"`
}

func (GCRAccessTokenSpecAuthSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecAuthSecretRef)(nil)).Elem()
}

func (i GCRAccessTokenSpecAuthSecretRefArgs) ToGCRAccessTokenSpecAuthSecretRefOutput() GCRAccessTokenSpecAuthSecretRefOutput {
	return i.ToGCRAccessTokenSpecAuthSecretRefOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecAuthSecretRefArgs) ToGCRAccessTokenSpecAuthSecretRefOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthSecretRefOutput)
}

func (i GCRAccessTokenSpecAuthSecretRefArgs) ToGCRAccessTokenSpecAuthSecretRefPtrOutput() GCRAccessTokenSpecAuthSecretRefPtrOutput {
	return i.ToGCRAccessTokenSpecAuthSecretRefPtrOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecAuthSecretRefArgs) ToGCRAccessTokenSpecAuthSecretRefPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthSecretRefOutput).ToGCRAccessTokenSpecAuthSecretRefPtrOutputWithContext(ctx)
}

// GCRAccessTokenSpecAuthSecretRefPtrInput is an input type that accepts GCRAccessTokenSpecAuthSecretRefArgs, GCRAccessTokenSpecAuthSecretRefPtr and GCRAccessTokenSpecAuthSecretRefPtrOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecAuthSecretRefPtrInput` via:
//
//	        GCRAccessTokenSpecAuthSecretRefArgs{...}
//
//	or:
//
//	        nil
type GCRAccessTokenSpecAuthSecretRefPtrInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecAuthSecretRefPtrOutput() GCRAccessTokenSpecAuthSecretRefPtrOutput
	ToGCRAccessTokenSpecAuthSecretRefPtrOutputWithContext(context.Context) GCRAccessTokenSpecAuthSecretRefPtrOutput
}

type gcraccessTokenSpecAuthSecretRefPtrType GCRAccessTokenSpecAuthSecretRefArgs

func GCRAccessTokenSpecAuthSecretRefPtr(v *GCRAccessTokenSpecAuthSecretRefArgs) GCRAccessTokenSpecAuthSecretRefPtrInput {
	return (*gcraccessTokenSpecAuthSecretRefPtrType)(v)
}

func (*gcraccessTokenSpecAuthSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecAuthSecretRef)(nil)).Elem()
}

func (i *gcraccessTokenSpecAuthSecretRefPtrType) ToGCRAccessTokenSpecAuthSecretRefPtrOutput() GCRAccessTokenSpecAuthSecretRefPtrOutput {
	return i.ToGCRAccessTokenSpecAuthSecretRefPtrOutputWithContext(context.Background())
}

func (i *gcraccessTokenSpecAuthSecretRefPtrType) ToGCRAccessTokenSpecAuthSecretRefPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthSecretRefPtrOutput)
}

type GCRAccessTokenSpecAuthSecretRefOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecAuthSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecAuthSecretRef)(nil)).Elem()
}

func (o GCRAccessTokenSpecAuthSecretRefOutput) ToGCRAccessTokenSpecAuthSecretRefOutput() GCRAccessTokenSpecAuthSecretRefOutput {
	return o
}

func (o GCRAccessTokenSpecAuthSecretRefOutput) ToGCRAccessTokenSpecAuthSecretRefOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefOutput {
	return o
}

func (o GCRAccessTokenSpecAuthSecretRefOutput) ToGCRAccessTokenSpecAuthSecretRefPtrOutput() GCRAccessTokenSpecAuthSecretRefPtrOutput {
	return o.ToGCRAccessTokenSpecAuthSecretRefPtrOutputWithContext(context.Background())
}

func (o GCRAccessTokenSpecAuthSecretRefOutput) ToGCRAccessTokenSpecAuthSecretRefPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GCRAccessTokenSpecAuthSecretRef) *GCRAccessTokenSpecAuthSecretRef {
		return &v
	}).(GCRAccessTokenSpecAuthSecretRefPtrOutput)
}

// The SecretAccessKey is used for authentication
func (o GCRAccessTokenSpecAuthSecretRefOutput) SecretAccessKeySecretRef() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthSecretRef) *GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef {
		return v.SecretAccessKeySecretRef
	}).(GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput)
}

type GCRAccessTokenSpecAuthSecretRefPtrOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecAuthSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecAuthSecretRef)(nil)).Elem()
}

func (o GCRAccessTokenSpecAuthSecretRefPtrOutput) ToGCRAccessTokenSpecAuthSecretRefPtrOutput() GCRAccessTokenSpecAuthSecretRefPtrOutput {
	return o
}

func (o GCRAccessTokenSpecAuthSecretRefPtrOutput) ToGCRAccessTokenSpecAuthSecretRefPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefPtrOutput {
	return o
}

func (o GCRAccessTokenSpecAuthSecretRefPtrOutput) Elem() GCRAccessTokenSpecAuthSecretRefOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthSecretRef) GCRAccessTokenSpecAuthSecretRef {
		if v != nil {
			return *v
		}
		var ret GCRAccessTokenSpecAuthSecretRef
		return ret
	}).(GCRAccessTokenSpecAuthSecretRefOutput)
}

// The SecretAccessKey is used for authentication
func (o GCRAccessTokenSpecAuthSecretRefPtrOutput) SecretAccessKeySecretRef() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthSecretRef) *GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef {
		if v == nil {
			return nil
		}
		return v.SecretAccessKeySecretRef
	}).(GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput)
}

// The SecretAccessKey is used for authentication
type GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefInput is an input type that accepts GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs and GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefInput` via:
//
//	GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs{...}
type GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput
	ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutputWithContext(context.Context) GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput
}

// The SecretAccessKey is used for authentication
type GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef)(nil)).Elem()
}

func (i GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput {
	return i.ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput)
}

func (i GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return i.ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput).ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(ctx)
}

// GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrInput is an input type that accepts GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs, GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtr and GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrInput` via:
//
//	        GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs{...}
//
//	or:
//
//	        nil
type GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput
	ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(context.Context) GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput
}

type gcraccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrType GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs

func GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtr(v *GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs) GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrInput {
	return (*gcraccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrType)(v)
}

func (*gcraccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef)(nil)).Elem()
}

func (i *gcraccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrType) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return i.ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(context.Background())
}

func (i *gcraccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrType) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput)
}

// The SecretAccessKey is used for authentication
type GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef)(nil)).Elem()
}

func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput {
	return o
}

func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput {
	return o
}

func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return o.ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(context.Background())
}

func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef) *GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef {
		return &v
	}).(GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef)(nil)).Elem()
}

func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return o
}

func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput) ToGCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput {
	return o
}

func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput) Elem() GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef) GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef {
		if v != nil {
			return *v
		}
		var ret GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef
		return ret
	}).(GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type GCRAccessTokenSpecAuthWorkloadIdentity struct {
	ClusterLocation  string  `pulumi:"clusterLocation"`
	ClusterName      string  `pulumi:"clusterName"`
	ClusterProjectID *string `pulumi:"clusterProjectID"`
	// A reference to a ServiceAccount resource.
	ServiceAccountRef GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef `pulumi:"serviceAccountRef"`
}

// GCRAccessTokenSpecAuthWorkloadIdentityInput is an input type that accepts GCRAccessTokenSpecAuthWorkloadIdentityArgs and GCRAccessTokenSpecAuthWorkloadIdentityOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecAuthWorkloadIdentityInput` via:
//
//	GCRAccessTokenSpecAuthWorkloadIdentityArgs{...}
type GCRAccessTokenSpecAuthWorkloadIdentityInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecAuthWorkloadIdentityOutput() GCRAccessTokenSpecAuthWorkloadIdentityOutput
	ToGCRAccessTokenSpecAuthWorkloadIdentityOutputWithContext(context.Context) GCRAccessTokenSpecAuthWorkloadIdentityOutput
}

type GCRAccessTokenSpecAuthWorkloadIdentityArgs struct {
	ClusterLocation  pulumi.StringInput    `pulumi:"clusterLocation"`
	ClusterName      pulumi.StringInput    `pulumi:"clusterName"`
	ClusterProjectID pulumi.StringPtrInput `pulumi:"clusterProjectID"`
	// A reference to a ServiceAccount resource.
	ServiceAccountRef GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefInput `pulumi:"serviceAccountRef"`
}

func (GCRAccessTokenSpecAuthWorkloadIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecAuthWorkloadIdentity)(nil)).Elem()
}

func (i GCRAccessTokenSpecAuthWorkloadIdentityArgs) ToGCRAccessTokenSpecAuthWorkloadIdentityOutput() GCRAccessTokenSpecAuthWorkloadIdentityOutput {
	return i.ToGCRAccessTokenSpecAuthWorkloadIdentityOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecAuthWorkloadIdentityArgs) ToGCRAccessTokenSpecAuthWorkloadIdentityOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthWorkloadIdentityOutput)
}

func (i GCRAccessTokenSpecAuthWorkloadIdentityArgs) ToGCRAccessTokenSpecAuthWorkloadIdentityPtrOutput() GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return i.ToGCRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecAuthWorkloadIdentityArgs) ToGCRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthWorkloadIdentityOutput).ToGCRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(ctx)
}

// GCRAccessTokenSpecAuthWorkloadIdentityPtrInput is an input type that accepts GCRAccessTokenSpecAuthWorkloadIdentityArgs, GCRAccessTokenSpecAuthWorkloadIdentityPtr and GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecAuthWorkloadIdentityPtrInput` via:
//
//	        GCRAccessTokenSpecAuthWorkloadIdentityArgs{...}
//
//	or:
//
//	        nil
type GCRAccessTokenSpecAuthWorkloadIdentityPtrInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecAuthWorkloadIdentityPtrOutput() GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput
	ToGCRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(context.Context) GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput
}

type gcraccessTokenSpecAuthWorkloadIdentityPtrType GCRAccessTokenSpecAuthWorkloadIdentityArgs

func GCRAccessTokenSpecAuthWorkloadIdentityPtr(v *GCRAccessTokenSpecAuthWorkloadIdentityArgs) GCRAccessTokenSpecAuthWorkloadIdentityPtrInput {
	return (*gcraccessTokenSpecAuthWorkloadIdentityPtrType)(v)
}

func (*gcraccessTokenSpecAuthWorkloadIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecAuthWorkloadIdentity)(nil)).Elem()
}

func (i *gcraccessTokenSpecAuthWorkloadIdentityPtrType) ToGCRAccessTokenSpecAuthWorkloadIdentityPtrOutput() GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return i.ToGCRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(context.Background())
}

func (i *gcraccessTokenSpecAuthWorkloadIdentityPtrType) ToGCRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput)
}

type GCRAccessTokenSpecAuthWorkloadIdentityOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecAuthWorkloadIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecAuthWorkloadIdentity)(nil)).Elem()
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityOutput() GCRAccessTokenSpecAuthWorkloadIdentityOutput {
	return o
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityOutput {
	return o
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityPtrOutput() GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return o.ToGCRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(context.Background())
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GCRAccessTokenSpecAuthWorkloadIdentity) *GCRAccessTokenSpecAuthWorkloadIdentity {
		return &v
	}).(GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput)
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityOutput) ClusterLocation() pulumi.StringOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthWorkloadIdentity) string { return v.ClusterLocation }).(pulumi.StringOutput)
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthWorkloadIdentity) string { return v.ClusterName }).(pulumi.StringOutput)
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityOutput) ClusterProjectID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthWorkloadIdentity) *string { return v.ClusterProjectID }).(pulumi.StringPtrOutput)
}

// A reference to a ServiceAccount resource.
func (o GCRAccessTokenSpecAuthWorkloadIdentityOutput) ServiceAccountRef() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthWorkloadIdentity) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef {
		return v.ServiceAccountRef
	}).(GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput)
}

type GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecAuthWorkloadIdentity)(nil)).Elem()
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityPtrOutput() GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return o
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput {
	return o
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput) Elem() GCRAccessTokenSpecAuthWorkloadIdentityOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthWorkloadIdentity) GCRAccessTokenSpecAuthWorkloadIdentity {
		if v != nil {
			return *v
		}
		var ret GCRAccessTokenSpecAuthWorkloadIdentity
		return ret
	}).(GCRAccessTokenSpecAuthWorkloadIdentityOutput)
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput) ClusterLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthWorkloadIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterLocation
	}).(pulumi.StringPtrOutput)
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthWorkloadIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.ClusterName
	}).(pulumi.StringPtrOutput)
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput) ClusterProjectID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthWorkloadIdentity) *string {
		if v == nil {
			return nil
		}
		return v.ClusterProjectID
	}).(pulumi.StringPtrOutput)
}

// A reference to a ServiceAccount resource.
func (o GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput) ServiceAccountRef() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthWorkloadIdentity) *GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef {
		if v == nil {
			return nil
		}
		return &v.ServiceAccountRef
	}).(GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput)
}

// A reference to a ServiceAccount resource.
type GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences []string `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefInput is an input type that accepts GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs and GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefInput` via:
//
//	GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs{...}
type GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput
	ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutputWithContext(context.Context) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput
}

// A reference to a ServiceAccount resource.
type GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef)(nil)).Elem()
}

func (i GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput {
	return i.ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput)
}

func (i GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return i.ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(context.Background())
}

func (i GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput).ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(ctx)
}

// GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrInput is an input type that accepts GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs, GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtr and GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput values.
// You can construct a concrete instance of `GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrInput` via:
//
//	        GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs{...}
//
//	or:
//
//	        nil
type GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrInput interface {
	pulumi.Input

	ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput
	ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(context.Context) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput
}

type gcraccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrType GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs

func GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtr(v *GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrInput {
	return (*gcraccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrType)(v)
}

func (*gcraccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef)(nil)).Elem()
}

func (i *gcraccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrType) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return i.ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(context.Background())
}

func (i *gcraccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrType) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput)
}

// A reference to a ServiceAccount resource.
type GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef)(nil)).Elem()
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput {
	return o
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput {
	return o
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return o.ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(context.Background())
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) *GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef {
		return &v
	}).(GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) []string { return v.Audiences }).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput struct{ *pulumi.OutputState }

func (GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef)(nil)).Elem()
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return o
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput) ToGCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutputWithContext(ctx context.Context) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput {
	return o
}

func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput) Elem() GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef {
		if v != nil {
			return *v
		}
		var ret GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef
		return ret
	}).(GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// GithubAccessToken generates ghs_ accessToken
type GithubAccessTokenType struct {
	ApiVersion *string                `pulumi:"apiVersion"`
	Kind       *string                `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta     `pulumi:"metadata"`
	Spec       *GithubAccessTokenSpec `pulumi:"spec"`
}

type GithubAccessTokenMetadata struct {
}

type GithubAccessTokenSpec struct {
	AppID string `pulumi:"appID"`
	// Auth configures how ESO authenticates with a Github instance.
	Auth      GithubAccessTokenSpecAuth `pulumi:"auth"`
	InstallID string                    `pulumi:"installID"`
	// URL configures the Github instance URL. Defaults to https://github.com/.
	Url *string `pulumi:"url"`
}

// GithubAccessTokenSpecInput is an input type that accepts GithubAccessTokenSpecArgs and GithubAccessTokenSpecOutput values.
// You can construct a concrete instance of `GithubAccessTokenSpecInput` via:
//
//	GithubAccessTokenSpecArgs{...}
type GithubAccessTokenSpecInput interface {
	pulumi.Input

	ToGithubAccessTokenSpecOutput() GithubAccessTokenSpecOutput
	ToGithubAccessTokenSpecOutputWithContext(context.Context) GithubAccessTokenSpecOutput
}

type GithubAccessTokenSpecArgs struct {
	AppID pulumi.StringInput `pulumi:"appID"`
	// Auth configures how ESO authenticates with a Github instance.
	Auth      GithubAccessTokenSpecAuthInput `pulumi:"auth"`
	InstallID pulumi.StringInput             `pulumi:"installID"`
	// URL configures the Github instance URL. Defaults to https://github.com/.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (GithubAccessTokenSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubAccessTokenSpec)(nil)).Elem()
}

func (i GithubAccessTokenSpecArgs) ToGithubAccessTokenSpecOutput() GithubAccessTokenSpecOutput {
	return i.ToGithubAccessTokenSpecOutputWithContext(context.Background())
}

func (i GithubAccessTokenSpecArgs) ToGithubAccessTokenSpecOutputWithContext(ctx context.Context) GithubAccessTokenSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecOutput)
}

func (i GithubAccessTokenSpecArgs) ToGithubAccessTokenSpecPtrOutput() GithubAccessTokenSpecPtrOutput {
	return i.ToGithubAccessTokenSpecPtrOutputWithContext(context.Background())
}

func (i GithubAccessTokenSpecArgs) ToGithubAccessTokenSpecPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecOutput).ToGithubAccessTokenSpecPtrOutputWithContext(ctx)
}

// GithubAccessTokenSpecPtrInput is an input type that accepts GithubAccessTokenSpecArgs, GithubAccessTokenSpecPtr and GithubAccessTokenSpecPtrOutput values.
// You can construct a concrete instance of `GithubAccessTokenSpecPtrInput` via:
//
//	        GithubAccessTokenSpecArgs{...}
//
//	or:
//
//	        nil
type GithubAccessTokenSpecPtrInput interface {
	pulumi.Input

	ToGithubAccessTokenSpecPtrOutput() GithubAccessTokenSpecPtrOutput
	ToGithubAccessTokenSpecPtrOutputWithContext(context.Context) GithubAccessTokenSpecPtrOutput
}

type githubAccessTokenSpecPtrType GithubAccessTokenSpecArgs

func GithubAccessTokenSpecPtr(v *GithubAccessTokenSpecArgs) GithubAccessTokenSpecPtrInput {
	return (*githubAccessTokenSpecPtrType)(v)
}

func (*githubAccessTokenSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubAccessTokenSpec)(nil)).Elem()
}

func (i *githubAccessTokenSpecPtrType) ToGithubAccessTokenSpecPtrOutput() GithubAccessTokenSpecPtrOutput {
	return i.ToGithubAccessTokenSpecPtrOutputWithContext(context.Background())
}

func (i *githubAccessTokenSpecPtrType) ToGithubAccessTokenSpecPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecPtrOutput)
}

type GithubAccessTokenSpecOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubAccessTokenSpec)(nil)).Elem()
}

func (o GithubAccessTokenSpecOutput) ToGithubAccessTokenSpecOutput() GithubAccessTokenSpecOutput {
	return o
}

func (o GithubAccessTokenSpecOutput) ToGithubAccessTokenSpecOutputWithContext(ctx context.Context) GithubAccessTokenSpecOutput {
	return o
}

func (o GithubAccessTokenSpecOutput) ToGithubAccessTokenSpecPtrOutput() GithubAccessTokenSpecPtrOutput {
	return o.ToGithubAccessTokenSpecPtrOutputWithContext(context.Background())
}

func (o GithubAccessTokenSpecOutput) ToGithubAccessTokenSpecPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GithubAccessTokenSpec) *GithubAccessTokenSpec {
		return &v
	}).(GithubAccessTokenSpecPtrOutput)
}

func (o GithubAccessTokenSpecOutput) AppID() pulumi.StringOutput {
	return o.ApplyT(func(v GithubAccessTokenSpec) string { return v.AppID }).(pulumi.StringOutput)
}

// Auth configures how ESO authenticates with a Github instance.
func (o GithubAccessTokenSpecOutput) Auth() GithubAccessTokenSpecAuthOutput {
	return o.ApplyT(func(v GithubAccessTokenSpec) GithubAccessTokenSpecAuth { return v.Auth }).(GithubAccessTokenSpecAuthOutput)
}

func (o GithubAccessTokenSpecOutput) InstallID() pulumi.StringOutput {
	return o.ApplyT(func(v GithubAccessTokenSpec) string { return v.InstallID }).(pulumi.StringOutput)
}

// URL configures the Github instance URL. Defaults to https://github.com/.
func (o GithubAccessTokenSpecOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenSpec) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GithubAccessTokenSpecPtrOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubAccessTokenSpec)(nil)).Elem()
}

func (o GithubAccessTokenSpecPtrOutput) ToGithubAccessTokenSpecPtrOutput() GithubAccessTokenSpecPtrOutput {
	return o
}

func (o GithubAccessTokenSpecPtrOutput) ToGithubAccessTokenSpecPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecPtrOutput {
	return o
}

func (o GithubAccessTokenSpecPtrOutput) Elem() GithubAccessTokenSpecOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpec) GithubAccessTokenSpec {
		if v != nil {
			return *v
		}
		var ret GithubAccessTokenSpec
		return ret
	}).(GithubAccessTokenSpecOutput)
}

func (o GithubAccessTokenSpecPtrOutput) AppID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpec) *string {
		if v == nil {
			return nil
		}
		return &v.AppID
	}).(pulumi.StringPtrOutput)
}

// Auth configures how ESO authenticates with a Github instance.
func (o GithubAccessTokenSpecPtrOutput) Auth() GithubAccessTokenSpecAuthPtrOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpec) *GithubAccessTokenSpecAuth {
		if v == nil {
			return nil
		}
		return &v.Auth
	}).(GithubAccessTokenSpecAuthPtrOutput)
}

func (o GithubAccessTokenSpecPtrOutput) InstallID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpec) *string {
		if v == nil {
			return nil
		}
		return &v.InstallID
	}).(pulumi.StringPtrOutput)
}

// URL configures the Github instance URL. Defaults to https://github.com/.
func (o GithubAccessTokenSpecPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpec) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Auth configures how ESO authenticates with a Github instance.
type GithubAccessTokenSpecAuth struct {
	PrivateKey GithubAccessTokenSpecAuthPrivateKey `pulumi:"privateKey"`
}

// GithubAccessTokenSpecAuthInput is an input type that accepts GithubAccessTokenSpecAuthArgs and GithubAccessTokenSpecAuthOutput values.
// You can construct a concrete instance of `GithubAccessTokenSpecAuthInput` via:
//
//	GithubAccessTokenSpecAuthArgs{...}
type GithubAccessTokenSpecAuthInput interface {
	pulumi.Input

	ToGithubAccessTokenSpecAuthOutput() GithubAccessTokenSpecAuthOutput
	ToGithubAccessTokenSpecAuthOutputWithContext(context.Context) GithubAccessTokenSpecAuthOutput
}

// Auth configures how ESO authenticates with a Github instance.
type GithubAccessTokenSpecAuthArgs struct {
	PrivateKey GithubAccessTokenSpecAuthPrivateKeyInput `pulumi:"privateKey"`
}

func (GithubAccessTokenSpecAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubAccessTokenSpecAuth)(nil)).Elem()
}

func (i GithubAccessTokenSpecAuthArgs) ToGithubAccessTokenSpecAuthOutput() GithubAccessTokenSpecAuthOutput {
	return i.ToGithubAccessTokenSpecAuthOutputWithContext(context.Background())
}

func (i GithubAccessTokenSpecAuthArgs) ToGithubAccessTokenSpecAuthOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecAuthOutput)
}

func (i GithubAccessTokenSpecAuthArgs) ToGithubAccessTokenSpecAuthPtrOutput() GithubAccessTokenSpecAuthPtrOutput {
	return i.ToGithubAccessTokenSpecAuthPtrOutputWithContext(context.Background())
}

func (i GithubAccessTokenSpecAuthArgs) ToGithubAccessTokenSpecAuthPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecAuthOutput).ToGithubAccessTokenSpecAuthPtrOutputWithContext(ctx)
}

// GithubAccessTokenSpecAuthPtrInput is an input type that accepts GithubAccessTokenSpecAuthArgs, GithubAccessTokenSpecAuthPtr and GithubAccessTokenSpecAuthPtrOutput values.
// You can construct a concrete instance of `GithubAccessTokenSpecAuthPtrInput` via:
//
//	        GithubAccessTokenSpecAuthArgs{...}
//
//	or:
//
//	        nil
type GithubAccessTokenSpecAuthPtrInput interface {
	pulumi.Input

	ToGithubAccessTokenSpecAuthPtrOutput() GithubAccessTokenSpecAuthPtrOutput
	ToGithubAccessTokenSpecAuthPtrOutputWithContext(context.Context) GithubAccessTokenSpecAuthPtrOutput
}

type githubAccessTokenSpecAuthPtrType GithubAccessTokenSpecAuthArgs

func GithubAccessTokenSpecAuthPtr(v *GithubAccessTokenSpecAuthArgs) GithubAccessTokenSpecAuthPtrInput {
	return (*githubAccessTokenSpecAuthPtrType)(v)
}

func (*githubAccessTokenSpecAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubAccessTokenSpecAuth)(nil)).Elem()
}

func (i *githubAccessTokenSpecAuthPtrType) ToGithubAccessTokenSpecAuthPtrOutput() GithubAccessTokenSpecAuthPtrOutput {
	return i.ToGithubAccessTokenSpecAuthPtrOutputWithContext(context.Background())
}

func (i *githubAccessTokenSpecAuthPtrType) ToGithubAccessTokenSpecAuthPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecAuthPtrOutput)
}

// Auth configures how ESO authenticates with a Github instance.
type GithubAccessTokenSpecAuthOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenSpecAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubAccessTokenSpecAuth)(nil)).Elem()
}

func (o GithubAccessTokenSpecAuthOutput) ToGithubAccessTokenSpecAuthOutput() GithubAccessTokenSpecAuthOutput {
	return o
}

func (o GithubAccessTokenSpecAuthOutput) ToGithubAccessTokenSpecAuthOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthOutput {
	return o
}

func (o GithubAccessTokenSpecAuthOutput) ToGithubAccessTokenSpecAuthPtrOutput() GithubAccessTokenSpecAuthPtrOutput {
	return o.ToGithubAccessTokenSpecAuthPtrOutputWithContext(context.Background())
}

func (o GithubAccessTokenSpecAuthOutput) ToGithubAccessTokenSpecAuthPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GithubAccessTokenSpecAuth) *GithubAccessTokenSpecAuth {
		return &v
	}).(GithubAccessTokenSpecAuthPtrOutput)
}

func (o GithubAccessTokenSpecAuthOutput) PrivateKey() GithubAccessTokenSpecAuthPrivateKeyOutput {
	return o.ApplyT(func(v GithubAccessTokenSpecAuth) GithubAccessTokenSpecAuthPrivateKey { return v.PrivateKey }).(GithubAccessTokenSpecAuthPrivateKeyOutput)
}

type GithubAccessTokenSpecAuthPtrOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenSpecAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubAccessTokenSpecAuth)(nil)).Elem()
}

func (o GithubAccessTokenSpecAuthPtrOutput) ToGithubAccessTokenSpecAuthPtrOutput() GithubAccessTokenSpecAuthPtrOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPtrOutput) ToGithubAccessTokenSpecAuthPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPtrOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPtrOutput) Elem() GithubAccessTokenSpecAuthOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpecAuth) GithubAccessTokenSpecAuth {
		if v != nil {
			return *v
		}
		var ret GithubAccessTokenSpecAuth
		return ret
	}).(GithubAccessTokenSpecAuthOutput)
}

func (o GithubAccessTokenSpecAuthPtrOutput) PrivateKey() GithubAccessTokenSpecAuthPrivateKeyPtrOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpecAuth) *GithubAccessTokenSpecAuthPrivateKey {
		if v == nil {
			return nil
		}
		return &v.PrivateKey
	}).(GithubAccessTokenSpecAuthPrivateKeyPtrOutput)
}

type GithubAccessTokenSpecAuthPrivateKey struct {
	// A reference to a specific 'key' within a Secret resource,
	// In some instances, `key` is a required field.
	SecretRef GithubAccessTokenSpecAuthPrivateKeySecretRef `pulumi:"secretRef"`
}

// GithubAccessTokenSpecAuthPrivateKeyInput is an input type that accepts GithubAccessTokenSpecAuthPrivateKeyArgs and GithubAccessTokenSpecAuthPrivateKeyOutput values.
// You can construct a concrete instance of `GithubAccessTokenSpecAuthPrivateKeyInput` via:
//
//	GithubAccessTokenSpecAuthPrivateKeyArgs{...}
type GithubAccessTokenSpecAuthPrivateKeyInput interface {
	pulumi.Input

	ToGithubAccessTokenSpecAuthPrivateKeyOutput() GithubAccessTokenSpecAuthPrivateKeyOutput
	ToGithubAccessTokenSpecAuthPrivateKeyOutputWithContext(context.Context) GithubAccessTokenSpecAuthPrivateKeyOutput
}

type GithubAccessTokenSpecAuthPrivateKeyArgs struct {
	// A reference to a specific 'key' within a Secret resource,
	// In some instances, `key` is a required field.
	SecretRef GithubAccessTokenSpecAuthPrivateKeySecretRefInput `pulumi:"secretRef"`
}

func (GithubAccessTokenSpecAuthPrivateKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubAccessTokenSpecAuthPrivateKey)(nil)).Elem()
}

func (i GithubAccessTokenSpecAuthPrivateKeyArgs) ToGithubAccessTokenSpecAuthPrivateKeyOutput() GithubAccessTokenSpecAuthPrivateKeyOutput {
	return i.ToGithubAccessTokenSpecAuthPrivateKeyOutputWithContext(context.Background())
}

func (i GithubAccessTokenSpecAuthPrivateKeyArgs) ToGithubAccessTokenSpecAuthPrivateKeyOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecAuthPrivateKeyOutput)
}

func (i GithubAccessTokenSpecAuthPrivateKeyArgs) ToGithubAccessTokenSpecAuthPrivateKeyPtrOutput() GithubAccessTokenSpecAuthPrivateKeyPtrOutput {
	return i.ToGithubAccessTokenSpecAuthPrivateKeyPtrOutputWithContext(context.Background())
}

func (i GithubAccessTokenSpecAuthPrivateKeyArgs) ToGithubAccessTokenSpecAuthPrivateKeyPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecAuthPrivateKeyOutput).ToGithubAccessTokenSpecAuthPrivateKeyPtrOutputWithContext(ctx)
}

// GithubAccessTokenSpecAuthPrivateKeyPtrInput is an input type that accepts GithubAccessTokenSpecAuthPrivateKeyArgs, GithubAccessTokenSpecAuthPrivateKeyPtr and GithubAccessTokenSpecAuthPrivateKeyPtrOutput values.
// You can construct a concrete instance of `GithubAccessTokenSpecAuthPrivateKeyPtrInput` via:
//
//	        GithubAccessTokenSpecAuthPrivateKeyArgs{...}
//
//	or:
//
//	        nil
type GithubAccessTokenSpecAuthPrivateKeyPtrInput interface {
	pulumi.Input

	ToGithubAccessTokenSpecAuthPrivateKeyPtrOutput() GithubAccessTokenSpecAuthPrivateKeyPtrOutput
	ToGithubAccessTokenSpecAuthPrivateKeyPtrOutputWithContext(context.Context) GithubAccessTokenSpecAuthPrivateKeyPtrOutput
}

type githubAccessTokenSpecAuthPrivateKeyPtrType GithubAccessTokenSpecAuthPrivateKeyArgs

func GithubAccessTokenSpecAuthPrivateKeyPtr(v *GithubAccessTokenSpecAuthPrivateKeyArgs) GithubAccessTokenSpecAuthPrivateKeyPtrInput {
	return (*githubAccessTokenSpecAuthPrivateKeyPtrType)(v)
}

func (*githubAccessTokenSpecAuthPrivateKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubAccessTokenSpecAuthPrivateKey)(nil)).Elem()
}

func (i *githubAccessTokenSpecAuthPrivateKeyPtrType) ToGithubAccessTokenSpecAuthPrivateKeyPtrOutput() GithubAccessTokenSpecAuthPrivateKeyPtrOutput {
	return i.ToGithubAccessTokenSpecAuthPrivateKeyPtrOutputWithContext(context.Background())
}

func (i *githubAccessTokenSpecAuthPrivateKeyPtrType) ToGithubAccessTokenSpecAuthPrivateKeyPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecAuthPrivateKeyPtrOutput)
}

type GithubAccessTokenSpecAuthPrivateKeyOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenSpecAuthPrivateKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubAccessTokenSpecAuthPrivateKey)(nil)).Elem()
}

func (o GithubAccessTokenSpecAuthPrivateKeyOutput) ToGithubAccessTokenSpecAuthPrivateKeyOutput() GithubAccessTokenSpecAuthPrivateKeyOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPrivateKeyOutput) ToGithubAccessTokenSpecAuthPrivateKeyOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeyOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPrivateKeyOutput) ToGithubAccessTokenSpecAuthPrivateKeyPtrOutput() GithubAccessTokenSpecAuthPrivateKeyPtrOutput {
	return o.ToGithubAccessTokenSpecAuthPrivateKeyPtrOutputWithContext(context.Background())
}

func (o GithubAccessTokenSpecAuthPrivateKeyOutput) ToGithubAccessTokenSpecAuthPrivateKeyPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GithubAccessTokenSpecAuthPrivateKey) *GithubAccessTokenSpecAuthPrivateKey {
		return &v
	}).(GithubAccessTokenSpecAuthPrivateKeyPtrOutput)
}

// A reference to a specific 'key' within a Secret resource,
// In some instances, `key` is a required field.
func (o GithubAccessTokenSpecAuthPrivateKeyOutput) SecretRef() GithubAccessTokenSpecAuthPrivateKeySecretRefOutput {
	return o.ApplyT(func(v GithubAccessTokenSpecAuthPrivateKey) GithubAccessTokenSpecAuthPrivateKeySecretRef {
		return v.SecretRef
	}).(GithubAccessTokenSpecAuthPrivateKeySecretRefOutput)
}

type GithubAccessTokenSpecAuthPrivateKeyPtrOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenSpecAuthPrivateKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubAccessTokenSpecAuthPrivateKey)(nil)).Elem()
}

func (o GithubAccessTokenSpecAuthPrivateKeyPtrOutput) ToGithubAccessTokenSpecAuthPrivateKeyPtrOutput() GithubAccessTokenSpecAuthPrivateKeyPtrOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPrivateKeyPtrOutput) ToGithubAccessTokenSpecAuthPrivateKeyPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeyPtrOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPrivateKeyPtrOutput) Elem() GithubAccessTokenSpecAuthPrivateKeyOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpecAuthPrivateKey) GithubAccessTokenSpecAuthPrivateKey {
		if v != nil {
			return *v
		}
		var ret GithubAccessTokenSpecAuthPrivateKey
		return ret
	}).(GithubAccessTokenSpecAuthPrivateKeyOutput)
}

// A reference to a specific 'key' within a Secret resource,
// In some instances, `key` is a required field.
func (o GithubAccessTokenSpecAuthPrivateKeyPtrOutput) SecretRef() GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpecAuthPrivateKey) *GithubAccessTokenSpecAuthPrivateKeySecretRef {
		if v == nil {
			return nil
		}
		return &v.SecretRef
	}).(GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput)
}

// A reference to a specific 'key' within a Secret resource,
// In some instances, `key` is a required field.
type GithubAccessTokenSpecAuthPrivateKeySecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// GithubAccessTokenSpecAuthPrivateKeySecretRefInput is an input type that accepts GithubAccessTokenSpecAuthPrivateKeySecretRefArgs and GithubAccessTokenSpecAuthPrivateKeySecretRefOutput values.
// You can construct a concrete instance of `GithubAccessTokenSpecAuthPrivateKeySecretRefInput` via:
//
//	GithubAccessTokenSpecAuthPrivateKeySecretRefArgs{...}
type GithubAccessTokenSpecAuthPrivateKeySecretRefInput interface {
	pulumi.Input

	ToGithubAccessTokenSpecAuthPrivateKeySecretRefOutput() GithubAccessTokenSpecAuthPrivateKeySecretRefOutput
	ToGithubAccessTokenSpecAuthPrivateKeySecretRefOutputWithContext(context.Context) GithubAccessTokenSpecAuthPrivateKeySecretRefOutput
}

// A reference to a specific 'key' within a Secret resource,
// In some instances, `key` is a required field.
type GithubAccessTokenSpecAuthPrivateKeySecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (GithubAccessTokenSpecAuthPrivateKeySecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubAccessTokenSpecAuthPrivateKeySecretRef)(nil)).Elem()
}

func (i GithubAccessTokenSpecAuthPrivateKeySecretRefArgs) ToGithubAccessTokenSpecAuthPrivateKeySecretRefOutput() GithubAccessTokenSpecAuthPrivateKeySecretRefOutput {
	return i.ToGithubAccessTokenSpecAuthPrivateKeySecretRefOutputWithContext(context.Background())
}

func (i GithubAccessTokenSpecAuthPrivateKeySecretRefArgs) ToGithubAccessTokenSpecAuthPrivateKeySecretRefOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeySecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecAuthPrivateKeySecretRefOutput)
}

func (i GithubAccessTokenSpecAuthPrivateKeySecretRefArgs) ToGithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput() GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput {
	return i.ToGithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutputWithContext(context.Background())
}

func (i GithubAccessTokenSpecAuthPrivateKeySecretRefArgs) ToGithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecAuthPrivateKeySecretRefOutput).ToGithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutputWithContext(ctx)
}

// GithubAccessTokenSpecAuthPrivateKeySecretRefPtrInput is an input type that accepts GithubAccessTokenSpecAuthPrivateKeySecretRefArgs, GithubAccessTokenSpecAuthPrivateKeySecretRefPtr and GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput values.
// You can construct a concrete instance of `GithubAccessTokenSpecAuthPrivateKeySecretRefPtrInput` via:
//
//	        GithubAccessTokenSpecAuthPrivateKeySecretRefArgs{...}
//
//	or:
//
//	        nil
type GithubAccessTokenSpecAuthPrivateKeySecretRefPtrInput interface {
	pulumi.Input

	ToGithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput() GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput
	ToGithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutputWithContext(context.Context) GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput
}

type githubAccessTokenSpecAuthPrivateKeySecretRefPtrType GithubAccessTokenSpecAuthPrivateKeySecretRefArgs

func GithubAccessTokenSpecAuthPrivateKeySecretRefPtr(v *GithubAccessTokenSpecAuthPrivateKeySecretRefArgs) GithubAccessTokenSpecAuthPrivateKeySecretRefPtrInput {
	return (*githubAccessTokenSpecAuthPrivateKeySecretRefPtrType)(v)
}

func (*githubAccessTokenSpecAuthPrivateKeySecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubAccessTokenSpecAuthPrivateKeySecretRef)(nil)).Elem()
}

func (i *githubAccessTokenSpecAuthPrivateKeySecretRefPtrType) ToGithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput() GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput {
	return i.ToGithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutputWithContext(context.Background())
}

func (i *githubAccessTokenSpecAuthPrivateKeySecretRefPtrType) ToGithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput)
}

// A reference to a specific 'key' within a Secret resource,
// In some instances, `key` is a required field.
type GithubAccessTokenSpecAuthPrivateKeySecretRefOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenSpecAuthPrivateKeySecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GithubAccessTokenSpecAuthPrivateKeySecretRef)(nil)).Elem()
}

func (o GithubAccessTokenSpecAuthPrivateKeySecretRefOutput) ToGithubAccessTokenSpecAuthPrivateKeySecretRefOutput() GithubAccessTokenSpecAuthPrivateKeySecretRefOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPrivateKeySecretRefOutput) ToGithubAccessTokenSpecAuthPrivateKeySecretRefOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeySecretRefOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPrivateKeySecretRefOutput) ToGithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput() GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput {
	return o.ToGithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutputWithContext(context.Background())
}

func (o GithubAccessTokenSpecAuthPrivateKeySecretRefOutput) ToGithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GithubAccessTokenSpecAuthPrivateKeySecretRef) *GithubAccessTokenSpecAuthPrivateKeySecretRef {
		return &v
	}).(GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o GithubAccessTokenSpecAuthPrivateKeySecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenSpecAuthPrivateKeySecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o GithubAccessTokenSpecAuthPrivateKeySecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenSpecAuthPrivateKeySecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o GithubAccessTokenSpecAuthPrivateKeySecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GithubAccessTokenSpecAuthPrivateKeySecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubAccessTokenSpecAuthPrivateKeySecretRef)(nil)).Elem()
}

func (o GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput) ToGithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput() GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput) ToGithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutputWithContext(ctx context.Context) GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput {
	return o
}

func (o GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput) Elem() GithubAccessTokenSpecAuthPrivateKeySecretRefOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpecAuthPrivateKeySecretRef) GithubAccessTokenSpecAuthPrivateKeySecretRef {
		if v != nil {
			return *v
		}
		var ret GithubAccessTokenSpecAuthPrivateKeySecretRef
		return ret
	}).(GithubAccessTokenSpecAuthPrivateKeySecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpecAuthPrivateKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpecAuthPrivateKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubAccessTokenSpecAuthPrivateKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Password generates a random password based on the
// configuration parameters in spec.
// You can specify the length, characterset and other attributes.
type PasswordType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// PasswordSpec controls the behavior of the password generator.
	Spec *PasswordSpec `pulumi:"spec"`
}

// Defaults sets the appropriate defaults for PasswordType
func (val *PasswordType) Defaults() *PasswordType {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Spec = tmp.Spec.Defaults()

	return &tmp
}

type PasswordMetadata struct {
}

// PasswordSpec controls the behavior of the password generator.
type PasswordSpec struct {
	// set AllowRepeat to true to allow repeating characters.
	AllowRepeat bool `pulumi:"allowRepeat"`
	// Digits specifies the number of digits in the generated
	// password. If omitted it defaults to 25% of the length of the password
	Digits *int `pulumi:"digits"`
	// Length of the password to be generated.
	// Defaults to 24
	Length int `pulumi:"length"`
	// Set NoUpper to disable uppercase characters
	NoUpper bool `pulumi:"noUpper"`
	// SymbolCharacters specifies the special characters that should be used
	// in the generated password.
	SymbolCharacters *string `pulumi:"symbolCharacters"`
	// Symbols specifies the number of symbol characters in the generated
	// password. If omitted it defaults to 25% of the length of the password
	Symbols *int `pulumi:"symbols"`
}

// Defaults sets the appropriate defaults for PasswordSpec
func (val *PasswordSpec) Defaults() *PasswordSpec {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.AllowRepeat) {
		tmp.AllowRepeat = false
	}
	if utilities.IsZero(tmp.Length) {
		tmp.Length = 24
	}
	if utilities.IsZero(tmp.NoUpper) {
		tmp.NoUpper = false
	}
	return &tmp
}

// PasswordSpecInput is an input type that accepts PasswordSpecArgs and PasswordSpecOutput values.
// You can construct a concrete instance of `PasswordSpecInput` via:
//
//	PasswordSpecArgs{...}
type PasswordSpecInput interface {
	pulumi.Input

	ToPasswordSpecOutput() PasswordSpecOutput
	ToPasswordSpecOutputWithContext(context.Context) PasswordSpecOutput
}

// PasswordSpec controls the behavior of the password generator.
type PasswordSpecArgs struct {
	// set AllowRepeat to true to allow repeating characters.
	AllowRepeat pulumi.BoolInput `pulumi:"allowRepeat"`
	// Digits specifies the number of digits in the generated
	// password. If omitted it defaults to 25% of the length of the password
	Digits pulumi.IntPtrInput `pulumi:"digits"`
	// Length of the password to be generated.
	// Defaults to 24
	Length pulumi.IntInput `pulumi:"length"`
	// Set NoUpper to disable uppercase characters
	NoUpper pulumi.BoolInput `pulumi:"noUpper"`
	// SymbolCharacters specifies the special characters that should be used
	// in the generated password.
	SymbolCharacters pulumi.StringPtrInput `pulumi:"symbolCharacters"`
	// Symbols specifies the number of symbol characters in the generated
	// password. If omitted it defaults to 25% of the length of the password
	Symbols pulumi.IntPtrInput `pulumi:"symbols"`
}

// Defaults sets the appropriate defaults for PasswordSpecArgs
func (val *PasswordSpecArgs) Defaults() *PasswordSpecArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AllowRepeat == nil {
		tmp.AllowRepeat = pulumi.Bool(false)
	}
	if tmp.Length == nil {
		tmp.Length = pulumi.Int(24)
	}
	if tmp.NoUpper == nil {
		tmp.NoUpper = pulumi.Bool(false)
	}
	return &tmp
}
func (PasswordSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PasswordSpec)(nil)).Elem()
}

func (i PasswordSpecArgs) ToPasswordSpecOutput() PasswordSpecOutput {
	return i.ToPasswordSpecOutputWithContext(context.Background())
}

func (i PasswordSpecArgs) ToPasswordSpecOutputWithContext(ctx context.Context) PasswordSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordSpecOutput)
}

func (i PasswordSpecArgs) ToPasswordSpecPtrOutput() PasswordSpecPtrOutput {
	return i.ToPasswordSpecPtrOutputWithContext(context.Background())
}

func (i PasswordSpecArgs) ToPasswordSpecPtrOutputWithContext(ctx context.Context) PasswordSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordSpecOutput).ToPasswordSpecPtrOutputWithContext(ctx)
}

// PasswordSpecPtrInput is an input type that accepts PasswordSpecArgs, PasswordSpecPtr and PasswordSpecPtrOutput values.
// You can construct a concrete instance of `PasswordSpecPtrInput` via:
//
//	        PasswordSpecArgs{...}
//
//	or:
//
//	        nil
type PasswordSpecPtrInput interface {
	pulumi.Input

	ToPasswordSpecPtrOutput() PasswordSpecPtrOutput
	ToPasswordSpecPtrOutputWithContext(context.Context) PasswordSpecPtrOutput
}

type passwordSpecPtrType PasswordSpecArgs

func PasswordSpecPtr(v *PasswordSpecArgs) PasswordSpecPtrInput {
	return (*passwordSpecPtrType)(v)
}

func (*passwordSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PasswordSpec)(nil)).Elem()
}

func (i *passwordSpecPtrType) ToPasswordSpecPtrOutput() PasswordSpecPtrOutput {
	return i.ToPasswordSpecPtrOutputWithContext(context.Background())
}

func (i *passwordSpecPtrType) ToPasswordSpecPtrOutputWithContext(ctx context.Context) PasswordSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordSpecPtrOutput)
}

// PasswordSpec controls the behavior of the password generator.
type PasswordSpecOutput struct{ *pulumi.OutputState }

func (PasswordSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PasswordSpec)(nil)).Elem()
}

func (o PasswordSpecOutput) ToPasswordSpecOutput() PasswordSpecOutput {
	return o
}

func (o PasswordSpecOutput) ToPasswordSpecOutputWithContext(ctx context.Context) PasswordSpecOutput {
	return o
}

func (o PasswordSpecOutput) ToPasswordSpecPtrOutput() PasswordSpecPtrOutput {
	return o.ToPasswordSpecPtrOutputWithContext(context.Background())
}

func (o PasswordSpecOutput) ToPasswordSpecPtrOutputWithContext(ctx context.Context) PasswordSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PasswordSpec) *PasswordSpec {
		return &v
	}).(PasswordSpecPtrOutput)
}

// set AllowRepeat to true to allow repeating characters.
func (o PasswordSpecOutput) AllowRepeat() pulumi.BoolOutput {
	return o.ApplyT(func(v PasswordSpec) bool { return v.AllowRepeat }).(pulumi.BoolOutput)
}

// Digits specifies the number of digits in the generated
// password. If omitted it defaults to 25% of the length of the password
func (o PasswordSpecOutput) Digits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PasswordSpec) *int { return v.Digits }).(pulumi.IntPtrOutput)
}

// Length of the password to be generated.
// Defaults to 24
func (o PasswordSpecOutput) Length() pulumi.IntOutput {
	return o.ApplyT(func(v PasswordSpec) int { return v.Length }).(pulumi.IntOutput)
}

// Set NoUpper to disable uppercase characters
func (o PasswordSpecOutput) NoUpper() pulumi.BoolOutput {
	return o.ApplyT(func(v PasswordSpec) bool { return v.NoUpper }).(pulumi.BoolOutput)
}

// SymbolCharacters specifies the special characters that should be used
// in the generated password.
func (o PasswordSpecOutput) SymbolCharacters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PasswordSpec) *string { return v.SymbolCharacters }).(pulumi.StringPtrOutput)
}

// Symbols specifies the number of symbol characters in the generated
// password. If omitted it defaults to 25% of the length of the password
func (o PasswordSpecOutput) Symbols() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PasswordSpec) *int { return v.Symbols }).(pulumi.IntPtrOutput)
}

type PasswordSpecPtrOutput struct{ *pulumi.OutputState }

func (PasswordSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PasswordSpec)(nil)).Elem()
}

func (o PasswordSpecPtrOutput) ToPasswordSpecPtrOutput() PasswordSpecPtrOutput {
	return o
}

func (o PasswordSpecPtrOutput) ToPasswordSpecPtrOutputWithContext(ctx context.Context) PasswordSpecPtrOutput {
	return o
}

func (o PasswordSpecPtrOutput) Elem() PasswordSpecOutput {
	return o.ApplyT(func(v *PasswordSpec) PasswordSpec {
		if v != nil {
			return *v
		}
		var ret PasswordSpec
		return ret
	}).(PasswordSpecOutput)
}

// set AllowRepeat to true to allow repeating characters.
func (o PasswordSpecPtrOutput) AllowRepeat() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PasswordSpec) *bool {
		if v == nil {
			return nil
		}
		return &v.AllowRepeat
	}).(pulumi.BoolPtrOutput)
}

// Digits specifies the number of digits in the generated
// password. If omitted it defaults to 25% of the length of the password
func (o PasswordSpecPtrOutput) Digits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PasswordSpec) *int {
		if v == nil {
			return nil
		}
		return v.Digits
	}).(pulumi.IntPtrOutput)
}

// Length of the password to be generated.
// Defaults to 24
func (o PasswordSpecPtrOutput) Length() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PasswordSpec) *int {
		if v == nil {
			return nil
		}
		return &v.Length
	}).(pulumi.IntPtrOutput)
}

// Set NoUpper to disable uppercase characters
func (o PasswordSpecPtrOutput) NoUpper() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PasswordSpec) *bool {
		if v == nil {
			return nil
		}
		return &v.NoUpper
	}).(pulumi.BoolPtrOutput)
}

// SymbolCharacters specifies the special characters that should be used
// in the generated password.
func (o PasswordSpecPtrOutput) SymbolCharacters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PasswordSpec) *string {
		if v == nil {
			return nil
		}
		return v.SymbolCharacters
	}).(pulumi.StringPtrOutput)
}

// Symbols specifies the number of symbol characters in the generated
// password. If omitted it defaults to 25% of the length of the password
func (o PasswordSpecPtrOutput) Symbols() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PasswordSpec) *int {
		if v == nil {
			return nil
		}
		return v.Symbols
	}).(pulumi.IntPtrOutput)
}

type VaultDynamicSecretType struct {
	ApiVersion *string                 `pulumi:"apiVersion"`
	Kind       *string                 `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta      `pulumi:"metadata"`
	Spec       *VaultDynamicSecretSpec `pulumi:"spec"`
}

// Defaults sets the appropriate defaults for VaultDynamicSecretType
func (val *VaultDynamicSecretType) Defaults() *VaultDynamicSecretType {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Spec = tmp.Spec.Defaults()

	return &tmp
}

type VaultDynamicSecretMetadata struct {
}

type VaultDynamicSecretSpec struct {
	// Used to select the correct ESO controller (think: ingress.ingressClassName)
	// The ESO controller is instantiated with a specific controller name and filters VDS based on this property
	Controller *string `pulumi:"controller"`
	// Vault API method to use (GET/POST/other)
	Method *string `pulumi:"method"`
	// Parameters to pass to Vault write (for non-GET methods)
	Parameters map[string]interface{} `pulumi:"parameters"`
	// Vault path to obtain the dynamic secret from
	Path string `pulumi:"path"`
	// Vault provider common spec
	Provider VaultDynamicSecretSpecProvider `pulumi:"provider"`
	// Result type defines which data is returned from the generator.
	// By default it is the "data" section of the Vault API response.
	// When using e.g. /auth/token/create the "data" section is empty but
	// the "auth" section contains the generated token.
	// Please refer to the vault docs regarding the result data structure.
	ResultType *string `pulumi:"resultType"`
}

// Defaults sets the appropriate defaults for VaultDynamicSecretSpec
func (val *VaultDynamicSecretSpec) Defaults() *VaultDynamicSecretSpec {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Provider = *tmp.Provider.Defaults()

	if tmp.ResultType == nil {
		resultType_ := "Data"
		tmp.ResultType = &resultType_
	}
	return &tmp
}

// VaultDynamicSecretSpecInput is an input type that accepts VaultDynamicSecretSpecArgs and VaultDynamicSecretSpecOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecInput` via:
//
//	VaultDynamicSecretSpecArgs{...}
type VaultDynamicSecretSpecInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecOutput() VaultDynamicSecretSpecOutput
	ToVaultDynamicSecretSpecOutputWithContext(context.Context) VaultDynamicSecretSpecOutput
}

type VaultDynamicSecretSpecArgs struct {
	// Used to select the correct ESO controller (think: ingress.ingressClassName)
	// The ESO controller is instantiated with a specific controller name and filters VDS based on this property
	Controller pulumi.StringPtrInput `pulumi:"controller"`
	// Vault API method to use (GET/POST/other)
	Method pulumi.StringPtrInput `pulumi:"method"`
	// Parameters to pass to Vault write (for non-GET methods)
	Parameters pulumi.MapInput `pulumi:"parameters"`
	// Vault path to obtain the dynamic secret from
	Path pulumi.StringInput `pulumi:"path"`
	// Vault provider common spec
	Provider VaultDynamicSecretSpecProviderInput `pulumi:"provider"`
	// Result type defines which data is returned from the generator.
	// By default it is the "data" section of the Vault API response.
	// When using e.g. /auth/token/create the "data" section is empty but
	// the "auth" section contains the generated token.
	// Please refer to the vault docs regarding the result data structure.
	ResultType pulumi.StringPtrInput `pulumi:"resultType"`
}

// Defaults sets the appropriate defaults for VaultDynamicSecretSpecArgs
func (val *VaultDynamicSecretSpecArgs) Defaults() *VaultDynamicSecretSpecArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.ResultType == nil {
		tmp.ResultType = pulumi.StringPtr("Data")
	}
	return &tmp
}
func (VaultDynamicSecretSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpec)(nil)).Elem()
}

func (i VaultDynamicSecretSpecArgs) ToVaultDynamicSecretSpecOutput() VaultDynamicSecretSpecOutput {
	return i.ToVaultDynamicSecretSpecOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecArgs) ToVaultDynamicSecretSpecOutputWithContext(ctx context.Context) VaultDynamicSecretSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecOutput)
}

func (i VaultDynamicSecretSpecArgs) ToVaultDynamicSecretSpecPtrOutput() VaultDynamicSecretSpecPtrOutput {
	return i.ToVaultDynamicSecretSpecPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecArgs) ToVaultDynamicSecretSpecPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecOutput).ToVaultDynamicSecretSpecPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecPtrInput is an input type that accepts VaultDynamicSecretSpecArgs, VaultDynamicSecretSpecPtr and VaultDynamicSecretSpecPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecPtrInput` via:
//
//	        VaultDynamicSecretSpecArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecPtrOutput() VaultDynamicSecretSpecPtrOutput
	ToVaultDynamicSecretSpecPtrOutputWithContext(context.Context) VaultDynamicSecretSpecPtrOutput
}

type vaultDynamicSecretSpecPtrType VaultDynamicSecretSpecArgs

func VaultDynamicSecretSpecPtr(v *VaultDynamicSecretSpecArgs) VaultDynamicSecretSpecPtrInput {
	return (*vaultDynamicSecretSpecPtrType)(v)
}

func (*vaultDynamicSecretSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpec)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecPtrType) ToVaultDynamicSecretSpecPtrOutput() VaultDynamicSecretSpecPtrOutput {
	return i.ToVaultDynamicSecretSpecPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecPtrType) ToVaultDynamicSecretSpecPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecPtrOutput)
}

type VaultDynamicSecretSpecOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpec)(nil)).Elem()
}

func (o VaultDynamicSecretSpecOutput) ToVaultDynamicSecretSpecOutput() VaultDynamicSecretSpecOutput {
	return o
}

func (o VaultDynamicSecretSpecOutput) ToVaultDynamicSecretSpecOutputWithContext(ctx context.Context) VaultDynamicSecretSpecOutput {
	return o
}

func (o VaultDynamicSecretSpecOutput) ToVaultDynamicSecretSpecPtrOutput() VaultDynamicSecretSpecPtrOutput {
	return o.ToVaultDynamicSecretSpecPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecOutput) ToVaultDynamicSecretSpecPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpec) *VaultDynamicSecretSpec {
		return &v
	}).(VaultDynamicSecretSpecPtrOutput)
}

// Used to select the correct ESO controller (think: ingress.ingressClassName)
// The ESO controller is instantiated with a specific controller name and filters VDS based on this property
func (o VaultDynamicSecretSpecOutput) Controller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpec) *string { return v.Controller }).(pulumi.StringPtrOutput)
}

// Vault API method to use (GET/POST/other)
func (o VaultDynamicSecretSpecOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpec) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// Parameters to pass to Vault write (for non-GET methods)
func (o VaultDynamicSecretSpecOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpec) map[string]interface{} { return v.Parameters }).(pulumi.MapOutput)
}

// Vault path to obtain the dynamic secret from
func (o VaultDynamicSecretSpecOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpec) string { return v.Path }).(pulumi.StringOutput)
}

// Vault provider common spec
func (o VaultDynamicSecretSpecOutput) Provider() VaultDynamicSecretSpecProviderOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpec) VaultDynamicSecretSpecProvider { return v.Provider }).(VaultDynamicSecretSpecProviderOutput)
}

// Result type defines which data is returned from the generator.
// By default it is the "data" section of the Vault API response.
// When using e.g. /auth/token/create the "data" section is empty but
// the "auth" section contains the generated token.
// Please refer to the vault docs regarding the result data structure.
func (o VaultDynamicSecretSpecOutput) ResultType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpec) *string { return v.ResultType }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpec)(nil)).Elem()
}

func (o VaultDynamicSecretSpecPtrOutput) ToVaultDynamicSecretSpecPtrOutput() VaultDynamicSecretSpecPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecPtrOutput) ToVaultDynamicSecretSpecPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecPtrOutput) Elem() VaultDynamicSecretSpecOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpec) VaultDynamicSecretSpec {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpec
		return ret
	}).(VaultDynamicSecretSpecOutput)
}

// Used to select the correct ESO controller (think: ingress.ingressClassName)
// The ESO controller is instantiated with a specific controller name and filters VDS based on this property
func (o VaultDynamicSecretSpecPtrOutput) Controller() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpec) *string {
		if v == nil {
			return nil
		}
		return v.Controller
	}).(pulumi.StringPtrOutput)
}

// Vault API method to use (GET/POST/other)
func (o VaultDynamicSecretSpecPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpec) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// Parameters to pass to Vault write (for non-GET methods)
func (o VaultDynamicSecretSpecPtrOutput) Parameters() pulumi.MapOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Parameters
	}).(pulumi.MapOutput)
}

// Vault path to obtain the dynamic secret from
func (o VaultDynamicSecretSpecPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// Vault provider common spec
func (o VaultDynamicSecretSpecPtrOutput) Provider() VaultDynamicSecretSpecProviderPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpec) *VaultDynamicSecretSpecProvider {
		if v == nil {
			return nil
		}
		return &v.Provider
	}).(VaultDynamicSecretSpecProviderPtrOutput)
}

// Result type defines which data is returned from the generator.
// By default it is the "data" section of the Vault API response.
// When using e.g. /auth/token/create the "data" section is empty but
// the "auth" section contains the generated token.
// Please refer to the vault docs regarding the result data structure.
func (o VaultDynamicSecretSpecPtrOutput) ResultType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpec) *string {
		if v == nil {
			return nil
		}
		return v.ResultType
	}).(pulumi.StringPtrOutput)
}

// Vault provider common spec
type VaultDynamicSecretSpecProvider struct {
	// Auth configures how secret-manager authenticates with the Vault server.
	Auth VaultDynamicSecretSpecProviderAuth `pulumi:"auth"`
	// PEM encoded CA bundle used to validate Vault server certificate. Only used
	// if the Server URL is using HTTPS protocol. This parameter is ignored for
	// plain HTTP protocol connection. If not set the system root certificates
	// are used to validate the TLS connection.
	CaBundle *string `pulumi:"caBundle"`
	// The provider for the CA bundle to use to validate Vault server certificate.
	CaProvider *VaultDynamicSecretSpecProviderCaProvider `pulumi:"caProvider"`
	// ForwardInconsistent tells Vault to forward read-after-write requests to the Vault
	// leader instead of simply retrying within a loop. This can increase performance if
	// the option is enabled serverside.
	// https://www.vaultproject.io/docs/configuration/replication#allow_forwarding_via_header
	ForwardInconsistent *bool `pulumi:"forwardInconsistent"`
	// Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows
	// Vault environments to support Secure Multi-tenancy. e.g: "ns1".
	// More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
	Namespace *string `pulumi:"namespace"`
	// Path is the mount path of the Vault KV backend endpoint, e.g:
	// "secret". The v2 KV secret engine version specific "/data" path suffix
	// for fetching secrets from Vault is optional and will be appended
	// if not present in specified path.
	Path *string `pulumi:"path"`
	// ReadYourWrites ensures isolated read-after-write semantics by
	// providing discovered cluster replication states in each request.
	// More information about eventual consistency in Vault can be found here
	// https://www.vaultproject.io/docs/enterprise/consistency
	ReadYourWrites *bool `pulumi:"readYourWrites"`
	// Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
	Server string `pulumi:"server"`
	// The configuration used for client side related TLS communication, when the Vault server
	// requires mutual authentication. Only used if the Server URL is using HTTPS protocol.
	// This parameter is ignored for plain HTTP protocol connection.
	// It's worth noting this configuration is different from the "TLS certificates auth method",
	// which is available under the `auth.cert` section.
	Tls *VaultDynamicSecretSpecProviderTls `pulumi:"tls"`
	// Version is the Vault KV secret engine version. This can be either "v1" or
	// "v2". Version defaults to "v2".
	Version *string `pulumi:"version"`
}

// Defaults sets the appropriate defaults for VaultDynamicSecretSpecProvider
func (val *VaultDynamicSecretSpecProvider) Defaults() *VaultDynamicSecretSpecProvider {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Auth = *tmp.Auth.Defaults()

	if tmp.Version == nil {
		version_ := "v2"
		tmp.Version = &version_
	}
	return &tmp
}

// VaultDynamicSecretSpecProviderInput is an input type that accepts VaultDynamicSecretSpecProviderArgs and VaultDynamicSecretSpecProviderOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderInput` via:
//
//	VaultDynamicSecretSpecProviderArgs{...}
type VaultDynamicSecretSpecProviderInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderOutput() VaultDynamicSecretSpecProviderOutput
	ToVaultDynamicSecretSpecProviderOutputWithContext(context.Context) VaultDynamicSecretSpecProviderOutput
}

// Vault provider common spec
type VaultDynamicSecretSpecProviderArgs struct {
	// Auth configures how secret-manager authenticates with the Vault server.
	Auth VaultDynamicSecretSpecProviderAuthInput `pulumi:"auth"`
	// PEM encoded CA bundle used to validate Vault server certificate. Only used
	// if the Server URL is using HTTPS protocol. This parameter is ignored for
	// plain HTTP protocol connection. If not set the system root certificates
	// are used to validate the TLS connection.
	CaBundle pulumi.StringPtrInput `pulumi:"caBundle"`
	// The provider for the CA bundle to use to validate Vault server certificate.
	CaProvider VaultDynamicSecretSpecProviderCaProviderPtrInput `pulumi:"caProvider"`
	// ForwardInconsistent tells Vault to forward read-after-write requests to the Vault
	// leader instead of simply retrying within a loop. This can increase performance if
	// the option is enabled serverside.
	// https://www.vaultproject.io/docs/configuration/replication#allow_forwarding_via_header
	ForwardInconsistent pulumi.BoolPtrInput `pulumi:"forwardInconsistent"`
	// Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows
	// Vault environments to support Secure Multi-tenancy. e.g: "ns1".
	// More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Path is the mount path of the Vault KV backend endpoint, e.g:
	// "secret". The v2 KV secret engine version specific "/data" path suffix
	// for fetching secrets from Vault is optional and will be appended
	// if not present in specified path.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// ReadYourWrites ensures isolated read-after-write semantics by
	// providing discovered cluster replication states in each request.
	// More information about eventual consistency in Vault can be found here
	// https://www.vaultproject.io/docs/enterprise/consistency
	ReadYourWrites pulumi.BoolPtrInput `pulumi:"readYourWrites"`
	// Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
	Server pulumi.StringInput `pulumi:"server"`
	// The configuration used for client side related TLS communication, when the Vault server
	// requires mutual authentication. Only used if the Server URL is using HTTPS protocol.
	// This parameter is ignored for plain HTTP protocol connection.
	// It's worth noting this configuration is different from the "TLS certificates auth method",
	// which is available under the `auth.cert` section.
	Tls VaultDynamicSecretSpecProviderTlsPtrInput `pulumi:"tls"`
	// Version is the Vault KV secret engine version. This can be either "v1" or
	// "v2". Version defaults to "v2".
	Version pulumi.StringPtrInput `pulumi:"version"`
}

// Defaults sets the appropriate defaults for VaultDynamicSecretSpecProviderArgs
func (val *VaultDynamicSecretSpecProviderArgs) Defaults() *VaultDynamicSecretSpecProviderArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.Version == nil {
		tmp.Version = pulumi.StringPtr("v2")
	}
	return &tmp
}
func (VaultDynamicSecretSpecProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProvider)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderArgs) ToVaultDynamicSecretSpecProviderOutput() VaultDynamicSecretSpecProviderOutput {
	return i.ToVaultDynamicSecretSpecProviderOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderArgs) ToVaultDynamicSecretSpecProviderOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderOutput)
}

func (i VaultDynamicSecretSpecProviderArgs) ToVaultDynamicSecretSpecProviderPtrOutput() VaultDynamicSecretSpecProviderPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderArgs) ToVaultDynamicSecretSpecProviderPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderOutput).ToVaultDynamicSecretSpecProviderPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderPtrInput is an input type that accepts VaultDynamicSecretSpecProviderArgs, VaultDynamicSecretSpecProviderPtr and VaultDynamicSecretSpecProviderPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderPtrOutput() VaultDynamicSecretSpecProviderPtrOutput
	ToVaultDynamicSecretSpecProviderPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderPtrOutput
}

type vaultDynamicSecretSpecProviderPtrType VaultDynamicSecretSpecProviderArgs

func VaultDynamicSecretSpecProviderPtr(v *VaultDynamicSecretSpecProviderArgs) VaultDynamicSecretSpecProviderPtrInput {
	return (*vaultDynamicSecretSpecProviderPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProvider)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderPtrType) ToVaultDynamicSecretSpecProviderPtrOutput() VaultDynamicSecretSpecProviderPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderPtrType) ToVaultDynamicSecretSpecProviderPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderPtrOutput)
}

// Vault provider common spec
type VaultDynamicSecretSpecProviderOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProvider)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderOutput) ToVaultDynamicSecretSpecProviderOutput() VaultDynamicSecretSpecProviderOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderOutput) ToVaultDynamicSecretSpecProviderOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderOutput) ToVaultDynamicSecretSpecProviderPtrOutput() VaultDynamicSecretSpecProviderPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderOutput) ToVaultDynamicSecretSpecProviderPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProvider) *VaultDynamicSecretSpecProvider {
		return &v
	}).(VaultDynamicSecretSpecProviderPtrOutput)
}

// Auth configures how secret-manager authenticates with the Vault server.
func (o VaultDynamicSecretSpecProviderOutput) Auth() VaultDynamicSecretSpecProviderAuthOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProvider) VaultDynamicSecretSpecProviderAuth { return v.Auth }).(VaultDynamicSecretSpecProviderAuthOutput)
}

// PEM encoded CA bundle used to validate Vault server certificate. Only used
// if the Server URL is using HTTPS protocol. This parameter is ignored for
// plain HTTP protocol connection. If not set the system root certificates
// are used to validate the TLS connection.
func (o VaultDynamicSecretSpecProviderOutput) CaBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProvider) *string { return v.CaBundle }).(pulumi.StringPtrOutput)
}

// The provider for the CA bundle to use to validate Vault server certificate.
func (o VaultDynamicSecretSpecProviderOutput) CaProvider() VaultDynamicSecretSpecProviderCaProviderPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProvider) *VaultDynamicSecretSpecProviderCaProvider { return v.CaProvider }).(VaultDynamicSecretSpecProviderCaProviderPtrOutput)
}

// ForwardInconsistent tells Vault to forward read-after-write requests to the Vault
// leader instead of simply retrying within a loop. This can increase performance if
// the option is enabled serverside.
// https://www.vaultproject.io/docs/configuration/replication#allow_forwarding_via_header
func (o VaultDynamicSecretSpecProviderOutput) ForwardInconsistent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProvider) *bool { return v.ForwardInconsistent }).(pulumi.BoolPtrOutput)
}

// Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows
// Vault environments to support Secure Multi-tenancy. e.g: "ns1".
// More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
func (o VaultDynamicSecretSpecProviderOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProvider) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Path is the mount path of the Vault KV backend endpoint, e.g:
// "secret". The v2 KV secret engine version specific "/data" path suffix
// for fetching secrets from Vault is optional and will be appended
// if not present in specified path.
func (o VaultDynamicSecretSpecProviderOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProvider) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// ReadYourWrites ensures isolated read-after-write semantics by
// providing discovered cluster replication states in each request.
// More information about eventual consistency in Vault can be found here
// https://www.vaultproject.io/docs/enterprise/consistency
func (o VaultDynamicSecretSpecProviderOutput) ReadYourWrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProvider) *bool { return v.ReadYourWrites }).(pulumi.BoolPtrOutput)
}

// Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
func (o VaultDynamicSecretSpecProviderOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProvider) string { return v.Server }).(pulumi.StringOutput)
}

// The configuration used for client side related TLS communication, when the Vault server
// requires mutual authentication. Only used if the Server URL is using HTTPS protocol.
// This parameter is ignored for plain HTTP protocol connection.
// It's worth noting this configuration is different from the "TLS certificates auth method",
// which is available under the `auth.cert` section.
func (o VaultDynamicSecretSpecProviderOutput) Tls() VaultDynamicSecretSpecProviderTlsPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProvider) *VaultDynamicSecretSpecProviderTls { return v.Tls }).(VaultDynamicSecretSpecProviderTlsPtrOutput)
}

// Version is the Vault KV secret engine version. This can be either "v1" or
// "v2". Version defaults to "v2".
func (o VaultDynamicSecretSpecProviderOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProvider) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProvider)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderPtrOutput) ToVaultDynamicSecretSpecProviderPtrOutput() VaultDynamicSecretSpecProviderPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderPtrOutput) ToVaultDynamicSecretSpecProviderPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderPtrOutput) Elem() VaultDynamicSecretSpecProviderOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProvider) VaultDynamicSecretSpecProvider {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProvider
		return ret
	}).(VaultDynamicSecretSpecProviderOutput)
}

// Auth configures how secret-manager authenticates with the Vault server.
func (o VaultDynamicSecretSpecProviderPtrOutput) Auth() VaultDynamicSecretSpecProviderAuthPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProvider) *VaultDynamicSecretSpecProviderAuth {
		if v == nil {
			return nil
		}
		return &v.Auth
	}).(VaultDynamicSecretSpecProviderAuthPtrOutput)
}

// PEM encoded CA bundle used to validate Vault server certificate. Only used
// if the Server URL is using HTTPS protocol. This parameter is ignored for
// plain HTTP protocol connection. If not set the system root certificates
// are used to validate the TLS connection.
func (o VaultDynamicSecretSpecProviderPtrOutput) CaBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProvider) *string {
		if v == nil {
			return nil
		}
		return v.CaBundle
	}).(pulumi.StringPtrOutput)
}

// The provider for the CA bundle to use to validate Vault server certificate.
func (o VaultDynamicSecretSpecProviderPtrOutput) CaProvider() VaultDynamicSecretSpecProviderCaProviderPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProvider) *VaultDynamicSecretSpecProviderCaProvider {
		if v == nil {
			return nil
		}
		return v.CaProvider
	}).(VaultDynamicSecretSpecProviderCaProviderPtrOutput)
}

// ForwardInconsistent tells Vault to forward read-after-write requests to the Vault
// leader instead of simply retrying within a loop. This can increase performance if
// the option is enabled serverside.
// https://www.vaultproject.io/docs/configuration/replication#allow_forwarding_via_header
func (o VaultDynamicSecretSpecProviderPtrOutput) ForwardInconsistent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProvider) *bool {
		if v == nil {
			return nil
		}
		return v.ForwardInconsistent
	}).(pulumi.BoolPtrOutput)
}

// Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows
// Vault environments to support Secure Multi-tenancy. e.g: "ns1".
// More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
func (o VaultDynamicSecretSpecProviderPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProvider) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Path is the mount path of the Vault KV backend endpoint, e.g:
// "secret". The v2 KV secret engine version specific "/data" path suffix
// for fetching secrets from Vault is optional and will be appended
// if not present in specified path.
func (o VaultDynamicSecretSpecProviderPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProvider) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// ReadYourWrites ensures isolated read-after-write semantics by
// providing discovered cluster replication states in each request.
// More information about eventual consistency in Vault can be found here
// https://www.vaultproject.io/docs/enterprise/consistency
func (o VaultDynamicSecretSpecProviderPtrOutput) ReadYourWrites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProvider) *bool {
		if v == nil {
			return nil
		}
		return v.ReadYourWrites
	}).(pulumi.BoolPtrOutput)
}

// Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
func (o VaultDynamicSecretSpecProviderPtrOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProvider) *string {
		if v == nil {
			return nil
		}
		return &v.Server
	}).(pulumi.StringPtrOutput)
}

// The configuration used for client side related TLS communication, when the Vault server
// requires mutual authentication. Only used if the Server URL is using HTTPS protocol.
// This parameter is ignored for plain HTTP protocol connection.
// It's worth noting this configuration is different from the "TLS certificates auth method",
// which is available under the `auth.cert` section.
func (o VaultDynamicSecretSpecProviderPtrOutput) Tls() VaultDynamicSecretSpecProviderTlsPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProvider) *VaultDynamicSecretSpecProviderTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(VaultDynamicSecretSpecProviderTlsPtrOutput)
}

// Version is the Vault KV secret engine version. This can be either "v1" or
// "v2". Version defaults to "v2".
func (o VaultDynamicSecretSpecProviderPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProvider) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Auth configures how secret-manager authenticates with the Vault server.
type VaultDynamicSecretSpecProviderAuth struct {
	// AppRole authenticates with Vault using the App Role auth mechanism,
	// with the role and secret stored in a Kubernetes Secret resource.
	AppRole *VaultDynamicSecretSpecProviderAuthAppRole `pulumi:"appRole"`
	// Cert authenticates with TLS Certificates by passing client certificate, private key and ca certificate
	// Cert authentication method
	Cert *VaultDynamicSecretSpecProviderAuthCert `pulumi:"cert"`
	// Iam authenticates with vault by passing a special AWS request signed with AWS IAM credentials
	// AWS IAM authentication method
	Iam *VaultDynamicSecretSpecProviderAuthIam `pulumi:"iam"`
	// Jwt authenticates with Vault by passing role and JWT token using the
	// JWT/OIDC authentication method
	Jwt *VaultDynamicSecretSpecProviderAuthJwt `pulumi:"jwt"`
	// Kubernetes authenticates with Vault by passing the ServiceAccount
	// token stored in the named Secret resource to the Vault server.
	Kubernetes *VaultDynamicSecretSpecProviderAuthKubernetes `pulumi:"kubernetes"`
	// Ldap authenticates with Vault by passing username/password pair using
	// the LDAP authentication method
	Ldap *VaultDynamicSecretSpecProviderAuthLdap `pulumi:"ldap"`
	// Name of the vault namespace to authenticate to. This can be different than the namespace your secret is in.
	// Namespaces is a set of features within Vault Enterprise that allows
	// Vault environments to support Secure Multi-tenancy. e.g: "ns1".
	// More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
	// This will default to Vault.Namespace field if set, or empty otherwise
	Namespace *string `pulumi:"namespace"`
	// TokenSecretRef authenticates with Vault by presenting a token.
	TokenSecretRef *VaultDynamicSecretSpecProviderAuthTokenSecretRef `pulumi:"tokenSecretRef"`
	// UserPass authenticates with Vault by passing username/password pair
	UserPass *VaultDynamicSecretSpecProviderAuthUserPass `pulumi:"userPass"`
}

// Defaults sets the appropriate defaults for VaultDynamicSecretSpecProviderAuth
func (val *VaultDynamicSecretSpecProviderAuth) Defaults() *VaultDynamicSecretSpecProviderAuth {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AppRole = tmp.AppRole.Defaults()

	tmp.Jwt = tmp.Jwt.Defaults()

	tmp.Kubernetes = tmp.Kubernetes.Defaults()

	tmp.Ldap = tmp.Ldap.Defaults()

	tmp.UserPass = tmp.UserPass.Defaults()

	return &tmp
}

// VaultDynamicSecretSpecProviderAuthInput is an input type that accepts VaultDynamicSecretSpecProviderAuthArgs and VaultDynamicSecretSpecProviderAuthOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthInput` via:
//
//	VaultDynamicSecretSpecProviderAuthArgs{...}
type VaultDynamicSecretSpecProviderAuthInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthOutput() VaultDynamicSecretSpecProviderAuthOutput
	ToVaultDynamicSecretSpecProviderAuthOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthOutput
}

// Auth configures how secret-manager authenticates with the Vault server.
type VaultDynamicSecretSpecProviderAuthArgs struct {
	// AppRole authenticates with Vault using the App Role auth mechanism,
	// with the role and secret stored in a Kubernetes Secret resource.
	AppRole VaultDynamicSecretSpecProviderAuthAppRolePtrInput `pulumi:"appRole"`
	// Cert authenticates with TLS Certificates by passing client certificate, private key and ca certificate
	// Cert authentication method
	Cert VaultDynamicSecretSpecProviderAuthCertPtrInput `pulumi:"cert"`
	// Iam authenticates with vault by passing a special AWS request signed with AWS IAM credentials
	// AWS IAM authentication method
	Iam VaultDynamicSecretSpecProviderAuthIamPtrInput `pulumi:"iam"`
	// Jwt authenticates with Vault by passing role and JWT token using the
	// JWT/OIDC authentication method
	Jwt VaultDynamicSecretSpecProviderAuthJwtPtrInput `pulumi:"jwt"`
	// Kubernetes authenticates with Vault by passing the ServiceAccount
	// token stored in the named Secret resource to the Vault server.
	Kubernetes VaultDynamicSecretSpecProviderAuthKubernetesPtrInput `pulumi:"kubernetes"`
	// Ldap authenticates with Vault by passing username/password pair using
	// the LDAP authentication method
	Ldap VaultDynamicSecretSpecProviderAuthLdapPtrInput `pulumi:"ldap"`
	// Name of the vault namespace to authenticate to. This can be different than the namespace your secret is in.
	// Namespaces is a set of features within Vault Enterprise that allows
	// Vault environments to support Secure Multi-tenancy. e.g: "ns1".
	// More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
	// This will default to Vault.Namespace field if set, or empty otherwise
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// TokenSecretRef authenticates with Vault by presenting a token.
	TokenSecretRef VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrInput `pulumi:"tokenSecretRef"`
	// UserPass authenticates with Vault by passing username/password pair
	UserPass VaultDynamicSecretSpecProviderAuthUserPassPtrInput `pulumi:"userPass"`
}

// Defaults sets the appropriate defaults for VaultDynamicSecretSpecProviderAuthArgs
func (val *VaultDynamicSecretSpecProviderAuthArgs) Defaults() *VaultDynamicSecretSpecProviderAuthArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (VaultDynamicSecretSpecProviderAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuth)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthArgs) ToVaultDynamicSecretSpecProviderAuthOutput() VaultDynamicSecretSpecProviderAuthOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthArgs) ToVaultDynamicSecretSpecProviderAuthOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthOutput)
}

func (i VaultDynamicSecretSpecProviderAuthArgs) ToVaultDynamicSecretSpecProviderAuthPtrOutput() VaultDynamicSecretSpecProviderAuthPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthArgs) ToVaultDynamicSecretSpecProviderAuthPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthOutput).ToVaultDynamicSecretSpecProviderAuthPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthArgs, VaultDynamicSecretSpecProviderAuthPtr and VaultDynamicSecretSpecProviderAuthPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthPtrOutput() VaultDynamicSecretSpecProviderAuthPtrOutput
	ToVaultDynamicSecretSpecProviderAuthPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthPtrOutput
}

type vaultDynamicSecretSpecProviderAuthPtrType VaultDynamicSecretSpecProviderAuthArgs

func VaultDynamicSecretSpecProviderAuthPtr(v *VaultDynamicSecretSpecProviderAuthArgs) VaultDynamicSecretSpecProviderAuthPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuth)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthPtrType) ToVaultDynamicSecretSpecProviderAuthPtrOutput() VaultDynamicSecretSpecProviderAuthPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthPtrType) ToVaultDynamicSecretSpecProviderAuthPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthPtrOutput)
}

// Auth configures how secret-manager authenticates with the Vault server.
type VaultDynamicSecretSpecProviderAuthOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuth)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthOutput) ToVaultDynamicSecretSpecProviderAuthOutput() VaultDynamicSecretSpecProviderAuthOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthOutput) ToVaultDynamicSecretSpecProviderAuthOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthOutput) ToVaultDynamicSecretSpecProviderAuthPtrOutput() VaultDynamicSecretSpecProviderAuthPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthOutput) ToVaultDynamicSecretSpecProviderAuthPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuth {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthPtrOutput)
}

// AppRole authenticates with Vault using the App Role auth mechanism,
// with the role and secret stored in a Kubernetes Secret resource.
func (o VaultDynamicSecretSpecProviderAuthOutput) AppRole() VaultDynamicSecretSpecProviderAuthAppRolePtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthAppRole {
		return v.AppRole
	}).(VaultDynamicSecretSpecProviderAuthAppRolePtrOutput)
}

// Cert authenticates with TLS Certificates by passing client certificate, private key and ca certificate
// Cert authentication method
func (o VaultDynamicSecretSpecProviderAuthOutput) Cert() VaultDynamicSecretSpecProviderAuthCertPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthCert { return v.Cert }).(VaultDynamicSecretSpecProviderAuthCertPtrOutput)
}

// Iam authenticates with vault by passing a special AWS request signed with AWS IAM credentials
// AWS IAM authentication method
func (o VaultDynamicSecretSpecProviderAuthOutput) Iam() VaultDynamicSecretSpecProviderAuthIamPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthIam { return v.Iam }).(VaultDynamicSecretSpecProviderAuthIamPtrOutput)
}

// Jwt authenticates with Vault by passing role and JWT token using the
// JWT/OIDC authentication method
func (o VaultDynamicSecretSpecProviderAuthOutput) Jwt() VaultDynamicSecretSpecProviderAuthJwtPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthJwt { return v.Jwt }).(VaultDynamicSecretSpecProviderAuthJwtPtrOutput)
}

// Kubernetes authenticates with Vault by passing the ServiceAccount
// token stored in the named Secret resource to the Vault server.
func (o VaultDynamicSecretSpecProviderAuthOutput) Kubernetes() VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthKubernetes {
		return v.Kubernetes
	}).(VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput)
}

// Ldap authenticates with Vault by passing username/password pair using
// the LDAP authentication method
func (o VaultDynamicSecretSpecProviderAuthOutput) Ldap() VaultDynamicSecretSpecProviderAuthLdapPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthLdap { return v.Ldap }).(VaultDynamicSecretSpecProviderAuthLdapPtrOutput)
}

// Name of the vault namespace to authenticate to. This can be different than the namespace your secret is in.
// Namespaces is a set of features within Vault Enterprise that allows
// Vault environments to support Secure Multi-tenancy. e.g: "ns1".
// More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
// This will default to Vault.Namespace field if set, or empty otherwise
func (o VaultDynamicSecretSpecProviderAuthOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuth) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// TokenSecretRef authenticates with Vault by presenting a token.
func (o VaultDynamicSecretSpecProviderAuthOutput) TokenSecretRef() VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthTokenSecretRef {
		return v.TokenSecretRef
	}).(VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput)
}

// UserPass authenticates with Vault by passing username/password pair
func (o VaultDynamicSecretSpecProviderAuthOutput) UserPass() VaultDynamicSecretSpecProviderAuthUserPassPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthUserPass {
		return v.UserPass
	}).(VaultDynamicSecretSpecProviderAuthUserPassPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuth)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthPtrOutput) ToVaultDynamicSecretSpecProviderAuthPtrOutput() VaultDynamicSecretSpecProviderAuthPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthPtrOutput) ToVaultDynamicSecretSpecProviderAuthPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuth) VaultDynamicSecretSpecProviderAuth {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuth
		return ret
	}).(VaultDynamicSecretSpecProviderAuthOutput)
}

// AppRole authenticates with Vault using the App Role auth mechanism,
// with the role and secret stored in a Kubernetes Secret resource.
func (o VaultDynamicSecretSpecProviderAuthPtrOutput) AppRole() VaultDynamicSecretSpecProviderAuthAppRolePtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthAppRole {
		if v == nil {
			return nil
		}
		return v.AppRole
	}).(VaultDynamicSecretSpecProviderAuthAppRolePtrOutput)
}

// Cert authenticates with TLS Certificates by passing client certificate, private key and ca certificate
// Cert authentication method
func (o VaultDynamicSecretSpecProviderAuthPtrOutput) Cert() VaultDynamicSecretSpecProviderAuthCertPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthCert {
		if v == nil {
			return nil
		}
		return v.Cert
	}).(VaultDynamicSecretSpecProviderAuthCertPtrOutput)
}

// Iam authenticates with vault by passing a special AWS request signed with AWS IAM credentials
// AWS IAM authentication method
func (o VaultDynamicSecretSpecProviderAuthPtrOutput) Iam() VaultDynamicSecretSpecProviderAuthIamPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthIam {
		if v == nil {
			return nil
		}
		return v.Iam
	}).(VaultDynamicSecretSpecProviderAuthIamPtrOutput)
}

// Jwt authenticates with Vault by passing role and JWT token using the
// JWT/OIDC authentication method
func (o VaultDynamicSecretSpecProviderAuthPtrOutput) Jwt() VaultDynamicSecretSpecProviderAuthJwtPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthJwt {
		if v == nil {
			return nil
		}
		return v.Jwt
	}).(VaultDynamicSecretSpecProviderAuthJwtPtrOutput)
}

// Kubernetes authenticates with Vault by passing the ServiceAccount
// token stored in the named Secret resource to the Vault server.
func (o VaultDynamicSecretSpecProviderAuthPtrOutput) Kubernetes() VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthKubernetes {
		if v == nil {
			return nil
		}
		return v.Kubernetes
	}).(VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput)
}

// Ldap authenticates with Vault by passing username/password pair using
// the LDAP authentication method
func (o VaultDynamicSecretSpecProviderAuthPtrOutput) Ldap() VaultDynamicSecretSpecProviderAuthLdapPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthLdap {
		if v == nil {
			return nil
		}
		return v.Ldap
	}).(VaultDynamicSecretSpecProviderAuthLdapPtrOutput)
}

// Name of the vault namespace to authenticate to. This can be different than the namespace your secret is in.
// Namespaces is a set of features within Vault Enterprise that allows
// Vault environments to support Secure Multi-tenancy. e.g: "ns1".
// More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
// This will default to Vault.Namespace field if set, or empty otherwise
func (o VaultDynamicSecretSpecProviderAuthPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuth) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// TokenSecretRef authenticates with Vault by presenting a token.
func (o VaultDynamicSecretSpecProviderAuthPtrOutput) TokenSecretRef() VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthTokenSecretRef {
		if v == nil {
			return nil
		}
		return v.TokenSecretRef
	}).(VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput)
}

// UserPass authenticates with Vault by passing username/password pair
func (o VaultDynamicSecretSpecProviderAuthPtrOutput) UserPass() VaultDynamicSecretSpecProviderAuthUserPassPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuth) *VaultDynamicSecretSpecProviderAuthUserPass {
		if v == nil {
			return nil
		}
		return v.UserPass
	}).(VaultDynamicSecretSpecProviderAuthUserPassPtrOutput)
}

// AppRole authenticates with Vault using the App Role auth mechanism,
// with the role and secret stored in a Kubernetes Secret resource.
type VaultDynamicSecretSpecProviderAuthAppRole struct {
	// Path where the App Role authentication backend is mounted
	// in Vault, e.g: "approle"
	Path string `pulumi:"path"`
	// RoleID configured in the App Role authentication backend when setting
	// up the authentication backend in Vault.
	RoleId *string `pulumi:"roleId"`
	// Reference to a key in a Secret that contains the App Role ID used
	// to authenticate with Vault.
	// The `key` field must be specified and denotes which entry within the Secret
	// resource is used as the app role id.
	RoleRef *VaultDynamicSecretSpecProviderAuthAppRoleRoleRef `pulumi:"roleRef"`
	// Reference to a key in a Secret that contains the App Role secret used
	// to authenticate with Vault.
	// The `key` field must be specified and denotes which entry within the Secret
	// resource is used as the app role secret.
	SecretRef VaultDynamicSecretSpecProviderAuthAppRoleSecretRef `pulumi:"secretRef"`
}

// Defaults sets the appropriate defaults for VaultDynamicSecretSpecProviderAuthAppRole
func (val *VaultDynamicSecretSpecProviderAuthAppRole) Defaults() *VaultDynamicSecretSpecProviderAuthAppRole {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.Path) {
		tmp.Path = "approle"
	}
	return &tmp
}

// VaultDynamicSecretSpecProviderAuthAppRoleInput is an input type that accepts VaultDynamicSecretSpecProviderAuthAppRoleArgs and VaultDynamicSecretSpecProviderAuthAppRoleOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthAppRoleInput` via:
//
//	VaultDynamicSecretSpecProviderAuthAppRoleArgs{...}
type VaultDynamicSecretSpecProviderAuthAppRoleInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthAppRoleOutput() VaultDynamicSecretSpecProviderAuthAppRoleOutput
	ToVaultDynamicSecretSpecProviderAuthAppRoleOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthAppRoleOutput
}

// AppRole authenticates with Vault using the App Role auth mechanism,
// with the role and secret stored in a Kubernetes Secret resource.
type VaultDynamicSecretSpecProviderAuthAppRoleArgs struct {
	// Path where the App Role authentication backend is mounted
	// in Vault, e.g: "approle"
	Path pulumi.StringInput `pulumi:"path"`
	// RoleID configured in the App Role authentication backend when setting
	// up the authentication backend in Vault.
	RoleId pulumi.StringPtrInput `pulumi:"roleId"`
	// Reference to a key in a Secret that contains the App Role ID used
	// to authenticate with Vault.
	// The `key` field must be specified and denotes which entry within the Secret
	// resource is used as the app role id.
	RoleRef VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrInput `pulumi:"roleRef"`
	// Reference to a key in a Secret that contains the App Role secret used
	// to authenticate with Vault.
	// The `key` field must be specified and denotes which entry within the Secret
	// resource is used as the app role secret.
	SecretRef VaultDynamicSecretSpecProviderAuthAppRoleSecretRefInput `pulumi:"secretRef"`
}

// Defaults sets the appropriate defaults for VaultDynamicSecretSpecProviderAuthAppRoleArgs
func (val *VaultDynamicSecretSpecProviderAuthAppRoleArgs) Defaults() *VaultDynamicSecretSpecProviderAuthAppRoleArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Path == nil {
		tmp.Path = pulumi.String("approle")
	}
	return &tmp
}
func (VaultDynamicSecretSpecProviderAuthAppRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRole)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleArgs) ToVaultDynamicSecretSpecProviderAuthAppRoleOutput() VaultDynamicSecretSpecProviderAuthAppRoleOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthAppRoleOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleArgs) ToVaultDynamicSecretSpecProviderAuthAppRoleOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthAppRoleOutput)
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleArgs) ToVaultDynamicSecretSpecProviderAuthAppRolePtrOutput() VaultDynamicSecretSpecProviderAuthAppRolePtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthAppRolePtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleArgs) ToVaultDynamicSecretSpecProviderAuthAppRolePtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthAppRoleOutput).ToVaultDynamicSecretSpecProviderAuthAppRolePtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthAppRolePtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthAppRoleArgs, VaultDynamicSecretSpecProviderAuthAppRolePtr and VaultDynamicSecretSpecProviderAuthAppRolePtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthAppRolePtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthAppRoleArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthAppRolePtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthAppRolePtrOutput() VaultDynamicSecretSpecProviderAuthAppRolePtrOutput
	ToVaultDynamicSecretSpecProviderAuthAppRolePtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthAppRolePtrOutput
}

type vaultDynamicSecretSpecProviderAuthAppRolePtrType VaultDynamicSecretSpecProviderAuthAppRoleArgs

func VaultDynamicSecretSpecProviderAuthAppRolePtr(v *VaultDynamicSecretSpecProviderAuthAppRoleArgs) VaultDynamicSecretSpecProviderAuthAppRolePtrInput {
	return (*vaultDynamicSecretSpecProviderAuthAppRolePtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthAppRolePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthAppRole)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthAppRolePtrType) ToVaultDynamicSecretSpecProviderAuthAppRolePtrOutput() VaultDynamicSecretSpecProviderAuthAppRolePtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthAppRolePtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthAppRolePtrType) ToVaultDynamicSecretSpecProviderAuthAppRolePtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthAppRolePtrOutput)
}

// AppRole authenticates with Vault using the App Role auth mechanism,
// with the role and secret stored in a Kubernetes Secret resource.
type VaultDynamicSecretSpecProviderAuthAppRoleOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthAppRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRole)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleOutput() VaultDynamicSecretSpecProviderAuthAppRoleOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleOutput) ToVaultDynamicSecretSpecProviderAuthAppRolePtrOutput() VaultDynamicSecretSpecProviderAuthAppRolePtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthAppRolePtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleOutput) ToVaultDynamicSecretSpecProviderAuthAppRolePtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRolePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthAppRole) *VaultDynamicSecretSpecProviderAuthAppRole {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthAppRolePtrOutput)
}

// Path where the App Role authentication backend is mounted
// in Vault, e.g: "approle"
func (o VaultDynamicSecretSpecProviderAuthAppRoleOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthAppRole) string { return v.Path }).(pulumi.StringOutput)
}

// RoleID configured in the App Role authentication backend when setting
// up the authentication backend in Vault.
func (o VaultDynamicSecretSpecProviderAuthAppRoleOutput) RoleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthAppRole) *string { return v.RoleId }).(pulumi.StringPtrOutput)
}

// Reference to a key in a Secret that contains the App Role ID used
// to authenticate with Vault.
// The `key` field must be specified and denotes which entry within the Secret
// resource is used as the app role id.
func (o VaultDynamicSecretSpecProviderAuthAppRoleOutput) RoleRef() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthAppRole) *VaultDynamicSecretSpecProviderAuthAppRoleRoleRef {
		return v.RoleRef
	}).(VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput)
}

// Reference to a key in a Secret that contains the App Role secret used
// to authenticate with Vault.
// The `key` field must be specified and denotes which entry within the Secret
// resource is used as the app role secret.
func (o VaultDynamicSecretSpecProviderAuthAppRoleOutput) SecretRef() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthAppRole) VaultDynamicSecretSpecProviderAuthAppRoleSecretRef {
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput)
}

type VaultDynamicSecretSpecProviderAuthAppRolePtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthAppRolePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthAppRole)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthAppRolePtrOutput) ToVaultDynamicSecretSpecProviderAuthAppRolePtrOutput() VaultDynamicSecretSpecProviderAuthAppRolePtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRolePtrOutput) ToVaultDynamicSecretSpecProviderAuthAppRolePtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRolePtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRolePtrOutput) Elem() VaultDynamicSecretSpecProviderAuthAppRoleOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRole) VaultDynamicSecretSpecProviderAuthAppRole {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthAppRole
		return ret
	}).(VaultDynamicSecretSpecProviderAuthAppRoleOutput)
}

// Path where the App Role authentication backend is mounted
// in Vault, e.g: "approle"
func (o VaultDynamicSecretSpecProviderAuthAppRolePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRole) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// RoleID configured in the App Role authentication backend when setting
// up the authentication backend in Vault.
func (o VaultDynamicSecretSpecProviderAuthAppRolePtrOutput) RoleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRole) *string {
		if v == nil {
			return nil
		}
		return v.RoleId
	}).(pulumi.StringPtrOutput)
}

// Reference to a key in a Secret that contains the App Role ID used
// to authenticate with Vault.
// The `key` field must be specified and denotes which entry within the Secret
// resource is used as the app role id.
func (o VaultDynamicSecretSpecProviderAuthAppRolePtrOutput) RoleRef() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRole) *VaultDynamicSecretSpecProviderAuthAppRoleRoleRef {
		if v == nil {
			return nil
		}
		return v.RoleRef
	}).(VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput)
}

// Reference to a key in a Secret that contains the App Role secret used
// to authenticate with Vault.
// The `key` field must be specified and denotes which entry within the Secret
// resource is used as the app role secret.
func (o VaultDynamicSecretSpecProviderAuthAppRolePtrOutput) SecretRef() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRole) *VaultDynamicSecretSpecProviderAuthAppRoleSecretRef {
		if v == nil {
			return nil
		}
		return &v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput)
}

// Reference to a key in a Secret that contains the App Role ID used
// to authenticate with Vault.
// The `key` field must be specified and denotes which entry within the Secret
// resource is used as the app role id.
type VaultDynamicSecretSpecProviderAuthAppRoleRoleRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthAppRoleRoleRefInput is an input type that accepts VaultDynamicSecretSpecProviderAuthAppRoleRoleRefArgs and VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthAppRoleRoleRefInput` via:
//
//	VaultDynamicSecretSpecProviderAuthAppRoleRoleRefArgs{...}
type VaultDynamicSecretSpecProviderAuthAppRoleRoleRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput
	ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput
}

// Reference to a key in a Secret that contains the App Role ID used
// to authenticate with Vault.
// The `key` field must be specified and denotes which entry within the Secret
// resource is used as the app role id.
type VaultDynamicSecretSpecProviderAuthAppRoleRoleRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthAppRoleRoleRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRoleRoleRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleRoleRefArgs) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleRoleRefArgs) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput)
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleRoleRefArgs) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleRoleRefArgs) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput).ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthAppRoleRoleRefArgs, VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtr and VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthAppRoleRoleRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput
	ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput
}

type vaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrType VaultDynamicSecretSpecProviderAuthAppRoleRoleRefArgs

func VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtr(v *VaultDynamicSecretSpecProviderAuthAppRoleRoleRefArgs) VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthAppRoleRoleRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrType) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrType) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput)
}

// Reference to a key in a Secret that contains the App Role ID used
// to authenticate with Vault.
// The `key` field must be specified and denotes which entry within the Secret
// resource is used as the app role id.
type VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRoleRoleRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthAppRoleRoleRef) *VaultDynamicSecretSpecProviderAuthAppRoleRoleRef {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthAppRoleRoleRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthAppRoleRoleRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthAppRoleRoleRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthAppRoleRoleRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRoleRoleRef) VaultDynamicSecretSpecProviderAuthAppRoleRoleRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthAppRoleRoleRef
		return ret
	}).(VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRoleRoleRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRoleRoleRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRoleRoleRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Reference to a key in a Secret that contains the App Role secret used
// to authenticate with Vault.
// The `key` field must be specified and denotes which entry within the Secret
// resource is used as the app role secret.
type VaultDynamicSecretSpecProviderAuthAppRoleSecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthAppRoleSecretRefInput is an input type that accepts VaultDynamicSecretSpecProviderAuthAppRoleSecretRefArgs and VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthAppRoleSecretRefInput` via:
//
//	VaultDynamicSecretSpecProviderAuthAppRoleSecretRefArgs{...}
type VaultDynamicSecretSpecProviderAuthAppRoleSecretRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput
	ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput
}

// Reference to a key in a Secret that contains the App Role secret used
// to authenticate with Vault.
// The `key` field must be specified and denotes which entry within the Secret
// resource is used as the app role secret.
type VaultDynamicSecretSpecProviderAuthAppRoleSecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthAppRoleSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRoleSecretRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput)
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthAppRoleSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput).ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthAppRoleSecretRefArgs, VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtr and VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthAppRoleSecretRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput
	ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput
}

type vaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrType VaultDynamicSecretSpecProviderAuthAppRoleSecretRefArgs

func VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtr(v *VaultDynamicSecretSpecProviderAuthAppRoleSecretRefArgs) VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthAppRoleSecretRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput)
}

// Reference to a key in a Secret that contains the App Role secret used
// to authenticate with Vault.
// The `key` field must be specified and denotes which entry within the Secret
// resource is used as the app role secret.
type VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRoleSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthAppRoleSecretRef) *VaultDynamicSecretSpecProviderAuthAppRoleSecretRef {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthAppRoleSecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthAppRoleSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthAppRoleSecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthAppRoleSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRoleSecretRef) VaultDynamicSecretSpecProviderAuthAppRoleSecretRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthAppRoleSecretRef
		return ret
	}).(VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRoleSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRoleSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthAppRoleSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Cert authenticates with TLS Certificates by passing client certificate, private key and ca certificate
// Cert authentication method
type VaultDynamicSecretSpecProviderAuthCert struct {
	// ClientCert is a certificate to authenticate using the Cert Vault
	// authentication method
	ClientCert *VaultDynamicSecretSpecProviderAuthCertClientCert `pulumi:"clientCert"`
	// SecretRef to a key in a Secret resource containing client private key to
	// authenticate with Vault using the Cert authentication method
	SecretRef *VaultDynamicSecretSpecProviderAuthCertSecretRef `pulumi:"secretRef"`
}

// VaultDynamicSecretSpecProviderAuthCertInput is an input type that accepts VaultDynamicSecretSpecProviderAuthCertArgs and VaultDynamicSecretSpecProviderAuthCertOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthCertInput` via:
//
//	VaultDynamicSecretSpecProviderAuthCertArgs{...}
type VaultDynamicSecretSpecProviderAuthCertInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthCertOutput() VaultDynamicSecretSpecProviderAuthCertOutput
	ToVaultDynamicSecretSpecProviderAuthCertOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthCertOutput
}

// Cert authenticates with TLS Certificates by passing client certificate, private key and ca certificate
// Cert authentication method
type VaultDynamicSecretSpecProviderAuthCertArgs struct {
	// ClientCert is a certificate to authenticate using the Cert Vault
	// authentication method
	ClientCert VaultDynamicSecretSpecProviderAuthCertClientCertPtrInput `pulumi:"clientCert"`
	// SecretRef to a key in a Secret resource containing client private key to
	// authenticate with Vault using the Cert authentication method
	SecretRef VaultDynamicSecretSpecProviderAuthCertSecretRefPtrInput `pulumi:"secretRef"`
}

func (VaultDynamicSecretSpecProviderAuthCertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCert)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthCertArgs) ToVaultDynamicSecretSpecProviderAuthCertOutput() VaultDynamicSecretSpecProviderAuthCertOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthCertOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthCertArgs) ToVaultDynamicSecretSpecProviderAuthCertOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthCertOutput)
}

func (i VaultDynamicSecretSpecProviderAuthCertArgs) ToVaultDynamicSecretSpecProviderAuthCertPtrOutput() VaultDynamicSecretSpecProviderAuthCertPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthCertPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthCertArgs) ToVaultDynamicSecretSpecProviderAuthCertPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthCertOutput).ToVaultDynamicSecretSpecProviderAuthCertPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthCertPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthCertArgs, VaultDynamicSecretSpecProviderAuthCertPtr and VaultDynamicSecretSpecProviderAuthCertPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthCertPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthCertArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthCertPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthCertPtrOutput() VaultDynamicSecretSpecProviderAuthCertPtrOutput
	ToVaultDynamicSecretSpecProviderAuthCertPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthCertPtrOutput
}

type vaultDynamicSecretSpecProviderAuthCertPtrType VaultDynamicSecretSpecProviderAuthCertArgs

func VaultDynamicSecretSpecProviderAuthCertPtr(v *VaultDynamicSecretSpecProviderAuthCertArgs) VaultDynamicSecretSpecProviderAuthCertPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthCertPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthCertPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthCert)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthCertPtrType) ToVaultDynamicSecretSpecProviderAuthCertPtrOutput() VaultDynamicSecretSpecProviderAuthCertPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthCertPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthCertPtrType) ToVaultDynamicSecretSpecProviderAuthCertPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthCertPtrOutput)
}

// Cert authenticates with TLS Certificates by passing client certificate, private key and ca certificate
// Cert authentication method
type VaultDynamicSecretSpecProviderAuthCertOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthCertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCert)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthCertOutput) ToVaultDynamicSecretSpecProviderAuthCertOutput() VaultDynamicSecretSpecProviderAuthCertOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertOutput) ToVaultDynamicSecretSpecProviderAuthCertOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertOutput) ToVaultDynamicSecretSpecProviderAuthCertPtrOutput() VaultDynamicSecretSpecProviderAuthCertPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthCertPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthCertOutput) ToVaultDynamicSecretSpecProviderAuthCertPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthCert) *VaultDynamicSecretSpecProviderAuthCert {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthCertPtrOutput)
}

// ClientCert is a certificate to authenticate using the Cert Vault
// authentication method
func (o VaultDynamicSecretSpecProviderAuthCertOutput) ClientCert() VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthCert) *VaultDynamicSecretSpecProviderAuthCertClientCert {
		return v.ClientCert
	}).(VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput)
}

// SecretRef to a key in a Secret resource containing client private key to
// authenticate with Vault using the Cert authentication method
func (o VaultDynamicSecretSpecProviderAuthCertOutput) SecretRef() VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthCert) *VaultDynamicSecretSpecProviderAuthCertSecretRef {
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthCertPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthCertPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthCert)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthCertPtrOutput) ToVaultDynamicSecretSpecProviderAuthCertPtrOutput() VaultDynamicSecretSpecProviderAuthCertPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertPtrOutput) ToVaultDynamicSecretSpecProviderAuthCertPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthCertOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCert) VaultDynamicSecretSpecProviderAuthCert {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthCert
		return ret
	}).(VaultDynamicSecretSpecProviderAuthCertOutput)
}

// ClientCert is a certificate to authenticate using the Cert Vault
// authentication method
func (o VaultDynamicSecretSpecProviderAuthCertPtrOutput) ClientCert() VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCert) *VaultDynamicSecretSpecProviderAuthCertClientCert {
		if v == nil {
			return nil
		}
		return v.ClientCert
	}).(VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput)
}

// SecretRef to a key in a Secret resource containing client private key to
// authenticate with Vault using the Cert authentication method
func (o VaultDynamicSecretSpecProviderAuthCertPtrOutput) SecretRef() VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCert) *VaultDynamicSecretSpecProviderAuthCertSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput)
}

// ClientCert is a certificate to authenticate using the Cert Vault
// authentication method
type VaultDynamicSecretSpecProviderAuthCertClientCert struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthCertClientCertInput is an input type that accepts VaultDynamicSecretSpecProviderAuthCertClientCertArgs and VaultDynamicSecretSpecProviderAuthCertClientCertOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthCertClientCertInput` via:
//
//	VaultDynamicSecretSpecProviderAuthCertClientCertArgs{...}
type VaultDynamicSecretSpecProviderAuthCertClientCertInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthCertClientCertOutput() VaultDynamicSecretSpecProviderAuthCertClientCertOutput
	ToVaultDynamicSecretSpecProviderAuthCertClientCertOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthCertClientCertOutput
}

// ClientCert is a certificate to authenticate using the Cert Vault
// authentication method
type VaultDynamicSecretSpecProviderAuthCertClientCertArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthCertClientCertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertClientCert)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthCertClientCertArgs) ToVaultDynamicSecretSpecProviderAuthCertClientCertOutput() VaultDynamicSecretSpecProviderAuthCertClientCertOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthCertClientCertOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthCertClientCertArgs) ToVaultDynamicSecretSpecProviderAuthCertClientCertOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertClientCertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthCertClientCertOutput)
}

func (i VaultDynamicSecretSpecProviderAuthCertClientCertArgs) ToVaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput() VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthCertClientCertPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthCertClientCertArgs) ToVaultDynamicSecretSpecProviderAuthCertClientCertPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthCertClientCertOutput).ToVaultDynamicSecretSpecProviderAuthCertClientCertPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthCertClientCertPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthCertClientCertArgs, VaultDynamicSecretSpecProviderAuthCertClientCertPtr and VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthCertClientCertPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthCertClientCertArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthCertClientCertPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput() VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput
	ToVaultDynamicSecretSpecProviderAuthCertClientCertPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput
}

type vaultDynamicSecretSpecProviderAuthCertClientCertPtrType VaultDynamicSecretSpecProviderAuthCertClientCertArgs

func VaultDynamicSecretSpecProviderAuthCertClientCertPtr(v *VaultDynamicSecretSpecProviderAuthCertClientCertArgs) VaultDynamicSecretSpecProviderAuthCertClientCertPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthCertClientCertPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthCertClientCertPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthCertClientCert)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthCertClientCertPtrType) ToVaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput() VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthCertClientCertPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthCertClientCertPtrType) ToVaultDynamicSecretSpecProviderAuthCertClientCertPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput)
}

// ClientCert is a certificate to authenticate using the Cert Vault
// authentication method
type VaultDynamicSecretSpecProviderAuthCertClientCertOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthCertClientCertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertClientCert)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthCertClientCertOutput) ToVaultDynamicSecretSpecProviderAuthCertClientCertOutput() VaultDynamicSecretSpecProviderAuthCertClientCertOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertClientCertOutput) ToVaultDynamicSecretSpecProviderAuthCertClientCertOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertClientCertOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertClientCertOutput) ToVaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput() VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthCertClientCertPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthCertClientCertOutput) ToVaultDynamicSecretSpecProviderAuthCertClientCertPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthCertClientCert) *VaultDynamicSecretSpecProviderAuthCertClientCert {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthCertClientCertOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthCertClientCert) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthCertClientCertOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthCertClientCert) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthCertClientCertOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthCertClientCert) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthCertClientCert)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput) ToVaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput() VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput) ToVaultDynamicSecretSpecProviderAuthCertClientCertPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthCertClientCertOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCertClientCert) VaultDynamicSecretSpecProviderAuthCertClientCert {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthCertClientCert
		return ret
	}).(VaultDynamicSecretSpecProviderAuthCertClientCertOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCertClientCert) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCertClientCert) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCertClientCert) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// SecretRef to a key in a Secret resource containing client private key to
// authenticate with Vault using the Cert authentication method
type VaultDynamicSecretSpecProviderAuthCertSecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthCertSecretRefInput is an input type that accepts VaultDynamicSecretSpecProviderAuthCertSecretRefArgs and VaultDynamicSecretSpecProviderAuthCertSecretRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthCertSecretRefInput` via:
//
//	VaultDynamicSecretSpecProviderAuthCertSecretRefArgs{...}
type VaultDynamicSecretSpecProviderAuthCertSecretRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthCertSecretRefOutput() VaultDynamicSecretSpecProviderAuthCertSecretRefOutput
	ToVaultDynamicSecretSpecProviderAuthCertSecretRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthCertSecretRefOutput
}

// SecretRef to a key in a Secret resource containing client private key to
// authenticate with Vault using the Cert authentication method
type VaultDynamicSecretSpecProviderAuthCertSecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthCertSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertSecretRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthCertSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthCertSecretRefOutput() VaultDynamicSecretSpecProviderAuthCertSecretRefOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthCertSecretRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthCertSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthCertSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthCertSecretRefOutput)
}

func (i VaultDynamicSecretSpecProviderAuthCertSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthCertSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthCertSecretRefOutput).ToVaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthCertSecretRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthCertSecretRefArgs, VaultDynamicSecretSpecProviderAuthCertSecretRefPtr and VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthCertSecretRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthCertSecretRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthCertSecretRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput
	ToVaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput
}

type vaultDynamicSecretSpecProviderAuthCertSecretRefPtrType VaultDynamicSecretSpecProviderAuthCertSecretRefArgs

func VaultDynamicSecretSpecProviderAuthCertSecretRefPtr(v *VaultDynamicSecretSpecProviderAuthCertSecretRefArgs) VaultDynamicSecretSpecProviderAuthCertSecretRefPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthCertSecretRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthCertSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthCertSecretRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthCertSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthCertSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput)
}

// SecretRef to a key in a Secret resource containing client private key to
// authenticate with Vault using the Cert authentication method
type VaultDynamicSecretSpecProviderAuthCertSecretRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthCertSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthCertSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthCertSecretRefOutput() VaultDynamicSecretSpecProviderAuthCertSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthCertSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthCertSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthCertSecretRef) *VaultDynamicSecretSpecProviderAuthCertSecretRef {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthCertSecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthCertSecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthCertSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthCertSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthCertSecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthCertSecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthCertSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthCertSecretRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCertSecretRef) VaultDynamicSecretSpecProviderAuthCertSecretRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthCertSecretRef
		return ret
	}).(VaultDynamicSecretSpecProviderAuthCertSecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCertSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCertSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthCertSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Iam authenticates with vault by passing a special AWS request signed with AWS IAM credentials
// AWS IAM authentication method
type VaultDynamicSecretSpecProviderAuthIam struct {
	// AWS External ID set on assumed IAM roles
	ExternalID *string `pulumi:"externalID"`
	// Specify a service account with IRSA enabled
	Jwt *VaultDynamicSecretSpecProviderAuthIamJwt `pulumi:"jwt"`
	// Path where the AWS auth method is enabled in Vault, e.g: "aws"
	Path *string `pulumi:"path"`
	// AWS region
	Region *string `pulumi:"region"`
	// This is the AWS role to be assumed before talking to vault
	Role *string `pulumi:"role"`
	// Specify credentials in a Secret object
	SecretRef *VaultDynamicSecretSpecProviderAuthIamSecretRef `pulumi:"secretRef"`
	// X-Vault-AWS-IAM-Server-ID is an additional header used by Vault IAM auth method to mitigate against different types of replay attacks. More details here: https://developer.hashicorp.com/vault/docs/auth/aws
	VaultAwsIamServerID *string `pulumi:"vaultAwsIamServerID"`
	// Vault Role. In vault, a role describes an identity with a set of permissions, groups, or policies you want to attach a user of the secrets engine
	VaultRole string `pulumi:"vaultRole"`
}

// VaultDynamicSecretSpecProviderAuthIamInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamArgs and VaultDynamicSecretSpecProviderAuthIamOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamInput` via:
//
//	VaultDynamicSecretSpecProviderAuthIamArgs{...}
type VaultDynamicSecretSpecProviderAuthIamInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamOutput() VaultDynamicSecretSpecProviderAuthIamOutput
	ToVaultDynamicSecretSpecProviderAuthIamOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamOutput
}

// Iam authenticates with vault by passing a special AWS request signed with AWS IAM credentials
// AWS IAM authentication method
type VaultDynamicSecretSpecProviderAuthIamArgs struct {
	// AWS External ID set on assumed IAM roles
	ExternalID pulumi.StringPtrInput `pulumi:"externalID"`
	// Specify a service account with IRSA enabled
	Jwt VaultDynamicSecretSpecProviderAuthIamJwtPtrInput `pulumi:"jwt"`
	// Path where the AWS auth method is enabled in Vault, e.g: "aws"
	Path pulumi.StringPtrInput `pulumi:"path"`
	// AWS region
	Region pulumi.StringPtrInput `pulumi:"region"`
	// This is the AWS role to be assumed before talking to vault
	Role pulumi.StringPtrInput `pulumi:"role"`
	// Specify credentials in a Secret object
	SecretRef VaultDynamicSecretSpecProviderAuthIamSecretRefPtrInput `pulumi:"secretRef"`
	// X-Vault-AWS-IAM-Server-ID is an additional header used by Vault IAM auth method to mitigate against different types of replay attacks. More details here: https://developer.hashicorp.com/vault/docs/auth/aws
	VaultAwsIamServerID pulumi.StringPtrInput `pulumi:"vaultAwsIamServerID"`
	// Vault Role. In vault, a role describes an identity with a set of permissions, groups, or policies you want to attach a user of the secrets engine
	VaultRole pulumi.StringInput `pulumi:"vaultRole"`
}

func (VaultDynamicSecretSpecProviderAuthIamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIam)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthIamArgs) ToVaultDynamicSecretSpecProviderAuthIamOutput() VaultDynamicSecretSpecProviderAuthIamOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamArgs) ToVaultDynamicSecretSpecProviderAuthIamOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamOutput)
}

func (i VaultDynamicSecretSpecProviderAuthIamArgs) ToVaultDynamicSecretSpecProviderAuthIamPtrOutput() VaultDynamicSecretSpecProviderAuthIamPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamArgs) ToVaultDynamicSecretSpecProviderAuthIamPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamOutput).ToVaultDynamicSecretSpecProviderAuthIamPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthIamPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamArgs, VaultDynamicSecretSpecProviderAuthIamPtr and VaultDynamicSecretSpecProviderAuthIamPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthIamArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthIamPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamPtrOutput() VaultDynamicSecretSpecProviderAuthIamPtrOutput
	ToVaultDynamicSecretSpecProviderAuthIamPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamPtrOutput
}

type vaultDynamicSecretSpecProviderAuthIamPtrType VaultDynamicSecretSpecProviderAuthIamArgs

func VaultDynamicSecretSpecProviderAuthIamPtr(v *VaultDynamicSecretSpecProviderAuthIamArgs) VaultDynamicSecretSpecProviderAuthIamPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthIamPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthIamPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIam)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthIamPtrType) ToVaultDynamicSecretSpecProviderAuthIamPtrOutput() VaultDynamicSecretSpecProviderAuthIamPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthIamPtrType) ToVaultDynamicSecretSpecProviderAuthIamPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamPtrOutput)
}

// Iam authenticates with vault by passing a special AWS request signed with AWS IAM credentials
// AWS IAM authentication method
type VaultDynamicSecretSpecProviderAuthIamOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIam)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamOutput) ToVaultDynamicSecretSpecProviderAuthIamOutput() VaultDynamicSecretSpecProviderAuthIamOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamOutput) ToVaultDynamicSecretSpecProviderAuthIamOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamOutput) ToVaultDynamicSecretSpecProviderAuthIamPtrOutput() VaultDynamicSecretSpecProviderAuthIamPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthIamPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthIamOutput) ToVaultDynamicSecretSpecProviderAuthIamPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthIam) *VaultDynamicSecretSpecProviderAuthIam {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthIamPtrOutput)
}

// AWS External ID set on assumed IAM roles
func (o VaultDynamicSecretSpecProviderAuthIamOutput) ExternalID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIam) *string { return v.ExternalID }).(pulumi.StringPtrOutput)
}

// Specify a service account with IRSA enabled
func (o VaultDynamicSecretSpecProviderAuthIamOutput) Jwt() VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIam) *VaultDynamicSecretSpecProviderAuthIamJwt { return v.Jwt }).(VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput)
}

// Path where the AWS auth method is enabled in Vault, e.g: "aws"
func (o VaultDynamicSecretSpecProviderAuthIamOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIam) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// AWS region
func (o VaultDynamicSecretSpecProviderAuthIamOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIam) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// This is the AWS role to be assumed before talking to vault
func (o VaultDynamicSecretSpecProviderAuthIamOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIam) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// Specify credentials in a Secret object
func (o VaultDynamicSecretSpecProviderAuthIamOutput) SecretRef() VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIam) *VaultDynamicSecretSpecProviderAuthIamSecretRef {
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput)
}

// X-Vault-AWS-IAM-Server-ID is an additional header used by Vault IAM auth method to mitigate against different types of replay attacks. More details here: https://developer.hashicorp.com/vault/docs/auth/aws
func (o VaultDynamicSecretSpecProviderAuthIamOutput) VaultAwsIamServerID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIam) *string { return v.VaultAwsIamServerID }).(pulumi.StringPtrOutput)
}

// Vault Role. In vault, a role describes an identity with a set of permissions, groups, or policies you want to attach a user of the secrets engine
func (o VaultDynamicSecretSpecProviderAuthIamOutput) VaultRole() pulumi.StringOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIam) string { return v.VaultRole }).(pulumi.StringOutput)
}

type VaultDynamicSecretSpecProviderAuthIamPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIam)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamPtrOutput() VaultDynamicSecretSpecProviderAuthIamPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthIamOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIam) VaultDynamicSecretSpecProviderAuthIam {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthIam
		return ret
	}).(VaultDynamicSecretSpecProviderAuthIamOutput)
}

// AWS External ID set on assumed IAM roles
func (o VaultDynamicSecretSpecProviderAuthIamPtrOutput) ExternalID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIam) *string {
		if v == nil {
			return nil
		}
		return v.ExternalID
	}).(pulumi.StringPtrOutput)
}

// Specify a service account with IRSA enabled
func (o VaultDynamicSecretSpecProviderAuthIamPtrOutput) Jwt() VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIam) *VaultDynamicSecretSpecProviderAuthIamJwt {
		if v == nil {
			return nil
		}
		return v.Jwt
	}).(VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput)
}

// Path where the AWS auth method is enabled in Vault, e.g: "aws"
func (o VaultDynamicSecretSpecProviderAuthIamPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIam) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// AWS region
func (o VaultDynamicSecretSpecProviderAuthIamPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIam) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// This is the AWS role to be assumed before talking to vault
func (o VaultDynamicSecretSpecProviderAuthIamPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIam) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

// Specify credentials in a Secret object
func (o VaultDynamicSecretSpecProviderAuthIamPtrOutput) SecretRef() VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIam) *VaultDynamicSecretSpecProviderAuthIamSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput)
}

// X-Vault-AWS-IAM-Server-ID is an additional header used by Vault IAM auth method to mitigate against different types of replay attacks. More details here: https://developer.hashicorp.com/vault/docs/auth/aws
func (o VaultDynamicSecretSpecProviderAuthIamPtrOutput) VaultAwsIamServerID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIam) *string {
		if v == nil {
			return nil
		}
		return v.VaultAwsIamServerID
	}).(pulumi.StringPtrOutput)
}

// Vault Role. In vault, a role describes an identity with a set of permissions, groups, or policies you want to attach a user of the secrets engine
func (o VaultDynamicSecretSpecProviderAuthIamPtrOutput) VaultRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIam) *string {
		if v == nil {
			return nil
		}
		return &v.VaultRole
	}).(pulumi.StringPtrOutput)
}

// Specify a service account with IRSA enabled
type VaultDynamicSecretSpecProviderAuthIamJwt struct {
	// A reference to a ServiceAccount resource.
	ServiceAccountRef *VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef `pulumi:"serviceAccountRef"`
}

// VaultDynamicSecretSpecProviderAuthIamJwtInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamJwtArgs and VaultDynamicSecretSpecProviderAuthIamJwtOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamJwtInput` via:
//
//	VaultDynamicSecretSpecProviderAuthIamJwtArgs{...}
type VaultDynamicSecretSpecProviderAuthIamJwtInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamJwtOutput() VaultDynamicSecretSpecProviderAuthIamJwtOutput
	ToVaultDynamicSecretSpecProviderAuthIamJwtOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamJwtOutput
}

// Specify a service account with IRSA enabled
type VaultDynamicSecretSpecProviderAuthIamJwtArgs struct {
	// A reference to a ServiceAccount resource.
	ServiceAccountRef VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrInput `pulumi:"serviceAccountRef"`
}

func (VaultDynamicSecretSpecProviderAuthIamJwtArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamJwt)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthIamJwtArgs) ToVaultDynamicSecretSpecProviderAuthIamJwtOutput() VaultDynamicSecretSpecProviderAuthIamJwtOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamJwtOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamJwtArgs) ToVaultDynamicSecretSpecProviderAuthIamJwtOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamJwtOutput)
}

func (i VaultDynamicSecretSpecProviderAuthIamJwtArgs) ToVaultDynamicSecretSpecProviderAuthIamJwtPtrOutput() VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamJwtPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamJwtArgs) ToVaultDynamicSecretSpecProviderAuthIamJwtPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamJwtOutput).ToVaultDynamicSecretSpecProviderAuthIamJwtPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthIamJwtPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamJwtArgs, VaultDynamicSecretSpecProviderAuthIamJwtPtr and VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamJwtPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthIamJwtArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthIamJwtPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamJwtPtrOutput() VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput
	ToVaultDynamicSecretSpecProviderAuthIamJwtPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput
}

type vaultDynamicSecretSpecProviderAuthIamJwtPtrType VaultDynamicSecretSpecProviderAuthIamJwtArgs

func VaultDynamicSecretSpecProviderAuthIamJwtPtr(v *VaultDynamicSecretSpecProviderAuthIamJwtArgs) VaultDynamicSecretSpecProviderAuthIamJwtPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthIamJwtPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthIamJwtPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamJwt)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthIamJwtPtrType) ToVaultDynamicSecretSpecProviderAuthIamJwtPtrOutput() VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamJwtPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthIamJwtPtrType) ToVaultDynamicSecretSpecProviderAuthIamJwtPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput)
}

// Specify a service account with IRSA enabled
type VaultDynamicSecretSpecProviderAuthIamJwtOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamJwtOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamJwt)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtOutput() VaultDynamicSecretSpecProviderAuthIamJwtOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtPtrOutput() VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthIamJwtPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthIamJwt) *VaultDynamicSecretSpecProviderAuthIamJwt {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput)
}

// A reference to a ServiceAccount resource.
func (o VaultDynamicSecretSpecProviderAuthIamJwtOutput) ServiceAccountRef() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamJwt) *VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef {
		return v.ServiceAccountRef
	}).(VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamJwt)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtPtrOutput() VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthIamJwtOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamJwt) VaultDynamicSecretSpecProviderAuthIamJwt {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthIamJwt
		return ret
	}).(VaultDynamicSecretSpecProviderAuthIamJwtOutput)
}

// A reference to a ServiceAccount resource.
func (o VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput) ServiceAccountRef() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamJwt) *VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef {
		if v == nil {
			return nil
		}
		return v.ServiceAccountRef
	}).(VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput)
}

// A reference to a ServiceAccount resource.
type VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences []string `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefArgs and VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefInput` via:
//
//	VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefArgs{...}
type VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput
	ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput
}

// A reference to a ServiceAccount resource.
type VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefArgs struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefArgs) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefArgs) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput)
}

func (i VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefArgs) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefArgs) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput).ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefArgs, VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtr and VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput
	ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput
}

type vaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrType VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefArgs

func VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtr(v *VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefArgs) VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrType) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrType) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput)
}

// A reference to a ServiceAccount resource.
type VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef) *VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef) []string { return v.Audiences }).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef) VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef
		return ret
	}).(VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Specify credentials in a Secret object
type VaultDynamicSecretSpecProviderAuthIamSecretRef struct {
	// The AccessKeyID is used for authentication
	AccessKeyIDSecretRef *VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRef `pulumi:"accessKeyIDSecretRef"`
	// The SecretAccessKey is used for authentication
	SecretAccessKeySecretRef *VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef `pulumi:"secretAccessKeySecretRef"`
	// The SessionToken used for authentication
	// This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
	// see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html
	SessionTokenSecretRef *VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef `pulumi:"sessionTokenSecretRef"`
}

// VaultDynamicSecretSpecProviderAuthIamSecretRefInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamSecretRefArgs and VaultDynamicSecretSpecProviderAuthIamSecretRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamSecretRefInput` via:
//
//	VaultDynamicSecretSpecProviderAuthIamSecretRefArgs{...}
type VaultDynamicSecretSpecProviderAuthIamSecretRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamSecretRefOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefOutput
	ToVaultDynamicSecretSpecProviderAuthIamSecretRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefOutput
}

// Specify credentials in a Secret object
type VaultDynamicSecretSpecProviderAuthIamSecretRefArgs struct {
	// The AccessKeyID is used for authentication
	AccessKeyIDSecretRef VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrInput `pulumi:"accessKeyIDSecretRef"`
	// The SecretAccessKey is used for authentication
	SecretAccessKeySecretRef VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrInput `pulumi:"secretAccessKeySecretRef"`
	// The SessionToken used for authentication
	// This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
	// see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html
	SessionTokenSecretRef VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrInput `pulumi:"sessionTokenSecretRef"`
}

func (VaultDynamicSecretSpecProviderAuthIamSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefOutput)
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefOutput).ToVaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthIamSecretRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamSecretRefArgs, VaultDynamicSecretSpecProviderAuthIamSecretRefPtr and VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamSecretRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthIamSecretRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthIamSecretRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput
	ToVaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput
}

type vaultDynamicSecretSpecProviderAuthIamSecretRefPtrType VaultDynamicSecretSpecProviderAuthIamSecretRefArgs

func VaultDynamicSecretSpecProviderAuthIamSecretRefPtr(v *VaultDynamicSecretSpecProviderAuthIamSecretRefArgs) VaultDynamicSecretSpecProviderAuthIamSecretRefPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthIamSecretRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthIamSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamSecretRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthIamSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthIamSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput)
}

// Specify credentials in a Secret object
type VaultDynamicSecretSpecProviderAuthIamSecretRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthIamSecretRef) *VaultDynamicSecretSpecProviderAuthIamSecretRef {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput)
}

// The AccessKeyID is used for authentication
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefOutput) AccessKeyIDSecretRef() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRef) *VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRef {
		return v.AccessKeyIDSecretRef
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput)
}

// The SecretAccessKey is used for authentication
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefOutput) SecretAccessKeySecretRef() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRef) *VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef {
		return v.SecretAccessKeySecretRef
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput)
}

// The SessionToken used for authentication
// This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
// see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefOutput) SessionTokenSecretRef() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRef) *VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef {
		return v.SessionTokenSecretRef
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthIamSecretRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRef) VaultDynamicSecretSpecProviderAuthIamSecretRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthIamSecretRef
		return ret
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefOutput)
}

// The AccessKeyID is used for authentication
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput) AccessKeyIDSecretRef() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRef) *VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRef {
		if v == nil {
			return nil
		}
		return v.AccessKeyIDSecretRef
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput)
}

// The SecretAccessKey is used for authentication
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput) SecretAccessKeySecretRef() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRef) *VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef {
		if v == nil {
			return nil
		}
		return v.SecretAccessKeySecretRef
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput)
}

// The SessionToken used for authentication
// This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
// see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput) SessionTokenSecretRef() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRef) *VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef {
		if v == nil {
			return nil
		}
		return v.SessionTokenSecretRef
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput)
}

// The AccessKeyID is used for authentication
type VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefArgs and VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefInput` via:
//
//	VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefArgs{...}
type VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefOutput
	ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefOutput
}

// The AccessKeyID is used for authentication
type VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefOutput)
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefOutput).ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefArgs, VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtr and VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput
	ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput
}

type vaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrType VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefArgs

func VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtr(v *VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefArgs) VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput)
}

// The AccessKeyID is used for authentication
type VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRef) *VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRef {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRef) VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRef
		return ret
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The SecretAccessKey is used for authentication
type VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefArgs and VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefInput` via:
//
//	VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefArgs{...}
type VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput
	ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput
}

// The SecretAccessKey is used for authentication
type VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput)
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput).ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefArgs, VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtr and VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput
	ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput
}

type vaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrType VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefArgs

func VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtr(v *VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefArgs) VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput)
}

// The SecretAccessKey is used for authentication
type VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef) *VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef) *string {
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef) VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef
		return ret
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The SessionToken used for authentication
// This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
// see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html
type VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefArgs and VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefInput` via:
//
//	VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefArgs{...}
type VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput
	ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput
}

// The SessionToken used for authentication
// This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
// see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html
type VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput)
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput).ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefArgs, VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtr and VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput
	ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput
}

type vaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrType VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefArgs

func VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtr(v *VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefArgs) VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput)
}

// The SessionToken used for authentication
// This must be defined if AccessKeyID and SecretAccessKey are temporary credentials
// see: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_use-resources.html
type VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef) *VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef) *string {
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef) VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef
		return ret
	}).(VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Jwt authenticates with Vault by passing role and JWT token using the
// JWT/OIDC authentication method
type VaultDynamicSecretSpecProviderAuthJwt struct {
	// Optional ServiceAccountToken specifies the Kubernetes service account for which to request
	// a token for with the `TokenRequest` API.
	KubernetesServiceAccountToken *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken `pulumi:"kubernetesServiceAccountToken"`
	// Path where the JWT authentication backend is mounted
	// in Vault, e.g: "jwt"
	Path string `pulumi:"path"`
	// Role is a JWT role to authenticate using the JWT/OIDC Vault
	// authentication method
	Role *string `pulumi:"role"`
	// Optional SecretRef that refers to a key in a Secret resource containing JWT token to
	// authenticate with Vault using the JWT/OIDC authentication method.
	SecretRef *VaultDynamicSecretSpecProviderAuthJwtSecretRef `pulumi:"secretRef"`
}

// Defaults sets the appropriate defaults for VaultDynamicSecretSpecProviderAuthJwt
func (val *VaultDynamicSecretSpecProviderAuthJwt) Defaults() *VaultDynamicSecretSpecProviderAuthJwt {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.Path) {
		tmp.Path = "jwt"
	}
	return &tmp
}

// VaultDynamicSecretSpecProviderAuthJwtInput is an input type that accepts VaultDynamicSecretSpecProviderAuthJwtArgs and VaultDynamicSecretSpecProviderAuthJwtOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthJwtInput` via:
//
//	VaultDynamicSecretSpecProviderAuthJwtArgs{...}
type VaultDynamicSecretSpecProviderAuthJwtInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthJwtOutput() VaultDynamicSecretSpecProviderAuthJwtOutput
	ToVaultDynamicSecretSpecProviderAuthJwtOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthJwtOutput
}

// Jwt authenticates with Vault by passing role and JWT token using the
// JWT/OIDC authentication method
type VaultDynamicSecretSpecProviderAuthJwtArgs struct {
	// Optional ServiceAccountToken specifies the Kubernetes service account for which to request
	// a token for with the `TokenRequest` API.
	KubernetesServiceAccountToken VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrInput `pulumi:"kubernetesServiceAccountToken"`
	// Path where the JWT authentication backend is mounted
	// in Vault, e.g: "jwt"
	Path pulumi.StringInput `pulumi:"path"`
	// Role is a JWT role to authenticate using the JWT/OIDC Vault
	// authentication method
	Role pulumi.StringPtrInput `pulumi:"role"`
	// Optional SecretRef that refers to a key in a Secret resource containing JWT token to
	// authenticate with Vault using the JWT/OIDC authentication method.
	SecretRef VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrInput `pulumi:"secretRef"`
}

// Defaults sets the appropriate defaults for VaultDynamicSecretSpecProviderAuthJwtArgs
func (val *VaultDynamicSecretSpecProviderAuthJwtArgs) Defaults() *VaultDynamicSecretSpecProviderAuthJwtArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Path == nil {
		tmp.Path = pulumi.String("jwt")
	}
	return &tmp
}
func (VaultDynamicSecretSpecProviderAuthJwtArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwt)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthJwtArgs) ToVaultDynamicSecretSpecProviderAuthJwtOutput() VaultDynamicSecretSpecProviderAuthJwtOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthJwtArgs) ToVaultDynamicSecretSpecProviderAuthJwtOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtOutput)
}

func (i VaultDynamicSecretSpecProviderAuthJwtArgs) ToVaultDynamicSecretSpecProviderAuthJwtPtrOutput() VaultDynamicSecretSpecProviderAuthJwtPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthJwtArgs) ToVaultDynamicSecretSpecProviderAuthJwtPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtOutput).ToVaultDynamicSecretSpecProviderAuthJwtPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthJwtPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthJwtArgs, VaultDynamicSecretSpecProviderAuthJwtPtr and VaultDynamicSecretSpecProviderAuthJwtPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthJwtPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthJwtArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthJwtPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthJwtPtrOutput() VaultDynamicSecretSpecProviderAuthJwtPtrOutput
	ToVaultDynamicSecretSpecProviderAuthJwtPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthJwtPtrOutput
}

type vaultDynamicSecretSpecProviderAuthJwtPtrType VaultDynamicSecretSpecProviderAuthJwtArgs

func VaultDynamicSecretSpecProviderAuthJwtPtr(v *VaultDynamicSecretSpecProviderAuthJwtArgs) VaultDynamicSecretSpecProviderAuthJwtPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthJwtPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthJwtPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthJwt)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthJwtPtrType) ToVaultDynamicSecretSpecProviderAuthJwtPtrOutput() VaultDynamicSecretSpecProviderAuthJwtPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthJwtPtrType) ToVaultDynamicSecretSpecProviderAuthJwtPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtPtrOutput)
}

// Jwt authenticates with Vault by passing role and JWT token using the
// JWT/OIDC authentication method
type VaultDynamicSecretSpecProviderAuthJwtOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthJwtOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwt)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthJwtOutput) ToVaultDynamicSecretSpecProviderAuthJwtOutput() VaultDynamicSecretSpecProviderAuthJwtOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtOutput) ToVaultDynamicSecretSpecProviderAuthJwtOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtOutput) ToVaultDynamicSecretSpecProviderAuthJwtPtrOutput() VaultDynamicSecretSpecProviderAuthJwtPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthJwtPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthJwtOutput) ToVaultDynamicSecretSpecProviderAuthJwtPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthJwt) *VaultDynamicSecretSpecProviderAuthJwt {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthJwtPtrOutput)
}

// Optional ServiceAccountToken specifies the Kubernetes service account for which to request
// a token for with the `TokenRequest` API.
func (o VaultDynamicSecretSpecProviderAuthJwtOutput) KubernetesServiceAccountToken() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwt) *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken {
		return v.KubernetesServiceAccountToken
	}).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput)
}

// Path where the JWT authentication backend is mounted
// in Vault, e.g: "jwt"
func (o VaultDynamicSecretSpecProviderAuthJwtOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwt) string { return v.Path }).(pulumi.StringOutput)
}

// Role is a JWT role to authenticate using the JWT/OIDC Vault
// authentication method
func (o VaultDynamicSecretSpecProviderAuthJwtOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwt) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// Optional SecretRef that refers to a key in a Secret resource containing JWT token to
// authenticate with Vault using the JWT/OIDC authentication method.
func (o VaultDynamicSecretSpecProviderAuthJwtOutput) SecretRef() VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwt) *VaultDynamicSecretSpecProviderAuthJwtSecretRef {
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthJwtPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthJwtPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthJwt)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthJwtPtrOutput) ToVaultDynamicSecretSpecProviderAuthJwtPtrOutput() VaultDynamicSecretSpecProviderAuthJwtPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtPtrOutput) ToVaultDynamicSecretSpecProviderAuthJwtPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthJwtOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwt) VaultDynamicSecretSpecProviderAuthJwt {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthJwt
		return ret
	}).(VaultDynamicSecretSpecProviderAuthJwtOutput)
}

// Optional ServiceAccountToken specifies the Kubernetes service account for which to request
// a token for with the `TokenRequest` API.
func (o VaultDynamicSecretSpecProviderAuthJwtPtrOutput) KubernetesServiceAccountToken() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwt) *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken {
		if v == nil {
			return nil
		}
		return v.KubernetesServiceAccountToken
	}).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput)
}

// Path where the JWT authentication backend is mounted
// in Vault, e.g: "jwt"
func (o VaultDynamicSecretSpecProviderAuthJwtPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwt) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// Role is a JWT role to authenticate using the JWT/OIDC Vault
// authentication method
func (o VaultDynamicSecretSpecProviderAuthJwtPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwt) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

// Optional SecretRef that refers to a key in a Secret resource containing JWT token to
// authenticate with Vault using the JWT/OIDC authentication method.
func (o VaultDynamicSecretSpecProviderAuthJwtPtrOutput) SecretRef() VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwt) *VaultDynamicSecretSpecProviderAuthJwtSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput)
}

// Optional ServiceAccountToken specifies the Kubernetes service account for which to request
// a token for with the `TokenRequest` API.
type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken struct {
	// Optional audiences field that will be used to request a temporary Kubernetes service
	// account token for the service account referenced by `serviceAccountRef`.
	// Defaults to a single audience `vault` it not specified.
	// Deprecated: use serviceAccountRef.Audiences instead
	Audiences []string `pulumi:"audiences"`
	// Optional expiration time in seconds that will be used to request a temporary
	// Kubernetes service account token for the service account referenced by
	// `serviceAccountRef`.
	// Deprecated: this will be removed in the future.
	// Defaults to 10 minutes.
	ExpirationSeconds *int `pulumi:"expirationSeconds"`
	// Service account field containing the name of a kubernetes ServiceAccount.
	ServiceAccountRef VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef `pulumi:"serviceAccountRef"`
}

// VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenInput is an input type that accepts VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenArgs and VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenInput` via:
//
//	VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenArgs{...}
type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput
	ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput
}

// Optional ServiceAccountToken specifies the Kubernetes service account for which to request
// a token for with the `TokenRequest` API.
type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenArgs struct {
	// Optional audiences field that will be used to request a temporary Kubernetes service
	// account token for the service account referenced by `serviceAccountRef`.
	// Defaults to a single audience `vault` it not specified.
	// Deprecated: use serviceAccountRef.Audiences instead
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// Optional expiration time in seconds that will be used to request a temporary
	// Kubernetes service account token for the service account referenced by
	// `serviceAccountRef`.
	// Deprecated: this will be removed in the future.
	// Defaults to 10 minutes.
	ExpirationSeconds pulumi.IntPtrInput `pulumi:"expirationSeconds"`
	// Service account field containing the name of a kubernetes ServiceAccount.
	ServiceAccountRef VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefInput `pulumi:"serviceAccountRef"`
}

func (VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenArgs) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenArgs) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput)
}

func (i VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenArgs) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenArgs) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput).ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenArgs, VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtr and VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput
	ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput
}

type vaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrType VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenArgs

func VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtr(v *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenArgs) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrType) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrType) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput)
}

// Optional ServiceAccountToken specifies the Kubernetes service account for which to request
// a token for with the `TokenRequest` API.
type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken) *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput)
}

// Optional audiences field that will be used to request a temporary Kubernetes service
// account token for the service account referenced by `serviceAccountRef`.
// Defaults to a single audience `vault` it not specified.
// Deprecated: use serviceAccountRef.Audiences instead
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken) []string {
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// Optional expiration time in seconds that will be used to request a temporary
// Kubernetes service account token for the service account referenced by
// `serviceAccountRef`.
// Deprecated: this will be removed in the future.
// Defaults to 10 minutes.
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput) ExpirationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken) *int {
		return v.ExpirationSeconds
	}).(pulumi.IntPtrOutput)
}

// Service account field containing the name of a kubernetes ServiceAccount.
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput) ServiceAccountRef() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef {
		return v.ServiceAccountRef
	}).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput)
}

type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken
		return ret
	}).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput)
}

// Optional audiences field that will be used to request a temporary Kubernetes service
// account token for the service account referenced by `serviceAccountRef`.
// Defaults to a single audience `vault` it not specified.
// Deprecated: use serviceAccountRef.Audiences instead
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// Optional expiration time in seconds that will be used to request a temporary
// Kubernetes service account token for the service account referenced by
// `serviceAccountRef`.
// Deprecated: this will be removed in the future.
// Defaults to 10 minutes.
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput) ExpirationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken) *int {
		if v == nil {
			return nil
		}
		return v.ExpirationSeconds
	}).(pulumi.IntPtrOutput)
}

// Service account field containing the name of a kubernetes ServiceAccount.
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput) ServiceAccountRef() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountToken) *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef {
		if v == nil {
			return nil
		}
		return &v.ServiceAccountRef
	}).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput)
}

// Service account field containing the name of a kubernetes ServiceAccount.
type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences []string `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefInput is an input type that accepts VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefArgs and VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefInput` via:
//
//	VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefArgs{...}
type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput
	ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput
}

// Service account field containing the name of a kubernetes ServiceAccount.
type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefArgs struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefArgs) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefArgs) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput)
}

func (i VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefArgs) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefArgs) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput).ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefArgs, VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtr and VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput
	ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput
}

type vaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrType VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefArgs

func VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtr(v *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefArgs) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrType) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrType) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput)
}

// Service account field containing the name of a kubernetes ServiceAccount.
type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef) *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef) []string {
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef) string {
		return v.Name
	}).(pulumi.StringOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef) *string {
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef) VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef
		return ret
	}).(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Optional SecretRef that refers to a key in a Secret resource containing JWT token to
// authenticate with Vault using the JWT/OIDC authentication method.
type VaultDynamicSecretSpecProviderAuthJwtSecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthJwtSecretRefInput is an input type that accepts VaultDynamicSecretSpecProviderAuthJwtSecretRefArgs and VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthJwtSecretRefInput` via:
//
//	VaultDynamicSecretSpecProviderAuthJwtSecretRefArgs{...}
type VaultDynamicSecretSpecProviderAuthJwtSecretRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthJwtSecretRefOutput() VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput
	ToVaultDynamicSecretSpecProviderAuthJwtSecretRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput
}

// Optional SecretRef that refers to a key in a Secret resource containing JWT token to
// authenticate with Vault using the JWT/OIDC authentication method.
type VaultDynamicSecretSpecProviderAuthJwtSecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthJwtSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtSecretRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthJwtSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefOutput() VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtSecretRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthJwtSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput)
}

func (i VaultDynamicSecretSpecProviderAuthJwtSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthJwtSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput).ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthJwtSecretRefArgs, VaultDynamicSecretSpecProviderAuthJwtSecretRefPtr and VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthJwtSecretRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput
	ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput
}

type vaultDynamicSecretSpecProviderAuthJwtSecretRefPtrType VaultDynamicSecretSpecProviderAuthJwtSecretRefArgs

func VaultDynamicSecretSpecProviderAuthJwtSecretRefPtr(v *VaultDynamicSecretSpecProviderAuthJwtSecretRefArgs) VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthJwtSecretRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthJwtSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthJwtSecretRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthJwtSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthJwtSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput)
}

// Optional SecretRef that refers to a key in a Secret resource containing JWT token to
// authenticate with Vault using the JWT/OIDC authentication method.
type VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefOutput() VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthJwtSecretRef) *VaultDynamicSecretSpecProviderAuthJwtSecretRef {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtSecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthJwtSecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthJwtSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtSecretRef) VaultDynamicSecretSpecProviderAuthJwtSecretRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthJwtSecretRef
		return ret
	}).(VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthJwtSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Kubernetes authenticates with Vault by passing the ServiceAccount
// token stored in the named Secret resource to the Vault server.
type VaultDynamicSecretSpecProviderAuthKubernetes struct {
	// Path where the Kubernetes authentication backend is mounted in Vault, e.g:
	// "kubernetes"
	MountPath string `pulumi:"mountPath"`
	// A required field containing the Vault Role to assume. A Role binds a
	// Kubernetes ServiceAccount with a set of Vault policies.
	Role string `pulumi:"role"`
	// Optional secret field containing a Kubernetes ServiceAccount JWT used
	// for authenticating with Vault. If a name is specified without a key,
	// `token` is the default. If one is not specified, the one bound to
	// the controller will be used.
	SecretRef *VaultDynamicSecretSpecProviderAuthKubernetesSecretRef `pulumi:"secretRef"`
	// Optional service account field containing the name of a kubernetes ServiceAccount.
	// If the service account is specified, the service account secret token JWT will be used
	// for authenticating with Vault. If the service account selector is not supplied,
	// the secretRef will be used instead.
	ServiceAccountRef *VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef `pulumi:"serviceAccountRef"`
}

// Defaults sets the appropriate defaults for VaultDynamicSecretSpecProviderAuthKubernetes
func (val *VaultDynamicSecretSpecProviderAuthKubernetes) Defaults() *VaultDynamicSecretSpecProviderAuthKubernetes {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.MountPath) {
		tmp.MountPath = "kubernetes"
	}
	return &tmp
}

// VaultDynamicSecretSpecProviderAuthKubernetesInput is an input type that accepts VaultDynamicSecretSpecProviderAuthKubernetesArgs and VaultDynamicSecretSpecProviderAuthKubernetesOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthKubernetesInput` via:
//
//	VaultDynamicSecretSpecProviderAuthKubernetesArgs{...}
type VaultDynamicSecretSpecProviderAuthKubernetesInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthKubernetesOutput() VaultDynamicSecretSpecProviderAuthKubernetesOutput
	ToVaultDynamicSecretSpecProviderAuthKubernetesOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthKubernetesOutput
}

// Kubernetes authenticates with Vault by passing the ServiceAccount
// token stored in the named Secret resource to the Vault server.
type VaultDynamicSecretSpecProviderAuthKubernetesArgs struct {
	// Path where the Kubernetes authentication backend is mounted in Vault, e.g:
	// "kubernetes"
	MountPath pulumi.StringInput `pulumi:"mountPath"`
	// A required field containing the Vault Role to assume. A Role binds a
	// Kubernetes ServiceAccount with a set of Vault policies.
	Role pulumi.StringInput `pulumi:"role"`
	// Optional secret field containing a Kubernetes ServiceAccount JWT used
	// for authenticating with Vault. If a name is specified without a key,
	// `token` is the default. If one is not specified, the one bound to
	// the controller will be used.
	SecretRef VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrInput `pulumi:"secretRef"`
	// Optional service account field containing the name of a kubernetes ServiceAccount.
	// If the service account is specified, the service account secret token JWT will be used
	// for authenticating with Vault. If the service account selector is not supplied,
	// the secretRef will be used instead.
	ServiceAccountRef VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrInput `pulumi:"serviceAccountRef"`
}

// Defaults sets the appropriate defaults for VaultDynamicSecretSpecProviderAuthKubernetesArgs
func (val *VaultDynamicSecretSpecProviderAuthKubernetesArgs) Defaults() *VaultDynamicSecretSpecProviderAuthKubernetesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MountPath == nil {
		tmp.MountPath = pulumi.String("kubernetes")
	}
	return &tmp
}
func (VaultDynamicSecretSpecProviderAuthKubernetesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetes)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesOutput() VaultDynamicSecretSpecProviderAuthKubernetesOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthKubernetesOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthKubernetesOutput)
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthKubernetesPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthKubernetesOutput).ToVaultDynamicSecretSpecProviderAuthKubernetesPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthKubernetesPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthKubernetesArgs, VaultDynamicSecretSpecProviderAuthKubernetesPtr and VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthKubernetesPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthKubernetesArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthKubernetesPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthKubernetesPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput
	ToVaultDynamicSecretSpecProviderAuthKubernetesPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput
}

type vaultDynamicSecretSpecProviderAuthKubernetesPtrType VaultDynamicSecretSpecProviderAuthKubernetesArgs

func VaultDynamicSecretSpecProviderAuthKubernetesPtr(v *VaultDynamicSecretSpecProviderAuthKubernetesArgs) VaultDynamicSecretSpecProviderAuthKubernetesPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthKubernetesPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthKubernetesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthKubernetes)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthKubernetesPtrType) ToVaultDynamicSecretSpecProviderAuthKubernetesPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthKubernetesPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthKubernetesPtrType) ToVaultDynamicSecretSpecProviderAuthKubernetesPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput)
}

// Kubernetes authenticates with Vault by passing the ServiceAccount
// token stored in the named Secret resource to the Vault server.
type VaultDynamicSecretSpecProviderAuthKubernetesOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthKubernetesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetes)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesOutput() VaultDynamicSecretSpecProviderAuthKubernetesOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthKubernetesPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthKubernetes) *VaultDynamicSecretSpecProviderAuthKubernetes {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput)
}

// Path where the Kubernetes authentication backend is mounted in Vault, e.g:
// "kubernetes"
func (o VaultDynamicSecretSpecProviderAuthKubernetesOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthKubernetes) string { return v.MountPath }).(pulumi.StringOutput)
}

// A required field containing the Vault Role to assume. A Role binds a
// Kubernetes ServiceAccount with a set of Vault policies.
func (o VaultDynamicSecretSpecProviderAuthKubernetesOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthKubernetes) string { return v.Role }).(pulumi.StringOutput)
}

// Optional secret field containing a Kubernetes ServiceAccount JWT used
// for authenticating with Vault. If a name is specified without a key,
// `token` is the default. If one is not specified, the one bound to
// the controller will be used.
func (o VaultDynamicSecretSpecProviderAuthKubernetesOutput) SecretRef() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthKubernetes) *VaultDynamicSecretSpecProviderAuthKubernetesSecretRef {
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput)
}

// Optional service account field containing the name of a kubernetes ServiceAccount.
// If the service account is specified, the service account secret token JWT will be used
// for authenticating with Vault. If the service account selector is not supplied,
// the secretRef will be used instead.
func (o VaultDynamicSecretSpecProviderAuthKubernetesOutput) ServiceAccountRef() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthKubernetes) *VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef {
		return v.ServiceAccountRef
	}).(VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthKubernetes)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthKubernetesOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetes) VaultDynamicSecretSpecProviderAuthKubernetes {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthKubernetes
		return ret
	}).(VaultDynamicSecretSpecProviderAuthKubernetesOutput)
}

// Path where the Kubernetes authentication backend is mounted in Vault, e.g:
// "kubernetes"
func (o VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetes) *string {
		if v == nil {
			return nil
		}
		return &v.MountPath
	}).(pulumi.StringPtrOutput)
}

// A required field containing the Vault Role to assume. A Role binds a
// Kubernetes ServiceAccount with a set of Vault policies.
func (o VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetes) *string {
		if v == nil {
			return nil
		}
		return &v.Role
	}).(pulumi.StringPtrOutput)
}

// Optional secret field containing a Kubernetes ServiceAccount JWT used
// for authenticating with Vault. If a name is specified without a key,
// `token` is the default. If one is not specified, the one bound to
// the controller will be used.
func (o VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput) SecretRef() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetes) *VaultDynamicSecretSpecProviderAuthKubernetesSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput)
}

// Optional service account field containing the name of a kubernetes ServiceAccount.
// If the service account is specified, the service account secret token JWT will be used
// for authenticating with Vault. If the service account selector is not supplied,
// the secretRef will be used instead.
func (o VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput) ServiceAccountRef() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetes) *VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef {
		if v == nil {
			return nil
		}
		return v.ServiceAccountRef
	}).(VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput)
}

// Optional secret field containing a Kubernetes ServiceAccount JWT used
// for authenticating with Vault. If a name is specified without a key,
// `token` is the default. If one is not specified, the one bound to
// the controller will be used.
type VaultDynamicSecretSpecProviderAuthKubernetesSecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthKubernetesSecretRefInput is an input type that accepts VaultDynamicSecretSpecProviderAuthKubernetesSecretRefArgs and VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthKubernetesSecretRefInput` via:
//
//	VaultDynamicSecretSpecProviderAuthKubernetesSecretRefArgs{...}
type VaultDynamicSecretSpecProviderAuthKubernetesSecretRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput
	ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput
}

// Optional secret field containing a Kubernetes ServiceAccount JWT used
// for authenticating with Vault. If a name is specified without a key,
// `token` is the default. If one is not specified, the one bound to
// the controller will be used.
type VaultDynamicSecretSpecProviderAuthKubernetesSecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthKubernetesSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesSecretRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput)
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput).ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthKubernetesSecretRefArgs, VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtr and VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthKubernetesSecretRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput
	ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput
}

type vaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrType VaultDynamicSecretSpecProviderAuthKubernetesSecretRefArgs

func VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtr(v *VaultDynamicSecretSpecProviderAuthKubernetesSecretRefArgs) VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthKubernetesSecretRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput)
}

// Optional secret field containing a Kubernetes ServiceAccount JWT used
// for authenticating with Vault. If a name is specified without a key,
// `token` is the default. If one is not specified, the one bound to
// the controller will be used.
type VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthKubernetesSecretRef) *VaultDynamicSecretSpecProviderAuthKubernetesSecretRef {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthKubernetesSecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthKubernetesSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthKubernetesSecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthKubernetesSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetesSecretRef) VaultDynamicSecretSpecProviderAuthKubernetesSecretRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthKubernetesSecretRef
		return ret
	}).(VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetesSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetesSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetesSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Optional service account field containing the name of a kubernetes ServiceAccount.
// If the service account is specified, the service account secret token JWT will be used
// for authenticating with Vault. If the service account selector is not supplied,
// the secretRef will be used instead.
type VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences []string `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefInput is an input type that accepts VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefArgs and VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefInput` via:
//
//	VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefArgs{...}
type VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput
	ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput
}

// Optional service account field containing the name of a kubernetes ServiceAccount.
// If the service account is specified, the service account secret token JWT will be used
// for authenticating with Vault. If the service account selector is not supplied,
// the secretRef will be used instead.
type VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefArgs struct {
	// Audience specifies the `aud` claim for the service account token
	// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
	// then this audiences will be appended to the list
	Audiences pulumi.StringArrayInput `pulumi:"audiences"`
	// The name of the ServiceAccount resource being referred to.
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput)
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefArgs) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput).ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefArgs, VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtr and VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput
	ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput
}

type vaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrType VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefArgs

func VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtr(v *VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefArgs) VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrType) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrType) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput)
}

// Optional service account field containing the name of a kubernetes ServiceAccount.
// If the service account is specified, the service account secret token JWT will be used
// for authenticating with Vault. If the service account selector is not supplied,
// the secretRef will be used instead.
type VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef) *VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef) []string { return v.Audiences }).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef) VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef
		return ret
	}).(VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput)
}

// Audience specifies the `aud` claim for the service account token
// If the service account uses a well-known annotation for e.g. IRSA or GCP Workload Identity
// then this audiences will be appended to the list
func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput) Audiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef) []string {
		if v == nil {
			return nil
		}
		return v.Audiences
	}).(pulumi.StringArrayOutput)
}

// The name of the ServiceAccount resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Ldap authenticates with Vault by passing username/password pair using
// the LDAP authentication method
type VaultDynamicSecretSpecProviderAuthLdap struct {
	// Path where the LDAP authentication backend is mounted
	// in Vault, e.g: "ldap"
	Path string `pulumi:"path"`
	// SecretRef to a key in a Secret resource containing password for the LDAP
	// user used to authenticate with Vault using the LDAP authentication
	// method
	SecretRef *VaultDynamicSecretSpecProviderAuthLdapSecretRef `pulumi:"secretRef"`
	// Username is a LDAP user name used to authenticate using the LDAP Vault
	// authentication method
	Username string `pulumi:"username"`
}

// Defaults sets the appropriate defaults for VaultDynamicSecretSpecProviderAuthLdap
func (val *VaultDynamicSecretSpecProviderAuthLdap) Defaults() *VaultDynamicSecretSpecProviderAuthLdap {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.Path) {
		tmp.Path = "ldap"
	}
	return &tmp
}

// VaultDynamicSecretSpecProviderAuthLdapInput is an input type that accepts VaultDynamicSecretSpecProviderAuthLdapArgs and VaultDynamicSecretSpecProviderAuthLdapOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthLdapInput` via:
//
//	VaultDynamicSecretSpecProviderAuthLdapArgs{...}
type VaultDynamicSecretSpecProviderAuthLdapInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthLdapOutput() VaultDynamicSecretSpecProviderAuthLdapOutput
	ToVaultDynamicSecretSpecProviderAuthLdapOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthLdapOutput
}

// Ldap authenticates with Vault by passing username/password pair using
// the LDAP authentication method
type VaultDynamicSecretSpecProviderAuthLdapArgs struct {
	// Path where the LDAP authentication backend is mounted
	// in Vault, e.g: "ldap"
	Path pulumi.StringInput `pulumi:"path"`
	// SecretRef to a key in a Secret resource containing password for the LDAP
	// user used to authenticate with Vault using the LDAP authentication
	// method
	SecretRef VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrInput `pulumi:"secretRef"`
	// Username is a LDAP user name used to authenticate using the LDAP Vault
	// authentication method
	Username pulumi.StringInput `pulumi:"username"`
}

// Defaults sets the appropriate defaults for VaultDynamicSecretSpecProviderAuthLdapArgs
func (val *VaultDynamicSecretSpecProviderAuthLdapArgs) Defaults() *VaultDynamicSecretSpecProviderAuthLdapArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Path == nil {
		tmp.Path = pulumi.String("ldap")
	}
	return &tmp
}
func (VaultDynamicSecretSpecProviderAuthLdapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthLdap)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthLdapArgs) ToVaultDynamicSecretSpecProviderAuthLdapOutput() VaultDynamicSecretSpecProviderAuthLdapOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthLdapOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthLdapArgs) ToVaultDynamicSecretSpecProviderAuthLdapOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthLdapOutput)
}

func (i VaultDynamicSecretSpecProviderAuthLdapArgs) ToVaultDynamicSecretSpecProviderAuthLdapPtrOutput() VaultDynamicSecretSpecProviderAuthLdapPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthLdapPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthLdapArgs) ToVaultDynamicSecretSpecProviderAuthLdapPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthLdapOutput).ToVaultDynamicSecretSpecProviderAuthLdapPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthLdapPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthLdapArgs, VaultDynamicSecretSpecProviderAuthLdapPtr and VaultDynamicSecretSpecProviderAuthLdapPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthLdapPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthLdapArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthLdapPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthLdapPtrOutput() VaultDynamicSecretSpecProviderAuthLdapPtrOutput
	ToVaultDynamicSecretSpecProviderAuthLdapPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthLdapPtrOutput
}

type vaultDynamicSecretSpecProviderAuthLdapPtrType VaultDynamicSecretSpecProviderAuthLdapArgs

func VaultDynamicSecretSpecProviderAuthLdapPtr(v *VaultDynamicSecretSpecProviderAuthLdapArgs) VaultDynamicSecretSpecProviderAuthLdapPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthLdapPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthLdapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthLdap)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthLdapPtrType) ToVaultDynamicSecretSpecProviderAuthLdapPtrOutput() VaultDynamicSecretSpecProviderAuthLdapPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthLdapPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthLdapPtrType) ToVaultDynamicSecretSpecProviderAuthLdapPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthLdapPtrOutput)
}

// Ldap authenticates with Vault by passing username/password pair using
// the LDAP authentication method
type VaultDynamicSecretSpecProviderAuthLdapOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthLdapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthLdap)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthLdapOutput) ToVaultDynamicSecretSpecProviderAuthLdapOutput() VaultDynamicSecretSpecProviderAuthLdapOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthLdapOutput) ToVaultDynamicSecretSpecProviderAuthLdapOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthLdapOutput) ToVaultDynamicSecretSpecProviderAuthLdapPtrOutput() VaultDynamicSecretSpecProviderAuthLdapPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthLdapPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthLdapOutput) ToVaultDynamicSecretSpecProviderAuthLdapPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthLdap) *VaultDynamicSecretSpecProviderAuthLdap {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthLdapPtrOutput)
}

// Path where the LDAP authentication backend is mounted
// in Vault, e.g: "ldap"
func (o VaultDynamicSecretSpecProviderAuthLdapOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthLdap) string { return v.Path }).(pulumi.StringOutput)
}

// SecretRef to a key in a Secret resource containing password for the LDAP
// user used to authenticate with Vault using the LDAP authentication
// method
func (o VaultDynamicSecretSpecProviderAuthLdapOutput) SecretRef() VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthLdap) *VaultDynamicSecretSpecProviderAuthLdapSecretRef {
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput)
}

// Username is a LDAP user name used to authenticate using the LDAP Vault
// authentication method
func (o VaultDynamicSecretSpecProviderAuthLdapOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthLdap) string { return v.Username }).(pulumi.StringOutput)
}

type VaultDynamicSecretSpecProviderAuthLdapPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthLdapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthLdap)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthLdapPtrOutput) ToVaultDynamicSecretSpecProviderAuthLdapPtrOutput() VaultDynamicSecretSpecProviderAuthLdapPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthLdapPtrOutput) ToVaultDynamicSecretSpecProviderAuthLdapPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthLdapPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthLdapOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthLdap) VaultDynamicSecretSpecProviderAuthLdap {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthLdap
		return ret
	}).(VaultDynamicSecretSpecProviderAuthLdapOutput)
}

// Path where the LDAP authentication backend is mounted
// in Vault, e.g: "ldap"
func (o VaultDynamicSecretSpecProviderAuthLdapPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthLdap) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// SecretRef to a key in a Secret resource containing password for the LDAP
// user used to authenticate with Vault using the LDAP authentication
// method
func (o VaultDynamicSecretSpecProviderAuthLdapPtrOutput) SecretRef() VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthLdap) *VaultDynamicSecretSpecProviderAuthLdapSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput)
}

// Username is a LDAP user name used to authenticate using the LDAP Vault
// authentication method
func (o VaultDynamicSecretSpecProviderAuthLdapPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthLdap) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// SecretRef to a key in a Secret resource containing password for the LDAP
// user used to authenticate with Vault using the LDAP authentication
// method
type VaultDynamicSecretSpecProviderAuthLdapSecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthLdapSecretRefInput is an input type that accepts VaultDynamicSecretSpecProviderAuthLdapSecretRefArgs and VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthLdapSecretRefInput` via:
//
//	VaultDynamicSecretSpecProviderAuthLdapSecretRefArgs{...}
type VaultDynamicSecretSpecProviderAuthLdapSecretRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthLdapSecretRefOutput() VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput
	ToVaultDynamicSecretSpecProviderAuthLdapSecretRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput
}

// SecretRef to a key in a Secret resource containing password for the LDAP
// user used to authenticate with Vault using the LDAP authentication
// method
type VaultDynamicSecretSpecProviderAuthLdapSecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthLdapSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthLdapSecretRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthLdapSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefOutput() VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthLdapSecretRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthLdapSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput)
}

func (i VaultDynamicSecretSpecProviderAuthLdapSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthLdapSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput).ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthLdapSecretRefArgs, VaultDynamicSecretSpecProviderAuthLdapSecretRefPtr and VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthLdapSecretRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput
	ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput
}

type vaultDynamicSecretSpecProviderAuthLdapSecretRefPtrType VaultDynamicSecretSpecProviderAuthLdapSecretRefArgs

func VaultDynamicSecretSpecProviderAuthLdapSecretRefPtr(v *VaultDynamicSecretSpecProviderAuthLdapSecretRefArgs) VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthLdapSecretRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthLdapSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthLdapSecretRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthLdapSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthLdapSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput)
}

// SecretRef to a key in a Secret resource containing password for the LDAP
// user used to authenticate with Vault using the LDAP authentication
// method
type VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthLdapSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefOutput() VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthLdapSecretRef) *VaultDynamicSecretSpecProviderAuthLdapSecretRef {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthLdapSecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthLdapSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthLdapSecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthLdapSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthLdapSecretRef) VaultDynamicSecretSpecProviderAuthLdapSecretRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthLdapSecretRef
		return ret
	}).(VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthLdapSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthLdapSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthLdapSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// TokenSecretRef authenticates with Vault by presenting a token.
type VaultDynamicSecretSpecProviderAuthTokenSecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthTokenSecretRefInput is an input type that accepts VaultDynamicSecretSpecProviderAuthTokenSecretRefArgs and VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthTokenSecretRefInput` via:
//
//	VaultDynamicSecretSpecProviderAuthTokenSecretRefArgs{...}
type VaultDynamicSecretSpecProviderAuthTokenSecretRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthTokenSecretRefOutput() VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput
	ToVaultDynamicSecretSpecProviderAuthTokenSecretRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput
}

// TokenSecretRef authenticates with Vault by presenting a token.
type VaultDynamicSecretSpecProviderAuthTokenSecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthTokenSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthTokenSecretRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthTokenSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefOutput() VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthTokenSecretRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthTokenSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput)
}

func (i VaultDynamicSecretSpecProviderAuthTokenSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthTokenSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput).ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthTokenSecretRefArgs, VaultDynamicSecretSpecProviderAuthTokenSecretRefPtr and VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthTokenSecretRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput
	ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput
}

type vaultDynamicSecretSpecProviderAuthTokenSecretRefPtrType VaultDynamicSecretSpecProviderAuthTokenSecretRefArgs

func VaultDynamicSecretSpecProviderAuthTokenSecretRefPtr(v *VaultDynamicSecretSpecProviderAuthTokenSecretRefArgs) VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthTokenSecretRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthTokenSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthTokenSecretRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthTokenSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthTokenSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput)
}

// TokenSecretRef authenticates with Vault by presenting a token.
type VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthTokenSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefOutput() VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthTokenSecretRef) *VaultDynamicSecretSpecProviderAuthTokenSecretRef {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthTokenSecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthTokenSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthTokenSecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthTokenSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthTokenSecretRef) VaultDynamicSecretSpecProviderAuthTokenSecretRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthTokenSecretRef
		return ret
	}).(VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthTokenSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthTokenSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthTokenSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// UserPass authenticates with Vault by passing username/password pair
type VaultDynamicSecretSpecProviderAuthUserPass struct {
	// Path where the UserPassword authentication backend is mounted
	// in Vault, e.g: "user"
	Path string `pulumi:"path"`
	// SecretRef to a key in a Secret resource containing password for the
	// user used to authenticate with Vault using the UserPass authentication
	// method
	SecretRef *VaultDynamicSecretSpecProviderAuthUserPassSecretRef `pulumi:"secretRef"`
	// Username is a user name used to authenticate using the UserPass Vault
	// authentication method
	Username string `pulumi:"username"`
}

// Defaults sets the appropriate defaults for VaultDynamicSecretSpecProviderAuthUserPass
func (val *VaultDynamicSecretSpecProviderAuthUserPass) Defaults() *VaultDynamicSecretSpecProviderAuthUserPass {
	if val == nil {
		return nil
	}
	tmp := *val
	if utilities.IsZero(tmp.Path) {
		tmp.Path = "user"
	}
	return &tmp
}

// VaultDynamicSecretSpecProviderAuthUserPassInput is an input type that accepts VaultDynamicSecretSpecProviderAuthUserPassArgs and VaultDynamicSecretSpecProviderAuthUserPassOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthUserPassInput` via:
//
//	VaultDynamicSecretSpecProviderAuthUserPassArgs{...}
type VaultDynamicSecretSpecProviderAuthUserPassInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthUserPassOutput() VaultDynamicSecretSpecProviderAuthUserPassOutput
	ToVaultDynamicSecretSpecProviderAuthUserPassOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthUserPassOutput
}

// UserPass authenticates with Vault by passing username/password pair
type VaultDynamicSecretSpecProviderAuthUserPassArgs struct {
	// Path where the UserPassword authentication backend is mounted
	// in Vault, e.g: "user"
	Path pulumi.StringInput `pulumi:"path"`
	// SecretRef to a key in a Secret resource containing password for the
	// user used to authenticate with Vault using the UserPass authentication
	// method
	SecretRef VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrInput `pulumi:"secretRef"`
	// Username is a user name used to authenticate using the UserPass Vault
	// authentication method
	Username pulumi.StringInput `pulumi:"username"`
}

// Defaults sets the appropriate defaults for VaultDynamicSecretSpecProviderAuthUserPassArgs
func (val *VaultDynamicSecretSpecProviderAuthUserPassArgs) Defaults() *VaultDynamicSecretSpecProviderAuthUserPassArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Path == nil {
		tmp.Path = pulumi.String("user")
	}
	return &tmp
}
func (VaultDynamicSecretSpecProviderAuthUserPassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthUserPass)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthUserPassArgs) ToVaultDynamicSecretSpecProviderAuthUserPassOutput() VaultDynamicSecretSpecProviderAuthUserPassOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthUserPassOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthUserPassArgs) ToVaultDynamicSecretSpecProviderAuthUserPassOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthUserPassOutput)
}

func (i VaultDynamicSecretSpecProviderAuthUserPassArgs) ToVaultDynamicSecretSpecProviderAuthUserPassPtrOutput() VaultDynamicSecretSpecProviderAuthUserPassPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthUserPassPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthUserPassArgs) ToVaultDynamicSecretSpecProviderAuthUserPassPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthUserPassOutput).ToVaultDynamicSecretSpecProviderAuthUserPassPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthUserPassPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthUserPassArgs, VaultDynamicSecretSpecProviderAuthUserPassPtr and VaultDynamicSecretSpecProviderAuthUserPassPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthUserPassPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthUserPassArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthUserPassPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthUserPassPtrOutput() VaultDynamicSecretSpecProviderAuthUserPassPtrOutput
	ToVaultDynamicSecretSpecProviderAuthUserPassPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthUserPassPtrOutput
}

type vaultDynamicSecretSpecProviderAuthUserPassPtrType VaultDynamicSecretSpecProviderAuthUserPassArgs

func VaultDynamicSecretSpecProviderAuthUserPassPtr(v *VaultDynamicSecretSpecProviderAuthUserPassArgs) VaultDynamicSecretSpecProviderAuthUserPassPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthUserPassPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthUserPassPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthUserPass)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthUserPassPtrType) ToVaultDynamicSecretSpecProviderAuthUserPassPtrOutput() VaultDynamicSecretSpecProviderAuthUserPassPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthUserPassPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthUserPassPtrType) ToVaultDynamicSecretSpecProviderAuthUserPassPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthUserPassPtrOutput)
}

// UserPass authenticates with Vault by passing username/password pair
type VaultDynamicSecretSpecProviderAuthUserPassOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthUserPassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthUserPass)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthUserPassOutput) ToVaultDynamicSecretSpecProviderAuthUserPassOutput() VaultDynamicSecretSpecProviderAuthUserPassOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthUserPassOutput) ToVaultDynamicSecretSpecProviderAuthUserPassOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthUserPassOutput) ToVaultDynamicSecretSpecProviderAuthUserPassPtrOutput() VaultDynamicSecretSpecProviderAuthUserPassPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthUserPassPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthUserPassOutput) ToVaultDynamicSecretSpecProviderAuthUserPassPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthUserPass) *VaultDynamicSecretSpecProviderAuthUserPass {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthUserPassPtrOutput)
}

// Path where the UserPassword authentication backend is mounted
// in Vault, e.g: "user"
func (o VaultDynamicSecretSpecProviderAuthUserPassOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthUserPass) string { return v.Path }).(pulumi.StringOutput)
}

// SecretRef to a key in a Secret resource containing password for the
// user used to authenticate with Vault using the UserPass authentication
// method
func (o VaultDynamicSecretSpecProviderAuthUserPassOutput) SecretRef() VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthUserPass) *VaultDynamicSecretSpecProviderAuthUserPassSecretRef {
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput)
}

// Username is a user name used to authenticate using the UserPass Vault
// authentication method
func (o VaultDynamicSecretSpecProviderAuthUserPassOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthUserPass) string { return v.Username }).(pulumi.StringOutput)
}

type VaultDynamicSecretSpecProviderAuthUserPassPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthUserPassPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthUserPass)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthUserPassPtrOutput) ToVaultDynamicSecretSpecProviderAuthUserPassPtrOutput() VaultDynamicSecretSpecProviderAuthUserPassPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthUserPassPtrOutput) ToVaultDynamicSecretSpecProviderAuthUserPassPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthUserPassPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthUserPassOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthUserPass) VaultDynamicSecretSpecProviderAuthUserPass {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthUserPass
		return ret
	}).(VaultDynamicSecretSpecProviderAuthUserPassOutput)
}

// Path where the UserPassword authentication backend is mounted
// in Vault, e.g: "user"
func (o VaultDynamicSecretSpecProviderAuthUserPassPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthUserPass) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// SecretRef to a key in a Secret resource containing password for the
// user used to authenticate with Vault using the UserPass authentication
// method
func (o VaultDynamicSecretSpecProviderAuthUserPassPtrOutput) SecretRef() VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthUserPass) *VaultDynamicSecretSpecProviderAuthUserPassSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput)
}

// Username is a user name used to authenticate using the UserPass Vault
// authentication method
func (o VaultDynamicSecretSpecProviderAuthUserPassPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthUserPass) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// SecretRef to a key in a Secret resource containing password for the
// user used to authenticate with Vault using the UserPass authentication
// method
type VaultDynamicSecretSpecProviderAuthUserPassSecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderAuthUserPassSecretRefInput is an input type that accepts VaultDynamicSecretSpecProviderAuthUserPassSecretRefArgs and VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthUserPassSecretRefInput` via:
//
//	VaultDynamicSecretSpecProviderAuthUserPassSecretRefArgs{...}
type VaultDynamicSecretSpecProviderAuthUserPassSecretRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput() VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput
	ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput
}

// SecretRef to a key in a Secret resource containing password for the
// user used to authenticate with Vault using the UserPass authentication
// method
type VaultDynamicSecretSpecProviderAuthUserPassSecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderAuthUserPassSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthUserPassSecretRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderAuthUserPassSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput() VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthUserPassSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput)
}

func (i VaultDynamicSecretSpecProviderAuthUserPassSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderAuthUserPassSecretRefArgs) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput).ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderAuthUserPassSecretRefArgs, VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtr and VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderAuthUserPassSecretRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput
	ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput
}

type vaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrType VaultDynamicSecretSpecProviderAuthUserPassSecretRefArgs

func VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtr(v *VaultDynamicSecretSpecProviderAuthUserPassSecretRefArgs) VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrInput {
	return (*vaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthUserPassSecretRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrType) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput)
}

// SecretRef to a key in a Secret resource containing password for the
// user used to authenticate with Vault using the UserPass authentication
// method
type VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthUserPassSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput() VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderAuthUserPassSecretRef) *VaultDynamicSecretSpecProviderAuthUserPassSecretRef {
		return &v
	}).(VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthUserPassSecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthUserPassSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderAuthUserPassSecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderAuthUserPassSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput() VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput) Elem() VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthUserPassSecretRef) VaultDynamicSecretSpecProviderAuthUserPassSecretRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderAuthUserPassSecretRef
		return ret
	}).(VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthUserPassSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthUserPassSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderAuthUserPassSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The provider for the CA bundle to use to validate Vault server certificate.
type VaultDynamicSecretSpecProviderCaProvider struct {
	// The key where the CA certificate can be found in the Secret or ConfigMap.
	Key *string `pulumi:"key"`
	// The name of the object located at the provider type.
	Name string `pulumi:"name"`
	// The namespace the Provider type is in.
	// Can only be defined when used in a ClusterSecretStore.
	Namespace *string `pulumi:"namespace"`
	// The type of provider to use such as "Secret", or "ConfigMap".
	Type string `pulumi:"type"`
}

// VaultDynamicSecretSpecProviderCaProviderInput is an input type that accepts VaultDynamicSecretSpecProviderCaProviderArgs and VaultDynamicSecretSpecProviderCaProviderOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderCaProviderInput` via:
//
//	VaultDynamicSecretSpecProviderCaProviderArgs{...}
type VaultDynamicSecretSpecProviderCaProviderInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderCaProviderOutput() VaultDynamicSecretSpecProviderCaProviderOutput
	ToVaultDynamicSecretSpecProviderCaProviderOutputWithContext(context.Context) VaultDynamicSecretSpecProviderCaProviderOutput
}

// The provider for the CA bundle to use to validate Vault server certificate.
type VaultDynamicSecretSpecProviderCaProviderArgs struct {
	// The key where the CA certificate can be found in the Secret or ConfigMap.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the object located at the provider type.
	Name pulumi.StringInput `pulumi:"name"`
	// The namespace the Provider type is in.
	// Can only be defined when used in a ClusterSecretStore.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The type of provider to use such as "Secret", or "ConfigMap".
	Type pulumi.StringInput `pulumi:"type"`
}

func (VaultDynamicSecretSpecProviderCaProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderCaProvider)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderCaProviderArgs) ToVaultDynamicSecretSpecProviderCaProviderOutput() VaultDynamicSecretSpecProviderCaProviderOutput {
	return i.ToVaultDynamicSecretSpecProviderCaProviderOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderCaProviderArgs) ToVaultDynamicSecretSpecProviderCaProviderOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderCaProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderCaProviderOutput)
}

func (i VaultDynamicSecretSpecProviderCaProviderArgs) ToVaultDynamicSecretSpecProviderCaProviderPtrOutput() VaultDynamicSecretSpecProviderCaProviderPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderCaProviderPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderCaProviderArgs) ToVaultDynamicSecretSpecProviderCaProviderPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderCaProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderCaProviderOutput).ToVaultDynamicSecretSpecProviderCaProviderPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderCaProviderPtrInput is an input type that accepts VaultDynamicSecretSpecProviderCaProviderArgs, VaultDynamicSecretSpecProviderCaProviderPtr and VaultDynamicSecretSpecProviderCaProviderPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderCaProviderPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderCaProviderArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderCaProviderPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderCaProviderPtrOutput() VaultDynamicSecretSpecProviderCaProviderPtrOutput
	ToVaultDynamicSecretSpecProviderCaProviderPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderCaProviderPtrOutput
}

type vaultDynamicSecretSpecProviderCaProviderPtrType VaultDynamicSecretSpecProviderCaProviderArgs

func VaultDynamicSecretSpecProviderCaProviderPtr(v *VaultDynamicSecretSpecProviderCaProviderArgs) VaultDynamicSecretSpecProviderCaProviderPtrInput {
	return (*vaultDynamicSecretSpecProviderCaProviderPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderCaProviderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderCaProvider)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderCaProviderPtrType) ToVaultDynamicSecretSpecProviderCaProviderPtrOutput() VaultDynamicSecretSpecProviderCaProviderPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderCaProviderPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderCaProviderPtrType) ToVaultDynamicSecretSpecProviderCaProviderPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderCaProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderCaProviderPtrOutput)
}

// The provider for the CA bundle to use to validate Vault server certificate.
type VaultDynamicSecretSpecProviderCaProviderOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderCaProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderCaProvider)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderCaProviderOutput) ToVaultDynamicSecretSpecProviderCaProviderOutput() VaultDynamicSecretSpecProviderCaProviderOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderCaProviderOutput) ToVaultDynamicSecretSpecProviderCaProviderOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderCaProviderOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderCaProviderOutput) ToVaultDynamicSecretSpecProviderCaProviderPtrOutput() VaultDynamicSecretSpecProviderCaProviderPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderCaProviderPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderCaProviderOutput) ToVaultDynamicSecretSpecProviderCaProviderPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderCaProviderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderCaProvider) *VaultDynamicSecretSpecProviderCaProvider {
		return &v
	}).(VaultDynamicSecretSpecProviderCaProviderPtrOutput)
}

// The key where the CA certificate can be found in the Secret or ConfigMap.
func (o VaultDynamicSecretSpecProviderCaProviderOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderCaProvider) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the object located at the provider type.
func (o VaultDynamicSecretSpecProviderCaProviderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderCaProvider) string { return v.Name }).(pulumi.StringOutput)
}

// The namespace the Provider type is in.
// Can only be defined when used in a ClusterSecretStore.
func (o VaultDynamicSecretSpecProviderCaProviderOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderCaProvider) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The type of provider to use such as "Secret", or "ConfigMap".
func (o VaultDynamicSecretSpecProviderCaProviderOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderCaProvider) string { return v.Type }).(pulumi.StringOutput)
}

type VaultDynamicSecretSpecProviderCaProviderPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderCaProviderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderCaProvider)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderCaProviderPtrOutput) ToVaultDynamicSecretSpecProviderCaProviderPtrOutput() VaultDynamicSecretSpecProviderCaProviderPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderCaProviderPtrOutput) ToVaultDynamicSecretSpecProviderCaProviderPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderCaProviderPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderCaProviderPtrOutput) Elem() VaultDynamicSecretSpecProviderCaProviderOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderCaProvider) VaultDynamicSecretSpecProviderCaProvider {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderCaProvider
		return ret
	}).(VaultDynamicSecretSpecProviderCaProviderOutput)
}

// The key where the CA certificate can be found in the Secret or ConfigMap.
func (o VaultDynamicSecretSpecProviderCaProviderPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderCaProvider) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the object located at the provider type.
func (o VaultDynamicSecretSpecProviderCaProviderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderCaProvider) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The namespace the Provider type is in.
// Can only be defined when used in a ClusterSecretStore.
func (o VaultDynamicSecretSpecProviderCaProviderPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderCaProvider) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The type of provider to use such as "Secret", or "ConfigMap".
func (o VaultDynamicSecretSpecProviderCaProviderPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderCaProvider) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The configuration used for client side related TLS communication, when the Vault server
// requires mutual authentication. Only used if the Server URL is using HTTPS protocol.
// This parameter is ignored for plain HTTP protocol connection.
// It's worth noting this configuration is different from the "TLS certificates auth method",
// which is available under the `auth.cert` section.
type VaultDynamicSecretSpecProviderTls struct {
	// CertSecretRef is a certificate added to the transport layer
	// when communicating with the Vault server.
	// If no key for the Secret is specified, external-secret will default to 'tls.crt'.
	CertSecretRef *VaultDynamicSecretSpecProviderTlsCertSecretRef `pulumi:"certSecretRef"`
	// KeySecretRef to a key in a Secret resource containing client private key
	// added to the transport layer when communicating with the Vault server.
	// If no key for the Secret is specified, external-secret will default to 'tls.key'.
	KeySecretRef *VaultDynamicSecretSpecProviderTlsKeySecretRef `pulumi:"keySecretRef"`
}

// VaultDynamicSecretSpecProviderTlsInput is an input type that accepts VaultDynamicSecretSpecProviderTlsArgs and VaultDynamicSecretSpecProviderTlsOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderTlsInput` via:
//
//	VaultDynamicSecretSpecProviderTlsArgs{...}
type VaultDynamicSecretSpecProviderTlsInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderTlsOutput() VaultDynamicSecretSpecProviderTlsOutput
	ToVaultDynamicSecretSpecProviderTlsOutputWithContext(context.Context) VaultDynamicSecretSpecProviderTlsOutput
}

// The configuration used for client side related TLS communication, when the Vault server
// requires mutual authentication. Only used if the Server URL is using HTTPS protocol.
// This parameter is ignored for plain HTTP protocol connection.
// It's worth noting this configuration is different from the "TLS certificates auth method",
// which is available under the `auth.cert` section.
type VaultDynamicSecretSpecProviderTlsArgs struct {
	// CertSecretRef is a certificate added to the transport layer
	// when communicating with the Vault server.
	// If no key for the Secret is specified, external-secret will default to 'tls.crt'.
	CertSecretRef VaultDynamicSecretSpecProviderTlsCertSecretRefPtrInput `pulumi:"certSecretRef"`
	// KeySecretRef to a key in a Secret resource containing client private key
	// added to the transport layer when communicating with the Vault server.
	// If no key for the Secret is specified, external-secret will default to 'tls.key'.
	KeySecretRef VaultDynamicSecretSpecProviderTlsKeySecretRefPtrInput `pulumi:"keySecretRef"`
}

func (VaultDynamicSecretSpecProviderTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderTls)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderTlsArgs) ToVaultDynamicSecretSpecProviderTlsOutput() VaultDynamicSecretSpecProviderTlsOutput {
	return i.ToVaultDynamicSecretSpecProviderTlsOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderTlsArgs) ToVaultDynamicSecretSpecProviderTlsOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderTlsOutput)
}

func (i VaultDynamicSecretSpecProviderTlsArgs) ToVaultDynamicSecretSpecProviderTlsPtrOutput() VaultDynamicSecretSpecProviderTlsPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderTlsPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderTlsArgs) ToVaultDynamicSecretSpecProviderTlsPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderTlsOutput).ToVaultDynamicSecretSpecProviderTlsPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderTlsPtrInput is an input type that accepts VaultDynamicSecretSpecProviderTlsArgs, VaultDynamicSecretSpecProviderTlsPtr and VaultDynamicSecretSpecProviderTlsPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderTlsPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderTlsArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderTlsPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderTlsPtrOutput() VaultDynamicSecretSpecProviderTlsPtrOutput
	ToVaultDynamicSecretSpecProviderTlsPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderTlsPtrOutput
}

type vaultDynamicSecretSpecProviderTlsPtrType VaultDynamicSecretSpecProviderTlsArgs

func VaultDynamicSecretSpecProviderTlsPtr(v *VaultDynamicSecretSpecProviderTlsArgs) VaultDynamicSecretSpecProviderTlsPtrInput {
	return (*vaultDynamicSecretSpecProviderTlsPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderTls)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderTlsPtrType) ToVaultDynamicSecretSpecProviderTlsPtrOutput() VaultDynamicSecretSpecProviderTlsPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderTlsPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderTlsPtrType) ToVaultDynamicSecretSpecProviderTlsPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderTlsPtrOutput)
}

// The configuration used for client side related TLS communication, when the Vault server
// requires mutual authentication. Only used if the Server URL is using HTTPS protocol.
// This parameter is ignored for plain HTTP protocol connection.
// It's worth noting this configuration is different from the "TLS certificates auth method",
// which is available under the `auth.cert` section.
type VaultDynamicSecretSpecProviderTlsOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderTls)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderTlsOutput) ToVaultDynamicSecretSpecProviderTlsOutput() VaultDynamicSecretSpecProviderTlsOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsOutput) ToVaultDynamicSecretSpecProviderTlsOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsOutput) ToVaultDynamicSecretSpecProviderTlsPtrOutput() VaultDynamicSecretSpecProviderTlsPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderTlsPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderTlsOutput) ToVaultDynamicSecretSpecProviderTlsPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderTls) *VaultDynamicSecretSpecProviderTls {
		return &v
	}).(VaultDynamicSecretSpecProviderTlsPtrOutput)
}

// CertSecretRef is a certificate added to the transport layer
// when communicating with the Vault server.
// If no key for the Secret is specified, external-secret will default to 'tls.crt'.
func (o VaultDynamicSecretSpecProviderTlsOutput) CertSecretRef() VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderTls) *VaultDynamicSecretSpecProviderTlsCertSecretRef {
		return v.CertSecretRef
	}).(VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput)
}

// KeySecretRef to a key in a Secret resource containing client private key
// added to the transport layer when communicating with the Vault server.
// If no key for the Secret is specified, external-secret will default to 'tls.key'.
func (o VaultDynamicSecretSpecProviderTlsOutput) KeySecretRef() VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderTls) *VaultDynamicSecretSpecProviderTlsKeySecretRef {
		return v.KeySecretRef
	}).(VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput)
}

type VaultDynamicSecretSpecProviderTlsPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderTls)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderTlsPtrOutput) ToVaultDynamicSecretSpecProviderTlsPtrOutput() VaultDynamicSecretSpecProviderTlsPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsPtrOutput) ToVaultDynamicSecretSpecProviderTlsPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsPtrOutput) Elem() VaultDynamicSecretSpecProviderTlsOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTls) VaultDynamicSecretSpecProviderTls {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderTls
		return ret
	}).(VaultDynamicSecretSpecProviderTlsOutput)
}

// CertSecretRef is a certificate added to the transport layer
// when communicating with the Vault server.
// If no key for the Secret is specified, external-secret will default to 'tls.crt'.
func (o VaultDynamicSecretSpecProviderTlsPtrOutput) CertSecretRef() VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTls) *VaultDynamicSecretSpecProviderTlsCertSecretRef {
		if v == nil {
			return nil
		}
		return v.CertSecretRef
	}).(VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput)
}

// KeySecretRef to a key in a Secret resource containing client private key
// added to the transport layer when communicating with the Vault server.
// If no key for the Secret is specified, external-secret will default to 'tls.key'.
func (o VaultDynamicSecretSpecProviderTlsPtrOutput) KeySecretRef() VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTls) *VaultDynamicSecretSpecProviderTlsKeySecretRef {
		if v == nil {
			return nil
		}
		return v.KeySecretRef
	}).(VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput)
}

// CertSecretRef is a certificate added to the transport layer
// when communicating with the Vault server.
// If no key for the Secret is specified, external-secret will default to 'tls.crt'.
type VaultDynamicSecretSpecProviderTlsCertSecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderTlsCertSecretRefInput is an input type that accepts VaultDynamicSecretSpecProviderTlsCertSecretRefArgs and VaultDynamicSecretSpecProviderTlsCertSecretRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderTlsCertSecretRefInput` via:
//
//	VaultDynamicSecretSpecProviderTlsCertSecretRefArgs{...}
type VaultDynamicSecretSpecProviderTlsCertSecretRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderTlsCertSecretRefOutput() VaultDynamicSecretSpecProviderTlsCertSecretRefOutput
	ToVaultDynamicSecretSpecProviderTlsCertSecretRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderTlsCertSecretRefOutput
}

// CertSecretRef is a certificate added to the transport layer
// when communicating with the Vault server.
// If no key for the Secret is specified, external-secret will default to 'tls.crt'.
type VaultDynamicSecretSpecProviderTlsCertSecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderTlsCertSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsCertSecretRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderTlsCertSecretRefArgs) ToVaultDynamicSecretSpecProviderTlsCertSecretRefOutput() VaultDynamicSecretSpecProviderTlsCertSecretRefOutput {
	return i.ToVaultDynamicSecretSpecProviderTlsCertSecretRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderTlsCertSecretRefArgs) ToVaultDynamicSecretSpecProviderTlsCertSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsCertSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderTlsCertSecretRefOutput)
}

func (i VaultDynamicSecretSpecProviderTlsCertSecretRefArgs) ToVaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput() VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderTlsCertSecretRefArgs) ToVaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderTlsCertSecretRefOutput).ToVaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderTlsCertSecretRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderTlsCertSecretRefArgs, VaultDynamicSecretSpecProviderTlsCertSecretRefPtr and VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderTlsCertSecretRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderTlsCertSecretRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderTlsCertSecretRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput() VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput
	ToVaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput
}

type vaultDynamicSecretSpecProviderTlsCertSecretRefPtrType VaultDynamicSecretSpecProviderTlsCertSecretRefArgs

func VaultDynamicSecretSpecProviderTlsCertSecretRefPtr(v *VaultDynamicSecretSpecProviderTlsCertSecretRefArgs) VaultDynamicSecretSpecProviderTlsCertSecretRefPtrInput {
	return (*vaultDynamicSecretSpecProviderTlsCertSecretRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderTlsCertSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderTlsCertSecretRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderTlsCertSecretRefPtrType) ToVaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput() VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderTlsCertSecretRefPtrType) ToVaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput)
}

// CertSecretRef is a certificate added to the transport layer
// when communicating with the Vault server.
// If no key for the Secret is specified, external-secret will default to 'tls.crt'.
type VaultDynamicSecretSpecProviderTlsCertSecretRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderTlsCertSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsCertSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderTlsCertSecretRefOutput) ToVaultDynamicSecretSpecProviderTlsCertSecretRefOutput() VaultDynamicSecretSpecProviderTlsCertSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsCertSecretRefOutput) ToVaultDynamicSecretSpecProviderTlsCertSecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsCertSecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsCertSecretRefOutput) ToVaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput() VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderTlsCertSecretRefOutput) ToVaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderTlsCertSecretRef) *VaultDynamicSecretSpecProviderTlsCertSecretRef {
		return &v
	}).(VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderTlsCertSecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderTlsCertSecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderTlsCertSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderTlsCertSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderTlsCertSecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderTlsCertSecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderTlsCertSecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput() VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput) ToVaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput) Elem() VaultDynamicSecretSpecProviderTlsCertSecretRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTlsCertSecretRef) VaultDynamicSecretSpecProviderTlsCertSecretRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderTlsCertSecretRef
		return ret
	}).(VaultDynamicSecretSpecProviderTlsCertSecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTlsCertSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTlsCertSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTlsCertSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// KeySecretRef to a key in a Secret resource containing client private key
// added to the transport layer when communicating with the Vault server.
// If no key for the Secret is specified, external-secret will default to 'tls.key'.
type VaultDynamicSecretSpecProviderTlsKeySecretRef struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// VaultDynamicSecretSpecProviderTlsKeySecretRefInput is an input type that accepts VaultDynamicSecretSpecProviderTlsKeySecretRefArgs and VaultDynamicSecretSpecProviderTlsKeySecretRefOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderTlsKeySecretRefInput` via:
//
//	VaultDynamicSecretSpecProviderTlsKeySecretRefArgs{...}
type VaultDynamicSecretSpecProviderTlsKeySecretRefInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderTlsKeySecretRefOutput() VaultDynamicSecretSpecProviderTlsKeySecretRefOutput
	ToVaultDynamicSecretSpecProviderTlsKeySecretRefOutputWithContext(context.Context) VaultDynamicSecretSpecProviderTlsKeySecretRefOutput
}

// KeySecretRef to a key in a Secret resource containing client private key
// added to the transport layer when communicating with the Vault server.
// If no key for the Secret is specified, external-secret will default to 'tls.key'.
type VaultDynamicSecretSpecProviderTlsKeySecretRefArgs struct {
	// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
	// defaulted, in others it may be required.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
	// to the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VaultDynamicSecretSpecProviderTlsKeySecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsKeySecretRef)(nil)).Elem()
}

func (i VaultDynamicSecretSpecProviderTlsKeySecretRefArgs) ToVaultDynamicSecretSpecProviderTlsKeySecretRefOutput() VaultDynamicSecretSpecProviderTlsKeySecretRefOutput {
	return i.ToVaultDynamicSecretSpecProviderTlsKeySecretRefOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderTlsKeySecretRefArgs) ToVaultDynamicSecretSpecProviderTlsKeySecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsKeySecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderTlsKeySecretRefOutput)
}

func (i VaultDynamicSecretSpecProviderTlsKeySecretRefArgs) ToVaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput() VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutputWithContext(context.Background())
}

func (i VaultDynamicSecretSpecProviderTlsKeySecretRefArgs) ToVaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderTlsKeySecretRefOutput).ToVaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutputWithContext(ctx)
}

// VaultDynamicSecretSpecProviderTlsKeySecretRefPtrInput is an input type that accepts VaultDynamicSecretSpecProviderTlsKeySecretRefArgs, VaultDynamicSecretSpecProviderTlsKeySecretRefPtr and VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput values.
// You can construct a concrete instance of `VaultDynamicSecretSpecProviderTlsKeySecretRefPtrInput` via:
//
//	        VaultDynamicSecretSpecProviderTlsKeySecretRefArgs{...}
//
//	or:
//
//	        nil
type VaultDynamicSecretSpecProviderTlsKeySecretRefPtrInput interface {
	pulumi.Input

	ToVaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput() VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput
	ToVaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutputWithContext(context.Context) VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput
}

type vaultDynamicSecretSpecProviderTlsKeySecretRefPtrType VaultDynamicSecretSpecProviderTlsKeySecretRefArgs

func VaultDynamicSecretSpecProviderTlsKeySecretRefPtr(v *VaultDynamicSecretSpecProviderTlsKeySecretRefArgs) VaultDynamicSecretSpecProviderTlsKeySecretRefPtrInput {
	return (*vaultDynamicSecretSpecProviderTlsKeySecretRefPtrType)(v)
}

func (*vaultDynamicSecretSpecProviderTlsKeySecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderTlsKeySecretRef)(nil)).Elem()
}

func (i *vaultDynamicSecretSpecProviderTlsKeySecretRefPtrType) ToVaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput() VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput {
	return i.ToVaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutputWithContext(context.Background())
}

func (i *vaultDynamicSecretSpecProviderTlsKeySecretRefPtrType) ToVaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput)
}

// KeySecretRef to a key in a Secret resource containing client private key
// added to the transport layer when communicating with the Vault server.
// If no key for the Secret is specified, external-secret will default to 'tls.key'.
type VaultDynamicSecretSpecProviderTlsKeySecretRefOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderTlsKeySecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsKeySecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderTlsKeySecretRefOutput) ToVaultDynamicSecretSpecProviderTlsKeySecretRefOutput() VaultDynamicSecretSpecProviderTlsKeySecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsKeySecretRefOutput) ToVaultDynamicSecretSpecProviderTlsKeySecretRefOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsKeySecretRefOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsKeySecretRefOutput) ToVaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput() VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput {
	return o.ToVaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutputWithContext(context.Background())
}

func (o VaultDynamicSecretSpecProviderTlsKeySecretRefOutput) ToVaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VaultDynamicSecretSpecProviderTlsKeySecretRef) *VaultDynamicSecretSpecProviderTlsKeySecretRef {
		return &v
	}).(VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderTlsKeySecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderTlsKeySecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderTlsKeySecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderTlsKeySecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderTlsKeySecretRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultDynamicSecretSpecProviderTlsKeySecretRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput struct{ *pulumi.OutputState }

func (VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VaultDynamicSecretSpecProviderTlsKeySecretRef)(nil)).Elem()
}

func (o VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput) ToVaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput() VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput) ToVaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutputWithContext(ctx context.Context) VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput {
	return o
}

func (o VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput) Elem() VaultDynamicSecretSpecProviderTlsKeySecretRefOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTlsKeySecretRef) VaultDynamicSecretSpecProviderTlsKeySecretRef {
		if v != nil {
			return *v
		}
		var ret VaultDynamicSecretSpecProviderTlsKeySecretRef
		return ret
	}).(VaultDynamicSecretSpecProviderTlsKeySecretRefOutput)
}

// The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be
// defaulted, in others it may be required.
func (o VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTlsKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTlsKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the resource being referred to. Ignored if referent is not cluster-scoped. cluster-scoped defaults
// to the namespace of the referent.
func (o VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VaultDynamicSecretSpecProviderTlsKeySecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Webhook connects to a third party API server to handle the secrets generation
// configuration parameters in spec.
// You can specify the server, the token, and additional body parameters.
// See documentation for the full API specification for requests and responses.
type WebhookType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// WebhookSpec controls the behavior of the external generator. Any body parameters should be passed to the server through the parameters field.
	Spec *WebhookSpec `pulumi:"spec"`
}

type WebhookMetadata struct {
}

// WebhookSpec controls the behavior of the external generator. Any body parameters should be passed to the server through the parameters field.
type WebhookSpec struct {
	// Body
	Body *string `pulumi:"body"`
	// PEM encoded CA bundle used to validate webhook server certificate. Only used
	// if the Server URL is using HTTPS protocol. This parameter is ignored for
	// plain HTTP protocol connection. If not set the system root certificates
	// are used to validate the TLS connection.
	CaBundle *string `pulumi:"caBundle"`
	// The provider for the CA bundle to use to validate webhook server certificate.
	CaProvider *WebhookSpecCaProvider `pulumi:"caProvider"`
	// Headers
	Headers map[string]string `pulumi:"headers"`
	// Webhook Method
	Method *string `pulumi:"method"`
	// Result formatting
	Result WebhookSpecResult `pulumi:"result"`
	// Secrets to fill in templates
	// These secrets will be passed to the templating function as key value pairs under the given name
	Secrets []WebhookSpecSecrets `pulumi:"secrets"`
	// Timeout
	Timeout *string `pulumi:"timeout"`
	// Webhook url to call
	Url string `pulumi:"url"`
}

// WebhookSpecInput is an input type that accepts WebhookSpecArgs and WebhookSpecOutput values.
// You can construct a concrete instance of `WebhookSpecInput` via:
//
//	WebhookSpecArgs{...}
type WebhookSpecInput interface {
	pulumi.Input

	ToWebhookSpecOutput() WebhookSpecOutput
	ToWebhookSpecOutputWithContext(context.Context) WebhookSpecOutput
}

// WebhookSpec controls the behavior of the external generator. Any body parameters should be passed to the server through the parameters field.
type WebhookSpecArgs struct {
	// Body
	Body pulumi.StringPtrInput `pulumi:"body"`
	// PEM encoded CA bundle used to validate webhook server certificate. Only used
	// if the Server URL is using HTTPS protocol. This parameter is ignored for
	// plain HTTP protocol connection. If not set the system root certificates
	// are used to validate the TLS connection.
	CaBundle pulumi.StringPtrInput `pulumi:"caBundle"`
	// The provider for the CA bundle to use to validate webhook server certificate.
	CaProvider WebhookSpecCaProviderPtrInput `pulumi:"caProvider"`
	// Headers
	Headers pulumi.StringMapInput `pulumi:"headers"`
	// Webhook Method
	Method pulumi.StringPtrInput `pulumi:"method"`
	// Result formatting
	Result WebhookSpecResultInput `pulumi:"result"`
	// Secrets to fill in templates
	// These secrets will be passed to the templating function as key value pairs under the given name
	Secrets WebhookSpecSecretsArrayInput `pulumi:"secrets"`
	// Timeout
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// Webhook url to call
	Url pulumi.StringInput `pulumi:"url"`
}

func (WebhookSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSpec)(nil)).Elem()
}

func (i WebhookSpecArgs) ToWebhookSpecOutput() WebhookSpecOutput {
	return i.ToWebhookSpecOutputWithContext(context.Background())
}

func (i WebhookSpecArgs) ToWebhookSpecOutputWithContext(ctx context.Context) WebhookSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecOutput)
}

func (i WebhookSpecArgs) ToWebhookSpecPtrOutput() WebhookSpecPtrOutput {
	return i.ToWebhookSpecPtrOutputWithContext(context.Background())
}

func (i WebhookSpecArgs) ToWebhookSpecPtrOutputWithContext(ctx context.Context) WebhookSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecOutput).ToWebhookSpecPtrOutputWithContext(ctx)
}

// WebhookSpecPtrInput is an input type that accepts WebhookSpecArgs, WebhookSpecPtr and WebhookSpecPtrOutput values.
// You can construct a concrete instance of `WebhookSpecPtrInput` via:
//
//	        WebhookSpecArgs{...}
//
//	or:
//
//	        nil
type WebhookSpecPtrInput interface {
	pulumi.Input

	ToWebhookSpecPtrOutput() WebhookSpecPtrOutput
	ToWebhookSpecPtrOutputWithContext(context.Context) WebhookSpecPtrOutput
}

type webhookSpecPtrType WebhookSpecArgs

func WebhookSpecPtr(v *WebhookSpecArgs) WebhookSpecPtrInput {
	return (*webhookSpecPtrType)(v)
}

func (*webhookSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookSpec)(nil)).Elem()
}

func (i *webhookSpecPtrType) ToWebhookSpecPtrOutput() WebhookSpecPtrOutput {
	return i.ToWebhookSpecPtrOutputWithContext(context.Background())
}

func (i *webhookSpecPtrType) ToWebhookSpecPtrOutputWithContext(ctx context.Context) WebhookSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecPtrOutput)
}

// WebhookSpec controls the behavior of the external generator. Any body parameters should be passed to the server through the parameters field.
type WebhookSpecOutput struct{ *pulumi.OutputState }

func (WebhookSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSpec)(nil)).Elem()
}

func (o WebhookSpecOutput) ToWebhookSpecOutput() WebhookSpecOutput {
	return o
}

func (o WebhookSpecOutput) ToWebhookSpecOutputWithContext(ctx context.Context) WebhookSpecOutput {
	return o
}

func (o WebhookSpecOutput) ToWebhookSpecPtrOutput() WebhookSpecPtrOutput {
	return o.ToWebhookSpecPtrOutputWithContext(context.Background())
}

func (o WebhookSpecOutput) ToWebhookSpecPtrOutputWithContext(ctx context.Context) WebhookSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebhookSpec) *WebhookSpec {
		return &v
	}).(WebhookSpecPtrOutput)
}

// Body
func (o WebhookSpecOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpec) *string { return v.Body }).(pulumi.StringPtrOutput)
}

// PEM encoded CA bundle used to validate webhook server certificate. Only used
// if the Server URL is using HTTPS protocol. This parameter is ignored for
// plain HTTP protocol connection. If not set the system root certificates
// are used to validate the TLS connection.
func (o WebhookSpecOutput) CaBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpec) *string { return v.CaBundle }).(pulumi.StringPtrOutput)
}

// The provider for the CA bundle to use to validate webhook server certificate.
func (o WebhookSpecOutput) CaProvider() WebhookSpecCaProviderPtrOutput {
	return o.ApplyT(func(v WebhookSpec) *WebhookSpecCaProvider { return v.CaProvider }).(WebhookSpecCaProviderPtrOutput)
}

// Headers
func (o WebhookSpecOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v WebhookSpec) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// Webhook Method
func (o WebhookSpecOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpec) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// Result formatting
func (o WebhookSpecOutput) Result() WebhookSpecResultOutput {
	return o.ApplyT(func(v WebhookSpec) WebhookSpecResult { return v.Result }).(WebhookSpecResultOutput)
}

// Secrets to fill in templates
// These secrets will be passed to the templating function as key value pairs under the given name
func (o WebhookSpecOutput) Secrets() WebhookSpecSecretsArrayOutput {
	return o.ApplyT(func(v WebhookSpec) []WebhookSpecSecrets { return v.Secrets }).(WebhookSpecSecretsArrayOutput)
}

// Timeout
func (o WebhookSpecOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpec) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Webhook url to call
func (o WebhookSpecOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookSpec) string { return v.Url }).(pulumi.StringOutput)
}

type WebhookSpecPtrOutput struct{ *pulumi.OutputState }

func (WebhookSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookSpec)(nil)).Elem()
}

func (o WebhookSpecPtrOutput) ToWebhookSpecPtrOutput() WebhookSpecPtrOutput {
	return o
}

func (o WebhookSpecPtrOutput) ToWebhookSpecPtrOutputWithContext(ctx context.Context) WebhookSpecPtrOutput {
	return o
}

func (o WebhookSpecPtrOutput) Elem() WebhookSpecOutput {
	return o.ApplyT(func(v *WebhookSpec) WebhookSpec {
		if v != nil {
			return *v
		}
		var ret WebhookSpec
		return ret
	}).(WebhookSpecOutput)
}

// Body
func (o WebhookSpecPtrOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpec) *string {
		if v == nil {
			return nil
		}
		return v.Body
	}).(pulumi.StringPtrOutput)
}

// PEM encoded CA bundle used to validate webhook server certificate. Only used
// if the Server URL is using HTTPS protocol. This parameter is ignored for
// plain HTTP protocol connection. If not set the system root certificates
// are used to validate the TLS connection.
func (o WebhookSpecPtrOutput) CaBundle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpec) *string {
		if v == nil {
			return nil
		}
		return v.CaBundle
	}).(pulumi.StringPtrOutput)
}

// The provider for the CA bundle to use to validate webhook server certificate.
func (o WebhookSpecPtrOutput) CaProvider() WebhookSpecCaProviderPtrOutput {
	return o.ApplyT(func(v *WebhookSpec) *WebhookSpecCaProvider {
		if v == nil {
			return nil
		}
		return v.CaProvider
	}).(WebhookSpecCaProviderPtrOutput)
}

// Headers
func (o WebhookSpecPtrOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WebhookSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.StringMapOutput)
}

// Webhook Method
func (o WebhookSpecPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpec) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// Result formatting
func (o WebhookSpecPtrOutput) Result() WebhookSpecResultPtrOutput {
	return o.ApplyT(func(v *WebhookSpec) *WebhookSpecResult {
		if v == nil {
			return nil
		}
		return &v.Result
	}).(WebhookSpecResultPtrOutput)
}

// Secrets to fill in templates
// These secrets will be passed to the templating function as key value pairs under the given name
func (o WebhookSpecPtrOutput) Secrets() WebhookSpecSecretsArrayOutput {
	return o.ApplyT(func(v *WebhookSpec) []WebhookSpecSecrets {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(WebhookSpecSecretsArrayOutput)
}

// Timeout
func (o WebhookSpecPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpec) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Webhook url to call
func (o WebhookSpecPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

// The provider for the CA bundle to use to validate webhook server certificate.
type WebhookSpecCaProvider struct {
	// The key the value inside of the provider type to use, only used with "Secret" type
	Key *string `pulumi:"key"`
	// The name of the object located at the provider type.
	Name string `pulumi:"name"`
	// The namespace the Provider type is in.
	Namespace *string `pulumi:"namespace"`
	// The type of provider to use such as "Secret", or "ConfigMap".
	Type string `pulumi:"type"`
}

// WebhookSpecCaProviderInput is an input type that accepts WebhookSpecCaProviderArgs and WebhookSpecCaProviderOutput values.
// You can construct a concrete instance of `WebhookSpecCaProviderInput` via:
//
//	WebhookSpecCaProviderArgs{...}
type WebhookSpecCaProviderInput interface {
	pulumi.Input

	ToWebhookSpecCaProviderOutput() WebhookSpecCaProviderOutput
	ToWebhookSpecCaProviderOutputWithContext(context.Context) WebhookSpecCaProviderOutput
}

// The provider for the CA bundle to use to validate webhook server certificate.
type WebhookSpecCaProviderArgs struct {
	// The key the value inside of the provider type to use, only used with "Secret" type
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the object located at the provider type.
	Name pulumi.StringInput `pulumi:"name"`
	// The namespace the Provider type is in.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// The type of provider to use such as "Secret", or "ConfigMap".
	Type pulumi.StringInput `pulumi:"type"`
}

func (WebhookSpecCaProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSpecCaProvider)(nil)).Elem()
}

func (i WebhookSpecCaProviderArgs) ToWebhookSpecCaProviderOutput() WebhookSpecCaProviderOutput {
	return i.ToWebhookSpecCaProviderOutputWithContext(context.Background())
}

func (i WebhookSpecCaProviderArgs) ToWebhookSpecCaProviderOutputWithContext(ctx context.Context) WebhookSpecCaProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecCaProviderOutput)
}

func (i WebhookSpecCaProviderArgs) ToWebhookSpecCaProviderPtrOutput() WebhookSpecCaProviderPtrOutput {
	return i.ToWebhookSpecCaProviderPtrOutputWithContext(context.Background())
}

func (i WebhookSpecCaProviderArgs) ToWebhookSpecCaProviderPtrOutputWithContext(ctx context.Context) WebhookSpecCaProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecCaProviderOutput).ToWebhookSpecCaProviderPtrOutputWithContext(ctx)
}

// WebhookSpecCaProviderPtrInput is an input type that accepts WebhookSpecCaProviderArgs, WebhookSpecCaProviderPtr and WebhookSpecCaProviderPtrOutput values.
// You can construct a concrete instance of `WebhookSpecCaProviderPtrInput` via:
//
//	        WebhookSpecCaProviderArgs{...}
//
//	or:
//
//	        nil
type WebhookSpecCaProviderPtrInput interface {
	pulumi.Input

	ToWebhookSpecCaProviderPtrOutput() WebhookSpecCaProviderPtrOutput
	ToWebhookSpecCaProviderPtrOutputWithContext(context.Context) WebhookSpecCaProviderPtrOutput
}

type webhookSpecCaProviderPtrType WebhookSpecCaProviderArgs

func WebhookSpecCaProviderPtr(v *WebhookSpecCaProviderArgs) WebhookSpecCaProviderPtrInput {
	return (*webhookSpecCaProviderPtrType)(v)
}

func (*webhookSpecCaProviderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookSpecCaProvider)(nil)).Elem()
}

func (i *webhookSpecCaProviderPtrType) ToWebhookSpecCaProviderPtrOutput() WebhookSpecCaProviderPtrOutput {
	return i.ToWebhookSpecCaProviderPtrOutputWithContext(context.Background())
}

func (i *webhookSpecCaProviderPtrType) ToWebhookSpecCaProviderPtrOutputWithContext(ctx context.Context) WebhookSpecCaProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecCaProviderPtrOutput)
}

// The provider for the CA bundle to use to validate webhook server certificate.
type WebhookSpecCaProviderOutput struct{ *pulumi.OutputState }

func (WebhookSpecCaProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSpecCaProvider)(nil)).Elem()
}

func (o WebhookSpecCaProviderOutput) ToWebhookSpecCaProviderOutput() WebhookSpecCaProviderOutput {
	return o
}

func (o WebhookSpecCaProviderOutput) ToWebhookSpecCaProviderOutputWithContext(ctx context.Context) WebhookSpecCaProviderOutput {
	return o
}

func (o WebhookSpecCaProviderOutput) ToWebhookSpecCaProviderPtrOutput() WebhookSpecCaProviderPtrOutput {
	return o.ToWebhookSpecCaProviderPtrOutputWithContext(context.Background())
}

func (o WebhookSpecCaProviderOutput) ToWebhookSpecCaProviderPtrOutputWithContext(ctx context.Context) WebhookSpecCaProviderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebhookSpecCaProvider) *WebhookSpecCaProvider {
		return &v
	}).(WebhookSpecCaProviderPtrOutput)
}

// The key the value inside of the provider type to use, only used with "Secret" type
func (o WebhookSpecCaProviderOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpecCaProvider) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the object located at the provider type.
func (o WebhookSpecCaProviderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookSpecCaProvider) string { return v.Name }).(pulumi.StringOutput)
}

// The namespace the Provider type is in.
func (o WebhookSpecCaProviderOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpecCaProvider) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The type of provider to use such as "Secret", or "ConfigMap".
func (o WebhookSpecCaProviderOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookSpecCaProvider) string { return v.Type }).(pulumi.StringOutput)
}

type WebhookSpecCaProviderPtrOutput struct{ *pulumi.OutputState }

func (WebhookSpecCaProviderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookSpecCaProvider)(nil)).Elem()
}

func (o WebhookSpecCaProviderPtrOutput) ToWebhookSpecCaProviderPtrOutput() WebhookSpecCaProviderPtrOutput {
	return o
}

func (o WebhookSpecCaProviderPtrOutput) ToWebhookSpecCaProviderPtrOutputWithContext(ctx context.Context) WebhookSpecCaProviderPtrOutput {
	return o
}

func (o WebhookSpecCaProviderPtrOutput) Elem() WebhookSpecCaProviderOutput {
	return o.ApplyT(func(v *WebhookSpecCaProvider) WebhookSpecCaProvider {
		if v != nil {
			return *v
		}
		var ret WebhookSpecCaProvider
		return ret
	}).(WebhookSpecCaProviderOutput)
}

// The key the value inside of the provider type to use, only used with "Secret" type
func (o WebhookSpecCaProviderPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpecCaProvider) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// The name of the object located at the provider type.
func (o WebhookSpecCaProviderPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpecCaProvider) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The namespace the Provider type is in.
func (o WebhookSpecCaProviderPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpecCaProvider) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The type of provider to use such as "Secret", or "ConfigMap".
func (o WebhookSpecCaProviderPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpecCaProvider) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Headers
type WebhookSpecHeaders struct {
}

// Result formatting
type WebhookSpecResult struct {
	// Json path of return value
	JsonPath *string `pulumi:"jsonPath"`
}

// WebhookSpecResultInput is an input type that accepts WebhookSpecResultArgs and WebhookSpecResultOutput values.
// You can construct a concrete instance of `WebhookSpecResultInput` via:
//
//	WebhookSpecResultArgs{...}
type WebhookSpecResultInput interface {
	pulumi.Input

	ToWebhookSpecResultOutput() WebhookSpecResultOutput
	ToWebhookSpecResultOutputWithContext(context.Context) WebhookSpecResultOutput
}

// Result formatting
type WebhookSpecResultArgs struct {
	// Json path of return value
	JsonPath pulumi.StringPtrInput `pulumi:"jsonPath"`
}

func (WebhookSpecResultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSpecResult)(nil)).Elem()
}

func (i WebhookSpecResultArgs) ToWebhookSpecResultOutput() WebhookSpecResultOutput {
	return i.ToWebhookSpecResultOutputWithContext(context.Background())
}

func (i WebhookSpecResultArgs) ToWebhookSpecResultOutputWithContext(ctx context.Context) WebhookSpecResultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecResultOutput)
}

func (i WebhookSpecResultArgs) ToWebhookSpecResultPtrOutput() WebhookSpecResultPtrOutput {
	return i.ToWebhookSpecResultPtrOutputWithContext(context.Background())
}

func (i WebhookSpecResultArgs) ToWebhookSpecResultPtrOutputWithContext(ctx context.Context) WebhookSpecResultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecResultOutput).ToWebhookSpecResultPtrOutputWithContext(ctx)
}

// WebhookSpecResultPtrInput is an input type that accepts WebhookSpecResultArgs, WebhookSpecResultPtr and WebhookSpecResultPtrOutput values.
// You can construct a concrete instance of `WebhookSpecResultPtrInput` via:
//
//	        WebhookSpecResultArgs{...}
//
//	or:
//
//	        nil
type WebhookSpecResultPtrInput interface {
	pulumi.Input

	ToWebhookSpecResultPtrOutput() WebhookSpecResultPtrOutput
	ToWebhookSpecResultPtrOutputWithContext(context.Context) WebhookSpecResultPtrOutput
}

type webhookSpecResultPtrType WebhookSpecResultArgs

func WebhookSpecResultPtr(v *WebhookSpecResultArgs) WebhookSpecResultPtrInput {
	return (*webhookSpecResultPtrType)(v)
}

func (*webhookSpecResultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookSpecResult)(nil)).Elem()
}

func (i *webhookSpecResultPtrType) ToWebhookSpecResultPtrOutput() WebhookSpecResultPtrOutput {
	return i.ToWebhookSpecResultPtrOutputWithContext(context.Background())
}

func (i *webhookSpecResultPtrType) ToWebhookSpecResultPtrOutputWithContext(ctx context.Context) WebhookSpecResultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecResultPtrOutput)
}

// Result formatting
type WebhookSpecResultOutput struct{ *pulumi.OutputState }

func (WebhookSpecResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSpecResult)(nil)).Elem()
}

func (o WebhookSpecResultOutput) ToWebhookSpecResultOutput() WebhookSpecResultOutput {
	return o
}

func (o WebhookSpecResultOutput) ToWebhookSpecResultOutputWithContext(ctx context.Context) WebhookSpecResultOutput {
	return o
}

func (o WebhookSpecResultOutput) ToWebhookSpecResultPtrOutput() WebhookSpecResultPtrOutput {
	return o.ToWebhookSpecResultPtrOutputWithContext(context.Background())
}

func (o WebhookSpecResultOutput) ToWebhookSpecResultPtrOutputWithContext(ctx context.Context) WebhookSpecResultPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebhookSpecResult) *WebhookSpecResult {
		return &v
	}).(WebhookSpecResultPtrOutput)
}

// Json path of return value
func (o WebhookSpecResultOutput) JsonPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpecResult) *string { return v.JsonPath }).(pulumi.StringPtrOutput)
}

type WebhookSpecResultPtrOutput struct{ *pulumi.OutputState }

func (WebhookSpecResultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookSpecResult)(nil)).Elem()
}

func (o WebhookSpecResultPtrOutput) ToWebhookSpecResultPtrOutput() WebhookSpecResultPtrOutput {
	return o
}

func (o WebhookSpecResultPtrOutput) ToWebhookSpecResultPtrOutputWithContext(ctx context.Context) WebhookSpecResultPtrOutput {
	return o
}

func (o WebhookSpecResultPtrOutput) Elem() WebhookSpecResultOutput {
	return o.ApplyT(func(v *WebhookSpecResult) WebhookSpecResult {
		if v != nil {
			return *v
		}
		var ret WebhookSpecResult
		return ret
	}).(WebhookSpecResultOutput)
}

// Json path of return value
func (o WebhookSpecResultPtrOutput) JsonPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookSpecResult) *string {
		if v == nil {
			return nil
		}
		return v.JsonPath
	}).(pulumi.StringPtrOutput)
}

type WebhookSpecSecrets struct {
	// Name of this secret in templates
	Name string `pulumi:"name"`
	// Secret ref to fill in credentials
	SecretRef WebhookSpecSecretsSecretRef `pulumi:"secretRef"`
}

// WebhookSpecSecretsInput is an input type that accepts WebhookSpecSecretsArgs and WebhookSpecSecretsOutput values.
// You can construct a concrete instance of `WebhookSpecSecretsInput` via:
//
//	WebhookSpecSecretsArgs{...}
type WebhookSpecSecretsInput interface {
	pulumi.Input

	ToWebhookSpecSecretsOutput() WebhookSpecSecretsOutput
	ToWebhookSpecSecretsOutputWithContext(context.Context) WebhookSpecSecretsOutput
}

type WebhookSpecSecretsArgs struct {
	// Name of this secret in templates
	Name pulumi.StringInput `pulumi:"name"`
	// Secret ref to fill in credentials
	SecretRef WebhookSpecSecretsSecretRefInput `pulumi:"secretRef"`
}

func (WebhookSpecSecretsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSpecSecrets)(nil)).Elem()
}

func (i WebhookSpecSecretsArgs) ToWebhookSpecSecretsOutput() WebhookSpecSecretsOutput {
	return i.ToWebhookSpecSecretsOutputWithContext(context.Background())
}

func (i WebhookSpecSecretsArgs) ToWebhookSpecSecretsOutputWithContext(ctx context.Context) WebhookSpecSecretsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecSecretsOutput)
}

// WebhookSpecSecretsArrayInput is an input type that accepts WebhookSpecSecretsArray and WebhookSpecSecretsArrayOutput values.
// You can construct a concrete instance of `WebhookSpecSecretsArrayInput` via:
//
//	WebhookSpecSecretsArray{ WebhookSpecSecretsArgs{...} }
type WebhookSpecSecretsArrayInput interface {
	pulumi.Input

	ToWebhookSpecSecretsArrayOutput() WebhookSpecSecretsArrayOutput
	ToWebhookSpecSecretsArrayOutputWithContext(context.Context) WebhookSpecSecretsArrayOutput
}

type WebhookSpecSecretsArray []WebhookSpecSecretsInput

func (WebhookSpecSecretsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookSpecSecrets)(nil)).Elem()
}

func (i WebhookSpecSecretsArray) ToWebhookSpecSecretsArrayOutput() WebhookSpecSecretsArrayOutput {
	return i.ToWebhookSpecSecretsArrayOutputWithContext(context.Background())
}

func (i WebhookSpecSecretsArray) ToWebhookSpecSecretsArrayOutputWithContext(ctx context.Context) WebhookSpecSecretsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecSecretsArrayOutput)
}

type WebhookSpecSecretsOutput struct{ *pulumi.OutputState }

func (WebhookSpecSecretsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSpecSecrets)(nil)).Elem()
}

func (o WebhookSpecSecretsOutput) ToWebhookSpecSecretsOutput() WebhookSpecSecretsOutput {
	return o
}

func (o WebhookSpecSecretsOutput) ToWebhookSpecSecretsOutputWithContext(ctx context.Context) WebhookSpecSecretsOutput {
	return o
}

// Name of this secret in templates
func (o WebhookSpecSecretsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookSpecSecrets) string { return v.Name }).(pulumi.StringOutput)
}

// Secret ref to fill in credentials
func (o WebhookSpecSecretsOutput) SecretRef() WebhookSpecSecretsSecretRefOutput {
	return o.ApplyT(func(v WebhookSpecSecrets) WebhookSpecSecretsSecretRef { return v.SecretRef }).(WebhookSpecSecretsSecretRefOutput)
}

type WebhookSpecSecretsArrayOutput struct{ *pulumi.OutputState }

func (WebhookSpecSecretsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebhookSpecSecrets)(nil)).Elem()
}

func (o WebhookSpecSecretsArrayOutput) ToWebhookSpecSecretsArrayOutput() WebhookSpecSecretsArrayOutput {
	return o
}

func (o WebhookSpecSecretsArrayOutput) ToWebhookSpecSecretsArrayOutputWithContext(ctx context.Context) WebhookSpecSecretsArrayOutput {
	return o
}

func (o WebhookSpecSecretsArrayOutput) Index(i pulumi.IntInput) WebhookSpecSecretsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebhookSpecSecrets {
		return vs[0].([]WebhookSpecSecrets)[vs[1].(int)]
	}).(WebhookSpecSecretsOutput)
}

// Secret ref to fill in credentials
type WebhookSpecSecretsSecretRef struct {
	// The key where the token is found.
	Key *string `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name *string `pulumi:"name"`
}

// WebhookSpecSecretsSecretRefInput is an input type that accepts WebhookSpecSecretsSecretRefArgs and WebhookSpecSecretsSecretRefOutput values.
// You can construct a concrete instance of `WebhookSpecSecretsSecretRefInput` via:
//
//	WebhookSpecSecretsSecretRefArgs{...}
type WebhookSpecSecretsSecretRefInput interface {
	pulumi.Input

	ToWebhookSpecSecretsSecretRefOutput() WebhookSpecSecretsSecretRefOutput
	ToWebhookSpecSecretsSecretRefOutputWithContext(context.Context) WebhookSpecSecretsSecretRefOutput
}

// Secret ref to fill in credentials
type WebhookSpecSecretsSecretRefArgs struct {
	// The key where the token is found.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The name of the Secret resource being referred to.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (WebhookSpecSecretsSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSpecSecretsSecretRef)(nil)).Elem()
}

func (i WebhookSpecSecretsSecretRefArgs) ToWebhookSpecSecretsSecretRefOutput() WebhookSpecSecretsSecretRefOutput {
	return i.ToWebhookSpecSecretsSecretRefOutputWithContext(context.Background())
}

func (i WebhookSpecSecretsSecretRefArgs) ToWebhookSpecSecretsSecretRefOutputWithContext(ctx context.Context) WebhookSpecSecretsSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookSpecSecretsSecretRefOutput)
}

// Secret ref to fill in credentials
type WebhookSpecSecretsSecretRefOutput struct{ *pulumi.OutputState }

func (WebhookSpecSecretsSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookSpecSecretsSecretRef)(nil)).Elem()
}

func (o WebhookSpecSecretsSecretRefOutput) ToWebhookSpecSecretsSecretRefOutput() WebhookSpecSecretsSecretRefOutput {
	return o
}

func (o WebhookSpecSecretsSecretRefOutput) ToWebhookSpecSecretsSecretRefOutputWithContext(ctx context.Context) WebhookSpecSecretsSecretRefOutput {
	return o
}

// The key where the token is found.
func (o WebhookSpecSecretsSecretRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpecSecretsSecretRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The name of the Secret resource being referred to.
func (o WebhookSpecSecretsSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebhookSpecSecretsSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecInput)(nil)).Elem(), ACRAccessTokenSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecPtrInput)(nil)).Elem(), ACRAccessTokenSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthInput)(nil)).Elem(), ACRAccessTokenSpecAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthPtrInput)(nil)).Elem(), ACRAccessTokenSpecAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthManagedIdentityInput)(nil)).Elem(), ACRAccessTokenSpecAuthManagedIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthManagedIdentityPtrInput)(nil)).Elem(), ACRAccessTokenSpecAuthManagedIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalInput)(nil)).Elem(), ACRAccessTokenSpecAuthServicePrincipalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalPtrInput)(nil)).Elem(), ACRAccessTokenSpecAuthServicePrincipalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefInput)(nil)).Elem(), ACRAccessTokenSpecAuthServicePrincipalSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrInput)(nil)).Elem(), ACRAccessTokenSpecAuthServicePrincipalSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdInput)(nil)).Elem(), ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrInput)(nil)).Elem(), ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretInput)(nil)).Elem(), ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrInput)(nil)).Elem(), ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthWorkloadIdentityInput)(nil)).Elem(), ACRAccessTokenSpecAuthWorkloadIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthWorkloadIdentityPtrInput)(nil)).Elem(), ACRAccessTokenSpecAuthWorkloadIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefInput)(nil)).Elem(), ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrInput)(nil)).Elem(), ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecInput)(nil)).Elem(), ECRAuthorizationTokenSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecPtrInput)(nil)).Elem(), ECRAuthorizationTokenSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthPtrInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthJwtInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthJwtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthJwtPtrInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthJwtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthJwtServiceAccountRefInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthJwtServiceAccountRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthJwtServiceAccountRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefPtrInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrInput)(nil)).Elem(), ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FakeSpecInput)(nil)).Elem(), FakeSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FakeSpecPtrInput)(nil)).Elem(), FakeSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecInput)(nil)).Elem(), GCRAccessTokenSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecPtrInput)(nil)).Elem(), GCRAccessTokenSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecAuthInput)(nil)).Elem(), GCRAccessTokenSpecAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecAuthPtrInput)(nil)).Elem(), GCRAccessTokenSpecAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecAuthSecretRefInput)(nil)).Elem(), GCRAccessTokenSpecAuthSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecAuthSecretRefPtrInput)(nil)).Elem(), GCRAccessTokenSpecAuthSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefInput)(nil)).Elem(), GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrInput)(nil)).Elem(), GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecAuthWorkloadIdentityInput)(nil)).Elem(), GCRAccessTokenSpecAuthWorkloadIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecAuthWorkloadIdentityPtrInput)(nil)).Elem(), GCRAccessTokenSpecAuthWorkloadIdentityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefInput)(nil)).Elem(), GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrInput)(nil)).Elem(), GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenSpecInput)(nil)).Elem(), GithubAccessTokenSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenSpecPtrInput)(nil)).Elem(), GithubAccessTokenSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenSpecAuthInput)(nil)).Elem(), GithubAccessTokenSpecAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenSpecAuthPtrInput)(nil)).Elem(), GithubAccessTokenSpecAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenSpecAuthPrivateKeyInput)(nil)).Elem(), GithubAccessTokenSpecAuthPrivateKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenSpecAuthPrivateKeyPtrInput)(nil)).Elem(), GithubAccessTokenSpecAuthPrivateKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenSpecAuthPrivateKeySecretRefInput)(nil)).Elem(), GithubAccessTokenSpecAuthPrivateKeySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenSpecAuthPrivateKeySecretRefPtrInput)(nil)).Elem(), GithubAccessTokenSpecAuthPrivateKeySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordSpecInput)(nil)).Elem(), PasswordSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordSpecPtrInput)(nil)).Elem(), PasswordSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecInput)(nil)).Elem(), VaultDynamicSecretSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecPtrInput)(nil)).Elem(), VaultDynamicSecretSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderInput)(nil)).Elem(), VaultDynamicSecretSpecProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRoleInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthAppRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRolePtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthAppRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRoleRoleRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthAppRoleRoleRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthAppRoleRoleRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRoleSecretRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthAppRoleSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthAppRoleSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthCertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthCertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertClientCertInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthCertClientCertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertClientCertPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthCertClientCertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertSecretRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthCertSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthCertSecretRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthCertSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamJwtInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamJwtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamJwtPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamJwtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthJwtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthJwtArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtSecretRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthJwtSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthJwtSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthKubernetesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthKubernetesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesSecretRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthKubernetesSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthKubernetesSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthLdapInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthLdapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthLdapPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthLdapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthLdapSecretRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthLdapSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthLdapSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthTokenSecretRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthTokenSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthTokenSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthUserPassInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthUserPassArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthUserPassPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthUserPassArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthUserPassSecretRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthUserPassSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderAuthUserPassSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderCaProviderInput)(nil)).Elem(), VaultDynamicSecretSpecProviderCaProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderCaProviderPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderCaProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsInput)(nil)).Elem(), VaultDynamicSecretSpecProviderTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsCertSecretRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderTlsCertSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsCertSecretRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderTlsCertSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsKeySecretRefInput)(nil)).Elem(), VaultDynamicSecretSpecProviderTlsKeySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultDynamicSecretSpecProviderTlsKeySecretRefPtrInput)(nil)).Elem(), VaultDynamicSecretSpecProviderTlsKeySecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSpecInput)(nil)).Elem(), WebhookSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSpecPtrInput)(nil)).Elem(), WebhookSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSpecCaProviderInput)(nil)).Elem(), WebhookSpecCaProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSpecCaProviderPtrInput)(nil)).Elem(), WebhookSpecCaProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSpecResultInput)(nil)).Elem(), WebhookSpecResultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSpecResultPtrInput)(nil)).Elem(), WebhookSpecResultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSpecSecretsInput)(nil)).Elem(), WebhookSpecSecretsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSpecSecretsArrayInput)(nil)).Elem(), WebhookSpecSecretsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookSpecSecretsSecretRefInput)(nil)).Elem(), WebhookSpecSecretsSecretRefArgs{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecPtrOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthPtrOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthManagedIdentityOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthManagedIdentityPtrOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthServicePrincipalOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthServicePrincipalPtrOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthServicePrincipalSecretRefOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthServicePrincipalSecretRefPtrOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientIdPtrOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthServicePrincipalSecretRefClientSecretPtrOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthWorkloadIdentityOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthWorkloadIdentityPtrOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput{})
	pulumi.RegisterOutputType(ACRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecPtrOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthPtrOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthJwtOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthJwtPtrOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthJwtServiceAccountRefOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthJwtServiceAccountRefPtrOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthSecretRefOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthSecretRefPtrOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthSecretRefAccessKeyIdsecretRefPtrOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefOutput{})
	pulumi.RegisterOutputType(ECRAuthorizationTokenSpecAuthSecretRefSessionTokenSecretRefPtrOutput{})
	pulumi.RegisterOutputType(FakeSpecOutput{})
	pulumi.RegisterOutputType(FakeSpecPtrOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecPtrOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecAuthOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecAuthPtrOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecAuthSecretRefOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecAuthSecretRefPtrOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecAuthSecretRefSecretAccessKeySecretRefPtrOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecAuthWorkloadIdentityOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecAuthWorkloadIdentityPtrOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefOutput{})
	pulumi.RegisterOutputType(GCRAccessTokenSpecAuthWorkloadIdentityServiceAccountRefPtrOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenSpecOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenSpecPtrOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenSpecAuthOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenSpecAuthPtrOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenSpecAuthPrivateKeyOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenSpecAuthPrivateKeyPtrOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenSpecAuthPrivateKeySecretRefOutput{})
	pulumi.RegisterOutputType(GithubAccessTokenSpecAuthPrivateKeySecretRefPtrOutput{})
	pulumi.RegisterOutputType(PasswordSpecOutput{})
	pulumi.RegisterOutputType(PasswordSpecPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthAppRoleOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthAppRolePtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthAppRoleRoleRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthAppRoleRoleRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthAppRoleSecretRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthAppRoleSecretRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthCertOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthCertPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthCertClientCertOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthCertClientCertPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthCertSecretRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthCertSecretRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamJwtOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamJwtPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamJwtServiceAccountRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamSecretRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamSecretRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamSecretRefAccessKeyIdsecretRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamSecretRefSecretAccessKeySecretRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthIamSecretRefSessionTokenSecretRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthJwtOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthJwtPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthJwtKubernetesServiceAccountTokenServiceAccountRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthJwtSecretRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthJwtSecretRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthKubernetesOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthKubernetesPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthKubernetesSecretRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthKubernetesSecretRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthKubernetesServiceAccountRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthLdapOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthLdapPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthLdapSecretRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthLdapSecretRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthTokenSecretRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthTokenSecretRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthUserPassOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthUserPassPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthUserPassSecretRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderAuthUserPassSecretRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderCaProviderOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderCaProviderPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderTlsOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderTlsPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderTlsCertSecretRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderTlsCertSecretRefPtrOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderTlsKeySecretRefOutput{})
	pulumi.RegisterOutputType(VaultDynamicSecretSpecProviderTlsKeySecretRefPtrOutput{})
	pulumi.RegisterOutputType(WebhookSpecOutput{})
	pulumi.RegisterOutputType(WebhookSpecPtrOutput{})
	pulumi.RegisterOutputType(WebhookSpecCaProviderOutput{})
	pulumi.RegisterOutputType(WebhookSpecCaProviderPtrOutput{})
	pulumi.RegisterOutputType(WebhookSpecResultOutput{})
	pulumi.RegisterOutputType(WebhookSpecResultPtrOutput{})
	pulumi.RegisterOutputType(WebhookSpecSecretsOutput{})
	pulumi.RegisterOutputType(WebhookSpecSecretsArrayOutput{})
	pulumi.RegisterOutputType(WebhookSpecSecretsSecretRefOutput{})
}
