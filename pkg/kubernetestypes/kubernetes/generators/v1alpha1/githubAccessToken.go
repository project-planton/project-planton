// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GithubAccessToken generates ghs_ accessToken
type GithubAccessToken struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput         `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput         `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput     `pulumi:"metadata"`
	Spec       GithubAccessTokenSpecPtrOutput `pulumi:"spec"`
}

// NewGithubAccessToken registers a new resource with the given unique name, arguments, and options.
func NewGithubAccessToken(ctx *pulumi.Context,
	name string, args *GithubAccessTokenArgs, opts ...pulumi.ResourceOption) (*GithubAccessToken, error) {
	if args == nil {
		args = &GithubAccessTokenArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("generators.external-secrets.io/v1alpha1")
	args.Kind = pulumi.StringPtr("GithubAccessToken")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource GithubAccessToken
	err := ctx.RegisterResource("kubernetes:generators.external-secrets.io/v1alpha1:GithubAccessToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGithubAccessToken gets an existing GithubAccessToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGithubAccessToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GithubAccessTokenState, opts ...pulumi.ResourceOption) (*GithubAccessToken, error) {
	var resource GithubAccessToken
	err := ctx.ReadResource("kubernetes:generators.external-secrets.io/v1alpha1:GithubAccessToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GithubAccessToken resources.
type githubAccessTokenState struct {
}

type GithubAccessTokenState struct {
}

func (GithubAccessTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*githubAccessTokenState)(nil)).Elem()
}

type githubAccessTokenArgs struct {
	ApiVersion *string                `pulumi:"apiVersion"`
	Kind       *string                `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta     `pulumi:"metadata"`
	Spec       *GithubAccessTokenSpec `pulumi:"spec"`
}

// The set of arguments for constructing a GithubAccessToken resource.
type GithubAccessTokenArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	Spec       GithubAccessTokenSpecPtrInput
}

func (GithubAccessTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*githubAccessTokenArgs)(nil)).Elem()
}

type GithubAccessTokenInput interface {
	pulumi.Input

	ToGithubAccessTokenOutput() GithubAccessTokenOutput
	ToGithubAccessTokenOutputWithContext(ctx context.Context) GithubAccessTokenOutput
}

func (*GithubAccessToken) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubAccessToken)(nil)).Elem()
}

func (i *GithubAccessToken) ToGithubAccessTokenOutput() GithubAccessTokenOutput {
	return i.ToGithubAccessTokenOutputWithContext(context.Background())
}

func (i *GithubAccessToken) ToGithubAccessTokenOutputWithContext(ctx context.Context) GithubAccessTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubAccessTokenOutput)
}

type GithubAccessTokenOutput struct{ *pulumi.OutputState }

func (GithubAccessTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubAccessToken)(nil)).Elem()
}

func (o GithubAccessTokenOutput) ToGithubAccessTokenOutput() GithubAccessTokenOutput {
	return o
}

func (o GithubAccessTokenOutput) ToGithubAccessTokenOutputWithContext(ctx context.Context) GithubAccessTokenOutput {
	return o
}

func (o GithubAccessTokenOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubAccessToken) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o GithubAccessTokenOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubAccessToken) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o GithubAccessTokenOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *GithubAccessToken) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o GithubAccessTokenOutput) Spec() GithubAccessTokenSpecPtrOutput {
	return o.ApplyT(func(v *GithubAccessToken) GithubAccessTokenSpecPtrOutput { return v.Spec }).(GithubAccessTokenSpecPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GithubAccessTokenInput)(nil)).Elem(), &GithubAccessToken{})
	pulumi.RegisterOutputType(GithubAccessTokenOutput{})
}
