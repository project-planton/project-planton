// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ACRAccessToken returns a Azure Container Registry token
// that can be used for pushing/pulling images.
// Note: by default it will return an ACR Refresh Token with full access
// (depending on the identity).
// This can be scoped down to the repository level using .spec.scope.
// In case scope is defined it will return an ACR Access Token.
//
// See docs: https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md
type ACRAccessToken struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// ACRAccessTokenSpec defines how to generate the access token
	// e.g. how to authenticate and which registry to use.
	// see: https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md#overview
	Spec ACRAccessTokenSpecPtrOutput `pulumi:"spec"`
}

// NewACRAccessToken registers a new resource with the given unique name, arguments, and options.
func NewACRAccessToken(ctx *pulumi.Context,
	name string, args *ACRAccessTokenArgs, opts ...pulumi.ResourceOption) (*ACRAccessToken, error) {
	if args == nil {
		args = &ACRAccessTokenArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("generators.external-secrets.io/v1alpha1")
	args.Kind = pulumi.StringPtr("ACRAccessToken")
	if args.Spec != nil {
		args.Spec = args.Spec.ToACRAccessTokenSpecPtrOutput().ApplyT(func(v *ACRAccessTokenSpec) *ACRAccessTokenSpec { return v.Defaults() }).(ACRAccessTokenSpecPtrOutput)
	}
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ACRAccessToken
	err := ctx.RegisterResource("kubernetes:generators.external-secrets.io/v1alpha1:ACRAccessToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetACRAccessToken gets an existing ACRAccessToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetACRAccessToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ACRAccessTokenState, opts ...pulumi.ResourceOption) (*ACRAccessToken, error) {
	var resource ACRAccessToken
	err := ctx.ReadResource("kubernetes:generators.external-secrets.io/v1alpha1:ACRAccessToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ACRAccessToken resources.
type acraccessTokenState struct {
}

type ACRAccessTokenState struct {
}

func (ACRAccessTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*acraccessTokenState)(nil)).Elem()
}

type acraccessTokenArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ACRAccessTokenSpec defines how to generate the access token
	// e.g. how to authenticate and which registry to use.
	// see: https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md#overview
	Spec *ACRAccessTokenSpec `pulumi:"spec"`
}

// The set of arguments for constructing a ACRAccessToken resource.
type ACRAccessTokenArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// ACRAccessTokenSpec defines how to generate the access token
	// e.g. how to authenticate and which registry to use.
	// see: https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md#overview
	Spec ACRAccessTokenSpecPtrInput
}

func (ACRAccessTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*acraccessTokenArgs)(nil)).Elem()
}

type ACRAccessTokenInput interface {
	pulumi.Input

	ToACRAccessTokenOutput() ACRAccessTokenOutput
	ToACRAccessTokenOutputWithContext(ctx context.Context) ACRAccessTokenOutput
}

func (*ACRAccessToken) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessToken)(nil)).Elem()
}

func (i *ACRAccessToken) ToACRAccessTokenOutput() ACRAccessTokenOutput {
	return i.ToACRAccessTokenOutputWithContext(context.Background())
}

func (i *ACRAccessToken) ToACRAccessTokenOutputWithContext(ctx context.Context) ACRAccessTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ACRAccessTokenOutput)
}

type ACRAccessTokenOutput struct{ *pulumi.OutputState }

func (ACRAccessTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ACRAccessToken)(nil)).Elem()
}

func (o ACRAccessTokenOutput) ToACRAccessTokenOutput() ACRAccessTokenOutput {
	return o
}

func (o ACRAccessTokenOutput) ToACRAccessTokenOutputWithContext(ctx context.Context) ACRAccessTokenOutput {
	return o
}

func (o ACRAccessTokenOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessToken) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o ACRAccessTokenOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ACRAccessToken) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ACRAccessTokenOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *ACRAccessToken) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// ACRAccessTokenSpec defines how to generate the access token
// e.g. how to authenticate and which registry to use.
// see: https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md#overview
func (o ACRAccessTokenOutput) Spec() ACRAccessTokenSpecPtrOutput {
	return o.ApplyT(func(v *ACRAccessToken) ACRAccessTokenSpecPtrOutput { return v.Spec }).(ACRAccessTokenSpecPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ACRAccessTokenInput)(nil)).Elem(), &ACRAccessToken{})
	pulumi.RegisterOutputType(ACRAccessTokenOutput{})
}
