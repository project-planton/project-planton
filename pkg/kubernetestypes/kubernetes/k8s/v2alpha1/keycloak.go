// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Keycloak struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	Spec       KeycloakSpecPtrOutput      `pulumi:"spec"`
	Status     KeycloakStatusPtrOutput    `pulumi:"status"`
}

// NewKeycloak registers a new resource with the given unique name, arguments, and options.
func NewKeycloak(ctx *pulumi.Context,
	name string, args *KeycloakArgs, opts ...pulumi.ResourceOption) (*Keycloak, error) {
	if args == nil {
		args = &KeycloakArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("k8s.keycloak.org/v2alpha1")
	args.Kind = pulumi.StringPtr("Keycloak")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Keycloak
	err := ctx.RegisterResource("kubernetes:k8s.keycloak.org/v2alpha1:Keycloak", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeycloak gets an existing Keycloak resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeycloak(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeycloakState, opts ...pulumi.ResourceOption) (*Keycloak, error) {
	var resource Keycloak
	err := ctx.ReadResource("kubernetes:k8s.keycloak.org/v2alpha1:Keycloak", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Keycloak resources.
type keycloakState struct {
}

type KeycloakState struct {
}

func (KeycloakState) ElementType() reflect.Type {
	return reflect.TypeOf((*keycloakState)(nil)).Elem()
}

type keycloakArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Spec       *KeycloakSpec      `pulumi:"spec"`
	Status     *KeycloakStatus    `pulumi:"status"`
}

// The set of arguments for constructing a Keycloak resource.
type KeycloakArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	Spec       KeycloakSpecPtrInput
	Status     KeycloakStatusPtrInput
}

func (KeycloakArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keycloakArgs)(nil)).Elem()
}

type KeycloakInput interface {
	pulumi.Input

	ToKeycloakOutput() KeycloakOutput
	ToKeycloakOutputWithContext(ctx context.Context) KeycloakOutput
}

func (*Keycloak) ElementType() reflect.Type {
	return reflect.TypeOf((**Keycloak)(nil)).Elem()
}

func (i *Keycloak) ToKeycloakOutput() KeycloakOutput {
	return i.ToKeycloakOutputWithContext(context.Background())
}

func (i *Keycloak) ToKeycloakOutputWithContext(ctx context.Context) KeycloakOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeycloakOutput)
}

type KeycloakOutput struct{ *pulumi.OutputState }

func (KeycloakOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Keycloak)(nil)).Elem()
}

func (o KeycloakOutput) ToKeycloakOutput() KeycloakOutput {
	return o
}

func (o KeycloakOutput) ToKeycloakOutputWithContext(ctx context.Context) KeycloakOutput {
	return o
}

func (o KeycloakOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Keycloak) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KeycloakOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Keycloak) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o KeycloakOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *Keycloak) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o KeycloakOutput) Spec() KeycloakSpecPtrOutput {
	return o.ApplyT(func(v *Keycloak) KeycloakSpecPtrOutput { return v.Spec }).(KeycloakSpecPtrOutput)
}

func (o KeycloakOutput) Status() KeycloakStatusPtrOutput {
	return o.ApplyT(func(v *Keycloak) KeycloakStatusPtrOutput { return v.Status }).(KeycloakStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeycloakInput)(nil)).Elem(), &Keycloak{})
	pulumi.RegisterOutputType(KeycloakOutput{})
}
