// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KafkaBridge struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// The specification of the Kafka Bridge.
	Spec KafkaBridgeSpecPtrOutput `pulumi:"spec"`
	// The status of the Kafka Bridge.
	Status KafkaBridgeStatusPtrOutput `pulumi:"status"`
}

// NewKafkaBridge registers a new resource with the given unique name, arguments, and options.
func NewKafkaBridge(ctx *pulumi.Context,
	name string, args *KafkaBridgeArgs, opts ...pulumi.ResourceOption) (*KafkaBridge, error) {
	if args == nil {
		args = &KafkaBridgeArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta2")
	args.Kind = pulumi.StringPtr("KafkaBridge")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaBridge
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaBridge", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaBridge gets an existing KafkaBridge resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaBridge(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaBridgeState, opts ...pulumi.ResourceOption) (*KafkaBridge, error) {
	var resource KafkaBridge
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaBridge", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaBridge resources.
type kafkaBridgeState struct {
}

type KafkaBridgeState struct {
}

func (KafkaBridgeState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaBridgeState)(nil)).Elem()
}

type kafkaBridgeArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// The specification of the Kafka Bridge.
	Spec *KafkaBridgeSpec `pulumi:"spec"`
	// The status of the Kafka Bridge.
	Status *KafkaBridgeStatus `pulumi:"status"`
}

// The set of arguments for constructing a KafkaBridge resource.
type KafkaBridgeArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// The specification of the Kafka Bridge.
	Spec KafkaBridgeSpecPtrInput
	// The status of the Kafka Bridge.
	Status KafkaBridgeStatusPtrInput
}

func (KafkaBridgeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaBridgeArgs)(nil)).Elem()
}

type KafkaBridgeInput interface {
	pulumi.Input

	ToKafkaBridgeOutput() KafkaBridgeOutput
	ToKafkaBridgeOutputWithContext(ctx context.Context) KafkaBridgeOutput
}

func (*KafkaBridge) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaBridge)(nil)).Elem()
}

func (i *KafkaBridge) ToKafkaBridgeOutput() KafkaBridgeOutput {
	return i.ToKafkaBridgeOutputWithContext(context.Background())
}

func (i *KafkaBridge) ToKafkaBridgeOutputWithContext(ctx context.Context) KafkaBridgeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaBridgeOutput)
}

type KafkaBridgeOutput struct{ *pulumi.OutputState }

func (KafkaBridgeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaBridge)(nil)).Elem()
}

func (o KafkaBridgeOutput) ToKafkaBridgeOutput() KafkaBridgeOutput {
	return o
}

func (o KafkaBridgeOutput) ToKafkaBridgeOutputWithContext(ctx context.Context) KafkaBridgeOutput {
	return o
}

func (o KafkaBridgeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaBridge) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KafkaBridgeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaBridge) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o KafkaBridgeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *KafkaBridge) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// The specification of the Kafka Bridge.
func (o KafkaBridgeOutput) Spec() KafkaBridgeSpecPtrOutput {
	return o.ApplyT(func(v *KafkaBridge) KafkaBridgeSpecPtrOutput { return v.Spec }).(KafkaBridgeSpecPtrOutput)
}

// The status of the Kafka Bridge.
func (o KafkaBridgeOutput) Status() KafkaBridgeStatusPtrOutput {
	return o.ApplyT(func(v *KafkaBridge) KafkaBridgeStatusPtrOutput { return v.Status }).(KafkaBridgeStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaBridgeInput)(nil)).Elem(), &KafkaBridge{})
	pulumi.RegisterOutputType(KafkaBridgeOutput{})
}
