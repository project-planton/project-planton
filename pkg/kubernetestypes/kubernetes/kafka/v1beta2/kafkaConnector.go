// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KafkaConnector struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// The specification of the Kafka Connector.
	Spec KafkaConnectorSpecPtrOutput `pulumi:"spec"`
	// The status of the Kafka Connector.
	Status KafkaConnectorStatusPtrOutput `pulumi:"status"`
}

// NewKafkaConnector registers a new resource with the given unique name, arguments, and options.
func NewKafkaConnector(ctx *pulumi.Context,
	name string, args *KafkaConnectorArgs, opts ...pulumi.ResourceOption) (*KafkaConnector, error) {
	if args == nil {
		args = &KafkaConnectorArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta2")
	args.Kind = pulumi.StringPtr("KafkaConnector")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaConnector
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaConnector gets an existing KafkaConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaConnectorState, opts ...pulumi.ResourceOption) (*KafkaConnector, error) {
	var resource KafkaConnector
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaConnector resources.
type kafkaConnectorState struct {
}

type KafkaConnectorState struct {
}

func (KafkaConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaConnectorState)(nil)).Elem()
}

type kafkaConnectorArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// The specification of the Kafka Connector.
	Spec *KafkaConnectorSpec `pulumi:"spec"`
	// The status of the Kafka Connector.
	Status *KafkaConnectorStatus `pulumi:"status"`
}

// The set of arguments for constructing a KafkaConnector resource.
type KafkaConnectorArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// The specification of the Kafka Connector.
	Spec KafkaConnectorSpecPtrInput
	// The status of the Kafka Connector.
	Status KafkaConnectorStatusPtrInput
}

func (KafkaConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaConnectorArgs)(nil)).Elem()
}

type KafkaConnectorInput interface {
	pulumi.Input

	ToKafkaConnectorOutput() KafkaConnectorOutput
	ToKafkaConnectorOutputWithContext(ctx context.Context) KafkaConnectorOutput
}

func (*KafkaConnector) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaConnector)(nil)).Elem()
}

func (i *KafkaConnector) ToKafkaConnectorOutput() KafkaConnectorOutput {
	return i.ToKafkaConnectorOutputWithContext(context.Background())
}

func (i *KafkaConnector) ToKafkaConnectorOutputWithContext(ctx context.Context) KafkaConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaConnectorOutput)
}

type KafkaConnectorOutput struct{ *pulumi.OutputState }

func (KafkaConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaConnector)(nil)).Elem()
}

func (o KafkaConnectorOutput) ToKafkaConnectorOutput() KafkaConnectorOutput {
	return o
}

func (o KafkaConnectorOutput) ToKafkaConnectorOutputWithContext(ctx context.Context) KafkaConnectorOutput {
	return o
}

func (o KafkaConnectorOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaConnector) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KafkaConnectorOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaConnector) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o KafkaConnectorOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *KafkaConnector) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// The specification of the Kafka Connector.
func (o KafkaConnectorOutput) Spec() KafkaConnectorSpecPtrOutput {
	return o.ApplyT(func(v *KafkaConnector) KafkaConnectorSpecPtrOutput { return v.Spec }).(KafkaConnectorSpecPtrOutput)
}

// The status of the Kafka Connector.
func (o KafkaConnectorOutput) Status() KafkaConnectorStatusPtrOutput {
	return o.ApplyT(func(v *KafkaConnector) KafkaConnectorStatusPtrOutput { return v.Status }).(KafkaConnectorStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaConnectorInput)(nil)).Elem(), &KafkaConnector{})
	pulumi.RegisterOutputType(KafkaConnectorOutput{})
}
