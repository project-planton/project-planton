// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KafkaConnect struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// The specification of the Kafka Connect cluster.
	Spec KafkaConnectSpecPtrOutput `pulumi:"spec"`
	// The status of the Kafka Connect cluster.
	Status KafkaConnectStatusPtrOutput `pulumi:"status"`
}

// NewKafkaConnect registers a new resource with the given unique name, arguments, and options.
func NewKafkaConnect(ctx *pulumi.Context,
	name string, args *KafkaConnectArgs, opts ...pulumi.ResourceOption) (*KafkaConnect, error) {
	if args == nil {
		args = &KafkaConnectArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta2")
	args.Kind = pulumi.StringPtr("KafkaConnect")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaConnect
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaConnect", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaConnect gets an existing KafkaConnect resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaConnect(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaConnectState, opts ...pulumi.ResourceOption) (*KafkaConnect, error) {
	var resource KafkaConnect
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaConnect", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaConnect resources.
type kafkaConnectState struct {
}

type KafkaConnectState struct {
}

func (KafkaConnectState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaConnectState)(nil)).Elem()
}

type kafkaConnectArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// The specification of the Kafka Connect cluster.
	Spec *KafkaConnectSpec `pulumi:"spec"`
	// The status of the Kafka Connect cluster.
	Status *KafkaConnectStatus `pulumi:"status"`
}

// The set of arguments for constructing a KafkaConnect resource.
type KafkaConnectArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// The specification of the Kafka Connect cluster.
	Spec KafkaConnectSpecPtrInput
	// The status of the Kafka Connect cluster.
	Status KafkaConnectStatusPtrInput
}

func (KafkaConnectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaConnectArgs)(nil)).Elem()
}

type KafkaConnectInput interface {
	pulumi.Input

	ToKafkaConnectOutput() KafkaConnectOutput
	ToKafkaConnectOutputWithContext(ctx context.Context) KafkaConnectOutput
}

func (*KafkaConnect) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaConnect)(nil)).Elem()
}

func (i *KafkaConnect) ToKafkaConnectOutput() KafkaConnectOutput {
	return i.ToKafkaConnectOutputWithContext(context.Background())
}

func (i *KafkaConnect) ToKafkaConnectOutputWithContext(ctx context.Context) KafkaConnectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaConnectOutput)
}

type KafkaConnectOutput struct{ *pulumi.OutputState }

func (KafkaConnectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaConnect)(nil)).Elem()
}

func (o KafkaConnectOutput) ToKafkaConnectOutput() KafkaConnectOutput {
	return o
}

func (o KafkaConnectOutput) ToKafkaConnectOutputWithContext(ctx context.Context) KafkaConnectOutput {
	return o
}

func (o KafkaConnectOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaConnect) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KafkaConnectOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaConnect) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o KafkaConnectOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *KafkaConnect) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// The specification of the Kafka Connect cluster.
func (o KafkaConnectOutput) Spec() KafkaConnectSpecPtrOutput {
	return o.ApplyT(func(v *KafkaConnect) KafkaConnectSpecPtrOutput { return v.Spec }).(KafkaConnectSpecPtrOutput)
}

// The status of the Kafka Connect cluster.
func (o KafkaConnectOutput) Status() KafkaConnectStatusPtrOutput {
	return o.ApplyT(func(v *KafkaConnect) KafkaConnectStatusPtrOutput { return v.Status }).(KafkaConnectStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaConnectInput)(nil)).Elem(), &KafkaConnect{})
	pulumi.RegisterOutputType(KafkaConnectOutput{})
}
