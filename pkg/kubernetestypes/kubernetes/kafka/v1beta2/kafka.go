// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Kafka struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// The specification of the Kafka and ZooKeeper clusters, and Topic Operator.
	Spec KafkaSpecPtrOutput `pulumi:"spec"`
	// The status of the Kafka and ZooKeeper clusters, and Topic Operator.
	Status KafkaStatusPtrOutput `pulumi:"status"`
}

// NewKafka registers a new resource with the given unique name, arguments, and options.
func NewKafka(ctx *pulumi.Context,
	name string, args *KafkaArgs, opts ...pulumi.ResourceOption) (*Kafka, error) {
	if args == nil {
		args = &KafkaArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta2")
	args.Kind = pulumi.StringPtr("Kafka")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Kafka
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta2:Kafka", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafka gets an existing Kafka resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafka(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaState, opts ...pulumi.ResourceOption) (*Kafka, error) {
	var resource Kafka
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta2:Kafka", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Kafka resources.
type kafkaState struct {
}

type KafkaState struct {
}

func (KafkaState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaState)(nil)).Elem()
}

type kafkaArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// The specification of the Kafka and ZooKeeper clusters, and Topic Operator.
	Spec *KafkaSpec `pulumi:"spec"`
	// The status of the Kafka and ZooKeeper clusters, and Topic Operator.
	Status *KafkaStatus `pulumi:"status"`
}

// The set of arguments for constructing a Kafka resource.
type KafkaArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// The specification of the Kafka and ZooKeeper clusters, and Topic Operator.
	Spec KafkaSpecPtrInput
	// The status of the Kafka and ZooKeeper clusters, and Topic Operator.
	Status KafkaStatusPtrInput
}

func (KafkaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaArgs)(nil)).Elem()
}

type KafkaInput interface {
	pulumi.Input

	ToKafkaOutput() KafkaOutput
	ToKafkaOutputWithContext(ctx context.Context) KafkaOutput
}

func (*Kafka) ElementType() reflect.Type {
	return reflect.TypeOf((**Kafka)(nil)).Elem()
}

func (i *Kafka) ToKafkaOutput() KafkaOutput {
	return i.ToKafkaOutputWithContext(context.Background())
}

func (i *Kafka) ToKafkaOutputWithContext(ctx context.Context) KafkaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaOutput)
}

type KafkaOutput struct{ *pulumi.OutputState }

func (KafkaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Kafka)(nil)).Elem()
}

func (o KafkaOutput) ToKafkaOutput() KafkaOutput {
	return o
}

func (o KafkaOutput) ToKafkaOutputWithContext(ctx context.Context) KafkaOutput {
	return o
}

func (o KafkaOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Kafka) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KafkaOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Kafka) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o KafkaOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *Kafka) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// The specification of the Kafka and ZooKeeper clusters, and Topic Operator.
func (o KafkaOutput) Spec() KafkaSpecPtrOutput {
	return o.ApplyT(func(v *Kafka) KafkaSpecPtrOutput { return v.Spec }).(KafkaSpecPtrOutput)
}

// The status of the Kafka and ZooKeeper clusters, and Topic Operator.
func (o KafkaOutput) Status() KafkaStatusPtrOutput {
	return o.ApplyT(func(v *Kafka) KafkaStatusPtrOutput { return v.Status }).(KafkaStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaInput)(nil)).Elem(), &Kafka{})
	pulumi.RegisterOutputType(KafkaOutput{})
}
