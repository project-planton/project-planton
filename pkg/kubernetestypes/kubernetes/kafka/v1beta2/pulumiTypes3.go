// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

type KafkaUserSpecAuthorizationAcls struct {
	// The host from which the action described in the ACL rule is allowed or denied. If not set, it defaults to `*`, allowing or denying the action from any host.
	Host *string `pulumi:"host"`
	// Operation which will be allowed or denied. Supported operations are: Read, Write, Create, Delete, Alter, Describe, ClusterAction, AlterConfigs, DescribeConfigs, IdempotentWrite and All.
	Operation *string `pulumi:"operation"`
	// List of operations which will be allowed or denied. Supported operations are: Read, Write, Create, Delete, Alter, Describe, ClusterAction, AlterConfigs, DescribeConfigs, IdempotentWrite and All.
	Operations []string `pulumi:"operations"`
	// Indicates the resource for which given ACL rule applies.
	Resource KafkaUserSpecAuthorizationAclsResource `pulumi:"resource"`
	// The type of the rule. Currently the only supported type is `allow`. ACL rules with type `allow` are used to allow user to execute the specified operations. Default value is `allow`.
	Type *string `pulumi:"type"`
}

// KafkaUserSpecAuthorizationAclsInput is an input type that accepts KafkaUserSpecAuthorizationAclsArgs and KafkaUserSpecAuthorizationAclsOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthorizationAclsInput` via:
//
//	KafkaUserSpecAuthorizationAclsArgs{...}
type KafkaUserSpecAuthorizationAclsInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthorizationAclsOutput() KafkaUserSpecAuthorizationAclsOutput
	ToKafkaUserSpecAuthorizationAclsOutputWithContext(context.Context) KafkaUserSpecAuthorizationAclsOutput
}

type KafkaUserSpecAuthorizationAclsArgs struct {
	// The host from which the action described in the ACL rule is allowed or denied. If not set, it defaults to `*`, allowing or denying the action from any host.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Operation which will be allowed or denied. Supported operations are: Read, Write, Create, Delete, Alter, Describe, ClusterAction, AlterConfigs, DescribeConfigs, IdempotentWrite and All.
	Operation pulumi.StringPtrInput `pulumi:"operation"`
	// List of operations which will be allowed or denied. Supported operations are: Read, Write, Create, Delete, Alter, Describe, ClusterAction, AlterConfigs, DescribeConfigs, IdempotentWrite and All.
	Operations pulumi.StringArrayInput `pulumi:"operations"`
	// Indicates the resource for which given ACL rule applies.
	Resource KafkaUserSpecAuthorizationAclsResourceInput `pulumi:"resource"`
	// The type of the rule. Currently the only supported type is `allow`. ACL rules with type `allow` are used to allow user to execute the specified operations. Default value is `allow`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (KafkaUserSpecAuthorizationAclsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthorizationAcls)(nil)).Elem()
}

func (i KafkaUserSpecAuthorizationAclsArgs) ToKafkaUserSpecAuthorizationAclsOutput() KafkaUserSpecAuthorizationAclsOutput {
	return i.ToKafkaUserSpecAuthorizationAclsOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthorizationAclsArgs) ToKafkaUserSpecAuthorizationAclsOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthorizationAclsOutput)
}

// KafkaUserSpecAuthorizationAclsArrayInput is an input type that accepts KafkaUserSpecAuthorizationAclsArray and KafkaUserSpecAuthorizationAclsArrayOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthorizationAclsArrayInput` via:
//
//	KafkaUserSpecAuthorizationAclsArray{ KafkaUserSpecAuthorizationAclsArgs{...} }
type KafkaUserSpecAuthorizationAclsArrayInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthorizationAclsArrayOutput() KafkaUserSpecAuthorizationAclsArrayOutput
	ToKafkaUserSpecAuthorizationAclsArrayOutputWithContext(context.Context) KafkaUserSpecAuthorizationAclsArrayOutput
}

type KafkaUserSpecAuthorizationAclsArray []KafkaUserSpecAuthorizationAclsInput

func (KafkaUserSpecAuthorizationAclsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaUserSpecAuthorizationAcls)(nil)).Elem()
}

func (i KafkaUserSpecAuthorizationAclsArray) ToKafkaUserSpecAuthorizationAclsArrayOutput() KafkaUserSpecAuthorizationAclsArrayOutput {
	return i.ToKafkaUserSpecAuthorizationAclsArrayOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthorizationAclsArray) ToKafkaUserSpecAuthorizationAclsArrayOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthorizationAclsArrayOutput)
}

type KafkaUserSpecAuthorizationAclsOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthorizationAclsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthorizationAcls)(nil)).Elem()
}

func (o KafkaUserSpecAuthorizationAclsOutput) ToKafkaUserSpecAuthorizationAclsOutput() KafkaUserSpecAuthorizationAclsOutput {
	return o
}

func (o KafkaUserSpecAuthorizationAclsOutput) ToKafkaUserSpecAuthorizationAclsOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsOutput {
	return o
}

// The host from which the action described in the ACL rule is allowed or denied. If not set, it defaults to `*`, allowing or denying the action from any host.
func (o KafkaUserSpecAuthorizationAclsOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAcls) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Operation which will be allowed or denied. Supported operations are: Read, Write, Create, Delete, Alter, Describe, ClusterAction, AlterConfigs, DescribeConfigs, IdempotentWrite and All.
func (o KafkaUserSpecAuthorizationAclsOutput) Operation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAcls) *string { return v.Operation }).(pulumi.StringPtrOutput)
}

// List of operations which will be allowed or denied. Supported operations are: Read, Write, Create, Delete, Alter, Describe, ClusterAction, AlterConfigs, DescribeConfigs, IdempotentWrite and All.
func (o KafkaUserSpecAuthorizationAclsOutput) Operations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAcls) []string { return v.Operations }).(pulumi.StringArrayOutput)
}

// Indicates the resource for which given ACL rule applies.
func (o KafkaUserSpecAuthorizationAclsOutput) Resource() KafkaUserSpecAuthorizationAclsResourceOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAcls) KafkaUserSpecAuthorizationAclsResource { return v.Resource }).(KafkaUserSpecAuthorizationAclsResourceOutput)
}

// The type of the rule. Currently the only supported type is `allow`. ACL rules with type `allow` are used to allow user to execute the specified operations. Default value is `allow`.
func (o KafkaUserSpecAuthorizationAclsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAcls) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type KafkaUserSpecAuthorizationAclsArrayOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthorizationAclsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaUserSpecAuthorizationAcls)(nil)).Elem()
}

func (o KafkaUserSpecAuthorizationAclsArrayOutput) ToKafkaUserSpecAuthorizationAclsArrayOutput() KafkaUserSpecAuthorizationAclsArrayOutput {
	return o
}

func (o KafkaUserSpecAuthorizationAclsArrayOutput) ToKafkaUserSpecAuthorizationAclsArrayOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsArrayOutput {
	return o
}

func (o KafkaUserSpecAuthorizationAclsArrayOutput) Index(i pulumi.IntInput) KafkaUserSpecAuthorizationAclsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KafkaUserSpecAuthorizationAcls {
		return vs[0].([]KafkaUserSpecAuthorizationAcls)[vs[1].(int)]
	}).(KafkaUserSpecAuthorizationAclsOutput)
}

// Indicates the resource for which given ACL rule applies.
type KafkaUserSpecAuthorizationAclsResource struct {
	// Name of resource for which given ACL rule applies. Can be combined with `patternType` field to use prefix pattern.
	Name *string `pulumi:"name"`
	// Describes the pattern used in the resource field. The supported types are `literal` and `prefix`. With `literal` pattern type, the resource field will be used as a definition of a full name. With `prefix` pattern type, the resource name will be used only as a prefix. Default value is `literal`.
	PatternType *string `pulumi:"patternType"`
	// Resource type. The available resource types are `topic`, `group`, `cluster`, and `transactionalId`.
	Type string `pulumi:"type"`
}

// KafkaUserSpecAuthorizationAclsResourceInput is an input type that accepts KafkaUserSpecAuthorizationAclsResourceArgs and KafkaUserSpecAuthorizationAclsResourceOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthorizationAclsResourceInput` via:
//
//	KafkaUserSpecAuthorizationAclsResourceArgs{...}
type KafkaUserSpecAuthorizationAclsResourceInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthorizationAclsResourceOutput() KafkaUserSpecAuthorizationAclsResourceOutput
	ToKafkaUserSpecAuthorizationAclsResourceOutputWithContext(context.Context) KafkaUserSpecAuthorizationAclsResourceOutput
}

// Indicates the resource for which given ACL rule applies.
type KafkaUserSpecAuthorizationAclsResourceArgs struct {
	// Name of resource for which given ACL rule applies. Can be combined with `patternType` field to use prefix pattern.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Describes the pattern used in the resource field. The supported types are `literal` and `prefix`. With `literal` pattern type, the resource field will be used as a definition of a full name. With `prefix` pattern type, the resource name will be used only as a prefix. Default value is `literal`.
	PatternType pulumi.StringPtrInput `pulumi:"patternType"`
	// Resource type. The available resource types are `topic`, `group`, `cluster`, and `transactionalId`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (KafkaUserSpecAuthorizationAclsResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthorizationAclsResource)(nil)).Elem()
}

func (i KafkaUserSpecAuthorizationAclsResourceArgs) ToKafkaUserSpecAuthorizationAclsResourceOutput() KafkaUserSpecAuthorizationAclsResourceOutput {
	return i.ToKafkaUserSpecAuthorizationAclsResourceOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthorizationAclsResourceArgs) ToKafkaUserSpecAuthorizationAclsResourceOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthorizationAclsResourceOutput)
}

// Indicates the resource for which given ACL rule applies.
type KafkaUserSpecAuthorizationAclsResourceOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthorizationAclsResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthorizationAclsResource)(nil)).Elem()
}

func (o KafkaUserSpecAuthorizationAclsResourceOutput) ToKafkaUserSpecAuthorizationAclsResourceOutput() KafkaUserSpecAuthorizationAclsResourceOutput {
	return o
}

func (o KafkaUserSpecAuthorizationAclsResourceOutput) ToKafkaUserSpecAuthorizationAclsResourceOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsResourceOutput {
	return o
}

// Name of resource for which given ACL rule applies. Can be combined with `patternType` field to use prefix pattern.
func (o KafkaUserSpecAuthorizationAclsResourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAclsResource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Describes the pattern used in the resource field. The supported types are `literal` and `prefix`. With `literal` pattern type, the resource field will be used as a definition of a full name. With `prefix` pattern type, the resource name will be used only as a prefix. Default value is `literal`.
func (o KafkaUserSpecAuthorizationAclsResourceOutput) PatternType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAclsResource) *string { return v.PatternType }).(pulumi.StringPtrOutput)
}

// Resource type. The available resource types are `topic`, `group`, `cluster`, and `transactionalId`.
func (o KafkaUserSpecAuthorizationAclsResourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAclsResource) string { return v.Type }).(pulumi.StringOutput)
}

// Quotas on requests to control the broker resources used by clients. Network bandwidth and request rate quotas can be enforced.Kafka documentation for Kafka User quotas can be found at http://kafka.apache.org/documentation/#design_quotas.
type KafkaUserSpecQuotas struct {
	// A quota on the maximum bytes per-second that each client group can fetch from a broker before the clients in the group are throttled. Defined on a per-broker basis.
	ConsumerByteRate *int `pulumi:"consumerByteRate"`
	// A quota on the rate at which mutations are accepted for the create topics request, the create partitions request and the delete topics request. The rate is accumulated by the number of partitions created or deleted.
	ControllerMutationRate *float64 `pulumi:"controllerMutationRate"`
	// A quota on the maximum bytes per-second that each client group can publish to a broker before the clients in the group are throttled. Defined on a per-broker basis.
	ProducerByteRate *int `pulumi:"producerByteRate"`
	// A quota on the maximum CPU utilization of each client group as a percentage of network and I/O threads.
	RequestPercentage *int `pulumi:"requestPercentage"`
}

// KafkaUserSpecQuotasInput is an input type that accepts KafkaUserSpecQuotasArgs and KafkaUserSpecQuotasOutput values.
// You can construct a concrete instance of `KafkaUserSpecQuotasInput` via:
//
//	KafkaUserSpecQuotasArgs{...}
type KafkaUserSpecQuotasInput interface {
	pulumi.Input

	ToKafkaUserSpecQuotasOutput() KafkaUserSpecQuotasOutput
	ToKafkaUserSpecQuotasOutputWithContext(context.Context) KafkaUserSpecQuotasOutput
}

// Quotas on requests to control the broker resources used by clients. Network bandwidth and request rate quotas can be enforced.Kafka documentation for Kafka User quotas can be found at http://kafka.apache.org/documentation/#design_quotas.
type KafkaUserSpecQuotasArgs struct {
	// A quota on the maximum bytes per-second that each client group can fetch from a broker before the clients in the group are throttled. Defined on a per-broker basis.
	ConsumerByteRate pulumi.IntPtrInput `pulumi:"consumerByteRate"`
	// A quota on the rate at which mutations are accepted for the create topics request, the create partitions request and the delete topics request. The rate is accumulated by the number of partitions created or deleted.
	ControllerMutationRate pulumi.Float64PtrInput `pulumi:"controllerMutationRate"`
	// A quota on the maximum bytes per-second that each client group can publish to a broker before the clients in the group are throttled. Defined on a per-broker basis.
	ProducerByteRate pulumi.IntPtrInput `pulumi:"producerByteRate"`
	// A quota on the maximum CPU utilization of each client group as a percentage of network and I/O threads.
	RequestPercentage pulumi.IntPtrInput `pulumi:"requestPercentage"`
}

func (KafkaUserSpecQuotasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecQuotas)(nil)).Elem()
}

func (i KafkaUserSpecQuotasArgs) ToKafkaUserSpecQuotasOutput() KafkaUserSpecQuotasOutput {
	return i.ToKafkaUserSpecQuotasOutputWithContext(context.Background())
}

func (i KafkaUserSpecQuotasArgs) ToKafkaUserSpecQuotasOutputWithContext(ctx context.Context) KafkaUserSpecQuotasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecQuotasOutput)
}

func (i KafkaUserSpecQuotasArgs) ToKafkaUserSpecQuotasPtrOutput() KafkaUserSpecQuotasPtrOutput {
	return i.ToKafkaUserSpecQuotasPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecQuotasArgs) ToKafkaUserSpecQuotasPtrOutputWithContext(ctx context.Context) KafkaUserSpecQuotasPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecQuotasOutput).ToKafkaUserSpecQuotasPtrOutputWithContext(ctx)
}

// KafkaUserSpecQuotasPtrInput is an input type that accepts KafkaUserSpecQuotasArgs, KafkaUserSpecQuotasPtr and KafkaUserSpecQuotasPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecQuotasPtrInput` via:
//
//	        KafkaUserSpecQuotasArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecQuotasPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecQuotasPtrOutput() KafkaUserSpecQuotasPtrOutput
	ToKafkaUserSpecQuotasPtrOutputWithContext(context.Context) KafkaUserSpecQuotasPtrOutput
}

type kafkaUserSpecQuotasPtrType KafkaUserSpecQuotasArgs

func KafkaUserSpecQuotasPtr(v *KafkaUserSpecQuotasArgs) KafkaUserSpecQuotasPtrInput {
	return (*kafkaUserSpecQuotasPtrType)(v)
}

func (*kafkaUserSpecQuotasPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecQuotas)(nil)).Elem()
}

func (i *kafkaUserSpecQuotasPtrType) ToKafkaUserSpecQuotasPtrOutput() KafkaUserSpecQuotasPtrOutput {
	return i.ToKafkaUserSpecQuotasPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecQuotasPtrType) ToKafkaUserSpecQuotasPtrOutputWithContext(ctx context.Context) KafkaUserSpecQuotasPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecQuotasPtrOutput)
}

// Quotas on requests to control the broker resources used by clients. Network bandwidth and request rate quotas can be enforced.Kafka documentation for Kafka User quotas can be found at http://kafka.apache.org/documentation/#design_quotas.
type KafkaUserSpecQuotasOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecQuotasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecQuotas)(nil)).Elem()
}

func (o KafkaUserSpecQuotasOutput) ToKafkaUserSpecQuotasOutput() KafkaUserSpecQuotasOutput {
	return o
}

func (o KafkaUserSpecQuotasOutput) ToKafkaUserSpecQuotasOutputWithContext(ctx context.Context) KafkaUserSpecQuotasOutput {
	return o
}

func (o KafkaUserSpecQuotasOutput) ToKafkaUserSpecQuotasPtrOutput() KafkaUserSpecQuotasPtrOutput {
	return o.ToKafkaUserSpecQuotasPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecQuotasOutput) ToKafkaUserSpecQuotasPtrOutputWithContext(ctx context.Context) KafkaUserSpecQuotasPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecQuotas) *KafkaUserSpecQuotas {
		return &v
	}).(KafkaUserSpecQuotasPtrOutput)
}

// A quota on the maximum bytes per-second that each client group can fetch from a broker before the clients in the group are throttled. Defined on a per-broker basis.
func (o KafkaUserSpecQuotasOutput) ConsumerByteRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecQuotas) *int { return v.ConsumerByteRate }).(pulumi.IntPtrOutput)
}

// A quota on the rate at which mutations are accepted for the create topics request, the create partitions request and the delete topics request. The rate is accumulated by the number of partitions created or deleted.
func (o KafkaUserSpecQuotasOutput) ControllerMutationRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v KafkaUserSpecQuotas) *float64 { return v.ControllerMutationRate }).(pulumi.Float64PtrOutput)
}

// A quota on the maximum bytes per-second that each client group can publish to a broker before the clients in the group are throttled. Defined on a per-broker basis.
func (o KafkaUserSpecQuotasOutput) ProducerByteRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecQuotas) *int { return v.ProducerByteRate }).(pulumi.IntPtrOutput)
}

// A quota on the maximum CPU utilization of each client group as a percentage of network and I/O threads.
func (o KafkaUserSpecQuotasOutput) RequestPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecQuotas) *int { return v.RequestPercentage }).(pulumi.IntPtrOutput)
}

type KafkaUserSpecQuotasPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecQuotasPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecQuotas)(nil)).Elem()
}

func (o KafkaUserSpecQuotasPtrOutput) ToKafkaUserSpecQuotasPtrOutput() KafkaUserSpecQuotasPtrOutput {
	return o
}

func (o KafkaUserSpecQuotasPtrOutput) ToKafkaUserSpecQuotasPtrOutputWithContext(ctx context.Context) KafkaUserSpecQuotasPtrOutput {
	return o
}

func (o KafkaUserSpecQuotasPtrOutput) Elem() KafkaUserSpecQuotasOutput {
	return o.ApplyT(func(v *KafkaUserSpecQuotas) KafkaUserSpecQuotas {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecQuotas
		return ret
	}).(KafkaUserSpecQuotasOutput)
}

// A quota on the maximum bytes per-second that each client group can fetch from a broker before the clients in the group are throttled. Defined on a per-broker basis.
func (o KafkaUserSpecQuotasPtrOutput) ConsumerByteRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecQuotas) *int {
		if v == nil {
			return nil
		}
		return v.ConsumerByteRate
	}).(pulumi.IntPtrOutput)
}

// A quota on the rate at which mutations are accepted for the create topics request, the create partitions request and the delete topics request. The rate is accumulated by the number of partitions created or deleted.
func (o KafkaUserSpecQuotasPtrOutput) ControllerMutationRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecQuotas) *float64 {
		if v == nil {
			return nil
		}
		return v.ControllerMutationRate
	}).(pulumi.Float64PtrOutput)
}

// A quota on the maximum bytes per-second that each client group can publish to a broker before the clients in the group are throttled. Defined on a per-broker basis.
func (o KafkaUserSpecQuotasPtrOutput) ProducerByteRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecQuotas) *int {
		if v == nil {
			return nil
		}
		return v.ProducerByteRate
	}).(pulumi.IntPtrOutput)
}

// A quota on the maximum CPU utilization of each client group as a percentage of network and I/O threads.
func (o KafkaUserSpecQuotasPtrOutput) RequestPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecQuotas) *int {
		if v == nil {
			return nil
		}
		return v.RequestPercentage
	}).(pulumi.IntPtrOutput)
}

// Template to specify how Kafka User `Secrets` are generated.
type KafkaUserSpecTemplate struct {
	// Template for KafkaUser resources. The template allows users to specify how the `Secret` with password or TLS certificates is generated.
	Secret *KafkaUserSpecTemplateSecret `pulumi:"secret"`
}

// KafkaUserSpecTemplateInput is an input type that accepts KafkaUserSpecTemplateArgs and KafkaUserSpecTemplateOutput values.
// You can construct a concrete instance of `KafkaUserSpecTemplateInput` via:
//
//	KafkaUserSpecTemplateArgs{...}
type KafkaUserSpecTemplateInput interface {
	pulumi.Input

	ToKafkaUserSpecTemplateOutput() KafkaUserSpecTemplateOutput
	ToKafkaUserSpecTemplateOutputWithContext(context.Context) KafkaUserSpecTemplateOutput
}

// Template to specify how Kafka User `Secrets` are generated.
type KafkaUserSpecTemplateArgs struct {
	// Template for KafkaUser resources. The template allows users to specify how the `Secret` with password or TLS certificates is generated.
	Secret KafkaUserSpecTemplateSecretPtrInput `pulumi:"secret"`
}

func (KafkaUserSpecTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecTemplate)(nil)).Elem()
}

func (i KafkaUserSpecTemplateArgs) ToKafkaUserSpecTemplateOutput() KafkaUserSpecTemplateOutput {
	return i.ToKafkaUserSpecTemplateOutputWithContext(context.Background())
}

func (i KafkaUserSpecTemplateArgs) ToKafkaUserSpecTemplateOutputWithContext(ctx context.Context) KafkaUserSpecTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplateOutput)
}

func (i KafkaUserSpecTemplateArgs) ToKafkaUserSpecTemplatePtrOutput() KafkaUserSpecTemplatePtrOutput {
	return i.ToKafkaUserSpecTemplatePtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecTemplateArgs) ToKafkaUserSpecTemplatePtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplateOutput).ToKafkaUserSpecTemplatePtrOutputWithContext(ctx)
}

// KafkaUserSpecTemplatePtrInput is an input type that accepts KafkaUserSpecTemplateArgs, KafkaUserSpecTemplatePtr and KafkaUserSpecTemplatePtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecTemplatePtrInput` via:
//
//	        KafkaUserSpecTemplateArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecTemplatePtrInput interface {
	pulumi.Input

	ToKafkaUserSpecTemplatePtrOutput() KafkaUserSpecTemplatePtrOutput
	ToKafkaUserSpecTemplatePtrOutputWithContext(context.Context) KafkaUserSpecTemplatePtrOutput
}

type kafkaUserSpecTemplatePtrType KafkaUserSpecTemplateArgs

func KafkaUserSpecTemplatePtr(v *KafkaUserSpecTemplateArgs) KafkaUserSpecTemplatePtrInput {
	return (*kafkaUserSpecTemplatePtrType)(v)
}

func (*kafkaUserSpecTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecTemplate)(nil)).Elem()
}

func (i *kafkaUserSpecTemplatePtrType) ToKafkaUserSpecTemplatePtrOutput() KafkaUserSpecTemplatePtrOutput {
	return i.ToKafkaUserSpecTemplatePtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecTemplatePtrType) ToKafkaUserSpecTemplatePtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplatePtrOutput)
}

// Template to specify how Kafka User `Secrets` are generated.
type KafkaUserSpecTemplateOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecTemplate)(nil)).Elem()
}

func (o KafkaUserSpecTemplateOutput) ToKafkaUserSpecTemplateOutput() KafkaUserSpecTemplateOutput {
	return o
}

func (o KafkaUserSpecTemplateOutput) ToKafkaUserSpecTemplateOutputWithContext(ctx context.Context) KafkaUserSpecTemplateOutput {
	return o
}

func (o KafkaUserSpecTemplateOutput) ToKafkaUserSpecTemplatePtrOutput() KafkaUserSpecTemplatePtrOutput {
	return o.ToKafkaUserSpecTemplatePtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecTemplateOutput) ToKafkaUserSpecTemplatePtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecTemplate) *KafkaUserSpecTemplate {
		return &v
	}).(KafkaUserSpecTemplatePtrOutput)
}

// Template for KafkaUser resources. The template allows users to specify how the `Secret` with password or TLS certificates is generated.
func (o KafkaUserSpecTemplateOutput) Secret() KafkaUserSpecTemplateSecretPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecTemplate) *KafkaUserSpecTemplateSecret { return v.Secret }).(KafkaUserSpecTemplateSecretPtrOutput)
}

type KafkaUserSpecTemplatePtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecTemplate)(nil)).Elem()
}

func (o KafkaUserSpecTemplatePtrOutput) ToKafkaUserSpecTemplatePtrOutput() KafkaUserSpecTemplatePtrOutput {
	return o
}

func (o KafkaUserSpecTemplatePtrOutput) ToKafkaUserSpecTemplatePtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplatePtrOutput {
	return o
}

func (o KafkaUserSpecTemplatePtrOutput) Elem() KafkaUserSpecTemplateOutput {
	return o.ApplyT(func(v *KafkaUserSpecTemplate) KafkaUserSpecTemplate {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecTemplate
		return ret
	}).(KafkaUserSpecTemplateOutput)
}

// Template for KafkaUser resources. The template allows users to specify how the `Secret` with password or TLS certificates is generated.
func (o KafkaUserSpecTemplatePtrOutput) Secret() KafkaUserSpecTemplateSecretPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecTemplate) *KafkaUserSpecTemplateSecret {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(KafkaUserSpecTemplateSecretPtrOutput)
}

// Template for KafkaUser resources. The template allows users to specify how the `Secret` with password or TLS certificates is generated.
type KafkaUserSpecTemplateSecret struct {
	// Metadata applied to the resource.
	Metadata *KafkaUserSpecTemplateSecretMetadata `pulumi:"metadata"`
}

// KafkaUserSpecTemplateSecretInput is an input type that accepts KafkaUserSpecTemplateSecretArgs and KafkaUserSpecTemplateSecretOutput values.
// You can construct a concrete instance of `KafkaUserSpecTemplateSecretInput` via:
//
//	KafkaUserSpecTemplateSecretArgs{...}
type KafkaUserSpecTemplateSecretInput interface {
	pulumi.Input

	ToKafkaUserSpecTemplateSecretOutput() KafkaUserSpecTemplateSecretOutput
	ToKafkaUserSpecTemplateSecretOutputWithContext(context.Context) KafkaUserSpecTemplateSecretOutput
}

// Template for KafkaUser resources. The template allows users to specify how the `Secret` with password or TLS certificates is generated.
type KafkaUserSpecTemplateSecretArgs struct {
	// Metadata applied to the resource.
	Metadata KafkaUserSpecTemplateSecretMetadataPtrInput `pulumi:"metadata"`
}

func (KafkaUserSpecTemplateSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecTemplateSecret)(nil)).Elem()
}

func (i KafkaUserSpecTemplateSecretArgs) ToKafkaUserSpecTemplateSecretOutput() KafkaUserSpecTemplateSecretOutput {
	return i.ToKafkaUserSpecTemplateSecretOutputWithContext(context.Background())
}

func (i KafkaUserSpecTemplateSecretArgs) ToKafkaUserSpecTemplateSecretOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplateSecretOutput)
}

func (i KafkaUserSpecTemplateSecretArgs) ToKafkaUserSpecTemplateSecretPtrOutput() KafkaUserSpecTemplateSecretPtrOutput {
	return i.ToKafkaUserSpecTemplateSecretPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecTemplateSecretArgs) ToKafkaUserSpecTemplateSecretPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplateSecretOutput).ToKafkaUserSpecTemplateSecretPtrOutputWithContext(ctx)
}

// KafkaUserSpecTemplateSecretPtrInput is an input type that accepts KafkaUserSpecTemplateSecretArgs, KafkaUserSpecTemplateSecretPtr and KafkaUserSpecTemplateSecretPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecTemplateSecretPtrInput` via:
//
//	        KafkaUserSpecTemplateSecretArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecTemplateSecretPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecTemplateSecretPtrOutput() KafkaUserSpecTemplateSecretPtrOutput
	ToKafkaUserSpecTemplateSecretPtrOutputWithContext(context.Context) KafkaUserSpecTemplateSecretPtrOutput
}

type kafkaUserSpecTemplateSecretPtrType KafkaUserSpecTemplateSecretArgs

func KafkaUserSpecTemplateSecretPtr(v *KafkaUserSpecTemplateSecretArgs) KafkaUserSpecTemplateSecretPtrInput {
	return (*kafkaUserSpecTemplateSecretPtrType)(v)
}

func (*kafkaUserSpecTemplateSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecTemplateSecret)(nil)).Elem()
}

func (i *kafkaUserSpecTemplateSecretPtrType) ToKafkaUserSpecTemplateSecretPtrOutput() KafkaUserSpecTemplateSecretPtrOutput {
	return i.ToKafkaUserSpecTemplateSecretPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecTemplateSecretPtrType) ToKafkaUserSpecTemplateSecretPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplateSecretPtrOutput)
}

// Template for KafkaUser resources. The template allows users to specify how the `Secret` with password or TLS certificates is generated.
type KafkaUserSpecTemplateSecretOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecTemplateSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecTemplateSecret)(nil)).Elem()
}

func (o KafkaUserSpecTemplateSecretOutput) ToKafkaUserSpecTemplateSecretOutput() KafkaUserSpecTemplateSecretOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretOutput) ToKafkaUserSpecTemplateSecretOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretOutput) ToKafkaUserSpecTemplateSecretPtrOutput() KafkaUserSpecTemplateSecretPtrOutput {
	return o.ToKafkaUserSpecTemplateSecretPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecTemplateSecretOutput) ToKafkaUserSpecTemplateSecretPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecTemplateSecret) *KafkaUserSpecTemplateSecret {
		return &v
	}).(KafkaUserSpecTemplateSecretPtrOutput)
}

// Metadata applied to the resource.
func (o KafkaUserSpecTemplateSecretOutput) Metadata() KafkaUserSpecTemplateSecretMetadataPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecTemplateSecret) *KafkaUserSpecTemplateSecretMetadata { return v.Metadata }).(KafkaUserSpecTemplateSecretMetadataPtrOutput)
}

type KafkaUserSpecTemplateSecretPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecTemplateSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecTemplateSecret)(nil)).Elem()
}

func (o KafkaUserSpecTemplateSecretPtrOutput) ToKafkaUserSpecTemplateSecretPtrOutput() KafkaUserSpecTemplateSecretPtrOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretPtrOutput) ToKafkaUserSpecTemplateSecretPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretPtrOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretPtrOutput) Elem() KafkaUserSpecTemplateSecretOutput {
	return o.ApplyT(func(v *KafkaUserSpecTemplateSecret) KafkaUserSpecTemplateSecret {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecTemplateSecret
		return ret
	}).(KafkaUserSpecTemplateSecretOutput)
}

// Metadata applied to the resource.
func (o KafkaUserSpecTemplateSecretPtrOutput) Metadata() KafkaUserSpecTemplateSecretMetadataPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecTemplateSecret) *KafkaUserSpecTemplateSecretMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(KafkaUserSpecTemplateSecretMetadataPtrOutput)
}

// Metadata applied to the resource.
type KafkaUserSpecTemplateSecretMetadata struct {
	// Annotations added to the Kubernetes resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Labels added to the Kubernetes resource.
	Labels map[string]string `pulumi:"labels"`
}

// KafkaUserSpecTemplateSecretMetadataInput is an input type that accepts KafkaUserSpecTemplateSecretMetadataArgs and KafkaUserSpecTemplateSecretMetadataOutput values.
// You can construct a concrete instance of `KafkaUserSpecTemplateSecretMetadataInput` via:
//
//	KafkaUserSpecTemplateSecretMetadataArgs{...}
type KafkaUserSpecTemplateSecretMetadataInput interface {
	pulumi.Input

	ToKafkaUserSpecTemplateSecretMetadataOutput() KafkaUserSpecTemplateSecretMetadataOutput
	ToKafkaUserSpecTemplateSecretMetadataOutputWithContext(context.Context) KafkaUserSpecTemplateSecretMetadataOutput
}

// Metadata applied to the resource.
type KafkaUserSpecTemplateSecretMetadataArgs struct {
	// Annotations added to the Kubernetes resource.
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// Labels added to the Kubernetes resource.
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (KafkaUserSpecTemplateSecretMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecTemplateSecretMetadata)(nil)).Elem()
}

func (i KafkaUserSpecTemplateSecretMetadataArgs) ToKafkaUserSpecTemplateSecretMetadataOutput() KafkaUserSpecTemplateSecretMetadataOutput {
	return i.ToKafkaUserSpecTemplateSecretMetadataOutputWithContext(context.Background())
}

func (i KafkaUserSpecTemplateSecretMetadataArgs) ToKafkaUserSpecTemplateSecretMetadataOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplateSecretMetadataOutput)
}

func (i KafkaUserSpecTemplateSecretMetadataArgs) ToKafkaUserSpecTemplateSecretMetadataPtrOutput() KafkaUserSpecTemplateSecretMetadataPtrOutput {
	return i.ToKafkaUserSpecTemplateSecretMetadataPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecTemplateSecretMetadataArgs) ToKafkaUserSpecTemplateSecretMetadataPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplateSecretMetadataOutput).ToKafkaUserSpecTemplateSecretMetadataPtrOutputWithContext(ctx)
}

// KafkaUserSpecTemplateSecretMetadataPtrInput is an input type that accepts KafkaUserSpecTemplateSecretMetadataArgs, KafkaUserSpecTemplateSecretMetadataPtr and KafkaUserSpecTemplateSecretMetadataPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecTemplateSecretMetadataPtrInput` via:
//
//	        KafkaUserSpecTemplateSecretMetadataArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecTemplateSecretMetadataPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecTemplateSecretMetadataPtrOutput() KafkaUserSpecTemplateSecretMetadataPtrOutput
	ToKafkaUserSpecTemplateSecretMetadataPtrOutputWithContext(context.Context) KafkaUserSpecTemplateSecretMetadataPtrOutput
}

type kafkaUserSpecTemplateSecretMetadataPtrType KafkaUserSpecTemplateSecretMetadataArgs

func KafkaUserSpecTemplateSecretMetadataPtr(v *KafkaUserSpecTemplateSecretMetadataArgs) KafkaUserSpecTemplateSecretMetadataPtrInput {
	return (*kafkaUserSpecTemplateSecretMetadataPtrType)(v)
}

func (*kafkaUserSpecTemplateSecretMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecTemplateSecretMetadata)(nil)).Elem()
}

func (i *kafkaUserSpecTemplateSecretMetadataPtrType) ToKafkaUserSpecTemplateSecretMetadataPtrOutput() KafkaUserSpecTemplateSecretMetadataPtrOutput {
	return i.ToKafkaUserSpecTemplateSecretMetadataPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecTemplateSecretMetadataPtrType) ToKafkaUserSpecTemplateSecretMetadataPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplateSecretMetadataPtrOutput)
}

// Metadata applied to the resource.
type KafkaUserSpecTemplateSecretMetadataOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecTemplateSecretMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecTemplateSecretMetadata)(nil)).Elem()
}

func (o KafkaUserSpecTemplateSecretMetadataOutput) ToKafkaUserSpecTemplateSecretMetadataOutput() KafkaUserSpecTemplateSecretMetadataOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretMetadataOutput) ToKafkaUserSpecTemplateSecretMetadataOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretMetadataOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretMetadataOutput) ToKafkaUserSpecTemplateSecretMetadataPtrOutput() KafkaUserSpecTemplateSecretMetadataPtrOutput {
	return o.ToKafkaUserSpecTemplateSecretMetadataPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecTemplateSecretMetadataOutput) ToKafkaUserSpecTemplateSecretMetadataPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecTemplateSecretMetadata) *KafkaUserSpecTemplateSecretMetadata {
		return &v
	}).(KafkaUserSpecTemplateSecretMetadataPtrOutput)
}

// Annotations added to the Kubernetes resource.
func (o KafkaUserSpecTemplateSecretMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v KafkaUserSpecTemplateSecretMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Labels added to the Kubernetes resource.
func (o KafkaUserSpecTemplateSecretMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v KafkaUserSpecTemplateSecretMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type KafkaUserSpecTemplateSecretMetadataPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecTemplateSecretMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecTemplateSecretMetadata)(nil)).Elem()
}

func (o KafkaUserSpecTemplateSecretMetadataPtrOutput) ToKafkaUserSpecTemplateSecretMetadataPtrOutput() KafkaUserSpecTemplateSecretMetadataPtrOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretMetadataPtrOutput) ToKafkaUserSpecTemplateSecretMetadataPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretMetadataPtrOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretMetadataPtrOutput) Elem() KafkaUserSpecTemplateSecretMetadataOutput {
	return o.ApplyT(func(v *KafkaUserSpecTemplateSecretMetadata) KafkaUserSpecTemplateSecretMetadata {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecTemplateSecretMetadata
		return ret
	}).(KafkaUserSpecTemplateSecretMetadataOutput)
}

// Annotations added to the Kubernetes resource.
func (o KafkaUserSpecTemplateSecretMetadataPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KafkaUserSpecTemplateSecretMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// Labels added to the Kubernetes resource.
func (o KafkaUserSpecTemplateSecretMetadataPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KafkaUserSpecTemplateSecretMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Annotations added to the Kubernetes resource.
type KafkaUserSpecTemplateSecretMetadataAnnotations struct {
}

// Labels added to the Kubernetes resource.
type KafkaUserSpecTemplateSecretMetadataLabels struct {
}

// The status of the Kafka User.
type KafkaUserStatus struct {
	// List of status conditions.
	Conditions []KafkaUserStatusConditions `pulumi:"conditions"`
	// The generation of the CRD that was last reconciled by the operator.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// The name of `Secret` where the credentials are stored.
	Secret *string `pulumi:"secret"`
	// Username.
	Username *string `pulumi:"username"`
}

// KafkaUserStatusInput is an input type that accepts KafkaUserStatusArgs and KafkaUserStatusOutput values.
// You can construct a concrete instance of `KafkaUserStatusInput` via:
//
//	KafkaUserStatusArgs{...}
type KafkaUserStatusInput interface {
	pulumi.Input

	ToKafkaUserStatusOutput() KafkaUserStatusOutput
	ToKafkaUserStatusOutputWithContext(context.Context) KafkaUserStatusOutput
}

// The status of the Kafka User.
type KafkaUserStatusArgs struct {
	// List of status conditions.
	Conditions KafkaUserStatusConditionsArrayInput `pulumi:"conditions"`
	// The generation of the CRD that was last reconciled by the operator.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// The name of `Secret` where the credentials are stored.
	Secret pulumi.StringPtrInput `pulumi:"secret"`
	// Username.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (KafkaUserStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserStatus)(nil)).Elem()
}

func (i KafkaUserStatusArgs) ToKafkaUserStatusOutput() KafkaUserStatusOutput {
	return i.ToKafkaUserStatusOutputWithContext(context.Background())
}

func (i KafkaUserStatusArgs) ToKafkaUserStatusOutputWithContext(ctx context.Context) KafkaUserStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserStatusOutput)
}

func (i KafkaUserStatusArgs) ToKafkaUserStatusPtrOutput() KafkaUserStatusPtrOutput {
	return i.ToKafkaUserStatusPtrOutputWithContext(context.Background())
}

func (i KafkaUserStatusArgs) ToKafkaUserStatusPtrOutputWithContext(ctx context.Context) KafkaUserStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserStatusOutput).ToKafkaUserStatusPtrOutputWithContext(ctx)
}

// KafkaUserStatusPtrInput is an input type that accepts KafkaUserStatusArgs, KafkaUserStatusPtr and KafkaUserStatusPtrOutput values.
// You can construct a concrete instance of `KafkaUserStatusPtrInput` via:
//
//	        KafkaUserStatusArgs{...}
//
//	or:
//
//	        nil
type KafkaUserStatusPtrInput interface {
	pulumi.Input

	ToKafkaUserStatusPtrOutput() KafkaUserStatusPtrOutput
	ToKafkaUserStatusPtrOutputWithContext(context.Context) KafkaUserStatusPtrOutput
}

type kafkaUserStatusPtrType KafkaUserStatusArgs

func KafkaUserStatusPtr(v *KafkaUserStatusArgs) KafkaUserStatusPtrInput {
	return (*kafkaUserStatusPtrType)(v)
}

func (*kafkaUserStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserStatus)(nil)).Elem()
}

func (i *kafkaUserStatusPtrType) ToKafkaUserStatusPtrOutput() KafkaUserStatusPtrOutput {
	return i.ToKafkaUserStatusPtrOutputWithContext(context.Background())
}

func (i *kafkaUserStatusPtrType) ToKafkaUserStatusPtrOutputWithContext(ctx context.Context) KafkaUserStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserStatusPtrOutput)
}

// The status of the Kafka User.
type KafkaUserStatusOutput struct{ *pulumi.OutputState }

func (KafkaUserStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserStatus)(nil)).Elem()
}

func (o KafkaUserStatusOutput) ToKafkaUserStatusOutput() KafkaUserStatusOutput {
	return o
}

func (o KafkaUserStatusOutput) ToKafkaUserStatusOutputWithContext(ctx context.Context) KafkaUserStatusOutput {
	return o
}

func (o KafkaUserStatusOutput) ToKafkaUserStatusPtrOutput() KafkaUserStatusPtrOutput {
	return o.ToKafkaUserStatusPtrOutputWithContext(context.Background())
}

func (o KafkaUserStatusOutput) ToKafkaUserStatusPtrOutputWithContext(ctx context.Context) KafkaUserStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserStatus) *KafkaUserStatus {
		return &v
	}).(KafkaUserStatusPtrOutput)
}

// List of status conditions.
func (o KafkaUserStatusOutput) Conditions() KafkaUserStatusConditionsArrayOutput {
	return o.ApplyT(func(v KafkaUserStatus) []KafkaUserStatusConditions { return v.Conditions }).(KafkaUserStatusConditionsArrayOutput)
}

// The generation of the CRD that was last reconciled by the operator.
func (o KafkaUserStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaUserStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// The name of `Secret` where the credentials are stored.
func (o KafkaUserStatusOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatus) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// Username.
func (o KafkaUserStatusOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatus) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type KafkaUserStatusPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserStatus)(nil)).Elem()
}

func (o KafkaUserStatusPtrOutput) ToKafkaUserStatusPtrOutput() KafkaUserStatusPtrOutput {
	return o
}

func (o KafkaUserStatusPtrOutput) ToKafkaUserStatusPtrOutputWithContext(ctx context.Context) KafkaUserStatusPtrOutput {
	return o
}

func (o KafkaUserStatusPtrOutput) Elem() KafkaUserStatusOutput {
	return o.ApplyT(func(v *KafkaUserStatus) KafkaUserStatus {
		if v != nil {
			return *v
		}
		var ret KafkaUserStatus
		return ret
	}).(KafkaUserStatusOutput)
}

// List of status conditions.
func (o KafkaUserStatusPtrOutput) Conditions() KafkaUserStatusConditionsArrayOutput {
	return o.ApplyT(func(v *KafkaUserStatus) []KafkaUserStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(KafkaUserStatusConditionsArrayOutput)
}

// The generation of the CRD that was last reconciled by the operator.
func (o KafkaUserStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaUserStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// The name of `Secret` where the credentials are stored.
func (o KafkaUserStatusPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUserStatus) *string {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(pulumi.StringPtrOutput)
}

// Username.
func (o KafkaUserStatusPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUserStatus) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type KafkaUserStatusConditions struct {
	// Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Human-readable message indicating details about the condition's last transition.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition (a single word in CamelCase).
	Reason *string `pulumi:"reason"`
	// The status of the condition, either True, False or Unknown.
	Status *string `pulumi:"status"`
	// The unique identifier of a condition, used to distinguish between other conditions in the resource.
	Type *string `pulumi:"type"`
}

// KafkaUserStatusConditionsInput is an input type that accepts KafkaUserStatusConditionsArgs and KafkaUserStatusConditionsOutput values.
// You can construct a concrete instance of `KafkaUserStatusConditionsInput` via:
//
//	KafkaUserStatusConditionsArgs{...}
type KafkaUserStatusConditionsInput interface {
	pulumi.Input

	ToKafkaUserStatusConditionsOutput() KafkaUserStatusConditionsOutput
	ToKafkaUserStatusConditionsOutputWithContext(context.Context) KafkaUserStatusConditionsOutput
}

type KafkaUserStatusConditionsArgs struct {
	// Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Human-readable message indicating details about the condition's last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition (a single word in CamelCase).
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// The status of the condition, either True, False or Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The unique identifier of a condition, used to distinguish between other conditions in the resource.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (KafkaUserStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserStatusConditions)(nil)).Elem()
}

func (i KafkaUserStatusConditionsArgs) ToKafkaUserStatusConditionsOutput() KafkaUserStatusConditionsOutput {
	return i.ToKafkaUserStatusConditionsOutputWithContext(context.Background())
}

func (i KafkaUserStatusConditionsArgs) ToKafkaUserStatusConditionsOutputWithContext(ctx context.Context) KafkaUserStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserStatusConditionsOutput)
}

// KafkaUserStatusConditionsArrayInput is an input type that accepts KafkaUserStatusConditionsArray and KafkaUserStatusConditionsArrayOutput values.
// You can construct a concrete instance of `KafkaUserStatusConditionsArrayInput` via:
//
//	KafkaUserStatusConditionsArray{ KafkaUserStatusConditionsArgs{...} }
type KafkaUserStatusConditionsArrayInput interface {
	pulumi.Input

	ToKafkaUserStatusConditionsArrayOutput() KafkaUserStatusConditionsArrayOutput
	ToKafkaUserStatusConditionsArrayOutputWithContext(context.Context) KafkaUserStatusConditionsArrayOutput
}

type KafkaUserStatusConditionsArray []KafkaUserStatusConditionsInput

func (KafkaUserStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaUserStatusConditions)(nil)).Elem()
}

func (i KafkaUserStatusConditionsArray) ToKafkaUserStatusConditionsArrayOutput() KafkaUserStatusConditionsArrayOutput {
	return i.ToKafkaUserStatusConditionsArrayOutputWithContext(context.Background())
}

func (i KafkaUserStatusConditionsArray) ToKafkaUserStatusConditionsArrayOutputWithContext(ctx context.Context) KafkaUserStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserStatusConditionsArrayOutput)
}

type KafkaUserStatusConditionsOutput struct{ *pulumi.OutputState }

func (KafkaUserStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserStatusConditions)(nil)).Elem()
}

func (o KafkaUserStatusConditionsOutput) ToKafkaUserStatusConditionsOutput() KafkaUserStatusConditionsOutput {
	return o
}

func (o KafkaUserStatusConditionsOutput) ToKafkaUserStatusConditionsOutputWithContext(ctx context.Context) KafkaUserStatusConditionsOutput {
	return o
}

// Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
func (o KafkaUserStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// Human-readable message indicating details about the condition's last transition.
func (o KafkaUserStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition (a single word in CamelCase).
func (o KafkaUserStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// The status of the condition, either True, False or Unknown.
func (o KafkaUserStatusConditionsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatusConditions) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The unique identifier of a condition, used to distinguish between other conditions in the resource.
func (o KafkaUserStatusConditionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatusConditions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type KafkaUserStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (KafkaUserStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaUserStatusConditions)(nil)).Elem()
}

func (o KafkaUserStatusConditionsArrayOutput) ToKafkaUserStatusConditionsArrayOutput() KafkaUserStatusConditionsArrayOutput {
	return o
}

func (o KafkaUserStatusConditionsArrayOutput) ToKafkaUserStatusConditionsArrayOutputWithContext(ctx context.Context) KafkaUserStatusConditionsArrayOutput {
	return o
}

func (o KafkaUserStatusConditionsArrayOutput) Index(i pulumi.IntInput) KafkaUserStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KafkaUserStatusConditions {
		return vs[0].([]KafkaUserStatusConditions)[vs[1].(int)]
	}).(KafkaUserStatusConditionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthorizationAclsInput)(nil)).Elem(), KafkaUserSpecAuthorizationAclsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthorizationAclsArrayInput)(nil)).Elem(), KafkaUserSpecAuthorizationAclsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthorizationAclsResourceInput)(nil)).Elem(), KafkaUserSpecAuthorizationAclsResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecQuotasInput)(nil)).Elem(), KafkaUserSpecQuotasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecQuotasPtrInput)(nil)).Elem(), KafkaUserSpecQuotasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecTemplateInput)(nil)).Elem(), KafkaUserSpecTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecTemplatePtrInput)(nil)).Elem(), KafkaUserSpecTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecTemplateSecretInput)(nil)).Elem(), KafkaUserSpecTemplateSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecTemplateSecretPtrInput)(nil)).Elem(), KafkaUserSpecTemplateSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecTemplateSecretMetadataInput)(nil)).Elem(), KafkaUserSpecTemplateSecretMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecTemplateSecretMetadataPtrInput)(nil)).Elem(), KafkaUserSpecTemplateSecretMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserStatusInput)(nil)).Elem(), KafkaUserStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserStatusPtrInput)(nil)).Elem(), KafkaUserStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserStatusConditionsInput)(nil)).Elem(), KafkaUserStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserStatusConditionsArrayInput)(nil)).Elem(), KafkaUserStatusConditionsArray{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthorizationAclsOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthorizationAclsArrayOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthorizationAclsResourceOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecQuotasOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecQuotasPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecTemplateOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecTemplatePtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecTemplateSecretOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecTemplateSecretPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecTemplateSecretMetadataOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecTemplateSecretMetadataPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserStatusOutput{})
	pulumi.RegisterOutputType(KafkaUserStatusPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserStatusConditionsOutput{})
	pulumi.RegisterOutputType(KafkaUserStatusConditionsArrayOutput{})
}
