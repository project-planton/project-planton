// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KafkaMirrorMaker struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// The specification of Kafka MirrorMaker.
	Spec pulumi.AnyOutput `pulumi:"spec"`
	// The status of Kafka MirrorMaker.
	Status KafkaMirrorMakerStatusPtrOutput `pulumi:"status"`
}

// NewKafkaMirrorMaker registers a new resource with the given unique name, arguments, and options.
func NewKafkaMirrorMaker(ctx *pulumi.Context,
	name string, args *KafkaMirrorMakerArgs, opts ...pulumi.ResourceOption) (*KafkaMirrorMaker, error) {
	if args == nil {
		args = &KafkaMirrorMakerArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta2")
	args.Kind = pulumi.StringPtr("KafkaMirrorMaker")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaMirrorMaker
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaMirrorMaker", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaMirrorMaker gets an existing KafkaMirrorMaker resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaMirrorMaker(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaMirrorMakerState, opts ...pulumi.ResourceOption) (*KafkaMirrorMaker, error) {
	var resource KafkaMirrorMaker
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaMirrorMaker", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaMirrorMaker resources.
type kafkaMirrorMakerState struct {
}

type KafkaMirrorMakerState struct {
}

func (KafkaMirrorMakerState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaMirrorMakerState)(nil)).Elem()
}

type kafkaMirrorMakerArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// The specification of Kafka MirrorMaker.
	Spec interface{} `pulumi:"spec"`
	// The status of Kafka MirrorMaker.
	Status *KafkaMirrorMakerStatus `pulumi:"status"`
}

// The set of arguments for constructing a KafkaMirrorMaker resource.
type KafkaMirrorMakerArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// The specification of Kafka MirrorMaker.
	Spec pulumi.Input
	// The status of Kafka MirrorMaker.
	Status KafkaMirrorMakerStatusPtrInput
}

func (KafkaMirrorMakerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaMirrorMakerArgs)(nil)).Elem()
}

type KafkaMirrorMakerInput interface {
	pulumi.Input

	ToKafkaMirrorMakerOutput() KafkaMirrorMakerOutput
	ToKafkaMirrorMakerOutputWithContext(ctx context.Context) KafkaMirrorMakerOutput
}

func (*KafkaMirrorMaker) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaMirrorMaker)(nil)).Elem()
}

func (i *KafkaMirrorMaker) ToKafkaMirrorMakerOutput() KafkaMirrorMakerOutput {
	return i.ToKafkaMirrorMakerOutputWithContext(context.Background())
}

func (i *KafkaMirrorMaker) ToKafkaMirrorMakerOutputWithContext(ctx context.Context) KafkaMirrorMakerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaMirrorMakerOutput)
}

type KafkaMirrorMakerOutput struct{ *pulumi.OutputState }

func (KafkaMirrorMakerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaMirrorMaker)(nil)).Elem()
}

func (o KafkaMirrorMakerOutput) ToKafkaMirrorMakerOutput() KafkaMirrorMakerOutput {
	return o
}

func (o KafkaMirrorMakerOutput) ToKafkaMirrorMakerOutputWithContext(ctx context.Context) KafkaMirrorMakerOutput {
	return o
}

func (o KafkaMirrorMakerOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaMirrorMaker) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KafkaMirrorMakerOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaMirrorMaker) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o KafkaMirrorMakerOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *KafkaMirrorMaker) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// The specification of Kafka MirrorMaker.
func (o KafkaMirrorMakerOutput) Spec() pulumi.AnyOutput {
	return o.ApplyT(func(v *KafkaMirrorMaker) pulumi.AnyOutput { return v.Spec }).(pulumi.AnyOutput)
}

// The status of Kafka MirrorMaker.
func (o KafkaMirrorMakerOutput) Status() KafkaMirrorMakerStatusPtrOutput {
	return o.ApplyT(func(v *KafkaMirrorMaker) KafkaMirrorMakerStatusPtrOutput { return v.Status }).(KafkaMirrorMakerStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaMirrorMakerInput)(nil)).Elem(), &KafkaMirrorMaker{})
	pulumi.RegisterOutputType(KafkaMirrorMakerOutput{})
}
