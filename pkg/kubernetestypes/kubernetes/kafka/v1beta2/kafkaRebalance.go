// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KafkaRebalance struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// The specification of the Kafka rebalance.
	Spec KafkaRebalanceSpecPtrOutput `pulumi:"spec"`
	// The status of the Kafka rebalance.
	Status KafkaRebalanceStatusPtrOutput `pulumi:"status"`
}

// NewKafkaRebalance registers a new resource with the given unique name, arguments, and options.
func NewKafkaRebalance(ctx *pulumi.Context,
	name string, args *KafkaRebalanceArgs, opts ...pulumi.ResourceOption) (*KafkaRebalance, error) {
	if args == nil {
		args = &KafkaRebalanceArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta2")
	args.Kind = pulumi.StringPtr("KafkaRebalance")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaRebalance
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaRebalance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaRebalance gets an existing KafkaRebalance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaRebalance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaRebalanceState, opts ...pulumi.ResourceOption) (*KafkaRebalance, error) {
	var resource KafkaRebalance
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaRebalance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaRebalance resources.
type kafkaRebalanceState struct {
}

type KafkaRebalanceState struct {
}

func (KafkaRebalanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaRebalanceState)(nil)).Elem()
}

type kafkaRebalanceArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// The specification of the Kafka rebalance.
	Spec *KafkaRebalanceSpec `pulumi:"spec"`
	// The status of the Kafka rebalance.
	Status *KafkaRebalanceStatus `pulumi:"status"`
}

// The set of arguments for constructing a KafkaRebalance resource.
type KafkaRebalanceArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// The specification of the Kafka rebalance.
	Spec KafkaRebalanceSpecPtrInput
	// The status of the Kafka rebalance.
	Status KafkaRebalanceStatusPtrInput
}

func (KafkaRebalanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaRebalanceArgs)(nil)).Elem()
}

type KafkaRebalanceInput interface {
	pulumi.Input

	ToKafkaRebalanceOutput() KafkaRebalanceOutput
	ToKafkaRebalanceOutputWithContext(ctx context.Context) KafkaRebalanceOutput
}

func (*KafkaRebalance) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaRebalance)(nil)).Elem()
}

func (i *KafkaRebalance) ToKafkaRebalanceOutput() KafkaRebalanceOutput {
	return i.ToKafkaRebalanceOutputWithContext(context.Background())
}

func (i *KafkaRebalance) ToKafkaRebalanceOutputWithContext(ctx context.Context) KafkaRebalanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaRebalanceOutput)
}

type KafkaRebalanceOutput struct{ *pulumi.OutputState }

func (KafkaRebalanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaRebalance)(nil)).Elem()
}

func (o KafkaRebalanceOutput) ToKafkaRebalanceOutput() KafkaRebalanceOutput {
	return o
}

func (o KafkaRebalanceOutput) ToKafkaRebalanceOutputWithContext(ctx context.Context) KafkaRebalanceOutput {
	return o
}

func (o KafkaRebalanceOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaRebalance) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KafkaRebalanceOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaRebalance) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o KafkaRebalanceOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *KafkaRebalance) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// The specification of the Kafka rebalance.
func (o KafkaRebalanceOutput) Spec() KafkaRebalanceSpecPtrOutput {
	return o.ApplyT(func(v *KafkaRebalance) KafkaRebalanceSpecPtrOutput { return v.Spec }).(KafkaRebalanceSpecPtrOutput)
}

// The status of the Kafka rebalance.
func (o KafkaRebalanceOutput) Status() KafkaRebalanceStatusPtrOutput {
	return o.ApplyT(func(v *KafkaRebalance) KafkaRebalanceStatusPtrOutput { return v.Status }).(KafkaRebalanceStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaRebalanceInput)(nil)).Elem(), &KafkaRebalance{})
	pulumi.RegisterOutputType(KafkaRebalanceOutput{})
}
