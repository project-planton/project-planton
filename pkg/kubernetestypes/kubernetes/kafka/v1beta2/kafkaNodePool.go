// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KafkaNodePool struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// The specification of the KafkaNodePool.
	Spec KafkaNodePoolSpecPtrOutput `pulumi:"spec"`
	// The status of the KafkaNodePool.
	Status KafkaNodePoolStatusPtrOutput `pulumi:"status"`
}

// NewKafkaNodePool registers a new resource with the given unique name, arguments, and options.
func NewKafkaNodePool(ctx *pulumi.Context,
	name string, args *KafkaNodePoolArgs, opts ...pulumi.ResourceOption) (*KafkaNodePool, error) {
	if args == nil {
		args = &KafkaNodePoolArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kafka.strimzi.io/v1beta2")
	args.Kind = pulumi.StringPtr("KafkaNodePool")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource KafkaNodePool
	err := ctx.RegisterResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaNodePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaNodePool gets an existing KafkaNodePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaNodePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaNodePoolState, opts ...pulumi.ResourceOption) (*KafkaNodePool, error) {
	var resource KafkaNodePool
	err := ctx.ReadResource("kubernetes:kafka.strimzi.io/v1beta2:KafkaNodePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaNodePool resources.
type kafkaNodePoolState struct {
}

type KafkaNodePoolState struct {
}

func (KafkaNodePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaNodePoolState)(nil)).Elem()
}

type kafkaNodePoolArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// The specification of the KafkaNodePool.
	Spec *KafkaNodePoolSpec `pulumi:"spec"`
	// The status of the KafkaNodePool.
	Status *KafkaNodePoolStatus `pulumi:"status"`
}

// The set of arguments for constructing a KafkaNodePool resource.
type KafkaNodePoolArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// The specification of the KafkaNodePool.
	Spec KafkaNodePoolSpecPtrInput
	// The status of the KafkaNodePool.
	Status KafkaNodePoolStatusPtrInput
}

func (KafkaNodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaNodePoolArgs)(nil)).Elem()
}

type KafkaNodePoolInput interface {
	pulumi.Input

	ToKafkaNodePoolOutput() KafkaNodePoolOutput
	ToKafkaNodePoolOutputWithContext(ctx context.Context) KafkaNodePoolOutput
}

func (*KafkaNodePool) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaNodePool)(nil)).Elem()
}

func (i *KafkaNodePool) ToKafkaNodePoolOutput() KafkaNodePoolOutput {
	return i.ToKafkaNodePoolOutputWithContext(context.Background())
}

func (i *KafkaNodePool) ToKafkaNodePoolOutputWithContext(ctx context.Context) KafkaNodePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaNodePoolOutput)
}

type KafkaNodePoolOutput struct{ *pulumi.OutputState }

func (KafkaNodePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaNodePool)(nil)).Elem()
}

func (o KafkaNodePoolOutput) ToKafkaNodePoolOutput() KafkaNodePoolOutput {
	return o
}

func (o KafkaNodePoolOutput) ToKafkaNodePoolOutputWithContext(ctx context.Context) KafkaNodePoolOutput {
	return o
}

func (o KafkaNodePoolOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaNodePool) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o KafkaNodePoolOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaNodePool) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o KafkaNodePoolOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *KafkaNodePool) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// The specification of the KafkaNodePool.
func (o KafkaNodePoolOutput) Spec() KafkaNodePoolSpecPtrOutput {
	return o.ApplyT(func(v *KafkaNodePool) KafkaNodePoolSpecPtrOutput { return v.Spec }).(KafkaNodePoolSpecPtrOutput)
}

// The status of the KafkaNodePool.
func (o KafkaNodePoolOutput) Status() KafkaNodePoolStatusPtrOutput {
	return o.ApplyT(func(v *KafkaNodePool) KafkaNodePoolStatusPtrOutput { return v.Status }).(KafkaNodePoolStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaNodePoolInput)(nil)).Elem(), &KafkaNodePool{})
	pulumi.RegisterOutputType(KafkaNodePoolOutput{})
}
