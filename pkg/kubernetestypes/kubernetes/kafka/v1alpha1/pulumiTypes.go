// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

type KafkaTopicType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// The specification of the topic.
	Spec *KafkaTopicSpec `pulumi:"spec"`
	// The status of the topic.
	Status *KafkaTopicStatus `pulumi:"status"`
}

type KafkaTopicMetadata struct {
}

// The specification of the topic.
type KafkaTopicSpec struct {
	// The topic configuration.
	Config map[string]interface{} `pulumi:"config"`
	// The number of partitions the topic should have. This cannot be decreased after topic creation. It can be increased after topic creation, but it is important to understand the consequences that has, especially for topics with semantic partitioning. When absent this will default to the broker configuration for `num.partitions`.
	Partitions *int `pulumi:"partitions"`
	// The number of replicas the topic should have. When absent this will default to the broker configuration for `default.replication.factor`.
	Replicas *int `pulumi:"replicas"`
	// The name of the topic. When absent this will default to the metadata.name of the topic. It is recommended to not set this unless the topic name is not a valid Kubernetes resource name.
	TopicName *string `pulumi:"topicName"`
}

// KafkaTopicSpecInput is an input type that accepts KafkaTopicSpecArgs and KafkaTopicSpecOutput values.
// You can construct a concrete instance of `KafkaTopicSpecInput` via:
//
//	KafkaTopicSpecArgs{...}
type KafkaTopicSpecInput interface {
	pulumi.Input

	ToKafkaTopicSpecOutput() KafkaTopicSpecOutput
	ToKafkaTopicSpecOutputWithContext(context.Context) KafkaTopicSpecOutput
}

// The specification of the topic.
type KafkaTopicSpecArgs struct {
	// The topic configuration.
	Config pulumi.MapInput `pulumi:"config"`
	// The number of partitions the topic should have. This cannot be decreased after topic creation. It can be increased after topic creation, but it is important to understand the consequences that has, especially for topics with semantic partitioning. When absent this will default to the broker configuration for `num.partitions`.
	Partitions pulumi.IntPtrInput `pulumi:"partitions"`
	// The number of replicas the topic should have. When absent this will default to the broker configuration for `default.replication.factor`.
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// The name of the topic. When absent this will default to the metadata.name of the topic. It is recommended to not set this unless the topic name is not a valid Kubernetes resource name.
	TopicName pulumi.StringPtrInput `pulumi:"topicName"`
}

func (KafkaTopicSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicSpec)(nil)).Elem()
}

func (i KafkaTopicSpecArgs) ToKafkaTopicSpecOutput() KafkaTopicSpecOutput {
	return i.ToKafkaTopicSpecOutputWithContext(context.Background())
}

func (i KafkaTopicSpecArgs) ToKafkaTopicSpecOutputWithContext(ctx context.Context) KafkaTopicSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicSpecOutput)
}

func (i KafkaTopicSpecArgs) ToKafkaTopicSpecPtrOutput() KafkaTopicSpecPtrOutput {
	return i.ToKafkaTopicSpecPtrOutputWithContext(context.Background())
}

func (i KafkaTopicSpecArgs) ToKafkaTopicSpecPtrOutputWithContext(ctx context.Context) KafkaTopicSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicSpecOutput).ToKafkaTopicSpecPtrOutputWithContext(ctx)
}

// KafkaTopicSpecPtrInput is an input type that accepts KafkaTopicSpecArgs, KafkaTopicSpecPtr and KafkaTopicSpecPtrOutput values.
// You can construct a concrete instance of `KafkaTopicSpecPtrInput` via:
//
//	        KafkaTopicSpecArgs{...}
//
//	or:
//
//	        nil
type KafkaTopicSpecPtrInput interface {
	pulumi.Input

	ToKafkaTopicSpecPtrOutput() KafkaTopicSpecPtrOutput
	ToKafkaTopicSpecPtrOutputWithContext(context.Context) KafkaTopicSpecPtrOutput
}

type kafkaTopicSpecPtrType KafkaTopicSpecArgs

func KafkaTopicSpecPtr(v *KafkaTopicSpecArgs) KafkaTopicSpecPtrInput {
	return (*kafkaTopicSpecPtrType)(v)
}

func (*kafkaTopicSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopicSpec)(nil)).Elem()
}

func (i *kafkaTopicSpecPtrType) ToKafkaTopicSpecPtrOutput() KafkaTopicSpecPtrOutput {
	return i.ToKafkaTopicSpecPtrOutputWithContext(context.Background())
}

func (i *kafkaTopicSpecPtrType) ToKafkaTopicSpecPtrOutputWithContext(ctx context.Context) KafkaTopicSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicSpecPtrOutput)
}

// The specification of the topic.
type KafkaTopicSpecOutput struct{ *pulumi.OutputState }

func (KafkaTopicSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicSpec)(nil)).Elem()
}

func (o KafkaTopicSpecOutput) ToKafkaTopicSpecOutput() KafkaTopicSpecOutput {
	return o
}

func (o KafkaTopicSpecOutput) ToKafkaTopicSpecOutputWithContext(ctx context.Context) KafkaTopicSpecOutput {
	return o
}

func (o KafkaTopicSpecOutput) ToKafkaTopicSpecPtrOutput() KafkaTopicSpecPtrOutput {
	return o.ToKafkaTopicSpecPtrOutputWithContext(context.Background())
}

func (o KafkaTopicSpecOutput) ToKafkaTopicSpecPtrOutputWithContext(ctx context.Context) KafkaTopicSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaTopicSpec) *KafkaTopicSpec {
		return &v
	}).(KafkaTopicSpecPtrOutput)
}

// The topic configuration.
func (o KafkaTopicSpecOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v KafkaTopicSpec) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

// The number of partitions the topic should have. This cannot be decreased after topic creation. It can be increased after topic creation, but it is important to understand the consequences that has, especially for topics with semantic partitioning. When absent this will default to the broker configuration for `num.partitions`.
func (o KafkaTopicSpecOutput) Partitions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaTopicSpec) *int { return v.Partitions }).(pulumi.IntPtrOutput)
}

// The number of replicas the topic should have. When absent this will default to the broker configuration for `default.replication.factor`.
func (o KafkaTopicSpecOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaTopicSpec) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// The name of the topic. When absent this will default to the metadata.name of the topic. It is recommended to not set this unless the topic name is not a valid Kubernetes resource name.
func (o KafkaTopicSpecOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicSpec) *string { return v.TopicName }).(pulumi.StringPtrOutput)
}

type KafkaTopicSpecPtrOutput struct{ *pulumi.OutputState }

func (KafkaTopicSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopicSpec)(nil)).Elem()
}

func (o KafkaTopicSpecPtrOutput) ToKafkaTopicSpecPtrOutput() KafkaTopicSpecPtrOutput {
	return o
}

func (o KafkaTopicSpecPtrOutput) ToKafkaTopicSpecPtrOutputWithContext(ctx context.Context) KafkaTopicSpecPtrOutput {
	return o
}

func (o KafkaTopicSpecPtrOutput) Elem() KafkaTopicSpecOutput {
	return o.ApplyT(func(v *KafkaTopicSpec) KafkaTopicSpec {
		if v != nil {
			return *v
		}
		var ret KafkaTopicSpec
		return ret
	}).(KafkaTopicSpecOutput)
}

// The topic configuration.
func (o KafkaTopicSpecPtrOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v *KafkaTopicSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.MapOutput)
}

// The number of partitions the topic should have. This cannot be decreased after topic creation. It can be increased after topic creation, but it is important to understand the consequences that has, especially for topics with semantic partitioning. When absent this will default to the broker configuration for `num.partitions`.
func (o KafkaTopicSpecPtrOutput) Partitions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaTopicSpec) *int {
		if v == nil {
			return nil
		}
		return v.Partitions
	}).(pulumi.IntPtrOutput)
}

// The number of replicas the topic should have. When absent this will default to the broker configuration for `default.replication.factor`.
func (o KafkaTopicSpecPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaTopicSpec) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// The name of the topic. When absent this will default to the metadata.name of the topic. It is recommended to not set this unless the topic name is not a valid Kubernetes resource name.
func (o KafkaTopicSpecPtrOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaTopicSpec) *string {
		if v == nil {
			return nil
		}
		return v.TopicName
	}).(pulumi.StringPtrOutput)
}

// The status of the topic.
type KafkaTopicStatus struct {
	// List of status conditions.
	Conditions []KafkaTopicStatusConditions `pulumi:"conditions"`
	// The generation of the CRD that was last reconciled by the operator.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// Replication factor change status.
	ReplicasChange *KafkaTopicStatusReplicasChange `pulumi:"replicasChange"`
	// The topic's id. For a KafkaTopic with the ready condition, this will change only if the topic gets deleted and recreated with the same name.
	TopicId *string `pulumi:"topicId"`
	// Topic name.
	TopicName *string `pulumi:"topicName"`
}

// KafkaTopicStatusInput is an input type that accepts KafkaTopicStatusArgs and KafkaTopicStatusOutput values.
// You can construct a concrete instance of `KafkaTopicStatusInput` via:
//
//	KafkaTopicStatusArgs{...}
type KafkaTopicStatusInput interface {
	pulumi.Input

	ToKafkaTopicStatusOutput() KafkaTopicStatusOutput
	ToKafkaTopicStatusOutputWithContext(context.Context) KafkaTopicStatusOutput
}

// The status of the topic.
type KafkaTopicStatusArgs struct {
	// List of status conditions.
	Conditions KafkaTopicStatusConditionsArrayInput `pulumi:"conditions"`
	// The generation of the CRD that was last reconciled by the operator.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// Replication factor change status.
	ReplicasChange KafkaTopicStatusReplicasChangePtrInput `pulumi:"replicasChange"`
	// The topic's id. For a KafkaTopic with the ready condition, this will change only if the topic gets deleted and recreated with the same name.
	TopicId pulumi.StringPtrInput `pulumi:"topicId"`
	// Topic name.
	TopicName pulumi.StringPtrInput `pulumi:"topicName"`
}

func (KafkaTopicStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicStatus)(nil)).Elem()
}

func (i KafkaTopicStatusArgs) ToKafkaTopicStatusOutput() KafkaTopicStatusOutput {
	return i.ToKafkaTopicStatusOutputWithContext(context.Background())
}

func (i KafkaTopicStatusArgs) ToKafkaTopicStatusOutputWithContext(ctx context.Context) KafkaTopicStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicStatusOutput)
}

func (i KafkaTopicStatusArgs) ToKafkaTopicStatusPtrOutput() KafkaTopicStatusPtrOutput {
	return i.ToKafkaTopicStatusPtrOutputWithContext(context.Background())
}

func (i KafkaTopicStatusArgs) ToKafkaTopicStatusPtrOutputWithContext(ctx context.Context) KafkaTopicStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicStatusOutput).ToKafkaTopicStatusPtrOutputWithContext(ctx)
}

// KafkaTopicStatusPtrInput is an input type that accepts KafkaTopicStatusArgs, KafkaTopicStatusPtr and KafkaTopicStatusPtrOutput values.
// You can construct a concrete instance of `KafkaTopicStatusPtrInput` via:
//
//	        KafkaTopicStatusArgs{...}
//
//	or:
//
//	        nil
type KafkaTopicStatusPtrInput interface {
	pulumi.Input

	ToKafkaTopicStatusPtrOutput() KafkaTopicStatusPtrOutput
	ToKafkaTopicStatusPtrOutputWithContext(context.Context) KafkaTopicStatusPtrOutput
}

type kafkaTopicStatusPtrType KafkaTopicStatusArgs

func KafkaTopicStatusPtr(v *KafkaTopicStatusArgs) KafkaTopicStatusPtrInput {
	return (*kafkaTopicStatusPtrType)(v)
}

func (*kafkaTopicStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopicStatus)(nil)).Elem()
}

func (i *kafkaTopicStatusPtrType) ToKafkaTopicStatusPtrOutput() KafkaTopicStatusPtrOutput {
	return i.ToKafkaTopicStatusPtrOutputWithContext(context.Background())
}

func (i *kafkaTopicStatusPtrType) ToKafkaTopicStatusPtrOutputWithContext(ctx context.Context) KafkaTopicStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicStatusPtrOutput)
}

// The status of the topic.
type KafkaTopicStatusOutput struct{ *pulumi.OutputState }

func (KafkaTopicStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicStatus)(nil)).Elem()
}

func (o KafkaTopicStatusOutput) ToKafkaTopicStatusOutput() KafkaTopicStatusOutput {
	return o
}

func (o KafkaTopicStatusOutput) ToKafkaTopicStatusOutputWithContext(ctx context.Context) KafkaTopicStatusOutput {
	return o
}

func (o KafkaTopicStatusOutput) ToKafkaTopicStatusPtrOutput() KafkaTopicStatusPtrOutput {
	return o.ToKafkaTopicStatusPtrOutputWithContext(context.Background())
}

func (o KafkaTopicStatusOutput) ToKafkaTopicStatusPtrOutputWithContext(ctx context.Context) KafkaTopicStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaTopicStatus) *KafkaTopicStatus {
		return &v
	}).(KafkaTopicStatusPtrOutput)
}

// List of status conditions.
func (o KafkaTopicStatusOutput) Conditions() KafkaTopicStatusConditionsArrayOutput {
	return o.ApplyT(func(v KafkaTopicStatus) []KafkaTopicStatusConditions { return v.Conditions }).(KafkaTopicStatusConditionsArrayOutput)
}

// The generation of the CRD that was last reconciled by the operator.
func (o KafkaTopicStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// Replication factor change status.
func (o KafkaTopicStatusOutput) ReplicasChange() KafkaTopicStatusReplicasChangePtrOutput {
	return o.ApplyT(func(v KafkaTopicStatus) *KafkaTopicStatusReplicasChange { return v.ReplicasChange }).(KafkaTopicStatusReplicasChangePtrOutput)
}

// The topic's id. For a KafkaTopic with the ready condition, this will change only if the topic gets deleted and recreated with the same name.
func (o KafkaTopicStatusOutput) TopicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatus) *string { return v.TopicId }).(pulumi.StringPtrOutput)
}

// Topic name.
func (o KafkaTopicStatusOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatus) *string { return v.TopicName }).(pulumi.StringPtrOutput)
}

type KafkaTopicStatusPtrOutput struct{ *pulumi.OutputState }

func (KafkaTopicStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopicStatus)(nil)).Elem()
}

func (o KafkaTopicStatusPtrOutput) ToKafkaTopicStatusPtrOutput() KafkaTopicStatusPtrOutput {
	return o
}

func (o KafkaTopicStatusPtrOutput) ToKafkaTopicStatusPtrOutputWithContext(ctx context.Context) KafkaTopicStatusPtrOutput {
	return o
}

func (o KafkaTopicStatusPtrOutput) Elem() KafkaTopicStatusOutput {
	return o.ApplyT(func(v *KafkaTopicStatus) KafkaTopicStatus {
		if v != nil {
			return *v
		}
		var ret KafkaTopicStatus
		return ret
	}).(KafkaTopicStatusOutput)
}

// List of status conditions.
func (o KafkaTopicStatusPtrOutput) Conditions() KafkaTopicStatusConditionsArrayOutput {
	return o.ApplyT(func(v *KafkaTopicStatus) []KafkaTopicStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(KafkaTopicStatusConditionsArrayOutput)
}

// The generation of the CRD that was last reconciled by the operator.
func (o KafkaTopicStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaTopicStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// Replication factor change status.
func (o KafkaTopicStatusPtrOutput) ReplicasChange() KafkaTopicStatusReplicasChangePtrOutput {
	return o.ApplyT(func(v *KafkaTopicStatus) *KafkaTopicStatusReplicasChange {
		if v == nil {
			return nil
		}
		return v.ReplicasChange
	}).(KafkaTopicStatusReplicasChangePtrOutput)
}

// The topic's id. For a KafkaTopic with the ready condition, this will change only if the topic gets deleted and recreated with the same name.
func (o KafkaTopicStatusPtrOutput) TopicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaTopicStatus) *string {
		if v == nil {
			return nil
		}
		return v.TopicId
	}).(pulumi.StringPtrOutput)
}

// Topic name.
func (o KafkaTopicStatusPtrOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaTopicStatus) *string {
		if v == nil {
			return nil
		}
		return v.TopicName
	}).(pulumi.StringPtrOutput)
}

type KafkaTopicStatusConditions struct {
	// Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Human-readable message indicating details about the condition's last transition.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition (a single word in CamelCase).
	Reason *string `pulumi:"reason"`
	// The status of the condition, either True, False or Unknown.
	Status *string `pulumi:"status"`
	// The unique identifier of a condition, used to distinguish between other conditions in the resource.
	Type *string `pulumi:"type"`
}

// KafkaTopicStatusConditionsInput is an input type that accepts KafkaTopicStatusConditionsArgs and KafkaTopicStatusConditionsOutput values.
// You can construct a concrete instance of `KafkaTopicStatusConditionsInput` via:
//
//	KafkaTopicStatusConditionsArgs{...}
type KafkaTopicStatusConditionsInput interface {
	pulumi.Input

	ToKafkaTopicStatusConditionsOutput() KafkaTopicStatusConditionsOutput
	ToKafkaTopicStatusConditionsOutputWithContext(context.Context) KafkaTopicStatusConditionsOutput
}

type KafkaTopicStatusConditionsArgs struct {
	// Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Human-readable message indicating details about the condition's last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition (a single word in CamelCase).
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// The status of the condition, either True, False or Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The unique identifier of a condition, used to distinguish between other conditions in the resource.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (KafkaTopicStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicStatusConditions)(nil)).Elem()
}

func (i KafkaTopicStatusConditionsArgs) ToKafkaTopicStatusConditionsOutput() KafkaTopicStatusConditionsOutput {
	return i.ToKafkaTopicStatusConditionsOutputWithContext(context.Background())
}

func (i KafkaTopicStatusConditionsArgs) ToKafkaTopicStatusConditionsOutputWithContext(ctx context.Context) KafkaTopicStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicStatusConditionsOutput)
}

// KafkaTopicStatusConditionsArrayInput is an input type that accepts KafkaTopicStatusConditionsArray and KafkaTopicStatusConditionsArrayOutput values.
// You can construct a concrete instance of `KafkaTopicStatusConditionsArrayInput` via:
//
//	KafkaTopicStatusConditionsArray{ KafkaTopicStatusConditionsArgs{...} }
type KafkaTopicStatusConditionsArrayInput interface {
	pulumi.Input

	ToKafkaTopicStatusConditionsArrayOutput() KafkaTopicStatusConditionsArrayOutput
	ToKafkaTopicStatusConditionsArrayOutputWithContext(context.Context) KafkaTopicStatusConditionsArrayOutput
}

type KafkaTopicStatusConditionsArray []KafkaTopicStatusConditionsInput

func (KafkaTopicStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaTopicStatusConditions)(nil)).Elem()
}

func (i KafkaTopicStatusConditionsArray) ToKafkaTopicStatusConditionsArrayOutput() KafkaTopicStatusConditionsArrayOutput {
	return i.ToKafkaTopicStatusConditionsArrayOutputWithContext(context.Background())
}

func (i KafkaTopicStatusConditionsArray) ToKafkaTopicStatusConditionsArrayOutputWithContext(ctx context.Context) KafkaTopicStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicStatusConditionsArrayOutput)
}

type KafkaTopicStatusConditionsOutput struct{ *pulumi.OutputState }

func (KafkaTopicStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicStatusConditions)(nil)).Elem()
}

func (o KafkaTopicStatusConditionsOutput) ToKafkaTopicStatusConditionsOutput() KafkaTopicStatusConditionsOutput {
	return o
}

func (o KafkaTopicStatusConditionsOutput) ToKafkaTopicStatusConditionsOutputWithContext(ctx context.Context) KafkaTopicStatusConditionsOutput {
	return o
}

// Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
func (o KafkaTopicStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// Human-readable message indicating details about the condition's last transition.
func (o KafkaTopicStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition (a single word in CamelCase).
func (o KafkaTopicStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// The status of the condition, either True, False or Unknown.
func (o KafkaTopicStatusConditionsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusConditions) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The unique identifier of a condition, used to distinguish between other conditions in the resource.
func (o KafkaTopicStatusConditionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusConditions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type KafkaTopicStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (KafkaTopicStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaTopicStatusConditions)(nil)).Elem()
}

func (o KafkaTopicStatusConditionsArrayOutput) ToKafkaTopicStatusConditionsArrayOutput() KafkaTopicStatusConditionsArrayOutput {
	return o
}

func (o KafkaTopicStatusConditionsArrayOutput) ToKafkaTopicStatusConditionsArrayOutputWithContext(ctx context.Context) KafkaTopicStatusConditionsArrayOutput {
	return o
}

func (o KafkaTopicStatusConditionsArrayOutput) Index(i pulumi.IntInput) KafkaTopicStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KafkaTopicStatusConditions {
		return vs[0].([]KafkaTopicStatusConditions)[vs[1].(int)]
	}).(KafkaTopicStatusConditionsOutput)
}

// Replication factor change status.
type KafkaTopicStatusReplicasChange struct {
	// Message for the user related to the replicas change request. This may contain transient error messages that would disappear on periodic reconciliations.
	Message *string `pulumi:"message"`
	// The session identifier for replicas change requests pertaining to this KafkaTopic resource. This is used by the Topic Operator to track the status of `ongoing` replicas change operations.
	SessionId *string `pulumi:"sessionId"`
	// Current state of the replicas change operation. This can be `pending`, when the change has been requested, or `ongoing`, when the change has been successfully submitted to Cruise Control.
	State *string `pulumi:"state"`
	// The target replicas value requested by the user. This may be different from .spec.replicas when a change is ongoing.
	TargetReplicas *int `pulumi:"targetReplicas"`
}

// KafkaTopicStatusReplicasChangeInput is an input type that accepts KafkaTopicStatusReplicasChangeArgs and KafkaTopicStatusReplicasChangeOutput values.
// You can construct a concrete instance of `KafkaTopicStatusReplicasChangeInput` via:
//
//	KafkaTopicStatusReplicasChangeArgs{...}
type KafkaTopicStatusReplicasChangeInput interface {
	pulumi.Input

	ToKafkaTopicStatusReplicasChangeOutput() KafkaTopicStatusReplicasChangeOutput
	ToKafkaTopicStatusReplicasChangeOutputWithContext(context.Context) KafkaTopicStatusReplicasChangeOutput
}

// Replication factor change status.
type KafkaTopicStatusReplicasChangeArgs struct {
	// Message for the user related to the replicas change request. This may contain transient error messages that would disappear on periodic reconciliations.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The session identifier for replicas change requests pertaining to this KafkaTopic resource. This is used by the Topic Operator to track the status of `ongoing` replicas change operations.
	SessionId pulumi.StringPtrInput `pulumi:"sessionId"`
	// Current state of the replicas change operation. This can be `pending`, when the change has been requested, or `ongoing`, when the change has been successfully submitted to Cruise Control.
	State pulumi.StringPtrInput `pulumi:"state"`
	// The target replicas value requested by the user. This may be different from .spec.replicas when a change is ongoing.
	TargetReplicas pulumi.IntPtrInput `pulumi:"targetReplicas"`
}

func (KafkaTopicStatusReplicasChangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicStatusReplicasChange)(nil)).Elem()
}

func (i KafkaTopicStatusReplicasChangeArgs) ToKafkaTopicStatusReplicasChangeOutput() KafkaTopicStatusReplicasChangeOutput {
	return i.ToKafkaTopicStatusReplicasChangeOutputWithContext(context.Background())
}

func (i KafkaTopicStatusReplicasChangeArgs) ToKafkaTopicStatusReplicasChangeOutputWithContext(ctx context.Context) KafkaTopicStatusReplicasChangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicStatusReplicasChangeOutput)
}

func (i KafkaTopicStatusReplicasChangeArgs) ToKafkaTopicStatusReplicasChangePtrOutput() KafkaTopicStatusReplicasChangePtrOutput {
	return i.ToKafkaTopicStatusReplicasChangePtrOutputWithContext(context.Background())
}

func (i KafkaTopicStatusReplicasChangeArgs) ToKafkaTopicStatusReplicasChangePtrOutputWithContext(ctx context.Context) KafkaTopicStatusReplicasChangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicStatusReplicasChangeOutput).ToKafkaTopicStatusReplicasChangePtrOutputWithContext(ctx)
}

// KafkaTopicStatusReplicasChangePtrInput is an input type that accepts KafkaTopicStatusReplicasChangeArgs, KafkaTopicStatusReplicasChangePtr and KafkaTopicStatusReplicasChangePtrOutput values.
// You can construct a concrete instance of `KafkaTopicStatusReplicasChangePtrInput` via:
//
//	        KafkaTopicStatusReplicasChangeArgs{...}
//
//	or:
//
//	        nil
type KafkaTopicStatusReplicasChangePtrInput interface {
	pulumi.Input

	ToKafkaTopicStatusReplicasChangePtrOutput() KafkaTopicStatusReplicasChangePtrOutput
	ToKafkaTopicStatusReplicasChangePtrOutputWithContext(context.Context) KafkaTopicStatusReplicasChangePtrOutput
}

type kafkaTopicStatusReplicasChangePtrType KafkaTopicStatusReplicasChangeArgs

func KafkaTopicStatusReplicasChangePtr(v *KafkaTopicStatusReplicasChangeArgs) KafkaTopicStatusReplicasChangePtrInput {
	return (*kafkaTopicStatusReplicasChangePtrType)(v)
}

func (*kafkaTopicStatusReplicasChangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopicStatusReplicasChange)(nil)).Elem()
}

func (i *kafkaTopicStatusReplicasChangePtrType) ToKafkaTopicStatusReplicasChangePtrOutput() KafkaTopicStatusReplicasChangePtrOutput {
	return i.ToKafkaTopicStatusReplicasChangePtrOutputWithContext(context.Background())
}

func (i *kafkaTopicStatusReplicasChangePtrType) ToKafkaTopicStatusReplicasChangePtrOutputWithContext(ctx context.Context) KafkaTopicStatusReplicasChangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicStatusReplicasChangePtrOutput)
}

// Replication factor change status.
type KafkaTopicStatusReplicasChangeOutput struct{ *pulumi.OutputState }

func (KafkaTopicStatusReplicasChangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicStatusReplicasChange)(nil)).Elem()
}

func (o KafkaTopicStatusReplicasChangeOutput) ToKafkaTopicStatusReplicasChangeOutput() KafkaTopicStatusReplicasChangeOutput {
	return o
}

func (o KafkaTopicStatusReplicasChangeOutput) ToKafkaTopicStatusReplicasChangeOutputWithContext(ctx context.Context) KafkaTopicStatusReplicasChangeOutput {
	return o
}

func (o KafkaTopicStatusReplicasChangeOutput) ToKafkaTopicStatusReplicasChangePtrOutput() KafkaTopicStatusReplicasChangePtrOutput {
	return o.ToKafkaTopicStatusReplicasChangePtrOutputWithContext(context.Background())
}

func (o KafkaTopicStatusReplicasChangeOutput) ToKafkaTopicStatusReplicasChangePtrOutputWithContext(ctx context.Context) KafkaTopicStatusReplicasChangePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaTopicStatusReplicasChange) *KafkaTopicStatusReplicasChange {
		return &v
	}).(KafkaTopicStatusReplicasChangePtrOutput)
}

// Message for the user related to the replicas change request. This may contain transient error messages that would disappear on periodic reconciliations.
func (o KafkaTopicStatusReplicasChangeOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusReplicasChange) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The session identifier for replicas change requests pertaining to this KafkaTopic resource. This is used by the Topic Operator to track the status of `ongoing` replicas change operations.
func (o KafkaTopicStatusReplicasChangeOutput) SessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusReplicasChange) *string { return v.SessionId }).(pulumi.StringPtrOutput)
}

// Current state of the replicas change operation. This can be `pending`, when the change has been requested, or `ongoing`, when the change has been successfully submitted to Cruise Control.
func (o KafkaTopicStatusReplicasChangeOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusReplicasChange) *string { return v.State }).(pulumi.StringPtrOutput)
}

// The target replicas value requested by the user. This may be different from .spec.replicas when a change is ongoing.
func (o KafkaTopicStatusReplicasChangeOutput) TargetReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaTopicStatusReplicasChange) *int { return v.TargetReplicas }).(pulumi.IntPtrOutput)
}

type KafkaTopicStatusReplicasChangePtrOutput struct{ *pulumi.OutputState }

func (KafkaTopicStatusReplicasChangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopicStatusReplicasChange)(nil)).Elem()
}

func (o KafkaTopicStatusReplicasChangePtrOutput) ToKafkaTopicStatusReplicasChangePtrOutput() KafkaTopicStatusReplicasChangePtrOutput {
	return o
}

func (o KafkaTopicStatusReplicasChangePtrOutput) ToKafkaTopicStatusReplicasChangePtrOutputWithContext(ctx context.Context) KafkaTopicStatusReplicasChangePtrOutput {
	return o
}

func (o KafkaTopicStatusReplicasChangePtrOutput) Elem() KafkaTopicStatusReplicasChangeOutput {
	return o.ApplyT(func(v *KafkaTopicStatusReplicasChange) KafkaTopicStatusReplicasChange {
		if v != nil {
			return *v
		}
		var ret KafkaTopicStatusReplicasChange
		return ret
	}).(KafkaTopicStatusReplicasChangeOutput)
}

// Message for the user related to the replicas change request. This may contain transient error messages that would disappear on periodic reconciliations.
func (o KafkaTopicStatusReplicasChangePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaTopicStatusReplicasChange) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// The session identifier for replicas change requests pertaining to this KafkaTopic resource. This is used by the Topic Operator to track the status of `ongoing` replicas change operations.
func (o KafkaTopicStatusReplicasChangePtrOutput) SessionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaTopicStatusReplicasChange) *string {
		if v == nil {
			return nil
		}
		return v.SessionId
	}).(pulumi.StringPtrOutput)
}

// Current state of the replicas change operation. This can be `pending`, when the change has been requested, or `ongoing`, when the change has been successfully submitted to Cruise Control.
func (o KafkaTopicStatusReplicasChangePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaTopicStatusReplicasChange) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// The target replicas value requested by the user. This may be different from .spec.replicas when a change is ongoing.
func (o KafkaTopicStatusReplicasChangePtrOutput) TargetReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaTopicStatusReplicasChange) *int {
		if v == nil {
			return nil
		}
		return v.TargetReplicas
	}).(pulumi.IntPtrOutput)
}

type KafkaUserType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// The specification of the user.
	Spec *KafkaUserSpec `pulumi:"spec"`
	// The status of the Kafka User.
	Status *KafkaUserStatus `pulumi:"status"`
}

type KafkaUserMetadata struct {
}

// The specification of the user.
type KafkaUserSpec struct {
	// Authentication mechanism enabled for this Kafka user. The supported authentication mechanisms are `scram-sha-512`, `tls`, and `tls-external`.
	//
	// * `scram-sha-512` generates a secret with SASL SCRAM-SHA-512 credentials.
	// * `tls` generates a secret with user certificate for mutual TLS authentication.
	// * `tls-external` does not generate a user certificate.   But prepares the user for using mutual TLS authentication using a user certificate generated outside the User Operator.
	//   ACLs and quotas set for this user are configured in the `CN=<username>` format.
	//
	// Authentication is optional. If authentication is not configured, no credentials are generated. ACLs and quotas set for the user are configured in the `<username>` format suitable for SASL authentication.
	Authentication *KafkaUserSpecAuthentication `pulumi:"authentication"`
	// Authorization rules for this Kafka user.
	Authorization *KafkaUserSpecAuthorization `pulumi:"authorization"`
	// Quotas on requests to control the broker resources used by clients. Network bandwidth and request rate quotas can be enforced.Kafka documentation for Kafka User quotas can be found at http://kafka.apache.org/documentation/#design_quotas.
	Quotas *KafkaUserSpecQuotas `pulumi:"quotas"`
	// Template to specify how Kafka User `Secrets` are generated.
	Template *KafkaUserSpecTemplate `pulumi:"template"`
}

// KafkaUserSpecInput is an input type that accepts KafkaUserSpecArgs and KafkaUserSpecOutput values.
// You can construct a concrete instance of `KafkaUserSpecInput` via:
//
//	KafkaUserSpecArgs{...}
type KafkaUserSpecInput interface {
	pulumi.Input

	ToKafkaUserSpecOutput() KafkaUserSpecOutput
	ToKafkaUserSpecOutputWithContext(context.Context) KafkaUserSpecOutput
}

// The specification of the user.
type KafkaUserSpecArgs struct {
	// Authentication mechanism enabled for this Kafka user. The supported authentication mechanisms are `scram-sha-512`, `tls`, and `tls-external`.
	//
	// * `scram-sha-512` generates a secret with SASL SCRAM-SHA-512 credentials.
	// * `tls` generates a secret with user certificate for mutual TLS authentication.
	// * `tls-external` does not generate a user certificate.   But prepares the user for using mutual TLS authentication using a user certificate generated outside the User Operator.
	//   ACLs and quotas set for this user are configured in the `CN=<username>` format.
	//
	// Authentication is optional. If authentication is not configured, no credentials are generated. ACLs and quotas set for the user are configured in the `<username>` format suitable for SASL authentication.
	Authentication KafkaUserSpecAuthenticationPtrInput `pulumi:"authentication"`
	// Authorization rules for this Kafka user.
	Authorization KafkaUserSpecAuthorizationPtrInput `pulumi:"authorization"`
	// Quotas on requests to control the broker resources used by clients. Network bandwidth and request rate quotas can be enforced.Kafka documentation for Kafka User quotas can be found at http://kafka.apache.org/documentation/#design_quotas.
	Quotas KafkaUserSpecQuotasPtrInput `pulumi:"quotas"`
	// Template to specify how Kafka User `Secrets` are generated.
	Template KafkaUserSpecTemplatePtrInput `pulumi:"template"`
}

func (KafkaUserSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpec)(nil)).Elem()
}

func (i KafkaUserSpecArgs) ToKafkaUserSpecOutput() KafkaUserSpecOutput {
	return i.ToKafkaUserSpecOutputWithContext(context.Background())
}

func (i KafkaUserSpecArgs) ToKafkaUserSpecOutputWithContext(ctx context.Context) KafkaUserSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecOutput)
}

func (i KafkaUserSpecArgs) ToKafkaUserSpecPtrOutput() KafkaUserSpecPtrOutput {
	return i.ToKafkaUserSpecPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecArgs) ToKafkaUserSpecPtrOutputWithContext(ctx context.Context) KafkaUserSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecOutput).ToKafkaUserSpecPtrOutputWithContext(ctx)
}

// KafkaUserSpecPtrInput is an input type that accepts KafkaUserSpecArgs, KafkaUserSpecPtr and KafkaUserSpecPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecPtrInput` via:
//
//	        KafkaUserSpecArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecPtrOutput() KafkaUserSpecPtrOutput
	ToKafkaUserSpecPtrOutputWithContext(context.Context) KafkaUserSpecPtrOutput
}

type kafkaUserSpecPtrType KafkaUserSpecArgs

func KafkaUserSpecPtr(v *KafkaUserSpecArgs) KafkaUserSpecPtrInput {
	return (*kafkaUserSpecPtrType)(v)
}

func (*kafkaUserSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpec)(nil)).Elem()
}

func (i *kafkaUserSpecPtrType) ToKafkaUserSpecPtrOutput() KafkaUserSpecPtrOutput {
	return i.ToKafkaUserSpecPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecPtrType) ToKafkaUserSpecPtrOutputWithContext(ctx context.Context) KafkaUserSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecPtrOutput)
}

// The specification of the user.
type KafkaUserSpecOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpec)(nil)).Elem()
}

func (o KafkaUserSpecOutput) ToKafkaUserSpecOutput() KafkaUserSpecOutput {
	return o
}

func (o KafkaUserSpecOutput) ToKafkaUserSpecOutputWithContext(ctx context.Context) KafkaUserSpecOutput {
	return o
}

func (o KafkaUserSpecOutput) ToKafkaUserSpecPtrOutput() KafkaUserSpecPtrOutput {
	return o.ToKafkaUserSpecPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecOutput) ToKafkaUserSpecPtrOutputWithContext(ctx context.Context) KafkaUserSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpec) *KafkaUserSpec {
		return &v
	}).(KafkaUserSpecPtrOutput)
}

// Authentication mechanism enabled for this Kafka user. The supported authentication mechanisms are `scram-sha-512`, `tls`, and `tls-external`.
//
//   - `scram-sha-512` generates a secret with SASL SCRAM-SHA-512 credentials.
//   - `tls` generates a secret with user certificate for mutual TLS authentication.
//   - `tls-external` does not generate a user certificate.   But prepares the user for using mutual TLS authentication using a user certificate generated outside the User Operator.
//     ACLs and quotas set for this user are configured in the `CN=<username>` format.
//
// Authentication is optional. If authentication is not configured, no credentials are generated. ACLs and quotas set for the user are configured in the `<username>` format suitable for SASL authentication.
func (o KafkaUserSpecOutput) Authentication() KafkaUserSpecAuthenticationPtrOutput {
	return o.ApplyT(func(v KafkaUserSpec) *KafkaUserSpecAuthentication { return v.Authentication }).(KafkaUserSpecAuthenticationPtrOutput)
}

// Authorization rules for this Kafka user.
func (o KafkaUserSpecOutput) Authorization() KafkaUserSpecAuthorizationPtrOutput {
	return o.ApplyT(func(v KafkaUserSpec) *KafkaUserSpecAuthorization { return v.Authorization }).(KafkaUserSpecAuthorizationPtrOutput)
}

// Quotas on requests to control the broker resources used by clients. Network bandwidth and request rate quotas can be enforced.Kafka documentation for Kafka User quotas can be found at http://kafka.apache.org/documentation/#design_quotas.
func (o KafkaUserSpecOutput) Quotas() KafkaUserSpecQuotasPtrOutput {
	return o.ApplyT(func(v KafkaUserSpec) *KafkaUserSpecQuotas { return v.Quotas }).(KafkaUserSpecQuotasPtrOutput)
}

// Template to specify how Kafka User `Secrets` are generated.
func (o KafkaUserSpecOutput) Template() KafkaUserSpecTemplatePtrOutput {
	return o.ApplyT(func(v KafkaUserSpec) *KafkaUserSpecTemplate { return v.Template }).(KafkaUserSpecTemplatePtrOutput)
}

type KafkaUserSpecPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpec)(nil)).Elem()
}

func (o KafkaUserSpecPtrOutput) ToKafkaUserSpecPtrOutput() KafkaUserSpecPtrOutput {
	return o
}

func (o KafkaUserSpecPtrOutput) ToKafkaUserSpecPtrOutputWithContext(ctx context.Context) KafkaUserSpecPtrOutput {
	return o
}

func (o KafkaUserSpecPtrOutput) Elem() KafkaUserSpecOutput {
	return o.ApplyT(func(v *KafkaUserSpec) KafkaUserSpec {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpec
		return ret
	}).(KafkaUserSpecOutput)
}

// Authentication mechanism enabled for this Kafka user. The supported authentication mechanisms are `scram-sha-512`, `tls`, and `tls-external`.
//
//   - `scram-sha-512` generates a secret with SASL SCRAM-SHA-512 credentials.
//   - `tls` generates a secret with user certificate for mutual TLS authentication.
//   - `tls-external` does not generate a user certificate.   But prepares the user for using mutual TLS authentication using a user certificate generated outside the User Operator.
//     ACLs and quotas set for this user are configured in the `CN=<username>` format.
//
// Authentication is optional. If authentication is not configured, no credentials are generated. ACLs and quotas set for the user are configured in the `<username>` format suitable for SASL authentication.
func (o KafkaUserSpecPtrOutput) Authentication() KafkaUserSpecAuthenticationPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpec) *KafkaUserSpecAuthentication {
		if v == nil {
			return nil
		}
		return v.Authentication
	}).(KafkaUserSpecAuthenticationPtrOutput)
}

// Authorization rules for this Kafka user.
func (o KafkaUserSpecPtrOutput) Authorization() KafkaUserSpecAuthorizationPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpec) *KafkaUserSpecAuthorization {
		if v == nil {
			return nil
		}
		return v.Authorization
	}).(KafkaUserSpecAuthorizationPtrOutput)
}

// Quotas on requests to control the broker resources used by clients. Network bandwidth and request rate quotas can be enforced.Kafka documentation for Kafka User quotas can be found at http://kafka.apache.org/documentation/#design_quotas.
func (o KafkaUserSpecPtrOutput) Quotas() KafkaUserSpecQuotasPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpec) *KafkaUserSpecQuotas {
		if v == nil {
			return nil
		}
		return v.Quotas
	}).(KafkaUserSpecQuotasPtrOutput)
}

// Template to specify how Kafka User `Secrets` are generated.
func (o KafkaUserSpecPtrOutput) Template() KafkaUserSpecTemplatePtrOutput {
	return o.ApplyT(func(v *KafkaUserSpec) *KafkaUserSpecTemplate {
		if v == nil {
			return nil
		}
		return v.Template
	}).(KafkaUserSpecTemplatePtrOutput)
}

// Authentication mechanism enabled for this Kafka user. The supported authentication mechanisms are `scram-sha-512`, `tls`, and `tls-external`.
//
//   - `scram-sha-512` generates a secret with SASL SCRAM-SHA-512 credentials.
//   - `tls` generates a secret with user certificate for mutual TLS authentication.
//   - `tls-external` does not generate a user certificate.   But prepares the user for using mutual TLS authentication using a user certificate generated outside the User Operator.
//     ACLs and quotas set for this user are configured in the `CN=<username>` format.
//
// Authentication is optional. If authentication is not configured, no credentials are generated. ACLs and quotas set for the user are configured in the `<username>` format suitable for SASL authentication.
type KafkaUserSpecAuthentication struct {
	// Specify the password for the user. If not set, a new password is generated by the User Operator.
	Password *KafkaUserSpecAuthenticationPassword `pulumi:"password"`
	// Authentication type.
	Type string `pulumi:"type"`
}

// KafkaUserSpecAuthenticationInput is an input type that accepts KafkaUserSpecAuthenticationArgs and KafkaUserSpecAuthenticationOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthenticationInput` via:
//
//	KafkaUserSpecAuthenticationArgs{...}
type KafkaUserSpecAuthenticationInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthenticationOutput() KafkaUserSpecAuthenticationOutput
	ToKafkaUserSpecAuthenticationOutputWithContext(context.Context) KafkaUserSpecAuthenticationOutput
}

// Authentication mechanism enabled for this Kafka user. The supported authentication mechanisms are `scram-sha-512`, `tls`, and `tls-external`.
//
//   - `scram-sha-512` generates a secret with SASL SCRAM-SHA-512 credentials.
//   - `tls` generates a secret with user certificate for mutual TLS authentication.
//   - `tls-external` does not generate a user certificate.   But prepares the user for using mutual TLS authentication using a user certificate generated outside the User Operator.
//     ACLs and quotas set for this user are configured in the `CN=<username>` format.
//
// Authentication is optional. If authentication is not configured, no credentials are generated. ACLs and quotas set for the user are configured in the `<username>` format suitable for SASL authentication.
type KafkaUserSpecAuthenticationArgs struct {
	// Specify the password for the user. If not set, a new password is generated by the User Operator.
	Password KafkaUserSpecAuthenticationPasswordPtrInput `pulumi:"password"`
	// Authentication type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (KafkaUserSpecAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthentication)(nil)).Elem()
}

func (i KafkaUserSpecAuthenticationArgs) ToKafkaUserSpecAuthenticationOutput() KafkaUserSpecAuthenticationOutput {
	return i.ToKafkaUserSpecAuthenticationOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthenticationArgs) ToKafkaUserSpecAuthenticationOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationOutput)
}

func (i KafkaUserSpecAuthenticationArgs) ToKafkaUserSpecAuthenticationPtrOutput() KafkaUserSpecAuthenticationPtrOutput {
	return i.ToKafkaUserSpecAuthenticationPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthenticationArgs) ToKafkaUserSpecAuthenticationPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationOutput).ToKafkaUserSpecAuthenticationPtrOutputWithContext(ctx)
}

// KafkaUserSpecAuthenticationPtrInput is an input type that accepts KafkaUserSpecAuthenticationArgs, KafkaUserSpecAuthenticationPtr and KafkaUserSpecAuthenticationPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthenticationPtrInput` via:
//
//	        KafkaUserSpecAuthenticationArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecAuthenticationPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthenticationPtrOutput() KafkaUserSpecAuthenticationPtrOutput
	ToKafkaUserSpecAuthenticationPtrOutputWithContext(context.Context) KafkaUserSpecAuthenticationPtrOutput
}

type kafkaUserSpecAuthenticationPtrType KafkaUserSpecAuthenticationArgs

func KafkaUserSpecAuthenticationPtr(v *KafkaUserSpecAuthenticationArgs) KafkaUserSpecAuthenticationPtrInput {
	return (*kafkaUserSpecAuthenticationPtrType)(v)
}

func (*kafkaUserSpecAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthentication)(nil)).Elem()
}

func (i *kafkaUserSpecAuthenticationPtrType) ToKafkaUserSpecAuthenticationPtrOutput() KafkaUserSpecAuthenticationPtrOutput {
	return i.ToKafkaUserSpecAuthenticationPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecAuthenticationPtrType) ToKafkaUserSpecAuthenticationPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPtrOutput)
}

// Authentication mechanism enabled for this Kafka user. The supported authentication mechanisms are `scram-sha-512`, `tls`, and `tls-external`.
//
//   - `scram-sha-512` generates a secret with SASL SCRAM-SHA-512 credentials.
//   - `tls` generates a secret with user certificate for mutual TLS authentication.
//   - `tls-external` does not generate a user certificate.   But prepares the user for using mutual TLS authentication using a user certificate generated outside the User Operator.
//     ACLs and quotas set for this user are configured in the `CN=<username>` format.
//
// Authentication is optional. If authentication is not configured, no credentials are generated. ACLs and quotas set for the user are configured in the `<username>` format suitable for SASL authentication.
type KafkaUserSpecAuthenticationOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthentication)(nil)).Elem()
}

func (o KafkaUserSpecAuthenticationOutput) ToKafkaUserSpecAuthenticationOutput() KafkaUserSpecAuthenticationOutput {
	return o
}

func (o KafkaUserSpecAuthenticationOutput) ToKafkaUserSpecAuthenticationOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationOutput {
	return o
}

func (o KafkaUserSpecAuthenticationOutput) ToKafkaUserSpecAuthenticationPtrOutput() KafkaUserSpecAuthenticationPtrOutput {
	return o.ToKafkaUserSpecAuthenticationPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecAuthenticationOutput) ToKafkaUserSpecAuthenticationPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecAuthentication) *KafkaUserSpecAuthentication {
		return &v
	}).(KafkaUserSpecAuthenticationPtrOutput)
}

// Specify the password for the user. If not set, a new password is generated by the User Operator.
func (o KafkaUserSpecAuthenticationOutput) Password() KafkaUserSpecAuthenticationPasswordPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthentication) *KafkaUserSpecAuthenticationPassword { return v.Password }).(KafkaUserSpecAuthenticationPasswordPtrOutput)
}

// Authentication type.
func (o KafkaUserSpecAuthenticationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthentication) string { return v.Type }).(pulumi.StringOutput)
}

type KafkaUserSpecAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthentication)(nil)).Elem()
}

func (o KafkaUserSpecAuthenticationPtrOutput) ToKafkaUserSpecAuthenticationPtrOutput() KafkaUserSpecAuthenticationPtrOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPtrOutput) ToKafkaUserSpecAuthenticationPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPtrOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPtrOutput) Elem() KafkaUserSpecAuthenticationOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthentication) KafkaUserSpecAuthentication {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecAuthentication
		return ret
	}).(KafkaUserSpecAuthenticationOutput)
}

// Specify the password for the user. If not set, a new password is generated by the User Operator.
func (o KafkaUserSpecAuthenticationPtrOutput) Password() KafkaUserSpecAuthenticationPasswordPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthentication) *KafkaUserSpecAuthenticationPassword {
		if v == nil {
			return nil
		}
		return v.Password
	}).(KafkaUserSpecAuthenticationPasswordPtrOutput)
}

// Authentication type.
func (o KafkaUserSpecAuthenticationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthentication) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Specify the password for the user. If not set, a new password is generated by the User Operator.
type KafkaUserSpecAuthenticationPassword struct {
	// Secret from which the password should be read.
	ValueFrom KafkaUserSpecAuthenticationPasswordValueFrom `pulumi:"valueFrom"`
}

// KafkaUserSpecAuthenticationPasswordInput is an input type that accepts KafkaUserSpecAuthenticationPasswordArgs and KafkaUserSpecAuthenticationPasswordOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthenticationPasswordInput` via:
//
//	KafkaUserSpecAuthenticationPasswordArgs{...}
type KafkaUserSpecAuthenticationPasswordInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthenticationPasswordOutput() KafkaUserSpecAuthenticationPasswordOutput
	ToKafkaUserSpecAuthenticationPasswordOutputWithContext(context.Context) KafkaUserSpecAuthenticationPasswordOutput
}

// Specify the password for the user. If not set, a new password is generated by the User Operator.
type KafkaUserSpecAuthenticationPasswordArgs struct {
	// Secret from which the password should be read.
	ValueFrom KafkaUserSpecAuthenticationPasswordValueFromInput `pulumi:"valueFrom"`
}

func (KafkaUserSpecAuthenticationPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthenticationPassword)(nil)).Elem()
}

func (i KafkaUserSpecAuthenticationPasswordArgs) ToKafkaUserSpecAuthenticationPasswordOutput() KafkaUserSpecAuthenticationPasswordOutput {
	return i.ToKafkaUserSpecAuthenticationPasswordOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthenticationPasswordArgs) ToKafkaUserSpecAuthenticationPasswordOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPasswordOutput)
}

func (i KafkaUserSpecAuthenticationPasswordArgs) ToKafkaUserSpecAuthenticationPasswordPtrOutput() KafkaUserSpecAuthenticationPasswordPtrOutput {
	return i.ToKafkaUserSpecAuthenticationPasswordPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthenticationPasswordArgs) ToKafkaUserSpecAuthenticationPasswordPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPasswordOutput).ToKafkaUserSpecAuthenticationPasswordPtrOutputWithContext(ctx)
}

// KafkaUserSpecAuthenticationPasswordPtrInput is an input type that accepts KafkaUserSpecAuthenticationPasswordArgs, KafkaUserSpecAuthenticationPasswordPtr and KafkaUserSpecAuthenticationPasswordPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthenticationPasswordPtrInput` via:
//
//	        KafkaUserSpecAuthenticationPasswordArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecAuthenticationPasswordPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthenticationPasswordPtrOutput() KafkaUserSpecAuthenticationPasswordPtrOutput
	ToKafkaUserSpecAuthenticationPasswordPtrOutputWithContext(context.Context) KafkaUserSpecAuthenticationPasswordPtrOutput
}

type kafkaUserSpecAuthenticationPasswordPtrType KafkaUserSpecAuthenticationPasswordArgs

func KafkaUserSpecAuthenticationPasswordPtr(v *KafkaUserSpecAuthenticationPasswordArgs) KafkaUserSpecAuthenticationPasswordPtrInput {
	return (*kafkaUserSpecAuthenticationPasswordPtrType)(v)
}

func (*kafkaUserSpecAuthenticationPasswordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthenticationPassword)(nil)).Elem()
}

func (i *kafkaUserSpecAuthenticationPasswordPtrType) ToKafkaUserSpecAuthenticationPasswordPtrOutput() KafkaUserSpecAuthenticationPasswordPtrOutput {
	return i.ToKafkaUserSpecAuthenticationPasswordPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecAuthenticationPasswordPtrType) ToKafkaUserSpecAuthenticationPasswordPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPasswordPtrOutput)
}

// Specify the password for the user. If not set, a new password is generated by the User Operator.
type KafkaUserSpecAuthenticationPasswordOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthenticationPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthenticationPassword)(nil)).Elem()
}

func (o KafkaUserSpecAuthenticationPasswordOutput) ToKafkaUserSpecAuthenticationPasswordOutput() KafkaUserSpecAuthenticationPasswordOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordOutput) ToKafkaUserSpecAuthenticationPasswordOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordOutput) ToKafkaUserSpecAuthenticationPasswordPtrOutput() KafkaUserSpecAuthenticationPasswordPtrOutput {
	return o.ToKafkaUserSpecAuthenticationPasswordPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecAuthenticationPasswordOutput) ToKafkaUserSpecAuthenticationPasswordPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecAuthenticationPassword) *KafkaUserSpecAuthenticationPassword {
		return &v
	}).(KafkaUserSpecAuthenticationPasswordPtrOutput)
}

// Secret from which the password should be read.
func (o KafkaUserSpecAuthenticationPasswordOutput) ValueFrom() KafkaUserSpecAuthenticationPasswordValueFromOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthenticationPassword) KafkaUserSpecAuthenticationPasswordValueFrom {
		return v.ValueFrom
	}).(KafkaUserSpecAuthenticationPasswordValueFromOutput)
}

type KafkaUserSpecAuthenticationPasswordPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthenticationPasswordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthenticationPassword)(nil)).Elem()
}

func (o KafkaUserSpecAuthenticationPasswordPtrOutput) ToKafkaUserSpecAuthenticationPasswordPtrOutput() KafkaUserSpecAuthenticationPasswordPtrOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordPtrOutput) ToKafkaUserSpecAuthenticationPasswordPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordPtrOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordPtrOutput) Elem() KafkaUserSpecAuthenticationPasswordOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthenticationPassword) KafkaUserSpecAuthenticationPassword {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecAuthenticationPassword
		return ret
	}).(KafkaUserSpecAuthenticationPasswordOutput)
}

// Secret from which the password should be read.
func (o KafkaUserSpecAuthenticationPasswordPtrOutput) ValueFrom() KafkaUserSpecAuthenticationPasswordValueFromPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthenticationPassword) *KafkaUserSpecAuthenticationPasswordValueFrom {
		if v == nil {
			return nil
		}
		return &v.ValueFrom
	}).(KafkaUserSpecAuthenticationPasswordValueFromPtrOutput)
}

// Secret from which the password should be read.
type KafkaUserSpecAuthenticationPasswordValueFrom struct {
	// Selects a key of a Secret in the resource's namespace.
	SecretKeyRef *KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef `pulumi:"secretKeyRef"`
}

// KafkaUserSpecAuthenticationPasswordValueFromInput is an input type that accepts KafkaUserSpecAuthenticationPasswordValueFromArgs and KafkaUserSpecAuthenticationPasswordValueFromOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthenticationPasswordValueFromInput` via:
//
//	KafkaUserSpecAuthenticationPasswordValueFromArgs{...}
type KafkaUserSpecAuthenticationPasswordValueFromInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthenticationPasswordValueFromOutput() KafkaUserSpecAuthenticationPasswordValueFromOutput
	ToKafkaUserSpecAuthenticationPasswordValueFromOutputWithContext(context.Context) KafkaUserSpecAuthenticationPasswordValueFromOutput
}

// Secret from which the password should be read.
type KafkaUserSpecAuthenticationPasswordValueFromArgs struct {
	// Selects a key of a Secret in the resource's namespace.
	SecretKeyRef KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrInput `pulumi:"secretKeyRef"`
}

func (KafkaUserSpecAuthenticationPasswordValueFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordValueFrom)(nil)).Elem()
}

func (i KafkaUserSpecAuthenticationPasswordValueFromArgs) ToKafkaUserSpecAuthenticationPasswordValueFromOutput() KafkaUserSpecAuthenticationPasswordValueFromOutput {
	return i.ToKafkaUserSpecAuthenticationPasswordValueFromOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthenticationPasswordValueFromArgs) ToKafkaUserSpecAuthenticationPasswordValueFromOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPasswordValueFromOutput)
}

func (i KafkaUserSpecAuthenticationPasswordValueFromArgs) ToKafkaUserSpecAuthenticationPasswordValueFromPtrOutput() KafkaUserSpecAuthenticationPasswordValueFromPtrOutput {
	return i.ToKafkaUserSpecAuthenticationPasswordValueFromPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthenticationPasswordValueFromArgs) ToKafkaUserSpecAuthenticationPasswordValueFromPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPasswordValueFromOutput).ToKafkaUserSpecAuthenticationPasswordValueFromPtrOutputWithContext(ctx)
}

// KafkaUserSpecAuthenticationPasswordValueFromPtrInput is an input type that accepts KafkaUserSpecAuthenticationPasswordValueFromArgs, KafkaUserSpecAuthenticationPasswordValueFromPtr and KafkaUserSpecAuthenticationPasswordValueFromPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthenticationPasswordValueFromPtrInput` via:
//
//	        KafkaUserSpecAuthenticationPasswordValueFromArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecAuthenticationPasswordValueFromPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthenticationPasswordValueFromPtrOutput() KafkaUserSpecAuthenticationPasswordValueFromPtrOutput
	ToKafkaUserSpecAuthenticationPasswordValueFromPtrOutputWithContext(context.Context) KafkaUserSpecAuthenticationPasswordValueFromPtrOutput
}

type kafkaUserSpecAuthenticationPasswordValueFromPtrType KafkaUserSpecAuthenticationPasswordValueFromArgs

func KafkaUserSpecAuthenticationPasswordValueFromPtr(v *KafkaUserSpecAuthenticationPasswordValueFromArgs) KafkaUserSpecAuthenticationPasswordValueFromPtrInput {
	return (*kafkaUserSpecAuthenticationPasswordValueFromPtrType)(v)
}

func (*kafkaUserSpecAuthenticationPasswordValueFromPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthenticationPasswordValueFrom)(nil)).Elem()
}

func (i *kafkaUserSpecAuthenticationPasswordValueFromPtrType) ToKafkaUserSpecAuthenticationPasswordValueFromPtrOutput() KafkaUserSpecAuthenticationPasswordValueFromPtrOutput {
	return i.ToKafkaUserSpecAuthenticationPasswordValueFromPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecAuthenticationPasswordValueFromPtrType) ToKafkaUserSpecAuthenticationPasswordValueFromPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPasswordValueFromPtrOutput)
}

// Secret from which the password should be read.
type KafkaUserSpecAuthenticationPasswordValueFromOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthenticationPasswordValueFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordValueFrom)(nil)).Elem()
}

func (o KafkaUserSpecAuthenticationPasswordValueFromOutput) ToKafkaUserSpecAuthenticationPasswordValueFromOutput() KafkaUserSpecAuthenticationPasswordValueFromOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordValueFromOutput) ToKafkaUserSpecAuthenticationPasswordValueFromOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordValueFromOutput) ToKafkaUserSpecAuthenticationPasswordValueFromPtrOutput() KafkaUserSpecAuthenticationPasswordValueFromPtrOutput {
	return o.ToKafkaUserSpecAuthenticationPasswordValueFromPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecAuthenticationPasswordValueFromOutput) ToKafkaUserSpecAuthenticationPasswordValueFromPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecAuthenticationPasswordValueFrom) *KafkaUserSpecAuthenticationPasswordValueFrom {
		return &v
	}).(KafkaUserSpecAuthenticationPasswordValueFromPtrOutput)
}

// Selects a key of a Secret in the resource's namespace.
func (o KafkaUserSpecAuthenticationPasswordValueFromOutput) SecretKeyRef() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthenticationPasswordValueFrom) *KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef {
		return v.SecretKeyRef
	}).(KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput)
}

type KafkaUserSpecAuthenticationPasswordValueFromPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthenticationPasswordValueFromPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthenticationPasswordValueFrom)(nil)).Elem()
}

func (o KafkaUserSpecAuthenticationPasswordValueFromPtrOutput) ToKafkaUserSpecAuthenticationPasswordValueFromPtrOutput() KafkaUserSpecAuthenticationPasswordValueFromPtrOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordValueFromPtrOutput) ToKafkaUserSpecAuthenticationPasswordValueFromPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromPtrOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordValueFromPtrOutput) Elem() KafkaUserSpecAuthenticationPasswordValueFromOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthenticationPasswordValueFrom) KafkaUserSpecAuthenticationPasswordValueFrom {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecAuthenticationPasswordValueFrom
		return ret
	}).(KafkaUserSpecAuthenticationPasswordValueFromOutput)
}

// Selects a key of a Secret in the resource's namespace.
func (o KafkaUserSpecAuthenticationPasswordValueFromPtrOutput) SecretKeyRef() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthenticationPasswordValueFrom) *KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef {
		if v == nil {
			return nil
		}
		return v.SecretKeyRef
	}).(KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a Secret in the resource's namespace.
type KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef struct {
	Key      *string `pulumi:"key"`
	Name     *string `pulumi:"name"`
	Optional *bool   `pulumi:"optional"`
}

// KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefInput is an input type that accepts KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefArgs and KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefInput` via:
//
//	KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefArgs{...}
type KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput
	ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutputWithContext(context.Context) KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput
}

// Selects a key of a Secret in the resource's namespace.
type KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefArgs struct {
	Key      pulumi.StringPtrInput `pulumi:"key"`
	Name     pulumi.StringPtrInput `pulumi:"name"`
	Optional pulumi.BoolPtrInput   `pulumi:"optional"`
}

func (KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef)(nil)).Elem()
}

func (i KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefArgs) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput {
	return i.ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefArgs) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput)
}

func (i KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefArgs) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput {
	return i.ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefArgs) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput).ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutputWithContext(ctx)
}

// KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrInput is an input type that accepts KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefArgs, KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtr and KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrInput` via:
//
//	        KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput
	ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutputWithContext(context.Context) KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput
}

type kafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrType KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefArgs

func KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtr(v *KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefArgs) KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrInput {
	return (*kafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrType)(v)
}

func (*kafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef)(nil)).Elem()
}

func (i *kafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrType) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput {
	return i.ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrType) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput)
}

// Selects a key of a Secret in the resource's namespace.
type KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef)(nil)).Elem()
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput {
	return o.ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef) *KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef {
		return &v
	}).(KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput)
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef)(nil)).Elem()
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput) ToKafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput {
	return o
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput) Elem() KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef) KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef
		return ret
	}).(KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput)
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRef) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Authorization rules for this Kafka user.
type KafkaUserSpecAuthorization struct {
	// List of ACL rules which should be applied to this user.
	Acls []KafkaUserSpecAuthorizationAcls `pulumi:"acls"`
	// Authorization type. Currently the only supported type is `simple`. `simple` authorization type uses the Kafka Admin API for managing the ACL rules.
	Type string `pulumi:"type"`
}

// KafkaUserSpecAuthorizationInput is an input type that accepts KafkaUserSpecAuthorizationArgs and KafkaUserSpecAuthorizationOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthorizationInput` via:
//
//	KafkaUserSpecAuthorizationArgs{...}
type KafkaUserSpecAuthorizationInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthorizationOutput() KafkaUserSpecAuthorizationOutput
	ToKafkaUserSpecAuthorizationOutputWithContext(context.Context) KafkaUserSpecAuthorizationOutput
}

// Authorization rules for this Kafka user.
type KafkaUserSpecAuthorizationArgs struct {
	// List of ACL rules which should be applied to this user.
	Acls KafkaUserSpecAuthorizationAclsArrayInput `pulumi:"acls"`
	// Authorization type. Currently the only supported type is `simple`. `simple` authorization type uses the Kafka Admin API for managing the ACL rules.
	Type pulumi.StringInput `pulumi:"type"`
}

func (KafkaUserSpecAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthorization)(nil)).Elem()
}

func (i KafkaUserSpecAuthorizationArgs) ToKafkaUserSpecAuthorizationOutput() KafkaUserSpecAuthorizationOutput {
	return i.ToKafkaUserSpecAuthorizationOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthorizationArgs) ToKafkaUserSpecAuthorizationOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthorizationOutput)
}

func (i KafkaUserSpecAuthorizationArgs) ToKafkaUserSpecAuthorizationPtrOutput() KafkaUserSpecAuthorizationPtrOutput {
	return i.ToKafkaUserSpecAuthorizationPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthorizationArgs) ToKafkaUserSpecAuthorizationPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthorizationOutput).ToKafkaUserSpecAuthorizationPtrOutputWithContext(ctx)
}

// KafkaUserSpecAuthorizationPtrInput is an input type that accepts KafkaUserSpecAuthorizationArgs, KafkaUserSpecAuthorizationPtr and KafkaUserSpecAuthorizationPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthorizationPtrInput` via:
//
//	        KafkaUserSpecAuthorizationArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecAuthorizationPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthorizationPtrOutput() KafkaUserSpecAuthorizationPtrOutput
	ToKafkaUserSpecAuthorizationPtrOutputWithContext(context.Context) KafkaUserSpecAuthorizationPtrOutput
}

type kafkaUserSpecAuthorizationPtrType KafkaUserSpecAuthorizationArgs

func KafkaUserSpecAuthorizationPtr(v *KafkaUserSpecAuthorizationArgs) KafkaUserSpecAuthorizationPtrInput {
	return (*kafkaUserSpecAuthorizationPtrType)(v)
}

func (*kafkaUserSpecAuthorizationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthorization)(nil)).Elem()
}

func (i *kafkaUserSpecAuthorizationPtrType) ToKafkaUserSpecAuthorizationPtrOutput() KafkaUserSpecAuthorizationPtrOutput {
	return i.ToKafkaUserSpecAuthorizationPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecAuthorizationPtrType) ToKafkaUserSpecAuthorizationPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthorizationPtrOutput)
}

// Authorization rules for this Kafka user.
type KafkaUserSpecAuthorizationOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthorization)(nil)).Elem()
}

func (o KafkaUserSpecAuthorizationOutput) ToKafkaUserSpecAuthorizationOutput() KafkaUserSpecAuthorizationOutput {
	return o
}

func (o KafkaUserSpecAuthorizationOutput) ToKafkaUserSpecAuthorizationOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationOutput {
	return o
}

func (o KafkaUserSpecAuthorizationOutput) ToKafkaUserSpecAuthorizationPtrOutput() KafkaUserSpecAuthorizationPtrOutput {
	return o.ToKafkaUserSpecAuthorizationPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecAuthorizationOutput) ToKafkaUserSpecAuthorizationPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecAuthorization) *KafkaUserSpecAuthorization {
		return &v
	}).(KafkaUserSpecAuthorizationPtrOutput)
}

// List of ACL rules which should be applied to this user.
func (o KafkaUserSpecAuthorizationOutput) Acls() KafkaUserSpecAuthorizationAclsArrayOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorization) []KafkaUserSpecAuthorizationAcls { return v.Acls }).(KafkaUserSpecAuthorizationAclsArrayOutput)
}

// Authorization type. Currently the only supported type is `simple`. `simple` authorization type uses the Kafka Admin API for managing the ACL rules.
func (o KafkaUserSpecAuthorizationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorization) string { return v.Type }).(pulumi.StringOutput)
}

type KafkaUserSpecAuthorizationPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthorizationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecAuthorization)(nil)).Elem()
}

func (o KafkaUserSpecAuthorizationPtrOutput) ToKafkaUserSpecAuthorizationPtrOutput() KafkaUserSpecAuthorizationPtrOutput {
	return o
}

func (o KafkaUserSpecAuthorizationPtrOutput) ToKafkaUserSpecAuthorizationPtrOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationPtrOutput {
	return o
}

func (o KafkaUserSpecAuthorizationPtrOutput) Elem() KafkaUserSpecAuthorizationOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthorization) KafkaUserSpecAuthorization {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecAuthorization
		return ret
	}).(KafkaUserSpecAuthorizationOutput)
}

// List of ACL rules which should be applied to this user.
func (o KafkaUserSpecAuthorizationPtrOutput) Acls() KafkaUserSpecAuthorizationAclsArrayOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthorization) []KafkaUserSpecAuthorizationAcls {
		if v == nil {
			return nil
		}
		return v.Acls
	}).(KafkaUserSpecAuthorizationAclsArrayOutput)
}

// Authorization type. Currently the only supported type is `simple`. `simple` authorization type uses the Kafka Admin API for managing the ACL rules.
func (o KafkaUserSpecAuthorizationPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecAuthorization) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type KafkaUserSpecAuthorizationAcls struct {
	// The host from which the action described in the ACL rule is allowed or denied. If not set, it defaults to `*`, allowing or denying the action from any host.
	Host *string `pulumi:"host"`
	// Operation which will be allowed or denied. Supported operations are: Read, Write, Create, Delete, Alter, Describe, ClusterAction, AlterConfigs, DescribeConfigs, IdempotentWrite and All.
	Operation *string `pulumi:"operation"`
	// List of operations which will be allowed or denied. Supported operations are: Read, Write, Create, Delete, Alter, Describe, ClusterAction, AlterConfigs, DescribeConfigs, IdempotentWrite and All.
	Operations []string `pulumi:"operations"`
	// Indicates the resource for which given ACL rule applies.
	Resource KafkaUserSpecAuthorizationAclsResource `pulumi:"resource"`
	// The type of the rule. Currently the only supported type is `allow`. ACL rules with type `allow` are used to allow user to execute the specified operations. Default value is `allow`.
	Type *string `pulumi:"type"`
}

// KafkaUserSpecAuthorizationAclsInput is an input type that accepts KafkaUserSpecAuthorizationAclsArgs and KafkaUserSpecAuthorizationAclsOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthorizationAclsInput` via:
//
//	KafkaUserSpecAuthorizationAclsArgs{...}
type KafkaUserSpecAuthorizationAclsInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthorizationAclsOutput() KafkaUserSpecAuthorizationAclsOutput
	ToKafkaUserSpecAuthorizationAclsOutputWithContext(context.Context) KafkaUserSpecAuthorizationAclsOutput
}

type KafkaUserSpecAuthorizationAclsArgs struct {
	// The host from which the action described in the ACL rule is allowed or denied. If not set, it defaults to `*`, allowing or denying the action from any host.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Operation which will be allowed or denied. Supported operations are: Read, Write, Create, Delete, Alter, Describe, ClusterAction, AlterConfigs, DescribeConfigs, IdempotentWrite and All.
	Operation pulumi.StringPtrInput `pulumi:"operation"`
	// List of operations which will be allowed or denied. Supported operations are: Read, Write, Create, Delete, Alter, Describe, ClusterAction, AlterConfigs, DescribeConfigs, IdempotentWrite and All.
	Operations pulumi.StringArrayInput `pulumi:"operations"`
	// Indicates the resource for which given ACL rule applies.
	Resource KafkaUserSpecAuthorizationAclsResourceInput `pulumi:"resource"`
	// The type of the rule. Currently the only supported type is `allow`. ACL rules with type `allow` are used to allow user to execute the specified operations. Default value is `allow`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (KafkaUserSpecAuthorizationAclsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthorizationAcls)(nil)).Elem()
}

func (i KafkaUserSpecAuthorizationAclsArgs) ToKafkaUserSpecAuthorizationAclsOutput() KafkaUserSpecAuthorizationAclsOutput {
	return i.ToKafkaUserSpecAuthorizationAclsOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthorizationAclsArgs) ToKafkaUserSpecAuthorizationAclsOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthorizationAclsOutput)
}

// KafkaUserSpecAuthorizationAclsArrayInput is an input type that accepts KafkaUserSpecAuthorizationAclsArray and KafkaUserSpecAuthorizationAclsArrayOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthorizationAclsArrayInput` via:
//
//	KafkaUserSpecAuthorizationAclsArray{ KafkaUserSpecAuthorizationAclsArgs{...} }
type KafkaUserSpecAuthorizationAclsArrayInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthorizationAclsArrayOutput() KafkaUserSpecAuthorizationAclsArrayOutput
	ToKafkaUserSpecAuthorizationAclsArrayOutputWithContext(context.Context) KafkaUserSpecAuthorizationAclsArrayOutput
}

type KafkaUserSpecAuthorizationAclsArray []KafkaUserSpecAuthorizationAclsInput

func (KafkaUserSpecAuthorizationAclsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaUserSpecAuthorizationAcls)(nil)).Elem()
}

func (i KafkaUserSpecAuthorizationAclsArray) ToKafkaUserSpecAuthorizationAclsArrayOutput() KafkaUserSpecAuthorizationAclsArrayOutput {
	return i.ToKafkaUserSpecAuthorizationAclsArrayOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthorizationAclsArray) ToKafkaUserSpecAuthorizationAclsArrayOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthorizationAclsArrayOutput)
}

type KafkaUserSpecAuthorizationAclsOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthorizationAclsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthorizationAcls)(nil)).Elem()
}

func (o KafkaUserSpecAuthorizationAclsOutput) ToKafkaUserSpecAuthorizationAclsOutput() KafkaUserSpecAuthorizationAclsOutput {
	return o
}

func (o KafkaUserSpecAuthorizationAclsOutput) ToKafkaUserSpecAuthorizationAclsOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsOutput {
	return o
}

// The host from which the action described in the ACL rule is allowed or denied. If not set, it defaults to `*`, allowing or denying the action from any host.
func (o KafkaUserSpecAuthorizationAclsOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAcls) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Operation which will be allowed or denied. Supported operations are: Read, Write, Create, Delete, Alter, Describe, ClusterAction, AlterConfigs, DescribeConfigs, IdempotentWrite and All.
func (o KafkaUserSpecAuthorizationAclsOutput) Operation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAcls) *string { return v.Operation }).(pulumi.StringPtrOutput)
}

// List of operations which will be allowed or denied. Supported operations are: Read, Write, Create, Delete, Alter, Describe, ClusterAction, AlterConfigs, DescribeConfigs, IdempotentWrite and All.
func (o KafkaUserSpecAuthorizationAclsOutput) Operations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAcls) []string { return v.Operations }).(pulumi.StringArrayOutput)
}

// Indicates the resource for which given ACL rule applies.
func (o KafkaUserSpecAuthorizationAclsOutput) Resource() KafkaUserSpecAuthorizationAclsResourceOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAcls) KafkaUserSpecAuthorizationAclsResource { return v.Resource }).(KafkaUserSpecAuthorizationAclsResourceOutput)
}

// The type of the rule. Currently the only supported type is `allow`. ACL rules with type `allow` are used to allow user to execute the specified operations. Default value is `allow`.
func (o KafkaUserSpecAuthorizationAclsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAcls) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type KafkaUserSpecAuthorizationAclsArrayOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthorizationAclsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaUserSpecAuthorizationAcls)(nil)).Elem()
}

func (o KafkaUserSpecAuthorizationAclsArrayOutput) ToKafkaUserSpecAuthorizationAclsArrayOutput() KafkaUserSpecAuthorizationAclsArrayOutput {
	return o
}

func (o KafkaUserSpecAuthorizationAclsArrayOutput) ToKafkaUserSpecAuthorizationAclsArrayOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsArrayOutput {
	return o
}

func (o KafkaUserSpecAuthorizationAclsArrayOutput) Index(i pulumi.IntInput) KafkaUserSpecAuthorizationAclsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KafkaUserSpecAuthorizationAcls {
		return vs[0].([]KafkaUserSpecAuthorizationAcls)[vs[1].(int)]
	}).(KafkaUserSpecAuthorizationAclsOutput)
}

// Indicates the resource for which given ACL rule applies.
type KafkaUserSpecAuthorizationAclsResource struct {
	// Name of resource for which given ACL rule applies. Can be combined with `patternType` field to use prefix pattern.
	Name *string `pulumi:"name"`
	// Describes the pattern used in the resource field. The supported types are `literal` and `prefix`. With `literal` pattern type, the resource field will be used as a definition of a full name. With `prefix` pattern type, the resource name will be used only as a prefix. Default value is `literal`.
	PatternType *string `pulumi:"patternType"`
	// Resource type. The available resource types are `topic`, `group`, `cluster`, and `transactionalId`.
	Type string `pulumi:"type"`
}

// KafkaUserSpecAuthorizationAclsResourceInput is an input type that accepts KafkaUserSpecAuthorizationAclsResourceArgs and KafkaUserSpecAuthorizationAclsResourceOutput values.
// You can construct a concrete instance of `KafkaUserSpecAuthorizationAclsResourceInput` via:
//
//	KafkaUserSpecAuthorizationAclsResourceArgs{...}
type KafkaUserSpecAuthorizationAclsResourceInput interface {
	pulumi.Input

	ToKafkaUserSpecAuthorizationAclsResourceOutput() KafkaUserSpecAuthorizationAclsResourceOutput
	ToKafkaUserSpecAuthorizationAclsResourceOutputWithContext(context.Context) KafkaUserSpecAuthorizationAclsResourceOutput
}

// Indicates the resource for which given ACL rule applies.
type KafkaUserSpecAuthorizationAclsResourceArgs struct {
	// Name of resource for which given ACL rule applies. Can be combined with `patternType` field to use prefix pattern.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Describes the pattern used in the resource field. The supported types are `literal` and `prefix`. With `literal` pattern type, the resource field will be used as a definition of a full name. With `prefix` pattern type, the resource name will be used only as a prefix. Default value is `literal`.
	PatternType pulumi.StringPtrInput `pulumi:"patternType"`
	// Resource type. The available resource types are `topic`, `group`, `cluster`, and `transactionalId`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (KafkaUserSpecAuthorizationAclsResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthorizationAclsResource)(nil)).Elem()
}

func (i KafkaUserSpecAuthorizationAclsResourceArgs) ToKafkaUserSpecAuthorizationAclsResourceOutput() KafkaUserSpecAuthorizationAclsResourceOutput {
	return i.ToKafkaUserSpecAuthorizationAclsResourceOutputWithContext(context.Background())
}

func (i KafkaUserSpecAuthorizationAclsResourceArgs) ToKafkaUserSpecAuthorizationAclsResourceOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecAuthorizationAclsResourceOutput)
}

// Indicates the resource for which given ACL rule applies.
type KafkaUserSpecAuthorizationAclsResourceOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecAuthorizationAclsResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecAuthorizationAclsResource)(nil)).Elem()
}

func (o KafkaUserSpecAuthorizationAclsResourceOutput) ToKafkaUserSpecAuthorizationAclsResourceOutput() KafkaUserSpecAuthorizationAclsResourceOutput {
	return o
}

func (o KafkaUserSpecAuthorizationAclsResourceOutput) ToKafkaUserSpecAuthorizationAclsResourceOutputWithContext(ctx context.Context) KafkaUserSpecAuthorizationAclsResourceOutput {
	return o
}

// Name of resource for which given ACL rule applies. Can be combined with `patternType` field to use prefix pattern.
func (o KafkaUserSpecAuthorizationAclsResourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAclsResource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Describes the pattern used in the resource field. The supported types are `literal` and `prefix`. With `literal` pattern type, the resource field will be used as a definition of a full name. With `prefix` pattern type, the resource name will be used only as a prefix. Default value is `literal`.
func (o KafkaUserSpecAuthorizationAclsResourceOutput) PatternType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAclsResource) *string { return v.PatternType }).(pulumi.StringPtrOutput)
}

// Resource type. The available resource types are `topic`, `group`, `cluster`, and `transactionalId`.
func (o KafkaUserSpecAuthorizationAclsResourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaUserSpecAuthorizationAclsResource) string { return v.Type }).(pulumi.StringOutput)
}

// Quotas on requests to control the broker resources used by clients. Network bandwidth and request rate quotas can be enforced.Kafka documentation for Kafka User quotas can be found at http://kafka.apache.org/documentation/#design_quotas.
type KafkaUserSpecQuotas struct {
	// A quota on the maximum bytes per-second that each client group can fetch from a broker before the clients in the group are throttled. Defined on a per-broker basis.
	ConsumerByteRate *int `pulumi:"consumerByteRate"`
	// A quota on the rate at which mutations are accepted for the create topics request, the create partitions request and the delete topics request. The rate is accumulated by the number of partitions created or deleted.
	ControllerMutationRate *float64 `pulumi:"controllerMutationRate"`
	// A quota on the maximum bytes per-second that each client group can publish to a broker before the clients in the group are throttled. Defined on a per-broker basis.
	ProducerByteRate *int `pulumi:"producerByteRate"`
	// A quota on the maximum CPU utilization of each client group as a percentage of network and I/O threads.
	RequestPercentage *int `pulumi:"requestPercentage"`
}

// KafkaUserSpecQuotasInput is an input type that accepts KafkaUserSpecQuotasArgs and KafkaUserSpecQuotasOutput values.
// You can construct a concrete instance of `KafkaUserSpecQuotasInput` via:
//
//	KafkaUserSpecQuotasArgs{...}
type KafkaUserSpecQuotasInput interface {
	pulumi.Input

	ToKafkaUserSpecQuotasOutput() KafkaUserSpecQuotasOutput
	ToKafkaUserSpecQuotasOutputWithContext(context.Context) KafkaUserSpecQuotasOutput
}

// Quotas on requests to control the broker resources used by clients. Network bandwidth and request rate quotas can be enforced.Kafka documentation for Kafka User quotas can be found at http://kafka.apache.org/documentation/#design_quotas.
type KafkaUserSpecQuotasArgs struct {
	// A quota on the maximum bytes per-second that each client group can fetch from a broker before the clients in the group are throttled. Defined on a per-broker basis.
	ConsumerByteRate pulumi.IntPtrInput `pulumi:"consumerByteRate"`
	// A quota on the rate at which mutations are accepted for the create topics request, the create partitions request and the delete topics request. The rate is accumulated by the number of partitions created or deleted.
	ControllerMutationRate pulumi.Float64PtrInput `pulumi:"controllerMutationRate"`
	// A quota on the maximum bytes per-second that each client group can publish to a broker before the clients in the group are throttled. Defined on a per-broker basis.
	ProducerByteRate pulumi.IntPtrInput `pulumi:"producerByteRate"`
	// A quota on the maximum CPU utilization of each client group as a percentage of network and I/O threads.
	RequestPercentage pulumi.IntPtrInput `pulumi:"requestPercentage"`
}

func (KafkaUserSpecQuotasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecQuotas)(nil)).Elem()
}

func (i KafkaUserSpecQuotasArgs) ToKafkaUserSpecQuotasOutput() KafkaUserSpecQuotasOutput {
	return i.ToKafkaUserSpecQuotasOutputWithContext(context.Background())
}

func (i KafkaUserSpecQuotasArgs) ToKafkaUserSpecQuotasOutputWithContext(ctx context.Context) KafkaUserSpecQuotasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecQuotasOutput)
}

func (i KafkaUserSpecQuotasArgs) ToKafkaUserSpecQuotasPtrOutput() KafkaUserSpecQuotasPtrOutput {
	return i.ToKafkaUserSpecQuotasPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecQuotasArgs) ToKafkaUserSpecQuotasPtrOutputWithContext(ctx context.Context) KafkaUserSpecQuotasPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecQuotasOutput).ToKafkaUserSpecQuotasPtrOutputWithContext(ctx)
}

// KafkaUserSpecQuotasPtrInput is an input type that accepts KafkaUserSpecQuotasArgs, KafkaUserSpecQuotasPtr and KafkaUserSpecQuotasPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecQuotasPtrInput` via:
//
//	        KafkaUserSpecQuotasArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecQuotasPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecQuotasPtrOutput() KafkaUserSpecQuotasPtrOutput
	ToKafkaUserSpecQuotasPtrOutputWithContext(context.Context) KafkaUserSpecQuotasPtrOutput
}

type kafkaUserSpecQuotasPtrType KafkaUserSpecQuotasArgs

func KafkaUserSpecQuotasPtr(v *KafkaUserSpecQuotasArgs) KafkaUserSpecQuotasPtrInput {
	return (*kafkaUserSpecQuotasPtrType)(v)
}

func (*kafkaUserSpecQuotasPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecQuotas)(nil)).Elem()
}

func (i *kafkaUserSpecQuotasPtrType) ToKafkaUserSpecQuotasPtrOutput() KafkaUserSpecQuotasPtrOutput {
	return i.ToKafkaUserSpecQuotasPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecQuotasPtrType) ToKafkaUserSpecQuotasPtrOutputWithContext(ctx context.Context) KafkaUserSpecQuotasPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecQuotasPtrOutput)
}

// Quotas on requests to control the broker resources used by clients. Network bandwidth and request rate quotas can be enforced.Kafka documentation for Kafka User quotas can be found at http://kafka.apache.org/documentation/#design_quotas.
type KafkaUserSpecQuotasOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecQuotasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecQuotas)(nil)).Elem()
}

func (o KafkaUserSpecQuotasOutput) ToKafkaUserSpecQuotasOutput() KafkaUserSpecQuotasOutput {
	return o
}

func (o KafkaUserSpecQuotasOutput) ToKafkaUserSpecQuotasOutputWithContext(ctx context.Context) KafkaUserSpecQuotasOutput {
	return o
}

func (o KafkaUserSpecQuotasOutput) ToKafkaUserSpecQuotasPtrOutput() KafkaUserSpecQuotasPtrOutput {
	return o.ToKafkaUserSpecQuotasPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecQuotasOutput) ToKafkaUserSpecQuotasPtrOutputWithContext(ctx context.Context) KafkaUserSpecQuotasPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecQuotas) *KafkaUserSpecQuotas {
		return &v
	}).(KafkaUserSpecQuotasPtrOutput)
}

// A quota on the maximum bytes per-second that each client group can fetch from a broker before the clients in the group are throttled. Defined on a per-broker basis.
func (o KafkaUserSpecQuotasOutput) ConsumerByteRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecQuotas) *int { return v.ConsumerByteRate }).(pulumi.IntPtrOutput)
}

// A quota on the rate at which mutations are accepted for the create topics request, the create partitions request and the delete topics request. The rate is accumulated by the number of partitions created or deleted.
func (o KafkaUserSpecQuotasOutput) ControllerMutationRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v KafkaUserSpecQuotas) *float64 { return v.ControllerMutationRate }).(pulumi.Float64PtrOutput)
}

// A quota on the maximum bytes per-second that each client group can publish to a broker before the clients in the group are throttled. Defined on a per-broker basis.
func (o KafkaUserSpecQuotasOutput) ProducerByteRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecQuotas) *int { return v.ProducerByteRate }).(pulumi.IntPtrOutput)
}

// A quota on the maximum CPU utilization of each client group as a percentage of network and I/O threads.
func (o KafkaUserSpecQuotasOutput) RequestPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecQuotas) *int { return v.RequestPercentage }).(pulumi.IntPtrOutput)
}

type KafkaUserSpecQuotasPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecQuotasPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecQuotas)(nil)).Elem()
}

func (o KafkaUserSpecQuotasPtrOutput) ToKafkaUserSpecQuotasPtrOutput() KafkaUserSpecQuotasPtrOutput {
	return o
}

func (o KafkaUserSpecQuotasPtrOutput) ToKafkaUserSpecQuotasPtrOutputWithContext(ctx context.Context) KafkaUserSpecQuotasPtrOutput {
	return o
}

func (o KafkaUserSpecQuotasPtrOutput) Elem() KafkaUserSpecQuotasOutput {
	return o.ApplyT(func(v *KafkaUserSpecQuotas) KafkaUserSpecQuotas {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecQuotas
		return ret
	}).(KafkaUserSpecQuotasOutput)
}

// A quota on the maximum bytes per-second that each client group can fetch from a broker before the clients in the group are throttled. Defined on a per-broker basis.
func (o KafkaUserSpecQuotasPtrOutput) ConsumerByteRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecQuotas) *int {
		if v == nil {
			return nil
		}
		return v.ConsumerByteRate
	}).(pulumi.IntPtrOutput)
}

// A quota on the rate at which mutations are accepted for the create topics request, the create partitions request and the delete topics request. The rate is accumulated by the number of partitions created or deleted.
func (o KafkaUserSpecQuotasPtrOutput) ControllerMutationRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecQuotas) *float64 {
		if v == nil {
			return nil
		}
		return v.ControllerMutationRate
	}).(pulumi.Float64PtrOutput)
}

// A quota on the maximum bytes per-second that each client group can publish to a broker before the clients in the group are throttled. Defined on a per-broker basis.
func (o KafkaUserSpecQuotasPtrOutput) ProducerByteRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecQuotas) *int {
		if v == nil {
			return nil
		}
		return v.ProducerByteRate
	}).(pulumi.IntPtrOutput)
}

// A quota on the maximum CPU utilization of each client group as a percentage of network and I/O threads.
func (o KafkaUserSpecQuotasPtrOutput) RequestPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecQuotas) *int {
		if v == nil {
			return nil
		}
		return v.RequestPercentage
	}).(pulumi.IntPtrOutput)
}

// Template to specify how Kafka User `Secrets` are generated.
type KafkaUserSpecTemplate struct {
	// Template for KafkaUser resources. The template allows users to specify how the `Secret` with password or TLS certificates is generated.
	Secret *KafkaUserSpecTemplateSecret `pulumi:"secret"`
}

// KafkaUserSpecTemplateInput is an input type that accepts KafkaUserSpecTemplateArgs and KafkaUserSpecTemplateOutput values.
// You can construct a concrete instance of `KafkaUserSpecTemplateInput` via:
//
//	KafkaUserSpecTemplateArgs{...}
type KafkaUserSpecTemplateInput interface {
	pulumi.Input

	ToKafkaUserSpecTemplateOutput() KafkaUserSpecTemplateOutput
	ToKafkaUserSpecTemplateOutputWithContext(context.Context) KafkaUserSpecTemplateOutput
}

// Template to specify how Kafka User `Secrets` are generated.
type KafkaUserSpecTemplateArgs struct {
	// Template for KafkaUser resources. The template allows users to specify how the `Secret` with password or TLS certificates is generated.
	Secret KafkaUserSpecTemplateSecretPtrInput `pulumi:"secret"`
}

func (KafkaUserSpecTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecTemplate)(nil)).Elem()
}

func (i KafkaUserSpecTemplateArgs) ToKafkaUserSpecTemplateOutput() KafkaUserSpecTemplateOutput {
	return i.ToKafkaUserSpecTemplateOutputWithContext(context.Background())
}

func (i KafkaUserSpecTemplateArgs) ToKafkaUserSpecTemplateOutputWithContext(ctx context.Context) KafkaUserSpecTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplateOutput)
}

func (i KafkaUserSpecTemplateArgs) ToKafkaUserSpecTemplatePtrOutput() KafkaUserSpecTemplatePtrOutput {
	return i.ToKafkaUserSpecTemplatePtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecTemplateArgs) ToKafkaUserSpecTemplatePtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplateOutput).ToKafkaUserSpecTemplatePtrOutputWithContext(ctx)
}

// KafkaUserSpecTemplatePtrInput is an input type that accepts KafkaUserSpecTemplateArgs, KafkaUserSpecTemplatePtr and KafkaUserSpecTemplatePtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecTemplatePtrInput` via:
//
//	        KafkaUserSpecTemplateArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecTemplatePtrInput interface {
	pulumi.Input

	ToKafkaUserSpecTemplatePtrOutput() KafkaUserSpecTemplatePtrOutput
	ToKafkaUserSpecTemplatePtrOutputWithContext(context.Context) KafkaUserSpecTemplatePtrOutput
}

type kafkaUserSpecTemplatePtrType KafkaUserSpecTemplateArgs

func KafkaUserSpecTemplatePtr(v *KafkaUserSpecTemplateArgs) KafkaUserSpecTemplatePtrInput {
	return (*kafkaUserSpecTemplatePtrType)(v)
}

func (*kafkaUserSpecTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecTemplate)(nil)).Elem()
}

func (i *kafkaUserSpecTemplatePtrType) ToKafkaUserSpecTemplatePtrOutput() KafkaUserSpecTemplatePtrOutput {
	return i.ToKafkaUserSpecTemplatePtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecTemplatePtrType) ToKafkaUserSpecTemplatePtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplatePtrOutput)
}

// Template to specify how Kafka User `Secrets` are generated.
type KafkaUserSpecTemplateOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecTemplate)(nil)).Elem()
}

func (o KafkaUserSpecTemplateOutput) ToKafkaUserSpecTemplateOutput() KafkaUserSpecTemplateOutput {
	return o
}

func (o KafkaUserSpecTemplateOutput) ToKafkaUserSpecTemplateOutputWithContext(ctx context.Context) KafkaUserSpecTemplateOutput {
	return o
}

func (o KafkaUserSpecTemplateOutput) ToKafkaUserSpecTemplatePtrOutput() KafkaUserSpecTemplatePtrOutput {
	return o.ToKafkaUserSpecTemplatePtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecTemplateOutput) ToKafkaUserSpecTemplatePtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecTemplate) *KafkaUserSpecTemplate {
		return &v
	}).(KafkaUserSpecTemplatePtrOutput)
}

// Template for KafkaUser resources. The template allows users to specify how the `Secret` with password or TLS certificates is generated.
func (o KafkaUserSpecTemplateOutput) Secret() KafkaUserSpecTemplateSecretPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecTemplate) *KafkaUserSpecTemplateSecret { return v.Secret }).(KafkaUserSpecTemplateSecretPtrOutput)
}

type KafkaUserSpecTemplatePtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecTemplate)(nil)).Elem()
}

func (o KafkaUserSpecTemplatePtrOutput) ToKafkaUserSpecTemplatePtrOutput() KafkaUserSpecTemplatePtrOutput {
	return o
}

func (o KafkaUserSpecTemplatePtrOutput) ToKafkaUserSpecTemplatePtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplatePtrOutput {
	return o
}

func (o KafkaUserSpecTemplatePtrOutput) Elem() KafkaUserSpecTemplateOutput {
	return o.ApplyT(func(v *KafkaUserSpecTemplate) KafkaUserSpecTemplate {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecTemplate
		return ret
	}).(KafkaUserSpecTemplateOutput)
}

// Template for KafkaUser resources. The template allows users to specify how the `Secret` with password or TLS certificates is generated.
func (o KafkaUserSpecTemplatePtrOutput) Secret() KafkaUserSpecTemplateSecretPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecTemplate) *KafkaUserSpecTemplateSecret {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(KafkaUserSpecTemplateSecretPtrOutput)
}

// Template for KafkaUser resources. The template allows users to specify how the `Secret` with password or TLS certificates is generated.
type KafkaUserSpecTemplateSecret struct {
	// Metadata applied to the resource.
	Metadata *KafkaUserSpecTemplateSecretMetadata `pulumi:"metadata"`
}

// KafkaUserSpecTemplateSecretInput is an input type that accepts KafkaUserSpecTemplateSecretArgs and KafkaUserSpecTemplateSecretOutput values.
// You can construct a concrete instance of `KafkaUserSpecTemplateSecretInput` via:
//
//	KafkaUserSpecTemplateSecretArgs{...}
type KafkaUserSpecTemplateSecretInput interface {
	pulumi.Input

	ToKafkaUserSpecTemplateSecretOutput() KafkaUserSpecTemplateSecretOutput
	ToKafkaUserSpecTemplateSecretOutputWithContext(context.Context) KafkaUserSpecTemplateSecretOutput
}

// Template for KafkaUser resources. The template allows users to specify how the `Secret` with password or TLS certificates is generated.
type KafkaUserSpecTemplateSecretArgs struct {
	// Metadata applied to the resource.
	Metadata KafkaUserSpecTemplateSecretMetadataPtrInput `pulumi:"metadata"`
}

func (KafkaUserSpecTemplateSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecTemplateSecret)(nil)).Elem()
}

func (i KafkaUserSpecTemplateSecretArgs) ToKafkaUserSpecTemplateSecretOutput() KafkaUserSpecTemplateSecretOutput {
	return i.ToKafkaUserSpecTemplateSecretOutputWithContext(context.Background())
}

func (i KafkaUserSpecTemplateSecretArgs) ToKafkaUserSpecTemplateSecretOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplateSecretOutput)
}

func (i KafkaUserSpecTemplateSecretArgs) ToKafkaUserSpecTemplateSecretPtrOutput() KafkaUserSpecTemplateSecretPtrOutput {
	return i.ToKafkaUserSpecTemplateSecretPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecTemplateSecretArgs) ToKafkaUserSpecTemplateSecretPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplateSecretOutput).ToKafkaUserSpecTemplateSecretPtrOutputWithContext(ctx)
}

// KafkaUserSpecTemplateSecretPtrInput is an input type that accepts KafkaUserSpecTemplateSecretArgs, KafkaUserSpecTemplateSecretPtr and KafkaUserSpecTemplateSecretPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecTemplateSecretPtrInput` via:
//
//	        KafkaUserSpecTemplateSecretArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecTemplateSecretPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecTemplateSecretPtrOutput() KafkaUserSpecTemplateSecretPtrOutput
	ToKafkaUserSpecTemplateSecretPtrOutputWithContext(context.Context) KafkaUserSpecTemplateSecretPtrOutput
}

type kafkaUserSpecTemplateSecretPtrType KafkaUserSpecTemplateSecretArgs

func KafkaUserSpecTemplateSecretPtr(v *KafkaUserSpecTemplateSecretArgs) KafkaUserSpecTemplateSecretPtrInput {
	return (*kafkaUserSpecTemplateSecretPtrType)(v)
}

func (*kafkaUserSpecTemplateSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecTemplateSecret)(nil)).Elem()
}

func (i *kafkaUserSpecTemplateSecretPtrType) ToKafkaUserSpecTemplateSecretPtrOutput() KafkaUserSpecTemplateSecretPtrOutput {
	return i.ToKafkaUserSpecTemplateSecretPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecTemplateSecretPtrType) ToKafkaUserSpecTemplateSecretPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplateSecretPtrOutput)
}

// Template for KafkaUser resources. The template allows users to specify how the `Secret` with password or TLS certificates is generated.
type KafkaUserSpecTemplateSecretOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecTemplateSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecTemplateSecret)(nil)).Elem()
}

func (o KafkaUserSpecTemplateSecretOutput) ToKafkaUserSpecTemplateSecretOutput() KafkaUserSpecTemplateSecretOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretOutput) ToKafkaUserSpecTemplateSecretOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretOutput) ToKafkaUserSpecTemplateSecretPtrOutput() KafkaUserSpecTemplateSecretPtrOutput {
	return o.ToKafkaUserSpecTemplateSecretPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecTemplateSecretOutput) ToKafkaUserSpecTemplateSecretPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecTemplateSecret) *KafkaUserSpecTemplateSecret {
		return &v
	}).(KafkaUserSpecTemplateSecretPtrOutput)
}

// Metadata applied to the resource.
func (o KafkaUserSpecTemplateSecretOutput) Metadata() KafkaUserSpecTemplateSecretMetadataPtrOutput {
	return o.ApplyT(func(v KafkaUserSpecTemplateSecret) *KafkaUserSpecTemplateSecretMetadata { return v.Metadata }).(KafkaUserSpecTemplateSecretMetadataPtrOutput)
}

type KafkaUserSpecTemplateSecretPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecTemplateSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecTemplateSecret)(nil)).Elem()
}

func (o KafkaUserSpecTemplateSecretPtrOutput) ToKafkaUserSpecTemplateSecretPtrOutput() KafkaUserSpecTemplateSecretPtrOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretPtrOutput) ToKafkaUserSpecTemplateSecretPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretPtrOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretPtrOutput) Elem() KafkaUserSpecTemplateSecretOutput {
	return o.ApplyT(func(v *KafkaUserSpecTemplateSecret) KafkaUserSpecTemplateSecret {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecTemplateSecret
		return ret
	}).(KafkaUserSpecTemplateSecretOutput)
}

// Metadata applied to the resource.
func (o KafkaUserSpecTemplateSecretPtrOutput) Metadata() KafkaUserSpecTemplateSecretMetadataPtrOutput {
	return o.ApplyT(func(v *KafkaUserSpecTemplateSecret) *KafkaUserSpecTemplateSecretMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(KafkaUserSpecTemplateSecretMetadataPtrOutput)
}

// Metadata applied to the resource.
type KafkaUserSpecTemplateSecretMetadata struct {
	// Annotations added to the Kubernetes resource.
	Annotations map[string]string `pulumi:"annotations"`
	// Labels added to the Kubernetes resource.
	Labels map[string]string `pulumi:"labels"`
}

// KafkaUserSpecTemplateSecretMetadataInput is an input type that accepts KafkaUserSpecTemplateSecretMetadataArgs and KafkaUserSpecTemplateSecretMetadataOutput values.
// You can construct a concrete instance of `KafkaUserSpecTemplateSecretMetadataInput` via:
//
//	KafkaUserSpecTemplateSecretMetadataArgs{...}
type KafkaUserSpecTemplateSecretMetadataInput interface {
	pulumi.Input

	ToKafkaUserSpecTemplateSecretMetadataOutput() KafkaUserSpecTemplateSecretMetadataOutput
	ToKafkaUserSpecTemplateSecretMetadataOutputWithContext(context.Context) KafkaUserSpecTemplateSecretMetadataOutput
}

// Metadata applied to the resource.
type KafkaUserSpecTemplateSecretMetadataArgs struct {
	// Annotations added to the Kubernetes resource.
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// Labels added to the Kubernetes resource.
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (KafkaUserSpecTemplateSecretMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecTemplateSecretMetadata)(nil)).Elem()
}

func (i KafkaUserSpecTemplateSecretMetadataArgs) ToKafkaUserSpecTemplateSecretMetadataOutput() KafkaUserSpecTemplateSecretMetadataOutput {
	return i.ToKafkaUserSpecTemplateSecretMetadataOutputWithContext(context.Background())
}

func (i KafkaUserSpecTemplateSecretMetadataArgs) ToKafkaUserSpecTemplateSecretMetadataOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplateSecretMetadataOutput)
}

func (i KafkaUserSpecTemplateSecretMetadataArgs) ToKafkaUserSpecTemplateSecretMetadataPtrOutput() KafkaUserSpecTemplateSecretMetadataPtrOutput {
	return i.ToKafkaUserSpecTemplateSecretMetadataPtrOutputWithContext(context.Background())
}

func (i KafkaUserSpecTemplateSecretMetadataArgs) ToKafkaUserSpecTemplateSecretMetadataPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplateSecretMetadataOutput).ToKafkaUserSpecTemplateSecretMetadataPtrOutputWithContext(ctx)
}

// KafkaUserSpecTemplateSecretMetadataPtrInput is an input type that accepts KafkaUserSpecTemplateSecretMetadataArgs, KafkaUserSpecTemplateSecretMetadataPtr and KafkaUserSpecTemplateSecretMetadataPtrOutput values.
// You can construct a concrete instance of `KafkaUserSpecTemplateSecretMetadataPtrInput` via:
//
//	        KafkaUserSpecTemplateSecretMetadataArgs{...}
//
//	or:
//
//	        nil
type KafkaUserSpecTemplateSecretMetadataPtrInput interface {
	pulumi.Input

	ToKafkaUserSpecTemplateSecretMetadataPtrOutput() KafkaUserSpecTemplateSecretMetadataPtrOutput
	ToKafkaUserSpecTemplateSecretMetadataPtrOutputWithContext(context.Context) KafkaUserSpecTemplateSecretMetadataPtrOutput
}

type kafkaUserSpecTemplateSecretMetadataPtrType KafkaUserSpecTemplateSecretMetadataArgs

func KafkaUserSpecTemplateSecretMetadataPtr(v *KafkaUserSpecTemplateSecretMetadataArgs) KafkaUserSpecTemplateSecretMetadataPtrInput {
	return (*kafkaUserSpecTemplateSecretMetadataPtrType)(v)
}

func (*kafkaUserSpecTemplateSecretMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecTemplateSecretMetadata)(nil)).Elem()
}

func (i *kafkaUserSpecTemplateSecretMetadataPtrType) ToKafkaUserSpecTemplateSecretMetadataPtrOutput() KafkaUserSpecTemplateSecretMetadataPtrOutput {
	return i.ToKafkaUserSpecTemplateSecretMetadataPtrOutputWithContext(context.Background())
}

func (i *kafkaUserSpecTemplateSecretMetadataPtrType) ToKafkaUserSpecTemplateSecretMetadataPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserSpecTemplateSecretMetadataPtrOutput)
}

// Metadata applied to the resource.
type KafkaUserSpecTemplateSecretMetadataOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecTemplateSecretMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserSpecTemplateSecretMetadata)(nil)).Elem()
}

func (o KafkaUserSpecTemplateSecretMetadataOutput) ToKafkaUserSpecTemplateSecretMetadataOutput() KafkaUserSpecTemplateSecretMetadataOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretMetadataOutput) ToKafkaUserSpecTemplateSecretMetadataOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretMetadataOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretMetadataOutput) ToKafkaUserSpecTemplateSecretMetadataPtrOutput() KafkaUserSpecTemplateSecretMetadataPtrOutput {
	return o.ToKafkaUserSpecTemplateSecretMetadataPtrOutputWithContext(context.Background())
}

func (o KafkaUserSpecTemplateSecretMetadataOutput) ToKafkaUserSpecTemplateSecretMetadataPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserSpecTemplateSecretMetadata) *KafkaUserSpecTemplateSecretMetadata {
		return &v
	}).(KafkaUserSpecTemplateSecretMetadataPtrOutput)
}

// Annotations added to the Kubernetes resource.
func (o KafkaUserSpecTemplateSecretMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v KafkaUserSpecTemplateSecretMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Labels added to the Kubernetes resource.
func (o KafkaUserSpecTemplateSecretMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v KafkaUserSpecTemplateSecretMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type KafkaUserSpecTemplateSecretMetadataPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserSpecTemplateSecretMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserSpecTemplateSecretMetadata)(nil)).Elem()
}

func (o KafkaUserSpecTemplateSecretMetadataPtrOutput) ToKafkaUserSpecTemplateSecretMetadataPtrOutput() KafkaUserSpecTemplateSecretMetadataPtrOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretMetadataPtrOutput) ToKafkaUserSpecTemplateSecretMetadataPtrOutputWithContext(ctx context.Context) KafkaUserSpecTemplateSecretMetadataPtrOutput {
	return o
}

func (o KafkaUserSpecTemplateSecretMetadataPtrOutput) Elem() KafkaUserSpecTemplateSecretMetadataOutput {
	return o.ApplyT(func(v *KafkaUserSpecTemplateSecretMetadata) KafkaUserSpecTemplateSecretMetadata {
		if v != nil {
			return *v
		}
		var ret KafkaUserSpecTemplateSecretMetadata
		return ret
	}).(KafkaUserSpecTemplateSecretMetadataOutput)
}

// Annotations added to the Kubernetes resource.
func (o KafkaUserSpecTemplateSecretMetadataPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KafkaUserSpecTemplateSecretMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// Labels added to the Kubernetes resource.
func (o KafkaUserSpecTemplateSecretMetadataPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KafkaUserSpecTemplateSecretMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Annotations added to the Kubernetes resource.
type KafkaUserSpecTemplateSecretMetadataAnnotations struct {
}

// Labels added to the Kubernetes resource.
type KafkaUserSpecTemplateSecretMetadataLabels struct {
}

// The status of the Kafka User.
type KafkaUserStatus struct {
	// List of status conditions.
	Conditions []KafkaUserStatusConditions `pulumi:"conditions"`
	// The generation of the CRD that was last reconciled by the operator.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// The name of `Secret` where the credentials are stored.
	Secret *string `pulumi:"secret"`
	// Username.
	Username *string `pulumi:"username"`
}

// KafkaUserStatusInput is an input type that accepts KafkaUserStatusArgs and KafkaUserStatusOutput values.
// You can construct a concrete instance of `KafkaUserStatusInput` via:
//
//	KafkaUserStatusArgs{...}
type KafkaUserStatusInput interface {
	pulumi.Input

	ToKafkaUserStatusOutput() KafkaUserStatusOutput
	ToKafkaUserStatusOutputWithContext(context.Context) KafkaUserStatusOutput
}

// The status of the Kafka User.
type KafkaUserStatusArgs struct {
	// List of status conditions.
	Conditions KafkaUserStatusConditionsArrayInput `pulumi:"conditions"`
	// The generation of the CRD that was last reconciled by the operator.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// The name of `Secret` where the credentials are stored.
	Secret pulumi.StringPtrInput `pulumi:"secret"`
	// Username.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (KafkaUserStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserStatus)(nil)).Elem()
}

func (i KafkaUserStatusArgs) ToKafkaUserStatusOutput() KafkaUserStatusOutput {
	return i.ToKafkaUserStatusOutputWithContext(context.Background())
}

func (i KafkaUserStatusArgs) ToKafkaUserStatusOutputWithContext(ctx context.Context) KafkaUserStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserStatusOutput)
}

func (i KafkaUserStatusArgs) ToKafkaUserStatusPtrOutput() KafkaUserStatusPtrOutput {
	return i.ToKafkaUserStatusPtrOutputWithContext(context.Background())
}

func (i KafkaUserStatusArgs) ToKafkaUserStatusPtrOutputWithContext(ctx context.Context) KafkaUserStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserStatusOutput).ToKafkaUserStatusPtrOutputWithContext(ctx)
}

// KafkaUserStatusPtrInput is an input type that accepts KafkaUserStatusArgs, KafkaUserStatusPtr and KafkaUserStatusPtrOutput values.
// You can construct a concrete instance of `KafkaUserStatusPtrInput` via:
//
//	        KafkaUserStatusArgs{...}
//
//	or:
//
//	        nil
type KafkaUserStatusPtrInput interface {
	pulumi.Input

	ToKafkaUserStatusPtrOutput() KafkaUserStatusPtrOutput
	ToKafkaUserStatusPtrOutputWithContext(context.Context) KafkaUserStatusPtrOutput
}

type kafkaUserStatusPtrType KafkaUserStatusArgs

func KafkaUserStatusPtr(v *KafkaUserStatusArgs) KafkaUserStatusPtrInput {
	return (*kafkaUserStatusPtrType)(v)
}

func (*kafkaUserStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserStatus)(nil)).Elem()
}

func (i *kafkaUserStatusPtrType) ToKafkaUserStatusPtrOutput() KafkaUserStatusPtrOutput {
	return i.ToKafkaUserStatusPtrOutputWithContext(context.Background())
}

func (i *kafkaUserStatusPtrType) ToKafkaUserStatusPtrOutputWithContext(ctx context.Context) KafkaUserStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserStatusPtrOutput)
}

// The status of the Kafka User.
type KafkaUserStatusOutput struct{ *pulumi.OutputState }

func (KafkaUserStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserStatus)(nil)).Elem()
}

func (o KafkaUserStatusOutput) ToKafkaUserStatusOutput() KafkaUserStatusOutput {
	return o
}

func (o KafkaUserStatusOutput) ToKafkaUserStatusOutputWithContext(ctx context.Context) KafkaUserStatusOutput {
	return o
}

func (o KafkaUserStatusOutput) ToKafkaUserStatusPtrOutput() KafkaUserStatusPtrOutput {
	return o.ToKafkaUserStatusPtrOutputWithContext(context.Background())
}

func (o KafkaUserStatusOutput) ToKafkaUserStatusPtrOutputWithContext(ctx context.Context) KafkaUserStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaUserStatus) *KafkaUserStatus {
		return &v
	}).(KafkaUserStatusPtrOutput)
}

// List of status conditions.
func (o KafkaUserStatusOutput) Conditions() KafkaUserStatusConditionsArrayOutput {
	return o.ApplyT(func(v KafkaUserStatus) []KafkaUserStatusConditions { return v.Conditions }).(KafkaUserStatusConditionsArrayOutput)
}

// The generation of the CRD that was last reconciled by the operator.
func (o KafkaUserStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaUserStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// The name of `Secret` where the credentials are stored.
func (o KafkaUserStatusOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatus) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// Username.
func (o KafkaUserStatusOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatus) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type KafkaUserStatusPtrOutput struct{ *pulumi.OutputState }

func (KafkaUserStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUserStatus)(nil)).Elem()
}

func (o KafkaUserStatusPtrOutput) ToKafkaUserStatusPtrOutput() KafkaUserStatusPtrOutput {
	return o
}

func (o KafkaUserStatusPtrOutput) ToKafkaUserStatusPtrOutputWithContext(ctx context.Context) KafkaUserStatusPtrOutput {
	return o
}

func (o KafkaUserStatusPtrOutput) Elem() KafkaUserStatusOutput {
	return o.ApplyT(func(v *KafkaUserStatus) KafkaUserStatus {
		if v != nil {
			return *v
		}
		var ret KafkaUserStatus
		return ret
	}).(KafkaUserStatusOutput)
}

// List of status conditions.
func (o KafkaUserStatusPtrOutput) Conditions() KafkaUserStatusConditionsArrayOutput {
	return o.ApplyT(func(v *KafkaUserStatus) []KafkaUserStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(KafkaUserStatusConditionsArrayOutput)
}

// The generation of the CRD that was last reconciled by the operator.
func (o KafkaUserStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KafkaUserStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// The name of `Secret` where the credentials are stored.
func (o KafkaUserStatusPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUserStatus) *string {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(pulumi.StringPtrOutput)
}

// Username.
func (o KafkaUserStatusPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUserStatus) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type KafkaUserStatusConditions struct {
	// Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Human-readable message indicating details about the condition's last transition.
	Message *string `pulumi:"message"`
	// The reason for the condition's last transition (a single word in CamelCase).
	Reason *string `pulumi:"reason"`
	// The status of the condition, either True, False or Unknown.
	Status *string `pulumi:"status"`
	// The unique identifier of a condition, used to distinguish between other conditions in the resource.
	Type *string `pulumi:"type"`
}

// KafkaUserStatusConditionsInput is an input type that accepts KafkaUserStatusConditionsArgs and KafkaUserStatusConditionsOutput values.
// You can construct a concrete instance of `KafkaUserStatusConditionsInput` via:
//
//	KafkaUserStatusConditionsArgs{...}
type KafkaUserStatusConditionsInput interface {
	pulumi.Input

	ToKafkaUserStatusConditionsOutput() KafkaUserStatusConditionsOutput
	ToKafkaUserStatusConditionsOutputWithContext(context.Context) KafkaUserStatusConditionsOutput
}

type KafkaUserStatusConditionsArgs struct {
	// Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Human-readable message indicating details about the condition's last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The reason for the condition's last transition (a single word in CamelCase).
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// The status of the condition, either True, False or Unknown.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The unique identifier of a condition, used to distinguish between other conditions in the resource.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (KafkaUserStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserStatusConditions)(nil)).Elem()
}

func (i KafkaUserStatusConditionsArgs) ToKafkaUserStatusConditionsOutput() KafkaUserStatusConditionsOutput {
	return i.ToKafkaUserStatusConditionsOutputWithContext(context.Background())
}

func (i KafkaUserStatusConditionsArgs) ToKafkaUserStatusConditionsOutputWithContext(ctx context.Context) KafkaUserStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserStatusConditionsOutput)
}

// KafkaUserStatusConditionsArrayInput is an input type that accepts KafkaUserStatusConditionsArray and KafkaUserStatusConditionsArrayOutput values.
// You can construct a concrete instance of `KafkaUserStatusConditionsArrayInput` via:
//
//	KafkaUserStatusConditionsArray{ KafkaUserStatusConditionsArgs{...} }
type KafkaUserStatusConditionsArrayInput interface {
	pulumi.Input

	ToKafkaUserStatusConditionsArrayOutput() KafkaUserStatusConditionsArrayOutput
	ToKafkaUserStatusConditionsArrayOutputWithContext(context.Context) KafkaUserStatusConditionsArrayOutput
}

type KafkaUserStatusConditionsArray []KafkaUserStatusConditionsInput

func (KafkaUserStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaUserStatusConditions)(nil)).Elem()
}

func (i KafkaUserStatusConditionsArray) ToKafkaUserStatusConditionsArrayOutput() KafkaUserStatusConditionsArrayOutput {
	return i.ToKafkaUserStatusConditionsArrayOutputWithContext(context.Background())
}

func (i KafkaUserStatusConditionsArray) ToKafkaUserStatusConditionsArrayOutputWithContext(ctx context.Context) KafkaUserStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserStatusConditionsArrayOutput)
}

type KafkaUserStatusConditionsOutput struct{ *pulumi.OutputState }

func (KafkaUserStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaUserStatusConditions)(nil)).Elem()
}

func (o KafkaUserStatusConditionsOutput) ToKafkaUserStatusConditionsOutput() KafkaUserStatusConditionsOutput {
	return o
}

func (o KafkaUserStatusConditionsOutput) ToKafkaUserStatusConditionsOutputWithContext(ctx context.Context) KafkaUserStatusConditionsOutput {
	return o
}

// Last time the condition of a type changed from one status to another. The required format is 'yyyy-MM-ddTHH:mm:ssZ', in the UTC time zone.
func (o KafkaUserStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// Human-readable message indicating details about the condition's last transition.
func (o KafkaUserStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The reason for the condition's last transition (a single word in CamelCase).
func (o KafkaUserStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// The status of the condition, either True, False or Unknown.
func (o KafkaUserStatusConditionsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatusConditions) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The unique identifier of a condition, used to distinguish between other conditions in the resource.
func (o KafkaUserStatusConditionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaUserStatusConditions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type KafkaUserStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (KafkaUserStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaUserStatusConditions)(nil)).Elem()
}

func (o KafkaUserStatusConditionsArrayOutput) ToKafkaUserStatusConditionsArrayOutput() KafkaUserStatusConditionsArrayOutput {
	return o
}

func (o KafkaUserStatusConditionsArrayOutput) ToKafkaUserStatusConditionsArrayOutputWithContext(ctx context.Context) KafkaUserStatusConditionsArrayOutput {
	return o
}

func (o KafkaUserStatusConditionsArrayOutput) Index(i pulumi.IntInput) KafkaUserStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KafkaUserStatusConditions {
		return vs[0].([]KafkaUserStatusConditions)[vs[1].(int)]
	}).(KafkaUserStatusConditionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicSpecInput)(nil)).Elem(), KafkaTopicSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicSpecPtrInput)(nil)).Elem(), KafkaTopicSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicStatusInput)(nil)).Elem(), KafkaTopicStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicStatusPtrInput)(nil)).Elem(), KafkaTopicStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicStatusConditionsInput)(nil)).Elem(), KafkaTopicStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicStatusConditionsArrayInput)(nil)).Elem(), KafkaTopicStatusConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicStatusReplicasChangeInput)(nil)).Elem(), KafkaTopicStatusReplicasChangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicStatusReplicasChangePtrInput)(nil)).Elem(), KafkaTopicStatusReplicasChangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecInput)(nil)).Elem(), KafkaUserSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecPtrInput)(nil)).Elem(), KafkaUserSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthenticationInput)(nil)).Elem(), KafkaUserSpecAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthenticationPtrInput)(nil)).Elem(), KafkaUserSpecAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordInput)(nil)).Elem(), KafkaUserSpecAuthenticationPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordPtrInput)(nil)).Elem(), KafkaUserSpecAuthenticationPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordValueFromInput)(nil)).Elem(), KafkaUserSpecAuthenticationPasswordValueFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordValueFromPtrInput)(nil)).Elem(), KafkaUserSpecAuthenticationPasswordValueFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefInput)(nil)).Elem(), KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrInput)(nil)).Elem(), KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthorizationInput)(nil)).Elem(), KafkaUserSpecAuthorizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthorizationPtrInput)(nil)).Elem(), KafkaUserSpecAuthorizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthorizationAclsInput)(nil)).Elem(), KafkaUserSpecAuthorizationAclsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthorizationAclsArrayInput)(nil)).Elem(), KafkaUserSpecAuthorizationAclsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecAuthorizationAclsResourceInput)(nil)).Elem(), KafkaUserSpecAuthorizationAclsResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecQuotasInput)(nil)).Elem(), KafkaUserSpecQuotasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecQuotasPtrInput)(nil)).Elem(), KafkaUserSpecQuotasArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecTemplateInput)(nil)).Elem(), KafkaUserSpecTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecTemplatePtrInput)(nil)).Elem(), KafkaUserSpecTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecTemplateSecretInput)(nil)).Elem(), KafkaUserSpecTemplateSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecTemplateSecretPtrInput)(nil)).Elem(), KafkaUserSpecTemplateSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecTemplateSecretMetadataInput)(nil)).Elem(), KafkaUserSpecTemplateSecretMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserSpecTemplateSecretMetadataPtrInput)(nil)).Elem(), KafkaUserSpecTemplateSecretMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserStatusInput)(nil)).Elem(), KafkaUserStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserStatusPtrInput)(nil)).Elem(), KafkaUserStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserStatusConditionsInput)(nil)).Elem(), KafkaUserStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserStatusConditionsArrayInput)(nil)).Elem(), KafkaUserStatusConditionsArray{})
	pulumi.RegisterOutputType(KafkaTopicSpecOutput{})
	pulumi.RegisterOutputType(KafkaTopicSpecPtrOutput{})
	pulumi.RegisterOutputType(KafkaTopicStatusOutput{})
	pulumi.RegisterOutputType(KafkaTopicStatusPtrOutput{})
	pulumi.RegisterOutputType(KafkaTopicStatusConditionsOutput{})
	pulumi.RegisterOutputType(KafkaTopicStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(KafkaTopicStatusReplicasChangeOutput{})
	pulumi.RegisterOutputType(KafkaTopicStatusReplicasChangePtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthenticationOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthenticationPasswordOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthenticationPasswordPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthenticationPasswordValueFromOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthenticationPasswordValueFromPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthenticationPasswordValueFromSecretKeyRefPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthorizationOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthorizationPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthorizationAclsOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthorizationAclsArrayOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecAuthorizationAclsResourceOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecQuotasOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecQuotasPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecTemplateOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecTemplatePtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecTemplateSecretOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecTemplateSecretPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecTemplateSecretMetadataOutput{})
	pulumi.RegisterOutputType(KafkaUserSpecTemplateSecretMetadataPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserStatusOutput{})
	pulumi.RegisterOutputType(KafkaUserStatusPtrOutput{})
	pulumi.RegisterOutputType(KafkaUserStatusConditionsOutput{})
	pulumi.RegisterOutputType(KafkaUserStatusConditionsArrayOutput{})
}
