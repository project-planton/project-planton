// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// StackConfigPolicy represents a StackConfigPolicy resource in a Kubernetes cluster.
type StackConfigPolicyType struct {
	ApiVersion *string                  `pulumi:"apiVersion"`
	Kind       *string                  `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta       `pulumi:"metadata"`
	Spec       *StackConfigPolicySpec   `pulumi:"spec"`
	Status     *StackConfigPolicyStatus `pulumi:"status"`
}

type StackConfigPolicyMetadata struct {
}

type StackConfigPolicySpec struct {
	Elasticsearch *StackConfigPolicySpecElasticsearch `pulumi:"elasticsearch"`
	Kibana        *StackConfigPolicySpecKibana        `pulumi:"kibana"`
	// A label selector is a label query over a set of resources. The result of matchLabels and
	// matchExpressions are ANDed. An empty label selector matches all objects. A null
	// label selector matches no objects.
	ResourceSelector *StackConfigPolicySpecResourceSelector `pulumi:"resourceSelector"`
	// Deprecated: SecureSettings only applies to Elasticsearch and is deprecated. It must be set per application instead.
	SecureSettings []StackConfigPolicySpecSecureSettings `pulumi:"secureSettings"`
}

// StackConfigPolicySpecInput is an input type that accepts StackConfigPolicySpecArgs and StackConfigPolicySpecOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecInput` via:
//
//	StackConfigPolicySpecArgs{...}
type StackConfigPolicySpecInput interface {
	pulumi.Input

	ToStackConfigPolicySpecOutput() StackConfigPolicySpecOutput
	ToStackConfigPolicySpecOutputWithContext(context.Context) StackConfigPolicySpecOutput
}

type StackConfigPolicySpecArgs struct {
	Elasticsearch StackConfigPolicySpecElasticsearchPtrInput `pulumi:"elasticsearch"`
	Kibana        StackConfigPolicySpecKibanaPtrInput        `pulumi:"kibana"`
	// A label selector is a label query over a set of resources. The result of matchLabels and
	// matchExpressions are ANDed. An empty label selector matches all objects. A null
	// label selector matches no objects.
	ResourceSelector StackConfigPolicySpecResourceSelectorPtrInput `pulumi:"resourceSelector"`
	// Deprecated: SecureSettings only applies to Elasticsearch and is deprecated. It must be set per application instead.
	SecureSettings StackConfigPolicySpecSecureSettingsArrayInput `pulumi:"secureSettings"`
}

func (StackConfigPolicySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpec)(nil)).Elem()
}

func (i StackConfigPolicySpecArgs) ToStackConfigPolicySpecOutput() StackConfigPolicySpecOutput {
	return i.ToStackConfigPolicySpecOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecArgs) ToStackConfigPolicySpecOutputWithContext(ctx context.Context) StackConfigPolicySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecOutput)
}

func (i StackConfigPolicySpecArgs) ToStackConfigPolicySpecPtrOutput() StackConfigPolicySpecPtrOutput {
	return i.ToStackConfigPolicySpecPtrOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecArgs) ToStackConfigPolicySpecPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecOutput).ToStackConfigPolicySpecPtrOutputWithContext(ctx)
}

// StackConfigPolicySpecPtrInput is an input type that accepts StackConfigPolicySpecArgs, StackConfigPolicySpecPtr and StackConfigPolicySpecPtrOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecPtrInput` via:
//
//	        StackConfigPolicySpecArgs{...}
//
//	or:
//
//	        nil
type StackConfigPolicySpecPtrInput interface {
	pulumi.Input

	ToStackConfigPolicySpecPtrOutput() StackConfigPolicySpecPtrOutput
	ToStackConfigPolicySpecPtrOutputWithContext(context.Context) StackConfigPolicySpecPtrOutput
}

type stackConfigPolicySpecPtrType StackConfigPolicySpecArgs

func StackConfigPolicySpecPtr(v *StackConfigPolicySpecArgs) StackConfigPolicySpecPtrInput {
	return (*stackConfigPolicySpecPtrType)(v)
}

func (*stackConfigPolicySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicySpec)(nil)).Elem()
}

func (i *stackConfigPolicySpecPtrType) ToStackConfigPolicySpecPtrOutput() StackConfigPolicySpecPtrOutput {
	return i.ToStackConfigPolicySpecPtrOutputWithContext(context.Background())
}

func (i *stackConfigPolicySpecPtrType) ToStackConfigPolicySpecPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecPtrOutput)
}

type StackConfigPolicySpecOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpec)(nil)).Elem()
}

func (o StackConfigPolicySpecOutput) ToStackConfigPolicySpecOutput() StackConfigPolicySpecOutput {
	return o
}

func (o StackConfigPolicySpecOutput) ToStackConfigPolicySpecOutputWithContext(ctx context.Context) StackConfigPolicySpecOutput {
	return o
}

func (o StackConfigPolicySpecOutput) ToStackConfigPolicySpecPtrOutput() StackConfigPolicySpecPtrOutput {
	return o.ToStackConfigPolicySpecPtrOutputWithContext(context.Background())
}

func (o StackConfigPolicySpecOutput) ToStackConfigPolicySpecPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackConfigPolicySpec) *StackConfigPolicySpec {
		return &v
	}).(StackConfigPolicySpecPtrOutput)
}

func (o StackConfigPolicySpecOutput) Elasticsearch() StackConfigPolicySpecElasticsearchPtrOutput {
	return o.ApplyT(func(v StackConfigPolicySpec) *StackConfigPolicySpecElasticsearch { return v.Elasticsearch }).(StackConfigPolicySpecElasticsearchPtrOutput)
}

func (o StackConfigPolicySpecOutput) Kibana() StackConfigPolicySpecKibanaPtrOutput {
	return o.ApplyT(func(v StackConfigPolicySpec) *StackConfigPolicySpecKibana { return v.Kibana }).(StackConfigPolicySpecKibanaPtrOutput)
}

// A label selector is a label query over a set of resources. The result of matchLabels and
// matchExpressions are ANDed. An empty label selector matches all objects. A null
// label selector matches no objects.
func (o StackConfigPolicySpecOutput) ResourceSelector() StackConfigPolicySpecResourceSelectorPtrOutput {
	return o.ApplyT(func(v StackConfigPolicySpec) *StackConfigPolicySpecResourceSelector { return v.ResourceSelector }).(StackConfigPolicySpecResourceSelectorPtrOutput)
}

// Deprecated: SecureSettings only applies to Elasticsearch and is deprecated. It must be set per application instead.
func (o StackConfigPolicySpecOutput) SecureSettings() StackConfigPolicySpecSecureSettingsArrayOutput {
	return o.ApplyT(func(v StackConfigPolicySpec) []StackConfigPolicySpecSecureSettings { return v.SecureSettings }).(StackConfigPolicySpecSecureSettingsArrayOutput)
}

type StackConfigPolicySpecPtrOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicySpec)(nil)).Elem()
}

func (o StackConfigPolicySpecPtrOutput) ToStackConfigPolicySpecPtrOutput() StackConfigPolicySpecPtrOutput {
	return o
}

func (o StackConfigPolicySpecPtrOutput) ToStackConfigPolicySpecPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecPtrOutput {
	return o
}

func (o StackConfigPolicySpecPtrOutput) Elem() StackConfigPolicySpecOutput {
	return o.ApplyT(func(v *StackConfigPolicySpec) StackConfigPolicySpec {
		if v != nil {
			return *v
		}
		var ret StackConfigPolicySpec
		return ret
	}).(StackConfigPolicySpecOutput)
}

func (o StackConfigPolicySpecPtrOutput) Elasticsearch() StackConfigPolicySpecElasticsearchPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicySpec) *StackConfigPolicySpecElasticsearch {
		if v == nil {
			return nil
		}
		return v.Elasticsearch
	}).(StackConfigPolicySpecElasticsearchPtrOutput)
}

func (o StackConfigPolicySpecPtrOutput) Kibana() StackConfigPolicySpecKibanaPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicySpec) *StackConfigPolicySpecKibana {
		if v == nil {
			return nil
		}
		return v.Kibana
	}).(StackConfigPolicySpecKibanaPtrOutput)
}

// A label selector is a label query over a set of resources. The result of matchLabels and
// matchExpressions are ANDed. An empty label selector matches all objects. A null
// label selector matches no objects.
func (o StackConfigPolicySpecPtrOutput) ResourceSelector() StackConfigPolicySpecResourceSelectorPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicySpec) *StackConfigPolicySpecResourceSelector {
		if v == nil {
			return nil
		}
		return v.ResourceSelector
	}).(StackConfigPolicySpecResourceSelectorPtrOutput)
}

// Deprecated: SecureSettings only applies to Elasticsearch and is deprecated. It must be set per application instead.
func (o StackConfigPolicySpecPtrOutput) SecureSettings() StackConfigPolicySpecSecureSettingsArrayOutput {
	return o.ApplyT(func(v *StackConfigPolicySpec) []StackConfigPolicySpecSecureSettings {
		if v == nil {
			return nil
		}
		return v.SecureSettings
	}).(StackConfigPolicySpecSecureSettingsArrayOutput)
}

type StackConfigPolicySpecElasticsearch struct {
	// ClusterSettings holds the Elasticsearch cluster settings (/_cluster/settings)
	ClusterSettings map[string]interface{} `pulumi:"clusterSettings"`
	// Config holds the settings that go into elasticsearch.yml.
	Config map[string]interface{} `pulumi:"config"`
	// IndexLifecyclePolicies holds the Index Lifecycle policies settings (/_ilm/policy)
	IndexLifecyclePolicies map[string]interface{} `pulumi:"indexLifecyclePolicies"`
	// IndexTemplates holds the Index and Component Templates settings
	IndexTemplates map[string]interface{} `pulumi:"indexTemplates"`
	// IngestPipelines holds the Ingest Pipelines settings (/_ingest/pipeline)
	IngestPipelines map[string]interface{} `pulumi:"ingestPipelines"`
	// SecretMounts are additional Secrets that need to be mounted into the Elasticsearch pods.
	SecretMounts map[string]interface{} `pulumi:"secretMounts"`
	// SecureSettings are additional Secrets that contain data to be configured to Elasticsearch's keystore.
	SecureSettings map[string]interface{} `pulumi:"secureSettings"`
	// SecurityRoleMappings holds the Role Mappings settings (/_security/role_mapping)
	SecurityRoleMappings map[string]interface{} `pulumi:"securityRoleMappings"`
	// SnapshotLifecyclePolicies holds the Snapshot Lifecycle Policies settings (/_slm/policy)
	SnapshotLifecyclePolicies map[string]interface{} `pulumi:"snapshotLifecyclePolicies"`
	// SnapshotRepositories holds the Snapshot Repositories settings (/_snapshot)
	SnapshotRepositories map[string]interface{} `pulumi:"snapshotRepositories"`
}

// StackConfigPolicySpecElasticsearchInput is an input type that accepts StackConfigPolicySpecElasticsearchArgs and StackConfigPolicySpecElasticsearchOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecElasticsearchInput` via:
//
//	StackConfigPolicySpecElasticsearchArgs{...}
type StackConfigPolicySpecElasticsearchInput interface {
	pulumi.Input

	ToStackConfigPolicySpecElasticsearchOutput() StackConfigPolicySpecElasticsearchOutput
	ToStackConfigPolicySpecElasticsearchOutputWithContext(context.Context) StackConfigPolicySpecElasticsearchOutput
}

type StackConfigPolicySpecElasticsearchArgs struct {
	// ClusterSettings holds the Elasticsearch cluster settings (/_cluster/settings)
	ClusterSettings pulumi.MapInput `pulumi:"clusterSettings"`
	// Config holds the settings that go into elasticsearch.yml.
	Config pulumi.MapInput `pulumi:"config"`
	// IndexLifecyclePolicies holds the Index Lifecycle policies settings (/_ilm/policy)
	IndexLifecyclePolicies pulumi.MapInput `pulumi:"indexLifecyclePolicies"`
	// IndexTemplates holds the Index and Component Templates settings
	IndexTemplates pulumi.MapInput `pulumi:"indexTemplates"`
	// IngestPipelines holds the Ingest Pipelines settings (/_ingest/pipeline)
	IngestPipelines pulumi.MapInput `pulumi:"ingestPipelines"`
	// SecretMounts are additional Secrets that need to be mounted into the Elasticsearch pods.
	SecretMounts pulumi.MapInput `pulumi:"secretMounts"`
	// SecureSettings are additional Secrets that contain data to be configured to Elasticsearch's keystore.
	SecureSettings pulumi.MapInput `pulumi:"secureSettings"`
	// SecurityRoleMappings holds the Role Mappings settings (/_security/role_mapping)
	SecurityRoleMappings pulumi.MapInput `pulumi:"securityRoleMappings"`
	// SnapshotLifecyclePolicies holds the Snapshot Lifecycle Policies settings (/_slm/policy)
	SnapshotLifecyclePolicies pulumi.MapInput `pulumi:"snapshotLifecyclePolicies"`
	// SnapshotRepositories holds the Snapshot Repositories settings (/_snapshot)
	SnapshotRepositories pulumi.MapInput `pulumi:"snapshotRepositories"`
}

func (StackConfigPolicySpecElasticsearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecElasticsearch)(nil)).Elem()
}

func (i StackConfigPolicySpecElasticsearchArgs) ToStackConfigPolicySpecElasticsearchOutput() StackConfigPolicySpecElasticsearchOutput {
	return i.ToStackConfigPolicySpecElasticsearchOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecElasticsearchArgs) ToStackConfigPolicySpecElasticsearchOutputWithContext(ctx context.Context) StackConfigPolicySpecElasticsearchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecElasticsearchOutput)
}

func (i StackConfigPolicySpecElasticsearchArgs) ToStackConfigPolicySpecElasticsearchPtrOutput() StackConfigPolicySpecElasticsearchPtrOutput {
	return i.ToStackConfigPolicySpecElasticsearchPtrOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecElasticsearchArgs) ToStackConfigPolicySpecElasticsearchPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecElasticsearchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecElasticsearchOutput).ToStackConfigPolicySpecElasticsearchPtrOutputWithContext(ctx)
}

// StackConfigPolicySpecElasticsearchPtrInput is an input type that accepts StackConfigPolicySpecElasticsearchArgs, StackConfigPolicySpecElasticsearchPtr and StackConfigPolicySpecElasticsearchPtrOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecElasticsearchPtrInput` via:
//
//	        StackConfigPolicySpecElasticsearchArgs{...}
//
//	or:
//
//	        nil
type StackConfigPolicySpecElasticsearchPtrInput interface {
	pulumi.Input

	ToStackConfigPolicySpecElasticsearchPtrOutput() StackConfigPolicySpecElasticsearchPtrOutput
	ToStackConfigPolicySpecElasticsearchPtrOutputWithContext(context.Context) StackConfigPolicySpecElasticsearchPtrOutput
}

type stackConfigPolicySpecElasticsearchPtrType StackConfigPolicySpecElasticsearchArgs

func StackConfigPolicySpecElasticsearchPtr(v *StackConfigPolicySpecElasticsearchArgs) StackConfigPolicySpecElasticsearchPtrInput {
	return (*stackConfigPolicySpecElasticsearchPtrType)(v)
}

func (*stackConfigPolicySpecElasticsearchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicySpecElasticsearch)(nil)).Elem()
}

func (i *stackConfigPolicySpecElasticsearchPtrType) ToStackConfigPolicySpecElasticsearchPtrOutput() StackConfigPolicySpecElasticsearchPtrOutput {
	return i.ToStackConfigPolicySpecElasticsearchPtrOutputWithContext(context.Background())
}

func (i *stackConfigPolicySpecElasticsearchPtrType) ToStackConfigPolicySpecElasticsearchPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecElasticsearchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecElasticsearchPtrOutput)
}

type StackConfigPolicySpecElasticsearchOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecElasticsearchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecElasticsearch)(nil)).Elem()
}

func (o StackConfigPolicySpecElasticsearchOutput) ToStackConfigPolicySpecElasticsearchOutput() StackConfigPolicySpecElasticsearchOutput {
	return o
}

func (o StackConfigPolicySpecElasticsearchOutput) ToStackConfigPolicySpecElasticsearchOutputWithContext(ctx context.Context) StackConfigPolicySpecElasticsearchOutput {
	return o
}

func (o StackConfigPolicySpecElasticsearchOutput) ToStackConfigPolicySpecElasticsearchPtrOutput() StackConfigPolicySpecElasticsearchPtrOutput {
	return o.ToStackConfigPolicySpecElasticsearchPtrOutputWithContext(context.Background())
}

func (o StackConfigPolicySpecElasticsearchOutput) ToStackConfigPolicySpecElasticsearchPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecElasticsearchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackConfigPolicySpecElasticsearch) *StackConfigPolicySpecElasticsearch {
		return &v
	}).(StackConfigPolicySpecElasticsearchPtrOutput)
}

// ClusterSettings holds the Elasticsearch cluster settings (/_cluster/settings)
func (o StackConfigPolicySpecElasticsearchOutput) ClusterSettings() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecElasticsearch) map[string]interface{} { return v.ClusterSettings }).(pulumi.MapOutput)
}

// Config holds the settings that go into elasticsearch.yml.
func (o StackConfigPolicySpecElasticsearchOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecElasticsearch) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

// IndexLifecyclePolicies holds the Index Lifecycle policies settings (/_ilm/policy)
func (o StackConfigPolicySpecElasticsearchOutput) IndexLifecyclePolicies() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecElasticsearch) map[string]interface{} { return v.IndexLifecyclePolicies }).(pulumi.MapOutput)
}

// IndexTemplates holds the Index and Component Templates settings
func (o StackConfigPolicySpecElasticsearchOutput) IndexTemplates() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecElasticsearch) map[string]interface{} { return v.IndexTemplates }).(pulumi.MapOutput)
}

// IngestPipelines holds the Ingest Pipelines settings (/_ingest/pipeline)
func (o StackConfigPolicySpecElasticsearchOutput) IngestPipelines() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecElasticsearch) map[string]interface{} { return v.IngestPipelines }).(pulumi.MapOutput)
}

// SecretMounts are additional Secrets that need to be mounted into the Elasticsearch pods.
func (o StackConfigPolicySpecElasticsearchOutput) SecretMounts() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecElasticsearch) map[string]interface{} { return v.SecretMounts }).(pulumi.MapOutput)
}

// SecureSettings are additional Secrets that contain data to be configured to Elasticsearch's keystore.
func (o StackConfigPolicySpecElasticsearchOutput) SecureSettings() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecElasticsearch) map[string]interface{} { return v.SecureSettings }).(pulumi.MapOutput)
}

// SecurityRoleMappings holds the Role Mappings settings (/_security/role_mapping)
func (o StackConfigPolicySpecElasticsearchOutput) SecurityRoleMappings() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecElasticsearch) map[string]interface{} { return v.SecurityRoleMappings }).(pulumi.MapOutput)
}

// SnapshotLifecyclePolicies holds the Snapshot Lifecycle Policies settings (/_slm/policy)
func (o StackConfigPolicySpecElasticsearchOutput) SnapshotLifecyclePolicies() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecElasticsearch) map[string]interface{} { return v.SnapshotLifecyclePolicies }).(pulumi.MapOutput)
}

// SnapshotRepositories holds the Snapshot Repositories settings (/_snapshot)
func (o StackConfigPolicySpecElasticsearchOutput) SnapshotRepositories() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecElasticsearch) map[string]interface{} { return v.SnapshotRepositories }).(pulumi.MapOutput)
}

type StackConfigPolicySpecElasticsearchPtrOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecElasticsearchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicySpecElasticsearch)(nil)).Elem()
}

func (o StackConfigPolicySpecElasticsearchPtrOutput) ToStackConfigPolicySpecElasticsearchPtrOutput() StackConfigPolicySpecElasticsearchPtrOutput {
	return o
}

func (o StackConfigPolicySpecElasticsearchPtrOutput) ToStackConfigPolicySpecElasticsearchPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecElasticsearchPtrOutput {
	return o
}

func (o StackConfigPolicySpecElasticsearchPtrOutput) Elem() StackConfigPolicySpecElasticsearchOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearch) StackConfigPolicySpecElasticsearch {
		if v != nil {
			return *v
		}
		var ret StackConfigPolicySpecElasticsearch
		return ret
	}).(StackConfigPolicySpecElasticsearchOutput)
}

// ClusterSettings holds the Elasticsearch cluster settings (/_cluster/settings)
func (o StackConfigPolicySpecElasticsearchPtrOutput) ClusterSettings() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.ClusterSettings
	}).(pulumi.MapOutput)
}

// Config holds the settings that go into elasticsearch.yml.
func (o StackConfigPolicySpecElasticsearchPtrOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.MapOutput)
}

// IndexLifecyclePolicies holds the Index Lifecycle policies settings (/_ilm/policy)
func (o StackConfigPolicySpecElasticsearchPtrOutput) IndexLifecyclePolicies() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.IndexLifecyclePolicies
	}).(pulumi.MapOutput)
}

// IndexTemplates holds the Index and Component Templates settings
func (o StackConfigPolicySpecElasticsearchPtrOutput) IndexTemplates() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.IndexTemplates
	}).(pulumi.MapOutput)
}

// IngestPipelines holds the Ingest Pipelines settings (/_ingest/pipeline)
func (o StackConfigPolicySpecElasticsearchPtrOutput) IngestPipelines() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.IngestPipelines
	}).(pulumi.MapOutput)
}

// SecretMounts are additional Secrets that need to be mounted into the Elasticsearch pods.
func (o StackConfigPolicySpecElasticsearchPtrOutput) SecretMounts() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.SecretMounts
	}).(pulumi.MapOutput)
}

// SecureSettings are additional Secrets that contain data to be configured to Elasticsearch's keystore.
func (o StackConfigPolicySpecElasticsearchPtrOutput) SecureSettings() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.SecureSettings
	}).(pulumi.MapOutput)
}

// SecurityRoleMappings holds the Role Mappings settings (/_security/role_mapping)
func (o StackConfigPolicySpecElasticsearchPtrOutput) SecurityRoleMappings() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.SecurityRoleMappings
	}).(pulumi.MapOutput)
}

// SnapshotLifecyclePolicies holds the Snapshot Lifecycle Policies settings (/_slm/policy)
func (o StackConfigPolicySpecElasticsearchPtrOutput) SnapshotLifecyclePolicies() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.SnapshotLifecyclePolicies
	}).(pulumi.MapOutput)
}

// SnapshotRepositories holds the Snapshot Repositories settings (/_snapshot)
func (o StackConfigPolicySpecElasticsearchPtrOutput) SnapshotRepositories() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.SnapshotRepositories
	}).(pulumi.MapOutput)
}

type StackConfigPolicySpecKibana struct {
	// Config holds the settings that go into kibana.yml.
	Config map[string]interface{} `pulumi:"config"`
	// SecureSettings are additional Secrets that contain data to be configured to Kibana's keystore.
	SecureSettings map[string]interface{} `pulumi:"secureSettings"`
}

// StackConfigPolicySpecKibanaInput is an input type that accepts StackConfigPolicySpecKibanaArgs and StackConfigPolicySpecKibanaOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecKibanaInput` via:
//
//	StackConfigPolicySpecKibanaArgs{...}
type StackConfigPolicySpecKibanaInput interface {
	pulumi.Input

	ToStackConfigPolicySpecKibanaOutput() StackConfigPolicySpecKibanaOutput
	ToStackConfigPolicySpecKibanaOutputWithContext(context.Context) StackConfigPolicySpecKibanaOutput
}

type StackConfigPolicySpecKibanaArgs struct {
	// Config holds the settings that go into kibana.yml.
	Config pulumi.MapInput `pulumi:"config"`
	// SecureSettings are additional Secrets that contain data to be configured to Kibana's keystore.
	SecureSettings pulumi.MapInput `pulumi:"secureSettings"`
}

func (StackConfigPolicySpecKibanaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecKibana)(nil)).Elem()
}

func (i StackConfigPolicySpecKibanaArgs) ToStackConfigPolicySpecKibanaOutput() StackConfigPolicySpecKibanaOutput {
	return i.ToStackConfigPolicySpecKibanaOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecKibanaArgs) ToStackConfigPolicySpecKibanaOutputWithContext(ctx context.Context) StackConfigPolicySpecKibanaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecKibanaOutput)
}

func (i StackConfigPolicySpecKibanaArgs) ToStackConfigPolicySpecKibanaPtrOutput() StackConfigPolicySpecKibanaPtrOutput {
	return i.ToStackConfigPolicySpecKibanaPtrOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecKibanaArgs) ToStackConfigPolicySpecKibanaPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecKibanaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecKibanaOutput).ToStackConfigPolicySpecKibanaPtrOutputWithContext(ctx)
}

// StackConfigPolicySpecKibanaPtrInput is an input type that accepts StackConfigPolicySpecKibanaArgs, StackConfigPolicySpecKibanaPtr and StackConfigPolicySpecKibanaPtrOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecKibanaPtrInput` via:
//
//	        StackConfigPolicySpecKibanaArgs{...}
//
//	or:
//
//	        nil
type StackConfigPolicySpecKibanaPtrInput interface {
	pulumi.Input

	ToStackConfigPolicySpecKibanaPtrOutput() StackConfigPolicySpecKibanaPtrOutput
	ToStackConfigPolicySpecKibanaPtrOutputWithContext(context.Context) StackConfigPolicySpecKibanaPtrOutput
}

type stackConfigPolicySpecKibanaPtrType StackConfigPolicySpecKibanaArgs

func StackConfigPolicySpecKibanaPtr(v *StackConfigPolicySpecKibanaArgs) StackConfigPolicySpecKibanaPtrInput {
	return (*stackConfigPolicySpecKibanaPtrType)(v)
}

func (*stackConfigPolicySpecKibanaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicySpecKibana)(nil)).Elem()
}

func (i *stackConfigPolicySpecKibanaPtrType) ToStackConfigPolicySpecKibanaPtrOutput() StackConfigPolicySpecKibanaPtrOutput {
	return i.ToStackConfigPolicySpecKibanaPtrOutputWithContext(context.Background())
}

func (i *stackConfigPolicySpecKibanaPtrType) ToStackConfigPolicySpecKibanaPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecKibanaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecKibanaPtrOutput)
}

type StackConfigPolicySpecKibanaOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecKibanaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecKibana)(nil)).Elem()
}

func (o StackConfigPolicySpecKibanaOutput) ToStackConfigPolicySpecKibanaOutput() StackConfigPolicySpecKibanaOutput {
	return o
}

func (o StackConfigPolicySpecKibanaOutput) ToStackConfigPolicySpecKibanaOutputWithContext(ctx context.Context) StackConfigPolicySpecKibanaOutput {
	return o
}

func (o StackConfigPolicySpecKibanaOutput) ToStackConfigPolicySpecKibanaPtrOutput() StackConfigPolicySpecKibanaPtrOutput {
	return o.ToStackConfigPolicySpecKibanaPtrOutputWithContext(context.Background())
}

func (o StackConfigPolicySpecKibanaOutput) ToStackConfigPolicySpecKibanaPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecKibanaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackConfigPolicySpecKibana) *StackConfigPolicySpecKibana {
		return &v
	}).(StackConfigPolicySpecKibanaPtrOutput)
}

// Config holds the settings that go into kibana.yml.
func (o StackConfigPolicySpecKibanaOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecKibana) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

// SecureSettings are additional Secrets that contain data to be configured to Kibana's keystore.
func (o StackConfigPolicySpecKibanaOutput) SecureSettings() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecKibana) map[string]interface{} { return v.SecureSettings }).(pulumi.MapOutput)
}

type StackConfigPolicySpecKibanaPtrOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecKibanaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicySpecKibana)(nil)).Elem()
}

func (o StackConfigPolicySpecKibanaPtrOutput) ToStackConfigPolicySpecKibanaPtrOutput() StackConfigPolicySpecKibanaPtrOutput {
	return o
}

func (o StackConfigPolicySpecKibanaPtrOutput) ToStackConfigPolicySpecKibanaPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecKibanaPtrOutput {
	return o
}

func (o StackConfigPolicySpecKibanaPtrOutput) Elem() StackConfigPolicySpecKibanaOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecKibana) StackConfigPolicySpecKibana {
		if v != nil {
			return *v
		}
		var ret StackConfigPolicySpecKibana
		return ret
	}).(StackConfigPolicySpecKibanaOutput)
}

// Config holds the settings that go into kibana.yml.
func (o StackConfigPolicySpecKibanaPtrOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecKibana) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.MapOutput)
}

// SecureSettings are additional Secrets that contain data to be configured to Kibana's keystore.
func (o StackConfigPolicySpecKibanaPtrOutput) SecureSettings() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecKibana) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.SecureSettings
	}).(pulumi.MapOutput)
}

// A label selector is a label query over a set of resources. The result of matchLabels and
// matchExpressions are ANDed. An empty label selector matches all objects. A null
// label selector matches no objects.
type StackConfigPolicySpecResourceSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []StackConfigPolicySpecResourceSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// StackConfigPolicySpecResourceSelectorInput is an input type that accepts StackConfigPolicySpecResourceSelectorArgs and StackConfigPolicySpecResourceSelectorOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecResourceSelectorInput` via:
//
//	StackConfigPolicySpecResourceSelectorArgs{...}
type StackConfigPolicySpecResourceSelectorInput interface {
	pulumi.Input

	ToStackConfigPolicySpecResourceSelectorOutput() StackConfigPolicySpecResourceSelectorOutput
	ToStackConfigPolicySpecResourceSelectorOutputWithContext(context.Context) StackConfigPolicySpecResourceSelectorOutput
}

// A label selector is a label query over a set of resources. The result of matchLabels and
// matchExpressions are ANDed. An empty label selector matches all objects. A null
// label selector matches no objects.
type StackConfigPolicySpecResourceSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions StackConfigPolicySpecResourceSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (StackConfigPolicySpecResourceSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecResourceSelector)(nil)).Elem()
}

func (i StackConfigPolicySpecResourceSelectorArgs) ToStackConfigPolicySpecResourceSelectorOutput() StackConfigPolicySpecResourceSelectorOutput {
	return i.ToStackConfigPolicySpecResourceSelectorOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecResourceSelectorArgs) ToStackConfigPolicySpecResourceSelectorOutputWithContext(ctx context.Context) StackConfigPolicySpecResourceSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecResourceSelectorOutput)
}

func (i StackConfigPolicySpecResourceSelectorArgs) ToStackConfigPolicySpecResourceSelectorPtrOutput() StackConfigPolicySpecResourceSelectorPtrOutput {
	return i.ToStackConfigPolicySpecResourceSelectorPtrOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecResourceSelectorArgs) ToStackConfigPolicySpecResourceSelectorPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecResourceSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecResourceSelectorOutput).ToStackConfigPolicySpecResourceSelectorPtrOutputWithContext(ctx)
}

// StackConfigPolicySpecResourceSelectorPtrInput is an input type that accepts StackConfigPolicySpecResourceSelectorArgs, StackConfigPolicySpecResourceSelectorPtr and StackConfigPolicySpecResourceSelectorPtrOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecResourceSelectorPtrInput` via:
//
//	        StackConfigPolicySpecResourceSelectorArgs{...}
//
//	or:
//
//	        nil
type StackConfigPolicySpecResourceSelectorPtrInput interface {
	pulumi.Input

	ToStackConfigPolicySpecResourceSelectorPtrOutput() StackConfigPolicySpecResourceSelectorPtrOutput
	ToStackConfigPolicySpecResourceSelectorPtrOutputWithContext(context.Context) StackConfigPolicySpecResourceSelectorPtrOutput
}

type stackConfigPolicySpecResourceSelectorPtrType StackConfigPolicySpecResourceSelectorArgs

func StackConfigPolicySpecResourceSelectorPtr(v *StackConfigPolicySpecResourceSelectorArgs) StackConfigPolicySpecResourceSelectorPtrInput {
	return (*stackConfigPolicySpecResourceSelectorPtrType)(v)
}

func (*stackConfigPolicySpecResourceSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicySpecResourceSelector)(nil)).Elem()
}

func (i *stackConfigPolicySpecResourceSelectorPtrType) ToStackConfigPolicySpecResourceSelectorPtrOutput() StackConfigPolicySpecResourceSelectorPtrOutput {
	return i.ToStackConfigPolicySpecResourceSelectorPtrOutputWithContext(context.Background())
}

func (i *stackConfigPolicySpecResourceSelectorPtrType) ToStackConfigPolicySpecResourceSelectorPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecResourceSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecResourceSelectorPtrOutput)
}

// A label selector is a label query over a set of resources. The result of matchLabels and
// matchExpressions are ANDed. An empty label selector matches all objects. A null
// label selector matches no objects.
type StackConfigPolicySpecResourceSelectorOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecResourceSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecResourceSelector)(nil)).Elem()
}

func (o StackConfigPolicySpecResourceSelectorOutput) ToStackConfigPolicySpecResourceSelectorOutput() StackConfigPolicySpecResourceSelectorOutput {
	return o
}

func (o StackConfigPolicySpecResourceSelectorOutput) ToStackConfigPolicySpecResourceSelectorOutputWithContext(ctx context.Context) StackConfigPolicySpecResourceSelectorOutput {
	return o
}

func (o StackConfigPolicySpecResourceSelectorOutput) ToStackConfigPolicySpecResourceSelectorPtrOutput() StackConfigPolicySpecResourceSelectorPtrOutput {
	return o.ToStackConfigPolicySpecResourceSelectorPtrOutputWithContext(context.Background())
}

func (o StackConfigPolicySpecResourceSelectorOutput) ToStackConfigPolicySpecResourceSelectorPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecResourceSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackConfigPolicySpecResourceSelector) *StackConfigPolicySpecResourceSelector {
		return &v
	}).(StackConfigPolicySpecResourceSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o StackConfigPolicySpecResourceSelectorOutput) MatchExpressions() StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v StackConfigPolicySpecResourceSelector) []StackConfigPolicySpecResourceSelectorMatchExpressions {
		return v.MatchExpressions
	}).(StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o StackConfigPolicySpecResourceSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecResourceSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type StackConfigPolicySpecResourceSelectorPtrOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecResourceSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicySpecResourceSelector)(nil)).Elem()
}

func (o StackConfigPolicySpecResourceSelectorPtrOutput) ToStackConfigPolicySpecResourceSelectorPtrOutput() StackConfigPolicySpecResourceSelectorPtrOutput {
	return o
}

func (o StackConfigPolicySpecResourceSelectorPtrOutput) ToStackConfigPolicySpecResourceSelectorPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecResourceSelectorPtrOutput {
	return o
}

func (o StackConfigPolicySpecResourceSelectorPtrOutput) Elem() StackConfigPolicySpecResourceSelectorOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecResourceSelector) StackConfigPolicySpecResourceSelector {
		if v != nil {
			return *v
		}
		var ret StackConfigPolicySpecResourceSelector
		return ret
	}).(StackConfigPolicySpecResourceSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o StackConfigPolicySpecResourceSelectorPtrOutput) MatchExpressions() StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecResourceSelector) []StackConfigPolicySpecResourceSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o StackConfigPolicySpecResourceSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecResourceSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type StackConfigPolicySpecResourceSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values []string `pulumi:"values"`
}

// StackConfigPolicySpecResourceSelectorMatchExpressionsInput is an input type that accepts StackConfigPolicySpecResourceSelectorMatchExpressionsArgs and StackConfigPolicySpecResourceSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecResourceSelectorMatchExpressionsInput` via:
//
//	StackConfigPolicySpecResourceSelectorMatchExpressionsArgs{...}
type StackConfigPolicySpecResourceSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToStackConfigPolicySpecResourceSelectorMatchExpressionsOutput() StackConfigPolicySpecResourceSelectorMatchExpressionsOutput
	ToStackConfigPolicySpecResourceSelectorMatchExpressionsOutputWithContext(context.Context) StackConfigPolicySpecResourceSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type StackConfigPolicySpecResourceSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (StackConfigPolicySpecResourceSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecResourceSelectorMatchExpressions)(nil)).Elem()
}

func (i StackConfigPolicySpecResourceSelectorMatchExpressionsArgs) ToStackConfigPolicySpecResourceSelectorMatchExpressionsOutput() StackConfigPolicySpecResourceSelectorMatchExpressionsOutput {
	return i.ToStackConfigPolicySpecResourceSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecResourceSelectorMatchExpressionsArgs) ToStackConfigPolicySpecResourceSelectorMatchExpressionsOutputWithContext(ctx context.Context) StackConfigPolicySpecResourceSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecResourceSelectorMatchExpressionsOutput)
}

// StackConfigPolicySpecResourceSelectorMatchExpressionsArrayInput is an input type that accepts StackConfigPolicySpecResourceSelectorMatchExpressionsArray and StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecResourceSelectorMatchExpressionsArrayInput` via:
//
//	StackConfigPolicySpecResourceSelectorMatchExpressionsArray{ StackConfigPolicySpecResourceSelectorMatchExpressionsArgs{...} }
type StackConfigPolicySpecResourceSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToStackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput() StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput
	ToStackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutputWithContext(context.Context) StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput
}

type StackConfigPolicySpecResourceSelectorMatchExpressionsArray []StackConfigPolicySpecResourceSelectorMatchExpressionsInput

func (StackConfigPolicySpecResourceSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackConfigPolicySpecResourceSelectorMatchExpressions)(nil)).Elem()
}

func (i StackConfigPolicySpecResourceSelectorMatchExpressionsArray) ToStackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput() StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput {
	return i.ToStackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecResourceSelectorMatchExpressionsArray) ToStackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type StackConfigPolicySpecResourceSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecResourceSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecResourceSelectorMatchExpressions)(nil)).Elem()
}

func (o StackConfigPolicySpecResourceSelectorMatchExpressionsOutput) ToStackConfigPolicySpecResourceSelectorMatchExpressionsOutput() StackConfigPolicySpecResourceSelectorMatchExpressionsOutput {
	return o
}

func (o StackConfigPolicySpecResourceSelectorMatchExpressionsOutput) ToStackConfigPolicySpecResourceSelectorMatchExpressionsOutputWithContext(ctx context.Context) StackConfigPolicySpecResourceSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o StackConfigPolicySpecResourceSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v StackConfigPolicySpecResourceSelectorMatchExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values.
// Valid operators are In, NotIn, Exists and DoesNotExist.
func (o StackConfigPolicySpecResourceSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v StackConfigPolicySpecResourceSelectorMatchExpressions) string { return v.Operator }).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn,
// the values array must be non-empty. If the operator is Exists or DoesNotExist,
// the values array must be empty. This array is replaced during a strategic
// merge patch.
func (o StackConfigPolicySpecResourceSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StackConfigPolicySpecResourceSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackConfigPolicySpecResourceSelectorMatchExpressions)(nil)).Elem()
}

func (o StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput) ToStackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput() StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput {
	return o
}

func (o StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput) ToStackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput {
	return o
}

func (o StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) StackConfigPolicySpecResourceSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StackConfigPolicySpecResourceSelectorMatchExpressions {
		return vs[0].([]StackConfigPolicySpecResourceSelectorMatchExpressions)[vs[1].(int)]
	}).(StackConfigPolicySpecResourceSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
type StackConfigPolicySpecResourceSelectorMatchLabels struct {
}

// SecretSource defines a data source based on a Kubernetes Secret.
type StackConfigPolicySpecSecureSettings struct {
	// Entries define how to project each key-value pair in the secret to filesystem paths.
	// If not defined, all keys will be projected to similarly named paths in the filesystem.
	// If defined, only the specified keys will be projected to the corresponding paths.
	Entries []StackConfigPolicySpecSecureSettingsEntries `pulumi:"entries"`
	// SecretName is the name of the secret.
	SecretName string `pulumi:"secretName"`
}

// StackConfigPolicySpecSecureSettingsInput is an input type that accepts StackConfigPolicySpecSecureSettingsArgs and StackConfigPolicySpecSecureSettingsOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecSecureSettingsInput` via:
//
//	StackConfigPolicySpecSecureSettingsArgs{...}
type StackConfigPolicySpecSecureSettingsInput interface {
	pulumi.Input

	ToStackConfigPolicySpecSecureSettingsOutput() StackConfigPolicySpecSecureSettingsOutput
	ToStackConfigPolicySpecSecureSettingsOutputWithContext(context.Context) StackConfigPolicySpecSecureSettingsOutput
}

// SecretSource defines a data source based on a Kubernetes Secret.
type StackConfigPolicySpecSecureSettingsArgs struct {
	// Entries define how to project each key-value pair in the secret to filesystem paths.
	// If not defined, all keys will be projected to similarly named paths in the filesystem.
	// If defined, only the specified keys will be projected to the corresponding paths.
	Entries StackConfigPolicySpecSecureSettingsEntriesArrayInput `pulumi:"entries"`
	// SecretName is the name of the secret.
	SecretName pulumi.StringInput `pulumi:"secretName"`
}

func (StackConfigPolicySpecSecureSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecSecureSettings)(nil)).Elem()
}

func (i StackConfigPolicySpecSecureSettingsArgs) ToStackConfigPolicySpecSecureSettingsOutput() StackConfigPolicySpecSecureSettingsOutput {
	return i.ToStackConfigPolicySpecSecureSettingsOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecSecureSettingsArgs) ToStackConfigPolicySpecSecureSettingsOutputWithContext(ctx context.Context) StackConfigPolicySpecSecureSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecSecureSettingsOutput)
}

// StackConfigPolicySpecSecureSettingsArrayInput is an input type that accepts StackConfigPolicySpecSecureSettingsArray and StackConfigPolicySpecSecureSettingsArrayOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecSecureSettingsArrayInput` via:
//
//	StackConfigPolicySpecSecureSettingsArray{ StackConfigPolicySpecSecureSettingsArgs{...} }
type StackConfigPolicySpecSecureSettingsArrayInput interface {
	pulumi.Input

	ToStackConfigPolicySpecSecureSettingsArrayOutput() StackConfigPolicySpecSecureSettingsArrayOutput
	ToStackConfigPolicySpecSecureSettingsArrayOutputWithContext(context.Context) StackConfigPolicySpecSecureSettingsArrayOutput
}

type StackConfigPolicySpecSecureSettingsArray []StackConfigPolicySpecSecureSettingsInput

func (StackConfigPolicySpecSecureSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackConfigPolicySpecSecureSettings)(nil)).Elem()
}

func (i StackConfigPolicySpecSecureSettingsArray) ToStackConfigPolicySpecSecureSettingsArrayOutput() StackConfigPolicySpecSecureSettingsArrayOutput {
	return i.ToStackConfigPolicySpecSecureSettingsArrayOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecSecureSettingsArray) ToStackConfigPolicySpecSecureSettingsArrayOutputWithContext(ctx context.Context) StackConfigPolicySpecSecureSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecSecureSettingsArrayOutput)
}

// SecretSource defines a data source based on a Kubernetes Secret.
type StackConfigPolicySpecSecureSettingsOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecSecureSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecSecureSettings)(nil)).Elem()
}

func (o StackConfigPolicySpecSecureSettingsOutput) ToStackConfigPolicySpecSecureSettingsOutput() StackConfigPolicySpecSecureSettingsOutput {
	return o
}

func (o StackConfigPolicySpecSecureSettingsOutput) ToStackConfigPolicySpecSecureSettingsOutputWithContext(ctx context.Context) StackConfigPolicySpecSecureSettingsOutput {
	return o
}

// Entries define how to project each key-value pair in the secret to filesystem paths.
// If not defined, all keys will be projected to similarly named paths in the filesystem.
// If defined, only the specified keys will be projected to the corresponding paths.
func (o StackConfigPolicySpecSecureSettingsOutput) Entries() StackConfigPolicySpecSecureSettingsEntriesArrayOutput {
	return o.ApplyT(func(v StackConfigPolicySpecSecureSettings) []StackConfigPolicySpecSecureSettingsEntries {
		return v.Entries
	}).(StackConfigPolicySpecSecureSettingsEntriesArrayOutput)
}

// SecretName is the name of the secret.
func (o StackConfigPolicySpecSecureSettingsOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v StackConfigPolicySpecSecureSettings) string { return v.SecretName }).(pulumi.StringOutput)
}

type StackConfigPolicySpecSecureSettingsArrayOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecSecureSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackConfigPolicySpecSecureSettings)(nil)).Elem()
}

func (o StackConfigPolicySpecSecureSettingsArrayOutput) ToStackConfigPolicySpecSecureSettingsArrayOutput() StackConfigPolicySpecSecureSettingsArrayOutput {
	return o
}

func (o StackConfigPolicySpecSecureSettingsArrayOutput) ToStackConfigPolicySpecSecureSettingsArrayOutputWithContext(ctx context.Context) StackConfigPolicySpecSecureSettingsArrayOutput {
	return o
}

func (o StackConfigPolicySpecSecureSettingsArrayOutput) Index(i pulumi.IntInput) StackConfigPolicySpecSecureSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StackConfigPolicySpecSecureSettings {
		return vs[0].([]StackConfigPolicySpecSecureSettings)[vs[1].(int)]
	}).(StackConfigPolicySpecSecureSettingsOutput)
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type StackConfigPolicySpecSecureSettingsEntries struct {
	// Key is the key contained in the secret.
	Key string `pulumi:"key"`
	// Path is the relative file path to map the key to.
	// Path must not be an absolute file path and must not contain any ".." components.
	Path *string `pulumi:"path"`
}

// StackConfigPolicySpecSecureSettingsEntriesInput is an input type that accepts StackConfigPolicySpecSecureSettingsEntriesArgs and StackConfigPolicySpecSecureSettingsEntriesOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecSecureSettingsEntriesInput` via:
//
//	StackConfigPolicySpecSecureSettingsEntriesArgs{...}
type StackConfigPolicySpecSecureSettingsEntriesInput interface {
	pulumi.Input

	ToStackConfigPolicySpecSecureSettingsEntriesOutput() StackConfigPolicySpecSecureSettingsEntriesOutput
	ToStackConfigPolicySpecSecureSettingsEntriesOutputWithContext(context.Context) StackConfigPolicySpecSecureSettingsEntriesOutput
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type StackConfigPolicySpecSecureSettingsEntriesArgs struct {
	// Key is the key contained in the secret.
	Key pulumi.StringInput `pulumi:"key"`
	// Path is the relative file path to map the key to.
	// Path must not be an absolute file path and must not contain any ".." components.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (StackConfigPolicySpecSecureSettingsEntriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecSecureSettingsEntries)(nil)).Elem()
}

func (i StackConfigPolicySpecSecureSettingsEntriesArgs) ToStackConfigPolicySpecSecureSettingsEntriesOutput() StackConfigPolicySpecSecureSettingsEntriesOutput {
	return i.ToStackConfigPolicySpecSecureSettingsEntriesOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecSecureSettingsEntriesArgs) ToStackConfigPolicySpecSecureSettingsEntriesOutputWithContext(ctx context.Context) StackConfigPolicySpecSecureSettingsEntriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecSecureSettingsEntriesOutput)
}

// StackConfigPolicySpecSecureSettingsEntriesArrayInput is an input type that accepts StackConfigPolicySpecSecureSettingsEntriesArray and StackConfigPolicySpecSecureSettingsEntriesArrayOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecSecureSettingsEntriesArrayInput` via:
//
//	StackConfigPolicySpecSecureSettingsEntriesArray{ StackConfigPolicySpecSecureSettingsEntriesArgs{...} }
type StackConfigPolicySpecSecureSettingsEntriesArrayInput interface {
	pulumi.Input

	ToStackConfigPolicySpecSecureSettingsEntriesArrayOutput() StackConfigPolicySpecSecureSettingsEntriesArrayOutput
	ToStackConfigPolicySpecSecureSettingsEntriesArrayOutputWithContext(context.Context) StackConfigPolicySpecSecureSettingsEntriesArrayOutput
}

type StackConfigPolicySpecSecureSettingsEntriesArray []StackConfigPolicySpecSecureSettingsEntriesInput

func (StackConfigPolicySpecSecureSettingsEntriesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackConfigPolicySpecSecureSettingsEntries)(nil)).Elem()
}

func (i StackConfigPolicySpecSecureSettingsEntriesArray) ToStackConfigPolicySpecSecureSettingsEntriesArrayOutput() StackConfigPolicySpecSecureSettingsEntriesArrayOutput {
	return i.ToStackConfigPolicySpecSecureSettingsEntriesArrayOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecSecureSettingsEntriesArray) ToStackConfigPolicySpecSecureSettingsEntriesArrayOutputWithContext(ctx context.Context) StackConfigPolicySpecSecureSettingsEntriesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecSecureSettingsEntriesArrayOutput)
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type StackConfigPolicySpecSecureSettingsEntriesOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecSecureSettingsEntriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecSecureSettingsEntries)(nil)).Elem()
}

func (o StackConfigPolicySpecSecureSettingsEntriesOutput) ToStackConfigPolicySpecSecureSettingsEntriesOutput() StackConfigPolicySpecSecureSettingsEntriesOutput {
	return o
}

func (o StackConfigPolicySpecSecureSettingsEntriesOutput) ToStackConfigPolicySpecSecureSettingsEntriesOutputWithContext(ctx context.Context) StackConfigPolicySpecSecureSettingsEntriesOutput {
	return o
}

// Key is the key contained in the secret.
func (o StackConfigPolicySpecSecureSettingsEntriesOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v StackConfigPolicySpecSecureSettingsEntries) string { return v.Key }).(pulumi.StringOutput)
}

// Path is the relative file path to map the key to.
// Path must not be an absolute file path and must not contain any ".." components.
func (o StackConfigPolicySpecSecureSettingsEntriesOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackConfigPolicySpecSecureSettingsEntries) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type StackConfigPolicySpecSecureSettingsEntriesArrayOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecSecureSettingsEntriesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackConfigPolicySpecSecureSettingsEntries)(nil)).Elem()
}

func (o StackConfigPolicySpecSecureSettingsEntriesArrayOutput) ToStackConfigPolicySpecSecureSettingsEntriesArrayOutput() StackConfigPolicySpecSecureSettingsEntriesArrayOutput {
	return o
}

func (o StackConfigPolicySpecSecureSettingsEntriesArrayOutput) ToStackConfigPolicySpecSecureSettingsEntriesArrayOutputWithContext(ctx context.Context) StackConfigPolicySpecSecureSettingsEntriesArrayOutput {
	return o
}

func (o StackConfigPolicySpecSecureSettingsEntriesArrayOutput) Index(i pulumi.IntInput) StackConfigPolicySpecSecureSettingsEntriesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StackConfigPolicySpecSecureSettingsEntries {
		return vs[0].([]StackConfigPolicySpecSecureSettingsEntries)[vs[1].(int)]
	}).(StackConfigPolicySpecSecureSettingsEntriesOutput)
}

type StackConfigPolicyStatus struct {
	// Details holds the status details for each resource to be configured.
	Details map[string]map[string]StackConfigPolicyStatusDetails `pulumi:"details"`
	// Errors is the number of resources which have an incorrect configuration
	Errors *int `pulumi:"errors"`
	// ObservedGeneration is the most recent generation observed for this StackConfigPolicy.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// Phase is the phase of the StackConfigPolicy.
	Phase *string `pulumi:"phase"`
	// Ready is the number of resources successfully configured.
	Ready *int `pulumi:"ready"`
	// ReadyCount is a human representation of the number of resources successfully configured.
	ReadyCount *string `pulumi:"readyCount"`
	// Resources is the number of resources to be configured.
	Resources *int `pulumi:"resources"`
	// ResourcesStatuses holds the status for each resource to be configured.
	// Deprecated: Details is used to store the status of resources from ECK 2.11
	ResourcesStatuses map[string]StackConfigPolicyStatusResourcesStatuses `pulumi:"resourcesStatuses"`
}

// StackConfigPolicyStatusInput is an input type that accepts StackConfigPolicyStatusArgs and StackConfigPolicyStatusOutput values.
// You can construct a concrete instance of `StackConfigPolicyStatusInput` via:
//
//	StackConfigPolicyStatusArgs{...}
type StackConfigPolicyStatusInput interface {
	pulumi.Input

	ToStackConfigPolicyStatusOutput() StackConfigPolicyStatusOutput
	ToStackConfigPolicyStatusOutputWithContext(context.Context) StackConfigPolicyStatusOutput
}

type StackConfigPolicyStatusArgs struct {
	// Details holds the status details for each resource to be configured.
	Details StackConfigPolicyStatusDetailsMapMapInput `pulumi:"details"`
	// Errors is the number of resources which have an incorrect configuration
	Errors pulumi.IntPtrInput `pulumi:"errors"`
	// ObservedGeneration is the most recent generation observed for this StackConfigPolicy.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// Phase is the phase of the StackConfigPolicy.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// Ready is the number of resources successfully configured.
	Ready pulumi.IntPtrInput `pulumi:"ready"`
	// ReadyCount is a human representation of the number of resources successfully configured.
	ReadyCount pulumi.StringPtrInput `pulumi:"readyCount"`
	// Resources is the number of resources to be configured.
	Resources pulumi.IntPtrInput `pulumi:"resources"`
	// ResourcesStatuses holds the status for each resource to be configured.
	// Deprecated: Details is used to store the status of resources from ECK 2.11
	ResourcesStatuses StackConfigPolicyStatusResourcesStatusesMapInput `pulumi:"resourcesStatuses"`
}

func (StackConfigPolicyStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicyStatus)(nil)).Elem()
}

func (i StackConfigPolicyStatusArgs) ToStackConfigPolicyStatusOutput() StackConfigPolicyStatusOutput {
	return i.ToStackConfigPolicyStatusOutputWithContext(context.Background())
}

func (i StackConfigPolicyStatusArgs) ToStackConfigPolicyStatusOutputWithContext(ctx context.Context) StackConfigPolicyStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyStatusOutput)
}

func (i StackConfigPolicyStatusArgs) ToStackConfigPolicyStatusPtrOutput() StackConfigPolicyStatusPtrOutput {
	return i.ToStackConfigPolicyStatusPtrOutputWithContext(context.Background())
}

func (i StackConfigPolicyStatusArgs) ToStackConfigPolicyStatusPtrOutputWithContext(ctx context.Context) StackConfigPolicyStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyStatusOutput).ToStackConfigPolicyStatusPtrOutputWithContext(ctx)
}

// StackConfigPolicyStatusPtrInput is an input type that accepts StackConfigPolicyStatusArgs, StackConfigPolicyStatusPtr and StackConfigPolicyStatusPtrOutput values.
// You can construct a concrete instance of `StackConfigPolicyStatusPtrInput` via:
//
//	        StackConfigPolicyStatusArgs{...}
//
//	or:
//
//	        nil
type StackConfigPolicyStatusPtrInput interface {
	pulumi.Input

	ToStackConfigPolicyStatusPtrOutput() StackConfigPolicyStatusPtrOutput
	ToStackConfigPolicyStatusPtrOutputWithContext(context.Context) StackConfigPolicyStatusPtrOutput
}

type stackConfigPolicyStatusPtrType StackConfigPolicyStatusArgs

func StackConfigPolicyStatusPtr(v *StackConfigPolicyStatusArgs) StackConfigPolicyStatusPtrInput {
	return (*stackConfigPolicyStatusPtrType)(v)
}

func (*stackConfigPolicyStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicyStatus)(nil)).Elem()
}

func (i *stackConfigPolicyStatusPtrType) ToStackConfigPolicyStatusPtrOutput() StackConfigPolicyStatusPtrOutput {
	return i.ToStackConfigPolicyStatusPtrOutputWithContext(context.Background())
}

func (i *stackConfigPolicyStatusPtrType) ToStackConfigPolicyStatusPtrOutputWithContext(ctx context.Context) StackConfigPolicyStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyStatusPtrOutput)
}

type StackConfigPolicyStatusOutput struct{ *pulumi.OutputState }

func (StackConfigPolicyStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicyStatus)(nil)).Elem()
}

func (o StackConfigPolicyStatusOutput) ToStackConfigPolicyStatusOutput() StackConfigPolicyStatusOutput {
	return o
}

func (o StackConfigPolicyStatusOutput) ToStackConfigPolicyStatusOutputWithContext(ctx context.Context) StackConfigPolicyStatusOutput {
	return o
}

func (o StackConfigPolicyStatusOutput) ToStackConfigPolicyStatusPtrOutput() StackConfigPolicyStatusPtrOutput {
	return o.ToStackConfigPolicyStatusPtrOutputWithContext(context.Background())
}

func (o StackConfigPolicyStatusOutput) ToStackConfigPolicyStatusPtrOutputWithContext(ctx context.Context) StackConfigPolicyStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackConfigPolicyStatus) *StackConfigPolicyStatus {
		return &v
	}).(StackConfigPolicyStatusPtrOutput)
}

// Details holds the status details for each resource to be configured.
func (o StackConfigPolicyStatusOutput) Details() StackConfigPolicyStatusDetailsMapMapOutput {
	return o.ApplyT(func(v StackConfigPolicyStatus) map[string]map[string]StackConfigPolicyStatusDetails { return v.Details }).(StackConfigPolicyStatusDetailsMapMapOutput)
}

// Errors is the number of resources which have an incorrect configuration
func (o StackConfigPolicyStatusOutput) Errors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyStatus) *int { return v.Errors }).(pulumi.IntPtrOutput)
}

// ObservedGeneration is the most recent generation observed for this StackConfigPolicy.
func (o StackConfigPolicyStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// Phase is the phase of the StackConfigPolicy.
func (o StackConfigPolicyStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// Ready is the number of resources successfully configured.
func (o StackConfigPolicyStatusOutput) Ready() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyStatus) *int { return v.Ready }).(pulumi.IntPtrOutput)
}

// ReadyCount is a human representation of the number of resources successfully configured.
func (o StackConfigPolicyStatusOutput) ReadyCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyStatus) *string { return v.ReadyCount }).(pulumi.StringPtrOutput)
}

// Resources is the number of resources to be configured.
func (o StackConfigPolicyStatusOutput) Resources() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyStatus) *int { return v.Resources }).(pulumi.IntPtrOutput)
}

// ResourcesStatuses holds the status for each resource to be configured.
// Deprecated: Details is used to store the status of resources from ECK 2.11
func (o StackConfigPolicyStatusOutput) ResourcesStatuses() StackConfigPolicyStatusResourcesStatusesMapOutput {
	return o.ApplyT(func(v StackConfigPolicyStatus) map[string]StackConfigPolicyStatusResourcesStatuses {
		return v.ResourcesStatuses
	}).(StackConfigPolicyStatusResourcesStatusesMapOutput)
}

type StackConfigPolicyStatusPtrOutput struct{ *pulumi.OutputState }

func (StackConfigPolicyStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicyStatus)(nil)).Elem()
}

func (o StackConfigPolicyStatusPtrOutput) ToStackConfigPolicyStatusPtrOutput() StackConfigPolicyStatusPtrOutput {
	return o
}

func (o StackConfigPolicyStatusPtrOutput) ToStackConfigPolicyStatusPtrOutputWithContext(ctx context.Context) StackConfigPolicyStatusPtrOutput {
	return o
}

func (o StackConfigPolicyStatusPtrOutput) Elem() StackConfigPolicyStatusOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatus) StackConfigPolicyStatus {
		if v != nil {
			return *v
		}
		var ret StackConfigPolicyStatus
		return ret
	}).(StackConfigPolicyStatusOutput)
}

// Details holds the status details for each resource to be configured.
func (o StackConfigPolicyStatusPtrOutput) Details() StackConfigPolicyStatusDetailsMapMapOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatus) map[string]map[string]StackConfigPolicyStatusDetails {
		if v == nil {
			return nil
		}
		return v.Details
	}).(StackConfigPolicyStatusDetailsMapMapOutput)
}

// Errors is the number of resources which have an incorrect configuration
func (o StackConfigPolicyStatusPtrOutput) Errors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatus) *int {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(pulumi.IntPtrOutput)
}

// ObservedGeneration is the most recent generation observed for this StackConfigPolicy.
func (o StackConfigPolicyStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// Phase is the phase of the StackConfigPolicy.
func (o StackConfigPolicyStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// Ready is the number of resources successfully configured.
func (o StackConfigPolicyStatusPtrOutput) Ready() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatus) *int {
		if v == nil {
			return nil
		}
		return v.Ready
	}).(pulumi.IntPtrOutput)
}

// ReadyCount is a human representation of the number of resources successfully configured.
func (o StackConfigPolicyStatusPtrOutput) ReadyCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatus) *string {
		if v == nil {
			return nil
		}
		return v.ReadyCount
	}).(pulumi.StringPtrOutput)
}

// Resources is the number of resources to be configured.
func (o StackConfigPolicyStatusPtrOutput) Resources() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatus) *int {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(pulumi.IntPtrOutput)
}

// ResourcesStatuses holds the status for each resource to be configured.
// Deprecated: Details is used to store the status of resources from ECK 2.11
func (o StackConfigPolicyStatusPtrOutput) ResourcesStatuses() StackConfigPolicyStatusResourcesStatusesMapOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatus) map[string]StackConfigPolicyStatusResourcesStatuses {
		if v == nil {
			return nil
		}
		return v.ResourcesStatuses
	}).(StackConfigPolicyStatusResourcesStatusesMapOutput)
}

// ResourcePolicyStatus models the status of the policy for one resource to be configured.
type StackConfigPolicyStatusDetails struct {
	// CurrentVersion denotes the current version of filesettings applied to the Elasticsearch cluster
	// This field does not apply to Kibana resources
	CurrentVersion *int                                 `pulumi:"currentVersion"`
	Error          *StackConfigPolicyStatusDetailsError `pulumi:"error"`
	// ExpectedVersion denotes the expected version of filesettings that should be applied to the Elasticsearch cluster
	// This field does not apply to Kibana resources
	ExpectedVersion *int    `pulumi:"expectedVersion"`
	Phase           *string `pulumi:"phase"`
}

// StackConfigPolicyStatusDetailsInput is an input type that accepts StackConfigPolicyStatusDetailsArgs and StackConfigPolicyStatusDetailsOutput values.
// You can construct a concrete instance of `StackConfigPolicyStatusDetailsInput` via:
//
//	StackConfigPolicyStatusDetailsArgs{...}
type StackConfigPolicyStatusDetailsInput interface {
	pulumi.Input

	ToStackConfigPolicyStatusDetailsOutput() StackConfigPolicyStatusDetailsOutput
	ToStackConfigPolicyStatusDetailsOutputWithContext(context.Context) StackConfigPolicyStatusDetailsOutput
}

// ResourcePolicyStatus models the status of the policy for one resource to be configured.
type StackConfigPolicyStatusDetailsArgs struct {
	// CurrentVersion denotes the current version of filesettings applied to the Elasticsearch cluster
	// This field does not apply to Kibana resources
	CurrentVersion pulumi.IntPtrInput                          `pulumi:"currentVersion"`
	Error          StackConfigPolicyStatusDetailsErrorPtrInput `pulumi:"error"`
	// ExpectedVersion denotes the expected version of filesettings that should be applied to the Elasticsearch cluster
	// This field does not apply to Kibana resources
	ExpectedVersion pulumi.IntPtrInput    `pulumi:"expectedVersion"`
	Phase           pulumi.StringPtrInput `pulumi:"phase"`
}

func (StackConfigPolicyStatusDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicyStatusDetails)(nil)).Elem()
}

func (i StackConfigPolicyStatusDetailsArgs) ToStackConfigPolicyStatusDetailsOutput() StackConfigPolicyStatusDetailsOutput {
	return i.ToStackConfigPolicyStatusDetailsOutputWithContext(context.Background())
}

func (i StackConfigPolicyStatusDetailsArgs) ToStackConfigPolicyStatusDetailsOutputWithContext(ctx context.Context) StackConfigPolicyStatusDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyStatusDetailsOutput)
}

// StackConfigPolicyStatusDetailsMapInput is an input type that accepts StackConfigPolicyStatusDetailsMap and StackConfigPolicyStatusDetailsMapOutput values.
// You can construct a concrete instance of `StackConfigPolicyStatusDetailsMapInput` via:
//
//	StackConfigPolicyStatusDetailsMap{ "key": StackConfigPolicyStatusDetailsArgs{...} }
type StackConfigPolicyStatusDetailsMapInput interface {
	pulumi.Input

	ToStackConfigPolicyStatusDetailsMapOutput() StackConfigPolicyStatusDetailsMapOutput
	ToStackConfigPolicyStatusDetailsMapOutputWithContext(context.Context) StackConfigPolicyStatusDetailsMapOutput
}

type StackConfigPolicyStatusDetailsMap map[string]StackConfigPolicyStatusDetailsInput

func (StackConfigPolicyStatusDetailsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]StackConfigPolicyStatusDetails)(nil)).Elem()
}

func (i StackConfigPolicyStatusDetailsMap) ToStackConfigPolicyStatusDetailsMapOutput() StackConfigPolicyStatusDetailsMapOutput {
	return i.ToStackConfigPolicyStatusDetailsMapOutputWithContext(context.Background())
}

func (i StackConfigPolicyStatusDetailsMap) ToStackConfigPolicyStatusDetailsMapOutputWithContext(ctx context.Context) StackConfigPolicyStatusDetailsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyStatusDetailsMapOutput)
}

// ResourcePolicyStatus models the status of the policy for one resource to be configured.
type StackConfigPolicyStatusDetailsOutput struct{ *pulumi.OutputState }

func (StackConfigPolicyStatusDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicyStatusDetails)(nil)).Elem()
}

func (o StackConfigPolicyStatusDetailsOutput) ToStackConfigPolicyStatusDetailsOutput() StackConfigPolicyStatusDetailsOutput {
	return o
}

func (o StackConfigPolicyStatusDetailsOutput) ToStackConfigPolicyStatusDetailsOutputWithContext(ctx context.Context) StackConfigPolicyStatusDetailsOutput {
	return o
}

// CurrentVersion denotes the current version of filesettings applied to the Elasticsearch cluster
// This field does not apply to Kibana resources
func (o StackConfigPolicyStatusDetailsOutput) CurrentVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyStatusDetails) *int { return v.CurrentVersion }).(pulumi.IntPtrOutput)
}

func (o StackConfigPolicyStatusDetailsOutput) Error() StackConfigPolicyStatusDetailsErrorPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyStatusDetails) *StackConfigPolicyStatusDetailsError { return v.Error }).(StackConfigPolicyStatusDetailsErrorPtrOutput)
}

// ExpectedVersion denotes the expected version of filesettings that should be applied to the Elasticsearch cluster
// This field does not apply to Kibana resources
func (o StackConfigPolicyStatusDetailsOutput) ExpectedVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyStatusDetails) *int { return v.ExpectedVersion }).(pulumi.IntPtrOutput)
}

func (o StackConfigPolicyStatusDetailsOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyStatusDetails) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

type StackConfigPolicyStatusDetailsMapOutput struct{ *pulumi.OutputState }

func (StackConfigPolicyStatusDetailsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]StackConfigPolicyStatusDetails)(nil)).Elem()
}

func (o StackConfigPolicyStatusDetailsMapOutput) ToStackConfigPolicyStatusDetailsMapOutput() StackConfigPolicyStatusDetailsMapOutput {
	return o
}

func (o StackConfigPolicyStatusDetailsMapOutput) ToStackConfigPolicyStatusDetailsMapOutputWithContext(ctx context.Context) StackConfigPolicyStatusDetailsMapOutput {
	return o
}

func (o StackConfigPolicyStatusDetailsMapOutput) MapIndex(k pulumi.StringInput) StackConfigPolicyStatusDetailsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) StackConfigPolicyStatusDetails {
		return vs[0].(map[string]StackConfigPolicyStatusDetails)[vs[1].(string)]
	}).(StackConfigPolicyStatusDetailsOutput)
}

type StackConfigPolicyStatusDetailsError struct {
	Message *string `pulumi:"message"`
	Version *int    `pulumi:"version"`
}

// StackConfigPolicyStatusDetailsErrorInput is an input type that accepts StackConfigPolicyStatusDetailsErrorArgs and StackConfigPolicyStatusDetailsErrorOutput values.
// You can construct a concrete instance of `StackConfigPolicyStatusDetailsErrorInput` via:
//
//	StackConfigPolicyStatusDetailsErrorArgs{...}
type StackConfigPolicyStatusDetailsErrorInput interface {
	pulumi.Input

	ToStackConfigPolicyStatusDetailsErrorOutput() StackConfigPolicyStatusDetailsErrorOutput
	ToStackConfigPolicyStatusDetailsErrorOutputWithContext(context.Context) StackConfigPolicyStatusDetailsErrorOutput
}

type StackConfigPolicyStatusDetailsErrorArgs struct {
	Message pulumi.StringPtrInput `pulumi:"message"`
	Version pulumi.IntPtrInput    `pulumi:"version"`
}

func (StackConfigPolicyStatusDetailsErrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicyStatusDetailsError)(nil)).Elem()
}

func (i StackConfigPolicyStatusDetailsErrorArgs) ToStackConfigPolicyStatusDetailsErrorOutput() StackConfigPolicyStatusDetailsErrorOutput {
	return i.ToStackConfigPolicyStatusDetailsErrorOutputWithContext(context.Background())
}

func (i StackConfigPolicyStatusDetailsErrorArgs) ToStackConfigPolicyStatusDetailsErrorOutputWithContext(ctx context.Context) StackConfigPolicyStatusDetailsErrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyStatusDetailsErrorOutput)
}

func (i StackConfigPolicyStatusDetailsErrorArgs) ToStackConfigPolicyStatusDetailsErrorPtrOutput() StackConfigPolicyStatusDetailsErrorPtrOutput {
	return i.ToStackConfigPolicyStatusDetailsErrorPtrOutputWithContext(context.Background())
}

func (i StackConfigPolicyStatusDetailsErrorArgs) ToStackConfigPolicyStatusDetailsErrorPtrOutputWithContext(ctx context.Context) StackConfigPolicyStatusDetailsErrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyStatusDetailsErrorOutput).ToStackConfigPolicyStatusDetailsErrorPtrOutputWithContext(ctx)
}

// StackConfigPolicyStatusDetailsErrorPtrInput is an input type that accepts StackConfigPolicyStatusDetailsErrorArgs, StackConfigPolicyStatusDetailsErrorPtr and StackConfigPolicyStatusDetailsErrorPtrOutput values.
// You can construct a concrete instance of `StackConfigPolicyStatusDetailsErrorPtrInput` via:
//
//	        StackConfigPolicyStatusDetailsErrorArgs{...}
//
//	or:
//
//	        nil
type StackConfigPolicyStatusDetailsErrorPtrInput interface {
	pulumi.Input

	ToStackConfigPolicyStatusDetailsErrorPtrOutput() StackConfigPolicyStatusDetailsErrorPtrOutput
	ToStackConfigPolicyStatusDetailsErrorPtrOutputWithContext(context.Context) StackConfigPolicyStatusDetailsErrorPtrOutput
}

type stackConfigPolicyStatusDetailsErrorPtrType StackConfigPolicyStatusDetailsErrorArgs

func StackConfigPolicyStatusDetailsErrorPtr(v *StackConfigPolicyStatusDetailsErrorArgs) StackConfigPolicyStatusDetailsErrorPtrInput {
	return (*stackConfigPolicyStatusDetailsErrorPtrType)(v)
}

func (*stackConfigPolicyStatusDetailsErrorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicyStatusDetailsError)(nil)).Elem()
}

func (i *stackConfigPolicyStatusDetailsErrorPtrType) ToStackConfigPolicyStatusDetailsErrorPtrOutput() StackConfigPolicyStatusDetailsErrorPtrOutput {
	return i.ToStackConfigPolicyStatusDetailsErrorPtrOutputWithContext(context.Background())
}

func (i *stackConfigPolicyStatusDetailsErrorPtrType) ToStackConfigPolicyStatusDetailsErrorPtrOutputWithContext(ctx context.Context) StackConfigPolicyStatusDetailsErrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyStatusDetailsErrorPtrOutput)
}

type StackConfigPolicyStatusDetailsErrorOutput struct{ *pulumi.OutputState }

func (StackConfigPolicyStatusDetailsErrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicyStatusDetailsError)(nil)).Elem()
}

func (o StackConfigPolicyStatusDetailsErrorOutput) ToStackConfigPolicyStatusDetailsErrorOutput() StackConfigPolicyStatusDetailsErrorOutput {
	return o
}

func (o StackConfigPolicyStatusDetailsErrorOutput) ToStackConfigPolicyStatusDetailsErrorOutputWithContext(ctx context.Context) StackConfigPolicyStatusDetailsErrorOutput {
	return o
}

func (o StackConfigPolicyStatusDetailsErrorOutput) ToStackConfigPolicyStatusDetailsErrorPtrOutput() StackConfigPolicyStatusDetailsErrorPtrOutput {
	return o.ToStackConfigPolicyStatusDetailsErrorPtrOutputWithContext(context.Background())
}

func (o StackConfigPolicyStatusDetailsErrorOutput) ToStackConfigPolicyStatusDetailsErrorPtrOutputWithContext(ctx context.Context) StackConfigPolicyStatusDetailsErrorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackConfigPolicyStatusDetailsError) *StackConfigPolicyStatusDetailsError {
		return &v
	}).(StackConfigPolicyStatusDetailsErrorPtrOutput)
}

func (o StackConfigPolicyStatusDetailsErrorOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyStatusDetailsError) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o StackConfigPolicyStatusDetailsErrorOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyStatusDetailsError) *int { return v.Version }).(pulumi.IntPtrOutput)
}

type StackConfigPolicyStatusDetailsErrorPtrOutput struct{ *pulumi.OutputState }

func (StackConfigPolicyStatusDetailsErrorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicyStatusDetailsError)(nil)).Elem()
}

func (o StackConfigPolicyStatusDetailsErrorPtrOutput) ToStackConfigPolicyStatusDetailsErrorPtrOutput() StackConfigPolicyStatusDetailsErrorPtrOutput {
	return o
}

func (o StackConfigPolicyStatusDetailsErrorPtrOutput) ToStackConfigPolicyStatusDetailsErrorPtrOutputWithContext(ctx context.Context) StackConfigPolicyStatusDetailsErrorPtrOutput {
	return o
}

func (o StackConfigPolicyStatusDetailsErrorPtrOutput) Elem() StackConfigPolicyStatusDetailsErrorOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatusDetailsError) StackConfigPolicyStatusDetailsError {
		if v != nil {
			return *v
		}
		var ret StackConfigPolicyStatusDetailsError
		return ret
	}).(StackConfigPolicyStatusDetailsErrorOutput)
}

func (o StackConfigPolicyStatusDetailsErrorPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatusDetailsError) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

func (o StackConfigPolicyStatusDetailsErrorPtrOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatusDetailsError) *int {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.IntPtrOutput)
}

// ResourcePolicyStatus models the status of the policy for one resource to be configured.
type StackConfigPolicyStatusResourcesStatuses struct {
	// CurrentVersion denotes the current version of filesettings applied to the Elasticsearch cluster
	// This field does not apply to Kibana resources
	CurrentVersion *int                                           `pulumi:"currentVersion"`
	Error          *StackConfigPolicyStatusResourcesStatusesError `pulumi:"error"`
	// ExpectedVersion denotes the expected version of filesettings that should be applied to the Elasticsearch cluster
	// This field does not apply to Kibana resources
	ExpectedVersion *int    `pulumi:"expectedVersion"`
	Phase           *string `pulumi:"phase"`
}

// StackConfigPolicyStatusResourcesStatusesInput is an input type that accepts StackConfigPolicyStatusResourcesStatusesArgs and StackConfigPolicyStatusResourcesStatusesOutput values.
// You can construct a concrete instance of `StackConfigPolicyStatusResourcesStatusesInput` via:
//
//	StackConfigPolicyStatusResourcesStatusesArgs{...}
type StackConfigPolicyStatusResourcesStatusesInput interface {
	pulumi.Input

	ToStackConfigPolicyStatusResourcesStatusesOutput() StackConfigPolicyStatusResourcesStatusesOutput
	ToStackConfigPolicyStatusResourcesStatusesOutputWithContext(context.Context) StackConfigPolicyStatusResourcesStatusesOutput
}

// ResourcePolicyStatus models the status of the policy for one resource to be configured.
type StackConfigPolicyStatusResourcesStatusesArgs struct {
	// CurrentVersion denotes the current version of filesettings applied to the Elasticsearch cluster
	// This field does not apply to Kibana resources
	CurrentVersion pulumi.IntPtrInput                                    `pulumi:"currentVersion"`
	Error          StackConfigPolicyStatusResourcesStatusesErrorPtrInput `pulumi:"error"`
	// ExpectedVersion denotes the expected version of filesettings that should be applied to the Elasticsearch cluster
	// This field does not apply to Kibana resources
	ExpectedVersion pulumi.IntPtrInput    `pulumi:"expectedVersion"`
	Phase           pulumi.StringPtrInput `pulumi:"phase"`
}

func (StackConfigPolicyStatusResourcesStatusesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicyStatusResourcesStatuses)(nil)).Elem()
}

func (i StackConfigPolicyStatusResourcesStatusesArgs) ToStackConfigPolicyStatusResourcesStatusesOutput() StackConfigPolicyStatusResourcesStatusesOutput {
	return i.ToStackConfigPolicyStatusResourcesStatusesOutputWithContext(context.Background())
}

func (i StackConfigPolicyStatusResourcesStatusesArgs) ToStackConfigPolicyStatusResourcesStatusesOutputWithContext(ctx context.Context) StackConfigPolicyStatusResourcesStatusesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyStatusResourcesStatusesOutput)
}

// StackConfigPolicyStatusResourcesStatusesMapInput is an input type that accepts StackConfigPolicyStatusResourcesStatusesMap and StackConfigPolicyStatusResourcesStatusesMapOutput values.
// You can construct a concrete instance of `StackConfigPolicyStatusResourcesStatusesMapInput` via:
//
//	StackConfigPolicyStatusResourcesStatusesMap{ "key": StackConfigPolicyStatusResourcesStatusesArgs{...} }
type StackConfigPolicyStatusResourcesStatusesMapInput interface {
	pulumi.Input

	ToStackConfigPolicyStatusResourcesStatusesMapOutput() StackConfigPolicyStatusResourcesStatusesMapOutput
	ToStackConfigPolicyStatusResourcesStatusesMapOutputWithContext(context.Context) StackConfigPolicyStatusResourcesStatusesMapOutput
}

type StackConfigPolicyStatusResourcesStatusesMap map[string]StackConfigPolicyStatusResourcesStatusesInput

func (StackConfigPolicyStatusResourcesStatusesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]StackConfigPolicyStatusResourcesStatuses)(nil)).Elem()
}

func (i StackConfigPolicyStatusResourcesStatusesMap) ToStackConfigPolicyStatusResourcesStatusesMapOutput() StackConfigPolicyStatusResourcesStatusesMapOutput {
	return i.ToStackConfigPolicyStatusResourcesStatusesMapOutputWithContext(context.Background())
}

func (i StackConfigPolicyStatusResourcesStatusesMap) ToStackConfigPolicyStatusResourcesStatusesMapOutputWithContext(ctx context.Context) StackConfigPolicyStatusResourcesStatusesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyStatusResourcesStatusesMapOutput)
}

// ResourcePolicyStatus models the status of the policy for one resource to be configured.
type StackConfigPolicyStatusResourcesStatusesOutput struct{ *pulumi.OutputState }

func (StackConfigPolicyStatusResourcesStatusesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicyStatusResourcesStatuses)(nil)).Elem()
}

func (o StackConfigPolicyStatusResourcesStatusesOutput) ToStackConfigPolicyStatusResourcesStatusesOutput() StackConfigPolicyStatusResourcesStatusesOutput {
	return o
}

func (o StackConfigPolicyStatusResourcesStatusesOutput) ToStackConfigPolicyStatusResourcesStatusesOutputWithContext(ctx context.Context) StackConfigPolicyStatusResourcesStatusesOutput {
	return o
}

// CurrentVersion denotes the current version of filesettings applied to the Elasticsearch cluster
// This field does not apply to Kibana resources
func (o StackConfigPolicyStatusResourcesStatusesOutput) CurrentVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyStatusResourcesStatuses) *int { return v.CurrentVersion }).(pulumi.IntPtrOutput)
}

func (o StackConfigPolicyStatusResourcesStatusesOutput) Error() StackConfigPolicyStatusResourcesStatusesErrorPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyStatusResourcesStatuses) *StackConfigPolicyStatusResourcesStatusesError {
		return v.Error
	}).(StackConfigPolicyStatusResourcesStatusesErrorPtrOutput)
}

// ExpectedVersion denotes the expected version of filesettings that should be applied to the Elasticsearch cluster
// This field does not apply to Kibana resources
func (o StackConfigPolicyStatusResourcesStatusesOutput) ExpectedVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyStatusResourcesStatuses) *int { return v.ExpectedVersion }).(pulumi.IntPtrOutput)
}

func (o StackConfigPolicyStatusResourcesStatusesOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyStatusResourcesStatuses) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

type StackConfigPolicyStatusResourcesStatusesMapOutput struct{ *pulumi.OutputState }

func (StackConfigPolicyStatusResourcesStatusesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]StackConfigPolicyStatusResourcesStatuses)(nil)).Elem()
}

func (o StackConfigPolicyStatusResourcesStatusesMapOutput) ToStackConfigPolicyStatusResourcesStatusesMapOutput() StackConfigPolicyStatusResourcesStatusesMapOutput {
	return o
}

func (o StackConfigPolicyStatusResourcesStatusesMapOutput) ToStackConfigPolicyStatusResourcesStatusesMapOutputWithContext(ctx context.Context) StackConfigPolicyStatusResourcesStatusesMapOutput {
	return o
}

func (o StackConfigPolicyStatusResourcesStatusesMapOutput) MapIndex(k pulumi.StringInput) StackConfigPolicyStatusResourcesStatusesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) StackConfigPolicyStatusResourcesStatuses {
		return vs[0].(map[string]StackConfigPolicyStatusResourcesStatuses)[vs[1].(string)]
	}).(StackConfigPolicyStatusResourcesStatusesOutput)
}

type StackConfigPolicyStatusResourcesStatusesError struct {
	Message *string `pulumi:"message"`
	Version *int    `pulumi:"version"`
}

// StackConfigPolicyStatusResourcesStatusesErrorInput is an input type that accepts StackConfigPolicyStatusResourcesStatusesErrorArgs and StackConfigPolicyStatusResourcesStatusesErrorOutput values.
// You can construct a concrete instance of `StackConfigPolicyStatusResourcesStatusesErrorInput` via:
//
//	StackConfigPolicyStatusResourcesStatusesErrorArgs{...}
type StackConfigPolicyStatusResourcesStatusesErrorInput interface {
	pulumi.Input

	ToStackConfigPolicyStatusResourcesStatusesErrorOutput() StackConfigPolicyStatusResourcesStatusesErrorOutput
	ToStackConfigPolicyStatusResourcesStatusesErrorOutputWithContext(context.Context) StackConfigPolicyStatusResourcesStatusesErrorOutput
}

type StackConfigPolicyStatusResourcesStatusesErrorArgs struct {
	Message pulumi.StringPtrInput `pulumi:"message"`
	Version pulumi.IntPtrInput    `pulumi:"version"`
}

func (StackConfigPolicyStatusResourcesStatusesErrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicyStatusResourcesStatusesError)(nil)).Elem()
}

func (i StackConfigPolicyStatusResourcesStatusesErrorArgs) ToStackConfigPolicyStatusResourcesStatusesErrorOutput() StackConfigPolicyStatusResourcesStatusesErrorOutput {
	return i.ToStackConfigPolicyStatusResourcesStatusesErrorOutputWithContext(context.Background())
}

func (i StackConfigPolicyStatusResourcesStatusesErrorArgs) ToStackConfigPolicyStatusResourcesStatusesErrorOutputWithContext(ctx context.Context) StackConfigPolicyStatusResourcesStatusesErrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyStatusResourcesStatusesErrorOutput)
}

func (i StackConfigPolicyStatusResourcesStatusesErrorArgs) ToStackConfigPolicyStatusResourcesStatusesErrorPtrOutput() StackConfigPolicyStatusResourcesStatusesErrorPtrOutput {
	return i.ToStackConfigPolicyStatusResourcesStatusesErrorPtrOutputWithContext(context.Background())
}

func (i StackConfigPolicyStatusResourcesStatusesErrorArgs) ToStackConfigPolicyStatusResourcesStatusesErrorPtrOutputWithContext(ctx context.Context) StackConfigPolicyStatusResourcesStatusesErrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyStatusResourcesStatusesErrorOutput).ToStackConfigPolicyStatusResourcesStatusesErrorPtrOutputWithContext(ctx)
}

// StackConfigPolicyStatusResourcesStatusesErrorPtrInput is an input type that accepts StackConfigPolicyStatusResourcesStatusesErrorArgs, StackConfigPolicyStatusResourcesStatusesErrorPtr and StackConfigPolicyStatusResourcesStatusesErrorPtrOutput values.
// You can construct a concrete instance of `StackConfigPolicyStatusResourcesStatusesErrorPtrInput` via:
//
//	        StackConfigPolicyStatusResourcesStatusesErrorArgs{...}
//
//	or:
//
//	        nil
type StackConfigPolicyStatusResourcesStatusesErrorPtrInput interface {
	pulumi.Input

	ToStackConfigPolicyStatusResourcesStatusesErrorPtrOutput() StackConfigPolicyStatusResourcesStatusesErrorPtrOutput
	ToStackConfigPolicyStatusResourcesStatusesErrorPtrOutputWithContext(context.Context) StackConfigPolicyStatusResourcesStatusesErrorPtrOutput
}

type stackConfigPolicyStatusResourcesStatusesErrorPtrType StackConfigPolicyStatusResourcesStatusesErrorArgs

func StackConfigPolicyStatusResourcesStatusesErrorPtr(v *StackConfigPolicyStatusResourcesStatusesErrorArgs) StackConfigPolicyStatusResourcesStatusesErrorPtrInput {
	return (*stackConfigPolicyStatusResourcesStatusesErrorPtrType)(v)
}

func (*stackConfigPolicyStatusResourcesStatusesErrorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicyStatusResourcesStatusesError)(nil)).Elem()
}

func (i *stackConfigPolicyStatusResourcesStatusesErrorPtrType) ToStackConfigPolicyStatusResourcesStatusesErrorPtrOutput() StackConfigPolicyStatusResourcesStatusesErrorPtrOutput {
	return i.ToStackConfigPolicyStatusResourcesStatusesErrorPtrOutputWithContext(context.Background())
}

func (i *stackConfigPolicyStatusResourcesStatusesErrorPtrType) ToStackConfigPolicyStatusResourcesStatusesErrorPtrOutputWithContext(ctx context.Context) StackConfigPolicyStatusResourcesStatusesErrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyStatusResourcesStatusesErrorPtrOutput)
}

type StackConfigPolicyStatusResourcesStatusesErrorOutput struct{ *pulumi.OutputState }

func (StackConfigPolicyStatusResourcesStatusesErrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicyStatusResourcesStatusesError)(nil)).Elem()
}

func (o StackConfigPolicyStatusResourcesStatusesErrorOutput) ToStackConfigPolicyStatusResourcesStatusesErrorOutput() StackConfigPolicyStatusResourcesStatusesErrorOutput {
	return o
}

func (o StackConfigPolicyStatusResourcesStatusesErrorOutput) ToStackConfigPolicyStatusResourcesStatusesErrorOutputWithContext(ctx context.Context) StackConfigPolicyStatusResourcesStatusesErrorOutput {
	return o
}

func (o StackConfigPolicyStatusResourcesStatusesErrorOutput) ToStackConfigPolicyStatusResourcesStatusesErrorPtrOutput() StackConfigPolicyStatusResourcesStatusesErrorPtrOutput {
	return o.ToStackConfigPolicyStatusResourcesStatusesErrorPtrOutputWithContext(context.Background())
}

func (o StackConfigPolicyStatusResourcesStatusesErrorOutput) ToStackConfigPolicyStatusResourcesStatusesErrorPtrOutputWithContext(ctx context.Context) StackConfigPolicyStatusResourcesStatusesErrorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackConfigPolicyStatusResourcesStatusesError) *StackConfigPolicyStatusResourcesStatusesError {
		return &v
	}).(StackConfigPolicyStatusResourcesStatusesErrorPtrOutput)
}

func (o StackConfigPolicyStatusResourcesStatusesErrorOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyStatusResourcesStatusesError) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o StackConfigPolicyStatusResourcesStatusesErrorOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyStatusResourcesStatusesError) *int { return v.Version }).(pulumi.IntPtrOutput)
}

type StackConfigPolicyStatusResourcesStatusesErrorPtrOutput struct{ *pulumi.OutputState }

func (StackConfigPolicyStatusResourcesStatusesErrorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicyStatusResourcesStatusesError)(nil)).Elem()
}

func (o StackConfigPolicyStatusResourcesStatusesErrorPtrOutput) ToStackConfigPolicyStatusResourcesStatusesErrorPtrOutput() StackConfigPolicyStatusResourcesStatusesErrorPtrOutput {
	return o
}

func (o StackConfigPolicyStatusResourcesStatusesErrorPtrOutput) ToStackConfigPolicyStatusResourcesStatusesErrorPtrOutputWithContext(ctx context.Context) StackConfigPolicyStatusResourcesStatusesErrorPtrOutput {
	return o
}

func (o StackConfigPolicyStatusResourcesStatusesErrorPtrOutput) Elem() StackConfigPolicyStatusResourcesStatusesErrorOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatusResourcesStatusesError) StackConfigPolicyStatusResourcesStatusesError {
		if v != nil {
			return *v
		}
		var ret StackConfigPolicyStatusResourcesStatusesError
		return ret
	}).(StackConfigPolicyStatusResourcesStatusesErrorOutput)
}

func (o StackConfigPolicyStatusResourcesStatusesErrorPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatusResourcesStatusesError) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

func (o StackConfigPolicyStatusResourcesStatusesErrorPtrOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatusResourcesStatusesError) *int {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.IntPtrOutput)
}

type StackConfigPolicyStatusDetailsMapMap map[string]StackConfigPolicyStatusDetailsMapInput

func (StackConfigPolicyStatusDetailsMapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]map[string]StackConfigPolicyStatusDetails)(nil)).Elem()
}

func (i StackConfigPolicyStatusDetailsMapMap) ToStackConfigPolicyStatusDetailsMapMapOutput() StackConfigPolicyStatusDetailsMapMapOutput {
	return i.ToStackConfigPolicyStatusDetailsMapMapOutputWithContext(context.Background())
}

func (i StackConfigPolicyStatusDetailsMapMap) ToStackConfigPolicyStatusDetailsMapMapOutputWithContext(ctx context.Context) StackConfigPolicyStatusDetailsMapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyStatusDetailsMapMapOutput)
}

// StackConfigPolicyStatusDetailsMapMapInput is an input type that accepts StackConfigPolicyStatusDetailsMapMap and StackConfigPolicyStatusDetailsMapMapOutput values.
// You can construct a concrete instance of `StackConfigPolicyStatusDetailsMapMapInput` via:
//
//	StackConfigPolicyStatusDetailsMapMap{ "key": StackConfigPolicyStatusDetailsMap{ "key": StackConfigPolicyStatusDetailsArgs{...} } }
type StackConfigPolicyStatusDetailsMapMapInput interface {
	pulumi.Input

	ToStackConfigPolicyStatusDetailsMapMapOutput() StackConfigPolicyStatusDetailsMapMapOutput
	ToStackConfigPolicyStatusDetailsMapMapOutputWithContext(context.Context) StackConfigPolicyStatusDetailsMapMapOutput
}

type StackConfigPolicyStatusDetailsMapMapOutput struct{ *pulumi.OutputState }

func (StackConfigPolicyStatusDetailsMapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]map[string]StackConfigPolicyStatusDetails)(nil)).Elem()
}

func (o StackConfigPolicyStatusDetailsMapMapOutput) ToStackConfigPolicyStatusDetailsMapMapOutput() StackConfigPolicyStatusDetailsMapMapOutput {
	return o
}

func (o StackConfigPolicyStatusDetailsMapMapOutput) ToStackConfigPolicyStatusDetailsMapMapOutputWithContext(ctx context.Context) StackConfigPolicyStatusDetailsMapMapOutput {
	return o
}

func (o StackConfigPolicyStatusDetailsMapMapOutput) MapIndex(k pulumi.StringInput) StackConfigPolicyStatusDetailsMapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) map[string]StackConfigPolicyStatusDetails {
		return vs[0].(map[string]map[string]StackConfigPolicyStatusDetails)[vs[1].(string)]
	}).(StackConfigPolicyStatusDetailsMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecInput)(nil)).Elem(), StackConfigPolicySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecPtrInput)(nil)).Elem(), StackConfigPolicySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecElasticsearchInput)(nil)).Elem(), StackConfigPolicySpecElasticsearchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecElasticsearchPtrInput)(nil)).Elem(), StackConfigPolicySpecElasticsearchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecKibanaInput)(nil)).Elem(), StackConfigPolicySpecKibanaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecKibanaPtrInput)(nil)).Elem(), StackConfigPolicySpecKibanaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecResourceSelectorInput)(nil)).Elem(), StackConfigPolicySpecResourceSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecResourceSelectorPtrInput)(nil)).Elem(), StackConfigPolicySpecResourceSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecResourceSelectorMatchExpressionsInput)(nil)).Elem(), StackConfigPolicySpecResourceSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecResourceSelectorMatchExpressionsArrayInput)(nil)).Elem(), StackConfigPolicySpecResourceSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecSecureSettingsInput)(nil)).Elem(), StackConfigPolicySpecSecureSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecSecureSettingsArrayInput)(nil)).Elem(), StackConfigPolicySpecSecureSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecSecureSettingsEntriesInput)(nil)).Elem(), StackConfigPolicySpecSecureSettingsEntriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecSecureSettingsEntriesArrayInput)(nil)).Elem(), StackConfigPolicySpecSecureSettingsEntriesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicyStatusInput)(nil)).Elem(), StackConfigPolicyStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicyStatusPtrInput)(nil)).Elem(), StackConfigPolicyStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicyStatusDetailsInput)(nil)).Elem(), StackConfigPolicyStatusDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicyStatusDetailsMapInput)(nil)).Elem(), StackConfigPolicyStatusDetailsMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicyStatusDetailsErrorInput)(nil)).Elem(), StackConfigPolicyStatusDetailsErrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicyStatusDetailsErrorPtrInput)(nil)).Elem(), StackConfigPolicyStatusDetailsErrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicyStatusResourcesStatusesInput)(nil)).Elem(), StackConfigPolicyStatusResourcesStatusesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicyStatusResourcesStatusesMapInput)(nil)).Elem(), StackConfigPolicyStatusResourcesStatusesMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicyStatusResourcesStatusesErrorInput)(nil)).Elem(), StackConfigPolicyStatusResourcesStatusesErrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicyStatusResourcesStatusesErrorPtrInput)(nil)).Elem(), StackConfigPolicyStatusResourcesStatusesErrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicyStatusDetailsMapMapInput)(nil)).Elem(), StackConfigPolicyStatusDetailsMapMap{})
	pulumi.RegisterOutputType(StackConfigPolicySpecOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecPtrOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecElasticsearchOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecElasticsearchPtrOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecKibanaOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecKibanaPtrOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecResourceSelectorOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecResourceSelectorPtrOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecResourceSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecSecureSettingsOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecSecureSettingsArrayOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecSecureSettingsEntriesOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecSecureSettingsEntriesArrayOutput{})
	pulumi.RegisterOutputType(StackConfigPolicyStatusOutput{})
	pulumi.RegisterOutputType(StackConfigPolicyStatusPtrOutput{})
	pulumi.RegisterOutputType(StackConfigPolicyStatusDetailsOutput{})
	pulumi.RegisterOutputType(StackConfigPolicyStatusDetailsMapOutput{})
	pulumi.RegisterOutputType(StackConfigPolicyStatusDetailsErrorOutput{})
	pulumi.RegisterOutputType(StackConfigPolicyStatusDetailsErrorPtrOutput{})
	pulumi.RegisterOutputType(StackConfigPolicyStatusResourcesStatusesOutput{})
	pulumi.RegisterOutputType(StackConfigPolicyStatusResourcesStatusesMapOutput{})
	pulumi.RegisterOutputType(StackConfigPolicyStatusResourcesStatusesErrorOutput{})
	pulumi.RegisterOutputType(StackConfigPolicyStatusResourcesStatusesErrorPtrOutput{})
	pulumi.RegisterOutputType(StackConfigPolicyStatusDetailsMapMapOutput{})
}
