// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// StackConfigPolicy represents a StackConfigPolicy resource in a Kubernetes cluster.
type StackConfigPolicy struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput           `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput           `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput       `pulumi:"metadata"`
	Spec       StackConfigPolicySpecPtrOutput   `pulumi:"spec"`
	Status     StackConfigPolicyStatusPtrOutput `pulumi:"status"`
}

// NewStackConfigPolicy registers a new resource with the given unique name, arguments, and options.
func NewStackConfigPolicy(ctx *pulumi.Context,
	name string, args *StackConfigPolicyArgs, opts ...pulumi.ResourceOption) (*StackConfigPolicy, error) {
	if args == nil {
		args = &StackConfigPolicyArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("stackconfigpolicy.k8s.elastic.co/v1alpha1")
	args.Kind = pulumi.StringPtr("StackConfigPolicy")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource StackConfigPolicy
	err := ctx.RegisterResource("kubernetes:stackconfigpolicy.k8s.elastic.co/v1alpha1:StackConfigPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStackConfigPolicy gets an existing StackConfigPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStackConfigPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StackConfigPolicyState, opts ...pulumi.ResourceOption) (*StackConfigPolicy, error) {
	var resource StackConfigPolicy
	err := ctx.ReadResource("kubernetes:stackconfigpolicy.k8s.elastic.co/v1alpha1:StackConfigPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StackConfigPolicy resources.
type stackConfigPolicyState struct {
}

type StackConfigPolicyState struct {
}

func (StackConfigPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*stackConfigPolicyState)(nil)).Elem()
}

type stackConfigPolicyArgs struct {
	ApiVersion *string                  `pulumi:"apiVersion"`
	Kind       *string                  `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta       `pulumi:"metadata"`
	Spec       *StackConfigPolicySpec   `pulumi:"spec"`
	Status     *StackConfigPolicyStatus `pulumi:"status"`
}

// The set of arguments for constructing a StackConfigPolicy resource.
type StackConfigPolicyArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	Spec       StackConfigPolicySpecPtrInput
	Status     StackConfigPolicyStatusPtrInput
}

func (StackConfigPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stackConfigPolicyArgs)(nil)).Elem()
}

type StackConfigPolicyInput interface {
	pulumi.Input

	ToStackConfigPolicyOutput() StackConfigPolicyOutput
	ToStackConfigPolicyOutputWithContext(ctx context.Context) StackConfigPolicyOutput
}

func (*StackConfigPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicy)(nil)).Elem()
}

func (i *StackConfigPolicy) ToStackConfigPolicyOutput() StackConfigPolicyOutput {
	return i.ToStackConfigPolicyOutputWithContext(context.Background())
}

func (i *StackConfigPolicy) ToStackConfigPolicyOutputWithContext(ctx context.Context) StackConfigPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyOutput)
}

type StackConfigPolicyOutput struct{ *pulumi.OutputState }

func (StackConfigPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicy)(nil)).Elem()
}

func (o StackConfigPolicyOutput) ToStackConfigPolicyOutput() StackConfigPolicyOutput {
	return o
}

func (o StackConfigPolicyOutput) ToStackConfigPolicyOutputWithContext(ctx context.Context) StackConfigPolicyOutput {
	return o
}

func (o StackConfigPolicyOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicy) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o StackConfigPolicyOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicy) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o StackConfigPolicyOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicy) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o StackConfigPolicyOutput) Spec() StackConfigPolicySpecPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicy) StackConfigPolicySpecPtrOutput { return v.Spec }).(StackConfigPolicySpecPtrOutput)
}

func (o StackConfigPolicyOutput) Status() StackConfigPolicyStatusPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicy) StackConfigPolicyStatusPtrOutput { return v.Status }).(StackConfigPolicyStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicyInput)(nil)).Elem(), &StackConfigPolicy{})
	pulumi.RegisterOutputType(StackConfigPolicyOutput{})
}
