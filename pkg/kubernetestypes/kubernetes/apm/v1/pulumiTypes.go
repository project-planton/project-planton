// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// ApmServer represents an APM Server resource in a Kubernetes cluster.
type ApmServerType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ApmServerSpec holds the specification of an APM Server.
	Spec *ApmServerSpec `pulumi:"spec"`
	// ApmServerStatus defines the observed state of ApmServer
	Status *ApmServerStatus `pulumi:"status"`
}

type ApmServerMetadata struct {
}

// ApmServerSpec holds the specification of an APM Server.
type ApmServerSpec struct {
	// Config holds the APM Server configuration. See: https://www.elastic.co/guide/en/apm/server/current/configuring-howto-apm-server.html
	Config map[string]interface{} `pulumi:"config"`
	// Count of APM Server instances to deploy.
	Count *int `pulumi:"count"`
	// ElasticsearchRef is a reference to the output Elasticsearch cluster running in the same Kubernetes cluster.
	ElasticsearchRef *ApmServerSpecElasticsearchRef `pulumi:"elasticsearchRef"`
	// HTTP holds the HTTP layer configuration for the APM Server resource.
	Http *ApmServerSpecHttp `pulumi:"http"`
	// Image is the APM Server Docker image to deploy.
	Image *string `pulumi:"image"`
	// KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster.
	// It allows APM agent central configuration management in Kibana.
	KibanaRef *ApmServerSpecKibanaRef `pulumi:"kibanaRef"`
	// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the APM Server pods.
	PodTemplate map[string]interface{} `pulumi:"podTemplate"`
	// RevisionHistoryLimit is the number of revisions to retain to allow rollback in the underlying Deployment.
	RevisionHistoryLimit *int `pulumi:"revisionHistoryLimit"`
	// SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for APM Server.
	SecureSettings []ApmServerSpecSecureSettings `pulumi:"secureSettings"`
	// ServiceAccountName is used to check access from the current resource to a resource (for ex. Elasticsearch) in a different namespace.
	// Can only be used if ECK is enforcing RBAC on references.
	ServiceAccountName *string `pulumi:"serviceAccountName"`
	// Version of the APM Server.
	Version string `pulumi:"version"`
}

// ApmServerSpecInput is an input type that accepts ApmServerSpecArgs and ApmServerSpecOutput values.
// You can construct a concrete instance of `ApmServerSpecInput` via:
//
//	ApmServerSpecArgs{...}
type ApmServerSpecInput interface {
	pulumi.Input

	ToApmServerSpecOutput() ApmServerSpecOutput
	ToApmServerSpecOutputWithContext(context.Context) ApmServerSpecOutput
}

// ApmServerSpec holds the specification of an APM Server.
type ApmServerSpecArgs struct {
	// Config holds the APM Server configuration. See: https://www.elastic.co/guide/en/apm/server/current/configuring-howto-apm-server.html
	Config pulumi.MapInput `pulumi:"config"`
	// Count of APM Server instances to deploy.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// ElasticsearchRef is a reference to the output Elasticsearch cluster running in the same Kubernetes cluster.
	ElasticsearchRef ApmServerSpecElasticsearchRefPtrInput `pulumi:"elasticsearchRef"`
	// HTTP holds the HTTP layer configuration for the APM Server resource.
	Http ApmServerSpecHttpPtrInput `pulumi:"http"`
	// Image is the APM Server Docker image to deploy.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster.
	// It allows APM agent central configuration management in Kibana.
	KibanaRef ApmServerSpecKibanaRefPtrInput `pulumi:"kibanaRef"`
	// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the APM Server pods.
	PodTemplate pulumi.MapInput `pulumi:"podTemplate"`
	// RevisionHistoryLimit is the number of revisions to retain to allow rollback in the underlying Deployment.
	RevisionHistoryLimit pulumi.IntPtrInput `pulumi:"revisionHistoryLimit"`
	// SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for APM Server.
	SecureSettings ApmServerSpecSecureSettingsArrayInput `pulumi:"secureSettings"`
	// ServiceAccountName is used to check access from the current resource to a resource (for ex. Elasticsearch) in a different namespace.
	// Can only be used if ECK is enforcing RBAC on references.
	ServiceAccountName pulumi.StringPtrInput `pulumi:"serviceAccountName"`
	// Version of the APM Server.
	Version pulumi.StringInput `pulumi:"version"`
}

func (ApmServerSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpec)(nil)).Elem()
}

func (i ApmServerSpecArgs) ToApmServerSpecOutput() ApmServerSpecOutput {
	return i.ToApmServerSpecOutputWithContext(context.Background())
}

func (i ApmServerSpecArgs) ToApmServerSpecOutputWithContext(ctx context.Context) ApmServerSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecOutput)
}

func (i ApmServerSpecArgs) ToApmServerSpecPtrOutput() ApmServerSpecPtrOutput {
	return i.ToApmServerSpecPtrOutputWithContext(context.Background())
}

func (i ApmServerSpecArgs) ToApmServerSpecPtrOutputWithContext(ctx context.Context) ApmServerSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecOutput).ToApmServerSpecPtrOutputWithContext(ctx)
}

// ApmServerSpecPtrInput is an input type that accepts ApmServerSpecArgs, ApmServerSpecPtr and ApmServerSpecPtrOutput values.
// You can construct a concrete instance of `ApmServerSpecPtrInput` via:
//
//	        ApmServerSpecArgs{...}
//
//	or:
//
//	        nil
type ApmServerSpecPtrInput interface {
	pulumi.Input

	ToApmServerSpecPtrOutput() ApmServerSpecPtrOutput
	ToApmServerSpecPtrOutputWithContext(context.Context) ApmServerSpecPtrOutput
}

type apmServerSpecPtrType ApmServerSpecArgs

func ApmServerSpecPtr(v *ApmServerSpecArgs) ApmServerSpecPtrInput {
	return (*apmServerSpecPtrType)(v)
}

func (*apmServerSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpec)(nil)).Elem()
}

func (i *apmServerSpecPtrType) ToApmServerSpecPtrOutput() ApmServerSpecPtrOutput {
	return i.ToApmServerSpecPtrOutputWithContext(context.Background())
}

func (i *apmServerSpecPtrType) ToApmServerSpecPtrOutputWithContext(ctx context.Context) ApmServerSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecPtrOutput)
}

// ApmServerSpec holds the specification of an APM Server.
type ApmServerSpecOutput struct{ *pulumi.OutputState }

func (ApmServerSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpec)(nil)).Elem()
}

func (o ApmServerSpecOutput) ToApmServerSpecOutput() ApmServerSpecOutput {
	return o
}

func (o ApmServerSpecOutput) ToApmServerSpecOutputWithContext(ctx context.Context) ApmServerSpecOutput {
	return o
}

func (o ApmServerSpecOutput) ToApmServerSpecPtrOutput() ApmServerSpecPtrOutput {
	return o.ToApmServerSpecPtrOutputWithContext(context.Background())
}

func (o ApmServerSpecOutput) ToApmServerSpecPtrOutputWithContext(ctx context.Context) ApmServerSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApmServerSpec) *ApmServerSpec {
		return &v
	}).(ApmServerSpecPtrOutput)
}

// Config holds the APM Server configuration. See: https://www.elastic.co/guide/en/apm/server/current/configuring-howto-apm-server.html
func (o ApmServerSpecOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v ApmServerSpec) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

// Count of APM Server instances to deploy.
func (o ApmServerSpecOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApmServerSpec) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// ElasticsearchRef is a reference to the output Elasticsearch cluster running in the same Kubernetes cluster.
func (o ApmServerSpecOutput) ElasticsearchRef() ApmServerSpecElasticsearchRefPtrOutput {
	return o.ApplyT(func(v ApmServerSpec) *ApmServerSpecElasticsearchRef { return v.ElasticsearchRef }).(ApmServerSpecElasticsearchRefPtrOutput)
}

// HTTP holds the HTTP layer configuration for the APM Server resource.
func (o ApmServerSpecOutput) Http() ApmServerSpecHttpPtrOutput {
	return o.ApplyT(func(v ApmServerSpec) *ApmServerSpecHttp { return v.Http }).(ApmServerSpecHttpPtrOutput)
}

// Image is the APM Server Docker image to deploy.
func (o ApmServerSpecOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpec) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster.
// It allows APM agent central configuration management in Kibana.
func (o ApmServerSpecOutput) KibanaRef() ApmServerSpecKibanaRefPtrOutput {
	return o.ApplyT(func(v ApmServerSpec) *ApmServerSpecKibanaRef { return v.KibanaRef }).(ApmServerSpecKibanaRefPtrOutput)
}

// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the APM Server pods.
func (o ApmServerSpecOutput) PodTemplate() pulumi.MapOutput {
	return o.ApplyT(func(v ApmServerSpec) map[string]interface{} { return v.PodTemplate }).(pulumi.MapOutput)
}

// RevisionHistoryLimit is the number of revisions to retain to allow rollback in the underlying Deployment.
func (o ApmServerSpecOutput) RevisionHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApmServerSpec) *int { return v.RevisionHistoryLimit }).(pulumi.IntPtrOutput)
}

// SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for APM Server.
func (o ApmServerSpecOutput) SecureSettings() ApmServerSpecSecureSettingsArrayOutput {
	return o.ApplyT(func(v ApmServerSpec) []ApmServerSpecSecureSettings { return v.SecureSettings }).(ApmServerSpecSecureSettingsArrayOutput)
}

// ServiceAccountName is used to check access from the current resource to a resource (for ex. Elasticsearch) in a different namespace.
// Can only be used if ECK is enforcing RBAC on references.
func (o ApmServerSpecOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpec) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

// Version of the APM Server.
func (o ApmServerSpecOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v ApmServerSpec) string { return v.Version }).(pulumi.StringOutput)
}

type ApmServerSpecPtrOutput struct{ *pulumi.OutputState }

func (ApmServerSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpec)(nil)).Elem()
}

func (o ApmServerSpecPtrOutput) ToApmServerSpecPtrOutput() ApmServerSpecPtrOutput {
	return o
}

func (o ApmServerSpecPtrOutput) ToApmServerSpecPtrOutputWithContext(ctx context.Context) ApmServerSpecPtrOutput {
	return o
}

func (o ApmServerSpecPtrOutput) Elem() ApmServerSpecOutput {
	return o.ApplyT(func(v *ApmServerSpec) ApmServerSpec {
		if v != nil {
			return *v
		}
		var ret ApmServerSpec
		return ret
	}).(ApmServerSpecOutput)
}

// Config holds the APM Server configuration. See: https://www.elastic.co/guide/en/apm/server/current/configuring-howto-apm-server.html
func (o ApmServerSpecPtrOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v *ApmServerSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.MapOutput)
}

// Count of APM Server instances to deploy.
func (o ApmServerSpecPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApmServerSpec) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// ElasticsearchRef is a reference to the output Elasticsearch cluster running in the same Kubernetes cluster.
func (o ApmServerSpecPtrOutput) ElasticsearchRef() ApmServerSpecElasticsearchRefPtrOutput {
	return o.ApplyT(func(v *ApmServerSpec) *ApmServerSpecElasticsearchRef {
		if v == nil {
			return nil
		}
		return v.ElasticsearchRef
	}).(ApmServerSpecElasticsearchRefPtrOutput)
}

// HTTP holds the HTTP layer configuration for the APM Server resource.
func (o ApmServerSpecPtrOutput) Http() ApmServerSpecHttpPtrOutput {
	return o.ApplyT(func(v *ApmServerSpec) *ApmServerSpecHttp {
		if v == nil {
			return nil
		}
		return v.Http
	}).(ApmServerSpecHttpPtrOutput)
}

// Image is the APM Server Docker image to deploy.
func (o ApmServerSpecPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpec) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster.
// It allows APM agent central configuration management in Kibana.
func (o ApmServerSpecPtrOutput) KibanaRef() ApmServerSpecKibanaRefPtrOutput {
	return o.ApplyT(func(v *ApmServerSpec) *ApmServerSpecKibanaRef {
		if v == nil {
			return nil
		}
		return v.KibanaRef
	}).(ApmServerSpecKibanaRefPtrOutput)
}

// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the APM Server pods.
func (o ApmServerSpecPtrOutput) PodTemplate() pulumi.MapOutput {
	return o.ApplyT(func(v *ApmServerSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.MapOutput)
}

// RevisionHistoryLimit is the number of revisions to retain to allow rollback in the underlying Deployment.
func (o ApmServerSpecPtrOutput) RevisionHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApmServerSpec) *int {
		if v == nil {
			return nil
		}
		return v.RevisionHistoryLimit
	}).(pulumi.IntPtrOutput)
}

// SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for APM Server.
func (o ApmServerSpecPtrOutput) SecureSettings() ApmServerSpecSecureSettingsArrayOutput {
	return o.ApplyT(func(v *ApmServerSpec) []ApmServerSpecSecureSettings {
		if v == nil {
			return nil
		}
		return v.SecureSettings
	}).(ApmServerSpecSecureSettingsArrayOutput)
}

// ServiceAccountName is used to check access from the current resource to a resource (for ex. Elasticsearch) in a different namespace.
// Can only be used if ECK is enforcing RBAC on references.
func (o ApmServerSpecPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpec) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

// Version of the APM Server.
func (o ApmServerSpecPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

// ElasticsearchRef is a reference to the output Elasticsearch cluster running in the same Kubernetes cluster.
type ApmServerSpecElasticsearchRef struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name *string `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace *string `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName *string `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName *string `pulumi:"serviceName"`
}

// ApmServerSpecElasticsearchRefInput is an input type that accepts ApmServerSpecElasticsearchRefArgs and ApmServerSpecElasticsearchRefOutput values.
// You can construct a concrete instance of `ApmServerSpecElasticsearchRefInput` via:
//
//	ApmServerSpecElasticsearchRefArgs{...}
type ApmServerSpecElasticsearchRefInput interface {
	pulumi.Input

	ToApmServerSpecElasticsearchRefOutput() ApmServerSpecElasticsearchRefOutput
	ToApmServerSpecElasticsearchRefOutputWithContext(context.Context) ApmServerSpecElasticsearchRefOutput
}

// ElasticsearchRef is a reference to the output Elasticsearch cluster running in the same Kubernetes cluster.
type ApmServerSpecElasticsearchRefArgs struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
}

func (ApmServerSpecElasticsearchRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecElasticsearchRef)(nil)).Elem()
}

func (i ApmServerSpecElasticsearchRefArgs) ToApmServerSpecElasticsearchRefOutput() ApmServerSpecElasticsearchRefOutput {
	return i.ToApmServerSpecElasticsearchRefOutputWithContext(context.Background())
}

func (i ApmServerSpecElasticsearchRefArgs) ToApmServerSpecElasticsearchRefOutputWithContext(ctx context.Context) ApmServerSpecElasticsearchRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecElasticsearchRefOutput)
}

func (i ApmServerSpecElasticsearchRefArgs) ToApmServerSpecElasticsearchRefPtrOutput() ApmServerSpecElasticsearchRefPtrOutput {
	return i.ToApmServerSpecElasticsearchRefPtrOutputWithContext(context.Background())
}

func (i ApmServerSpecElasticsearchRefArgs) ToApmServerSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) ApmServerSpecElasticsearchRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecElasticsearchRefOutput).ToApmServerSpecElasticsearchRefPtrOutputWithContext(ctx)
}

// ApmServerSpecElasticsearchRefPtrInput is an input type that accepts ApmServerSpecElasticsearchRefArgs, ApmServerSpecElasticsearchRefPtr and ApmServerSpecElasticsearchRefPtrOutput values.
// You can construct a concrete instance of `ApmServerSpecElasticsearchRefPtrInput` via:
//
//	        ApmServerSpecElasticsearchRefArgs{...}
//
//	or:
//
//	        nil
type ApmServerSpecElasticsearchRefPtrInput interface {
	pulumi.Input

	ToApmServerSpecElasticsearchRefPtrOutput() ApmServerSpecElasticsearchRefPtrOutput
	ToApmServerSpecElasticsearchRefPtrOutputWithContext(context.Context) ApmServerSpecElasticsearchRefPtrOutput
}

type apmServerSpecElasticsearchRefPtrType ApmServerSpecElasticsearchRefArgs

func ApmServerSpecElasticsearchRefPtr(v *ApmServerSpecElasticsearchRefArgs) ApmServerSpecElasticsearchRefPtrInput {
	return (*apmServerSpecElasticsearchRefPtrType)(v)
}

func (*apmServerSpecElasticsearchRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecElasticsearchRef)(nil)).Elem()
}

func (i *apmServerSpecElasticsearchRefPtrType) ToApmServerSpecElasticsearchRefPtrOutput() ApmServerSpecElasticsearchRefPtrOutput {
	return i.ToApmServerSpecElasticsearchRefPtrOutputWithContext(context.Background())
}

func (i *apmServerSpecElasticsearchRefPtrType) ToApmServerSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) ApmServerSpecElasticsearchRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecElasticsearchRefPtrOutput)
}

// ElasticsearchRef is a reference to the output Elasticsearch cluster running in the same Kubernetes cluster.
type ApmServerSpecElasticsearchRefOutput struct{ *pulumi.OutputState }

func (ApmServerSpecElasticsearchRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecElasticsearchRef)(nil)).Elem()
}

func (o ApmServerSpecElasticsearchRefOutput) ToApmServerSpecElasticsearchRefOutput() ApmServerSpecElasticsearchRefOutput {
	return o
}

func (o ApmServerSpecElasticsearchRefOutput) ToApmServerSpecElasticsearchRefOutputWithContext(ctx context.Context) ApmServerSpecElasticsearchRefOutput {
	return o
}

func (o ApmServerSpecElasticsearchRefOutput) ToApmServerSpecElasticsearchRefPtrOutput() ApmServerSpecElasticsearchRefPtrOutput {
	return o.ToApmServerSpecElasticsearchRefPtrOutputWithContext(context.Background())
}

func (o ApmServerSpecElasticsearchRefOutput) ToApmServerSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) ApmServerSpecElasticsearchRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApmServerSpecElasticsearchRef) *ApmServerSpecElasticsearchRef {
		return &v
	}).(ApmServerSpecElasticsearchRefPtrOutput)
}

// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
func (o ApmServerSpecElasticsearchRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecElasticsearchRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o ApmServerSpecElasticsearchRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecElasticsearchRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
// Elastic resource not managed by the operator. The referenced secret must contain the following:
//   - `url`: the URL to reach the Elastic resource
//   - `username`: the username of the user to be authenticated to the Elastic resource
//   - `password`: the password of the user to be authenticated to the Elastic resource
//   - `ca.crt`: the CA certificate in PEM format (optional)
//   - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
//     This field cannot be used in combination with the other fields name, namespace or serviceName.
func (o ApmServerSpecElasticsearchRefOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecElasticsearchRef) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
// the referenced resource is used.
func (o ApmServerSpecElasticsearchRefOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecElasticsearchRef) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

type ApmServerSpecElasticsearchRefPtrOutput struct{ *pulumi.OutputState }

func (ApmServerSpecElasticsearchRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecElasticsearchRef)(nil)).Elem()
}

func (o ApmServerSpecElasticsearchRefPtrOutput) ToApmServerSpecElasticsearchRefPtrOutput() ApmServerSpecElasticsearchRefPtrOutput {
	return o
}

func (o ApmServerSpecElasticsearchRefPtrOutput) ToApmServerSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) ApmServerSpecElasticsearchRefPtrOutput {
	return o
}

func (o ApmServerSpecElasticsearchRefPtrOutput) Elem() ApmServerSpecElasticsearchRefOutput {
	return o.ApplyT(func(v *ApmServerSpecElasticsearchRef) ApmServerSpecElasticsearchRef {
		if v != nil {
			return *v
		}
		var ret ApmServerSpecElasticsearchRef
		return ret
	}).(ApmServerSpecElasticsearchRefOutput)
}

// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
func (o ApmServerSpecElasticsearchRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o ApmServerSpecElasticsearchRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
// Elastic resource not managed by the operator. The referenced secret must contain the following:
//   - `url`: the URL to reach the Elastic resource
//   - `username`: the username of the user to be authenticated to the Elastic resource
//   - `password`: the password of the user to be authenticated to the Elastic resource
//   - `ca.crt`: the CA certificate in PEM format (optional)
//   - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
//     This field cannot be used in combination with the other fields name, namespace or serviceName.
func (o ApmServerSpecElasticsearchRefPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
// the referenced resource is used.
func (o ApmServerSpecElasticsearchRefPtrOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return v.ServiceName
	}).(pulumi.StringPtrOutput)
}

// HTTP holds the HTTP layer configuration for the APM Server resource.
type ApmServerSpecHttp struct {
	// Service defines the template for the associated Kubernetes Service object.
	Service *ApmServerSpecHttpService `pulumi:"service"`
	// TLS defines options for configuring TLS for HTTP.
	Tls *ApmServerSpecHttpTls `pulumi:"tls"`
}

// ApmServerSpecHttpInput is an input type that accepts ApmServerSpecHttpArgs and ApmServerSpecHttpOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpInput` via:
//
//	ApmServerSpecHttpArgs{...}
type ApmServerSpecHttpInput interface {
	pulumi.Input

	ToApmServerSpecHttpOutput() ApmServerSpecHttpOutput
	ToApmServerSpecHttpOutputWithContext(context.Context) ApmServerSpecHttpOutput
}

// HTTP holds the HTTP layer configuration for the APM Server resource.
type ApmServerSpecHttpArgs struct {
	// Service defines the template for the associated Kubernetes Service object.
	Service ApmServerSpecHttpServicePtrInput `pulumi:"service"`
	// TLS defines options for configuring TLS for HTTP.
	Tls ApmServerSpecHttpTlsPtrInput `pulumi:"tls"`
}

func (ApmServerSpecHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttp)(nil)).Elem()
}

func (i ApmServerSpecHttpArgs) ToApmServerSpecHttpOutput() ApmServerSpecHttpOutput {
	return i.ToApmServerSpecHttpOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpArgs) ToApmServerSpecHttpOutputWithContext(ctx context.Context) ApmServerSpecHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpOutput)
}

func (i ApmServerSpecHttpArgs) ToApmServerSpecHttpPtrOutput() ApmServerSpecHttpPtrOutput {
	return i.ToApmServerSpecHttpPtrOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpArgs) ToApmServerSpecHttpPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpOutput).ToApmServerSpecHttpPtrOutputWithContext(ctx)
}

// ApmServerSpecHttpPtrInput is an input type that accepts ApmServerSpecHttpArgs, ApmServerSpecHttpPtr and ApmServerSpecHttpPtrOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpPtrInput` via:
//
//	        ApmServerSpecHttpArgs{...}
//
//	or:
//
//	        nil
type ApmServerSpecHttpPtrInput interface {
	pulumi.Input

	ToApmServerSpecHttpPtrOutput() ApmServerSpecHttpPtrOutput
	ToApmServerSpecHttpPtrOutputWithContext(context.Context) ApmServerSpecHttpPtrOutput
}

type apmServerSpecHttpPtrType ApmServerSpecHttpArgs

func ApmServerSpecHttpPtr(v *ApmServerSpecHttpArgs) ApmServerSpecHttpPtrInput {
	return (*apmServerSpecHttpPtrType)(v)
}

func (*apmServerSpecHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttp)(nil)).Elem()
}

func (i *apmServerSpecHttpPtrType) ToApmServerSpecHttpPtrOutput() ApmServerSpecHttpPtrOutput {
	return i.ToApmServerSpecHttpPtrOutputWithContext(context.Background())
}

func (i *apmServerSpecHttpPtrType) ToApmServerSpecHttpPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpPtrOutput)
}

// HTTP holds the HTTP layer configuration for the APM Server resource.
type ApmServerSpecHttpOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttp)(nil)).Elem()
}

func (o ApmServerSpecHttpOutput) ToApmServerSpecHttpOutput() ApmServerSpecHttpOutput {
	return o
}

func (o ApmServerSpecHttpOutput) ToApmServerSpecHttpOutputWithContext(ctx context.Context) ApmServerSpecHttpOutput {
	return o
}

func (o ApmServerSpecHttpOutput) ToApmServerSpecHttpPtrOutput() ApmServerSpecHttpPtrOutput {
	return o.ToApmServerSpecHttpPtrOutputWithContext(context.Background())
}

func (o ApmServerSpecHttpOutput) ToApmServerSpecHttpPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApmServerSpecHttp) *ApmServerSpecHttp {
		return &v
	}).(ApmServerSpecHttpPtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
func (o ApmServerSpecHttpOutput) Service() ApmServerSpecHttpServicePtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttp) *ApmServerSpecHttpService { return v.Service }).(ApmServerSpecHttpServicePtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
func (o ApmServerSpecHttpOutput) Tls() ApmServerSpecHttpTlsPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttp) *ApmServerSpecHttpTls { return v.Tls }).(ApmServerSpecHttpTlsPtrOutput)
}

type ApmServerSpecHttpPtrOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttp)(nil)).Elem()
}

func (o ApmServerSpecHttpPtrOutput) ToApmServerSpecHttpPtrOutput() ApmServerSpecHttpPtrOutput {
	return o
}

func (o ApmServerSpecHttpPtrOutput) ToApmServerSpecHttpPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpPtrOutput {
	return o
}

func (o ApmServerSpecHttpPtrOutput) Elem() ApmServerSpecHttpOutput {
	return o.ApplyT(func(v *ApmServerSpecHttp) ApmServerSpecHttp {
		if v != nil {
			return *v
		}
		var ret ApmServerSpecHttp
		return ret
	}).(ApmServerSpecHttpOutput)
}

// Service defines the template for the associated Kubernetes Service object.
func (o ApmServerSpecHttpPtrOutput) Service() ApmServerSpecHttpServicePtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttp) *ApmServerSpecHttpService {
		if v == nil {
			return nil
		}
		return v.Service
	}).(ApmServerSpecHttpServicePtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
func (o ApmServerSpecHttpPtrOutput) Tls() ApmServerSpecHttpTlsPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttp) *ApmServerSpecHttpTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(ApmServerSpecHttpTlsPtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
type ApmServerSpecHttpService struct {
	// ObjectMeta is the metadata of the service.
	// The name and namespace provided here are managed by ECK and will be ignored.
	Metadata *ApmServerSpecHttpServiceMetadata `pulumi:"metadata"`
	// Spec is the specification of the service.
	Spec *ApmServerSpecHttpServiceSpec `pulumi:"spec"`
}

// ApmServerSpecHttpServiceInput is an input type that accepts ApmServerSpecHttpServiceArgs and ApmServerSpecHttpServiceOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpServiceInput` via:
//
//	ApmServerSpecHttpServiceArgs{...}
type ApmServerSpecHttpServiceInput interface {
	pulumi.Input

	ToApmServerSpecHttpServiceOutput() ApmServerSpecHttpServiceOutput
	ToApmServerSpecHttpServiceOutputWithContext(context.Context) ApmServerSpecHttpServiceOutput
}

// Service defines the template for the associated Kubernetes Service object.
type ApmServerSpecHttpServiceArgs struct {
	// ObjectMeta is the metadata of the service.
	// The name and namespace provided here are managed by ECK and will be ignored.
	Metadata ApmServerSpecHttpServiceMetadataPtrInput `pulumi:"metadata"`
	// Spec is the specification of the service.
	Spec ApmServerSpecHttpServiceSpecPtrInput `pulumi:"spec"`
}

func (ApmServerSpecHttpServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpService)(nil)).Elem()
}

func (i ApmServerSpecHttpServiceArgs) ToApmServerSpecHttpServiceOutput() ApmServerSpecHttpServiceOutput {
	return i.ToApmServerSpecHttpServiceOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpServiceArgs) ToApmServerSpecHttpServiceOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceOutput)
}

func (i ApmServerSpecHttpServiceArgs) ToApmServerSpecHttpServicePtrOutput() ApmServerSpecHttpServicePtrOutput {
	return i.ToApmServerSpecHttpServicePtrOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpServiceArgs) ToApmServerSpecHttpServicePtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceOutput).ToApmServerSpecHttpServicePtrOutputWithContext(ctx)
}

// ApmServerSpecHttpServicePtrInput is an input type that accepts ApmServerSpecHttpServiceArgs, ApmServerSpecHttpServicePtr and ApmServerSpecHttpServicePtrOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpServicePtrInput` via:
//
//	        ApmServerSpecHttpServiceArgs{...}
//
//	or:
//
//	        nil
type ApmServerSpecHttpServicePtrInput interface {
	pulumi.Input

	ToApmServerSpecHttpServicePtrOutput() ApmServerSpecHttpServicePtrOutput
	ToApmServerSpecHttpServicePtrOutputWithContext(context.Context) ApmServerSpecHttpServicePtrOutput
}

type apmServerSpecHttpServicePtrType ApmServerSpecHttpServiceArgs

func ApmServerSpecHttpServicePtr(v *ApmServerSpecHttpServiceArgs) ApmServerSpecHttpServicePtrInput {
	return (*apmServerSpecHttpServicePtrType)(v)
}

func (*apmServerSpecHttpServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpService)(nil)).Elem()
}

func (i *apmServerSpecHttpServicePtrType) ToApmServerSpecHttpServicePtrOutput() ApmServerSpecHttpServicePtrOutput {
	return i.ToApmServerSpecHttpServicePtrOutputWithContext(context.Background())
}

func (i *apmServerSpecHttpServicePtrType) ToApmServerSpecHttpServicePtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServicePtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
type ApmServerSpecHttpServiceOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpService)(nil)).Elem()
}

func (o ApmServerSpecHttpServiceOutput) ToApmServerSpecHttpServiceOutput() ApmServerSpecHttpServiceOutput {
	return o
}

func (o ApmServerSpecHttpServiceOutput) ToApmServerSpecHttpServiceOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceOutput {
	return o
}

func (o ApmServerSpecHttpServiceOutput) ToApmServerSpecHttpServicePtrOutput() ApmServerSpecHttpServicePtrOutput {
	return o.ToApmServerSpecHttpServicePtrOutputWithContext(context.Background())
}

func (o ApmServerSpecHttpServiceOutput) ToApmServerSpecHttpServicePtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApmServerSpecHttpService) *ApmServerSpecHttpService {
		return &v
	}).(ApmServerSpecHttpServicePtrOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
func (o ApmServerSpecHttpServiceOutput) Metadata() ApmServerSpecHttpServiceMetadataPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpService) *ApmServerSpecHttpServiceMetadata { return v.Metadata }).(ApmServerSpecHttpServiceMetadataPtrOutput)
}

// Spec is the specification of the service.
func (o ApmServerSpecHttpServiceOutput) Spec() ApmServerSpecHttpServiceSpecPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpService) *ApmServerSpecHttpServiceSpec { return v.Spec }).(ApmServerSpecHttpServiceSpecPtrOutput)
}

type ApmServerSpecHttpServicePtrOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpService)(nil)).Elem()
}

func (o ApmServerSpecHttpServicePtrOutput) ToApmServerSpecHttpServicePtrOutput() ApmServerSpecHttpServicePtrOutput {
	return o
}

func (o ApmServerSpecHttpServicePtrOutput) ToApmServerSpecHttpServicePtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServicePtrOutput {
	return o
}

func (o ApmServerSpecHttpServicePtrOutput) Elem() ApmServerSpecHttpServiceOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpService) ApmServerSpecHttpService {
		if v != nil {
			return *v
		}
		var ret ApmServerSpecHttpService
		return ret
	}).(ApmServerSpecHttpServiceOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
func (o ApmServerSpecHttpServicePtrOutput) Metadata() ApmServerSpecHttpServiceMetadataPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpService) *ApmServerSpecHttpServiceMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(ApmServerSpecHttpServiceMetadataPtrOutput)
}

// Spec is the specification of the service.
func (o ApmServerSpecHttpServicePtrOutput) Spec() ApmServerSpecHttpServiceSpecPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpService) *ApmServerSpecHttpServiceSpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(ApmServerSpecHttpServiceSpecPtrOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type ApmServerSpecHttpServiceMetadata struct {
	Annotations map[string]string `pulumi:"annotations"`
	Finalizers  []string          `pulumi:"finalizers"`
	Labels      map[string]string `pulumi:"labels"`
	Name        *string           `pulumi:"name"`
	Namespace   *string           `pulumi:"namespace"`
}

// ApmServerSpecHttpServiceMetadataInput is an input type that accepts ApmServerSpecHttpServiceMetadataArgs and ApmServerSpecHttpServiceMetadataOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpServiceMetadataInput` via:
//
//	ApmServerSpecHttpServiceMetadataArgs{...}
type ApmServerSpecHttpServiceMetadataInput interface {
	pulumi.Input

	ToApmServerSpecHttpServiceMetadataOutput() ApmServerSpecHttpServiceMetadataOutput
	ToApmServerSpecHttpServiceMetadataOutputWithContext(context.Context) ApmServerSpecHttpServiceMetadataOutput
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type ApmServerSpecHttpServiceMetadataArgs struct {
	Annotations pulumi.StringMapInput   `pulumi:"annotations"`
	Finalizers  pulumi.StringArrayInput `pulumi:"finalizers"`
	Labels      pulumi.StringMapInput   `pulumi:"labels"`
	Name        pulumi.StringPtrInput   `pulumi:"name"`
	Namespace   pulumi.StringPtrInput   `pulumi:"namespace"`
}

func (ApmServerSpecHttpServiceMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpServiceMetadata)(nil)).Elem()
}

func (i ApmServerSpecHttpServiceMetadataArgs) ToApmServerSpecHttpServiceMetadataOutput() ApmServerSpecHttpServiceMetadataOutput {
	return i.ToApmServerSpecHttpServiceMetadataOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpServiceMetadataArgs) ToApmServerSpecHttpServiceMetadataOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceMetadataOutput)
}

func (i ApmServerSpecHttpServiceMetadataArgs) ToApmServerSpecHttpServiceMetadataPtrOutput() ApmServerSpecHttpServiceMetadataPtrOutput {
	return i.ToApmServerSpecHttpServiceMetadataPtrOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpServiceMetadataArgs) ToApmServerSpecHttpServiceMetadataPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceMetadataOutput).ToApmServerSpecHttpServiceMetadataPtrOutputWithContext(ctx)
}

// ApmServerSpecHttpServiceMetadataPtrInput is an input type that accepts ApmServerSpecHttpServiceMetadataArgs, ApmServerSpecHttpServiceMetadataPtr and ApmServerSpecHttpServiceMetadataPtrOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpServiceMetadataPtrInput` via:
//
//	        ApmServerSpecHttpServiceMetadataArgs{...}
//
//	or:
//
//	        nil
type ApmServerSpecHttpServiceMetadataPtrInput interface {
	pulumi.Input

	ToApmServerSpecHttpServiceMetadataPtrOutput() ApmServerSpecHttpServiceMetadataPtrOutput
	ToApmServerSpecHttpServiceMetadataPtrOutputWithContext(context.Context) ApmServerSpecHttpServiceMetadataPtrOutput
}

type apmServerSpecHttpServiceMetadataPtrType ApmServerSpecHttpServiceMetadataArgs

func ApmServerSpecHttpServiceMetadataPtr(v *ApmServerSpecHttpServiceMetadataArgs) ApmServerSpecHttpServiceMetadataPtrInput {
	return (*apmServerSpecHttpServiceMetadataPtrType)(v)
}

func (*apmServerSpecHttpServiceMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpServiceMetadata)(nil)).Elem()
}

func (i *apmServerSpecHttpServiceMetadataPtrType) ToApmServerSpecHttpServiceMetadataPtrOutput() ApmServerSpecHttpServiceMetadataPtrOutput {
	return i.ToApmServerSpecHttpServiceMetadataPtrOutputWithContext(context.Background())
}

func (i *apmServerSpecHttpServiceMetadataPtrType) ToApmServerSpecHttpServiceMetadataPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceMetadataPtrOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type ApmServerSpecHttpServiceMetadataOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpServiceMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpServiceMetadata)(nil)).Elem()
}

func (o ApmServerSpecHttpServiceMetadataOutput) ToApmServerSpecHttpServiceMetadataOutput() ApmServerSpecHttpServiceMetadataOutput {
	return o
}

func (o ApmServerSpecHttpServiceMetadataOutput) ToApmServerSpecHttpServiceMetadataOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceMetadataOutput {
	return o
}

func (o ApmServerSpecHttpServiceMetadataOutput) ToApmServerSpecHttpServiceMetadataPtrOutput() ApmServerSpecHttpServiceMetadataPtrOutput {
	return o.ToApmServerSpecHttpServiceMetadataPtrOutputWithContext(context.Background())
}

func (o ApmServerSpecHttpServiceMetadataOutput) ToApmServerSpecHttpServiceMetadataPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApmServerSpecHttpServiceMetadata) *ApmServerSpecHttpServiceMetadata {
		return &v
	}).(ApmServerSpecHttpServiceMetadataPtrOutput)
}

func (o ApmServerSpecHttpServiceMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o ApmServerSpecHttpServiceMetadataOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceMetadata) []string { return v.Finalizers }).(pulumi.StringArrayOutput)
}

func (o ApmServerSpecHttpServiceMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o ApmServerSpecHttpServiceMetadataOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceMetadata) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ApmServerSpecHttpServiceMetadataOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceMetadata) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ApmServerSpecHttpServiceMetadataPtrOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpServiceMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpServiceMetadata)(nil)).Elem()
}

func (o ApmServerSpecHttpServiceMetadataPtrOutput) ToApmServerSpecHttpServiceMetadataPtrOutput() ApmServerSpecHttpServiceMetadataPtrOutput {
	return o
}

func (o ApmServerSpecHttpServiceMetadataPtrOutput) ToApmServerSpecHttpServiceMetadataPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceMetadataPtrOutput {
	return o
}

func (o ApmServerSpecHttpServiceMetadataPtrOutput) Elem() ApmServerSpecHttpServiceMetadataOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceMetadata) ApmServerSpecHttpServiceMetadata {
		if v != nil {
			return *v
		}
		var ret ApmServerSpecHttpServiceMetadata
		return ret
	}).(ApmServerSpecHttpServiceMetadataOutput)
}

func (o ApmServerSpecHttpServiceMetadataPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o ApmServerSpecHttpServiceMetadataPtrOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceMetadata) []string {
		if v == nil {
			return nil
		}
		return v.Finalizers
	}).(pulumi.StringArrayOutput)
}

func (o ApmServerSpecHttpServiceMetadataPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

func (o ApmServerSpecHttpServiceMetadataPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o ApmServerSpecHttpServiceMetadataPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type ApmServerSpecHttpServiceMetadataAnnotations struct {
}

type ApmServerSpecHttpServiceMetadataLabels struct {
}

// Spec is the specification of the service.
type ApmServerSpecHttpServiceSpec struct {
	// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
	// allocated for services with type LoadBalancer.  Default is "true". It
	// may be set to "false" if the cluster load-balancer does not rely on
	// NodePorts.  If the caller requests specific NodePorts (by specifying a
	// value), those requests will be respected, regardless of this field.
	// This field may only be set for services with type LoadBalancer and will
	// be cleared if the type is changed to any other type.
	AllocateLoadBalancerNodePorts *bool `pulumi:"allocateLoadBalancerNodePorts"`
	// clusterIP is the IP address of the service and is usually assigned
	// randomly. If an address is specified manually, is in-range (as per
	// system configuration), and is not in use, it will be allocated to the
	// service; otherwise creation of the service will fail. This field may not
	// be changed through updates unless the type field is also being changed
	// to ExternalName (which requires this field to be blank) or the type
	// field is being changed from ExternalName (in which case this field may
	// optionally be specified, as describe above).  Valid values are "None",
	// empty string (""), or a valid IP address. Setting this to "None" makes a
	// "headless service" (no virtual IP), which is useful when direct endpoint
	// connections are preferred and proxying is not required.  Only applies to
	// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
	// when creating a Service of type ExternalName, creation will fail. This
	// field will be wiped when updating a Service to type ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP *string `pulumi:"clusterIP"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are
	// usually assigned randomly.  If an address is specified manually, is
	// in-range (as per system configuration), and is not in use, it will be
	// allocated to the service; otherwise creation of the service will fail.
	// This field may not be changed through updates unless the type field is
	// also being changed to ExternalName (which requires this field to be
	// empty) or the type field is being changed from ExternalName (in which
	// case this field may optionally be specified, as describe above).  Valid
	// values are "None", empty string (""), or a valid IP address.  Setting
	// this to "None" makes a "headless service" (no virtual IP), which is
	// useful when direct endpoint connections are preferred and proxying is
	// not required.  Only applies to types ClusterIP, NodePort, and
	// LoadBalancer. If this field is specified when creating a Service of type
	// ExternalName, creation will fail. This field will be wiped when updating
	// a Service to type ExternalName.  If this field is not specified, it will
	// be initialized from the clusterIP field.  If this field is specified,
	// clients must ensure that clusterIPs[0] and clusterIP have the same
	// value.
	//
	// This field may hold a maximum of two entries (dual-stack IPs, in either order).
	// These IPs must correspond to the values of the ipFamilies field. Both
	// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIPs []string `pulumi:"clusterIPs"`
	// externalIPs is a list of IP addresses for which nodes in the cluster
	// will also accept traffic for this service.  These IPs are not managed by
	// Kubernetes.  The user is responsible for ensuring that traffic arrives
	// at a node with this IP.  A common example is external load-balancers
	// that are not part of the Kubernetes system.
	ExternalIPs []string `pulumi:"externalIPs"`
	// externalName is the external reference that discovery mechanisms will
	// return as an alias for this service (e.g. a DNS CNAME record). No
	// proxying will be involved.  Must be a lowercase RFC-1123 hostname
	// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName *string `pulumi:"externalName"`
	// externalTrafficPolicy describes how nodes distribute service traffic they
	// receive on one of the Service's "externally-facing" addresses (NodePorts,
	// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
	// the service in a way that assumes that external load balancers will take care
	// of balancing the service traffic between nodes, and so each node will deliver
	// traffic only to the node-local endpoints of the service, without masquerading
	// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
	// be dropped.) The default value, "Cluster", uses the standard behavior of
	// routing to all endpoints evenly (possibly modified by topology and other
	// features). Note that traffic sent to an External IP or LoadBalancer IP from
	// within the cluster will always get "Cluster" semantics, but clients sending to
	// a NodePort from within the cluster may need to take traffic policy into account
	// when picking a node.
	ExternalTrafficPolicy *string `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service.
	// This only applies when type is set to LoadBalancer and
	// externalTrafficPolicy is set to Local. If a value is specified, is
	// in-range, and is not in use, it will be used.  If not specified, a value
	// will be automatically allocated.  External systems (e.g. load-balancers)
	// can use this port to determine if a given node holds endpoints for this
	// service or not.  If this field is specified when creating a Service
	// which does not need it, creation will fail. This field will be wiped
	// when updating a Service to no longer need it (e.g. changing type).
	// This field cannot be updated once set.
	HealthCheckNodePort *int `pulumi:"healthCheckNodePort"`
	// InternalTrafficPolicy describes how nodes distribute service traffic they
	// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
	// only want to talk to endpoints of the service on the same node as the pod,
	// dropping the traffic if there are no local endpoints. The default value,
	// "Cluster", uses the standard behavior of routing to all endpoints evenly
	// (possibly modified by topology and other features).
	InternalTrafficPolicy *string `pulumi:"internalTrafficPolicy"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
	// service. This field is usually assigned automatically based on cluster
	// configuration and the ipFamilyPolicy field. If this field is specified
	// manually, the requested family is available in the cluster,
	// and ipFamilyPolicy allows it, it will be used; otherwise creation of
	// the service will fail. This field is conditionally mutable: it allows
	// for adding or removing a secondary IP family, but it does not allow
	// changing the primary IP family of the Service. Valid values are "IPv4"
	// and "IPv6".  This field only applies to Services of types ClusterIP,
	// NodePort, and LoadBalancer, and does apply to "headless" services.
	// This field will be wiped when updating a Service to type ExternalName.
	//
	// This field may hold a maximum of two entries (dual-stack families, in
	// either order).  These families must correspond to the values of the
	// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
	// governed by the ipFamilyPolicy field.
	IpFamilies []string `pulumi:"ipFamilies"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by
	// this Service. If there is no value provided, then this field will be set
	// to SingleStack. Services can be "SingleStack" (a single IP family),
	// "PreferDualStack" (two IP families on dual-stack configured clusters or
	// a single IP family on single-stack clusters), or "RequireDualStack"
	// (two IP families on dual-stack configured clusters, otherwise fail). The
	// ipFamilies and clusterIPs fields depend on the value of this field. This
	// field will be wiped when updating a service to type ExternalName.
	IpFamilyPolicy *string `pulumi:"ipFamilyPolicy"`
	// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
	// If specified, the value of this field must be a label-style identifier, with an optional prefix,
	// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
	// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
	// balancer implementation is used, today this is typically done through the cloud provider integration,
	// but should apply for any default implementation. If set, it is assumed that a load balancer
	// implementation is watching for Services with a matching class. Any default load balancer
	// implementation (e.g. cloud providers) should ignore Services that set this field.
	// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
	// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass *string `pulumi:"loadBalancerClass"`
	// Only applies to Service Type: LoadBalancer.
	// This feature depends on whether the underlying cloud-provider supports specifying
	// the loadBalancerIP when a load balancer is created.
	// This field will be ignored if the cloud-provider does not support the feature.
	// Deprecated: This field was under-specified and its meaning varies across implementations.
	// Using it is non-portable and it may not support dual-stack.
	// Users are encouraged to use implementation-specific annotations when available.
	LoadBalancerIP *string `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider
	// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
	// cloud-provider does not support the feature."
	// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
	LoadBalancerSourceRanges []string `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports []ApmServerSpecHttpServiceSpecPorts `pulumi:"ports"`
	// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
	// Service should disregard any indications of ready/not-ready.
	// The primary use case for setting this field is for a StatefulSet's Headless Service to
	// propagate SRV DNS records for its Pods for the purpose of peer discovery.
	// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
	// Services interpret this to mean that all endpoints are considered "ready" even if the
	// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
	// through the Endpoints or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses *bool `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this
	// selector. If empty or not present, the service is assumed to have an
	// external process managing its endpoints, which Kubernetes will not
	// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
	// Ignored if type is ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector map[string]string `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity.
	// Enable client IP based session affinity.
	// Must be ClientIP or None.
	// Defaults to None.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity *string `pulumi:"sessionAffinity"`
	// sessionAffinityConfig contains the configurations of session affinity.
	SessionAffinityConfig *ApmServerSpecHttpServiceSpecSessionAffinityConfig `pulumi:"sessionAffinityConfig"`
	// TrafficDistribution offers a way to express preferences for how traffic is
	// distributed to Service endpoints. Implementations can use this field as a
	// hint, but are not required to guarantee strict adherence. If the field is
	// not set, the implementation will apply its default routing strategy. If set
	// to "PreferClose", implementations should prioritize endpoints that are
	// topologically close (e.g., same zone).
	// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
	TrafficDistribution *string `pulumi:"trafficDistribution"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid
	// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
	// "ClusterIP" allocates a cluster-internal IP address for load-balancing
	// to endpoints. Endpoints are determined by the selector or if that is not
	// specified, by manual construction of an Endpoints object or
	// EndpointSlice objects. If clusterIP is "None", no virtual IP is
	// allocated and the endpoints are published as a set of endpoints rather
	// than a virtual IP.
	// "NodePort" builds on ClusterIP and allocates a port on every node which
	// routes to the same endpoints as the clusterIP.
	// "LoadBalancer" builds on NodePort and creates an external load-balancer
	// (if supported in the current cloud) which routes to the same endpoints
	// as the clusterIP.
	// "ExternalName" aliases this service to the specified externalName.
	// Several other fields do not apply to ExternalName services.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type *string `pulumi:"type"`
}

// ApmServerSpecHttpServiceSpecInput is an input type that accepts ApmServerSpecHttpServiceSpecArgs and ApmServerSpecHttpServiceSpecOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpServiceSpecInput` via:
//
//	ApmServerSpecHttpServiceSpecArgs{...}
type ApmServerSpecHttpServiceSpecInput interface {
	pulumi.Input

	ToApmServerSpecHttpServiceSpecOutput() ApmServerSpecHttpServiceSpecOutput
	ToApmServerSpecHttpServiceSpecOutputWithContext(context.Context) ApmServerSpecHttpServiceSpecOutput
}

// Spec is the specification of the service.
type ApmServerSpecHttpServiceSpecArgs struct {
	// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
	// allocated for services with type LoadBalancer.  Default is "true". It
	// may be set to "false" if the cluster load-balancer does not rely on
	// NodePorts.  If the caller requests specific NodePorts (by specifying a
	// value), those requests will be respected, regardless of this field.
	// This field may only be set for services with type LoadBalancer and will
	// be cleared if the type is changed to any other type.
	AllocateLoadBalancerNodePorts pulumi.BoolPtrInput `pulumi:"allocateLoadBalancerNodePorts"`
	// clusterIP is the IP address of the service and is usually assigned
	// randomly. If an address is specified manually, is in-range (as per
	// system configuration), and is not in use, it will be allocated to the
	// service; otherwise creation of the service will fail. This field may not
	// be changed through updates unless the type field is also being changed
	// to ExternalName (which requires this field to be blank) or the type
	// field is being changed from ExternalName (in which case this field may
	// optionally be specified, as describe above).  Valid values are "None",
	// empty string (""), or a valid IP address. Setting this to "None" makes a
	// "headless service" (no virtual IP), which is useful when direct endpoint
	// connections are preferred and proxying is not required.  Only applies to
	// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
	// when creating a Service of type ExternalName, creation will fail. This
	// field will be wiped when updating a Service to type ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP pulumi.StringPtrInput `pulumi:"clusterIP"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are
	// usually assigned randomly.  If an address is specified manually, is
	// in-range (as per system configuration), and is not in use, it will be
	// allocated to the service; otherwise creation of the service will fail.
	// This field may not be changed through updates unless the type field is
	// also being changed to ExternalName (which requires this field to be
	// empty) or the type field is being changed from ExternalName (in which
	// case this field may optionally be specified, as describe above).  Valid
	// values are "None", empty string (""), or a valid IP address.  Setting
	// this to "None" makes a "headless service" (no virtual IP), which is
	// useful when direct endpoint connections are preferred and proxying is
	// not required.  Only applies to types ClusterIP, NodePort, and
	// LoadBalancer. If this field is specified when creating a Service of type
	// ExternalName, creation will fail. This field will be wiped when updating
	// a Service to type ExternalName.  If this field is not specified, it will
	// be initialized from the clusterIP field.  If this field is specified,
	// clients must ensure that clusterIPs[0] and clusterIP have the same
	// value.
	//
	// This field may hold a maximum of two entries (dual-stack IPs, in either order).
	// These IPs must correspond to the values of the ipFamilies field. Both
	// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIPs pulumi.StringArrayInput `pulumi:"clusterIPs"`
	// externalIPs is a list of IP addresses for which nodes in the cluster
	// will also accept traffic for this service.  These IPs are not managed by
	// Kubernetes.  The user is responsible for ensuring that traffic arrives
	// at a node with this IP.  A common example is external load-balancers
	// that are not part of the Kubernetes system.
	ExternalIPs pulumi.StringArrayInput `pulumi:"externalIPs"`
	// externalName is the external reference that discovery mechanisms will
	// return as an alias for this service (e.g. a DNS CNAME record). No
	// proxying will be involved.  Must be a lowercase RFC-1123 hostname
	// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName pulumi.StringPtrInput `pulumi:"externalName"`
	// externalTrafficPolicy describes how nodes distribute service traffic they
	// receive on one of the Service's "externally-facing" addresses (NodePorts,
	// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
	// the service in a way that assumes that external load balancers will take care
	// of balancing the service traffic between nodes, and so each node will deliver
	// traffic only to the node-local endpoints of the service, without masquerading
	// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
	// be dropped.) The default value, "Cluster", uses the standard behavior of
	// routing to all endpoints evenly (possibly modified by topology and other
	// features). Note that traffic sent to an External IP or LoadBalancer IP from
	// within the cluster will always get "Cluster" semantics, but clients sending to
	// a NodePort from within the cluster may need to take traffic policy into account
	// when picking a node.
	ExternalTrafficPolicy pulumi.StringPtrInput `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service.
	// This only applies when type is set to LoadBalancer and
	// externalTrafficPolicy is set to Local. If a value is specified, is
	// in-range, and is not in use, it will be used.  If not specified, a value
	// will be automatically allocated.  External systems (e.g. load-balancers)
	// can use this port to determine if a given node holds endpoints for this
	// service or not.  If this field is specified when creating a Service
	// which does not need it, creation will fail. This field will be wiped
	// when updating a Service to no longer need it (e.g. changing type).
	// This field cannot be updated once set.
	HealthCheckNodePort pulumi.IntPtrInput `pulumi:"healthCheckNodePort"`
	// InternalTrafficPolicy describes how nodes distribute service traffic they
	// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
	// only want to talk to endpoints of the service on the same node as the pod,
	// dropping the traffic if there are no local endpoints. The default value,
	// "Cluster", uses the standard behavior of routing to all endpoints evenly
	// (possibly modified by topology and other features).
	InternalTrafficPolicy pulumi.StringPtrInput `pulumi:"internalTrafficPolicy"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
	// service. This field is usually assigned automatically based on cluster
	// configuration and the ipFamilyPolicy field. If this field is specified
	// manually, the requested family is available in the cluster,
	// and ipFamilyPolicy allows it, it will be used; otherwise creation of
	// the service will fail. This field is conditionally mutable: it allows
	// for adding or removing a secondary IP family, but it does not allow
	// changing the primary IP family of the Service. Valid values are "IPv4"
	// and "IPv6".  This field only applies to Services of types ClusterIP,
	// NodePort, and LoadBalancer, and does apply to "headless" services.
	// This field will be wiped when updating a Service to type ExternalName.
	//
	// This field may hold a maximum of two entries (dual-stack families, in
	// either order).  These families must correspond to the values of the
	// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
	// governed by the ipFamilyPolicy field.
	IpFamilies pulumi.StringArrayInput `pulumi:"ipFamilies"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by
	// this Service. If there is no value provided, then this field will be set
	// to SingleStack. Services can be "SingleStack" (a single IP family),
	// "PreferDualStack" (two IP families on dual-stack configured clusters or
	// a single IP family on single-stack clusters), or "RequireDualStack"
	// (two IP families on dual-stack configured clusters, otherwise fail). The
	// ipFamilies and clusterIPs fields depend on the value of this field. This
	// field will be wiped when updating a service to type ExternalName.
	IpFamilyPolicy pulumi.StringPtrInput `pulumi:"ipFamilyPolicy"`
	// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
	// If specified, the value of this field must be a label-style identifier, with an optional prefix,
	// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
	// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
	// balancer implementation is used, today this is typically done through the cloud provider integration,
	// but should apply for any default implementation. If set, it is assumed that a load balancer
	// implementation is watching for Services with a matching class. Any default load balancer
	// implementation (e.g. cloud providers) should ignore Services that set this field.
	// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
	// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass pulumi.StringPtrInput `pulumi:"loadBalancerClass"`
	// Only applies to Service Type: LoadBalancer.
	// This feature depends on whether the underlying cloud-provider supports specifying
	// the loadBalancerIP when a load balancer is created.
	// This field will be ignored if the cloud-provider does not support the feature.
	// Deprecated: This field was under-specified and its meaning varies across implementations.
	// Using it is non-portable and it may not support dual-stack.
	// Users are encouraged to use implementation-specific annotations when available.
	LoadBalancerIP pulumi.StringPtrInput `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider
	// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
	// cloud-provider does not support the feature."
	// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
	LoadBalancerSourceRanges pulumi.StringArrayInput `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports ApmServerSpecHttpServiceSpecPortsArrayInput `pulumi:"ports"`
	// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
	// Service should disregard any indications of ready/not-ready.
	// The primary use case for setting this field is for a StatefulSet's Headless Service to
	// propagate SRV DNS records for its Pods for the purpose of peer discovery.
	// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
	// Services interpret this to mean that all endpoints are considered "ready" even if the
	// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
	// through the Endpoints or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses pulumi.BoolPtrInput `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this
	// selector. If empty or not present, the service is assumed to have an
	// external process managing its endpoints, which Kubernetes will not
	// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
	// Ignored if type is ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector pulumi.StringMapInput `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity.
	// Enable client IP based session affinity.
	// Must be ClientIP or None.
	// Defaults to None.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity pulumi.StringPtrInput `pulumi:"sessionAffinity"`
	// sessionAffinityConfig contains the configurations of session affinity.
	SessionAffinityConfig ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrInput `pulumi:"sessionAffinityConfig"`
	// TrafficDistribution offers a way to express preferences for how traffic is
	// distributed to Service endpoints. Implementations can use this field as a
	// hint, but are not required to guarantee strict adherence. If the field is
	// not set, the implementation will apply its default routing strategy. If set
	// to "PreferClose", implementations should prioritize endpoints that are
	// topologically close (e.g., same zone).
	// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
	TrafficDistribution pulumi.StringPtrInput `pulumi:"trafficDistribution"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid
	// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
	// "ClusterIP" allocates a cluster-internal IP address for load-balancing
	// to endpoints. Endpoints are determined by the selector or if that is not
	// specified, by manual construction of an Endpoints object or
	// EndpointSlice objects. If clusterIP is "None", no virtual IP is
	// allocated and the endpoints are published as a set of endpoints rather
	// than a virtual IP.
	// "NodePort" builds on ClusterIP and allocates a port on every node which
	// routes to the same endpoints as the clusterIP.
	// "LoadBalancer" builds on NodePort and creates an external load-balancer
	// (if supported in the current cloud) which routes to the same endpoints
	// as the clusterIP.
	// "ExternalName" aliases this service to the specified externalName.
	// Several other fields do not apply to ExternalName services.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ApmServerSpecHttpServiceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpServiceSpec)(nil)).Elem()
}

func (i ApmServerSpecHttpServiceSpecArgs) ToApmServerSpecHttpServiceSpecOutput() ApmServerSpecHttpServiceSpecOutput {
	return i.ToApmServerSpecHttpServiceSpecOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpServiceSpecArgs) ToApmServerSpecHttpServiceSpecOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceSpecOutput)
}

func (i ApmServerSpecHttpServiceSpecArgs) ToApmServerSpecHttpServiceSpecPtrOutput() ApmServerSpecHttpServiceSpecPtrOutput {
	return i.ToApmServerSpecHttpServiceSpecPtrOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpServiceSpecArgs) ToApmServerSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceSpecOutput).ToApmServerSpecHttpServiceSpecPtrOutputWithContext(ctx)
}

// ApmServerSpecHttpServiceSpecPtrInput is an input type that accepts ApmServerSpecHttpServiceSpecArgs, ApmServerSpecHttpServiceSpecPtr and ApmServerSpecHttpServiceSpecPtrOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpServiceSpecPtrInput` via:
//
//	        ApmServerSpecHttpServiceSpecArgs{...}
//
//	or:
//
//	        nil
type ApmServerSpecHttpServiceSpecPtrInput interface {
	pulumi.Input

	ToApmServerSpecHttpServiceSpecPtrOutput() ApmServerSpecHttpServiceSpecPtrOutput
	ToApmServerSpecHttpServiceSpecPtrOutputWithContext(context.Context) ApmServerSpecHttpServiceSpecPtrOutput
}

type apmServerSpecHttpServiceSpecPtrType ApmServerSpecHttpServiceSpecArgs

func ApmServerSpecHttpServiceSpecPtr(v *ApmServerSpecHttpServiceSpecArgs) ApmServerSpecHttpServiceSpecPtrInput {
	return (*apmServerSpecHttpServiceSpecPtrType)(v)
}

func (*apmServerSpecHttpServiceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpServiceSpec)(nil)).Elem()
}

func (i *apmServerSpecHttpServiceSpecPtrType) ToApmServerSpecHttpServiceSpecPtrOutput() ApmServerSpecHttpServiceSpecPtrOutput {
	return i.ToApmServerSpecHttpServiceSpecPtrOutputWithContext(context.Background())
}

func (i *apmServerSpecHttpServiceSpecPtrType) ToApmServerSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceSpecPtrOutput)
}

// Spec is the specification of the service.
type ApmServerSpecHttpServiceSpecOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpServiceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpServiceSpec)(nil)).Elem()
}

func (o ApmServerSpecHttpServiceSpecOutput) ToApmServerSpecHttpServiceSpecOutput() ApmServerSpecHttpServiceSpecOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecOutput) ToApmServerSpecHttpServiceSpecOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecOutput) ToApmServerSpecHttpServiceSpecPtrOutput() ApmServerSpecHttpServiceSpecPtrOutput {
	return o.ToApmServerSpecHttpServiceSpecPtrOutputWithContext(context.Background())
}

func (o ApmServerSpecHttpServiceSpecOutput) ToApmServerSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApmServerSpecHttpServiceSpec) *ApmServerSpecHttpServiceSpec {
		return &v
	}).(ApmServerSpecHttpServiceSpecPtrOutput)
}

// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
// allocated for services with type LoadBalancer.  Default is "true". It
// may be set to "false" if the cluster load-balancer does not rely on
// NodePorts.  If the caller requests specific NodePorts (by specifying a
// value), those requests will be respected, regardless of this field.
// This field may only be set for services with type LoadBalancer and will
// be cleared if the type is changed to any other type.
func (o ApmServerSpecHttpServiceSpecOutput) AllocateLoadBalancerNodePorts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) *bool { return v.AllocateLoadBalancerNodePorts }).(pulumi.BoolPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned
// randomly. If an address is specified manually, is in-range (as per
// system configuration), and is not in use, it will be allocated to the
// service; otherwise creation of the service will fail. This field may not
// be changed through updates unless the type field is also being changed
// to ExternalName (which requires this field to be blank) or the type
// field is being changed from ExternalName (in which case this field may
// optionally be specified, as describe above).  Valid values are "None",
// empty string (""), or a valid IP address. Setting this to "None" makes a
// "headless service" (no virtual IP), which is useful when direct endpoint
// connections are preferred and proxying is not required.  Only applies to
// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
// when creating a Service of type ExternalName, creation will fail. This
// field will be wiped when updating a Service to type ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ApmServerSpecHttpServiceSpecOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) *string { return v.ClusterIP }).(pulumi.StringPtrOutput)
}

// ClusterIPs is a list of IP addresses assigned to this service, and are
// usually assigned randomly.  If an address is specified manually, is
// in-range (as per system configuration), and is not in use, it will be
// allocated to the service; otherwise creation of the service will fail.
// This field may not be changed through updates unless the type field is
// also being changed to ExternalName (which requires this field to be
// empty) or the type field is being changed from ExternalName (in which
// case this field may optionally be specified, as describe above).  Valid
// values are "None", empty string (""), or a valid IP address.  Setting
// this to "None" makes a "headless service" (no virtual IP), which is
// useful when direct endpoint connections are preferred and proxying is
// not required.  Only applies to types ClusterIP, NodePort, and
// LoadBalancer. If this field is specified when creating a Service of type
// ExternalName, creation will fail. This field will be wiped when updating
// a Service to type ExternalName.  If this field is not specified, it will
// be initialized from the clusterIP field.  If this field is specified,
// clients must ensure that clusterIPs[0] and clusterIP have the same
// value.
//
// This field may hold a maximum of two entries (dual-stack IPs, in either order).
// These IPs must correspond to the values of the ipFamilies field. Both
// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ApmServerSpecHttpServiceSpecOutput) ClusterIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) []string { return v.ClusterIPs }).(pulumi.StringArrayOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster
// will also accept traffic for this service.  These IPs are not managed by
// Kubernetes.  The user is responsible for ensuring that traffic arrives
// at a node with this IP.  A common example is external load-balancers
// that are not part of the Kubernetes system.
func (o ApmServerSpecHttpServiceSpecOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) []string { return v.ExternalIPs }).(pulumi.StringArrayOutput)
}

// externalName is the external reference that discovery mechanisms will
// return as an alias for this service (e.g. a DNS CNAME record). No
// proxying will be involved.  Must be a lowercase RFC-1123 hostname
// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
func (o ApmServerSpecHttpServiceSpecOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) *string { return v.ExternalName }).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy describes how nodes distribute service traffic they
// receive on one of the Service's "externally-facing" addresses (NodePorts,
// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
// the service in a way that assumes that external load balancers will take care
// of balancing the service traffic between nodes, and so each node will deliver
// traffic only to the node-local endpoints of the service, without masquerading
// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
// be dropped.) The default value, "Cluster", uses the standard behavior of
// routing to all endpoints evenly (possibly modified by topology and other
// features). Note that traffic sent to an External IP or LoadBalancer IP from
// within the cluster will always get "Cluster" semantics, but clients sending to
// a NodePort from within the cluster may need to take traffic policy into account
// when picking a node.
func (o ApmServerSpecHttpServiceSpecOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) *string { return v.ExternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service.
// This only applies when type is set to LoadBalancer and
// externalTrafficPolicy is set to Local. If a value is specified, is
// in-range, and is not in use, it will be used.  If not specified, a value
// will be automatically allocated.  External systems (e.g. load-balancers)
// can use this port to determine if a given node holds endpoints for this
// service or not.  If this field is specified when creating a Service
// which does not need it, creation will fail. This field will be wiped
// when updating a Service to no longer need it (e.g. changing type).
// This field cannot be updated once set.
func (o ApmServerSpecHttpServiceSpecOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) *int { return v.HealthCheckNodePort }).(pulumi.IntPtrOutput)
}

// InternalTrafficPolicy describes how nodes distribute service traffic they
// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
// only want to talk to endpoints of the service on the same node as the pod,
// dropping the traffic if there are no local endpoints. The default value,
// "Cluster", uses the standard behavior of routing to all endpoints evenly
// (possibly modified by topology and other features).
func (o ApmServerSpecHttpServiceSpecOutput) InternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) *string { return v.InternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
// service. This field is usually assigned automatically based on cluster
// configuration and the ipFamilyPolicy field. If this field is specified
// manually, the requested family is available in the cluster,
// and ipFamilyPolicy allows it, it will be used; otherwise creation of
// the service will fail. This field is conditionally mutable: it allows
// for adding or removing a secondary IP family, but it does not allow
// changing the primary IP family of the Service. Valid values are "IPv4"
// and "IPv6".  This field only applies to Services of types ClusterIP,
// NodePort, and LoadBalancer, and does apply to "headless" services.
// This field will be wiped when updating a Service to type ExternalName.
//
// This field may hold a maximum of two entries (dual-stack families, in
// either order).  These families must correspond to the values of the
// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
// governed by the ipFamilyPolicy field.
func (o ApmServerSpecHttpServiceSpecOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) []string { return v.IpFamilies }).(pulumi.StringArrayOutput)
}

// IPFamilyPolicy represents the dual-stack-ness requested or required by
// this Service. If there is no value provided, then this field will be set
// to SingleStack. Services can be "SingleStack" (a single IP family),
// "PreferDualStack" (two IP families on dual-stack configured clusters or
// a single IP family on single-stack clusters), or "RequireDualStack"
// (two IP families on dual-stack configured clusters, otherwise fail). The
// ipFamilies and clusterIPs fields depend on the value of this field. This
// field will be wiped when updating a service to type ExternalName.
func (o ApmServerSpecHttpServiceSpecOutput) IpFamilyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) *string { return v.IpFamilyPolicy }).(pulumi.StringPtrOutput)
}

// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
// If specified, the value of this field must be a label-style identifier, with an optional prefix,
// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
// balancer implementation is used, today this is typically done through the cloud provider integration,
// but should apply for any default implementation. If set, it is assumed that a load balancer
// implementation is watching for Services with a matching class. Any default load balancer
// implementation (e.g. cloud providers) should ignore Services that set this field.
// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
func (o ApmServerSpecHttpServiceSpecOutput) LoadBalancerClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) *string { return v.LoadBalancerClass }).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer.
// This feature depends on whether the underlying cloud-provider supports specifying
// the loadBalancerIP when a load balancer is created.
// This field will be ignored if the cloud-provider does not support the feature.
// Deprecated: This field was under-specified and its meaning varies across implementations.
// Using it is non-portable and it may not support dual-stack.
// Users are encouraged to use implementation-specific annotations when available.
func (o ApmServerSpecHttpServiceSpecOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) *string { return v.LoadBalancerIP }).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider
// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
// cloud-provider does not support the feature."
// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
func (o ApmServerSpecHttpServiceSpecOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) []string { return v.LoadBalancerSourceRanges }).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ApmServerSpecHttpServiceSpecOutput) Ports() ApmServerSpecHttpServiceSpecPortsArrayOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) []ApmServerSpecHttpServiceSpecPorts { return v.Ports }).(ApmServerSpecHttpServiceSpecPortsArrayOutput)
}

// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
// Service should disregard any indications of ready/not-ready.
// The primary use case for setting this field is for a StatefulSet's Headless Service to
// propagate SRV DNS records for its Pods for the purpose of peer discovery.
// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
// Services interpret this to mean that all endpoints are considered "ready" even if the
// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
// through the Endpoints or EndpointSlice resources can safely assume this behavior.
func (o ApmServerSpecHttpServiceSpecOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) *bool { return v.PublishNotReadyAddresses }).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this
// selector. If empty or not present, the service is assumed to have an
// external process managing its endpoints, which Kubernetes will not
// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
// Ignored if type is ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o ApmServerSpecHttpServiceSpecOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) map[string]string { return v.Selector }).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity.
// Enable client IP based session affinity.
// Must be ClientIP or None.
// Defaults to None.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ApmServerSpecHttpServiceSpecOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) *string { return v.SessionAffinity }).(pulumi.StringPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
func (o ApmServerSpecHttpServiceSpecOutput) SessionAffinityConfig() ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) *ApmServerSpecHttpServiceSpecSessionAffinityConfig {
		return v.SessionAffinityConfig
	}).(ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// TrafficDistribution offers a way to express preferences for how traffic is
// distributed to Service endpoints. Implementations can use this field as a
// hint, but are not required to guarantee strict adherence. If the field is
// not set, the implementation will apply its default routing strategy. If set
// to "PreferClose", implementations should prioritize endpoints that are
// topologically close (e.g., same zone).
// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
func (o ApmServerSpecHttpServiceSpecOutput) TrafficDistribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) *string { return v.TrafficDistribution }).(pulumi.StringPtrOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid
// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
// "ClusterIP" allocates a cluster-internal IP address for load-balancing
// to endpoints. Endpoints are determined by the selector or if that is not
// specified, by manual construction of an Endpoints object or
// EndpointSlice objects. If clusterIP is "None", no virtual IP is
// allocated and the endpoints are published as a set of endpoints rather
// than a virtual IP.
// "NodePort" builds on ClusterIP and allocates a port on every node which
// routes to the same endpoints as the clusterIP.
// "LoadBalancer" builds on NodePort and creates an external load-balancer
// (if supported in the current cloud) which routes to the same endpoints
// as the clusterIP.
// "ExternalName" aliases this service to the specified externalName.
// Several other fields do not apply to ExternalName services.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o ApmServerSpecHttpServiceSpecOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpec) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ApmServerSpecHttpServiceSpecPtrOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpServiceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpServiceSpec)(nil)).Elem()
}

func (o ApmServerSpecHttpServiceSpecPtrOutput) ToApmServerSpecHttpServiceSpecPtrOutput() ApmServerSpecHttpServiceSpecPtrOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecPtrOutput) ToApmServerSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecPtrOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecPtrOutput) Elem() ApmServerSpecHttpServiceSpecOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) ApmServerSpecHttpServiceSpec {
		if v != nil {
			return *v
		}
		var ret ApmServerSpecHttpServiceSpec
		return ret
	}).(ApmServerSpecHttpServiceSpecOutput)
}

// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
// allocated for services with type LoadBalancer.  Default is "true". It
// may be set to "false" if the cluster load-balancer does not rely on
// NodePorts.  If the caller requests specific NodePorts (by specifying a
// value), those requests will be respected, regardless of this field.
// This field may only be set for services with type LoadBalancer and will
// be cleared if the type is changed to any other type.
func (o ApmServerSpecHttpServiceSpecPtrOutput) AllocateLoadBalancerNodePorts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.AllocateLoadBalancerNodePorts
	}).(pulumi.BoolPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned
// randomly. If an address is specified manually, is in-range (as per
// system configuration), and is not in use, it will be allocated to the
// service; otherwise creation of the service will fail. This field may not
// be changed through updates unless the type field is also being changed
// to ExternalName (which requires this field to be blank) or the type
// field is being changed from ExternalName (in which case this field may
// optionally be specified, as describe above).  Valid values are "None",
// empty string (""), or a valid IP address. Setting this to "None" makes a
// "headless service" (no virtual IP), which is useful when direct endpoint
// connections are preferred and proxying is not required.  Only applies to
// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
// when creating a Service of type ExternalName, creation will fail. This
// field will be wiped when updating a Service to type ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ApmServerSpecHttpServiceSpecPtrOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ClusterIP
	}).(pulumi.StringPtrOutput)
}

// ClusterIPs is a list of IP addresses assigned to this service, and are
// usually assigned randomly.  If an address is specified manually, is
// in-range (as per system configuration), and is not in use, it will be
// allocated to the service; otherwise creation of the service will fail.
// This field may not be changed through updates unless the type field is
// also being changed to ExternalName (which requires this field to be
// empty) or the type field is being changed from ExternalName (in which
// case this field may optionally be specified, as describe above).  Valid
// values are "None", empty string (""), or a valid IP address.  Setting
// this to "None" makes a "headless service" (no virtual IP), which is
// useful when direct endpoint connections are preferred and proxying is
// not required.  Only applies to types ClusterIP, NodePort, and
// LoadBalancer. If this field is specified when creating a Service of type
// ExternalName, creation will fail. This field will be wiped when updating
// a Service to type ExternalName.  If this field is not specified, it will
// be initialized from the clusterIP field.  If this field is specified,
// clients must ensure that clusterIPs[0] and clusterIP have the same
// value.
//
// This field may hold a maximum of two entries (dual-stack IPs, in either order).
// These IPs must correspond to the values of the ipFamilies field. Both
// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ApmServerSpecHttpServiceSpecPtrOutput) ClusterIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.ClusterIPs
	}).(pulumi.StringArrayOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster
// will also accept traffic for this service.  These IPs are not managed by
// Kubernetes.  The user is responsible for ensuring that traffic arrives
// at a node with this IP.  A common example is external load-balancers
// that are not part of the Kubernetes system.
func (o ApmServerSpecHttpServiceSpecPtrOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.ExternalIPs
	}).(pulumi.StringArrayOutput)
}

// externalName is the external reference that discovery mechanisms will
// return as an alias for this service (e.g. a DNS CNAME record). No
// proxying will be involved.  Must be a lowercase RFC-1123 hostname
// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
func (o ApmServerSpecHttpServiceSpecPtrOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ExternalName
	}).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy describes how nodes distribute service traffic they
// receive on one of the Service's "externally-facing" addresses (NodePorts,
// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
// the service in a way that assumes that external load balancers will take care
// of balancing the service traffic between nodes, and so each node will deliver
// traffic only to the node-local endpoints of the service, without masquerading
// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
// be dropped.) The default value, "Cluster", uses the standard behavior of
// routing to all endpoints evenly (possibly modified by topology and other
// features). Note that traffic sent to an External IP or LoadBalancer IP from
// within the cluster will always get "Cluster" semantics, but clients sending to
// a NodePort from within the cluster may need to take traffic policy into account
// when picking a node.
func (o ApmServerSpecHttpServiceSpecPtrOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ExternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service.
// This only applies when type is set to LoadBalancer and
// externalTrafficPolicy is set to Local. If a value is specified, is
// in-range, and is not in use, it will be used.  If not specified, a value
// will be automatically allocated.  External systems (e.g. load-balancers)
// can use this port to determine if a given node holds endpoints for this
// service or not.  If this field is specified when creating a Service
// which does not need it, creation will fail. This field will be wiped
// when updating a Service to no longer need it (e.g. changing type).
// This field cannot be updated once set.
func (o ApmServerSpecHttpServiceSpecPtrOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) *int {
		if v == nil {
			return nil
		}
		return v.HealthCheckNodePort
	}).(pulumi.IntPtrOutput)
}

// InternalTrafficPolicy describes how nodes distribute service traffic they
// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
// only want to talk to endpoints of the service on the same node as the pod,
// dropping the traffic if there are no local endpoints. The default value,
// "Cluster", uses the standard behavior of routing to all endpoints evenly
// (possibly modified by topology and other features).
func (o ApmServerSpecHttpServiceSpecPtrOutput) InternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.InternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
// service. This field is usually assigned automatically based on cluster
// configuration and the ipFamilyPolicy field. If this field is specified
// manually, the requested family is available in the cluster,
// and ipFamilyPolicy allows it, it will be used; otherwise creation of
// the service will fail. This field is conditionally mutable: it allows
// for adding or removing a secondary IP family, but it does not allow
// changing the primary IP family of the Service. Valid values are "IPv4"
// and "IPv6".  This field only applies to Services of types ClusterIP,
// NodePort, and LoadBalancer, and does apply to "headless" services.
// This field will be wiped when updating a Service to type ExternalName.
//
// This field may hold a maximum of two entries (dual-stack families, in
// either order).  These families must correspond to the values of the
// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
// governed by the ipFamilyPolicy field.
func (o ApmServerSpecHttpServiceSpecPtrOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.IpFamilies
	}).(pulumi.StringArrayOutput)
}

// IPFamilyPolicy represents the dual-stack-ness requested or required by
// this Service. If there is no value provided, then this field will be set
// to SingleStack. Services can be "SingleStack" (a single IP family),
// "PreferDualStack" (two IP families on dual-stack configured clusters or
// a single IP family on single-stack clusters), or "RequireDualStack"
// (two IP families on dual-stack configured clusters, otherwise fail). The
// ipFamilies and clusterIPs fields depend on the value of this field. This
// field will be wiped when updating a service to type ExternalName.
func (o ApmServerSpecHttpServiceSpecPtrOutput) IpFamilyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.IpFamilyPolicy
	}).(pulumi.StringPtrOutput)
}

// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
// If specified, the value of this field must be a label-style identifier, with an optional prefix,
// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
// balancer implementation is used, today this is typically done through the cloud provider integration,
// but should apply for any default implementation. If set, it is assumed that a load balancer
// implementation is watching for Services with a matching class. Any default load balancer
// implementation (e.g. cloud providers) should ignore Services that set this field.
// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
func (o ApmServerSpecHttpServiceSpecPtrOutput) LoadBalancerClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerClass
	}).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer.
// This feature depends on whether the underlying cloud-provider supports specifying
// the loadBalancerIP when a load balancer is created.
// This field will be ignored if the cloud-provider does not support the feature.
// Deprecated: This field was under-specified and its meaning varies across implementations.
// Using it is non-portable and it may not support dual-stack.
// Users are encouraged to use implementation-specific annotations when available.
func (o ApmServerSpecHttpServiceSpecPtrOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerIP
	}).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider
// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
// cloud-provider does not support the feature."
// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
func (o ApmServerSpecHttpServiceSpecPtrOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSourceRanges
	}).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ApmServerSpecHttpServiceSpecPtrOutput) Ports() ApmServerSpecHttpServiceSpecPortsArrayOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) []ApmServerSpecHttpServiceSpecPorts {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(ApmServerSpecHttpServiceSpecPortsArrayOutput)
}

// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
// Service should disregard any indications of ready/not-ready.
// The primary use case for setting this field is for a StatefulSet's Headless Service to
// propagate SRV DNS records for its Pods for the purpose of peer discovery.
// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
// Services interpret this to mean that all endpoints are considered "ready" even if the
// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
// through the Endpoints or EndpointSlice resources can safely assume this behavior.
func (o ApmServerSpecHttpServiceSpecPtrOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.PublishNotReadyAddresses
	}).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this
// selector. If empty or not present, the service is assumed to have an
// external process managing its endpoints, which Kubernetes will not
// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
// Ignored if type is ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o ApmServerSpecHttpServiceSpecPtrOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity.
// Enable client IP based session affinity.
// Must be ClientIP or None.
// Defaults to None.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ApmServerSpecHttpServiceSpecPtrOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.SessionAffinity
	}).(pulumi.StringPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
func (o ApmServerSpecHttpServiceSpecPtrOutput) SessionAffinityConfig() ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) *ApmServerSpecHttpServiceSpecSessionAffinityConfig {
		if v == nil {
			return nil
		}
		return v.SessionAffinityConfig
	}).(ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// TrafficDistribution offers a way to express preferences for how traffic is
// distributed to Service endpoints. Implementations can use this field as a
// hint, but are not required to guarantee strict adherence. If the field is
// not set, the implementation will apply its default routing strategy. If set
// to "PreferClose", implementations should prioritize endpoints that are
// topologically close (e.g., same zone).
// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
func (o ApmServerSpecHttpServiceSpecPtrOutput) TrafficDistribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.TrafficDistribution
	}).(pulumi.StringPtrOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid
// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
// "ClusterIP" allocates a cluster-internal IP address for load-balancing
// to endpoints. Endpoints are determined by the selector or if that is not
// specified, by manual construction of an Endpoints object or
// EndpointSlice objects. If clusterIP is "None", no virtual IP is
// allocated and the endpoints are published as a set of endpoints rather
// than a virtual IP.
// "NodePort" builds on ClusterIP and allocates a port on every node which
// routes to the same endpoints as the clusterIP.
// "LoadBalancer" builds on NodePort and creates an external load-balancer
// (if supported in the current cloud) which routes to the same endpoints
// as the clusterIP.
// "ExternalName" aliases this service to the specified externalName.
// Several other fields do not apply to ExternalName services.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o ApmServerSpecHttpServiceSpecPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// ServicePort contains information on service's port.
type ApmServerSpecHttpServiceSpecPorts struct {
	// The application protocol for this port.
	// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
	// This field follows standard Kubernetes label syntax.
	// Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per
	// RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
	//   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
	//   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
	//
	// * Other protocols should use implementation-defined prefixed names such as
	// mycompany.com/my-custom-protocol.
	AppProtocol *string `pulumi:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL.
	// All ports within a ServiceSpec must have unique names. When considering
	// the endpoints for a Service, this must match the 'name' field in the
	// EndpointPort.
	// Optional if only one ServicePort is defined on this service.
	Name *string `pulumi:"name"`
	// The port on each node on which this service is exposed when type is
	// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
	// specified, in-range, and not in use it will be used, otherwise the
	// operation will fail.  If not specified, a port will be allocated if this
	// Service requires one.  If this field is specified when creating a
	// Service which does not need it, creation will fail. This field will be
	// wiped when updating a Service to no longer need it (e.g. changing type
	// from NodePort to ClusterIP).
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort *int `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port int `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
	// Default is TCP.
	Protocol *string `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service.
	// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	// If this is a string, it will be looked up as a named port in the
	// target Pod's container ports. If this is not specified, the value
	// of the 'port' field is used (an identity map).
	// This field is ignored for services with clusterIP=None, and should be
	// omitted or set equal to the 'port' field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort interface{} `pulumi:"targetPort"`
}

// Defaults sets the appropriate defaults for ApmServerSpecHttpServiceSpecPorts
func (val *ApmServerSpecHttpServiceSpecPorts) Defaults() *ApmServerSpecHttpServiceSpecPorts {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		protocol_ := "TCP"
		tmp.Protocol = &protocol_
	}
	return &tmp
}

// ApmServerSpecHttpServiceSpecPortsInput is an input type that accepts ApmServerSpecHttpServiceSpecPortsArgs and ApmServerSpecHttpServiceSpecPortsOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpServiceSpecPortsInput` via:
//
//	ApmServerSpecHttpServiceSpecPortsArgs{...}
type ApmServerSpecHttpServiceSpecPortsInput interface {
	pulumi.Input

	ToApmServerSpecHttpServiceSpecPortsOutput() ApmServerSpecHttpServiceSpecPortsOutput
	ToApmServerSpecHttpServiceSpecPortsOutputWithContext(context.Context) ApmServerSpecHttpServiceSpecPortsOutput
}

// ServicePort contains information on service's port.
type ApmServerSpecHttpServiceSpecPortsArgs struct {
	// The application protocol for this port.
	// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
	// This field follows standard Kubernetes label syntax.
	// Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per
	// RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
	//   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
	//   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
	//
	// * Other protocols should use implementation-defined prefixed names such as
	// mycompany.com/my-custom-protocol.
	AppProtocol pulumi.StringPtrInput `pulumi:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL.
	// All ports within a ServiceSpec must have unique names. When considering
	// the endpoints for a Service, this must match the 'name' field in the
	// EndpointPort.
	// Optional if only one ServicePort is defined on this service.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port on each node on which this service is exposed when type is
	// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
	// specified, in-range, and not in use it will be used, otherwise the
	// operation will fail.  If not specified, a port will be allocated if this
	// Service requires one.  If this field is specified when creating a
	// Service which does not need it, creation will fail. This field will be
	// wiped when updating a Service to no longer need it (e.g. changing type
	// from NodePort to ClusterIP).
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort pulumi.IntPtrInput `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port pulumi.IntInput `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
	// Default is TCP.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service.
	// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	// If this is a string, it will be looked up as a named port in the
	// target Pod's container ports. If this is not specified, the value
	// of the 'port' field is used (an identity map).
	// This field is ignored for services with clusterIP=None, and should be
	// omitted or set equal to the 'port' field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort pulumi.Input `pulumi:"targetPort"`
}

// Defaults sets the appropriate defaults for ApmServerSpecHttpServiceSpecPortsArgs
func (val *ApmServerSpecHttpServiceSpecPortsArgs) Defaults() *ApmServerSpecHttpServiceSpecPortsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		tmp.Protocol = pulumi.StringPtr("TCP")
	}
	return &tmp
}
func (ApmServerSpecHttpServiceSpecPortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (i ApmServerSpecHttpServiceSpecPortsArgs) ToApmServerSpecHttpServiceSpecPortsOutput() ApmServerSpecHttpServiceSpecPortsOutput {
	return i.ToApmServerSpecHttpServiceSpecPortsOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpServiceSpecPortsArgs) ToApmServerSpecHttpServiceSpecPortsOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecPortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceSpecPortsOutput)
}

// ApmServerSpecHttpServiceSpecPortsArrayInput is an input type that accepts ApmServerSpecHttpServiceSpecPortsArray and ApmServerSpecHttpServiceSpecPortsArrayOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpServiceSpecPortsArrayInput` via:
//
//	ApmServerSpecHttpServiceSpecPortsArray{ ApmServerSpecHttpServiceSpecPortsArgs{...} }
type ApmServerSpecHttpServiceSpecPortsArrayInput interface {
	pulumi.Input

	ToApmServerSpecHttpServiceSpecPortsArrayOutput() ApmServerSpecHttpServiceSpecPortsArrayOutput
	ToApmServerSpecHttpServiceSpecPortsArrayOutputWithContext(context.Context) ApmServerSpecHttpServiceSpecPortsArrayOutput
}

type ApmServerSpecHttpServiceSpecPortsArray []ApmServerSpecHttpServiceSpecPortsInput

func (ApmServerSpecHttpServiceSpecPortsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApmServerSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (i ApmServerSpecHttpServiceSpecPortsArray) ToApmServerSpecHttpServiceSpecPortsArrayOutput() ApmServerSpecHttpServiceSpecPortsArrayOutput {
	return i.ToApmServerSpecHttpServiceSpecPortsArrayOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpServiceSpecPortsArray) ToApmServerSpecHttpServiceSpecPortsArrayOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecPortsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceSpecPortsArrayOutput)
}

// ServicePort contains information on service's port.
type ApmServerSpecHttpServiceSpecPortsOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpServiceSpecPortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (o ApmServerSpecHttpServiceSpecPortsOutput) ToApmServerSpecHttpServiceSpecPortsOutput() ApmServerSpecHttpServiceSpecPortsOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecPortsOutput) ToApmServerSpecHttpServiceSpecPortsOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecPortsOutput {
	return o
}

// The application protocol for this port.
// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
// This field follows standard Kubernetes label syntax.
// Valid values are either:
//
// * Un-prefixed protocol names - reserved for IANA standard service names (as per
// RFC-6335 and https://www.iana.org/assignments/service-names).
//
// * Kubernetes-defined prefixed names:
//   - 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
//   - 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
//   - 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
//
// * Other protocols should use implementation-defined prefixed names such as
// mycompany.com/my-custom-protocol.
func (o ApmServerSpecHttpServiceSpecPortsOutput) AppProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpecPorts) *string { return v.AppProtocol }).(pulumi.StringPtrOutput)
}

// The name of this port within the service. This must be a DNS_LABEL.
// All ports within a ServiceSpec must have unique names. When considering
// the endpoints for a Service, this must match the 'name' field in the
// EndpointPort.
// Optional if only one ServicePort is defined on this service.
func (o ApmServerSpecHttpServiceSpecPortsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpecPorts) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port on each node on which this service is exposed when type is
// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
// specified, in-range, and not in use it will be used, otherwise the
// operation will fail.  If not specified, a port will be allocated if this
// Service requires one.  If this field is specified when creating a
// Service which does not need it, creation will fail. This field will be
// wiped when updating a Service to no longer need it (e.g. changing type
// from NodePort to ClusterIP).
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
func (o ApmServerSpecHttpServiceSpecPortsOutput) NodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpecPorts) *int { return v.NodePort }).(pulumi.IntPtrOutput)
}

// The port that will be exposed by this service.
func (o ApmServerSpecHttpServiceSpecPortsOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpecPorts) int { return v.Port }).(pulumi.IntOutput)
}

// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
// Default is TCP.
func (o ApmServerSpecHttpServiceSpecPortsOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpecPorts) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the pods targeted by the service.
// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
// If this is a string, it will be looked up as a named port in the
// target Pod's container ports. If this is not specified, the value
// of the 'port' field is used (an identity map).
// This field is ignored for services with clusterIP=None, and should be
// omitted or set equal to the 'port' field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
func (o ApmServerSpecHttpServiceSpecPortsOutput) TargetPort() pulumi.AnyOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpecPorts) interface{} { return v.TargetPort }).(pulumi.AnyOutput)
}

type ApmServerSpecHttpServiceSpecPortsArrayOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpServiceSpecPortsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApmServerSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (o ApmServerSpecHttpServiceSpecPortsArrayOutput) ToApmServerSpecHttpServiceSpecPortsArrayOutput() ApmServerSpecHttpServiceSpecPortsArrayOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecPortsArrayOutput) ToApmServerSpecHttpServiceSpecPortsArrayOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecPortsArrayOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecPortsArrayOutput) Index(i pulumi.IntInput) ApmServerSpecHttpServiceSpecPortsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApmServerSpecHttpServiceSpecPorts {
		return vs[0].([]ApmServerSpecHttpServiceSpecPorts)[vs[1].(int)]
	}).(ApmServerSpecHttpServiceSpecPortsOutput)
}

// Route service traffic to pods with label keys and values matching this
// selector. If empty or not present, the service is assumed to have an
// external process managing its endpoints, which Kubernetes will not
// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
// Ignored if type is ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
type ApmServerSpecHttpServiceSpecSelector struct {
}

// sessionAffinityConfig contains the configurations of session affinity.
type ApmServerSpecHttpServiceSpecSessionAffinityConfig struct {
	// clientIP contains the configurations of Client IP based session affinity.
	ClientIP *ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIp `pulumi:"clientIP"`
}

// ApmServerSpecHttpServiceSpecSessionAffinityConfigInput is an input type that accepts ApmServerSpecHttpServiceSpecSessionAffinityConfigArgs and ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpServiceSpecSessionAffinityConfigInput` via:
//
//	ApmServerSpecHttpServiceSpecSessionAffinityConfigArgs{...}
type ApmServerSpecHttpServiceSpecSessionAffinityConfigInput interface {
	pulumi.Input

	ToApmServerSpecHttpServiceSpecSessionAffinityConfigOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput
	ToApmServerSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput
}

// sessionAffinityConfig contains the configurations of session affinity.
type ApmServerSpecHttpServiceSpecSessionAffinityConfigArgs struct {
	// clientIP contains the configurations of Client IP based session affinity.
	ClientIP ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrInput `pulumi:"clientIP"`
}

func (ApmServerSpecHttpServiceSpecSessionAffinityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (i ApmServerSpecHttpServiceSpecSessionAffinityConfigArgs) ToApmServerSpecHttpServiceSpecSessionAffinityConfigOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput {
	return i.ToApmServerSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpServiceSpecSessionAffinityConfigArgs) ToApmServerSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput)
}

func (i ApmServerSpecHttpServiceSpecSessionAffinityConfigArgs) ToApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return i.ToApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpServiceSpecSessionAffinityConfigArgs) ToApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput).ToApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx)
}

// ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrInput is an input type that accepts ApmServerSpecHttpServiceSpecSessionAffinityConfigArgs, ApmServerSpecHttpServiceSpecSessionAffinityConfigPtr and ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrInput` via:
//
//	        ApmServerSpecHttpServiceSpecSessionAffinityConfigArgs{...}
//
//	or:
//
//	        nil
type ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrInput interface {
	pulumi.Input

	ToApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput
	ToApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput
}

type apmServerSpecHttpServiceSpecSessionAffinityConfigPtrType ApmServerSpecHttpServiceSpecSessionAffinityConfigArgs

func ApmServerSpecHttpServiceSpecSessionAffinityConfigPtr(v *ApmServerSpecHttpServiceSpecSessionAffinityConfigArgs) ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrInput {
	return (*apmServerSpecHttpServiceSpecSessionAffinityConfigPtrType)(v)
}

func (*apmServerSpecHttpServiceSpecSessionAffinityConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (i *apmServerSpecHttpServiceSpecSessionAffinityConfigPtrType) ToApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return i.ToApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (i *apmServerSpecHttpServiceSpecSessionAffinityConfigPtrType) ToApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
type ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput) ToApmServerSpecHttpServiceSpecSessionAffinityConfigOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput) ToApmServerSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput) ToApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ToApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput) ToApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApmServerSpecHttpServiceSpecSessionAffinityConfig) *ApmServerSpecHttpServiceSpecSessionAffinityConfig {
		return &v
	}).(ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput) ClientIP() ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpecSessionAffinityConfig) *ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIp {
		return v.ClientIP
	}).(ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput)
}

type ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ToApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ToApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput) Elem() ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpecSessionAffinityConfig) ApmServerSpecHttpServiceSpecSessionAffinityConfig {
		if v != nil {
			return *v
		}
		var ret ApmServerSpecHttpServiceSpecSessionAffinityConfig
		return ret
	}).(ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ClientIP() ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpecSessionAffinityConfig) *ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIp {
		if v == nil {
			return nil
		}
		return v.ClientIP
	}).(ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
type ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIp struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
	// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
	// Default value is 10800(for 3 hours).
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpInput is an input type that accepts ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpArgs and ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpInput` via:
//
//	ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpArgs{...}
type ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpInput interface {
	pulumi.Input

	ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput
	ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutputWithContext(context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput
}

// clientIP contains the configurations of Client IP based session affinity.
type ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpArgs struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
	// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
	// Default value is 10800(for 3 hours).
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIp)(nil)).Elem()
}

func (i ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpArgs) ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput {
	return i.ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpArgs) ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput)
}

func (i ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpArgs) ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return i.ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpArgs) ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput).ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(ctx)
}

// ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrInput is an input type that accepts ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpArgs, ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtr and ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrInput` via:
//
//	        ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpArgs{...}
//
//	or:
//
//	        nil
type ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrInput interface {
	pulumi.Input

	ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput
	ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput
}

type apmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrType ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpArgs

func ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtr(v *ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpArgs) ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrInput {
	return (*apmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrType)(v)
}

func (*apmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIp)(nil)).Elem()
}

func (i *apmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrType) ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return i.ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(context.Background())
}

func (i *apmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrType) ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
type ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIp)(nil)).Elem()
}

func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput) ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput) ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput) ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o.ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(context.Background())
}

func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput) ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIp) *ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIp {
		return &v
	}).(ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
// Default value is 10800(for 3 hours).
func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIp) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIp)(nil)).Elem()
}

func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput) ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput() ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput) ToApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o
}

func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput) Elem() ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIp) ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIp {
		if v != nil {
			return *v
		}
		var ret ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIp
		return ret
	}).(ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
// Default value is 10800(for 3 hours).
func (o ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIp) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
type ApmServerSpecHttpTls struct {
	// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
	// The referenced secret should contain the following:
	//
	// - `ca.crt`: The certificate authority (optional).
	// - `tls.crt`: The certificate (or a chain).
	// - `tls.key`: The private key to the first certificate in the certificate chain.
	Certificate *ApmServerSpecHttpTlsCertificate `pulumi:"certificate"`
	// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
	SelfSignedCertificate *ApmServerSpecHttpTlsSelfSignedCertificate `pulumi:"selfSignedCertificate"`
}

// ApmServerSpecHttpTlsInput is an input type that accepts ApmServerSpecHttpTlsArgs and ApmServerSpecHttpTlsOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpTlsInput` via:
//
//	ApmServerSpecHttpTlsArgs{...}
type ApmServerSpecHttpTlsInput interface {
	pulumi.Input

	ToApmServerSpecHttpTlsOutput() ApmServerSpecHttpTlsOutput
	ToApmServerSpecHttpTlsOutputWithContext(context.Context) ApmServerSpecHttpTlsOutput
}

// TLS defines options for configuring TLS for HTTP.
type ApmServerSpecHttpTlsArgs struct {
	// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
	// The referenced secret should contain the following:
	//
	// - `ca.crt`: The certificate authority (optional).
	// - `tls.crt`: The certificate (or a chain).
	// - `tls.key`: The private key to the first certificate in the certificate chain.
	Certificate ApmServerSpecHttpTlsCertificatePtrInput `pulumi:"certificate"`
	// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
	SelfSignedCertificate ApmServerSpecHttpTlsSelfSignedCertificatePtrInput `pulumi:"selfSignedCertificate"`
}

func (ApmServerSpecHttpTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpTls)(nil)).Elem()
}

func (i ApmServerSpecHttpTlsArgs) ToApmServerSpecHttpTlsOutput() ApmServerSpecHttpTlsOutput {
	return i.ToApmServerSpecHttpTlsOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpTlsArgs) ToApmServerSpecHttpTlsOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpTlsOutput)
}

func (i ApmServerSpecHttpTlsArgs) ToApmServerSpecHttpTlsPtrOutput() ApmServerSpecHttpTlsPtrOutput {
	return i.ToApmServerSpecHttpTlsPtrOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpTlsArgs) ToApmServerSpecHttpTlsPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpTlsOutput).ToApmServerSpecHttpTlsPtrOutputWithContext(ctx)
}

// ApmServerSpecHttpTlsPtrInput is an input type that accepts ApmServerSpecHttpTlsArgs, ApmServerSpecHttpTlsPtr and ApmServerSpecHttpTlsPtrOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpTlsPtrInput` via:
//
//	        ApmServerSpecHttpTlsArgs{...}
//
//	or:
//
//	        nil
type ApmServerSpecHttpTlsPtrInput interface {
	pulumi.Input

	ToApmServerSpecHttpTlsPtrOutput() ApmServerSpecHttpTlsPtrOutput
	ToApmServerSpecHttpTlsPtrOutputWithContext(context.Context) ApmServerSpecHttpTlsPtrOutput
}

type apmServerSpecHttpTlsPtrType ApmServerSpecHttpTlsArgs

func ApmServerSpecHttpTlsPtr(v *ApmServerSpecHttpTlsArgs) ApmServerSpecHttpTlsPtrInput {
	return (*apmServerSpecHttpTlsPtrType)(v)
}

func (*apmServerSpecHttpTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpTls)(nil)).Elem()
}

func (i *apmServerSpecHttpTlsPtrType) ToApmServerSpecHttpTlsPtrOutput() ApmServerSpecHttpTlsPtrOutput {
	return i.ToApmServerSpecHttpTlsPtrOutputWithContext(context.Background())
}

func (i *apmServerSpecHttpTlsPtrType) ToApmServerSpecHttpTlsPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpTlsPtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
type ApmServerSpecHttpTlsOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpTls)(nil)).Elem()
}

func (o ApmServerSpecHttpTlsOutput) ToApmServerSpecHttpTlsOutput() ApmServerSpecHttpTlsOutput {
	return o
}

func (o ApmServerSpecHttpTlsOutput) ToApmServerSpecHttpTlsOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsOutput {
	return o
}

func (o ApmServerSpecHttpTlsOutput) ToApmServerSpecHttpTlsPtrOutput() ApmServerSpecHttpTlsPtrOutput {
	return o.ToApmServerSpecHttpTlsPtrOutputWithContext(context.Background())
}

func (o ApmServerSpecHttpTlsOutput) ToApmServerSpecHttpTlsPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApmServerSpecHttpTls) *ApmServerSpecHttpTls {
		return &v
	}).(ApmServerSpecHttpTlsPtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
func (o ApmServerSpecHttpTlsOutput) Certificate() ApmServerSpecHttpTlsCertificatePtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpTls) *ApmServerSpecHttpTlsCertificate { return v.Certificate }).(ApmServerSpecHttpTlsCertificatePtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
func (o ApmServerSpecHttpTlsOutput) SelfSignedCertificate() ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpTls) *ApmServerSpecHttpTlsSelfSignedCertificate {
		return v.SelfSignedCertificate
	}).(ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput)
}

type ApmServerSpecHttpTlsPtrOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpTls)(nil)).Elem()
}

func (o ApmServerSpecHttpTlsPtrOutput) ToApmServerSpecHttpTlsPtrOutput() ApmServerSpecHttpTlsPtrOutput {
	return o
}

func (o ApmServerSpecHttpTlsPtrOutput) ToApmServerSpecHttpTlsPtrOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsPtrOutput {
	return o
}

func (o ApmServerSpecHttpTlsPtrOutput) Elem() ApmServerSpecHttpTlsOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpTls) ApmServerSpecHttpTls {
		if v != nil {
			return *v
		}
		var ret ApmServerSpecHttpTls
		return ret
	}).(ApmServerSpecHttpTlsOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
func (o ApmServerSpecHttpTlsPtrOutput) Certificate() ApmServerSpecHttpTlsCertificatePtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpTls) *ApmServerSpecHttpTlsCertificate {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(ApmServerSpecHttpTlsCertificatePtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
func (o ApmServerSpecHttpTlsPtrOutput) SelfSignedCertificate() ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpTls) *ApmServerSpecHttpTlsSelfSignedCertificate {
		if v == nil {
			return nil
		}
		return v.SelfSignedCertificate
	}).(ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
type ApmServerSpecHttpTlsCertificate struct {
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// ApmServerSpecHttpTlsCertificateInput is an input type that accepts ApmServerSpecHttpTlsCertificateArgs and ApmServerSpecHttpTlsCertificateOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpTlsCertificateInput` via:
//
//	ApmServerSpecHttpTlsCertificateArgs{...}
type ApmServerSpecHttpTlsCertificateInput interface {
	pulumi.Input

	ToApmServerSpecHttpTlsCertificateOutput() ApmServerSpecHttpTlsCertificateOutput
	ToApmServerSpecHttpTlsCertificateOutputWithContext(context.Context) ApmServerSpecHttpTlsCertificateOutput
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
type ApmServerSpecHttpTlsCertificateArgs struct {
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (ApmServerSpecHttpTlsCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpTlsCertificate)(nil)).Elem()
}

func (i ApmServerSpecHttpTlsCertificateArgs) ToApmServerSpecHttpTlsCertificateOutput() ApmServerSpecHttpTlsCertificateOutput {
	return i.ToApmServerSpecHttpTlsCertificateOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpTlsCertificateArgs) ToApmServerSpecHttpTlsCertificateOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpTlsCertificateOutput)
}

func (i ApmServerSpecHttpTlsCertificateArgs) ToApmServerSpecHttpTlsCertificatePtrOutput() ApmServerSpecHttpTlsCertificatePtrOutput {
	return i.ToApmServerSpecHttpTlsCertificatePtrOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpTlsCertificateArgs) ToApmServerSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpTlsCertificateOutput).ToApmServerSpecHttpTlsCertificatePtrOutputWithContext(ctx)
}

// ApmServerSpecHttpTlsCertificatePtrInput is an input type that accepts ApmServerSpecHttpTlsCertificateArgs, ApmServerSpecHttpTlsCertificatePtr and ApmServerSpecHttpTlsCertificatePtrOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpTlsCertificatePtrInput` via:
//
//	        ApmServerSpecHttpTlsCertificateArgs{...}
//
//	or:
//
//	        nil
type ApmServerSpecHttpTlsCertificatePtrInput interface {
	pulumi.Input

	ToApmServerSpecHttpTlsCertificatePtrOutput() ApmServerSpecHttpTlsCertificatePtrOutput
	ToApmServerSpecHttpTlsCertificatePtrOutputWithContext(context.Context) ApmServerSpecHttpTlsCertificatePtrOutput
}

type apmServerSpecHttpTlsCertificatePtrType ApmServerSpecHttpTlsCertificateArgs

func ApmServerSpecHttpTlsCertificatePtr(v *ApmServerSpecHttpTlsCertificateArgs) ApmServerSpecHttpTlsCertificatePtrInput {
	return (*apmServerSpecHttpTlsCertificatePtrType)(v)
}

func (*apmServerSpecHttpTlsCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpTlsCertificate)(nil)).Elem()
}

func (i *apmServerSpecHttpTlsCertificatePtrType) ToApmServerSpecHttpTlsCertificatePtrOutput() ApmServerSpecHttpTlsCertificatePtrOutput {
	return i.ToApmServerSpecHttpTlsCertificatePtrOutputWithContext(context.Background())
}

func (i *apmServerSpecHttpTlsCertificatePtrType) ToApmServerSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpTlsCertificatePtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
type ApmServerSpecHttpTlsCertificateOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpTlsCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpTlsCertificate)(nil)).Elem()
}

func (o ApmServerSpecHttpTlsCertificateOutput) ToApmServerSpecHttpTlsCertificateOutput() ApmServerSpecHttpTlsCertificateOutput {
	return o
}

func (o ApmServerSpecHttpTlsCertificateOutput) ToApmServerSpecHttpTlsCertificateOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsCertificateOutput {
	return o
}

func (o ApmServerSpecHttpTlsCertificateOutput) ToApmServerSpecHttpTlsCertificatePtrOutput() ApmServerSpecHttpTlsCertificatePtrOutput {
	return o.ToApmServerSpecHttpTlsCertificatePtrOutputWithContext(context.Background())
}

func (o ApmServerSpecHttpTlsCertificateOutput) ToApmServerSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApmServerSpecHttpTlsCertificate) *ApmServerSpecHttpTlsCertificate {
		return &v
	}).(ApmServerSpecHttpTlsCertificatePtrOutput)
}

// SecretName is the name of the secret.
func (o ApmServerSpecHttpTlsCertificateOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpTlsCertificate) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type ApmServerSpecHttpTlsCertificatePtrOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpTlsCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpTlsCertificate)(nil)).Elem()
}

func (o ApmServerSpecHttpTlsCertificatePtrOutput) ToApmServerSpecHttpTlsCertificatePtrOutput() ApmServerSpecHttpTlsCertificatePtrOutput {
	return o
}

func (o ApmServerSpecHttpTlsCertificatePtrOutput) ToApmServerSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsCertificatePtrOutput {
	return o
}

func (o ApmServerSpecHttpTlsCertificatePtrOutput) Elem() ApmServerSpecHttpTlsCertificateOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpTlsCertificate) ApmServerSpecHttpTlsCertificate {
		if v != nil {
			return *v
		}
		var ret ApmServerSpecHttpTlsCertificate
		return ret
	}).(ApmServerSpecHttpTlsCertificateOutput)
}

// SecretName is the name of the secret.
func (o ApmServerSpecHttpTlsCertificatePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpTlsCertificate) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type ApmServerSpecHttpTlsSelfSignedCertificate struct {
	// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
	Disabled *bool `pulumi:"disabled"`
	// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
	SubjectAltNames []ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames `pulumi:"subjectAltNames"`
}

// ApmServerSpecHttpTlsSelfSignedCertificateInput is an input type that accepts ApmServerSpecHttpTlsSelfSignedCertificateArgs and ApmServerSpecHttpTlsSelfSignedCertificateOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpTlsSelfSignedCertificateInput` via:
//
//	ApmServerSpecHttpTlsSelfSignedCertificateArgs{...}
type ApmServerSpecHttpTlsSelfSignedCertificateInput interface {
	pulumi.Input

	ToApmServerSpecHttpTlsSelfSignedCertificateOutput() ApmServerSpecHttpTlsSelfSignedCertificateOutput
	ToApmServerSpecHttpTlsSelfSignedCertificateOutputWithContext(context.Context) ApmServerSpecHttpTlsSelfSignedCertificateOutput
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type ApmServerSpecHttpTlsSelfSignedCertificateArgs struct {
	// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
	SubjectAltNames ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput `pulumi:"subjectAltNames"`
}

func (ApmServerSpecHttpTlsSelfSignedCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (i ApmServerSpecHttpTlsSelfSignedCertificateArgs) ToApmServerSpecHttpTlsSelfSignedCertificateOutput() ApmServerSpecHttpTlsSelfSignedCertificateOutput {
	return i.ToApmServerSpecHttpTlsSelfSignedCertificateOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpTlsSelfSignedCertificateArgs) ToApmServerSpecHttpTlsSelfSignedCertificateOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsSelfSignedCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpTlsSelfSignedCertificateOutput)
}

func (i ApmServerSpecHttpTlsSelfSignedCertificateArgs) ToApmServerSpecHttpTlsSelfSignedCertificatePtrOutput() ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput {
	return i.ToApmServerSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpTlsSelfSignedCertificateArgs) ToApmServerSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpTlsSelfSignedCertificateOutput).ToApmServerSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx)
}

// ApmServerSpecHttpTlsSelfSignedCertificatePtrInput is an input type that accepts ApmServerSpecHttpTlsSelfSignedCertificateArgs, ApmServerSpecHttpTlsSelfSignedCertificatePtr and ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpTlsSelfSignedCertificatePtrInput` via:
//
//	        ApmServerSpecHttpTlsSelfSignedCertificateArgs{...}
//
//	or:
//
//	        nil
type ApmServerSpecHttpTlsSelfSignedCertificatePtrInput interface {
	pulumi.Input

	ToApmServerSpecHttpTlsSelfSignedCertificatePtrOutput() ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput
	ToApmServerSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Context) ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput
}

type apmServerSpecHttpTlsSelfSignedCertificatePtrType ApmServerSpecHttpTlsSelfSignedCertificateArgs

func ApmServerSpecHttpTlsSelfSignedCertificatePtr(v *ApmServerSpecHttpTlsSelfSignedCertificateArgs) ApmServerSpecHttpTlsSelfSignedCertificatePtrInput {
	return (*apmServerSpecHttpTlsSelfSignedCertificatePtrType)(v)
}

func (*apmServerSpecHttpTlsSelfSignedCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (i *apmServerSpecHttpTlsSelfSignedCertificatePtrType) ToApmServerSpecHttpTlsSelfSignedCertificatePtrOutput() ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput {
	return i.ToApmServerSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Background())
}

func (i *apmServerSpecHttpTlsSelfSignedCertificatePtrType) ToApmServerSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type ApmServerSpecHttpTlsSelfSignedCertificateOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpTlsSelfSignedCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (o ApmServerSpecHttpTlsSelfSignedCertificateOutput) ToApmServerSpecHttpTlsSelfSignedCertificateOutput() ApmServerSpecHttpTlsSelfSignedCertificateOutput {
	return o
}

func (o ApmServerSpecHttpTlsSelfSignedCertificateOutput) ToApmServerSpecHttpTlsSelfSignedCertificateOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsSelfSignedCertificateOutput {
	return o
}

func (o ApmServerSpecHttpTlsSelfSignedCertificateOutput) ToApmServerSpecHttpTlsSelfSignedCertificatePtrOutput() ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ToApmServerSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Background())
}

func (o ApmServerSpecHttpTlsSelfSignedCertificateOutput) ToApmServerSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApmServerSpecHttpTlsSelfSignedCertificate) *ApmServerSpecHttpTlsSelfSignedCertificate {
		return &v
	}).(ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput)
}

// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
func (o ApmServerSpecHttpTlsSelfSignedCertificateOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpTlsSelfSignedCertificate) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
func (o ApmServerSpecHttpTlsSelfSignedCertificateOutput) SubjectAltNames() ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o.ApplyT(func(v ApmServerSpecHttpTlsSelfSignedCertificate) []ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames {
		return v.SubjectAltNames
	}).(ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput)
}

type ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (o ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput) ToApmServerSpecHttpTlsSelfSignedCertificatePtrOutput() ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o
}

func (o ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput) ToApmServerSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o
}

func (o ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput) Elem() ApmServerSpecHttpTlsSelfSignedCertificateOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpTlsSelfSignedCertificate) ApmServerSpecHttpTlsSelfSignedCertificate {
		if v != nil {
			return *v
		}
		var ret ApmServerSpecHttpTlsSelfSignedCertificate
		return ret
	}).(ApmServerSpecHttpTlsSelfSignedCertificateOutput)
}

// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
func (o ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpTlsSelfSignedCertificate) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
func (o ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput) SubjectAltNames() ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o.ApplyT(func(v *ApmServerSpecHttpTlsSelfSignedCertificate) []ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput)
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames struct {
	// DNS is the DNS name of the subject.
	Dns *string `pulumi:"dns"`
	// IP is the IP address of the subject.
	Ip *string `pulumi:"ip"`
}

// ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput is an input type that accepts ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs and ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput` via:
//
//	ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs{...}
type ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput interface {
	pulumi.Input

	ToApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput() ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput
	ToApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(context.Context) ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs struct {
	// DNS is the DNS name of the subject.
	Dns pulumi.StringPtrInput `pulumi:"dns"`
	// IP is the IP address of the subject.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
}

func (ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (i ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs) ToApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput() ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return i.ToApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs) ToApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput)
}

// ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput is an input type that accepts ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray and ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput values.
// You can construct a concrete instance of `ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput` via:
//
//	ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray{ ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs{...} }
type ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput interface {
	pulumi.Input

	ToApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput() ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput
	ToApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(context.Context) ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput
}

type ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray []ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput

func (ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (i ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray) ToApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput() ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return i.ToApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(context.Background())
}

func (i ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray) ToApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput)
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (o ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) ToApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput() ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return o
}

func (o ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) ToApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return o
}

// DNS is the DNS name of the subject.
func (o ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) Dns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames) *string { return v.Dns }).(pulumi.StringPtrOutput)
}

// IP is the IP address of the subject.
func (o ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput struct{ *pulumi.OutputState }

func (ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (o ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) ToApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput() ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o
}

func (o ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) ToApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(ctx context.Context) ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o
}

func (o ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) Index(i pulumi.IntInput) ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames {
		return vs[0].([]ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNames)[vs[1].(int)]
	}).(ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput)
}

// KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster.
// It allows APM agent central configuration management in Kibana.
type ApmServerSpecKibanaRef struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name *string `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace *string `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName *string `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName *string `pulumi:"serviceName"`
}

// ApmServerSpecKibanaRefInput is an input type that accepts ApmServerSpecKibanaRefArgs and ApmServerSpecKibanaRefOutput values.
// You can construct a concrete instance of `ApmServerSpecKibanaRefInput` via:
//
//	ApmServerSpecKibanaRefArgs{...}
type ApmServerSpecKibanaRefInput interface {
	pulumi.Input

	ToApmServerSpecKibanaRefOutput() ApmServerSpecKibanaRefOutput
	ToApmServerSpecKibanaRefOutputWithContext(context.Context) ApmServerSpecKibanaRefOutput
}

// KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster.
// It allows APM agent central configuration management in Kibana.
type ApmServerSpecKibanaRefArgs struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
}

func (ApmServerSpecKibanaRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecKibanaRef)(nil)).Elem()
}

func (i ApmServerSpecKibanaRefArgs) ToApmServerSpecKibanaRefOutput() ApmServerSpecKibanaRefOutput {
	return i.ToApmServerSpecKibanaRefOutputWithContext(context.Background())
}

func (i ApmServerSpecKibanaRefArgs) ToApmServerSpecKibanaRefOutputWithContext(ctx context.Context) ApmServerSpecKibanaRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecKibanaRefOutput)
}

func (i ApmServerSpecKibanaRefArgs) ToApmServerSpecKibanaRefPtrOutput() ApmServerSpecKibanaRefPtrOutput {
	return i.ToApmServerSpecKibanaRefPtrOutputWithContext(context.Background())
}

func (i ApmServerSpecKibanaRefArgs) ToApmServerSpecKibanaRefPtrOutputWithContext(ctx context.Context) ApmServerSpecKibanaRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecKibanaRefOutput).ToApmServerSpecKibanaRefPtrOutputWithContext(ctx)
}

// ApmServerSpecKibanaRefPtrInput is an input type that accepts ApmServerSpecKibanaRefArgs, ApmServerSpecKibanaRefPtr and ApmServerSpecKibanaRefPtrOutput values.
// You can construct a concrete instance of `ApmServerSpecKibanaRefPtrInput` via:
//
//	        ApmServerSpecKibanaRefArgs{...}
//
//	or:
//
//	        nil
type ApmServerSpecKibanaRefPtrInput interface {
	pulumi.Input

	ToApmServerSpecKibanaRefPtrOutput() ApmServerSpecKibanaRefPtrOutput
	ToApmServerSpecKibanaRefPtrOutputWithContext(context.Context) ApmServerSpecKibanaRefPtrOutput
}

type apmServerSpecKibanaRefPtrType ApmServerSpecKibanaRefArgs

func ApmServerSpecKibanaRefPtr(v *ApmServerSpecKibanaRefArgs) ApmServerSpecKibanaRefPtrInput {
	return (*apmServerSpecKibanaRefPtrType)(v)
}

func (*apmServerSpecKibanaRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecKibanaRef)(nil)).Elem()
}

func (i *apmServerSpecKibanaRefPtrType) ToApmServerSpecKibanaRefPtrOutput() ApmServerSpecKibanaRefPtrOutput {
	return i.ToApmServerSpecKibanaRefPtrOutputWithContext(context.Background())
}

func (i *apmServerSpecKibanaRefPtrType) ToApmServerSpecKibanaRefPtrOutputWithContext(ctx context.Context) ApmServerSpecKibanaRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecKibanaRefPtrOutput)
}

// KibanaRef is a reference to a Kibana instance running in the same Kubernetes cluster.
// It allows APM agent central configuration management in Kibana.
type ApmServerSpecKibanaRefOutput struct{ *pulumi.OutputState }

func (ApmServerSpecKibanaRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecKibanaRef)(nil)).Elem()
}

func (o ApmServerSpecKibanaRefOutput) ToApmServerSpecKibanaRefOutput() ApmServerSpecKibanaRefOutput {
	return o
}

func (o ApmServerSpecKibanaRefOutput) ToApmServerSpecKibanaRefOutputWithContext(ctx context.Context) ApmServerSpecKibanaRefOutput {
	return o
}

func (o ApmServerSpecKibanaRefOutput) ToApmServerSpecKibanaRefPtrOutput() ApmServerSpecKibanaRefPtrOutput {
	return o.ToApmServerSpecKibanaRefPtrOutputWithContext(context.Background())
}

func (o ApmServerSpecKibanaRefOutput) ToApmServerSpecKibanaRefPtrOutputWithContext(ctx context.Context) ApmServerSpecKibanaRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApmServerSpecKibanaRef) *ApmServerSpecKibanaRef {
		return &v
	}).(ApmServerSpecKibanaRefPtrOutput)
}

// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
func (o ApmServerSpecKibanaRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecKibanaRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o ApmServerSpecKibanaRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecKibanaRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
// Elastic resource not managed by the operator. The referenced secret must contain the following:
//   - `url`: the URL to reach the Elastic resource
//   - `username`: the username of the user to be authenticated to the Elastic resource
//   - `password`: the password of the user to be authenticated to the Elastic resource
//   - `ca.crt`: the CA certificate in PEM format (optional)
//   - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
//     This field cannot be used in combination with the other fields name, namespace or serviceName.
func (o ApmServerSpecKibanaRefOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecKibanaRef) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
// the referenced resource is used.
func (o ApmServerSpecKibanaRefOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecKibanaRef) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

type ApmServerSpecKibanaRefPtrOutput struct{ *pulumi.OutputState }

func (ApmServerSpecKibanaRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerSpecKibanaRef)(nil)).Elem()
}

func (o ApmServerSpecKibanaRefPtrOutput) ToApmServerSpecKibanaRefPtrOutput() ApmServerSpecKibanaRefPtrOutput {
	return o
}

func (o ApmServerSpecKibanaRefPtrOutput) ToApmServerSpecKibanaRefPtrOutputWithContext(ctx context.Context) ApmServerSpecKibanaRefPtrOutput {
	return o
}

func (o ApmServerSpecKibanaRefPtrOutput) Elem() ApmServerSpecKibanaRefOutput {
	return o.ApplyT(func(v *ApmServerSpecKibanaRef) ApmServerSpecKibanaRef {
		if v != nil {
			return *v
		}
		var ret ApmServerSpecKibanaRef
		return ret
	}).(ApmServerSpecKibanaRefOutput)
}

// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
func (o ApmServerSpecKibanaRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecKibanaRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o ApmServerSpecKibanaRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecKibanaRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
// Elastic resource not managed by the operator. The referenced secret must contain the following:
//   - `url`: the URL to reach the Elastic resource
//   - `username`: the username of the user to be authenticated to the Elastic resource
//   - `password`: the password of the user to be authenticated to the Elastic resource
//   - `ca.crt`: the CA certificate in PEM format (optional)
//   - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
//     This field cannot be used in combination with the other fields name, namespace or serviceName.
func (o ApmServerSpecKibanaRefPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecKibanaRef) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
// the referenced resource is used.
func (o ApmServerSpecKibanaRefPtrOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerSpecKibanaRef) *string {
		if v == nil {
			return nil
		}
		return v.ServiceName
	}).(pulumi.StringPtrOutput)
}

// SecretSource defines a data source based on a Kubernetes Secret.
type ApmServerSpecSecureSettings struct {
	// Entries define how to project each key-value pair in the secret to filesystem paths.
	// If not defined, all keys will be projected to similarly named paths in the filesystem.
	// If defined, only the specified keys will be projected to the corresponding paths.
	Entries []ApmServerSpecSecureSettingsEntries `pulumi:"entries"`
	// SecretName is the name of the secret.
	SecretName string `pulumi:"secretName"`
}

// ApmServerSpecSecureSettingsInput is an input type that accepts ApmServerSpecSecureSettingsArgs and ApmServerSpecSecureSettingsOutput values.
// You can construct a concrete instance of `ApmServerSpecSecureSettingsInput` via:
//
//	ApmServerSpecSecureSettingsArgs{...}
type ApmServerSpecSecureSettingsInput interface {
	pulumi.Input

	ToApmServerSpecSecureSettingsOutput() ApmServerSpecSecureSettingsOutput
	ToApmServerSpecSecureSettingsOutputWithContext(context.Context) ApmServerSpecSecureSettingsOutput
}

// SecretSource defines a data source based on a Kubernetes Secret.
type ApmServerSpecSecureSettingsArgs struct {
	// Entries define how to project each key-value pair in the secret to filesystem paths.
	// If not defined, all keys will be projected to similarly named paths in the filesystem.
	// If defined, only the specified keys will be projected to the corresponding paths.
	Entries ApmServerSpecSecureSettingsEntriesArrayInput `pulumi:"entries"`
	// SecretName is the name of the secret.
	SecretName pulumi.StringInput `pulumi:"secretName"`
}

func (ApmServerSpecSecureSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecSecureSettings)(nil)).Elem()
}

func (i ApmServerSpecSecureSettingsArgs) ToApmServerSpecSecureSettingsOutput() ApmServerSpecSecureSettingsOutput {
	return i.ToApmServerSpecSecureSettingsOutputWithContext(context.Background())
}

func (i ApmServerSpecSecureSettingsArgs) ToApmServerSpecSecureSettingsOutputWithContext(ctx context.Context) ApmServerSpecSecureSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecSecureSettingsOutput)
}

// ApmServerSpecSecureSettingsArrayInput is an input type that accepts ApmServerSpecSecureSettingsArray and ApmServerSpecSecureSettingsArrayOutput values.
// You can construct a concrete instance of `ApmServerSpecSecureSettingsArrayInput` via:
//
//	ApmServerSpecSecureSettingsArray{ ApmServerSpecSecureSettingsArgs{...} }
type ApmServerSpecSecureSettingsArrayInput interface {
	pulumi.Input

	ToApmServerSpecSecureSettingsArrayOutput() ApmServerSpecSecureSettingsArrayOutput
	ToApmServerSpecSecureSettingsArrayOutputWithContext(context.Context) ApmServerSpecSecureSettingsArrayOutput
}

type ApmServerSpecSecureSettingsArray []ApmServerSpecSecureSettingsInput

func (ApmServerSpecSecureSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApmServerSpecSecureSettings)(nil)).Elem()
}

func (i ApmServerSpecSecureSettingsArray) ToApmServerSpecSecureSettingsArrayOutput() ApmServerSpecSecureSettingsArrayOutput {
	return i.ToApmServerSpecSecureSettingsArrayOutputWithContext(context.Background())
}

func (i ApmServerSpecSecureSettingsArray) ToApmServerSpecSecureSettingsArrayOutputWithContext(ctx context.Context) ApmServerSpecSecureSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecSecureSettingsArrayOutput)
}

// SecretSource defines a data source based on a Kubernetes Secret.
type ApmServerSpecSecureSettingsOutput struct{ *pulumi.OutputState }

func (ApmServerSpecSecureSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecSecureSettings)(nil)).Elem()
}

func (o ApmServerSpecSecureSettingsOutput) ToApmServerSpecSecureSettingsOutput() ApmServerSpecSecureSettingsOutput {
	return o
}

func (o ApmServerSpecSecureSettingsOutput) ToApmServerSpecSecureSettingsOutputWithContext(ctx context.Context) ApmServerSpecSecureSettingsOutput {
	return o
}

// Entries define how to project each key-value pair in the secret to filesystem paths.
// If not defined, all keys will be projected to similarly named paths in the filesystem.
// If defined, only the specified keys will be projected to the corresponding paths.
func (o ApmServerSpecSecureSettingsOutput) Entries() ApmServerSpecSecureSettingsEntriesArrayOutput {
	return o.ApplyT(func(v ApmServerSpecSecureSettings) []ApmServerSpecSecureSettingsEntries { return v.Entries }).(ApmServerSpecSecureSettingsEntriesArrayOutput)
}

// SecretName is the name of the secret.
func (o ApmServerSpecSecureSettingsOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v ApmServerSpecSecureSettings) string { return v.SecretName }).(pulumi.StringOutput)
}

type ApmServerSpecSecureSettingsArrayOutput struct{ *pulumi.OutputState }

func (ApmServerSpecSecureSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApmServerSpecSecureSettings)(nil)).Elem()
}

func (o ApmServerSpecSecureSettingsArrayOutput) ToApmServerSpecSecureSettingsArrayOutput() ApmServerSpecSecureSettingsArrayOutput {
	return o
}

func (o ApmServerSpecSecureSettingsArrayOutput) ToApmServerSpecSecureSettingsArrayOutputWithContext(ctx context.Context) ApmServerSpecSecureSettingsArrayOutput {
	return o
}

func (o ApmServerSpecSecureSettingsArrayOutput) Index(i pulumi.IntInput) ApmServerSpecSecureSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApmServerSpecSecureSettings {
		return vs[0].([]ApmServerSpecSecureSettings)[vs[1].(int)]
	}).(ApmServerSpecSecureSettingsOutput)
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type ApmServerSpecSecureSettingsEntries struct {
	// Key is the key contained in the secret.
	Key string `pulumi:"key"`
	// Path is the relative file path to map the key to.
	// Path must not be an absolute file path and must not contain any ".." components.
	Path *string `pulumi:"path"`
}

// ApmServerSpecSecureSettingsEntriesInput is an input type that accepts ApmServerSpecSecureSettingsEntriesArgs and ApmServerSpecSecureSettingsEntriesOutput values.
// You can construct a concrete instance of `ApmServerSpecSecureSettingsEntriesInput` via:
//
//	ApmServerSpecSecureSettingsEntriesArgs{...}
type ApmServerSpecSecureSettingsEntriesInput interface {
	pulumi.Input

	ToApmServerSpecSecureSettingsEntriesOutput() ApmServerSpecSecureSettingsEntriesOutput
	ToApmServerSpecSecureSettingsEntriesOutputWithContext(context.Context) ApmServerSpecSecureSettingsEntriesOutput
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type ApmServerSpecSecureSettingsEntriesArgs struct {
	// Key is the key contained in the secret.
	Key pulumi.StringInput `pulumi:"key"`
	// Path is the relative file path to map the key to.
	// Path must not be an absolute file path and must not contain any ".." components.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (ApmServerSpecSecureSettingsEntriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecSecureSettingsEntries)(nil)).Elem()
}

func (i ApmServerSpecSecureSettingsEntriesArgs) ToApmServerSpecSecureSettingsEntriesOutput() ApmServerSpecSecureSettingsEntriesOutput {
	return i.ToApmServerSpecSecureSettingsEntriesOutputWithContext(context.Background())
}

func (i ApmServerSpecSecureSettingsEntriesArgs) ToApmServerSpecSecureSettingsEntriesOutputWithContext(ctx context.Context) ApmServerSpecSecureSettingsEntriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecSecureSettingsEntriesOutput)
}

// ApmServerSpecSecureSettingsEntriesArrayInput is an input type that accepts ApmServerSpecSecureSettingsEntriesArray and ApmServerSpecSecureSettingsEntriesArrayOutput values.
// You can construct a concrete instance of `ApmServerSpecSecureSettingsEntriesArrayInput` via:
//
//	ApmServerSpecSecureSettingsEntriesArray{ ApmServerSpecSecureSettingsEntriesArgs{...} }
type ApmServerSpecSecureSettingsEntriesArrayInput interface {
	pulumi.Input

	ToApmServerSpecSecureSettingsEntriesArrayOutput() ApmServerSpecSecureSettingsEntriesArrayOutput
	ToApmServerSpecSecureSettingsEntriesArrayOutputWithContext(context.Context) ApmServerSpecSecureSettingsEntriesArrayOutput
}

type ApmServerSpecSecureSettingsEntriesArray []ApmServerSpecSecureSettingsEntriesInput

func (ApmServerSpecSecureSettingsEntriesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApmServerSpecSecureSettingsEntries)(nil)).Elem()
}

func (i ApmServerSpecSecureSettingsEntriesArray) ToApmServerSpecSecureSettingsEntriesArrayOutput() ApmServerSpecSecureSettingsEntriesArrayOutput {
	return i.ToApmServerSpecSecureSettingsEntriesArrayOutputWithContext(context.Background())
}

func (i ApmServerSpecSecureSettingsEntriesArray) ToApmServerSpecSecureSettingsEntriesArrayOutputWithContext(ctx context.Context) ApmServerSpecSecureSettingsEntriesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerSpecSecureSettingsEntriesArrayOutput)
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type ApmServerSpecSecureSettingsEntriesOutput struct{ *pulumi.OutputState }

func (ApmServerSpecSecureSettingsEntriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerSpecSecureSettingsEntries)(nil)).Elem()
}

func (o ApmServerSpecSecureSettingsEntriesOutput) ToApmServerSpecSecureSettingsEntriesOutput() ApmServerSpecSecureSettingsEntriesOutput {
	return o
}

func (o ApmServerSpecSecureSettingsEntriesOutput) ToApmServerSpecSecureSettingsEntriesOutputWithContext(ctx context.Context) ApmServerSpecSecureSettingsEntriesOutput {
	return o
}

// Key is the key contained in the secret.
func (o ApmServerSpecSecureSettingsEntriesOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ApmServerSpecSecureSettingsEntries) string { return v.Key }).(pulumi.StringOutput)
}

// Path is the relative file path to map the key to.
// Path must not be an absolute file path and must not contain any ".." components.
func (o ApmServerSpecSecureSettingsEntriesOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerSpecSecureSettingsEntries) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type ApmServerSpecSecureSettingsEntriesArrayOutput struct{ *pulumi.OutputState }

func (ApmServerSpecSecureSettingsEntriesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApmServerSpecSecureSettingsEntries)(nil)).Elem()
}

func (o ApmServerSpecSecureSettingsEntriesArrayOutput) ToApmServerSpecSecureSettingsEntriesArrayOutput() ApmServerSpecSecureSettingsEntriesArrayOutput {
	return o
}

func (o ApmServerSpecSecureSettingsEntriesArrayOutput) ToApmServerSpecSecureSettingsEntriesArrayOutputWithContext(ctx context.Context) ApmServerSpecSecureSettingsEntriesArrayOutput {
	return o
}

func (o ApmServerSpecSecureSettingsEntriesArrayOutput) Index(i pulumi.IntInput) ApmServerSpecSecureSettingsEntriesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApmServerSpecSecureSettingsEntries {
		return vs[0].([]ApmServerSpecSecureSettingsEntries)[vs[1].(int)]
	}).(ApmServerSpecSecureSettingsEntriesOutput)
}

// ApmServerStatus defines the observed state of ApmServer
type ApmServerStatus struct {
	// AvailableNodes is the number of available replicas in the deployment.
	AvailableNodes *int `pulumi:"availableNodes"`
	// Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
	Count *int `pulumi:"count"`
	// ElasticsearchAssociationStatus is the status of any auto-linking to Elasticsearch clusters.
	ElasticsearchAssociationStatus *string `pulumi:"elasticsearchAssociationStatus"`
	// Health of the deployment.
	Health *string `pulumi:"health"`
	// KibanaAssociationStatus is the status of any auto-linking to Kibana.
	KibanaAssociationStatus *string `pulumi:"kibanaAssociationStatus"`
	// ObservedGeneration represents the .metadata.generation that the status is based upon.
	// It corresponds to the metadata generation, which is updated on mutation by the API Server.
	// If the generation observed in status diverges from the generation in metadata, the APM Server
	// controller has not yet processed the changes contained in the APM Server specification.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// SecretTokenSecretName is the name of the Secret that contains the secret token
	SecretTokenSecret *string `pulumi:"secretTokenSecret"`
	// Selector is the label selector used to find all pods.
	Selector *string `pulumi:"selector"`
	// ExternalService is the name of the service the agents should connect to.
	Service *string `pulumi:"service"`
	// Version of the stack resource currently running. During version upgrades, multiple versions may run
	// in parallel: this value specifies the lowest version currently running.
	Version *string `pulumi:"version"`
}

// ApmServerStatusInput is an input type that accepts ApmServerStatusArgs and ApmServerStatusOutput values.
// You can construct a concrete instance of `ApmServerStatusInput` via:
//
//	ApmServerStatusArgs{...}
type ApmServerStatusInput interface {
	pulumi.Input

	ToApmServerStatusOutput() ApmServerStatusOutput
	ToApmServerStatusOutputWithContext(context.Context) ApmServerStatusOutput
}

// ApmServerStatus defines the observed state of ApmServer
type ApmServerStatusArgs struct {
	// AvailableNodes is the number of available replicas in the deployment.
	AvailableNodes pulumi.IntPtrInput `pulumi:"availableNodes"`
	// Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// ElasticsearchAssociationStatus is the status of any auto-linking to Elasticsearch clusters.
	ElasticsearchAssociationStatus pulumi.StringPtrInput `pulumi:"elasticsearchAssociationStatus"`
	// Health of the deployment.
	Health pulumi.StringPtrInput `pulumi:"health"`
	// KibanaAssociationStatus is the status of any auto-linking to Kibana.
	KibanaAssociationStatus pulumi.StringPtrInput `pulumi:"kibanaAssociationStatus"`
	// ObservedGeneration represents the .metadata.generation that the status is based upon.
	// It corresponds to the metadata generation, which is updated on mutation by the API Server.
	// If the generation observed in status diverges from the generation in metadata, the APM Server
	// controller has not yet processed the changes contained in the APM Server specification.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// SecretTokenSecretName is the name of the Secret that contains the secret token
	SecretTokenSecret pulumi.StringPtrInput `pulumi:"secretTokenSecret"`
	// Selector is the label selector used to find all pods.
	Selector pulumi.StringPtrInput `pulumi:"selector"`
	// ExternalService is the name of the service the agents should connect to.
	Service pulumi.StringPtrInput `pulumi:"service"`
	// Version of the stack resource currently running. During version upgrades, multiple versions may run
	// in parallel: this value specifies the lowest version currently running.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ApmServerStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerStatus)(nil)).Elem()
}

func (i ApmServerStatusArgs) ToApmServerStatusOutput() ApmServerStatusOutput {
	return i.ToApmServerStatusOutputWithContext(context.Background())
}

func (i ApmServerStatusArgs) ToApmServerStatusOutputWithContext(ctx context.Context) ApmServerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerStatusOutput)
}

func (i ApmServerStatusArgs) ToApmServerStatusPtrOutput() ApmServerStatusPtrOutput {
	return i.ToApmServerStatusPtrOutputWithContext(context.Background())
}

func (i ApmServerStatusArgs) ToApmServerStatusPtrOutputWithContext(ctx context.Context) ApmServerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerStatusOutput).ToApmServerStatusPtrOutputWithContext(ctx)
}

// ApmServerStatusPtrInput is an input type that accepts ApmServerStatusArgs, ApmServerStatusPtr and ApmServerStatusPtrOutput values.
// You can construct a concrete instance of `ApmServerStatusPtrInput` via:
//
//	        ApmServerStatusArgs{...}
//
//	or:
//
//	        nil
type ApmServerStatusPtrInput interface {
	pulumi.Input

	ToApmServerStatusPtrOutput() ApmServerStatusPtrOutput
	ToApmServerStatusPtrOutputWithContext(context.Context) ApmServerStatusPtrOutput
}

type apmServerStatusPtrType ApmServerStatusArgs

func ApmServerStatusPtr(v *ApmServerStatusArgs) ApmServerStatusPtrInput {
	return (*apmServerStatusPtrType)(v)
}

func (*apmServerStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerStatus)(nil)).Elem()
}

func (i *apmServerStatusPtrType) ToApmServerStatusPtrOutput() ApmServerStatusPtrOutput {
	return i.ToApmServerStatusPtrOutputWithContext(context.Background())
}

func (i *apmServerStatusPtrType) ToApmServerStatusPtrOutputWithContext(ctx context.Context) ApmServerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerStatusPtrOutput)
}

// ApmServerStatus defines the observed state of ApmServer
type ApmServerStatusOutput struct{ *pulumi.OutputState }

func (ApmServerStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmServerStatus)(nil)).Elem()
}

func (o ApmServerStatusOutput) ToApmServerStatusOutput() ApmServerStatusOutput {
	return o
}

func (o ApmServerStatusOutput) ToApmServerStatusOutputWithContext(ctx context.Context) ApmServerStatusOutput {
	return o
}

func (o ApmServerStatusOutput) ToApmServerStatusPtrOutput() ApmServerStatusPtrOutput {
	return o.ToApmServerStatusPtrOutputWithContext(context.Background())
}

func (o ApmServerStatusOutput) ToApmServerStatusPtrOutputWithContext(ctx context.Context) ApmServerStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApmServerStatus) *ApmServerStatus {
		return &v
	}).(ApmServerStatusPtrOutput)
}

// AvailableNodes is the number of available replicas in the deployment.
func (o ApmServerStatusOutput) AvailableNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApmServerStatus) *int { return v.AvailableNodes }).(pulumi.IntPtrOutput)
}

// Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
func (o ApmServerStatusOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApmServerStatus) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// ElasticsearchAssociationStatus is the status of any auto-linking to Elasticsearch clusters.
func (o ApmServerStatusOutput) ElasticsearchAssociationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerStatus) *string { return v.ElasticsearchAssociationStatus }).(pulumi.StringPtrOutput)
}

// Health of the deployment.
func (o ApmServerStatusOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerStatus) *string { return v.Health }).(pulumi.StringPtrOutput)
}

// KibanaAssociationStatus is the status of any auto-linking to Kibana.
func (o ApmServerStatusOutput) KibanaAssociationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerStatus) *string { return v.KibanaAssociationStatus }).(pulumi.StringPtrOutput)
}

// ObservedGeneration represents the .metadata.generation that the status is based upon.
// It corresponds to the metadata generation, which is updated on mutation by the API Server.
// If the generation observed in status diverges from the generation in metadata, the APM Server
// controller has not yet processed the changes contained in the APM Server specification.
func (o ApmServerStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApmServerStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// SecretTokenSecretName is the name of the Secret that contains the secret token
func (o ApmServerStatusOutput) SecretTokenSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerStatus) *string { return v.SecretTokenSecret }).(pulumi.StringPtrOutput)
}

// Selector is the label selector used to find all pods.
func (o ApmServerStatusOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerStatus) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

// ExternalService is the name of the service the agents should connect to.
func (o ApmServerStatusOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerStatus) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// Version of the stack resource currently running. During version upgrades, multiple versions may run
// in parallel: this value specifies the lowest version currently running.
func (o ApmServerStatusOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApmServerStatus) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ApmServerStatusPtrOutput struct{ *pulumi.OutputState }

func (ApmServerStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerStatus)(nil)).Elem()
}

func (o ApmServerStatusPtrOutput) ToApmServerStatusPtrOutput() ApmServerStatusPtrOutput {
	return o
}

func (o ApmServerStatusPtrOutput) ToApmServerStatusPtrOutputWithContext(ctx context.Context) ApmServerStatusPtrOutput {
	return o
}

func (o ApmServerStatusPtrOutput) Elem() ApmServerStatusOutput {
	return o.ApplyT(func(v *ApmServerStatus) ApmServerStatus {
		if v != nil {
			return *v
		}
		var ret ApmServerStatus
		return ret
	}).(ApmServerStatusOutput)
}

// AvailableNodes is the number of available replicas in the deployment.
func (o ApmServerStatusPtrOutput) AvailableNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApmServerStatus) *int {
		if v == nil {
			return nil
		}
		return v.AvailableNodes
	}).(pulumi.IntPtrOutput)
}

// Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
func (o ApmServerStatusPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApmServerStatus) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// ElasticsearchAssociationStatus is the status of any auto-linking to Elasticsearch clusters.
func (o ApmServerStatusPtrOutput) ElasticsearchAssociationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerStatus) *string {
		if v == nil {
			return nil
		}
		return v.ElasticsearchAssociationStatus
	}).(pulumi.StringPtrOutput)
}

// Health of the deployment.
func (o ApmServerStatusPtrOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerStatus) *string {
		if v == nil {
			return nil
		}
		return v.Health
	}).(pulumi.StringPtrOutput)
}

// KibanaAssociationStatus is the status of any auto-linking to Kibana.
func (o ApmServerStatusPtrOutput) KibanaAssociationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerStatus) *string {
		if v == nil {
			return nil
		}
		return v.KibanaAssociationStatus
	}).(pulumi.StringPtrOutput)
}

// ObservedGeneration represents the .metadata.generation that the status is based upon.
// It corresponds to the metadata generation, which is updated on mutation by the API Server.
// If the generation observed in status diverges from the generation in metadata, the APM Server
// controller has not yet processed the changes contained in the APM Server specification.
func (o ApmServerStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApmServerStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// SecretTokenSecretName is the name of the Secret that contains the secret token
func (o ApmServerStatusPtrOutput) SecretTokenSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerStatus) *string {
		if v == nil {
			return nil
		}
		return v.SecretTokenSecret
	}).(pulumi.StringPtrOutput)
}

// Selector is the label selector used to find all pods.
func (o ApmServerStatusPtrOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerStatus) *string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringPtrOutput)
}

// ExternalService is the name of the service the agents should connect to.
func (o ApmServerStatusPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerStatus) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Version of the stack resource currently running. During version upgrades, multiple versions may run
// in parallel: this value specifies the lowest version currently running.
func (o ApmServerStatusPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerStatus) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecInput)(nil)).Elem(), ApmServerSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecPtrInput)(nil)).Elem(), ApmServerSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecElasticsearchRefInput)(nil)).Elem(), ApmServerSpecElasticsearchRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecElasticsearchRefPtrInput)(nil)).Elem(), ApmServerSpecElasticsearchRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecHttpInput)(nil)).Elem(), ApmServerSpecHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecHttpPtrInput)(nil)).Elem(), ApmServerSpecHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecHttpServiceInput)(nil)).Elem(), ApmServerSpecHttpServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecHttpServicePtrInput)(nil)).Elem(), ApmServerSpecHttpServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecHttpServiceMetadataInput)(nil)).Elem(), ApmServerSpecHttpServiceMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecHttpServiceMetadataPtrInput)(nil)).Elem(), ApmServerSpecHttpServiceMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecHttpServiceSpecInput)(nil)).Elem(), ApmServerSpecHttpServiceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecHttpServiceSpecPtrInput)(nil)).Elem(), ApmServerSpecHttpServiceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecHttpServiceSpecPortsInput)(nil)).Elem(), ApmServerSpecHttpServiceSpecPortsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecHttpServiceSpecPortsArrayInput)(nil)).Elem(), ApmServerSpecHttpServiceSpecPortsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecHttpServiceSpecSessionAffinityConfigInput)(nil)).Elem(), ApmServerSpecHttpServiceSpecSessionAffinityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrInput)(nil)).Elem(), ApmServerSpecHttpServiceSpecSessionAffinityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpInput)(nil)).Elem(), ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrInput)(nil)).Elem(), ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecHttpTlsInput)(nil)).Elem(), ApmServerSpecHttpTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecHttpTlsPtrInput)(nil)).Elem(), ApmServerSpecHttpTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecHttpTlsCertificateInput)(nil)).Elem(), ApmServerSpecHttpTlsCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecHttpTlsCertificatePtrInput)(nil)).Elem(), ApmServerSpecHttpTlsCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecHttpTlsSelfSignedCertificateInput)(nil)).Elem(), ApmServerSpecHttpTlsSelfSignedCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecHttpTlsSelfSignedCertificatePtrInput)(nil)).Elem(), ApmServerSpecHttpTlsSelfSignedCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput)(nil)).Elem(), ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput)(nil)).Elem(), ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecKibanaRefInput)(nil)).Elem(), ApmServerSpecKibanaRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecKibanaRefPtrInput)(nil)).Elem(), ApmServerSpecKibanaRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecSecureSettingsInput)(nil)).Elem(), ApmServerSpecSecureSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecSecureSettingsArrayInput)(nil)).Elem(), ApmServerSpecSecureSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecSecureSettingsEntriesInput)(nil)).Elem(), ApmServerSpecSecureSettingsEntriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerSpecSecureSettingsEntriesArrayInput)(nil)).Elem(), ApmServerSpecSecureSettingsEntriesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerStatusInput)(nil)).Elem(), ApmServerStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerStatusPtrInput)(nil)).Elem(), ApmServerStatusArgs{})
	pulumi.RegisterOutputType(ApmServerSpecOutput{})
	pulumi.RegisterOutputType(ApmServerSpecPtrOutput{})
	pulumi.RegisterOutputType(ApmServerSpecElasticsearchRefOutput{})
	pulumi.RegisterOutputType(ApmServerSpecElasticsearchRefPtrOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpPtrOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpServiceOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpServicePtrOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpServiceMetadataOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpServiceMetadataPtrOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpServiceSpecOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpServiceSpecPtrOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpServiceSpecPortsOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpServiceSpecPortsArrayOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpServiceSpecSessionAffinityConfigOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpTlsOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpTlsPtrOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpTlsCertificateOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpTlsCertificatePtrOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpTlsSelfSignedCertificateOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpTlsSelfSignedCertificatePtrOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput{})
	pulumi.RegisterOutputType(ApmServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput{})
	pulumi.RegisterOutputType(ApmServerSpecKibanaRefOutput{})
	pulumi.RegisterOutputType(ApmServerSpecKibanaRefPtrOutput{})
	pulumi.RegisterOutputType(ApmServerSpecSecureSettingsOutput{})
	pulumi.RegisterOutputType(ApmServerSpecSecureSettingsArrayOutput{})
	pulumi.RegisterOutputType(ApmServerSpecSecureSettingsEntriesOutput{})
	pulumi.RegisterOutputType(ApmServerSpecSecureSettingsEntriesArrayOutput{})
	pulumi.RegisterOutputType(ApmServerStatusOutput{})
	pulumi.RegisterOutputType(ApmServerStatusPtrOutput{})
}
