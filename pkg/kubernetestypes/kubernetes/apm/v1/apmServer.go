// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ApmServer represents an APM Server resource in a Kubernetes cluster.
type ApmServer struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// ApmServerSpec holds the specification of an APM Server.
	Spec ApmServerSpecPtrOutput `pulumi:"spec"`
	// ApmServerStatus defines the observed state of ApmServer
	Status ApmServerStatusPtrOutput `pulumi:"status"`
}

// NewApmServer registers a new resource with the given unique name, arguments, and options.
func NewApmServer(ctx *pulumi.Context,
	name string, args *ApmServerArgs, opts ...pulumi.ResourceOption) (*ApmServer, error) {
	if args == nil {
		args = &ApmServerArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("apm.k8s.elastic.co/v1")
	args.Kind = pulumi.StringPtr("ApmServer")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ApmServer
	err := ctx.RegisterResource("kubernetes:apm.k8s.elastic.co/v1:ApmServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApmServer gets an existing ApmServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApmServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApmServerState, opts ...pulumi.ResourceOption) (*ApmServer, error) {
	var resource ApmServer
	err := ctx.ReadResource("kubernetes:apm.k8s.elastic.co/v1:ApmServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApmServer resources.
type apmServerState struct {
}

type ApmServerState struct {
}

func (ApmServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*apmServerState)(nil)).Elem()
}

type apmServerArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ApmServerSpec holds the specification of an APM Server.
	Spec *ApmServerSpec `pulumi:"spec"`
	// ApmServerStatus defines the observed state of ApmServer
	Status *ApmServerStatus `pulumi:"status"`
}

// The set of arguments for constructing a ApmServer resource.
type ApmServerArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// ApmServerSpec holds the specification of an APM Server.
	Spec ApmServerSpecPtrInput
	// ApmServerStatus defines the observed state of ApmServer
	Status ApmServerStatusPtrInput
}

func (ApmServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apmServerArgs)(nil)).Elem()
}

type ApmServerInput interface {
	pulumi.Input

	ToApmServerOutput() ApmServerOutput
	ToApmServerOutputWithContext(ctx context.Context) ApmServerOutput
}

func (*ApmServer) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServer)(nil)).Elem()
}

func (i *ApmServer) ToApmServerOutput() ApmServerOutput {
	return i.ToApmServerOutputWithContext(context.Background())
}

func (i *ApmServer) ToApmServerOutputWithContext(ctx context.Context) ApmServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerOutput)
}

type ApmServerOutput struct{ *pulumi.OutputState }

func (ApmServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServer)(nil)).Elem()
}

func (o ApmServerOutput) ToApmServerOutput() ApmServerOutput {
	return o
}

func (o ApmServerOutput) ToApmServerOutputWithContext(ctx context.Context) ApmServerOutput {
	return o
}

func (o ApmServerOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServer) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o ApmServerOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServer) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ApmServerOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *ApmServer) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// ApmServerSpec holds the specification of an APM Server.
func (o ApmServerOutput) Spec() ApmServerSpecPtrOutput {
	return o.ApplyT(func(v *ApmServer) ApmServerSpecPtrOutput { return v.Spec }).(ApmServerSpecPtrOutput)
}

// ApmServerStatus defines the observed state of ApmServer
func (o ApmServerOutput) Status() ApmServerStatusPtrOutput {
	return o.ApplyT(func(v *ApmServer) ApmServerStatusPtrOutput { return v.Status }).(ApmServerStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerInput)(nil)).Elem(), &ApmServer{})
	pulumi.RegisterOutputType(ApmServerOutput{})
}
