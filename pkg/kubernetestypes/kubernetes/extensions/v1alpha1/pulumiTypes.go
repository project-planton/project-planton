// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

type WasmPluginType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Extend the functionality provided by the Istio proxy through WebAssembly filters. See more details at: https://istio.io/docs/reference/config/proxy_extensions/wasm-plugin.html
	Spec   WasmPluginSpec         `pulumi:"spec"`
	Status map[string]interface{} `pulumi:"status"`
}

// Extend the functionality provided by the Istio proxy through WebAssembly filters. See more details at: https://istio.io/docs/reference/config/proxy_extensions/wasm-plugin.html
type WasmPluginSpec struct {
	// Specifies the failure behavior for the plugin due to fatal errors.
	//
	// Valid Options: FAIL_CLOSE, FAIL_OPEN
	FailStrategy *string `pulumi:"failStrategy"`
	// The pull behaviour to be applied when fetching Wasm module by either OCI image or `http/https`.
	//
	// Valid Options: IfNotPresent, Always
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// Credentials to use for OCI image pulling.
	ImagePullSecret *string `pulumi:"imagePullSecret"`
	// Specifies the criteria to determine which traffic is passed to WasmPlugin.
	Match []WasmPluginSpecMatch `pulumi:"match"`
	// Determines where in the filter chain this `WasmPlugin` is to be injected.
	//
	// Valid Options: AUTHN, AUTHZ, STATS
	Phase *string `pulumi:"phase"`
	// The configuration that will be passed on to the plugin.
	PluginConfig map[string]interface{} `pulumi:"pluginConfig"`
	// The plugin name to be used in the Envoy configuration (used to be called `rootID`).
	PluginName *string `pulumi:"pluginName"`
	// Determines ordering of `WasmPlugins` in the same `phase`.
	Priority *int `pulumi:"priority"`
	// Criteria used to select the specific set of pods/VMs on which this plugin configuration should be applied.
	Selector *WasmPluginSpecSelector `pulumi:"selector"`
	// SHA256 checksum that will be used to verify Wasm module or OCI container.
	Sha256    *string                  `pulumi:"sha256"`
	TargetRef *WasmPluginSpecTargetRef `pulumi:"targetRef"`
	// Optional.
	TargetRefs []WasmPluginSpecTargetRefs `pulumi:"targetRefs"`
	// Specifies the type of Wasm Extension to be used.
	//
	// Valid Options: HTTP, NETWORK
	Type *string `pulumi:"type"`
	// URL of a Wasm module or OCI container.
	Url             string  `pulumi:"url"`
	VerificationKey *string `pulumi:"verificationKey"`
	// Configuration for a Wasm VM.
	VmConfig *WasmPluginSpecVmConfig `pulumi:"vmConfig"`
}

// WasmPluginSpecInput is an input type that accepts WasmPluginSpecArgs and WasmPluginSpecOutput values.
// You can construct a concrete instance of `WasmPluginSpecInput` via:
//
//	WasmPluginSpecArgs{...}
type WasmPluginSpecInput interface {
	pulumi.Input

	ToWasmPluginSpecOutput() WasmPluginSpecOutput
	ToWasmPluginSpecOutputWithContext(context.Context) WasmPluginSpecOutput
}

// Extend the functionality provided by the Istio proxy through WebAssembly filters. See more details at: https://istio.io/docs/reference/config/proxy_extensions/wasm-plugin.html
type WasmPluginSpecArgs struct {
	// Specifies the failure behavior for the plugin due to fatal errors.
	//
	// Valid Options: FAIL_CLOSE, FAIL_OPEN
	FailStrategy pulumi.StringPtrInput `pulumi:"failStrategy"`
	// The pull behaviour to be applied when fetching Wasm module by either OCI image or `http/https`.
	//
	// Valid Options: IfNotPresent, Always
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// Credentials to use for OCI image pulling.
	ImagePullSecret pulumi.StringPtrInput `pulumi:"imagePullSecret"`
	// Specifies the criteria to determine which traffic is passed to WasmPlugin.
	Match WasmPluginSpecMatchArrayInput `pulumi:"match"`
	// Determines where in the filter chain this `WasmPlugin` is to be injected.
	//
	// Valid Options: AUTHN, AUTHZ, STATS
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// The configuration that will be passed on to the plugin.
	PluginConfig pulumi.MapInput `pulumi:"pluginConfig"`
	// The plugin name to be used in the Envoy configuration (used to be called `rootID`).
	PluginName pulumi.StringPtrInput `pulumi:"pluginName"`
	// Determines ordering of `WasmPlugins` in the same `phase`.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// Criteria used to select the specific set of pods/VMs on which this plugin configuration should be applied.
	Selector WasmPluginSpecSelectorPtrInput `pulumi:"selector"`
	// SHA256 checksum that will be used to verify Wasm module or OCI container.
	Sha256    pulumi.StringPtrInput           `pulumi:"sha256"`
	TargetRef WasmPluginSpecTargetRefPtrInput `pulumi:"targetRef"`
	// Optional.
	TargetRefs WasmPluginSpecTargetRefsArrayInput `pulumi:"targetRefs"`
	// Specifies the type of Wasm Extension to be used.
	//
	// Valid Options: HTTP, NETWORK
	Type pulumi.StringPtrInput `pulumi:"type"`
	// URL of a Wasm module or OCI container.
	Url             pulumi.StringInput    `pulumi:"url"`
	VerificationKey pulumi.StringPtrInput `pulumi:"verificationKey"`
	// Configuration for a Wasm VM.
	VmConfig WasmPluginSpecVmConfigPtrInput `pulumi:"vmConfig"`
}

func (WasmPluginSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpec)(nil)).Elem()
}

func (i WasmPluginSpecArgs) ToWasmPluginSpecOutput() WasmPluginSpecOutput {
	return i.ToWasmPluginSpecOutputWithContext(context.Background())
}

func (i WasmPluginSpecArgs) ToWasmPluginSpecOutputWithContext(ctx context.Context) WasmPluginSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecOutput)
}

func (i WasmPluginSpecArgs) ToWasmPluginSpecPtrOutput() WasmPluginSpecPtrOutput {
	return i.ToWasmPluginSpecPtrOutputWithContext(context.Background())
}

func (i WasmPluginSpecArgs) ToWasmPluginSpecPtrOutputWithContext(ctx context.Context) WasmPluginSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecOutput).ToWasmPluginSpecPtrOutputWithContext(ctx)
}

// WasmPluginSpecPtrInput is an input type that accepts WasmPluginSpecArgs, WasmPluginSpecPtr and WasmPluginSpecPtrOutput values.
// You can construct a concrete instance of `WasmPluginSpecPtrInput` via:
//
//	        WasmPluginSpecArgs{...}
//
//	or:
//
//	        nil
type WasmPluginSpecPtrInput interface {
	pulumi.Input

	ToWasmPluginSpecPtrOutput() WasmPluginSpecPtrOutput
	ToWasmPluginSpecPtrOutputWithContext(context.Context) WasmPluginSpecPtrOutput
}

type wasmPluginSpecPtrType WasmPluginSpecArgs

func WasmPluginSpecPtr(v *WasmPluginSpecArgs) WasmPluginSpecPtrInput {
	return (*wasmPluginSpecPtrType)(v)
}

func (*wasmPluginSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPluginSpec)(nil)).Elem()
}

func (i *wasmPluginSpecPtrType) ToWasmPluginSpecPtrOutput() WasmPluginSpecPtrOutput {
	return i.ToWasmPluginSpecPtrOutputWithContext(context.Background())
}

func (i *wasmPluginSpecPtrType) ToWasmPluginSpecPtrOutputWithContext(ctx context.Context) WasmPluginSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecPtrOutput)
}

// Extend the functionality provided by the Istio proxy through WebAssembly filters. See more details at: https://istio.io/docs/reference/config/proxy_extensions/wasm-plugin.html
type WasmPluginSpecOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpec)(nil)).Elem()
}

func (o WasmPluginSpecOutput) ToWasmPluginSpecOutput() WasmPluginSpecOutput {
	return o
}

func (o WasmPluginSpecOutput) ToWasmPluginSpecOutputWithContext(ctx context.Context) WasmPluginSpecOutput {
	return o
}

func (o WasmPluginSpecOutput) ToWasmPluginSpecPtrOutput() WasmPluginSpecPtrOutput {
	return o.ToWasmPluginSpecPtrOutputWithContext(context.Background())
}

func (o WasmPluginSpecOutput) ToWasmPluginSpecPtrOutputWithContext(ctx context.Context) WasmPluginSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WasmPluginSpec) *WasmPluginSpec {
		return &v
	}).(WasmPluginSpecPtrOutput)
}

// Specifies the failure behavior for the plugin due to fatal errors.
//
// Valid Options: FAIL_CLOSE, FAIL_OPEN
func (o WasmPluginSpecOutput) FailStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpec) *string { return v.FailStrategy }).(pulumi.StringPtrOutput)
}

// The pull behaviour to be applied when fetching Wasm module by either OCI image or `http/https`.
//
// Valid Options: IfNotPresent, Always
func (o WasmPluginSpecOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpec) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// Credentials to use for OCI image pulling.
func (o WasmPluginSpecOutput) ImagePullSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpec) *string { return v.ImagePullSecret }).(pulumi.StringPtrOutput)
}

// Specifies the criteria to determine which traffic is passed to WasmPlugin.
func (o WasmPluginSpecOutput) Match() WasmPluginSpecMatchArrayOutput {
	return o.ApplyT(func(v WasmPluginSpec) []WasmPluginSpecMatch { return v.Match }).(WasmPluginSpecMatchArrayOutput)
}

// Determines where in the filter chain this `WasmPlugin` is to be injected.
//
// Valid Options: AUTHN, AUTHZ, STATS
func (o WasmPluginSpecOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpec) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// The configuration that will be passed on to the plugin.
func (o WasmPluginSpecOutput) PluginConfig() pulumi.MapOutput {
	return o.ApplyT(func(v WasmPluginSpec) map[string]interface{} { return v.PluginConfig }).(pulumi.MapOutput)
}

// The plugin name to be used in the Envoy configuration (used to be called `rootID`).
func (o WasmPluginSpecOutput) PluginName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpec) *string { return v.PluginName }).(pulumi.StringPtrOutput)
}

// Determines ordering of `WasmPlugins` in the same `phase`.
func (o WasmPluginSpecOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WasmPluginSpec) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// Criteria used to select the specific set of pods/VMs on which this plugin configuration should be applied.
func (o WasmPluginSpecOutput) Selector() WasmPluginSpecSelectorPtrOutput {
	return o.ApplyT(func(v WasmPluginSpec) *WasmPluginSpecSelector { return v.Selector }).(WasmPluginSpecSelectorPtrOutput)
}

// SHA256 checksum that will be used to verify Wasm module or OCI container.
func (o WasmPluginSpecOutput) Sha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpec) *string { return v.Sha256 }).(pulumi.StringPtrOutput)
}

func (o WasmPluginSpecOutput) TargetRef() WasmPluginSpecTargetRefPtrOutput {
	return o.ApplyT(func(v WasmPluginSpec) *WasmPluginSpecTargetRef { return v.TargetRef }).(WasmPluginSpecTargetRefPtrOutput)
}

// Optional.
func (o WasmPluginSpecOutput) TargetRefs() WasmPluginSpecTargetRefsArrayOutput {
	return o.ApplyT(func(v WasmPluginSpec) []WasmPluginSpecTargetRefs { return v.TargetRefs }).(WasmPluginSpecTargetRefsArrayOutput)
}

// Specifies the type of Wasm Extension to be used.
//
// Valid Options: HTTP, NETWORK
func (o WasmPluginSpecOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpec) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// URL of a Wasm module or OCI container.
func (o WasmPluginSpecOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v WasmPluginSpec) string { return v.Url }).(pulumi.StringOutput)
}

func (o WasmPluginSpecOutput) VerificationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpec) *string { return v.VerificationKey }).(pulumi.StringPtrOutput)
}

// Configuration for a Wasm VM.
func (o WasmPluginSpecOutput) VmConfig() WasmPluginSpecVmConfigPtrOutput {
	return o.ApplyT(func(v WasmPluginSpec) *WasmPluginSpecVmConfig { return v.VmConfig }).(WasmPluginSpecVmConfigPtrOutput)
}

type WasmPluginSpecPtrOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPluginSpec)(nil)).Elem()
}

func (o WasmPluginSpecPtrOutput) ToWasmPluginSpecPtrOutput() WasmPluginSpecPtrOutput {
	return o
}

func (o WasmPluginSpecPtrOutput) ToWasmPluginSpecPtrOutputWithContext(ctx context.Context) WasmPluginSpecPtrOutput {
	return o
}

func (o WasmPluginSpecPtrOutput) Elem() WasmPluginSpecOutput {
	return o.ApplyT(func(v *WasmPluginSpec) WasmPluginSpec {
		if v != nil {
			return *v
		}
		var ret WasmPluginSpec
		return ret
	}).(WasmPluginSpecOutput)
}

// Specifies the failure behavior for the plugin due to fatal errors.
//
// Valid Options: FAIL_CLOSE, FAIL_OPEN
func (o WasmPluginSpecPtrOutput) FailStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpec) *string {
		if v == nil {
			return nil
		}
		return v.FailStrategy
	}).(pulumi.StringPtrOutput)
}

// The pull behaviour to be applied when fetching Wasm module by either OCI image or `http/https`.
//
// Valid Options: IfNotPresent, Always
func (o WasmPluginSpecPtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpec) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// Credentials to use for OCI image pulling.
func (o WasmPluginSpecPtrOutput) ImagePullSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpec) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullSecret
	}).(pulumi.StringPtrOutput)
}

// Specifies the criteria to determine which traffic is passed to WasmPlugin.
func (o WasmPluginSpecPtrOutput) Match() WasmPluginSpecMatchArrayOutput {
	return o.ApplyT(func(v *WasmPluginSpec) []WasmPluginSpecMatch {
		if v == nil {
			return nil
		}
		return v.Match
	}).(WasmPluginSpecMatchArrayOutput)
}

// Determines where in the filter chain this `WasmPlugin` is to be injected.
//
// Valid Options: AUTHN, AUTHZ, STATS
func (o WasmPluginSpecPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpec) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// The configuration that will be passed on to the plugin.
func (o WasmPluginSpecPtrOutput) PluginConfig() pulumi.MapOutput {
	return o.ApplyT(func(v *WasmPluginSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.PluginConfig
	}).(pulumi.MapOutput)
}

// The plugin name to be used in the Envoy configuration (used to be called `rootID`).
func (o WasmPluginSpecPtrOutput) PluginName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpec) *string {
		if v == nil {
			return nil
		}
		return v.PluginName
	}).(pulumi.StringPtrOutput)
}

// Determines ordering of `WasmPlugins` in the same `phase`.
func (o WasmPluginSpecPtrOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpec) *int {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.IntPtrOutput)
}

// Criteria used to select the specific set of pods/VMs on which this plugin configuration should be applied.
func (o WasmPluginSpecPtrOutput) Selector() WasmPluginSpecSelectorPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpec) *WasmPluginSpecSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(WasmPluginSpecSelectorPtrOutput)
}

// SHA256 checksum that will be used to verify Wasm module or OCI container.
func (o WasmPluginSpecPtrOutput) Sha256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpec) *string {
		if v == nil {
			return nil
		}
		return v.Sha256
	}).(pulumi.StringPtrOutput)
}

func (o WasmPluginSpecPtrOutput) TargetRef() WasmPluginSpecTargetRefPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpec) *WasmPluginSpecTargetRef {
		if v == nil {
			return nil
		}
		return v.TargetRef
	}).(WasmPluginSpecTargetRefPtrOutput)
}

// Optional.
func (o WasmPluginSpecPtrOutput) TargetRefs() WasmPluginSpecTargetRefsArrayOutput {
	return o.ApplyT(func(v *WasmPluginSpec) []WasmPluginSpecTargetRefs {
		if v == nil {
			return nil
		}
		return v.TargetRefs
	}).(WasmPluginSpecTargetRefsArrayOutput)
}

// Specifies the type of Wasm Extension to be used.
//
// Valid Options: HTTP, NETWORK
func (o WasmPluginSpecPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpec) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// URL of a Wasm module or OCI container.
func (o WasmPluginSpecPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

func (o WasmPluginSpecPtrOutput) VerificationKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpec) *string {
		if v == nil {
			return nil
		}
		return v.VerificationKey
	}).(pulumi.StringPtrOutput)
}

// Configuration for a Wasm VM.
func (o WasmPluginSpecPtrOutput) VmConfig() WasmPluginSpecVmConfigPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpec) *WasmPluginSpecVmConfig {
		if v == nil {
			return nil
		}
		return v.VmConfig
	}).(WasmPluginSpecVmConfigPtrOutput)
}

type WasmPluginSpecMatch struct {
	// Criteria for selecting traffic by their direction.
	//
	// Valid Options: CLIENT, SERVER, CLIENT_AND_SERVER
	Mode *string `pulumi:"mode"`
	// Criteria for selecting traffic by their destination port.
	Ports []WasmPluginSpecMatchPorts `pulumi:"ports"`
}

// WasmPluginSpecMatchInput is an input type that accepts WasmPluginSpecMatchArgs and WasmPluginSpecMatchOutput values.
// You can construct a concrete instance of `WasmPluginSpecMatchInput` via:
//
//	WasmPluginSpecMatchArgs{...}
type WasmPluginSpecMatchInput interface {
	pulumi.Input

	ToWasmPluginSpecMatchOutput() WasmPluginSpecMatchOutput
	ToWasmPluginSpecMatchOutputWithContext(context.Context) WasmPluginSpecMatchOutput
}

type WasmPluginSpecMatchArgs struct {
	// Criteria for selecting traffic by their direction.
	//
	// Valid Options: CLIENT, SERVER, CLIENT_AND_SERVER
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Criteria for selecting traffic by their destination port.
	Ports WasmPluginSpecMatchPortsArrayInput `pulumi:"ports"`
}

func (WasmPluginSpecMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecMatch)(nil)).Elem()
}

func (i WasmPluginSpecMatchArgs) ToWasmPluginSpecMatchOutput() WasmPluginSpecMatchOutput {
	return i.ToWasmPluginSpecMatchOutputWithContext(context.Background())
}

func (i WasmPluginSpecMatchArgs) ToWasmPluginSpecMatchOutputWithContext(ctx context.Context) WasmPluginSpecMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecMatchOutput)
}

// WasmPluginSpecMatchArrayInput is an input type that accepts WasmPluginSpecMatchArray and WasmPluginSpecMatchArrayOutput values.
// You can construct a concrete instance of `WasmPluginSpecMatchArrayInput` via:
//
//	WasmPluginSpecMatchArray{ WasmPluginSpecMatchArgs{...} }
type WasmPluginSpecMatchArrayInput interface {
	pulumi.Input

	ToWasmPluginSpecMatchArrayOutput() WasmPluginSpecMatchArrayOutput
	ToWasmPluginSpecMatchArrayOutputWithContext(context.Context) WasmPluginSpecMatchArrayOutput
}

type WasmPluginSpecMatchArray []WasmPluginSpecMatchInput

func (WasmPluginSpecMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WasmPluginSpecMatch)(nil)).Elem()
}

func (i WasmPluginSpecMatchArray) ToWasmPluginSpecMatchArrayOutput() WasmPluginSpecMatchArrayOutput {
	return i.ToWasmPluginSpecMatchArrayOutputWithContext(context.Background())
}

func (i WasmPluginSpecMatchArray) ToWasmPluginSpecMatchArrayOutputWithContext(ctx context.Context) WasmPluginSpecMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecMatchArrayOutput)
}

type WasmPluginSpecMatchOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecMatch)(nil)).Elem()
}

func (o WasmPluginSpecMatchOutput) ToWasmPluginSpecMatchOutput() WasmPluginSpecMatchOutput {
	return o
}

func (o WasmPluginSpecMatchOutput) ToWasmPluginSpecMatchOutputWithContext(ctx context.Context) WasmPluginSpecMatchOutput {
	return o
}

// Criteria for selecting traffic by their direction.
//
// Valid Options: CLIENT, SERVER, CLIENT_AND_SERVER
func (o WasmPluginSpecMatchOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecMatch) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Criteria for selecting traffic by their destination port.
func (o WasmPluginSpecMatchOutput) Ports() WasmPluginSpecMatchPortsArrayOutput {
	return o.ApplyT(func(v WasmPluginSpecMatch) []WasmPluginSpecMatchPorts { return v.Ports }).(WasmPluginSpecMatchPortsArrayOutput)
}

type WasmPluginSpecMatchArrayOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WasmPluginSpecMatch)(nil)).Elem()
}

func (o WasmPluginSpecMatchArrayOutput) ToWasmPluginSpecMatchArrayOutput() WasmPluginSpecMatchArrayOutput {
	return o
}

func (o WasmPluginSpecMatchArrayOutput) ToWasmPluginSpecMatchArrayOutputWithContext(ctx context.Context) WasmPluginSpecMatchArrayOutput {
	return o
}

func (o WasmPluginSpecMatchArrayOutput) Index(i pulumi.IntInput) WasmPluginSpecMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WasmPluginSpecMatch {
		return vs[0].([]WasmPluginSpecMatch)[vs[1].(int)]
	}).(WasmPluginSpecMatchOutput)
}

type WasmPluginSpecMatchPorts struct {
	Number int `pulumi:"number"`
}

// WasmPluginSpecMatchPortsInput is an input type that accepts WasmPluginSpecMatchPortsArgs and WasmPluginSpecMatchPortsOutput values.
// You can construct a concrete instance of `WasmPluginSpecMatchPortsInput` via:
//
//	WasmPluginSpecMatchPortsArgs{...}
type WasmPluginSpecMatchPortsInput interface {
	pulumi.Input

	ToWasmPluginSpecMatchPortsOutput() WasmPluginSpecMatchPortsOutput
	ToWasmPluginSpecMatchPortsOutputWithContext(context.Context) WasmPluginSpecMatchPortsOutput
}

type WasmPluginSpecMatchPortsArgs struct {
	Number pulumi.IntInput `pulumi:"number"`
}

func (WasmPluginSpecMatchPortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecMatchPorts)(nil)).Elem()
}

func (i WasmPluginSpecMatchPortsArgs) ToWasmPluginSpecMatchPortsOutput() WasmPluginSpecMatchPortsOutput {
	return i.ToWasmPluginSpecMatchPortsOutputWithContext(context.Background())
}

func (i WasmPluginSpecMatchPortsArgs) ToWasmPluginSpecMatchPortsOutputWithContext(ctx context.Context) WasmPluginSpecMatchPortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecMatchPortsOutput)
}

// WasmPluginSpecMatchPortsArrayInput is an input type that accepts WasmPluginSpecMatchPortsArray and WasmPluginSpecMatchPortsArrayOutput values.
// You can construct a concrete instance of `WasmPluginSpecMatchPortsArrayInput` via:
//
//	WasmPluginSpecMatchPortsArray{ WasmPluginSpecMatchPortsArgs{...} }
type WasmPluginSpecMatchPortsArrayInput interface {
	pulumi.Input

	ToWasmPluginSpecMatchPortsArrayOutput() WasmPluginSpecMatchPortsArrayOutput
	ToWasmPluginSpecMatchPortsArrayOutputWithContext(context.Context) WasmPluginSpecMatchPortsArrayOutput
}

type WasmPluginSpecMatchPortsArray []WasmPluginSpecMatchPortsInput

func (WasmPluginSpecMatchPortsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WasmPluginSpecMatchPorts)(nil)).Elem()
}

func (i WasmPluginSpecMatchPortsArray) ToWasmPluginSpecMatchPortsArrayOutput() WasmPluginSpecMatchPortsArrayOutput {
	return i.ToWasmPluginSpecMatchPortsArrayOutputWithContext(context.Background())
}

func (i WasmPluginSpecMatchPortsArray) ToWasmPluginSpecMatchPortsArrayOutputWithContext(ctx context.Context) WasmPluginSpecMatchPortsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecMatchPortsArrayOutput)
}

type WasmPluginSpecMatchPortsOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecMatchPortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecMatchPorts)(nil)).Elem()
}

func (o WasmPluginSpecMatchPortsOutput) ToWasmPluginSpecMatchPortsOutput() WasmPluginSpecMatchPortsOutput {
	return o
}

func (o WasmPluginSpecMatchPortsOutput) ToWasmPluginSpecMatchPortsOutputWithContext(ctx context.Context) WasmPluginSpecMatchPortsOutput {
	return o
}

func (o WasmPluginSpecMatchPortsOutput) Number() pulumi.IntOutput {
	return o.ApplyT(func(v WasmPluginSpecMatchPorts) int { return v.Number }).(pulumi.IntOutput)
}

type WasmPluginSpecMatchPortsArrayOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecMatchPortsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WasmPluginSpecMatchPorts)(nil)).Elem()
}

func (o WasmPluginSpecMatchPortsArrayOutput) ToWasmPluginSpecMatchPortsArrayOutput() WasmPluginSpecMatchPortsArrayOutput {
	return o
}

func (o WasmPluginSpecMatchPortsArrayOutput) ToWasmPluginSpecMatchPortsArrayOutputWithContext(ctx context.Context) WasmPluginSpecMatchPortsArrayOutput {
	return o
}

func (o WasmPluginSpecMatchPortsArrayOutput) Index(i pulumi.IntInput) WasmPluginSpecMatchPortsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WasmPluginSpecMatchPorts {
		return vs[0].([]WasmPluginSpecMatchPorts)[vs[1].(int)]
	}).(WasmPluginSpecMatchPortsOutput)
}

// Criteria used to select the specific set of pods/VMs on which this plugin configuration should be applied.
type WasmPluginSpecSelector struct {
	// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// WasmPluginSpecSelectorInput is an input type that accepts WasmPluginSpecSelectorArgs and WasmPluginSpecSelectorOutput values.
// You can construct a concrete instance of `WasmPluginSpecSelectorInput` via:
//
//	WasmPluginSpecSelectorArgs{...}
type WasmPluginSpecSelectorInput interface {
	pulumi.Input

	ToWasmPluginSpecSelectorOutput() WasmPluginSpecSelectorOutput
	ToWasmPluginSpecSelectorOutputWithContext(context.Context) WasmPluginSpecSelectorOutput
}

// Criteria used to select the specific set of pods/VMs on which this plugin configuration should be applied.
type WasmPluginSpecSelectorArgs struct {
	// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (WasmPluginSpecSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecSelector)(nil)).Elem()
}

func (i WasmPluginSpecSelectorArgs) ToWasmPluginSpecSelectorOutput() WasmPluginSpecSelectorOutput {
	return i.ToWasmPluginSpecSelectorOutputWithContext(context.Background())
}

func (i WasmPluginSpecSelectorArgs) ToWasmPluginSpecSelectorOutputWithContext(ctx context.Context) WasmPluginSpecSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecSelectorOutput)
}

func (i WasmPluginSpecSelectorArgs) ToWasmPluginSpecSelectorPtrOutput() WasmPluginSpecSelectorPtrOutput {
	return i.ToWasmPluginSpecSelectorPtrOutputWithContext(context.Background())
}

func (i WasmPluginSpecSelectorArgs) ToWasmPluginSpecSelectorPtrOutputWithContext(ctx context.Context) WasmPluginSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecSelectorOutput).ToWasmPluginSpecSelectorPtrOutputWithContext(ctx)
}

// WasmPluginSpecSelectorPtrInput is an input type that accepts WasmPluginSpecSelectorArgs, WasmPluginSpecSelectorPtr and WasmPluginSpecSelectorPtrOutput values.
// You can construct a concrete instance of `WasmPluginSpecSelectorPtrInput` via:
//
//	        WasmPluginSpecSelectorArgs{...}
//
//	or:
//
//	        nil
type WasmPluginSpecSelectorPtrInput interface {
	pulumi.Input

	ToWasmPluginSpecSelectorPtrOutput() WasmPluginSpecSelectorPtrOutput
	ToWasmPluginSpecSelectorPtrOutputWithContext(context.Context) WasmPluginSpecSelectorPtrOutput
}

type wasmPluginSpecSelectorPtrType WasmPluginSpecSelectorArgs

func WasmPluginSpecSelectorPtr(v *WasmPluginSpecSelectorArgs) WasmPluginSpecSelectorPtrInput {
	return (*wasmPluginSpecSelectorPtrType)(v)
}

func (*wasmPluginSpecSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPluginSpecSelector)(nil)).Elem()
}

func (i *wasmPluginSpecSelectorPtrType) ToWasmPluginSpecSelectorPtrOutput() WasmPluginSpecSelectorPtrOutput {
	return i.ToWasmPluginSpecSelectorPtrOutputWithContext(context.Background())
}

func (i *wasmPluginSpecSelectorPtrType) ToWasmPluginSpecSelectorPtrOutputWithContext(ctx context.Context) WasmPluginSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecSelectorPtrOutput)
}

// Criteria used to select the specific set of pods/VMs on which this plugin configuration should be applied.
type WasmPluginSpecSelectorOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecSelector)(nil)).Elem()
}

func (o WasmPluginSpecSelectorOutput) ToWasmPluginSpecSelectorOutput() WasmPluginSpecSelectorOutput {
	return o
}

func (o WasmPluginSpecSelectorOutput) ToWasmPluginSpecSelectorOutputWithContext(ctx context.Context) WasmPluginSpecSelectorOutput {
	return o
}

func (o WasmPluginSpecSelectorOutput) ToWasmPluginSpecSelectorPtrOutput() WasmPluginSpecSelectorPtrOutput {
	return o.ToWasmPluginSpecSelectorPtrOutputWithContext(context.Background())
}

func (o WasmPluginSpecSelectorOutput) ToWasmPluginSpecSelectorPtrOutputWithContext(ctx context.Context) WasmPluginSpecSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WasmPluginSpecSelector) *WasmPluginSpecSelector {
		return &v
	}).(WasmPluginSpecSelectorPtrOutput)
}

// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
func (o WasmPluginSpecSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v WasmPluginSpecSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type WasmPluginSpecSelectorPtrOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPluginSpecSelector)(nil)).Elem()
}

func (o WasmPluginSpecSelectorPtrOutput) ToWasmPluginSpecSelectorPtrOutput() WasmPluginSpecSelectorPtrOutput {
	return o
}

func (o WasmPluginSpecSelectorPtrOutput) ToWasmPluginSpecSelectorPtrOutputWithContext(ctx context.Context) WasmPluginSpecSelectorPtrOutput {
	return o
}

func (o WasmPluginSpecSelectorPtrOutput) Elem() WasmPluginSpecSelectorOutput {
	return o.ApplyT(func(v *WasmPluginSpecSelector) WasmPluginSpecSelector {
		if v != nil {
			return *v
		}
		var ret WasmPluginSpecSelector
		return ret
	}).(WasmPluginSpecSelectorOutput)
}

// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
func (o WasmPluginSpecSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WasmPluginSpecSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
type WasmPluginSpecSelectorMatchLabels struct {
}

type WasmPluginSpecTargetRef struct {
	// group is the group of the target resource.
	Group *string `pulumi:"group"`
	// kind is kind of the target resource.
	Kind *string `pulumi:"kind"`
	// name is the name of the target resource.
	Name *string `pulumi:"name"`
	// namespace is the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// WasmPluginSpecTargetRefInput is an input type that accepts WasmPluginSpecTargetRefArgs and WasmPluginSpecTargetRefOutput values.
// You can construct a concrete instance of `WasmPluginSpecTargetRefInput` via:
//
//	WasmPluginSpecTargetRefArgs{...}
type WasmPluginSpecTargetRefInput interface {
	pulumi.Input

	ToWasmPluginSpecTargetRefOutput() WasmPluginSpecTargetRefOutput
	ToWasmPluginSpecTargetRefOutputWithContext(context.Context) WasmPluginSpecTargetRefOutput
}

type WasmPluginSpecTargetRefArgs struct {
	// group is the group of the target resource.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// kind is kind of the target resource.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// name is the name of the target resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// namespace is the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (WasmPluginSpecTargetRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecTargetRef)(nil)).Elem()
}

func (i WasmPluginSpecTargetRefArgs) ToWasmPluginSpecTargetRefOutput() WasmPluginSpecTargetRefOutput {
	return i.ToWasmPluginSpecTargetRefOutputWithContext(context.Background())
}

func (i WasmPluginSpecTargetRefArgs) ToWasmPluginSpecTargetRefOutputWithContext(ctx context.Context) WasmPluginSpecTargetRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecTargetRefOutput)
}

func (i WasmPluginSpecTargetRefArgs) ToWasmPluginSpecTargetRefPtrOutput() WasmPluginSpecTargetRefPtrOutput {
	return i.ToWasmPluginSpecTargetRefPtrOutputWithContext(context.Background())
}

func (i WasmPluginSpecTargetRefArgs) ToWasmPluginSpecTargetRefPtrOutputWithContext(ctx context.Context) WasmPluginSpecTargetRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecTargetRefOutput).ToWasmPluginSpecTargetRefPtrOutputWithContext(ctx)
}

// WasmPluginSpecTargetRefPtrInput is an input type that accepts WasmPluginSpecTargetRefArgs, WasmPluginSpecTargetRefPtr and WasmPluginSpecTargetRefPtrOutput values.
// You can construct a concrete instance of `WasmPluginSpecTargetRefPtrInput` via:
//
//	        WasmPluginSpecTargetRefArgs{...}
//
//	or:
//
//	        nil
type WasmPluginSpecTargetRefPtrInput interface {
	pulumi.Input

	ToWasmPluginSpecTargetRefPtrOutput() WasmPluginSpecTargetRefPtrOutput
	ToWasmPluginSpecTargetRefPtrOutputWithContext(context.Context) WasmPluginSpecTargetRefPtrOutput
}

type wasmPluginSpecTargetRefPtrType WasmPluginSpecTargetRefArgs

func WasmPluginSpecTargetRefPtr(v *WasmPluginSpecTargetRefArgs) WasmPluginSpecTargetRefPtrInput {
	return (*wasmPluginSpecTargetRefPtrType)(v)
}

func (*wasmPluginSpecTargetRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPluginSpecTargetRef)(nil)).Elem()
}

func (i *wasmPluginSpecTargetRefPtrType) ToWasmPluginSpecTargetRefPtrOutput() WasmPluginSpecTargetRefPtrOutput {
	return i.ToWasmPluginSpecTargetRefPtrOutputWithContext(context.Background())
}

func (i *wasmPluginSpecTargetRefPtrType) ToWasmPluginSpecTargetRefPtrOutputWithContext(ctx context.Context) WasmPluginSpecTargetRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecTargetRefPtrOutput)
}

type WasmPluginSpecTargetRefOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecTargetRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecTargetRef)(nil)).Elem()
}

func (o WasmPluginSpecTargetRefOutput) ToWasmPluginSpecTargetRefOutput() WasmPluginSpecTargetRefOutput {
	return o
}

func (o WasmPluginSpecTargetRefOutput) ToWasmPluginSpecTargetRefOutputWithContext(ctx context.Context) WasmPluginSpecTargetRefOutput {
	return o
}

func (o WasmPluginSpecTargetRefOutput) ToWasmPluginSpecTargetRefPtrOutput() WasmPluginSpecTargetRefPtrOutput {
	return o.ToWasmPluginSpecTargetRefPtrOutputWithContext(context.Background())
}

func (o WasmPluginSpecTargetRefOutput) ToWasmPluginSpecTargetRefPtrOutputWithContext(ctx context.Context) WasmPluginSpecTargetRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WasmPluginSpecTargetRef) *WasmPluginSpecTargetRef {
		return &v
	}).(WasmPluginSpecTargetRefPtrOutput)
}

// group is the group of the target resource.
func (o WasmPluginSpecTargetRefOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecTargetRef) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// kind is kind of the target resource.
func (o WasmPluginSpecTargetRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecTargetRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// name is the name of the target resource.
func (o WasmPluginSpecTargetRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecTargetRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// namespace is the namespace of the referent.
func (o WasmPluginSpecTargetRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecTargetRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type WasmPluginSpecTargetRefPtrOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecTargetRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPluginSpecTargetRef)(nil)).Elem()
}

func (o WasmPluginSpecTargetRefPtrOutput) ToWasmPluginSpecTargetRefPtrOutput() WasmPluginSpecTargetRefPtrOutput {
	return o
}

func (o WasmPluginSpecTargetRefPtrOutput) ToWasmPluginSpecTargetRefPtrOutputWithContext(ctx context.Context) WasmPluginSpecTargetRefPtrOutput {
	return o
}

func (o WasmPluginSpecTargetRefPtrOutput) Elem() WasmPluginSpecTargetRefOutput {
	return o.ApplyT(func(v *WasmPluginSpecTargetRef) WasmPluginSpecTargetRef {
		if v != nil {
			return *v
		}
		var ret WasmPluginSpecTargetRef
		return ret
	}).(WasmPluginSpecTargetRefOutput)
}

// group is the group of the target resource.
func (o WasmPluginSpecTargetRefPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpecTargetRef) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// kind is kind of the target resource.
func (o WasmPluginSpecTargetRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpecTargetRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// name is the name of the target resource.
func (o WasmPluginSpecTargetRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpecTargetRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// namespace is the namespace of the referent.
func (o WasmPluginSpecTargetRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WasmPluginSpecTargetRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type WasmPluginSpecTargetRefs struct {
	// group is the group of the target resource.
	Group *string `pulumi:"group"`
	// kind is kind of the target resource.
	Kind *string `pulumi:"kind"`
	// name is the name of the target resource.
	Name *string `pulumi:"name"`
	// namespace is the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// WasmPluginSpecTargetRefsInput is an input type that accepts WasmPluginSpecTargetRefsArgs and WasmPluginSpecTargetRefsOutput values.
// You can construct a concrete instance of `WasmPluginSpecTargetRefsInput` via:
//
//	WasmPluginSpecTargetRefsArgs{...}
type WasmPluginSpecTargetRefsInput interface {
	pulumi.Input

	ToWasmPluginSpecTargetRefsOutput() WasmPluginSpecTargetRefsOutput
	ToWasmPluginSpecTargetRefsOutputWithContext(context.Context) WasmPluginSpecTargetRefsOutput
}

type WasmPluginSpecTargetRefsArgs struct {
	// group is the group of the target resource.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// kind is kind of the target resource.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// name is the name of the target resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// namespace is the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (WasmPluginSpecTargetRefsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecTargetRefs)(nil)).Elem()
}

func (i WasmPluginSpecTargetRefsArgs) ToWasmPluginSpecTargetRefsOutput() WasmPluginSpecTargetRefsOutput {
	return i.ToWasmPluginSpecTargetRefsOutputWithContext(context.Background())
}

func (i WasmPluginSpecTargetRefsArgs) ToWasmPluginSpecTargetRefsOutputWithContext(ctx context.Context) WasmPluginSpecTargetRefsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecTargetRefsOutput)
}

// WasmPluginSpecTargetRefsArrayInput is an input type that accepts WasmPluginSpecTargetRefsArray and WasmPluginSpecTargetRefsArrayOutput values.
// You can construct a concrete instance of `WasmPluginSpecTargetRefsArrayInput` via:
//
//	WasmPluginSpecTargetRefsArray{ WasmPluginSpecTargetRefsArgs{...} }
type WasmPluginSpecTargetRefsArrayInput interface {
	pulumi.Input

	ToWasmPluginSpecTargetRefsArrayOutput() WasmPluginSpecTargetRefsArrayOutput
	ToWasmPluginSpecTargetRefsArrayOutputWithContext(context.Context) WasmPluginSpecTargetRefsArrayOutput
}

type WasmPluginSpecTargetRefsArray []WasmPluginSpecTargetRefsInput

func (WasmPluginSpecTargetRefsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WasmPluginSpecTargetRefs)(nil)).Elem()
}

func (i WasmPluginSpecTargetRefsArray) ToWasmPluginSpecTargetRefsArrayOutput() WasmPluginSpecTargetRefsArrayOutput {
	return i.ToWasmPluginSpecTargetRefsArrayOutputWithContext(context.Background())
}

func (i WasmPluginSpecTargetRefsArray) ToWasmPluginSpecTargetRefsArrayOutputWithContext(ctx context.Context) WasmPluginSpecTargetRefsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecTargetRefsArrayOutput)
}

type WasmPluginSpecTargetRefsOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecTargetRefsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecTargetRefs)(nil)).Elem()
}

func (o WasmPluginSpecTargetRefsOutput) ToWasmPluginSpecTargetRefsOutput() WasmPluginSpecTargetRefsOutput {
	return o
}

func (o WasmPluginSpecTargetRefsOutput) ToWasmPluginSpecTargetRefsOutputWithContext(ctx context.Context) WasmPluginSpecTargetRefsOutput {
	return o
}

// group is the group of the target resource.
func (o WasmPluginSpecTargetRefsOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecTargetRefs) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// kind is kind of the target resource.
func (o WasmPluginSpecTargetRefsOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecTargetRefs) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// name is the name of the target resource.
func (o WasmPluginSpecTargetRefsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecTargetRefs) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// namespace is the namespace of the referent.
func (o WasmPluginSpecTargetRefsOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecTargetRefs) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type WasmPluginSpecTargetRefsArrayOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecTargetRefsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WasmPluginSpecTargetRefs)(nil)).Elem()
}

func (o WasmPluginSpecTargetRefsArrayOutput) ToWasmPluginSpecTargetRefsArrayOutput() WasmPluginSpecTargetRefsArrayOutput {
	return o
}

func (o WasmPluginSpecTargetRefsArrayOutput) ToWasmPluginSpecTargetRefsArrayOutputWithContext(ctx context.Context) WasmPluginSpecTargetRefsArrayOutput {
	return o
}

func (o WasmPluginSpecTargetRefsArrayOutput) Index(i pulumi.IntInput) WasmPluginSpecTargetRefsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WasmPluginSpecTargetRefs {
		return vs[0].([]WasmPluginSpecTargetRefs)[vs[1].(int)]
	}).(WasmPluginSpecTargetRefsOutput)
}

// Configuration for a Wasm VM.
type WasmPluginSpecVmConfig struct {
	// Specifies environment variables to be injected to this VM.
	Env []WasmPluginSpecVmConfigEnv `pulumi:"env"`
}

// WasmPluginSpecVmConfigInput is an input type that accepts WasmPluginSpecVmConfigArgs and WasmPluginSpecVmConfigOutput values.
// You can construct a concrete instance of `WasmPluginSpecVmConfigInput` via:
//
//	WasmPluginSpecVmConfigArgs{...}
type WasmPluginSpecVmConfigInput interface {
	pulumi.Input

	ToWasmPluginSpecVmConfigOutput() WasmPluginSpecVmConfigOutput
	ToWasmPluginSpecVmConfigOutputWithContext(context.Context) WasmPluginSpecVmConfigOutput
}

// Configuration for a Wasm VM.
type WasmPluginSpecVmConfigArgs struct {
	// Specifies environment variables to be injected to this VM.
	Env WasmPluginSpecVmConfigEnvArrayInput `pulumi:"env"`
}

func (WasmPluginSpecVmConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecVmConfig)(nil)).Elem()
}

func (i WasmPluginSpecVmConfigArgs) ToWasmPluginSpecVmConfigOutput() WasmPluginSpecVmConfigOutput {
	return i.ToWasmPluginSpecVmConfigOutputWithContext(context.Background())
}

func (i WasmPluginSpecVmConfigArgs) ToWasmPluginSpecVmConfigOutputWithContext(ctx context.Context) WasmPluginSpecVmConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecVmConfigOutput)
}

func (i WasmPluginSpecVmConfigArgs) ToWasmPluginSpecVmConfigPtrOutput() WasmPluginSpecVmConfigPtrOutput {
	return i.ToWasmPluginSpecVmConfigPtrOutputWithContext(context.Background())
}

func (i WasmPluginSpecVmConfigArgs) ToWasmPluginSpecVmConfigPtrOutputWithContext(ctx context.Context) WasmPluginSpecVmConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecVmConfigOutput).ToWasmPluginSpecVmConfigPtrOutputWithContext(ctx)
}

// WasmPluginSpecVmConfigPtrInput is an input type that accepts WasmPluginSpecVmConfigArgs, WasmPluginSpecVmConfigPtr and WasmPluginSpecVmConfigPtrOutput values.
// You can construct a concrete instance of `WasmPluginSpecVmConfigPtrInput` via:
//
//	        WasmPluginSpecVmConfigArgs{...}
//
//	or:
//
//	        nil
type WasmPluginSpecVmConfigPtrInput interface {
	pulumi.Input

	ToWasmPluginSpecVmConfigPtrOutput() WasmPluginSpecVmConfigPtrOutput
	ToWasmPluginSpecVmConfigPtrOutputWithContext(context.Context) WasmPluginSpecVmConfigPtrOutput
}

type wasmPluginSpecVmConfigPtrType WasmPluginSpecVmConfigArgs

func WasmPluginSpecVmConfigPtr(v *WasmPluginSpecVmConfigArgs) WasmPluginSpecVmConfigPtrInput {
	return (*wasmPluginSpecVmConfigPtrType)(v)
}

func (*wasmPluginSpecVmConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPluginSpecVmConfig)(nil)).Elem()
}

func (i *wasmPluginSpecVmConfigPtrType) ToWasmPluginSpecVmConfigPtrOutput() WasmPluginSpecVmConfigPtrOutput {
	return i.ToWasmPluginSpecVmConfigPtrOutputWithContext(context.Background())
}

func (i *wasmPluginSpecVmConfigPtrType) ToWasmPluginSpecVmConfigPtrOutputWithContext(ctx context.Context) WasmPluginSpecVmConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecVmConfigPtrOutput)
}

// Configuration for a Wasm VM.
type WasmPluginSpecVmConfigOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecVmConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecVmConfig)(nil)).Elem()
}

func (o WasmPluginSpecVmConfigOutput) ToWasmPluginSpecVmConfigOutput() WasmPluginSpecVmConfigOutput {
	return o
}

func (o WasmPluginSpecVmConfigOutput) ToWasmPluginSpecVmConfigOutputWithContext(ctx context.Context) WasmPluginSpecVmConfigOutput {
	return o
}

func (o WasmPluginSpecVmConfigOutput) ToWasmPluginSpecVmConfigPtrOutput() WasmPluginSpecVmConfigPtrOutput {
	return o.ToWasmPluginSpecVmConfigPtrOutputWithContext(context.Background())
}

func (o WasmPluginSpecVmConfigOutput) ToWasmPluginSpecVmConfigPtrOutputWithContext(ctx context.Context) WasmPluginSpecVmConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WasmPluginSpecVmConfig) *WasmPluginSpecVmConfig {
		return &v
	}).(WasmPluginSpecVmConfigPtrOutput)
}

// Specifies environment variables to be injected to this VM.
func (o WasmPluginSpecVmConfigOutput) Env() WasmPluginSpecVmConfigEnvArrayOutput {
	return o.ApplyT(func(v WasmPluginSpecVmConfig) []WasmPluginSpecVmConfigEnv { return v.Env }).(WasmPluginSpecVmConfigEnvArrayOutput)
}

type WasmPluginSpecVmConfigPtrOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecVmConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WasmPluginSpecVmConfig)(nil)).Elem()
}

func (o WasmPluginSpecVmConfigPtrOutput) ToWasmPluginSpecVmConfigPtrOutput() WasmPluginSpecVmConfigPtrOutput {
	return o
}

func (o WasmPluginSpecVmConfigPtrOutput) ToWasmPluginSpecVmConfigPtrOutputWithContext(ctx context.Context) WasmPluginSpecVmConfigPtrOutput {
	return o
}

func (o WasmPluginSpecVmConfigPtrOutput) Elem() WasmPluginSpecVmConfigOutput {
	return o.ApplyT(func(v *WasmPluginSpecVmConfig) WasmPluginSpecVmConfig {
		if v != nil {
			return *v
		}
		var ret WasmPluginSpecVmConfig
		return ret
	}).(WasmPluginSpecVmConfigOutput)
}

// Specifies environment variables to be injected to this VM.
func (o WasmPluginSpecVmConfigPtrOutput) Env() WasmPluginSpecVmConfigEnvArrayOutput {
	return o.ApplyT(func(v *WasmPluginSpecVmConfig) []WasmPluginSpecVmConfigEnv {
		if v == nil {
			return nil
		}
		return v.Env
	}).(WasmPluginSpecVmConfigEnvArrayOutput)
}

type WasmPluginSpecVmConfigEnv struct {
	// Name of the environment variable.
	Name string `pulumi:"name"`
	// Value for the environment variable.
	Value *string `pulumi:"value"`
	// Source for the environment variable's value.
	//
	// Valid Options: INLINE, HOST
	ValueFrom *string `pulumi:"valueFrom"`
}

// WasmPluginSpecVmConfigEnvInput is an input type that accepts WasmPluginSpecVmConfigEnvArgs and WasmPluginSpecVmConfigEnvOutput values.
// You can construct a concrete instance of `WasmPluginSpecVmConfigEnvInput` via:
//
//	WasmPluginSpecVmConfigEnvArgs{...}
type WasmPluginSpecVmConfigEnvInput interface {
	pulumi.Input

	ToWasmPluginSpecVmConfigEnvOutput() WasmPluginSpecVmConfigEnvOutput
	ToWasmPluginSpecVmConfigEnvOutputWithContext(context.Context) WasmPluginSpecVmConfigEnvOutput
}

type WasmPluginSpecVmConfigEnvArgs struct {
	// Name of the environment variable.
	Name pulumi.StringInput `pulumi:"name"`
	// Value for the environment variable.
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Source for the environment variable's value.
	//
	// Valid Options: INLINE, HOST
	ValueFrom pulumi.StringPtrInput `pulumi:"valueFrom"`
}

func (WasmPluginSpecVmConfigEnvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecVmConfigEnv)(nil)).Elem()
}

func (i WasmPluginSpecVmConfigEnvArgs) ToWasmPluginSpecVmConfigEnvOutput() WasmPluginSpecVmConfigEnvOutput {
	return i.ToWasmPluginSpecVmConfigEnvOutputWithContext(context.Background())
}

func (i WasmPluginSpecVmConfigEnvArgs) ToWasmPluginSpecVmConfigEnvOutputWithContext(ctx context.Context) WasmPluginSpecVmConfigEnvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecVmConfigEnvOutput)
}

// WasmPluginSpecVmConfigEnvArrayInput is an input type that accepts WasmPluginSpecVmConfigEnvArray and WasmPluginSpecVmConfigEnvArrayOutput values.
// You can construct a concrete instance of `WasmPluginSpecVmConfigEnvArrayInput` via:
//
//	WasmPluginSpecVmConfigEnvArray{ WasmPluginSpecVmConfigEnvArgs{...} }
type WasmPluginSpecVmConfigEnvArrayInput interface {
	pulumi.Input

	ToWasmPluginSpecVmConfigEnvArrayOutput() WasmPluginSpecVmConfigEnvArrayOutput
	ToWasmPluginSpecVmConfigEnvArrayOutputWithContext(context.Context) WasmPluginSpecVmConfigEnvArrayOutput
}

type WasmPluginSpecVmConfigEnvArray []WasmPluginSpecVmConfigEnvInput

func (WasmPluginSpecVmConfigEnvArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WasmPluginSpecVmConfigEnv)(nil)).Elem()
}

func (i WasmPluginSpecVmConfigEnvArray) ToWasmPluginSpecVmConfigEnvArrayOutput() WasmPluginSpecVmConfigEnvArrayOutput {
	return i.ToWasmPluginSpecVmConfigEnvArrayOutputWithContext(context.Background())
}

func (i WasmPluginSpecVmConfigEnvArray) ToWasmPluginSpecVmConfigEnvArrayOutputWithContext(ctx context.Context) WasmPluginSpecVmConfigEnvArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WasmPluginSpecVmConfigEnvArrayOutput)
}

type WasmPluginSpecVmConfigEnvOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecVmConfigEnvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WasmPluginSpecVmConfigEnv)(nil)).Elem()
}

func (o WasmPluginSpecVmConfigEnvOutput) ToWasmPluginSpecVmConfigEnvOutput() WasmPluginSpecVmConfigEnvOutput {
	return o
}

func (o WasmPluginSpecVmConfigEnvOutput) ToWasmPluginSpecVmConfigEnvOutputWithContext(ctx context.Context) WasmPluginSpecVmConfigEnvOutput {
	return o
}

// Name of the environment variable.
func (o WasmPluginSpecVmConfigEnvOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WasmPluginSpecVmConfigEnv) string { return v.Name }).(pulumi.StringOutput)
}

// Value for the environment variable.
func (o WasmPluginSpecVmConfigEnvOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecVmConfigEnv) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Source for the environment variable's value.
//
// Valid Options: INLINE, HOST
func (o WasmPluginSpecVmConfigEnvOutput) ValueFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WasmPluginSpecVmConfigEnv) *string { return v.ValueFrom }).(pulumi.StringPtrOutput)
}

type WasmPluginSpecVmConfigEnvArrayOutput struct{ *pulumi.OutputState }

func (WasmPluginSpecVmConfigEnvArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WasmPluginSpecVmConfigEnv)(nil)).Elem()
}

func (o WasmPluginSpecVmConfigEnvArrayOutput) ToWasmPluginSpecVmConfigEnvArrayOutput() WasmPluginSpecVmConfigEnvArrayOutput {
	return o
}

func (o WasmPluginSpecVmConfigEnvArrayOutput) ToWasmPluginSpecVmConfigEnvArrayOutputWithContext(ctx context.Context) WasmPluginSpecVmConfigEnvArrayOutput {
	return o
}

func (o WasmPluginSpecVmConfigEnvArrayOutput) Index(i pulumi.IntInput) WasmPluginSpecVmConfigEnvOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WasmPluginSpecVmConfigEnv {
		return vs[0].([]WasmPluginSpecVmConfigEnv)[vs[1].(int)]
	}).(WasmPluginSpecVmConfigEnvOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecInput)(nil)).Elem(), WasmPluginSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecPtrInput)(nil)).Elem(), WasmPluginSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecMatchInput)(nil)).Elem(), WasmPluginSpecMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecMatchArrayInput)(nil)).Elem(), WasmPluginSpecMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecMatchPortsInput)(nil)).Elem(), WasmPluginSpecMatchPortsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecMatchPortsArrayInput)(nil)).Elem(), WasmPluginSpecMatchPortsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecSelectorInput)(nil)).Elem(), WasmPluginSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecSelectorPtrInput)(nil)).Elem(), WasmPluginSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecTargetRefInput)(nil)).Elem(), WasmPluginSpecTargetRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecTargetRefPtrInput)(nil)).Elem(), WasmPluginSpecTargetRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecTargetRefsInput)(nil)).Elem(), WasmPluginSpecTargetRefsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecTargetRefsArrayInput)(nil)).Elem(), WasmPluginSpecTargetRefsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecVmConfigInput)(nil)).Elem(), WasmPluginSpecVmConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecVmConfigPtrInput)(nil)).Elem(), WasmPluginSpecVmConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecVmConfigEnvInput)(nil)).Elem(), WasmPluginSpecVmConfigEnvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WasmPluginSpecVmConfigEnvArrayInput)(nil)).Elem(), WasmPluginSpecVmConfigEnvArray{})
	pulumi.RegisterOutputType(WasmPluginSpecOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecPtrOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecMatchOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecMatchArrayOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecMatchPortsOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecMatchPortsArrayOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecSelectorOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecSelectorPtrOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecTargetRefOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecTargetRefPtrOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecTargetRefsOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecTargetRefsArrayOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecVmConfigOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecVmConfigPtrOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecVmConfigEnvOutput{})
	pulumi.RegisterOutputType(WasmPluginSpecVmConfigEnvArrayOutput{})
}
