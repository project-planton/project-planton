// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

type DestinationRuleType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Configuration affecting load balancing, outlier detection, etc. See more details at: https://istio.io/docs/reference/config/networking/destination-rule.html
	Spec   *DestinationRuleSpec   `pulumi:"spec"`
	Status map[string]interface{} `pulumi:"status"`
}

// Configuration affecting load balancing, outlier detection, etc. See more details at: https://istio.io/docs/reference/config/networking/destination-rule.html
type DestinationRuleSpec struct {
	// A list of namespaces to which this destination rule is exported.
	ExportTo []string `pulumi:"exportTo"`
	// The name of a service from the service registry.
	Host string `pulumi:"host"`
	// One or more named sets that represent individual versions of a service.
	Subsets []DestinationRuleSpecSubsets `pulumi:"subsets"`
	// Traffic policies to apply (load balancing policy, connection pool sizes, outlier detection).
	TrafficPolicy *DestinationRuleSpecTrafficPolicy `pulumi:"trafficPolicy"`
	// Criteria used to select the specific set of pods/VMs on which this `DestinationRule` configuration should be applied.
	WorkloadSelector *DestinationRuleSpecWorkloadSelector `pulumi:"workloadSelector"`
}

// DestinationRuleSpecInput is an input type that accepts DestinationRuleSpecArgs and DestinationRuleSpecOutput values.
// You can construct a concrete instance of `DestinationRuleSpecInput` via:
//
//	DestinationRuleSpecArgs{...}
type DestinationRuleSpecInput interface {
	pulumi.Input

	ToDestinationRuleSpecOutput() DestinationRuleSpecOutput
	ToDestinationRuleSpecOutputWithContext(context.Context) DestinationRuleSpecOutput
}

// Configuration affecting load balancing, outlier detection, etc. See more details at: https://istio.io/docs/reference/config/networking/destination-rule.html
type DestinationRuleSpecArgs struct {
	// A list of namespaces to which this destination rule is exported.
	ExportTo pulumi.StringArrayInput `pulumi:"exportTo"`
	// The name of a service from the service registry.
	Host pulumi.StringInput `pulumi:"host"`
	// One or more named sets that represent individual versions of a service.
	Subsets DestinationRuleSpecSubsetsArrayInput `pulumi:"subsets"`
	// Traffic policies to apply (load balancing policy, connection pool sizes, outlier detection).
	TrafficPolicy DestinationRuleSpecTrafficPolicyPtrInput `pulumi:"trafficPolicy"`
	// Criteria used to select the specific set of pods/VMs on which this `DestinationRule` configuration should be applied.
	WorkloadSelector DestinationRuleSpecWorkloadSelectorPtrInput `pulumi:"workloadSelector"`
}

func (DestinationRuleSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpec)(nil)).Elem()
}

func (i DestinationRuleSpecArgs) ToDestinationRuleSpecOutput() DestinationRuleSpecOutput {
	return i.ToDestinationRuleSpecOutputWithContext(context.Background())
}

func (i DestinationRuleSpecArgs) ToDestinationRuleSpecOutputWithContext(ctx context.Context) DestinationRuleSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecOutput)
}

func (i DestinationRuleSpecArgs) ToDestinationRuleSpecPtrOutput() DestinationRuleSpecPtrOutput {
	return i.ToDestinationRuleSpecPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecArgs) ToDestinationRuleSpecPtrOutputWithContext(ctx context.Context) DestinationRuleSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecOutput).ToDestinationRuleSpecPtrOutputWithContext(ctx)
}

// DestinationRuleSpecPtrInput is an input type that accepts DestinationRuleSpecArgs, DestinationRuleSpecPtr and DestinationRuleSpecPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecPtrInput` via:
//
//	        DestinationRuleSpecArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecPtrOutput() DestinationRuleSpecPtrOutput
	ToDestinationRuleSpecPtrOutputWithContext(context.Context) DestinationRuleSpecPtrOutput
}

type destinationRuleSpecPtrType DestinationRuleSpecArgs

func DestinationRuleSpecPtr(v *DestinationRuleSpecArgs) DestinationRuleSpecPtrInput {
	return (*destinationRuleSpecPtrType)(v)
}

func (*destinationRuleSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpec)(nil)).Elem()
}

func (i *destinationRuleSpecPtrType) ToDestinationRuleSpecPtrOutput() DestinationRuleSpecPtrOutput {
	return i.ToDestinationRuleSpecPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecPtrType) ToDestinationRuleSpecPtrOutputWithContext(ctx context.Context) DestinationRuleSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecPtrOutput)
}

// Configuration affecting load balancing, outlier detection, etc. See more details at: https://istio.io/docs/reference/config/networking/destination-rule.html
type DestinationRuleSpecOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpec)(nil)).Elem()
}

func (o DestinationRuleSpecOutput) ToDestinationRuleSpecOutput() DestinationRuleSpecOutput {
	return o
}

func (o DestinationRuleSpecOutput) ToDestinationRuleSpecOutputWithContext(ctx context.Context) DestinationRuleSpecOutput {
	return o
}

func (o DestinationRuleSpecOutput) ToDestinationRuleSpecPtrOutput() DestinationRuleSpecPtrOutput {
	return o.ToDestinationRuleSpecPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecOutput) ToDestinationRuleSpecPtrOutputWithContext(ctx context.Context) DestinationRuleSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpec) *DestinationRuleSpec {
		return &v
	}).(DestinationRuleSpecPtrOutput)
}

// A list of namespaces to which this destination rule is exported.
func (o DestinationRuleSpecOutput) ExportTo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DestinationRuleSpec) []string { return v.ExportTo }).(pulumi.StringArrayOutput)
}

// The name of a service from the service registry.
func (o DestinationRuleSpecOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v DestinationRuleSpec) string { return v.Host }).(pulumi.StringOutput)
}

// One or more named sets that represent individual versions of a service.
func (o DestinationRuleSpecOutput) Subsets() DestinationRuleSpecSubsetsArrayOutput {
	return o.ApplyT(func(v DestinationRuleSpec) []DestinationRuleSpecSubsets { return v.Subsets }).(DestinationRuleSpecSubsetsArrayOutput)
}

// Traffic policies to apply (load balancing policy, connection pool sizes, outlier detection).
func (o DestinationRuleSpecOutput) TrafficPolicy() DestinationRuleSpecTrafficPolicyPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpec) *DestinationRuleSpecTrafficPolicy { return v.TrafficPolicy }).(DestinationRuleSpecTrafficPolicyPtrOutput)
}

// Criteria used to select the specific set of pods/VMs on which this `DestinationRule` configuration should be applied.
func (o DestinationRuleSpecOutput) WorkloadSelector() DestinationRuleSpecWorkloadSelectorPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpec) *DestinationRuleSpecWorkloadSelector { return v.WorkloadSelector }).(DestinationRuleSpecWorkloadSelectorPtrOutput)
}

type DestinationRuleSpecPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpec)(nil)).Elem()
}

func (o DestinationRuleSpecPtrOutput) ToDestinationRuleSpecPtrOutput() DestinationRuleSpecPtrOutput {
	return o
}

func (o DestinationRuleSpecPtrOutput) ToDestinationRuleSpecPtrOutputWithContext(ctx context.Context) DestinationRuleSpecPtrOutput {
	return o
}

func (o DestinationRuleSpecPtrOutput) Elem() DestinationRuleSpecOutput {
	return o.ApplyT(func(v *DestinationRuleSpec) DestinationRuleSpec {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpec
		return ret
	}).(DestinationRuleSpecOutput)
}

// A list of namespaces to which this destination rule is exported.
func (o DestinationRuleSpecPtrOutput) ExportTo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DestinationRuleSpec) []string {
		if v == nil {
			return nil
		}
		return v.ExportTo
	}).(pulumi.StringArrayOutput)
}

// The name of a service from the service registry.
func (o DestinationRuleSpecPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// One or more named sets that represent individual versions of a service.
func (o DestinationRuleSpecPtrOutput) Subsets() DestinationRuleSpecSubsetsArrayOutput {
	return o.ApplyT(func(v *DestinationRuleSpec) []DestinationRuleSpecSubsets {
		if v == nil {
			return nil
		}
		return v.Subsets
	}).(DestinationRuleSpecSubsetsArrayOutput)
}

// Traffic policies to apply (load balancing policy, connection pool sizes, outlier detection).
func (o DestinationRuleSpecPtrOutput) TrafficPolicy() DestinationRuleSpecTrafficPolicyPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpec) *DestinationRuleSpecTrafficPolicy {
		if v == nil {
			return nil
		}
		return v.TrafficPolicy
	}).(DestinationRuleSpecTrafficPolicyPtrOutput)
}

// Criteria used to select the specific set of pods/VMs on which this `DestinationRule` configuration should be applied.
func (o DestinationRuleSpecPtrOutput) WorkloadSelector() DestinationRuleSpecWorkloadSelectorPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpec) *DestinationRuleSpecWorkloadSelector {
		if v == nil {
			return nil
		}
		return v.WorkloadSelector
	}).(DestinationRuleSpecWorkloadSelectorPtrOutput)
}

type DestinationRuleSpecSubsets struct {
	// Labels apply a filter over the endpoints of a service in the service registry.
	Labels map[string]string `pulumi:"labels"`
	// Name of the subset.
	Name string `pulumi:"name"`
	// Traffic policies that apply to this subset.
	TrafficPolicy *DestinationRuleSpecSubsetsTrafficPolicy `pulumi:"trafficPolicy"`
}

// DestinationRuleSpecSubsetsInput is an input type that accepts DestinationRuleSpecSubsetsArgs and DestinationRuleSpecSubsetsOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsInput` via:
//
//	DestinationRuleSpecSubsetsArgs{...}
type DestinationRuleSpecSubsetsInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsOutput() DestinationRuleSpecSubsetsOutput
	ToDestinationRuleSpecSubsetsOutputWithContext(context.Context) DestinationRuleSpecSubsetsOutput
}

type DestinationRuleSpecSubsetsArgs struct {
	// Labels apply a filter over the endpoints of a service in the service registry.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Name of the subset.
	Name pulumi.StringInput `pulumi:"name"`
	// Traffic policies that apply to this subset.
	TrafficPolicy DestinationRuleSpecSubsetsTrafficPolicyPtrInput `pulumi:"trafficPolicy"`
}

func (DestinationRuleSpecSubsetsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsets)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsArgs) ToDestinationRuleSpecSubsetsOutput() DestinationRuleSpecSubsetsOutput {
	return i.ToDestinationRuleSpecSubsetsOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsArgs) ToDestinationRuleSpecSubsetsOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsOutput)
}

// DestinationRuleSpecSubsetsArrayInput is an input type that accepts DestinationRuleSpecSubsetsArray and DestinationRuleSpecSubsetsArrayOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsArrayInput` via:
//
//	DestinationRuleSpecSubsetsArray{ DestinationRuleSpecSubsetsArgs{...} }
type DestinationRuleSpecSubsetsArrayInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsArrayOutput() DestinationRuleSpecSubsetsArrayOutput
	ToDestinationRuleSpecSubsetsArrayOutputWithContext(context.Context) DestinationRuleSpecSubsetsArrayOutput
}

type DestinationRuleSpecSubsetsArray []DestinationRuleSpecSubsetsInput

func (DestinationRuleSpecSubsetsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DestinationRuleSpecSubsets)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsArray) ToDestinationRuleSpecSubsetsArrayOutput() DestinationRuleSpecSubsetsArrayOutput {
	return i.ToDestinationRuleSpecSubsetsArrayOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsArray) ToDestinationRuleSpecSubsetsArrayOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsArrayOutput)
}

type DestinationRuleSpecSubsetsOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsets)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsOutput) ToDestinationRuleSpecSubsetsOutput() DestinationRuleSpecSubsetsOutput {
	return o
}

func (o DestinationRuleSpecSubsetsOutput) ToDestinationRuleSpecSubsetsOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsOutput {
	return o
}

// Labels apply a filter over the endpoints of a service in the service registry.
func (o DestinationRuleSpecSubsetsOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsets) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the subset.
func (o DestinationRuleSpecSubsetsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsets) string { return v.Name }).(pulumi.StringOutput)
}

// Traffic policies that apply to this subset.
func (o DestinationRuleSpecSubsetsOutput) TrafficPolicy() DestinationRuleSpecSubsetsTrafficPolicyPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsets) *DestinationRuleSpecSubsetsTrafficPolicy { return v.TrafficPolicy }).(DestinationRuleSpecSubsetsTrafficPolicyPtrOutput)
}

type DestinationRuleSpecSubsetsArrayOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DestinationRuleSpecSubsets)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsArrayOutput) ToDestinationRuleSpecSubsetsArrayOutput() DestinationRuleSpecSubsetsArrayOutput {
	return o
}

func (o DestinationRuleSpecSubsetsArrayOutput) ToDestinationRuleSpecSubsetsArrayOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsArrayOutput {
	return o
}

func (o DestinationRuleSpecSubsetsArrayOutput) Index(i pulumi.IntInput) DestinationRuleSpecSubsetsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DestinationRuleSpecSubsets {
		return vs[0].([]DestinationRuleSpecSubsets)[vs[1].(int)]
	}).(DestinationRuleSpecSubsetsOutput)
}

// Labels apply a filter over the endpoints of a service in the service registry.
type DestinationRuleSpecSubsetsLabels struct {
}

// Traffic policies that apply to this subset.
type DestinationRuleSpecSubsetsTrafficPolicy struct {
	ConnectionPool *DestinationRuleSpecSubsetsTrafficPolicyConnectionPool `pulumi:"connectionPool"`
	// Settings controlling the load balancer algorithms.
	LoadBalancer     interface{}                                              `pulumi:"loadBalancer"`
	OutlierDetection *DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection `pulumi:"outlierDetection"`
	// Traffic policies specific to individual ports.
	PortLevelSettings []DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettings `pulumi:"portLevelSettings"`
	// The upstream PROXY protocol settings.
	ProxyProtocol *DestinationRuleSpecSubsetsTrafficPolicyProxyProtocol `pulumi:"proxyProtocol"`
	// TLS related settings for connections to the upstream service.
	Tls *DestinationRuleSpecSubsetsTrafficPolicyTls `pulumi:"tls"`
	// Configuration of tunneling TCP over other transport or application layers for the host configured in the DestinationRule.
	Tunnel *DestinationRuleSpecSubsetsTrafficPolicyTunnel `pulumi:"tunnel"`
}

// DestinationRuleSpecSubsetsTrafficPolicyInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyArgs and DestinationRuleSpecSubsetsTrafficPolicyOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyInput` via:
//
//	DestinationRuleSpecSubsetsTrafficPolicyArgs{...}
type DestinationRuleSpecSubsetsTrafficPolicyInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyOutput() DestinationRuleSpecSubsetsTrafficPolicyOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyOutput
}

// Traffic policies that apply to this subset.
type DestinationRuleSpecSubsetsTrafficPolicyArgs struct {
	ConnectionPool DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrInput `pulumi:"connectionPool"`
	// Settings controlling the load balancer algorithms.
	LoadBalancer     pulumi.Input                                                    `pulumi:"loadBalancer"`
	OutlierDetection DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrInput `pulumi:"outlierDetection"`
	// Traffic policies specific to individual ports.
	PortLevelSettings DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArrayInput `pulumi:"portLevelSettings"`
	// The upstream PROXY protocol settings.
	ProxyProtocol DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrInput `pulumi:"proxyProtocol"`
	// TLS related settings for connections to the upstream service.
	Tls DestinationRuleSpecSubsetsTrafficPolicyTlsPtrInput `pulumi:"tls"`
	// Configuration of tunneling TCP over other transport or application layers for the host configured in the DestinationRule.
	Tunnel DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrInput `pulumi:"tunnel"`
}

func (DestinationRuleSpecSubsetsTrafficPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicy)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficPolicyArgs) ToDestinationRuleSpecSubsetsTrafficPolicyOutput() DestinationRuleSpecSubsetsTrafficPolicyOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyArgs) ToDestinationRuleSpecSubsetsTrafficPolicyOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyOutput)
}

func (i DestinationRuleSpecSubsetsTrafficPolicyArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyOutput).ToDestinationRuleSpecSubsetsTrafficPolicyPtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficPolicyPtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyArgs, DestinationRuleSpecSubsetsTrafficPolicyPtr and DestinationRuleSpecSubsetsTrafficPolicyPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyPtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficPolicyArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficPolicyPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPtrOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyPtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyPtrOutput
}

type destinationRuleSpecSubsetsTrafficPolicyPtrType DestinationRuleSpecSubsetsTrafficPolicyArgs

func DestinationRuleSpecSubsetsTrafficPolicyPtr(v *DestinationRuleSpecSubsetsTrafficPolicyArgs) DestinationRuleSpecSubsetsTrafficPolicyPtrInput {
	return (*destinationRuleSpecSubsetsTrafficPolicyPtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicy)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficPolicyPtrType) ToDestinationRuleSpecSubsetsTrafficPolicyPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficPolicyPtrType) ToDestinationRuleSpecSubsetsTrafficPolicyPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyPtrOutput)
}

// Traffic policies that apply to this subset.
type DestinationRuleSpecSubsetsTrafficPolicyOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicy)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyOutput) ToDestinationRuleSpecSubsetsTrafficPolicyOutput() DestinationRuleSpecSubsetsTrafficPolicyOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyOutput) ToDestinationRuleSpecSubsetsTrafficPolicyOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficPolicyPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficPolicyOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficPolicy) *DestinationRuleSpecSubsetsTrafficPolicy {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficPolicyPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficPolicyOutput) ConnectionPool() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicy) *DestinationRuleSpecSubsetsTrafficPolicyConnectionPool {
		return v.ConnectionPool
	}).(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutput)
}

// Settings controlling the load balancer algorithms.
func (o DestinationRuleSpecSubsetsTrafficPolicyOutput) LoadBalancer() pulumi.AnyOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicy) interface{} { return v.LoadBalancer }).(pulumi.AnyOutput)
}

func (o DestinationRuleSpecSubsetsTrafficPolicyOutput) OutlierDetection() DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicy) *DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection {
		return v.OutlierDetection
	}).(DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput)
}

// Traffic policies specific to individual ports.
func (o DestinationRuleSpecSubsetsTrafficPolicyOutput) PortLevelSettings() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArrayOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicy) []DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettings {
		return v.PortLevelSettings
	}).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArrayOutput)
}

// The upstream PROXY protocol settings.
func (o DestinationRuleSpecSubsetsTrafficPolicyOutput) ProxyProtocol() DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicy) *DestinationRuleSpecSubsetsTrafficPolicyProxyProtocol {
		return v.ProxyProtocol
	}).(DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutput)
}

// TLS related settings for connections to the upstream service.
func (o DestinationRuleSpecSubsetsTrafficPolicyOutput) Tls() DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicy) *DestinationRuleSpecSubsetsTrafficPolicyTls {
		return v.Tls
	}).(DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput)
}

// Configuration of tunneling TCP over other transport or application layers for the host configured in the DestinationRule.
func (o DestinationRuleSpecSubsetsTrafficPolicyOutput) Tunnel() DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicy) *DestinationRuleSpecSubsetsTrafficPolicyTunnel {
		return v.Tunnel
	}).(DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficPolicyPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicy)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPtrOutput) Elem() DestinationRuleSpecSubsetsTrafficPolicyOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicy) DestinationRuleSpecSubsetsTrafficPolicy {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficPolicy
		return ret
	}).(DestinationRuleSpecSubsetsTrafficPolicyOutput)
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPtrOutput) ConnectionPool() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicy) *DestinationRuleSpecSubsetsTrafficPolicyConnectionPool {
		if v == nil {
			return nil
		}
		return v.ConnectionPool
	}).(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutput)
}

// Settings controlling the load balancer algorithms.
func (o DestinationRuleSpecSubsetsTrafficPolicyPtrOutput) LoadBalancer() pulumi.AnyOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicy) interface{} {
		if v == nil {
			return nil
		}
		return v.LoadBalancer
	}).(pulumi.AnyOutput)
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPtrOutput) OutlierDetection() DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicy) *DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection {
		if v == nil {
			return nil
		}
		return v.OutlierDetection
	}).(DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput)
}

// Traffic policies specific to individual ports.
func (o DestinationRuleSpecSubsetsTrafficPolicyPtrOutput) PortLevelSettings() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArrayOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicy) []DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettings {
		if v == nil {
			return nil
		}
		return v.PortLevelSettings
	}).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArrayOutput)
}

// The upstream PROXY protocol settings.
func (o DestinationRuleSpecSubsetsTrafficPolicyPtrOutput) ProxyProtocol() DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicy) *DestinationRuleSpecSubsetsTrafficPolicyProxyProtocol {
		if v == nil {
			return nil
		}
		return v.ProxyProtocol
	}).(DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutput)
}

// TLS related settings for connections to the upstream service.
func (o DestinationRuleSpecSubsetsTrafficPolicyPtrOutput) Tls() DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicy) *DestinationRuleSpecSubsetsTrafficPolicyTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput)
}

// Configuration of tunneling TCP over other transport or application layers for the host configured in the DestinationRule.
func (o DestinationRuleSpecSubsetsTrafficPolicyPtrOutput) Tunnel() DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicy) *DestinationRuleSpecSubsetsTrafficPolicyTunnel {
		if v == nil {
			return nil
		}
		return v.Tunnel
	}).(DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficPolicyConnectionPool struct {
	// HTTP connection pool settings.
	Http *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp `pulumi:"http"`
	// Settings common to both HTTP and TCP upstream connections.
	Tcp *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp `pulumi:"tcp"`
}

// DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolArgs and DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolInput` via:
//
//	DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolArgs{...}
type DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolOutput
}

type DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolArgs struct {
	// HTTP connection pool settings.
	Http DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrInput `pulumi:"http"`
	// Settings common to both HTTP and TCP upstream connections.
	Tcp DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrInput `pulumi:"tcp"`
}

func (DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyConnectionPool)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolArgs) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolArgs) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolOutput)
}

func (i DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolArgs) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolArgs) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolOutput).ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolArgs, DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtr and DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutput
}

type destinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrType DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolArgs

func DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtr(v *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolArgs) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrInput {
	return (*destinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicyConnectionPool)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrType) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrType) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyConnectionPool)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolOutput) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolOutput) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolOutput) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolOutput) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficPolicyConnectionPool) *DestinationRuleSpecSubsetsTrafficPolicyConnectionPool {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutput)
}

// HTTP connection pool settings.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolOutput) Http() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyConnectionPool) *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp {
		return v.Http
	}).(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolOutput) Tcp() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyConnectionPool) *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp {
		return v.Tcp
	}).(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicyConnectionPool)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutput) Elem() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyConnectionPool) DestinationRuleSpecSubsetsTrafficPolicyConnectionPool {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficPolicyConnectionPool
		return ret
	}).(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolOutput)
}

// HTTP connection pool settings.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutput) Http() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyConnectionPool) *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp {
		if v == nil {
			return nil
		}
		return v.Http
	}).(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutput) Tcp() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyConnectionPool) *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp {
		if v == nil {
			return nil
		}
		return v.Tcp
	}).(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput)
}

// HTTP connection pool settings.
type DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp struct {
	// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
	//
	// Valid Options: DEFAULT, DO_NOT_UPGRADE, UPGRADE
	H2UpgradePolicy *string `pulumi:"h2UpgradePolicy"`
	// Maximum number of requests that will be queued while waiting for a ready connection pool connection.
	Http1MaxPendingRequests *int `pulumi:"http1MaxPendingRequests"`
	// Maximum number of active requests to a destination.
	Http2MaxRequests *int `pulumi:"http2MaxRequests"`
	// The idle timeout for upstream connection pool connections.
	IdleTimeout *string `pulumi:"idleTimeout"`
	// The maximum number of concurrent streams allowed for a peer on one HTTP/2 connection.
	MaxConcurrentStreams *int `pulumi:"maxConcurrentStreams"`
	// Maximum number of requests per connection to a backend.
	MaxRequestsPerConnection *int `pulumi:"maxRequestsPerConnection"`
	// Maximum number of retries that can be outstanding to all hosts in a cluster at a given time.
	MaxRetries *int `pulumi:"maxRetries"`
	// If set to true, client protocol will be preserved while initiating connection to backend.
	UseClientProtocol *bool `pulumi:"useClientProtocol"`
}

// DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpArgs and DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpInput` via:
//
//	DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpArgs{...}
type DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutput
}

// HTTP connection pool settings.
type DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpArgs struct {
	// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
	//
	// Valid Options: DEFAULT, DO_NOT_UPGRADE, UPGRADE
	H2UpgradePolicy pulumi.StringPtrInput `pulumi:"h2UpgradePolicy"`
	// Maximum number of requests that will be queued while waiting for a ready connection pool connection.
	Http1MaxPendingRequests pulumi.IntPtrInput `pulumi:"http1MaxPendingRequests"`
	// Maximum number of active requests to a destination.
	Http2MaxRequests pulumi.IntPtrInput `pulumi:"http2MaxRequests"`
	// The idle timeout for upstream connection pool connections.
	IdleTimeout pulumi.StringPtrInput `pulumi:"idleTimeout"`
	// The maximum number of concurrent streams allowed for a peer on one HTTP/2 connection.
	MaxConcurrentStreams pulumi.IntPtrInput `pulumi:"maxConcurrentStreams"`
	// Maximum number of requests per connection to a backend.
	MaxRequestsPerConnection pulumi.IntPtrInput `pulumi:"maxRequestsPerConnection"`
	// Maximum number of retries that can be outstanding to all hosts in a cluster at a given time.
	MaxRetries pulumi.IntPtrInput `pulumi:"maxRetries"`
	// If set to true, client protocol will be preserved while initiating connection to backend.
	UseClientProtocol pulumi.BoolPtrInput `pulumi:"useClientProtocol"`
}

func (DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpArgs) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpArgs) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutput)
}

func (i DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpArgs) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpArgs) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutput).ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpArgs, DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtr and DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput
}

type destinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrType DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpArgs

func DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtr(v *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpArgs) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrInput {
	return (*destinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrType) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrType) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput)
}

// HTTP connection pool settings.
type DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutput) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutput) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutput) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutput) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp) *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput)
}

// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
//
// Valid Options: DEFAULT, DO_NOT_UPGRADE, UPGRADE
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutput) H2UpgradePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp) *string { return v.H2UpgradePolicy }).(pulumi.StringPtrOutput)
}

// Maximum number of requests that will be queued while waiting for a ready connection pool connection.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutput) Http1MaxPendingRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp) *int {
		return v.Http1MaxPendingRequests
	}).(pulumi.IntPtrOutput)
}

// Maximum number of active requests to a destination.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutput) Http2MaxRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp) *int { return v.Http2MaxRequests }).(pulumi.IntPtrOutput)
}

// The idle timeout for upstream connection pool connections.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp) *string { return v.IdleTimeout }).(pulumi.StringPtrOutput)
}

// The maximum number of concurrent streams allowed for a peer on one HTTP/2 connection.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutput) MaxConcurrentStreams() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp) *int { return v.MaxConcurrentStreams }).(pulumi.IntPtrOutput)
}

// Maximum number of requests per connection to a backend.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutput) MaxRequestsPerConnection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp) *int {
		return v.MaxRequestsPerConnection
	}).(pulumi.IntPtrOutput)
}

// Maximum number of retries that can be outstanding to all hosts in a cluster at a given time.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp) *int { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

// If set to true, client protocol will be preserved while initiating connection to backend.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutput) UseClientProtocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp) *bool { return v.UseClientProtocol }).(pulumi.BoolPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput) Elem() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp
		return ret
	}).(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutput)
}

// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
//
// Valid Options: DEFAULT, DO_NOT_UPGRADE, UPGRADE
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput) H2UpgradePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp) *string {
		if v == nil {
			return nil
		}
		return v.H2UpgradePolicy
	}).(pulumi.StringPtrOutput)
}

// Maximum number of requests that will be queued while waiting for a ready connection pool connection.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput) Http1MaxPendingRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.Http1MaxPendingRequests
	}).(pulumi.IntPtrOutput)
}

// Maximum number of active requests to a destination.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput) Http2MaxRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.Http2MaxRequests
	}).(pulumi.IntPtrOutput)
}

// The idle timeout for upstream connection pool connections.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp) *string {
		if v == nil {
			return nil
		}
		return v.IdleTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum number of concurrent streams allowed for a peer on one HTTP/2 connection.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput) MaxConcurrentStreams() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentStreams
	}).(pulumi.IntPtrOutput)
}

// Maximum number of requests per connection to a backend.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput) MaxRequestsPerConnection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.MaxRequestsPerConnection
	}).(pulumi.IntPtrOutput)
}

// Maximum number of retries that can be outstanding to all hosts in a cluster at a given time.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

// If set to true, client protocol will be preserved while initiating connection to backend.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput) UseClientProtocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttp) *bool {
		if v == nil {
			return nil
		}
		return v.UseClientProtocol
	}).(pulumi.BoolPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
type DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp struct {
	// TCP connection timeout.
	ConnectTimeout *string `pulumi:"connectTimeout"`
	// The idle timeout for TCP connections.
	IdleTimeout *string `pulumi:"idleTimeout"`
	// The maximum duration of a connection.
	MaxConnectionDuration *string `pulumi:"maxConnectionDuration"`
	// Maximum number of HTTP1 /TCP connections to a destination host.
	MaxConnections *int `pulumi:"maxConnections"`
	// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
	TcpKeepalive *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive `pulumi:"tcpKeepalive"`
}

// DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpArgs and DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpInput` via:
//
//	DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpArgs{...}
type DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpOutput
}

// Settings common to both HTTP and TCP upstream connections.
type DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpArgs struct {
	// TCP connection timeout.
	ConnectTimeout pulumi.StringPtrInput `pulumi:"connectTimeout"`
	// The idle timeout for TCP connections.
	IdleTimeout pulumi.StringPtrInput `pulumi:"idleTimeout"`
	// The maximum duration of a connection.
	MaxConnectionDuration pulumi.StringPtrInput `pulumi:"maxConnectionDuration"`
	// Maximum number of HTTP1 /TCP connections to a destination host.
	MaxConnections pulumi.IntPtrInput `pulumi:"maxConnections"`
	// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
	TcpKeepalive DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrInput `pulumi:"tcpKeepalive"`
}

func (DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpArgs) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpArgs) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpOutput)
}

func (i DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpArgs) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpArgs) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpOutput).ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpArgs, DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtr and DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput
}

type destinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrType DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpArgs

func DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtr(v *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpArgs) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrInput {
	return (*destinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrType) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrType) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
type DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpOutput) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpOutput) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpOutput) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpOutput) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp) *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput)
}

// TCP connection timeout.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpOutput) ConnectTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp) *string { return v.ConnectTimeout }).(pulumi.StringPtrOutput)
}

// The idle timeout for TCP connections.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp) *string { return v.IdleTimeout }).(pulumi.StringPtrOutput)
}

// The maximum duration of a connection.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpOutput) MaxConnectionDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp) *string {
		return v.MaxConnectionDuration
	}).(pulumi.StringPtrOutput)
}

// Maximum number of HTTP1 /TCP connections to a destination host.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp) *int { return v.MaxConnections }).(pulumi.IntPtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpOutput) TcpKeepalive() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp) *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive {
		return v.TcpKeepalive
	}).(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput)
}

type DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput) Elem() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp
		return ret
	}).(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpOutput)
}

// TCP connection timeout.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput) ConnectTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp) *string {
		if v == nil {
			return nil
		}
		return v.ConnectTimeout
	}).(pulumi.StringPtrOutput)
}

// The idle timeout for TCP connections.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp) *string {
		if v == nil {
			return nil
		}
		return v.IdleTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum duration of a connection.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput) MaxConnectionDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp) *string {
		if v == nil {
			return nil
		}
		return v.MaxConnectionDuration
	}).(pulumi.StringPtrOutput)
}

// Maximum number of HTTP1 /TCP connections to a destination host.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnections
	}).(pulumi.IntPtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput) TcpKeepalive() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcp) *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive {
		if v == nil {
			return nil
		}
		return v.TcpKeepalive
	}).(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
type DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive struct {
	// The time duration between keep-alive probes.
	Interval *string `pulumi:"interval"`
	// Maximum number of keepalive probes to send without response before deciding the connection is dead.
	Probes *int `pulumi:"probes"`
	// The time duration a connection needs to be idle before keep-alive probes start being sent.
	Time *string `pulumi:"time"`
}

// DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveArgs and DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveInput` via:
//
//	DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveArgs{...}
type DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
type DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveArgs struct {
	// The time duration between keep-alive probes.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// Maximum number of keepalive probes to send without response before deciding the connection is dead.
	Probes pulumi.IntPtrInput `pulumi:"probes"`
	// The time duration a connection needs to be idle before keep-alive probes start being sent.
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveArgs) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveArgs) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput)
}

func (i DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveArgs) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveArgs) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput).ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveArgs, DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtr and DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput
}

type destinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrType DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveArgs

func DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtr(v *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveArgs) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrInput {
	return (*destinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrType) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrType) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
type DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive) *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput)
}

// The time duration between keep-alive probes.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive) *string {
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// Maximum number of keepalive probes to send without response before deciding the connection is dead.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput) Probes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive) *int { return v.Probes }).(pulumi.IntPtrOutput)
}

// The time duration a connection needs to be idle before keep-alive probes start being sent.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput) Elem() DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive) DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive
		return ret
	}).(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput)
}

// The time duration between keep-alive probes.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// Maximum number of keepalive probes to send without response before deciding the connection is dead.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput) Probes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive) *int {
		if v == nil {
			return nil
		}
		return v.Probes
	}).(pulumi.IntPtrOutput)
}

// The time duration a connection needs to be idle before keep-alive probes start being sent.
func (o DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalive) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection struct {
	// Minimum ejection duration.
	BaseEjectionTime *string `pulumi:"baseEjectionTime"`
	// Number of 5xx errors before a host is ejected from the connection pool.
	Consecutive5xxErrors *int `pulumi:"consecutive5xxErrors"`
	ConsecutiveErrors    *int `pulumi:"consecutiveErrors"`
	// Number of gateway errors before a host is ejected from the connection pool.
	ConsecutiveGatewayErrors *int `pulumi:"consecutiveGatewayErrors"`
	// The number of consecutive locally originated failures before ejection occurs.
	ConsecutiveLocalOriginFailures *int `pulumi:"consecutiveLocalOriginFailures"`
	// Time interval between ejection sweep analysis.
	Interval *string `pulumi:"interval"`
	// Maximum % of hosts in the load balancing pool for the upstream service that can be ejected.
	MaxEjectionPercent *int `pulumi:"maxEjectionPercent"`
	// Outlier detection will be enabled as long as the associated load balancing pool has at least min_health_percent hosts in healthy mode.
	MinHealthPercent *int `pulumi:"minHealthPercent"`
	// Determines whether to distinguish local origin failures from external errors.
	SplitExternalLocalOriginErrors *bool `pulumi:"splitExternalLocalOriginErrors"`
}

// DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionArgs and DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionInput` via:
//
//	DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionArgs{...}
type DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutput() DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutput
}

type DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionArgs struct {
	// Minimum ejection duration.
	BaseEjectionTime pulumi.StringPtrInput `pulumi:"baseEjectionTime"`
	// Number of 5xx errors before a host is ejected from the connection pool.
	Consecutive5xxErrors pulumi.IntPtrInput `pulumi:"consecutive5xxErrors"`
	ConsecutiveErrors    pulumi.IntPtrInput `pulumi:"consecutiveErrors"`
	// Number of gateway errors before a host is ejected from the connection pool.
	ConsecutiveGatewayErrors pulumi.IntPtrInput `pulumi:"consecutiveGatewayErrors"`
	// The number of consecutive locally originated failures before ejection occurs.
	ConsecutiveLocalOriginFailures pulumi.IntPtrInput `pulumi:"consecutiveLocalOriginFailures"`
	// Time interval between ejection sweep analysis.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// Maximum % of hosts in the load balancing pool for the upstream service that can be ejected.
	MaxEjectionPercent pulumi.IntPtrInput `pulumi:"maxEjectionPercent"`
	// Outlier detection will be enabled as long as the associated load balancing pool has at least min_health_percent hosts in healthy mode.
	MinHealthPercent pulumi.IntPtrInput `pulumi:"minHealthPercent"`
	// Determines whether to distinguish local origin failures from external errors.
	SplitExternalLocalOriginErrors pulumi.BoolPtrInput `pulumi:"splitExternalLocalOriginErrors"`
}

func (DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionArgs) ToDestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutput() DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionArgs) ToDestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutput)
}

func (i DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionArgs) ToDestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionArgs) ToDestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutput).ToDestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionArgs, DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtr and DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput
}

type destinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrType DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionArgs

func DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtr(v *DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionArgs) DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrInput {
	return (*destinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrType) ToDestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrType) ToDestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutput) ToDestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutput() DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutput) ToDestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutput) ToDestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutput) ToDestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection) *DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput)
}

// Minimum ejection duration.
func (o DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutput) BaseEjectionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection) *string { return v.BaseEjectionTime }).(pulumi.StringPtrOutput)
}

// Number of 5xx errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutput) Consecutive5xxErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection) *int { return v.Consecutive5xxErrors }).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutput) ConsecutiveErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection) *int { return v.ConsecutiveErrors }).(pulumi.IntPtrOutput)
}

// Number of gateway errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutput) ConsecutiveGatewayErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection) *int {
		return v.ConsecutiveGatewayErrors
	}).(pulumi.IntPtrOutput)
}

// The number of consecutive locally originated failures before ejection occurs.
func (o DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutput) ConsecutiveLocalOriginFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection) *int {
		return v.ConsecutiveLocalOriginFailures
	}).(pulumi.IntPtrOutput)
}

// Time interval between ejection sweep analysis.
func (o DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// Maximum % of hosts in the load balancing pool for the upstream service that can be ejected.
func (o DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutput) MaxEjectionPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection) *int { return v.MaxEjectionPercent }).(pulumi.IntPtrOutput)
}

// Outlier detection will be enabled as long as the associated load balancing pool has at least min_health_percent hosts in healthy mode.
func (o DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutput) MinHealthPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection) *int { return v.MinHealthPercent }).(pulumi.IntPtrOutput)
}

// Determines whether to distinguish local origin failures from external errors.
func (o DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutput) SplitExternalLocalOriginErrors() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection) *bool {
		return v.SplitExternalLocalOriginErrors
	}).(pulumi.BoolPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput) Elem() DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection) DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection
		return ret
	}).(DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutput)
}

// Minimum ejection duration.
func (o DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput) BaseEjectionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection) *string {
		if v == nil {
			return nil
		}
		return v.BaseEjectionTime
	}).(pulumi.StringPtrOutput)
}

// Number of 5xx errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput) Consecutive5xxErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.Consecutive5xxErrors
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput) ConsecutiveErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.ConsecutiveErrors
	}).(pulumi.IntPtrOutput)
}

// Number of gateway errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput) ConsecutiveGatewayErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.ConsecutiveGatewayErrors
	}).(pulumi.IntPtrOutput)
}

// The number of consecutive locally originated failures before ejection occurs.
func (o DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput) ConsecutiveLocalOriginFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.ConsecutiveLocalOriginFailures
	}).(pulumi.IntPtrOutput)
}

// Time interval between ejection sweep analysis.
func (o DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// Maximum % of hosts in the load balancing pool for the upstream service that can be ejected.
func (o DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput) MaxEjectionPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.MaxEjectionPercent
	}).(pulumi.IntPtrOutput)
}

// Outlier detection will be enabled as long as the associated load balancing pool has at least min_health_percent hosts in healthy mode.
func (o DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput) MinHealthPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.MinHealthPercent
	}).(pulumi.IntPtrOutput)
}

// Determines whether to distinguish local origin failures from external errors.
func (o DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput) SplitExternalLocalOriginErrors() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyOutlierDetection) *bool {
		if v == nil {
			return nil
		}
		return v.SplitExternalLocalOriginErrors
	}).(pulumi.BoolPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettings struct {
	ConnectionPool *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool `pulumi:"connectionPool"`
	// Settings controlling the load balancer algorithms.
	LoadBalancer     interface{}                                                               `pulumi:"loadBalancer"`
	OutlierDetection *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection `pulumi:"outlierDetection"`
	// Specifies the number of a port on the destination service on which this policy is being applied.
	Port *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPort `pulumi:"port"`
	// TLS related settings for connections to the upstream service.
	Tls *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls `pulumi:"tls"`
}

// DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArgs and DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsInput` via:
//
//	DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArgs{...}
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutput
}

type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArgs struct {
	ConnectionPool DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrInput `pulumi:"connectionPool"`
	// Settings controlling the load balancer algorithms.
	LoadBalancer     pulumi.Input                                                                     `pulumi:"loadBalancer"`
	OutlierDetection DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrInput `pulumi:"outlierDetection"`
	// Specifies the number of a port on the destination service on which this policy is being applied.
	Port DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrInput `pulumi:"port"`
	// TLS related settings for connections to the upstream service.
	Tls DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrInput `pulumi:"tls"`
}

func (DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettings)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutput)
}

// DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArrayInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArray and DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArrayOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArrayInput` via:
//
//	DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArray{ DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArgs{...} }
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArrayInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArrayOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArrayOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArrayOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArrayOutput
}

type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArray []DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsInput

func (DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettings)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArray) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArrayOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArrayOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArrayOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArray) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArrayOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArrayOutput)
}

type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettings)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutput) ConnectionPool() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettings) *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool {
		return v.ConnectionPool
	}).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput)
}

// Settings controlling the load balancer algorithms.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutput) LoadBalancer() pulumi.AnyOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettings) interface{} { return v.LoadBalancer }).(pulumi.AnyOutput)
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutput) OutlierDetection() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettings) *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection {
		return v.OutlierDetection
	}).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput)
}

// Specifies the number of a port on the destination service on which this policy is being applied.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutput) Port() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettings) *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPort {
		return v.Port
	}).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutput)
}

// TLS related settings for connections to the upstream service.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutput) Tls() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettings) *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls {
		return v.Tls
	}).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArrayOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettings)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArrayOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArrayOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArrayOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArrayOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArrayOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArrayOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArrayOutput) Index(i pulumi.IntInput) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettings {
		return vs[0].([]DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettings)[vs[1].(int)]
	}).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutput)
}

type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool struct {
	// HTTP connection pool settings.
	Http *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp `pulumi:"http"`
	// Settings common to both HTTP and TCP upstream connections.
	Tcp *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp `pulumi:"tcp"`
}

// DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolArgs and DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolInput` via:
//
//	DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolArgs{...}
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolOutput
}

type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolArgs struct {
	// HTTP connection pool settings.
	Http DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrInput `pulumi:"http"`
	// Settings common to both HTTP and TCP upstream connections.
	Tcp DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrInput `pulumi:"tcp"`
}

func (DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolOutput)
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolOutput).ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolArgs, DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtr and DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput
}

type destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrType DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolArgs

func DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtr(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolArgs) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrInput {
	return (*destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrType) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrType) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool) *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput)
}

// HTTP connection pool settings.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolOutput) Http() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool) *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp {
		return v.Http
	}).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolOutput) Tcp() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool) *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp {
		return v.Tcp
	}).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput) Elem() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool
		return ret
	}).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolOutput)
}

// HTTP connection pool settings.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput) Http() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool) *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp {
		if v == nil {
			return nil
		}
		return v.Http
	}).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput) Tcp() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPool) *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp {
		if v == nil {
			return nil
		}
		return v.Tcp
	}).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput)
}

// HTTP connection pool settings.
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp struct {
	// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
	//
	// Valid Options: DEFAULT, DO_NOT_UPGRADE, UPGRADE
	H2UpgradePolicy *string `pulumi:"h2UpgradePolicy"`
	// Maximum number of requests that will be queued while waiting for a ready connection pool connection.
	Http1MaxPendingRequests *int `pulumi:"http1MaxPendingRequests"`
	// Maximum number of active requests to a destination.
	Http2MaxRequests *int `pulumi:"http2MaxRequests"`
	// The idle timeout for upstream connection pool connections.
	IdleTimeout *string `pulumi:"idleTimeout"`
	// The maximum number of concurrent streams allowed for a peer on one HTTP/2 connection.
	MaxConcurrentStreams *int `pulumi:"maxConcurrentStreams"`
	// Maximum number of requests per connection to a backend.
	MaxRequestsPerConnection *int `pulumi:"maxRequestsPerConnection"`
	// Maximum number of retries that can be outstanding to all hosts in a cluster at a given time.
	MaxRetries *int `pulumi:"maxRetries"`
	// If set to true, client protocol will be preserved while initiating connection to backend.
	UseClientProtocol *bool `pulumi:"useClientProtocol"`
}

// DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpArgs and DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpInput` via:
//
//	DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpArgs{...}
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput
}

// HTTP connection pool settings.
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpArgs struct {
	// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
	//
	// Valid Options: DEFAULT, DO_NOT_UPGRADE, UPGRADE
	H2UpgradePolicy pulumi.StringPtrInput `pulumi:"h2UpgradePolicy"`
	// Maximum number of requests that will be queued while waiting for a ready connection pool connection.
	Http1MaxPendingRequests pulumi.IntPtrInput `pulumi:"http1MaxPendingRequests"`
	// Maximum number of active requests to a destination.
	Http2MaxRequests pulumi.IntPtrInput `pulumi:"http2MaxRequests"`
	// The idle timeout for upstream connection pool connections.
	IdleTimeout pulumi.StringPtrInput `pulumi:"idleTimeout"`
	// The maximum number of concurrent streams allowed for a peer on one HTTP/2 connection.
	MaxConcurrentStreams pulumi.IntPtrInput `pulumi:"maxConcurrentStreams"`
	// Maximum number of requests per connection to a backend.
	MaxRequestsPerConnection pulumi.IntPtrInput `pulumi:"maxRequestsPerConnection"`
	// Maximum number of retries that can be outstanding to all hosts in a cluster at a given time.
	MaxRetries pulumi.IntPtrInput `pulumi:"maxRetries"`
	// If set to true, client protocol will be preserved while initiating connection to backend.
	UseClientProtocol pulumi.BoolPtrInput `pulumi:"useClientProtocol"`
}

func (DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput)
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput).ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpArgs, DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtr and DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput
}

type destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrType DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpArgs

func DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtr(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpArgs) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrInput {
	return (*destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrType) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrType) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput)
}

// HTTP connection pool settings.
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp) *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput)
}

// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
//
// Valid Options: DEFAULT, DO_NOT_UPGRADE, UPGRADE
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput) H2UpgradePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp) *string {
		return v.H2UpgradePolicy
	}).(pulumi.StringPtrOutput)
}

// Maximum number of requests that will be queued while waiting for a ready connection pool connection.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput) Http1MaxPendingRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp) *int {
		return v.Http1MaxPendingRequests
	}).(pulumi.IntPtrOutput)
}

// Maximum number of active requests to a destination.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput) Http2MaxRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp) *int {
		return v.Http2MaxRequests
	}).(pulumi.IntPtrOutput)
}

// The idle timeout for upstream connection pool connections.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp) *string {
		return v.IdleTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum number of concurrent streams allowed for a peer on one HTTP/2 connection.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput) MaxConcurrentStreams() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp) *int {
		return v.MaxConcurrentStreams
	}).(pulumi.IntPtrOutput)
}

// Maximum number of requests per connection to a backend.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput) MaxRequestsPerConnection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp) *int {
		return v.MaxRequestsPerConnection
	}).(pulumi.IntPtrOutput)
}

// Maximum number of retries that can be outstanding to all hosts in a cluster at a given time.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp) *int {
		return v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

// If set to true, client protocol will be preserved while initiating connection to backend.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput) UseClientProtocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp) *bool {
		return v.UseClientProtocol
	}).(pulumi.BoolPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput) Elem() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp
		return ret
	}).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput)
}

// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
//
// Valid Options: DEFAULT, DO_NOT_UPGRADE, UPGRADE
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput) H2UpgradePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp) *string {
		if v == nil {
			return nil
		}
		return v.H2UpgradePolicy
	}).(pulumi.StringPtrOutput)
}

// Maximum number of requests that will be queued while waiting for a ready connection pool connection.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput) Http1MaxPendingRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.Http1MaxPendingRequests
	}).(pulumi.IntPtrOutput)
}

// Maximum number of active requests to a destination.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput) Http2MaxRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.Http2MaxRequests
	}).(pulumi.IntPtrOutput)
}

// The idle timeout for upstream connection pool connections.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp) *string {
		if v == nil {
			return nil
		}
		return v.IdleTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum number of concurrent streams allowed for a peer on one HTTP/2 connection.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput) MaxConcurrentStreams() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentStreams
	}).(pulumi.IntPtrOutput)
}

// Maximum number of requests per connection to a backend.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput) MaxRequestsPerConnection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.MaxRequestsPerConnection
	}).(pulumi.IntPtrOutput)
}

// Maximum number of retries that can be outstanding to all hosts in a cluster at a given time.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

// If set to true, client protocol will be preserved while initiating connection to backend.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput) UseClientProtocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttp) *bool {
		if v == nil {
			return nil
		}
		return v.UseClientProtocol
	}).(pulumi.BoolPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp struct {
	// TCP connection timeout.
	ConnectTimeout *string `pulumi:"connectTimeout"`
	// The idle timeout for TCP connections.
	IdleTimeout *string `pulumi:"idleTimeout"`
	// The maximum duration of a connection.
	MaxConnectionDuration *string `pulumi:"maxConnectionDuration"`
	// Maximum number of HTTP1 /TCP connections to a destination host.
	MaxConnections *int `pulumi:"maxConnections"`
	// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
	TcpKeepalive *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive `pulumi:"tcpKeepalive"`
}

// DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpArgs and DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpInput` via:
//
//	DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpArgs{...}
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput
}

// Settings common to both HTTP and TCP upstream connections.
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpArgs struct {
	// TCP connection timeout.
	ConnectTimeout pulumi.StringPtrInput `pulumi:"connectTimeout"`
	// The idle timeout for TCP connections.
	IdleTimeout pulumi.StringPtrInput `pulumi:"idleTimeout"`
	// The maximum duration of a connection.
	MaxConnectionDuration pulumi.StringPtrInput `pulumi:"maxConnectionDuration"`
	// Maximum number of HTTP1 /TCP connections to a destination host.
	MaxConnections pulumi.IntPtrInput `pulumi:"maxConnections"`
	// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
	TcpKeepalive DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrInput `pulumi:"tcpKeepalive"`
}

func (DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput)
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput).ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpArgs, DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtr and DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput
}

type destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrType DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpArgs

func DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtr(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpArgs) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrInput {
	return (*destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrType) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrType) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp) *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput)
}

// TCP connection timeout.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput) ConnectTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp) *string {
		return v.ConnectTimeout
	}).(pulumi.StringPtrOutput)
}

// The idle timeout for TCP connections.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp) *string {
		return v.IdleTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum duration of a connection.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput) MaxConnectionDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp) *string {
		return v.MaxConnectionDuration
	}).(pulumi.StringPtrOutput)
}

// Maximum number of HTTP1 /TCP connections to a destination host.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp) *int {
		return v.MaxConnections
	}).(pulumi.IntPtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput) TcpKeepalive() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp) *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive {
		return v.TcpKeepalive
	}).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput)
}

type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput) Elem() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp
		return ret
	}).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput)
}

// TCP connection timeout.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput) ConnectTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp) *string {
		if v == nil {
			return nil
		}
		return v.ConnectTimeout
	}).(pulumi.StringPtrOutput)
}

// The idle timeout for TCP connections.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp) *string {
		if v == nil {
			return nil
		}
		return v.IdleTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum duration of a connection.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput) MaxConnectionDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp) *string {
		if v == nil {
			return nil
		}
		return v.MaxConnectionDuration
	}).(pulumi.StringPtrOutput)
}

// Maximum number of HTTP1 /TCP connections to a destination host.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnections
	}).(pulumi.IntPtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput) TcpKeepalive() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcp) *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive {
		if v == nil {
			return nil
		}
		return v.TcpKeepalive
	}).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive struct {
	// The time duration between keep-alive probes.
	Interval *string `pulumi:"interval"`
	// Maximum number of keepalive probes to send without response before deciding the connection is dead.
	Probes *int `pulumi:"probes"`
	// The time duration a connection needs to be idle before keep-alive probes start being sent.
	Time *string `pulumi:"time"`
}

// DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveArgs and DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveInput` via:
//
//	DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveArgs{...}
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveArgs struct {
	// The time duration between keep-alive probes.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// Maximum number of keepalive probes to send without response before deciding the connection is dead.
	Probes pulumi.IntPtrInput `pulumi:"probes"`
	// The time duration a connection needs to be idle before keep-alive probes start being sent.
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput)
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput).ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveArgs, DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtr and DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput
}

type destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrType DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveArgs

func DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtr(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveArgs) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrInput {
	return (*destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrType) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrType) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive) *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput)
}

// The time duration between keep-alive probes.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive) *string {
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// Maximum number of keepalive probes to send without response before deciding the connection is dead.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput) Probes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive) *int {
		return v.Probes
	}).(pulumi.IntPtrOutput)
}

// The time duration a connection needs to be idle before keep-alive probes start being sent.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive) *string {
		return v.Time
	}).(pulumi.StringPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput) Elem() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive
		return ret
	}).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput)
}

// The time duration between keep-alive probes.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// Maximum number of keepalive probes to send without response before deciding the connection is dead.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput) Probes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive) *int {
		if v == nil {
			return nil
		}
		return v.Probes
	}).(pulumi.IntPtrOutput)
}

// The time duration a connection needs to be idle before keep-alive probes start being sent.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection struct {
	// Minimum ejection duration.
	BaseEjectionTime *string `pulumi:"baseEjectionTime"`
	// Number of 5xx errors before a host is ejected from the connection pool.
	Consecutive5xxErrors *int `pulumi:"consecutive5xxErrors"`
	ConsecutiveErrors    *int `pulumi:"consecutiveErrors"`
	// Number of gateway errors before a host is ejected from the connection pool.
	ConsecutiveGatewayErrors *int `pulumi:"consecutiveGatewayErrors"`
	// The number of consecutive locally originated failures before ejection occurs.
	ConsecutiveLocalOriginFailures *int `pulumi:"consecutiveLocalOriginFailures"`
	// Time interval between ejection sweep analysis.
	Interval *string `pulumi:"interval"`
	// Maximum % of hosts in the load balancing pool for the upstream service that can be ejected.
	MaxEjectionPercent *int `pulumi:"maxEjectionPercent"`
	// Outlier detection will be enabled as long as the associated load balancing pool has at least min_health_percent hosts in healthy mode.
	MinHealthPercent *int `pulumi:"minHealthPercent"`
	// Determines whether to distinguish local origin failures from external errors.
	SplitExternalLocalOriginErrors *bool `pulumi:"splitExternalLocalOriginErrors"`
}

// DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionArgs and DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionInput` via:
//
//	DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionArgs{...}
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutput
}

type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionArgs struct {
	// Minimum ejection duration.
	BaseEjectionTime pulumi.StringPtrInput `pulumi:"baseEjectionTime"`
	// Number of 5xx errors before a host is ejected from the connection pool.
	Consecutive5xxErrors pulumi.IntPtrInput `pulumi:"consecutive5xxErrors"`
	ConsecutiveErrors    pulumi.IntPtrInput `pulumi:"consecutiveErrors"`
	// Number of gateway errors before a host is ejected from the connection pool.
	ConsecutiveGatewayErrors pulumi.IntPtrInput `pulumi:"consecutiveGatewayErrors"`
	// The number of consecutive locally originated failures before ejection occurs.
	ConsecutiveLocalOriginFailures pulumi.IntPtrInput `pulumi:"consecutiveLocalOriginFailures"`
	// Time interval between ejection sweep analysis.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// Maximum % of hosts in the load balancing pool for the upstream service that can be ejected.
	MaxEjectionPercent pulumi.IntPtrInput `pulumi:"maxEjectionPercent"`
	// Outlier detection will be enabled as long as the associated load balancing pool has at least min_health_percent hosts in healthy mode.
	MinHealthPercent pulumi.IntPtrInput `pulumi:"minHealthPercent"`
	// Determines whether to distinguish local origin failures from external errors.
	SplitExternalLocalOriginErrors pulumi.BoolPtrInput `pulumi:"splitExternalLocalOriginErrors"`
}

func (DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutput)
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutput).ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionArgs, DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtr and DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput
}

type destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrType DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionArgs

func DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtr(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionArgs) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrInput {
	return (*destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrType) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrType) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection) *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput)
}

// Minimum ejection duration.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutput) BaseEjectionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection) *string {
		return v.BaseEjectionTime
	}).(pulumi.StringPtrOutput)
}

// Number of 5xx errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutput) Consecutive5xxErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection) *int {
		return v.Consecutive5xxErrors
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutput) ConsecutiveErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection) *int {
		return v.ConsecutiveErrors
	}).(pulumi.IntPtrOutput)
}

// Number of gateway errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutput) ConsecutiveGatewayErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection) *int {
		return v.ConsecutiveGatewayErrors
	}).(pulumi.IntPtrOutput)
}

// The number of consecutive locally originated failures before ejection occurs.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutput) ConsecutiveLocalOriginFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection) *int {
		return v.ConsecutiveLocalOriginFailures
	}).(pulumi.IntPtrOutput)
}

// Time interval between ejection sweep analysis.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection) *string {
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// Maximum % of hosts in the load balancing pool for the upstream service that can be ejected.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutput) MaxEjectionPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection) *int {
		return v.MaxEjectionPercent
	}).(pulumi.IntPtrOutput)
}

// Outlier detection will be enabled as long as the associated load balancing pool has at least min_health_percent hosts in healthy mode.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutput) MinHealthPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection) *int {
		return v.MinHealthPercent
	}).(pulumi.IntPtrOutput)
}

// Determines whether to distinguish local origin failures from external errors.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutput) SplitExternalLocalOriginErrors() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection) *bool {
		return v.SplitExternalLocalOriginErrors
	}).(pulumi.BoolPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput) Elem() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection
		return ret
	}).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutput)
}

// Minimum ejection duration.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput) BaseEjectionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection) *string {
		if v == nil {
			return nil
		}
		return v.BaseEjectionTime
	}).(pulumi.StringPtrOutput)
}

// Number of 5xx errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput) Consecutive5xxErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.Consecutive5xxErrors
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput) ConsecutiveErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.ConsecutiveErrors
	}).(pulumi.IntPtrOutput)
}

// Number of gateway errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput) ConsecutiveGatewayErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.ConsecutiveGatewayErrors
	}).(pulumi.IntPtrOutput)
}

// The number of consecutive locally originated failures before ejection occurs.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput) ConsecutiveLocalOriginFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.ConsecutiveLocalOriginFailures
	}).(pulumi.IntPtrOutput)
}

// Time interval between ejection sweep analysis.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// Maximum % of hosts in the load balancing pool for the upstream service that can be ejected.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput) MaxEjectionPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.MaxEjectionPercent
	}).(pulumi.IntPtrOutput)
}

// Outlier detection will be enabled as long as the associated load balancing pool has at least min_health_percent hosts in healthy mode.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput) MinHealthPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.MinHealthPercent
	}).(pulumi.IntPtrOutput)
}

// Determines whether to distinguish local origin failures from external errors.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput) SplitExternalLocalOriginErrors() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetection) *bool {
		if v == nil {
			return nil
		}
		return v.SplitExternalLocalOriginErrors
	}).(pulumi.BoolPtrOutput)
}

// Specifies the number of a port on the destination service on which this policy is being applied.
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPort struct {
	Number *int `pulumi:"number"`
}

// DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortArgs and DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortInput` via:
//
//	DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortArgs{...}
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortOutput
}

// Specifies the number of a port on the destination service on which this policy is being applied.
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortArgs struct {
	Number pulumi.IntPtrInput `pulumi:"number"`
}

func (DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPort)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortOutput)
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortOutput).ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortArgs, DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtr and DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutput
}

type destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrType DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortArgs

func DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtr(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortArgs) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrInput {
	return (*destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPort)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrType) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrType) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutput)
}

// Specifies the number of a port on the destination service on which this policy is being applied.
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPort)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPort) *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPort {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutput)
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPort) *int { return v.Number }).(pulumi.IntPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPort)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutput) Elem() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPort) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPort {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPort
		return ret
	}).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortOutput)
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPort) *int {
		if v == nil {
			return nil
		}
		return v.Number
	}).(pulumi.IntPtrOutput)
}

// TLS related settings for connections to the upstream service.
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls struct {
	// OPTIONAL: The path to the file containing certificate authority certificates to use in verifying a presented server certificate.
	CaCertificates *string `pulumi:"caCertificates"`
	// OPTIONAL: The path to the file containing the certificate revocation list (CRL) to use in verifying a presented server certificate.
	CaCrl *string `pulumi:"caCrl"`
	// REQUIRED if mode is `MUTUAL`.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// The name of the secret that holds the TLS certs for the client including the CA certificates.
	CredentialName *string `pulumi:"credentialName"`
	// `insecureSkipVerify` specifies whether the proxy should skip verifying the CA signature and SAN for the server certificate corresponding to the host.
	InsecureSkipVerify *bool `pulumi:"insecureSkipVerify"`
	// Indicates whether connections to this port should be secured using TLS.
	//
	// Valid Options: DISABLE, SIMPLE, MUTUAL, ISTIO_MUTUAL
	Mode *string `pulumi:"mode"`
	// REQUIRED if mode is `MUTUAL`.
	PrivateKey *string `pulumi:"privateKey"`
	// SNI string to present to the server during TLS handshake.
	Sni *string `pulumi:"sni"`
	// A list of alternate names to verify the subject identity in the certificate.
	SubjectAltNames []string `pulumi:"subjectAltNames"`
}

// DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsArgs and DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsInput` via:
//
//	DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsArgs{...}
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutput
}

// TLS related settings for connections to the upstream service.
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsArgs struct {
	// OPTIONAL: The path to the file containing certificate authority certificates to use in verifying a presented server certificate.
	CaCertificates pulumi.StringPtrInput `pulumi:"caCertificates"`
	// OPTIONAL: The path to the file containing the certificate revocation list (CRL) to use in verifying a presented server certificate.
	CaCrl pulumi.StringPtrInput `pulumi:"caCrl"`
	// REQUIRED if mode is `MUTUAL`.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// The name of the secret that holds the TLS certs for the client including the CA certificates.
	CredentialName pulumi.StringPtrInput `pulumi:"credentialName"`
	// `insecureSkipVerify` specifies whether the proxy should skip verifying the CA signature and SAN for the server certificate corresponding to the host.
	InsecureSkipVerify pulumi.BoolPtrInput `pulumi:"insecureSkipVerify"`
	// Indicates whether connections to this port should be secured using TLS.
	//
	// Valid Options: DISABLE, SIMPLE, MUTUAL, ISTIO_MUTUAL
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// REQUIRED if mode is `MUTUAL`.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// SNI string to present to the server during TLS handshake.
	Sni pulumi.StringPtrInput `pulumi:"sni"`
	// A list of alternate names to verify the subject identity in the certificate.
	SubjectAltNames pulumi.StringArrayInput `pulumi:"subjectAltNames"`
}

func (DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutput)
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsArgs) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutput).ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsArgs, DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtr and DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput
}

type destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrType DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsArgs

func DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtr(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsArgs) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrInput {
	return (*destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrType) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrType) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput)
}

// TLS related settings for connections to the upstream service.
type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls) *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput)
}

// OPTIONAL: The path to the file containing certificate authority certificates to use in verifying a presented server certificate.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutput) CaCertificates() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls) *string { return v.CaCertificates }).(pulumi.StringPtrOutput)
}

// OPTIONAL: The path to the file containing the certificate revocation list (CRL) to use in verifying a presented server certificate.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutput) CaCrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls) *string { return v.CaCrl }).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls) *string {
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

// The name of the secret that holds the TLS certs for the client including the CA certificates.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutput) CredentialName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls) *string { return v.CredentialName }).(pulumi.StringPtrOutput)
}

// `insecureSkipVerify` specifies whether the proxy should skip verifying the CA signature and SAN for the server certificate corresponding to the host.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls) *bool { return v.InsecureSkipVerify }).(pulumi.BoolPtrOutput)
}

// Indicates whether connections to this port should be secured using TLS.
//
// Valid Options: DISABLE, SIMPLE, MUTUAL, ISTIO_MUTUAL
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// SNI string to present to the server during TLS handshake.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutput) Sni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls) *string { return v.Sni }).(pulumi.StringPtrOutput)
}

// A list of alternate names to verify the subject identity in the certificate.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls) []string { return v.SubjectAltNames }).(pulumi.StringArrayOutput)
}

type DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput) Elem() DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls) DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls
		return ret
	}).(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutput)
}

// OPTIONAL: The path to the file containing certificate authority certificates to use in verifying a presented server certificate.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput) CaCertificates() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificates
	}).(pulumi.StringPtrOutput)
}

// OPTIONAL: The path to the file containing the certificate revocation list (CRL) to use in verifying a presented server certificate.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput) CaCrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls) *string {
		if v == nil {
			return nil
		}
		return v.CaCrl
	}).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

// The name of the secret that holds the TLS certs for the client including the CA certificates.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput) CredentialName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls) *string {
		if v == nil {
			return nil
		}
		return v.CredentialName
	}).(pulumi.StringPtrOutput)
}

// `insecureSkipVerify` specifies whether the proxy should skip verifying the CA signature and SAN for the server certificate corresponding to the host.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureSkipVerify
	}).(pulumi.BoolPtrOutput)
}

// Indicates whether connections to this port should be secured using TLS.
//
// Valid Options: DISABLE, SIMPLE, MUTUAL, ISTIO_MUTUAL
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// SNI string to present to the server during TLS handshake.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput) Sni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls) *string {
		if v == nil {
			return nil
		}
		return v.Sni
	}).(pulumi.StringPtrOutput)
}

// A list of alternate names to verify the subject identity in the certificate.
func (o DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTls) []string {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(pulumi.StringArrayOutput)
}

// The upstream PROXY protocol settings.
type DestinationRuleSpecSubsetsTrafficPolicyProxyProtocol struct {
	// The PROXY protocol version to use.
	//
	// Valid Options: V1, V2
	Version *string `pulumi:"version"`
}

// DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolArgs and DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolInput` via:
//
//	DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolArgs{...}
type DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyProxyProtocolOutput() DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyProxyProtocolOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolOutput
}

// The upstream PROXY protocol settings.
type DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolArgs struct {
	// The PROXY protocol version to use.
	//
	// Valid Options: V1, V2
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyProxyProtocol)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolArgs) ToDestinationRuleSpecSubsetsTrafficPolicyProxyProtocolOutput() DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyProxyProtocolOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolArgs) ToDestinationRuleSpecSubsetsTrafficPolicyProxyProtocolOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolOutput)
}

func (i DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolArgs) ToDestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolArgs) ToDestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolOutput).ToDestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolArgs, DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtr and DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutput
}

type destinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrType DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolArgs

func DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtr(v *DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolArgs) DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrInput {
	return (*destinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicyProxyProtocol)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrType) ToDestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrType) ToDestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutput)
}

// The upstream PROXY protocol settings.
type DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyProxyProtocol)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolOutput) ToDestinationRuleSpecSubsetsTrafficPolicyProxyProtocolOutput() DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolOutput) ToDestinationRuleSpecSubsetsTrafficPolicyProxyProtocolOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolOutput) ToDestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolOutput) ToDestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficPolicyProxyProtocol) *DestinationRuleSpecSubsetsTrafficPolicyProxyProtocol {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutput)
}

// The PROXY protocol version to use.
//
// Valid Options: V1, V2
func (o DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyProxyProtocol) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicyProxyProtocol)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutput) Elem() DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyProxyProtocol) DestinationRuleSpecSubsetsTrafficPolicyProxyProtocol {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficPolicyProxyProtocol
		return ret
	}).(DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolOutput)
}

// The PROXY protocol version to use.
//
// Valid Options: V1, V2
func (o DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyProxyProtocol) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// TLS related settings for connections to the upstream service.
type DestinationRuleSpecSubsetsTrafficPolicyTls struct {
	// OPTIONAL: The path to the file containing certificate authority certificates to use in verifying a presented server certificate.
	CaCertificates *string `pulumi:"caCertificates"`
	// OPTIONAL: The path to the file containing the certificate revocation list (CRL) to use in verifying a presented server certificate.
	CaCrl *string `pulumi:"caCrl"`
	// REQUIRED if mode is `MUTUAL`.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// The name of the secret that holds the TLS certs for the client including the CA certificates.
	CredentialName *string `pulumi:"credentialName"`
	// `insecureSkipVerify` specifies whether the proxy should skip verifying the CA signature and SAN for the server certificate corresponding to the host.
	InsecureSkipVerify *bool `pulumi:"insecureSkipVerify"`
	// Indicates whether connections to this port should be secured using TLS.
	//
	// Valid Options: DISABLE, SIMPLE, MUTUAL, ISTIO_MUTUAL
	Mode *string `pulumi:"mode"`
	// REQUIRED if mode is `MUTUAL`.
	PrivateKey *string `pulumi:"privateKey"`
	// SNI string to present to the server during TLS handshake.
	Sni *string `pulumi:"sni"`
	// A list of alternate names to verify the subject identity in the certificate.
	SubjectAltNames []string `pulumi:"subjectAltNames"`
}

// DestinationRuleSpecSubsetsTrafficPolicyTlsInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyTlsArgs and DestinationRuleSpecSubsetsTrafficPolicyTlsOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyTlsInput` via:
//
//	DestinationRuleSpecSubsetsTrafficPolicyTlsArgs{...}
type DestinationRuleSpecSubsetsTrafficPolicyTlsInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyTlsOutput() DestinationRuleSpecSubsetsTrafficPolicyTlsOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyTlsOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyTlsOutput
}

// TLS related settings for connections to the upstream service.
type DestinationRuleSpecSubsetsTrafficPolicyTlsArgs struct {
	// OPTIONAL: The path to the file containing certificate authority certificates to use in verifying a presented server certificate.
	CaCertificates pulumi.StringPtrInput `pulumi:"caCertificates"`
	// OPTIONAL: The path to the file containing the certificate revocation list (CRL) to use in verifying a presented server certificate.
	CaCrl pulumi.StringPtrInput `pulumi:"caCrl"`
	// REQUIRED if mode is `MUTUAL`.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// The name of the secret that holds the TLS certs for the client including the CA certificates.
	CredentialName pulumi.StringPtrInput `pulumi:"credentialName"`
	// `insecureSkipVerify` specifies whether the proxy should skip verifying the CA signature and SAN for the server certificate corresponding to the host.
	InsecureSkipVerify pulumi.BoolPtrInput `pulumi:"insecureSkipVerify"`
	// Indicates whether connections to this port should be secured using TLS.
	//
	// Valid Options: DISABLE, SIMPLE, MUTUAL, ISTIO_MUTUAL
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// REQUIRED if mode is `MUTUAL`.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// SNI string to present to the server during TLS handshake.
	Sni pulumi.StringPtrInput `pulumi:"sni"`
	// A list of alternate names to verify the subject identity in the certificate.
	SubjectAltNames pulumi.StringArrayInput `pulumi:"subjectAltNames"`
}

func (DestinationRuleSpecSubsetsTrafficPolicyTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyTls)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficPolicyTlsArgs) ToDestinationRuleSpecSubsetsTrafficPolicyTlsOutput() DestinationRuleSpecSubsetsTrafficPolicyTlsOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyTlsOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyTlsArgs) ToDestinationRuleSpecSubsetsTrafficPolicyTlsOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyTlsOutput)
}

func (i DestinationRuleSpecSubsetsTrafficPolicyTlsArgs) ToDestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyTlsArgs) ToDestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyTlsOutput).ToDestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficPolicyTlsPtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyTlsArgs, DestinationRuleSpecSubsetsTrafficPolicyTlsPtr and DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyTlsPtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficPolicyTlsArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficPolicyTlsPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput
}

type destinationRuleSpecSubsetsTrafficPolicyTlsPtrType DestinationRuleSpecSubsetsTrafficPolicyTlsArgs

func DestinationRuleSpecSubsetsTrafficPolicyTlsPtr(v *DestinationRuleSpecSubsetsTrafficPolicyTlsArgs) DestinationRuleSpecSubsetsTrafficPolicyTlsPtrInput {
	return (*destinationRuleSpecSubsetsTrafficPolicyTlsPtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficPolicyTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicyTls)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficPolicyTlsPtrType) ToDestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficPolicyTlsPtrType) ToDestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput)
}

// TLS related settings for connections to the upstream service.
type DestinationRuleSpecSubsetsTrafficPolicyTlsOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyTls)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyTlsOutput) ToDestinationRuleSpecSubsetsTrafficPolicyTlsOutput() DestinationRuleSpecSubsetsTrafficPolicyTlsOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyTlsOutput) ToDestinationRuleSpecSubsetsTrafficPolicyTlsOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyTlsOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyTlsOutput) ToDestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficPolicyTlsOutput) ToDestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficPolicyTls) *DestinationRuleSpecSubsetsTrafficPolicyTls {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput)
}

// OPTIONAL: The path to the file containing certificate authority certificates to use in verifying a presented server certificate.
func (o DestinationRuleSpecSubsetsTrafficPolicyTlsOutput) CaCertificates() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyTls) *string { return v.CaCertificates }).(pulumi.StringPtrOutput)
}

// OPTIONAL: The path to the file containing the certificate revocation list (CRL) to use in verifying a presented server certificate.
func (o DestinationRuleSpecSubsetsTrafficPolicyTlsOutput) CaCrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyTls) *string { return v.CaCrl }).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecSubsetsTrafficPolicyTlsOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyTls) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// The name of the secret that holds the TLS certs for the client including the CA certificates.
func (o DestinationRuleSpecSubsetsTrafficPolicyTlsOutput) CredentialName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyTls) *string { return v.CredentialName }).(pulumi.StringPtrOutput)
}

// `insecureSkipVerify` specifies whether the proxy should skip verifying the CA signature and SAN for the server certificate corresponding to the host.
func (o DestinationRuleSpecSubsetsTrafficPolicyTlsOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyTls) *bool { return v.InsecureSkipVerify }).(pulumi.BoolPtrOutput)
}

// Indicates whether connections to this port should be secured using TLS.
//
// Valid Options: DISABLE, SIMPLE, MUTUAL, ISTIO_MUTUAL
func (o DestinationRuleSpecSubsetsTrafficPolicyTlsOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyTls) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecSubsetsTrafficPolicyTlsOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyTls) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// SNI string to present to the server during TLS handshake.
func (o DestinationRuleSpecSubsetsTrafficPolicyTlsOutput) Sni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyTls) *string { return v.Sni }).(pulumi.StringPtrOutput)
}

// A list of alternate names to verify the subject identity in the certificate.
func (o DestinationRuleSpecSubsetsTrafficPolicyTlsOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyTls) []string { return v.SubjectAltNames }).(pulumi.StringArrayOutput)
}

type DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicyTls)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput) Elem() DestinationRuleSpecSubsetsTrafficPolicyTlsOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyTls) DestinationRuleSpecSubsetsTrafficPolicyTls {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficPolicyTls
		return ret
	}).(DestinationRuleSpecSubsetsTrafficPolicyTlsOutput)
}

// OPTIONAL: The path to the file containing certificate authority certificates to use in verifying a presented server certificate.
func (o DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput) CaCertificates() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyTls) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificates
	}).(pulumi.StringPtrOutput)
}

// OPTIONAL: The path to the file containing the certificate revocation list (CRL) to use in verifying a presented server certificate.
func (o DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput) CaCrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyTls) *string {
		if v == nil {
			return nil
		}
		return v.CaCrl
	}).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyTls) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

// The name of the secret that holds the TLS certs for the client including the CA certificates.
func (o DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput) CredentialName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyTls) *string {
		if v == nil {
			return nil
		}
		return v.CredentialName
	}).(pulumi.StringPtrOutput)
}

// `insecureSkipVerify` specifies whether the proxy should skip verifying the CA signature and SAN for the server certificate corresponding to the host.
func (o DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyTls) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureSkipVerify
	}).(pulumi.BoolPtrOutput)
}

// Indicates whether connections to this port should be secured using TLS.
//
// Valid Options: DISABLE, SIMPLE, MUTUAL, ISTIO_MUTUAL
func (o DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyTls) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyTls) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// SNI string to present to the server during TLS handshake.
func (o DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput) Sni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyTls) *string {
		if v == nil {
			return nil
		}
		return v.Sni
	}).(pulumi.StringPtrOutput)
}

// A list of alternate names to verify the subject identity in the certificate.
func (o DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyTls) []string {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(pulumi.StringArrayOutput)
}

// Configuration of tunneling TCP over other transport or application layers for the host configured in the DestinationRule.
type DestinationRuleSpecSubsetsTrafficPolicyTunnel struct {
	// Specifies which protocol to use for tunneling the downstream connection.
	Protocol *string `pulumi:"protocol"`
	// Specifies a host to which the downstream connection is tunneled.
	TargetHost string `pulumi:"targetHost"`
	// Specifies a port to which the downstream connection is tunneled.
	TargetPort int `pulumi:"targetPort"`
}

// DestinationRuleSpecSubsetsTrafficPolicyTunnelInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyTunnelArgs and DestinationRuleSpecSubsetsTrafficPolicyTunnelOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyTunnelInput` via:
//
//	DestinationRuleSpecSubsetsTrafficPolicyTunnelArgs{...}
type DestinationRuleSpecSubsetsTrafficPolicyTunnelInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyTunnelOutput() DestinationRuleSpecSubsetsTrafficPolicyTunnelOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyTunnelOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyTunnelOutput
}

// Configuration of tunneling TCP over other transport or application layers for the host configured in the DestinationRule.
type DestinationRuleSpecSubsetsTrafficPolicyTunnelArgs struct {
	// Specifies which protocol to use for tunneling the downstream connection.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Specifies a host to which the downstream connection is tunneled.
	TargetHost pulumi.StringInput `pulumi:"targetHost"`
	// Specifies a port to which the downstream connection is tunneled.
	TargetPort pulumi.IntInput `pulumi:"targetPort"`
}

func (DestinationRuleSpecSubsetsTrafficPolicyTunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyTunnel)(nil)).Elem()
}

func (i DestinationRuleSpecSubsetsTrafficPolicyTunnelArgs) ToDestinationRuleSpecSubsetsTrafficPolicyTunnelOutput() DestinationRuleSpecSubsetsTrafficPolicyTunnelOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyTunnelOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyTunnelArgs) ToDestinationRuleSpecSubsetsTrafficPolicyTunnelOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyTunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyTunnelOutput)
}

func (i DestinationRuleSpecSubsetsTrafficPolicyTunnelArgs) ToDestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecSubsetsTrafficPolicyTunnelArgs) ToDestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyTunnelOutput).ToDestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutputWithContext(ctx)
}

// DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrInput is an input type that accepts DestinationRuleSpecSubsetsTrafficPolicyTunnelArgs, DestinationRuleSpecSubsetsTrafficPolicyTunnelPtr and DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrInput` via:
//
//	        DestinationRuleSpecSubsetsTrafficPolicyTunnelArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput
	ToDestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutputWithContext(context.Context) DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput
}

type destinationRuleSpecSubsetsTrafficPolicyTunnelPtrType DestinationRuleSpecSubsetsTrafficPolicyTunnelArgs

func DestinationRuleSpecSubsetsTrafficPolicyTunnelPtr(v *DestinationRuleSpecSubsetsTrafficPolicyTunnelArgs) DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrInput {
	return (*destinationRuleSpecSubsetsTrafficPolicyTunnelPtrType)(v)
}

func (*destinationRuleSpecSubsetsTrafficPolicyTunnelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicyTunnel)(nil)).Elem()
}

func (i *destinationRuleSpecSubsetsTrafficPolicyTunnelPtrType) ToDestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput {
	return i.ToDestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecSubsetsTrafficPolicyTunnelPtrType) ToDestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput)
}

// Configuration of tunneling TCP over other transport or application layers for the host configured in the DestinationRule.
type DestinationRuleSpecSubsetsTrafficPolicyTunnelOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyTunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyTunnel)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyTunnelOutput) ToDestinationRuleSpecSubsetsTrafficPolicyTunnelOutput() DestinationRuleSpecSubsetsTrafficPolicyTunnelOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyTunnelOutput) ToDestinationRuleSpecSubsetsTrafficPolicyTunnelOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyTunnelOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyTunnelOutput) ToDestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput {
	return o.ToDestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecSubsetsTrafficPolicyTunnelOutput) ToDestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecSubsetsTrafficPolicyTunnel) *DestinationRuleSpecSubsetsTrafficPolicyTunnel {
		return &v
	}).(DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput)
}

// Specifies which protocol to use for tunneling the downstream connection.
func (o DestinationRuleSpecSubsetsTrafficPolicyTunnelOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyTunnel) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Specifies a host to which the downstream connection is tunneled.
func (o DestinationRuleSpecSubsetsTrafficPolicyTunnelOutput) TargetHost() pulumi.StringOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyTunnel) string { return v.TargetHost }).(pulumi.StringOutput)
}

// Specifies a port to which the downstream connection is tunneled.
func (o DestinationRuleSpecSubsetsTrafficPolicyTunnelOutput) TargetPort() pulumi.IntOutput {
	return o.ApplyT(func(v DestinationRuleSpecSubsetsTrafficPolicyTunnel) int { return v.TargetPort }).(pulumi.IntOutput)
}

type DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecSubsetsTrafficPolicyTunnel)(nil)).Elem()
}

func (o DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput() DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput) ToDestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutputWithContext(ctx context.Context) DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput {
	return o
}

func (o DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput) Elem() DestinationRuleSpecSubsetsTrafficPolicyTunnelOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyTunnel) DestinationRuleSpecSubsetsTrafficPolicyTunnel {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecSubsetsTrafficPolicyTunnel
		return ret
	}).(DestinationRuleSpecSubsetsTrafficPolicyTunnelOutput)
}

// Specifies which protocol to use for tunneling the downstream connection.
func (o DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyTunnel) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

// Specifies a host to which the downstream connection is tunneled.
func (o DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput) TargetHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyTunnel) *string {
		if v == nil {
			return nil
		}
		return &v.TargetHost
	}).(pulumi.StringPtrOutput)
}

// Specifies a port to which the downstream connection is tunneled.
func (o DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput) TargetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecSubsetsTrafficPolicyTunnel) *int {
		if v == nil {
			return nil
		}
		return &v.TargetPort
	}).(pulumi.IntPtrOutput)
}

// Traffic policies to apply (load balancing policy, connection pool sizes, outlier detection).
type DestinationRuleSpecTrafficPolicy struct {
	ConnectionPool *DestinationRuleSpecTrafficPolicyConnectionPool `pulumi:"connectionPool"`
	// Settings controlling the load balancer algorithms.
	LoadBalancer     interface{}                                       `pulumi:"loadBalancer"`
	OutlierDetection *DestinationRuleSpecTrafficPolicyOutlierDetection `pulumi:"outlierDetection"`
	// Traffic policies specific to individual ports.
	PortLevelSettings []DestinationRuleSpecTrafficPolicyPortLevelSettings `pulumi:"portLevelSettings"`
	// The upstream PROXY protocol settings.
	ProxyProtocol *DestinationRuleSpecTrafficPolicyProxyProtocol `pulumi:"proxyProtocol"`
	// TLS related settings for connections to the upstream service.
	Tls *DestinationRuleSpecTrafficPolicyTls `pulumi:"tls"`
	// Configuration of tunneling TCP over other transport or application layers for the host configured in the DestinationRule.
	Tunnel *DestinationRuleSpecTrafficPolicyTunnel `pulumi:"tunnel"`
}

// DestinationRuleSpecTrafficPolicyInput is an input type that accepts DestinationRuleSpecTrafficPolicyArgs and DestinationRuleSpecTrafficPolicyOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyInput` via:
//
//	DestinationRuleSpecTrafficPolicyArgs{...}
type DestinationRuleSpecTrafficPolicyInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyOutput() DestinationRuleSpecTrafficPolicyOutput
	ToDestinationRuleSpecTrafficPolicyOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyOutput
}

// Traffic policies to apply (load balancing policy, connection pool sizes, outlier detection).
type DestinationRuleSpecTrafficPolicyArgs struct {
	ConnectionPool DestinationRuleSpecTrafficPolicyConnectionPoolPtrInput `pulumi:"connectionPool"`
	// Settings controlling the load balancer algorithms.
	LoadBalancer     pulumi.Input                                             `pulumi:"loadBalancer"`
	OutlierDetection DestinationRuleSpecTrafficPolicyOutlierDetectionPtrInput `pulumi:"outlierDetection"`
	// Traffic policies specific to individual ports.
	PortLevelSettings DestinationRuleSpecTrafficPolicyPortLevelSettingsArrayInput `pulumi:"portLevelSettings"`
	// The upstream PROXY protocol settings.
	ProxyProtocol DestinationRuleSpecTrafficPolicyProxyProtocolPtrInput `pulumi:"proxyProtocol"`
	// TLS related settings for connections to the upstream service.
	Tls DestinationRuleSpecTrafficPolicyTlsPtrInput `pulumi:"tls"`
	// Configuration of tunneling TCP over other transport or application layers for the host configured in the DestinationRule.
	Tunnel DestinationRuleSpecTrafficPolicyTunnelPtrInput `pulumi:"tunnel"`
}

func (DestinationRuleSpecTrafficPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicy)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficPolicyArgs) ToDestinationRuleSpecTrafficPolicyOutput() DestinationRuleSpecTrafficPolicyOutput {
	return i.ToDestinationRuleSpecTrafficPolicyOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyArgs) ToDestinationRuleSpecTrafficPolicyOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyOutput)
}

func (i DestinationRuleSpecTrafficPolicyArgs) ToDestinationRuleSpecTrafficPolicyPtrOutput() DestinationRuleSpecTrafficPolicyPtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyArgs) ToDestinationRuleSpecTrafficPolicyPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyOutput).ToDestinationRuleSpecTrafficPolicyPtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficPolicyPtrInput is an input type that accepts DestinationRuleSpecTrafficPolicyArgs, DestinationRuleSpecTrafficPolicyPtr and DestinationRuleSpecTrafficPolicyPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyPtrInput` via:
//
//	        DestinationRuleSpecTrafficPolicyArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficPolicyPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyPtrOutput() DestinationRuleSpecTrafficPolicyPtrOutput
	ToDestinationRuleSpecTrafficPolicyPtrOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyPtrOutput
}

type destinationRuleSpecTrafficPolicyPtrType DestinationRuleSpecTrafficPolicyArgs

func DestinationRuleSpecTrafficPolicyPtr(v *DestinationRuleSpecTrafficPolicyArgs) DestinationRuleSpecTrafficPolicyPtrInput {
	return (*destinationRuleSpecTrafficPolicyPtrType)(v)
}

func (*destinationRuleSpecTrafficPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicy)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficPolicyPtrType) ToDestinationRuleSpecTrafficPolicyPtrOutput() DestinationRuleSpecTrafficPolicyPtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficPolicyPtrType) ToDestinationRuleSpecTrafficPolicyPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyPtrOutput)
}

// Traffic policies to apply (load balancing policy, connection pool sizes, outlier detection).
type DestinationRuleSpecTrafficPolicyOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicy)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyOutput) ToDestinationRuleSpecTrafficPolicyOutput() DestinationRuleSpecTrafficPolicyOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyOutput) ToDestinationRuleSpecTrafficPolicyOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyOutput) ToDestinationRuleSpecTrafficPolicyPtrOutput() DestinationRuleSpecTrafficPolicyPtrOutput {
	return o.ToDestinationRuleSpecTrafficPolicyPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficPolicyOutput) ToDestinationRuleSpecTrafficPolicyPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficPolicy) *DestinationRuleSpecTrafficPolicy {
		return &v
	}).(DestinationRuleSpecTrafficPolicyPtrOutput)
}

func (o DestinationRuleSpecTrafficPolicyOutput) ConnectionPool() DestinationRuleSpecTrafficPolicyConnectionPoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicy) *DestinationRuleSpecTrafficPolicyConnectionPool {
		return v.ConnectionPool
	}).(DestinationRuleSpecTrafficPolicyConnectionPoolPtrOutput)
}

// Settings controlling the load balancer algorithms.
func (o DestinationRuleSpecTrafficPolicyOutput) LoadBalancer() pulumi.AnyOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicy) interface{} { return v.LoadBalancer }).(pulumi.AnyOutput)
}

func (o DestinationRuleSpecTrafficPolicyOutput) OutlierDetection() DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicy) *DestinationRuleSpecTrafficPolicyOutlierDetection {
		return v.OutlierDetection
	}).(DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput)
}

// Traffic policies specific to individual ports.
func (o DestinationRuleSpecTrafficPolicyOutput) PortLevelSettings() DestinationRuleSpecTrafficPolicyPortLevelSettingsArrayOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicy) []DestinationRuleSpecTrafficPolicyPortLevelSettings {
		return v.PortLevelSettings
	}).(DestinationRuleSpecTrafficPolicyPortLevelSettingsArrayOutput)
}

// The upstream PROXY protocol settings.
func (o DestinationRuleSpecTrafficPolicyOutput) ProxyProtocol() DestinationRuleSpecTrafficPolicyProxyProtocolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicy) *DestinationRuleSpecTrafficPolicyProxyProtocol {
		return v.ProxyProtocol
	}).(DestinationRuleSpecTrafficPolicyProxyProtocolPtrOutput)
}

// TLS related settings for connections to the upstream service.
func (o DestinationRuleSpecTrafficPolicyOutput) Tls() DestinationRuleSpecTrafficPolicyTlsPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicy) *DestinationRuleSpecTrafficPolicyTls { return v.Tls }).(DestinationRuleSpecTrafficPolicyTlsPtrOutput)
}

// Configuration of tunneling TCP over other transport or application layers for the host configured in the DestinationRule.
func (o DestinationRuleSpecTrafficPolicyOutput) Tunnel() DestinationRuleSpecTrafficPolicyTunnelPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicy) *DestinationRuleSpecTrafficPolicyTunnel { return v.Tunnel }).(DestinationRuleSpecTrafficPolicyTunnelPtrOutput)
}

type DestinationRuleSpecTrafficPolicyPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicy)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyPtrOutput) ToDestinationRuleSpecTrafficPolicyPtrOutput() DestinationRuleSpecTrafficPolicyPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPtrOutput) ToDestinationRuleSpecTrafficPolicyPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPtrOutput) Elem() DestinationRuleSpecTrafficPolicyOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicy) DestinationRuleSpecTrafficPolicy {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficPolicy
		return ret
	}).(DestinationRuleSpecTrafficPolicyOutput)
}

func (o DestinationRuleSpecTrafficPolicyPtrOutput) ConnectionPool() DestinationRuleSpecTrafficPolicyConnectionPoolPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicy) *DestinationRuleSpecTrafficPolicyConnectionPool {
		if v == nil {
			return nil
		}
		return v.ConnectionPool
	}).(DestinationRuleSpecTrafficPolicyConnectionPoolPtrOutput)
}

// Settings controlling the load balancer algorithms.
func (o DestinationRuleSpecTrafficPolicyPtrOutput) LoadBalancer() pulumi.AnyOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicy) interface{} {
		if v == nil {
			return nil
		}
		return v.LoadBalancer
	}).(pulumi.AnyOutput)
}

func (o DestinationRuleSpecTrafficPolicyPtrOutput) OutlierDetection() DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicy) *DestinationRuleSpecTrafficPolicyOutlierDetection {
		if v == nil {
			return nil
		}
		return v.OutlierDetection
	}).(DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput)
}

// Traffic policies specific to individual ports.
func (o DestinationRuleSpecTrafficPolicyPtrOutput) PortLevelSettings() DestinationRuleSpecTrafficPolicyPortLevelSettingsArrayOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicy) []DestinationRuleSpecTrafficPolicyPortLevelSettings {
		if v == nil {
			return nil
		}
		return v.PortLevelSettings
	}).(DestinationRuleSpecTrafficPolicyPortLevelSettingsArrayOutput)
}

// The upstream PROXY protocol settings.
func (o DestinationRuleSpecTrafficPolicyPtrOutput) ProxyProtocol() DestinationRuleSpecTrafficPolicyProxyProtocolPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicy) *DestinationRuleSpecTrafficPolicyProxyProtocol {
		if v == nil {
			return nil
		}
		return v.ProxyProtocol
	}).(DestinationRuleSpecTrafficPolicyProxyProtocolPtrOutput)
}

// TLS related settings for connections to the upstream service.
func (o DestinationRuleSpecTrafficPolicyPtrOutput) Tls() DestinationRuleSpecTrafficPolicyTlsPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicy) *DestinationRuleSpecTrafficPolicyTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(DestinationRuleSpecTrafficPolicyTlsPtrOutput)
}

// Configuration of tunneling TCP over other transport or application layers for the host configured in the DestinationRule.
func (o DestinationRuleSpecTrafficPolicyPtrOutput) Tunnel() DestinationRuleSpecTrafficPolicyTunnelPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicy) *DestinationRuleSpecTrafficPolicyTunnel {
		if v == nil {
			return nil
		}
		return v.Tunnel
	}).(DestinationRuleSpecTrafficPolicyTunnelPtrOutput)
}

type DestinationRuleSpecTrafficPolicyConnectionPool struct {
	// HTTP connection pool settings.
	Http *DestinationRuleSpecTrafficPolicyConnectionPoolHttp `pulumi:"http"`
	// Settings common to both HTTP and TCP upstream connections.
	Tcp *DestinationRuleSpecTrafficPolicyConnectionPoolTcp `pulumi:"tcp"`
}

// DestinationRuleSpecTrafficPolicyConnectionPoolInput is an input type that accepts DestinationRuleSpecTrafficPolicyConnectionPoolArgs and DestinationRuleSpecTrafficPolicyConnectionPoolOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyConnectionPoolInput` via:
//
//	DestinationRuleSpecTrafficPolicyConnectionPoolArgs{...}
type DestinationRuleSpecTrafficPolicyConnectionPoolInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyConnectionPoolOutput() DestinationRuleSpecTrafficPolicyConnectionPoolOutput
	ToDestinationRuleSpecTrafficPolicyConnectionPoolOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolOutput
}

type DestinationRuleSpecTrafficPolicyConnectionPoolArgs struct {
	// HTTP connection pool settings.
	Http DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrInput `pulumi:"http"`
	// Settings common to both HTTP and TCP upstream connections.
	Tcp DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrInput `pulumi:"tcp"`
}

func (DestinationRuleSpecTrafficPolicyConnectionPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyConnectionPool)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficPolicyConnectionPoolArgs) ToDestinationRuleSpecTrafficPolicyConnectionPoolOutput() DestinationRuleSpecTrafficPolicyConnectionPoolOutput {
	return i.ToDestinationRuleSpecTrafficPolicyConnectionPoolOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyConnectionPoolArgs) ToDestinationRuleSpecTrafficPolicyConnectionPoolOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyConnectionPoolOutput)
}

func (i DestinationRuleSpecTrafficPolicyConnectionPoolArgs) ToDestinationRuleSpecTrafficPolicyConnectionPoolPtrOutput() DestinationRuleSpecTrafficPolicyConnectionPoolPtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyConnectionPoolPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyConnectionPoolArgs) ToDestinationRuleSpecTrafficPolicyConnectionPoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyConnectionPoolOutput).ToDestinationRuleSpecTrafficPolicyConnectionPoolPtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficPolicyConnectionPoolPtrInput is an input type that accepts DestinationRuleSpecTrafficPolicyConnectionPoolArgs, DestinationRuleSpecTrafficPolicyConnectionPoolPtr and DestinationRuleSpecTrafficPolicyConnectionPoolPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyConnectionPoolPtrInput` via:
//
//	        DestinationRuleSpecTrafficPolicyConnectionPoolArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficPolicyConnectionPoolPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyConnectionPoolPtrOutput() DestinationRuleSpecTrafficPolicyConnectionPoolPtrOutput
	ToDestinationRuleSpecTrafficPolicyConnectionPoolPtrOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolPtrOutput
}

type destinationRuleSpecTrafficPolicyConnectionPoolPtrType DestinationRuleSpecTrafficPolicyConnectionPoolArgs

func DestinationRuleSpecTrafficPolicyConnectionPoolPtr(v *DestinationRuleSpecTrafficPolicyConnectionPoolArgs) DestinationRuleSpecTrafficPolicyConnectionPoolPtrInput {
	return (*destinationRuleSpecTrafficPolicyConnectionPoolPtrType)(v)
}

func (*destinationRuleSpecTrafficPolicyConnectionPoolPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicyConnectionPool)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficPolicyConnectionPoolPtrType) ToDestinationRuleSpecTrafficPolicyConnectionPoolPtrOutput() DestinationRuleSpecTrafficPolicyConnectionPoolPtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyConnectionPoolPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficPolicyConnectionPoolPtrType) ToDestinationRuleSpecTrafficPolicyConnectionPoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyConnectionPoolPtrOutput)
}

type DestinationRuleSpecTrafficPolicyConnectionPoolOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyConnectionPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyConnectionPool)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyConnectionPoolOutput) ToDestinationRuleSpecTrafficPolicyConnectionPoolOutput() DestinationRuleSpecTrafficPolicyConnectionPoolOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyConnectionPoolOutput) ToDestinationRuleSpecTrafficPolicyConnectionPoolOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyConnectionPoolOutput) ToDestinationRuleSpecTrafficPolicyConnectionPoolPtrOutput() DestinationRuleSpecTrafficPolicyConnectionPoolPtrOutput {
	return o.ToDestinationRuleSpecTrafficPolicyConnectionPoolPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficPolicyConnectionPoolOutput) ToDestinationRuleSpecTrafficPolicyConnectionPoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficPolicyConnectionPool) *DestinationRuleSpecTrafficPolicyConnectionPool {
		return &v
	}).(DestinationRuleSpecTrafficPolicyConnectionPoolPtrOutput)
}

// HTTP connection pool settings.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolOutput) Http() DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyConnectionPool) *DestinationRuleSpecTrafficPolicyConnectionPoolHttp {
		return v.Http
	}).(DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolOutput) Tcp() DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyConnectionPool) *DestinationRuleSpecTrafficPolicyConnectionPoolTcp {
		return v.Tcp
	}).(DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput)
}

type DestinationRuleSpecTrafficPolicyConnectionPoolPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyConnectionPoolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicyConnectionPool)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyConnectionPoolPtrOutput) ToDestinationRuleSpecTrafficPolicyConnectionPoolPtrOutput() DestinationRuleSpecTrafficPolicyConnectionPoolPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyConnectionPoolPtrOutput) ToDestinationRuleSpecTrafficPolicyConnectionPoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyConnectionPoolPtrOutput) Elem() DestinationRuleSpecTrafficPolicyConnectionPoolOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyConnectionPool) DestinationRuleSpecTrafficPolicyConnectionPool {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficPolicyConnectionPool
		return ret
	}).(DestinationRuleSpecTrafficPolicyConnectionPoolOutput)
}

// HTTP connection pool settings.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolPtrOutput) Http() DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyConnectionPool) *DestinationRuleSpecTrafficPolicyConnectionPoolHttp {
		if v == nil {
			return nil
		}
		return v.Http
	}).(DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolPtrOutput) Tcp() DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyConnectionPool) *DestinationRuleSpecTrafficPolicyConnectionPoolTcp {
		if v == nil {
			return nil
		}
		return v.Tcp
	}).(DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput)
}

// HTTP connection pool settings.
type DestinationRuleSpecTrafficPolicyConnectionPoolHttp struct {
	// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
	//
	// Valid Options: DEFAULT, DO_NOT_UPGRADE, UPGRADE
	H2UpgradePolicy *string `pulumi:"h2UpgradePolicy"`
	// Maximum number of requests that will be queued while waiting for a ready connection pool connection.
	Http1MaxPendingRequests *int `pulumi:"http1MaxPendingRequests"`
	// Maximum number of active requests to a destination.
	Http2MaxRequests *int `pulumi:"http2MaxRequests"`
	// The idle timeout for upstream connection pool connections.
	IdleTimeout *string `pulumi:"idleTimeout"`
	// The maximum number of concurrent streams allowed for a peer on one HTTP/2 connection.
	MaxConcurrentStreams *int `pulumi:"maxConcurrentStreams"`
	// Maximum number of requests per connection to a backend.
	MaxRequestsPerConnection *int `pulumi:"maxRequestsPerConnection"`
	// Maximum number of retries that can be outstanding to all hosts in a cluster at a given time.
	MaxRetries *int `pulumi:"maxRetries"`
	// If set to true, client protocol will be preserved while initiating connection to backend.
	UseClientProtocol *bool `pulumi:"useClientProtocol"`
}

// DestinationRuleSpecTrafficPolicyConnectionPoolHttpInput is an input type that accepts DestinationRuleSpecTrafficPolicyConnectionPoolHttpArgs and DestinationRuleSpecTrafficPolicyConnectionPoolHttpOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyConnectionPoolHttpInput` via:
//
//	DestinationRuleSpecTrafficPolicyConnectionPoolHttpArgs{...}
type DestinationRuleSpecTrafficPolicyConnectionPoolHttpInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyConnectionPoolHttpOutput() DestinationRuleSpecTrafficPolicyConnectionPoolHttpOutput
	ToDestinationRuleSpecTrafficPolicyConnectionPoolHttpOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolHttpOutput
}

// HTTP connection pool settings.
type DestinationRuleSpecTrafficPolicyConnectionPoolHttpArgs struct {
	// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
	//
	// Valid Options: DEFAULT, DO_NOT_UPGRADE, UPGRADE
	H2UpgradePolicy pulumi.StringPtrInput `pulumi:"h2UpgradePolicy"`
	// Maximum number of requests that will be queued while waiting for a ready connection pool connection.
	Http1MaxPendingRequests pulumi.IntPtrInput `pulumi:"http1MaxPendingRequests"`
	// Maximum number of active requests to a destination.
	Http2MaxRequests pulumi.IntPtrInput `pulumi:"http2MaxRequests"`
	// The idle timeout for upstream connection pool connections.
	IdleTimeout pulumi.StringPtrInput `pulumi:"idleTimeout"`
	// The maximum number of concurrent streams allowed for a peer on one HTTP/2 connection.
	MaxConcurrentStreams pulumi.IntPtrInput `pulumi:"maxConcurrentStreams"`
	// Maximum number of requests per connection to a backend.
	MaxRequestsPerConnection pulumi.IntPtrInput `pulumi:"maxRequestsPerConnection"`
	// Maximum number of retries that can be outstanding to all hosts in a cluster at a given time.
	MaxRetries pulumi.IntPtrInput `pulumi:"maxRetries"`
	// If set to true, client protocol will be preserved while initiating connection to backend.
	UseClientProtocol pulumi.BoolPtrInput `pulumi:"useClientProtocol"`
}

func (DestinationRuleSpecTrafficPolicyConnectionPoolHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyConnectionPoolHttp)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficPolicyConnectionPoolHttpArgs) ToDestinationRuleSpecTrafficPolicyConnectionPoolHttpOutput() DestinationRuleSpecTrafficPolicyConnectionPoolHttpOutput {
	return i.ToDestinationRuleSpecTrafficPolicyConnectionPoolHttpOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyConnectionPoolHttpArgs) ToDestinationRuleSpecTrafficPolicyConnectionPoolHttpOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyConnectionPoolHttpOutput)
}

func (i DestinationRuleSpecTrafficPolicyConnectionPoolHttpArgs) ToDestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput() DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyConnectionPoolHttpArgs) ToDestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyConnectionPoolHttpOutput).ToDestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrInput is an input type that accepts DestinationRuleSpecTrafficPolicyConnectionPoolHttpArgs, DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtr and DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrInput` via:
//
//	        DestinationRuleSpecTrafficPolicyConnectionPoolHttpArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput() DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput
	ToDestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput
}

type destinationRuleSpecTrafficPolicyConnectionPoolHttpPtrType DestinationRuleSpecTrafficPolicyConnectionPoolHttpArgs

func DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtr(v *DestinationRuleSpecTrafficPolicyConnectionPoolHttpArgs) DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrInput {
	return (*destinationRuleSpecTrafficPolicyConnectionPoolHttpPtrType)(v)
}

func (*destinationRuleSpecTrafficPolicyConnectionPoolHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicyConnectionPoolHttp)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficPolicyConnectionPoolHttpPtrType) ToDestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput() DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficPolicyConnectionPoolHttpPtrType) ToDestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput)
}

// HTTP connection pool settings.
type DestinationRuleSpecTrafficPolicyConnectionPoolHttpOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyConnectionPoolHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyConnectionPoolHttp)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyConnectionPoolHttpOutput) ToDestinationRuleSpecTrafficPolicyConnectionPoolHttpOutput() DestinationRuleSpecTrafficPolicyConnectionPoolHttpOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyConnectionPoolHttpOutput) ToDestinationRuleSpecTrafficPolicyConnectionPoolHttpOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolHttpOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyConnectionPoolHttpOutput) ToDestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput() DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput {
	return o.ToDestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficPolicyConnectionPoolHttpOutput) ToDestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficPolicyConnectionPoolHttp) *DestinationRuleSpecTrafficPolicyConnectionPoolHttp {
		return &v
	}).(DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput)
}

// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
//
// Valid Options: DEFAULT, DO_NOT_UPGRADE, UPGRADE
func (o DestinationRuleSpecTrafficPolicyConnectionPoolHttpOutput) H2UpgradePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyConnectionPoolHttp) *string { return v.H2UpgradePolicy }).(pulumi.StringPtrOutput)
}

// Maximum number of requests that will be queued while waiting for a ready connection pool connection.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolHttpOutput) Http1MaxPendingRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyConnectionPoolHttp) *int { return v.Http1MaxPendingRequests }).(pulumi.IntPtrOutput)
}

// Maximum number of active requests to a destination.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolHttpOutput) Http2MaxRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyConnectionPoolHttp) *int { return v.Http2MaxRequests }).(pulumi.IntPtrOutput)
}

// The idle timeout for upstream connection pool connections.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolHttpOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyConnectionPoolHttp) *string { return v.IdleTimeout }).(pulumi.StringPtrOutput)
}

// The maximum number of concurrent streams allowed for a peer on one HTTP/2 connection.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolHttpOutput) MaxConcurrentStreams() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyConnectionPoolHttp) *int { return v.MaxConcurrentStreams }).(pulumi.IntPtrOutput)
}

// Maximum number of requests per connection to a backend.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolHttpOutput) MaxRequestsPerConnection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyConnectionPoolHttp) *int { return v.MaxRequestsPerConnection }).(pulumi.IntPtrOutput)
}

// Maximum number of retries that can be outstanding to all hosts in a cluster at a given time.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolHttpOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyConnectionPoolHttp) *int { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

// If set to true, client protocol will be preserved while initiating connection to backend.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolHttpOutput) UseClientProtocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyConnectionPoolHttp) *bool { return v.UseClientProtocol }).(pulumi.BoolPtrOutput)
}

type DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicyConnectionPoolHttp)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput) ToDestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput() DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput) ToDestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput) Elem() DestinationRuleSpecTrafficPolicyConnectionPoolHttpOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyConnectionPoolHttp) DestinationRuleSpecTrafficPolicyConnectionPoolHttp {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficPolicyConnectionPoolHttp
		return ret
	}).(DestinationRuleSpecTrafficPolicyConnectionPoolHttpOutput)
}

// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
//
// Valid Options: DEFAULT, DO_NOT_UPGRADE, UPGRADE
func (o DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput) H2UpgradePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyConnectionPoolHttp) *string {
		if v == nil {
			return nil
		}
		return v.H2UpgradePolicy
	}).(pulumi.StringPtrOutput)
}

// Maximum number of requests that will be queued while waiting for a ready connection pool connection.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput) Http1MaxPendingRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyConnectionPoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.Http1MaxPendingRequests
	}).(pulumi.IntPtrOutput)
}

// Maximum number of active requests to a destination.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput) Http2MaxRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyConnectionPoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.Http2MaxRequests
	}).(pulumi.IntPtrOutput)
}

// The idle timeout for upstream connection pool connections.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyConnectionPoolHttp) *string {
		if v == nil {
			return nil
		}
		return v.IdleTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum number of concurrent streams allowed for a peer on one HTTP/2 connection.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput) MaxConcurrentStreams() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyConnectionPoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentStreams
	}).(pulumi.IntPtrOutput)
}

// Maximum number of requests per connection to a backend.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput) MaxRequestsPerConnection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyConnectionPoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.MaxRequestsPerConnection
	}).(pulumi.IntPtrOutput)
}

// Maximum number of retries that can be outstanding to all hosts in a cluster at a given time.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyConnectionPoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

// If set to true, client protocol will be preserved while initiating connection to backend.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput) UseClientProtocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyConnectionPoolHttp) *bool {
		if v == nil {
			return nil
		}
		return v.UseClientProtocol
	}).(pulumi.BoolPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
type DestinationRuleSpecTrafficPolicyConnectionPoolTcp struct {
	// TCP connection timeout.
	ConnectTimeout *string `pulumi:"connectTimeout"`
	// The idle timeout for TCP connections.
	IdleTimeout *string `pulumi:"idleTimeout"`
	// The maximum duration of a connection.
	MaxConnectionDuration *string `pulumi:"maxConnectionDuration"`
	// Maximum number of HTTP1 /TCP connections to a destination host.
	MaxConnections *int `pulumi:"maxConnections"`
	// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
	TcpKeepalive *DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalive `pulumi:"tcpKeepalive"`
}

// DestinationRuleSpecTrafficPolicyConnectionPoolTcpInput is an input type that accepts DestinationRuleSpecTrafficPolicyConnectionPoolTcpArgs and DestinationRuleSpecTrafficPolicyConnectionPoolTcpOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyConnectionPoolTcpInput` via:
//
//	DestinationRuleSpecTrafficPolicyConnectionPoolTcpArgs{...}
type DestinationRuleSpecTrafficPolicyConnectionPoolTcpInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpOutput() DestinationRuleSpecTrafficPolicyConnectionPoolTcpOutput
	ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolTcpOutput
}

// Settings common to both HTTP and TCP upstream connections.
type DestinationRuleSpecTrafficPolicyConnectionPoolTcpArgs struct {
	// TCP connection timeout.
	ConnectTimeout pulumi.StringPtrInput `pulumi:"connectTimeout"`
	// The idle timeout for TCP connections.
	IdleTimeout pulumi.StringPtrInput `pulumi:"idleTimeout"`
	// The maximum duration of a connection.
	MaxConnectionDuration pulumi.StringPtrInput `pulumi:"maxConnectionDuration"`
	// Maximum number of HTTP1 /TCP connections to a destination host.
	MaxConnections pulumi.IntPtrInput `pulumi:"maxConnections"`
	// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
	TcpKeepalive DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrInput `pulumi:"tcpKeepalive"`
}

func (DestinationRuleSpecTrafficPolicyConnectionPoolTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyConnectionPoolTcp)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficPolicyConnectionPoolTcpArgs) ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpOutput() DestinationRuleSpecTrafficPolicyConnectionPoolTcpOutput {
	return i.ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyConnectionPoolTcpArgs) ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyConnectionPoolTcpOutput)
}

func (i DestinationRuleSpecTrafficPolicyConnectionPoolTcpArgs) ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput() DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyConnectionPoolTcpArgs) ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyConnectionPoolTcpOutput).ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrInput is an input type that accepts DestinationRuleSpecTrafficPolicyConnectionPoolTcpArgs, DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtr and DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrInput` via:
//
//	        DestinationRuleSpecTrafficPolicyConnectionPoolTcpArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput() DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput
	ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput
}

type destinationRuleSpecTrafficPolicyConnectionPoolTcpPtrType DestinationRuleSpecTrafficPolicyConnectionPoolTcpArgs

func DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtr(v *DestinationRuleSpecTrafficPolicyConnectionPoolTcpArgs) DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrInput {
	return (*destinationRuleSpecTrafficPolicyConnectionPoolTcpPtrType)(v)
}

func (*destinationRuleSpecTrafficPolicyConnectionPoolTcpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicyConnectionPoolTcp)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficPolicyConnectionPoolTcpPtrType) ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput() DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficPolicyConnectionPoolTcpPtrType) ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
type DestinationRuleSpecTrafficPolicyConnectionPoolTcpOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyConnectionPoolTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyConnectionPoolTcp)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyConnectionPoolTcpOutput) ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpOutput() DestinationRuleSpecTrafficPolicyConnectionPoolTcpOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyConnectionPoolTcpOutput) ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolTcpOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyConnectionPoolTcpOutput) ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput() DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput {
	return o.ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficPolicyConnectionPoolTcpOutput) ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficPolicyConnectionPoolTcp) *DestinationRuleSpecTrafficPolicyConnectionPoolTcp {
		return &v
	}).(DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput)
}

// TCP connection timeout.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolTcpOutput) ConnectTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyConnectionPoolTcp) *string { return v.ConnectTimeout }).(pulumi.StringPtrOutput)
}

// The idle timeout for TCP connections.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolTcpOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyConnectionPoolTcp) *string { return v.IdleTimeout }).(pulumi.StringPtrOutput)
}

// The maximum duration of a connection.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolTcpOutput) MaxConnectionDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyConnectionPoolTcp) *string { return v.MaxConnectionDuration }).(pulumi.StringPtrOutput)
}

// Maximum number of HTTP1 /TCP connections to a destination host.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolTcpOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyConnectionPoolTcp) *int { return v.MaxConnections }).(pulumi.IntPtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolTcpOutput) TcpKeepalive() DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyConnectionPoolTcp) *DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalive {
		return v.TcpKeepalive
	}).(DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput)
}

type DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicyConnectionPoolTcp)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput) ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput() DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput) ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput) Elem() DestinationRuleSpecTrafficPolicyConnectionPoolTcpOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyConnectionPoolTcp) DestinationRuleSpecTrafficPolicyConnectionPoolTcp {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficPolicyConnectionPoolTcp
		return ret
	}).(DestinationRuleSpecTrafficPolicyConnectionPoolTcpOutput)
}

// TCP connection timeout.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput) ConnectTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyConnectionPoolTcp) *string {
		if v == nil {
			return nil
		}
		return v.ConnectTimeout
	}).(pulumi.StringPtrOutput)
}

// The idle timeout for TCP connections.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyConnectionPoolTcp) *string {
		if v == nil {
			return nil
		}
		return v.IdleTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum duration of a connection.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput) MaxConnectionDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyConnectionPoolTcp) *string {
		if v == nil {
			return nil
		}
		return v.MaxConnectionDuration
	}).(pulumi.StringPtrOutput)
}

// Maximum number of HTTP1 /TCP connections to a destination host.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyConnectionPoolTcp) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnections
	}).(pulumi.IntPtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput) TcpKeepalive() DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyConnectionPoolTcp) *DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalive {
		if v == nil {
			return nil
		}
		return v.TcpKeepalive
	}).(DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
type DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalive struct {
	// The time duration between keep-alive probes.
	Interval *string `pulumi:"interval"`
	// Maximum number of keepalive probes to send without response before deciding the connection is dead.
	Probes *int `pulumi:"probes"`
	// The time duration a connection needs to be idle before keep-alive probes start being sent.
	Time *string `pulumi:"time"`
}

// DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveInput is an input type that accepts DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveArgs and DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveInput` via:
//
//	DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveArgs{...}
type DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput() DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput
	ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
type DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveArgs struct {
	// The time duration between keep-alive probes.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// Maximum number of keepalive probes to send without response before deciding the connection is dead.
	Probes pulumi.IntPtrInput `pulumi:"probes"`
	// The time duration a connection needs to be idle before keep-alive probes start being sent.
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalive)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveArgs) ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput() DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput {
	return i.ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveArgs) ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput)
}

func (i DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveArgs) ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput() DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveArgs) ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput).ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrInput is an input type that accepts DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveArgs, DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtr and DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrInput` via:
//
//	        DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput() DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput
	ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput
}

type destinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrType DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveArgs

func DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtr(v *DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveArgs) DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrInput {
	return (*destinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrType)(v)
}

func (*destinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalive)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrType) ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput() DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrType) ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
type DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalive)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput) ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput() DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput) ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput) ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput() DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput {
	return o.ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput) ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalive) *DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalive {
		return &v
	}).(DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput)
}

// The time duration between keep-alive probes.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalive) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// Maximum number of keepalive probes to send without response before deciding the connection is dead.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput) Probes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalive) *int { return v.Probes }).(pulumi.IntPtrOutput)
}

// The time duration a connection needs to be idle before keep-alive probes start being sent.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalive) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalive)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput) ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput() DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput) ToDestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput) Elem() DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalive) DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalive {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalive
		return ret
	}).(DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput)
}

// The time duration between keep-alive probes.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalive) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// Maximum number of keepalive probes to send without response before deciding the connection is dead.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput) Probes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalive) *int {
		if v == nil {
			return nil
		}
		return v.Probes
	}).(pulumi.IntPtrOutput)
}

// The time duration a connection needs to be idle before keep-alive probes start being sent.
func (o DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalive) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

type DestinationRuleSpecTrafficPolicyOutlierDetection struct {
	// Minimum ejection duration.
	BaseEjectionTime *string `pulumi:"baseEjectionTime"`
	// Number of 5xx errors before a host is ejected from the connection pool.
	Consecutive5xxErrors *int `pulumi:"consecutive5xxErrors"`
	ConsecutiveErrors    *int `pulumi:"consecutiveErrors"`
	// Number of gateway errors before a host is ejected from the connection pool.
	ConsecutiveGatewayErrors *int `pulumi:"consecutiveGatewayErrors"`
	// The number of consecutive locally originated failures before ejection occurs.
	ConsecutiveLocalOriginFailures *int `pulumi:"consecutiveLocalOriginFailures"`
	// Time interval between ejection sweep analysis.
	Interval *string `pulumi:"interval"`
	// Maximum % of hosts in the load balancing pool for the upstream service that can be ejected.
	MaxEjectionPercent *int `pulumi:"maxEjectionPercent"`
	// Outlier detection will be enabled as long as the associated load balancing pool has at least min_health_percent hosts in healthy mode.
	MinHealthPercent *int `pulumi:"minHealthPercent"`
	// Determines whether to distinguish local origin failures from external errors.
	SplitExternalLocalOriginErrors *bool `pulumi:"splitExternalLocalOriginErrors"`
}

// DestinationRuleSpecTrafficPolicyOutlierDetectionInput is an input type that accepts DestinationRuleSpecTrafficPolicyOutlierDetectionArgs and DestinationRuleSpecTrafficPolicyOutlierDetectionOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyOutlierDetectionInput` via:
//
//	DestinationRuleSpecTrafficPolicyOutlierDetectionArgs{...}
type DestinationRuleSpecTrafficPolicyOutlierDetectionInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyOutlierDetectionOutput() DestinationRuleSpecTrafficPolicyOutlierDetectionOutput
	ToDestinationRuleSpecTrafficPolicyOutlierDetectionOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyOutlierDetectionOutput
}

type DestinationRuleSpecTrafficPolicyOutlierDetectionArgs struct {
	// Minimum ejection duration.
	BaseEjectionTime pulumi.StringPtrInput `pulumi:"baseEjectionTime"`
	// Number of 5xx errors before a host is ejected from the connection pool.
	Consecutive5xxErrors pulumi.IntPtrInput `pulumi:"consecutive5xxErrors"`
	ConsecutiveErrors    pulumi.IntPtrInput `pulumi:"consecutiveErrors"`
	// Number of gateway errors before a host is ejected from the connection pool.
	ConsecutiveGatewayErrors pulumi.IntPtrInput `pulumi:"consecutiveGatewayErrors"`
	// The number of consecutive locally originated failures before ejection occurs.
	ConsecutiveLocalOriginFailures pulumi.IntPtrInput `pulumi:"consecutiveLocalOriginFailures"`
	// Time interval between ejection sweep analysis.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// Maximum % of hosts in the load balancing pool for the upstream service that can be ejected.
	MaxEjectionPercent pulumi.IntPtrInput `pulumi:"maxEjectionPercent"`
	// Outlier detection will be enabled as long as the associated load balancing pool has at least min_health_percent hosts in healthy mode.
	MinHealthPercent pulumi.IntPtrInput `pulumi:"minHealthPercent"`
	// Determines whether to distinguish local origin failures from external errors.
	SplitExternalLocalOriginErrors pulumi.BoolPtrInput `pulumi:"splitExternalLocalOriginErrors"`
}

func (DestinationRuleSpecTrafficPolicyOutlierDetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyOutlierDetection)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficPolicyOutlierDetectionArgs) ToDestinationRuleSpecTrafficPolicyOutlierDetectionOutput() DestinationRuleSpecTrafficPolicyOutlierDetectionOutput {
	return i.ToDestinationRuleSpecTrafficPolicyOutlierDetectionOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyOutlierDetectionArgs) ToDestinationRuleSpecTrafficPolicyOutlierDetectionOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyOutlierDetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyOutlierDetectionOutput)
}

func (i DestinationRuleSpecTrafficPolicyOutlierDetectionArgs) ToDestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput() DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyOutlierDetectionArgs) ToDestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyOutlierDetectionOutput).ToDestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficPolicyOutlierDetectionPtrInput is an input type that accepts DestinationRuleSpecTrafficPolicyOutlierDetectionArgs, DestinationRuleSpecTrafficPolicyOutlierDetectionPtr and DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyOutlierDetectionPtrInput` via:
//
//	        DestinationRuleSpecTrafficPolicyOutlierDetectionArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficPolicyOutlierDetectionPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput() DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput
	ToDestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput
}

type destinationRuleSpecTrafficPolicyOutlierDetectionPtrType DestinationRuleSpecTrafficPolicyOutlierDetectionArgs

func DestinationRuleSpecTrafficPolicyOutlierDetectionPtr(v *DestinationRuleSpecTrafficPolicyOutlierDetectionArgs) DestinationRuleSpecTrafficPolicyOutlierDetectionPtrInput {
	return (*destinationRuleSpecTrafficPolicyOutlierDetectionPtrType)(v)
}

func (*destinationRuleSpecTrafficPolicyOutlierDetectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicyOutlierDetection)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficPolicyOutlierDetectionPtrType) ToDestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput() DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficPolicyOutlierDetectionPtrType) ToDestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput)
}

type DestinationRuleSpecTrafficPolicyOutlierDetectionOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyOutlierDetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyOutlierDetection)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyOutlierDetectionOutput) ToDestinationRuleSpecTrafficPolicyOutlierDetectionOutput() DestinationRuleSpecTrafficPolicyOutlierDetectionOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyOutlierDetectionOutput) ToDestinationRuleSpecTrafficPolicyOutlierDetectionOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyOutlierDetectionOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyOutlierDetectionOutput) ToDestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput() DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput {
	return o.ToDestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficPolicyOutlierDetectionOutput) ToDestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficPolicyOutlierDetection) *DestinationRuleSpecTrafficPolicyOutlierDetection {
		return &v
	}).(DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput)
}

// Minimum ejection duration.
func (o DestinationRuleSpecTrafficPolicyOutlierDetectionOutput) BaseEjectionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyOutlierDetection) *string { return v.BaseEjectionTime }).(pulumi.StringPtrOutput)
}

// Number of 5xx errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecTrafficPolicyOutlierDetectionOutput) Consecutive5xxErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyOutlierDetection) *int { return v.Consecutive5xxErrors }).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecTrafficPolicyOutlierDetectionOutput) ConsecutiveErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyOutlierDetection) *int { return v.ConsecutiveErrors }).(pulumi.IntPtrOutput)
}

// Number of gateway errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecTrafficPolicyOutlierDetectionOutput) ConsecutiveGatewayErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyOutlierDetection) *int { return v.ConsecutiveGatewayErrors }).(pulumi.IntPtrOutput)
}

// The number of consecutive locally originated failures before ejection occurs.
func (o DestinationRuleSpecTrafficPolicyOutlierDetectionOutput) ConsecutiveLocalOriginFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyOutlierDetection) *int { return v.ConsecutiveLocalOriginFailures }).(pulumi.IntPtrOutput)
}

// Time interval between ejection sweep analysis.
func (o DestinationRuleSpecTrafficPolicyOutlierDetectionOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyOutlierDetection) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// Maximum % of hosts in the load balancing pool for the upstream service that can be ejected.
func (o DestinationRuleSpecTrafficPolicyOutlierDetectionOutput) MaxEjectionPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyOutlierDetection) *int { return v.MaxEjectionPercent }).(pulumi.IntPtrOutput)
}

// Outlier detection will be enabled as long as the associated load balancing pool has at least min_health_percent hosts in healthy mode.
func (o DestinationRuleSpecTrafficPolicyOutlierDetectionOutput) MinHealthPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyOutlierDetection) *int { return v.MinHealthPercent }).(pulumi.IntPtrOutput)
}

// Determines whether to distinguish local origin failures from external errors.
func (o DestinationRuleSpecTrafficPolicyOutlierDetectionOutput) SplitExternalLocalOriginErrors() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyOutlierDetection) *bool {
		return v.SplitExternalLocalOriginErrors
	}).(pulumi.BoolPtrOutput)
}

type DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicyOutlierDetection)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput) ToDestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput() DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput) ToDestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput) Elem() DestinationRuleSpecTrafficPolicyOutlierDetectionOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyOutlierDetection) DestinationRuleSpecTrafficPolicyOutlierDetection {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficPolicyOutlierDetection
		return ret
	}).(DestinationRuleSpecTrafficPolicyOutlierDetectionOutput)
}

// Minimum ejection duration.
func (o DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput) BaseEjectionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyOutlierDetection) *string {
		if v == nil {
			return nil
		}
		return v.BaseEjectionTime
	}).(pulumi.StringPtrOutput)
}

// Number of 5xx errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput) Consecutive5xxErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.Consecutive5xxErrors
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput) ConsecutiveErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.ConsecutiveErrors
	}).(pulumi.IntPtrOutput)
}

// Number of gateway errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput) ConsecutiveGatewayErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.ConsecutiveGatewayErrors
	}).(pulumi.IntPtrOutput)
}

// The number of consecutive locally originated failures before ejection occurs.
func (o DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput) ConsecutiveLocalOriginFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.ConsecutiveLocalOriginFailures
	}).(pulumi.IntPtrOutput)
}

// Time interval between ejection sweep analysis.
func (o DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyOutlierDetection) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// Maximum % of hosts in the load balancing pool for the upstream service that can be ejected.
func (o DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput) MaxEjectionPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.MaxEjectionPercent
	}).(pulumi.IntPtrOutput)
}

// Outlier detection will be enabled as long as the associated load balancing pool has at least min_health_percent hosts in healthy mode.
func (o DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput) MinHealthPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.MinHealthPercent
	}).(pulumi.IntPtrOutput)
}

// Determines whether to distinguish local origin failures from external errors.
func (o DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput) SplitExternalLocalOriginErrors() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyOutlierDetection) *bool {
		if v == nil {
			return nil
		}
		return v.SplitExternalLocalOriginErrors
	}).(pulumi.BoolPtrOutput)
}

type DestinationRuleSpecTrafficPolicyPortLevelSettings struct {
	ConnectionPool *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPool `pulumi:"connectionPool"`
	// Settings controlling the load balancer algorithms.
	LoadBalancer     interface{}                                                        `pulumi:"loadBalancer"`
	OutlierDetection *DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection `pulumi:"outlierDetection"`
	// Specifies the number of a port on the destination service on which this policy is being applied.
	Port *DestinationRuleSpecTrafficPolicyPortLevelSettingsPort `pulumi:"port"`
	// TLS related settings for connections to the upstream service.
	Tls *DestinationRuleSpecTrafficPolicyPortLevelSettingsTls `pulumi:"tls"`
}

// DestinationRuleSpecTrafficPolicyPortLevelSettingsInput is an input type that accepts DestinationRuleSpecTrafficPolicyPortLevelSettingsArgs and DestinationRuleSpecTrafficPolicyPortLevelSettingsOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyPortLevelSettingsInput` via:
//
//	DestinationRuleSpecTrafficPolicyPortLevelSettingsArgs{...}
type DestinationRuleSpecTrafficPolicyPortLevelSettingsInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsOutput
	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsOutput
}

type DestinationRuleSpecTrafficPolicyPortLevelSettingsArgs struct {
	ConnectionPool DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrInput `pulumi:"connectionPool"`
	// Settings controlling the load balancer algorithms.
	LoadBalancer     pulumi.Input                                                              `pulumi:"loadBalancer"`
	OutlierDetection DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrInput `pulumi:"outlierDetection"`
	// Specifies the number of a port on the destination service on which this policy is being applied.
	Port DestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrInput `pulumi:"port"`
	// TLS related settings for connections to the upstream service.
	Tls DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrInput `pulumi:"tls"`
}

func (DestinationRuleSpecTrafficPolicyPortLevelSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettings)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsArgs) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsOutput {
	return i.ToDestinationRuleSpecTrafficPolicyPortLevelSettingsOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsArgs) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyPortLevelSettingsOutput)
}

// DestinationRuleSpecTrafficPolicyPortLevelSettingsArrayInput is an input type that accepts DestinationRuleSpecTrafficPolicyPortLevelSettingsArray and DestinationRuleSpecTrafficPolicyPortLevelSettingsArrayOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyPortLevelSettingsArrayInput` via:
//
//	DestinationRuleSpecTrafficPolicyPortLevelSettingsArray{ DestinationRuleSpecTrafficPolicyPortLevelSettingsArgs{...} }
type DestinationRuleSpecTrafficPolicyPortLevelSettingsArrayInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsArrayOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsArrayOutput
	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsArrayOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsArrayOutput
}

type DestinationRuleSpecTrafficPolicyPortLevelSettingsArray []DestinationRuleSpecTrafficPolicyPortLevelSettingsInput

func (DestinationRuleSpecTrafficPolicyPortLevelSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DestinationRuleSpecTrafficPolicyPortLevelSettings)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsArray) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsArrayOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsArrayOutput {
	return i.ToDestinationRuleSpecTrafficPolicyPortLevelSettingsArrayOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsArray) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsArrayOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyPortLevelSettingsArrayOutput)
}

type DestinationRuleSpecTrafficPolicyPortLevelSettingsOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyPortLevelSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettings)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutput) ConnectionPool() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettings) *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPool {
		return v.ConnectionPool
	}).(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput)
}

// Settings controlling the load balancer algorithms.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutput) LoadBalancer() pulumi.AnyOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettings) interface{} { return v.LoadBalancer }).(pulumi.AnyOutput)
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutput) OutlierDetection() DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettings) *DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection {
		return v.OutlierDetection
	}).(DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput)
}

// Specifies the number of a port on the destination service on which this policy is being applied.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutput) Port() DestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettings) *DestinationRuleSpecTrafficPolicyPortLevelSettingsPort {
		return v.Port
	}).(DestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutput)
}

// TLS related settings for connections to the upstream service.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutput) Tls() DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettings) *DestinationRuleSpecTrafficPolicyPortLevelSettingsTls {
		return v.Tls
	}).(DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput)
}

type DestinationRuleSpecTrafficPolicyPortLevelSettingsArrayOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyPortLevelSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DestinationRuleSpecTrafficPolicyPortLevelSettings)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsArrayOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsArrayOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsArrayOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsArrayOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsArrayOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsArrayOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsArrayOutput) Index(i pulumi.IntInput) DestinationRuleSpecTrafficPolicyPortLevelSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DestinationRuleSpecTrafficPolicyPortLevelSettings {
		return vs[0].([]DestinationRuleSpecTrafficPolicyPortLevelSettings)[vs[1].(int)]
	}).(DestinationRuleSpecTrafficPolicyPortLevelSettingsOutput)
}

type DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPool struct {
	// HTTP connection pool settings.
	Http *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp `pulumi:"http"`
	// Settings common to both HTTP and TCP upstream connections.
	Tcp *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp `pulumi:"tcp"`
}

// DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolInput is an input type that accepts DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolArgs and DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolInput` via:
//
//	DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolArgs{...}
type DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolOutput
	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolOutput
}

type DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolArgs struct {
	// HTTP connection pool settings.
	Http DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrInput `pulumi:"http"`
	// Settings common to both HTTP and TCP upstream connections.
	Tcp DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrInput `pulumi:"tcp"`
}

func (DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPool)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolArgs) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolOutput {
	return i.ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolArgs) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolOutput)
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolArgs) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolArgs) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolOutput).ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrInput is an input type that accepts DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolArgs, DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtr and DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrInput` via:
//
//	        DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput
	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput
}

type destinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrType DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolArgs

func DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtr(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolArgs) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrInput {
	return (*destinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrType)(v)
}

func (*destinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPool)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrType) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrType) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput)
}

type DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPool)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput {
	return o.ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPool) *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPool {
		return &v
	}).(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput)
}

// HTTP connection pool settings.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolOutput) Http() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPool) *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp {
		return v.Http
	}).(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolOutput) Tcp() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPool) *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp {
		return v.Tcp
	}).(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput)
}

type DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPool)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput) Elem() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPool) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPool {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPool
		return ret
	}).(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolOutput)
}

// HTTP connection pool settings.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput) Http() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPool) *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp {
		if v == nil {
			return nil
		}
		return v.Http
	}).(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput) Tcp() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPool) *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp {
		if v == nil {
			return nil
		}
		return v.Tcp
	}).(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput)
}

// HTTP connection pool settings.
type DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp struct {
	// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
	//
	// Valid Options: DEFAULT, DO_NOT_UPGRADE, UPGRADE
	H2UpgradePolicy *string `pulumi:"h2UpgradePolicy"`
	// Maximum number of requests that will be queued while waiting for a ready connection pool connection.
	Http1MaxPendingRequests *int `pulumi:"http1MaxPendingRequests"`
	// Maximum number of active requests to a destination.
	Http2MaxRequests *int `pulumi:"http2MaxRequests"`
	// The idle timeout for upstream connection pool connections.
	IdleTimeout *string `pulumi:"idleTimeout"`
	// The maximum number of concurrent streams allowed for a peer on one HTTP/2 connection.
	MaxConcurrentStreams *int `pulumi:"maxConcurrentStreams"`
	// Maximum number of requests per connection to a backend.
	MaxRequestsPerConnection *int `pulumi:"maxRequestsPerConnection"`
	// Maximum number of retries that can be outstanding to all hosts in a cluster at a given time.
	MaxRetries *int `pulumi:"maxRetries"`
	// If set to true, client protocol will be preserved while initiating connection to backend.
	UseClientProtocol *bool `pulumi:"useClientProtocol"`
}

// DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpInput is an input type that accepts DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpArgs and DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpInput` via:
//
//	DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpArgs{...}
type DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput
	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput
}

// HTTP connection pool settings.
type DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpArgs struct {
	// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
	//
	// Valid Options: DEFAULT, DO_NOT_UPGRADE, UPGRADE
	H2UpgradePolicy pulumi.StringPtrInput `pulumi:"h2UpgradePolicy"`
	// Maximum number of requests that will be queued while waiting for a ready connection pool connection.
	Http1MaxPendingRequests pulumi.IntPtrInput `pulumi:"http1MaxPendingRequests"`
	// Maximum number of active requests to a destination.
	Http2MaxRequests pulumi.IntPtrInput `pulumi:"http2MaxRequests"`
	// The idle timeout for upstream connection pool connections.
	IdleTimeout pulumi.StringPtrInput `pulumi:"idleTimeout"`
	// The maximum number of concurrent streams allowed for a peer on one HTTP/2 connection.
	MaxConcurrentStreams pulumi.IntPtrInput `pulumi:"maxConcurrentStreams"`
	// Maximum number of requests per connection to a backend.
	MaxRequestsPerConnection pulumi.IntPtrInput `pulumi:"maxRequestsPerConnection"`
	// Maximum number of retries that can be outstanding to all hosts in a cluster at a given time.
	MaxRetries pulumi.IntPtrInput `pulumi:"maxRetries"`
	// If set to true, client protocol will be preserved while initiating connection to backend.
	UseClientProtocol pulumi.BoolPtrInput `pulumi:"useClientProtocol"`
}

func (DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpArgs) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput {
	return i.ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpArgs) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput)
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpArgs) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpArgs) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput).ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrInput is an input type that accepts DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpArgs, DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtr and DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrInput` via:
//
//	        DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput
	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput
}

type destinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrType DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpArgs

func DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtr(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpArgs) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrInput {
	return (*destinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrType)(v)
}

func (*destinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrType) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrType) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput)
}

// HTTP connection pool settings.
type DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput {
	return o.ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp) *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp {
		return &v
	}).(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput)
}

// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
//
// Valid Options: DEFAULT, DO_NOT_UPGRADE, UPGRADE
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput) H2UpgradePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp) *string {
		return v.H2UpgradePolicy
	}).(pulumi.StringPtrOutput)
}

// Maximum number of requests that will be queued while waiting for a ready connection pool connection.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput) Http1MaxPendingRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp) *int {
		return v.Http1MaxPendingRequests
	}).(pulumi.IntPtrOutput)
}

// Maximum number of active requests to a destination.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput) Http2MaxRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp) *int {
		return v.Http2MaxRequests
	}).(pulumi.IntPtrOutput)
}

// The idle timeout for upstream connection pool connections.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp) *string {
		return v.IdleTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum number of concurrent streams allowed for a peer on one HTTP/2 connection.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput) MaxConcurrentStreams() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp) *int {
		return v.MaxConcurrentStreams
	}).(pulumi.IntPtrOutput)
}

// Maximum number of requests per connection to a backend.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput) MaxRequestsPerConnection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp) *int {
		return v.MaxRequestsPerConnection
	}).(pulumi.IntPtrOutput)
}

// Maximum number of retries that can be outstanding to all hosts in a cluster at a given time.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp) *int { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

// If set to true, client protocol will be preserved while initiating connection to backend.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput) UseClientProtocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp) *bool {
		return v.UseClientProtocol
	}).(pulumi.BoolPtrOutput)
}

type DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput) Elem() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp
		return ret
	}).(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput)
}

// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
//
// Valid Options: DEFAULT, DO_NOT_UPGRADE, UPGRADE
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput) H2UpgradePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp) *string {
		if v == nil {
			return nil
		}
		return v.H2UpgradePolicy
	}).(pulumi.StringPtrOutput)
}

// Maximum number of requests that will be queued while waiting for a ready connection pool connection.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput) Http1MaxPendingRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.Http1MaxPendingRequests
	}).(pulumi.IntPtrOutput)
}

// Maximum number of active requests to a destination.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput) Http2MaxRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.Http2MaxRequests
	}).(pulumi.IntPtrOutput)
}

// The idle timeout for upstream connection pool connections.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp) *string {
		if v == nil {
			return nil
		}
		return v.IdleTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum number of concurrent streams allowed for a peer on one HTTP/2 connection.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput) MaxConcurrentStreams() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentStreams
	}).(pulumi.IntPtrOutput)
}

// Maximum number of requests per connection to a backend.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput) MaxRequestsPerConnection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.MaxRequestsPerConnection
	}).(pulumi.IntPtrOutput)
}

// Maximum number of retries that can be outstanding to all hosts in a cluster at a given time.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

// If set to true, client protocol will be preserved while initiating connection to backend.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput) UseClientProtocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttp) *bool {
		if v == nil {
			return nil
		}
		return v.UseClientProtocol
	}).(pulumi.BoolPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
type DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp struct {
	// TCP connection timeout.
	ConnectTimeout *string `pulumi:"connectTimeout"`
	// The idle timeout for TCP connections.
	IdleTimeout *string `pulumi:"idleTimeout"`
	// The maximum duration of a connection.
	MaxConnectionDuration *string `pulumi:"maxConnectionDuration"`
	// Maximum number of HTTP1 /TCP connections to a destination host.
	MaxConnections *int `pulumi:"maxConnections"`
	// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
	TcpKeepalive *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive `pulumi:"tcpKeepalive"`
}

// DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpInput is an input type that accepts DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpArgs and DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpInput` via:
//
//	DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpArgs{...}
type DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput
	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput
}

// Settings common to both HTTP and TCP upstream connections.
type DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpArgs struct {
	// TCP connection timeout.
	ConnectTimeout pulumi.StringPtrInput `pulumi:"connectTimeout"`
	// The idle timeout for TCP connections.
	IdleTimeout pulumi.StringPtrInput `pulumi:"idleTimeout"`
	// The maximum duration of a connection.
	MaxConnectionDuration pulumi.StringPtrInput `pulumi:"maxConnectionDuration"`
	// Maximum number of HTTP1 /TCP connections to a destination host.
	MaxConnections pulumi.IntPtrInput `pulumi:"maxConnections"`
	// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
	TcpKeepalive DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrInput `pulumi:"tcpKeepalive"`
}

func (DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpArgs) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput {
	return i.ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpArgs) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput)
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpArgs) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpArgs) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput).ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrInput is an input type that accepts DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpArgs, DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtr and DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrInput` via:
//
//	        DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput
	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput
}

type destinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrType DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpArgs

func DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtr(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpArgs) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrInput {
	return (*destinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrType)(v)
}

func (*destinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrType) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrType) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
type DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput {
	return o.ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp) *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp {
		return &v
	}).(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput)
}

// TCP connection timeout.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput) ConnectTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp) *string {
		return v.ConnectTimeout
	}).(pulumi.StringPtrOutput)
}

// The idle timeout for TCP connections.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp) *string {
		return v.IdleTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum duration of a connection.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput) MaxConnectionDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp) *string {
		return v.MaxConnectionDuration
	}).(pulumi.StringPtrOutput)
}

// Maximum number of HTTP1 /TCP connections to a destination host.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp) *int {
		return v.MaxConnections
	}).(pulumi.IntPtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput) TcpKeepalive() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp) *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive {
		return v.TcpKeepalive
	}).(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput)
}

type DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput) Elem() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp
		return ret
	}).(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput)
}

// TCP connection timeout.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput) ConnectTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp) *string {
		if v == nil {
			return nil
		}
		return v.ConnectTimeout
	}).(pulumi.StringPtrOutput)
}

// The idle timeout for TCP connections.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp) *string {
		if v == nil {
			return nil
		}
		return v.IdleTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum duration of a connection.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput) MaxConnectionDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp) *string {
		if v == nil {
			return nil
		}
		return v.MaxConnectionDuration
	}).(pulumi.StringPtrOutput)
}

// Maximum number of HTTP1 /TCP connections to a destination host.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnections
	}).(pulumi.IntPtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput) TcpKeepalive() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcp) *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive {
		if v == nil {
			return nil
		}
		return v.TcpKeepalive
	}).(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
type DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive struct {
	// The time duration between keep-alive probes.
	Interval *string `pulumi:"interval"`
	// Maximum number of keepalive probes to send without response before deciding the connection is dead.
	Probes *int `pulumi:"probes"`
	// The time duration a connection needs to be idle before keep-alive probes start being sent.
	Time *string `pulumi:"time"`
}

// DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveInput is an input type that accepts DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveArgs and DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveInput` via:
//
//	DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveArgs{...}
type DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput
	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
type DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveArgs struct {
	// The time duration between keep-alive probes.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// Maximum number of keepalive probes to send without response before deciding the connection is dead.
	Probes pulumi.IntPtrInput `pulumi:"probes"`
	// The time duration a connection needs to be idle before keep-alive probes start being sent.
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveArgs) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput {
	return i.ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveArgs) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput)
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveArgs) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveArgs) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput).ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrInput is an input type that accepts DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveArgs, DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtr and DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrInput` via:
//
//	        DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput
	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput
}

type destinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrType DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveArgs

func DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtr(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveArgs) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrInput {
	return (*destinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrType)(v)
}

func (*destinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrType) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrType) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
type DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput {
	return o.ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive) *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive {
		return &v
	}).(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput)
}

// The time duration between keep-alive probes.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive) *string {
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// Maximum number of keepalive probes to send without response before deciding the connection is dead.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput) Probes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive) *int {
		return v.Probes
	}).(pulumi.IntPtrOutput)
}

// The time duration a connection needs to be idle before keep-alive probes start being sent.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive) *string {
		return v.Time
	}).(pulumi.StringPtrOutput)
}

type DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput) Elem() DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive) DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive
		return ret
	}).(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput)
}

// The time duration between keep-alive probes.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// Maximum number of keepalive probes to send without response before deciding the connection is dead.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput) Probes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive) *int {
		if v == nil {
			return nil
		}
		return v.Probes
	}).(pulumi.IntPtrOutput)
}

// The time duration a connection needs to be idle before keep-alive probes start being sent.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalive) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

type DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection struct {
	// Minimum ejection duration.
	BaseEjectionTime *string `pulumi:"baseEjectionTime"`
	// Number of 5xx errors before a host is ejected from the connection pool.
	Consecutive5xxErrors *int `pulumi:"consecutive5xxErrors"`
	ConsecutiveErrors    *int `pulumi:"consecutiveErrors"`
	// Number of gateway errors before a host is ejected from the connection pool.
	ConsecutiveGatewayErrors *int `pulumi:"consecutiveGatewayErrors"`
	// The number of consecutive locally originated failures before ejection occurs.
	ConsecutiveLocalOriginFailures *int `pulumi:"consecutiveLocalOriginFailures"`
	// Time interval between ejection sweep analysis.
	Interval *string `pulumi:"interval"`
	// Maximum % of hosts in the load balancing pool for the upstream service that can be ejected.
	MaxEjectionPercent *int `pulumi:"maxEjectionPercent"`
	// Outlier detection will be enabled as long as the associated load balancing pool has at least min_health_percent hosts in healthy mode.
	MinHealthPercent *int `pulumi:"minHealthPercent"`
	// Determines whether to distinguish local origin failures from external errors.
	SplitExternalLocalOriginErrors *bool `pulumi:"splitExternalLocalOriginErrors"`
}

// DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionInput is an input type that accepts DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionArgs and DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionInput` via:
//
//	DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionArgs{...}
type DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutput
	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutput
}

type DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionArgs struct {
	// Minimum ejection duration.
	BaseEjectionTime pulumi.StringPtrInput `pulumi:"baseEjectionTime"`
	// Number of 5xx errors before a host is ejected from the connection pool.
	Consecutive5xxErrors pulumi.IntPtrInput `pulumi:"consecutive5xxErrors"`
	ConsecutiveErrors    pulumi.IntPtrInput `pulumi:"consecutiveErrors"`
	// Number of gateway errors before a host is ejected from the connection pool.
	ConsecutiveGatewayErrors pulumi.IntPtrInput `pulumi:"consecutiveGatewayErrors"`
	// The number of consecutive locally originated failures before ejection occurs.
	ConsecutiveLocalOriginFailures pulumi.IntPtrInput `pulumi:"consecutiveLocalOriginFailures"`
	// Time interval between ejection sweep analysis.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// Maximum % of hosts in the load balancing pool for the upstream service that can be ejected.
	MaxEjectionPercent pulumi.IntPtrInput `pulumi:"maxEjectionPercent"`
	// Outlier detection will be enabled as long as the associated load balancing pool has at least min_health_percent hosts in healthy mode.
	MinHealthPercent pulumi.IntPtrInput `pulumi:"minHealthPercent"`
	// Determines whether to distinguish local origin failures from external errors.
	SplitExternalLocalOriginErrors pulumi.BoolPtrInput `pulumi:"splitExternalLocalOriginErrors"`
}

func (DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionArgs) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutput {
	return i.ToDestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionArgs) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutput)
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionArgs) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionArgs) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutput).ToDestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrInput is an input type that accepts DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionArgs, DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtr and DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrInput` via:
//
//	        DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput
	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput
}

type destinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrType DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionArgs

func DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtr(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionArgs) DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrInput {
	return (*destinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrType)(v)
}

func (*destinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrType) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrType) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput)
}

type DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput {
	return o.ToDestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection) *DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection {
		return &v
	}).(DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput)
}

// Minimum ejection duration.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutput) BaseEjectionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection) *string {
		return v.BaseEjectionTime
	}).(pulumi.StringPtrOutput)
}

// Number of 5xx errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutput) Consecutive5xxErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection) *int {
		return v.Consecutive5xxErrors
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutput) ConsecutiveErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection) *int {
		return v.ConsecutiveErrors
	}).(pulumi.IntPtrOutput)
}

// Number of gateway errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutput) ConsecutiveGatewayErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection) *int {
		return v.ConsecutiveGatewayErrors
	}).(pulumi.IntPtrOutput)
}

// The number of consecutive locally originated failures before ejection occurs.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutput) ConsecutiveLocalOriginFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection) *int {
		return v.ConsecutiveLocalOriginFailures
	}).(pulumi.IntPtrOutput)
}

// Time interval between ejection sweep analysis.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// Maximum % of hosts in the load balancing pool for the upstream service that can be ejected.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutput) MaxEjectionPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection) *int {
		return v.MaxEjectionPercent
	}).(pulumi.IntPtrOutput)
}

// Outlier detection will be enabled as long as the associated load balancing pool has at least min_health_percent hosts in healthy mode.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutput) MinHealthPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection) *int {
		return v.MinHealthPercent
	}).(pulumi.IntPtrOutput)
}

// Determines whether to distinguish local origin failures from external errors.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutput) SplitExternalLocalOriginErrors() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection) *bool {
		return v.SplitExternalLocalOriginErrors
	}).(pulumi.BoolPtrOutput)
}

type DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput) Elem() DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection) DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection
		return ret
	}).(DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutput)
}

// Minimum ejection duration.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput) BaseEjectionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection) *string {
		if v == nil {
			return nil
		}
		return v.BaseEjectionTime
	}).(pulumi.StringPtrOutput)
}

// Number of 5xx errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput) Consecutive5xxErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.Consecutive5xxErrors
	}).(pulumi.IntPtrOutput)
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput) ConsecutiveErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.ConsecutiveErrors
	}).(pulumi.IntPtrOutput)
}

// Number of gateway errors before a host is ejected from the connection pool.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput) ConsecutiveGatewayErrors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.ConsecutiveGatewayErrors
	}).(pulumi.IntPtrOutput)
}

// The number of consecutive locally originated failures before ejection occurs.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput) ConsecutiveLocalOriginFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.ConsecutiveLocalOriginFailures
	}).(pulumi.IntPtrOutput)
}

// Time interval between ejection sweep analysis.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// Maximum % of hosts in the load balancing pool for the upstream service that can be ejected.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput) MaxEjectionPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.MaxEjectionPercent
	}).(pulumi.IntPtrOutput)
}

// Outlier detection will be enabled as long as the associated load balancing pool has at least min_health_percent hosts in healthy mode.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput) MinHealthPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection) *int {
		if v == nil {
			return nil
		}
		return v.MinHealthPercent
	}).(pulumi.IntPtrOutput)
}

// Determines whether to distinguish local origin failures from external errors.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput) SplitExternalLocalOriginErrors() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetection) *bool {
		if v == nil {
			return nil
		}
		return v.SplitExternalLocalOriginErrors
	}).(pulumi.BoolPtrOutput)
}

// Specifies the number of a port on the destination service on which this policy is being applied.
type DestinationRuleSpecTrafficPolicyPortLevelSettingsPort struct {
	Number *int `pulumi:"number"`
}

// DestinationRuleSpecTrafficPolicyPortLevelSettingsPortInput is an input type that accepts DestinationRuleSpecTrafficPolicyPortLevelSettingsPortArgs and DestinationRuleSpecTrafficPolicyPortLevelSettingsPortOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyPortLevelSettingsPortInput` via:
//
//	DestinationRuleSpecTrafficPolicyPortLevelSettingsPortArgs{...}
type DestinationRuleSpecTrafficPolicyPortLevelSettingsPortInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsPortOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsPortOutput
	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsPortOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsPortOutput
}

// Specifies the number of a port on the destination service on which this policy is being applied.
type DestinationRuleSpecTrafficPolicyPortLevelSettingsPortArgs struct {
	Number pulumi.IntPtrInput `pulumi:"number"`
}

func (DestinationRuleSpecTrafficPolicyPortLevelSettingsPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettingsPort)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsPortArgs) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsPortOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsPortOutput {
	return i.ToDestinationRuleSpecTrafficPolicyPortLevelSettingsPortOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsPortArgs) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsPortOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyPortLevelSettingsPortOutput)
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsPortArgs) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsPortArgs) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyPortLevelSettingsPortOutput).ToDestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrInput is an input type that accepts DestinationRuleSpecTrafficPolicyPortLevelSettingsPortArgs, DestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtr and DestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrInput` via:
//
//	        DestinationRuleSpecTrafficPolicyPortLevelSettingsPortArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutput
	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutput
}

type destinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrType DestinationRuleSpecTrafficPolicyPortLevelSettingsPortArgs

func DestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtr(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsPortArgs) DestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrInput {
	return (*destinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrType)(v)
}

func (*destinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicyPortLevelSettingsPort)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrType) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrType) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutput)
}

// Specifies the number of a port on the destination service on which this policy is being applied.
type DestinationRuleSpecTrafficPolicyPortLevelSettingsPortOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyPortLevelSettingsPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettingsPort)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsPortOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsPortOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsPortOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsPortOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsPortOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsPortOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsPortOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutput {
	return o.ToDestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsPortOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficPolicyPortLevelSettingsPort) *DestinationRuleSpecTrafficPolicyPortLevelSettingsPort {
		return &v
	}).(DestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutput)
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsPortOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsPort) *int { return v.Number }).(pulumi.IntPtrOutput)
}

type DestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicyPortLevelSettingsPort)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutput) Elem() DestinationRuleSpecTrafficPolicyPortLevelSettingsPortOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsPort) DestinationRuleSpecTrafficPolicyPortLevelSettingsPort {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficPolicyPortLevelSettingsPort
		return ret
	}).(DestinationRuleSpecTrafficPolicyPortLevelSettingsPortOutput)
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsPort) *int {
		if v == nil {
			return nil
		}
		return v.Number
	}).(pulumi.IntPtrOutput)
}

// TLS related settings for connections to the upstream service.
type DestinationRuleSpecTrafficPolicyPortLevelSettingsTls struct {
	// OPTIONAL: The path to the file containing certificate authority certificates to use in verifying a presented server certificate.
	CaCertificates *string `pulumi:"caCertificates"`
	// OPTIONAL: The path to the file containing the certificate revocation list (CRL) to use in verifying a presented server certificate.
	CaCrl *string `pulumi:"caCrl"`
	// REQUIRED if mode is `MUTUAL`.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// The name of the secret that holds the TLS certs for the client including the CA certificates.
	CredentialName *string `pulumi:"credentialName"`
	// `insecureSkipVerify` specifies whether the proxy should skip verifying the CA signature and SAN for the server certificate corresponding to the host.
	InsecureSkipVerify *bool `pulumi:"insecureSkipVerify"`
	// Indicates whether connections to this port should be secured using TLS.
	//
	// Valid Options: DISABLE, SIMPLE, MUTUAL, ISTIO_MUTUAL
	Mode *string `pulumi:"mode"`
	// REQUIRED if mode is `MUTUAL`.
	PrivateKey *string `pulumi:"privateKey"`
	// SNI string to present to the server during TLS handshake.
	Sni *string `pulumi:"sni"`
	// A list of alternate names to verify the subject identity in the certificate.
	SubjectAltNames []string `pulumi:"subjectAltNames"`
}

// DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsInput is an input type that accepts DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsArgs and DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsInput` via:
//
//	DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsArgs{...}
type DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutput
	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutput
}

// TLS related settings for connections to the upstream service.
type DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsArgs struct {
	// OPTIONAL: The path to the file containing certificate authority certificates to use in verifying a presented server certificate.
	CaCertificates pulumi.StringPtrInput `pulumi:"caCertificates"`
	// OPTIONAL: The path to the file containing the certificate revocation list (CRL) to use in verifying a presented server certificate.
	CaCrl pulumi.StringPtrInput `pulumi:"caCrl"`
	// REQUIRED if mode is `MUTUAL`.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// The name of the secret that holds the TLS certs for the client including the CA certificates.
	CredentialName pulumi.StringPtrInput `pulumi:"credentialName"`
	// `insecureSkipVerify` specifies whether the proxy should skip verifying the CA signature and SAN for the server certificate corresponding to the host.
	InsecureSkipVerify pulumi.BoolPtrInput `pulumi:"insecureSkipVerify"`
	// Indicates whether connections to this port should be secured using TLS.
	//
	// Valid Options: DISABLE, SIMPLE, MUTUAL, ISTIO_MUTUAL
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// REQUIRED if mode is `MUTUAL`.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// SNI string to present to the server during TLS handshake.
	Sni pulumi.StringPtrInput `pulumi:"sni"`
	// A list of alternate names to verify the subject identity in the certificate.
	SubjectAltNames pulumi.StringArrayInput `pulumi:"subjectAltNames"`
}

func (DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettingsTls)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsArgs) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutput {
	return i.ToDestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsArgs) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutput)
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsArgs) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsArgs) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutput).ToDestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrInput is an input type that accepts DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsArgs, DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtr and DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrInput` via:
//
//	        DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput
	ToDestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput
}

type destinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrType DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsArgs

func DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtr(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsArgs) DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrInput {
	return (*destinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrType)(v)
}

func (*destinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicyPortLevelSettingsTls)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrType) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrType) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput)
}

// TLS related settings for connections to the upstream service.
type DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettingsTls)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput {
	return o.ToDestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficPolicyPortLevelSettingsTls) *DestinationRuleSpecTrafficPolicyPortLevelSettingsTls {
		return &v
	}).(DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput)
}

// OPTIONAL: The path to the file containing certificate authority certificates to use in verifying a presented server certificate.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutput) CaCertificates() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsTls) *string { return v.CaCertificates }).(pulumi.StringPtrOutput)
}

// OPTIONAL: The path to the file containing the certificate revocation list (CRL) to use in verifying a presented server certificate.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutput) CaCrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsTls) *string { return v.CaCrl }).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsTls) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// The name of the secret that holds the TLS certs for the client including the CA certificates.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutput) CredentialName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsTls) *string { return v.CredentialName }).(pulumi.StringPtrOutput)
}

// `insecureSkipVerify` specifies whether the proxy should skip verifying the CA signature and SAN for the server certificate corresponding to the host.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsTls) *bool { return v.InsecureSkipVerify }).(pulumi.BoolPtrOutput)
}

// Indicates whether connections to this port should be secured using TLS.
//
// Valid Options: DISABLE, SIMPLE, MUTUAL, ISTIO_MUTUAL
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsTls) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsTls) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// SNI string to present to the server during TLS handshake.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutput) Sni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsTls) *string { return v.Sni }).(pulumi.StringPtrOutput)
}

// A list of alternate names to verify the subject identity in the certificate.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyPortLevelSettingsTls) []string { return v.SubjectAltNames }).(pulumi.StringArrayOutput)
}

type DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicyPortLevelSettingsTls)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput() DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput) ToDestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput) Elem() DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsTls) DestinationRuleSpecTrafficPolicyPortLevelSettingsTls {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficPolicyPortLevelSettingsTls
		return ret
	}).(DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutput)
}

// OPTIONAL: The path to the file containing certificate authority certificates to use in verifying a presented server certificate.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput) CaCertificates() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsTls) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificates
	}).(pulumi.StringPtrOutput)
}

// OPTIONAL: The path to the file containing the certificate revocation list (CRL) to use in verifying a presented server certificate.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput) CaCrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsTls) *string {
		if v == nil {
			return nil
		}
		return v.CaCrl
	}).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsTls) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

// The name of the secret that holds the TLS certs for the client including the CA certificates.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput) CredentialName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsTls) *string {
		if v == nil {
			return nil
		}
		return v.CredentialName
	}).(pulumi.StringPtrOutput)
}

// `insecureSkipVerify` specifies whether the proxy should skip verifying the CA signature and SAN for the server certificate corresponding to the host.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsTls) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureSkipVerify
	}).(pulumi.BoolPtrOutput)
}

// Indicates whether connections to this port should be secured using TLS.
//
// Valid Options: DISABLE, SIMPLE, MUTUAL, ISTIO_MUTUAL
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsTls) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsTls) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// SNI string to present to the server during TLS handshake.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput) Sni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsTls) *string {
		if v == nil {
			return nil
		}
		return v.Sni
	}).(pulumi.StringPtrOutput)
}

// A list of alternate names to verify the subject identity in the certificate.
func (o DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyPortLevelSettingsTls) []string {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(pulumi.StringArrayOutput)
}

// The upstream PROXY protocol settings.
type DestinationRuleSpecTrafficPolicyProxyProtocol struct {
	// The PROXY protocol version to use.
	//
	// Valid Options: V1, V2
	Version *string `pulumi:"version"`
}

// DestinationRuleSpecTrafficPolicyProxyProtocolInput is an input type that accepts DestinationRuleSpecTrafficPolicyProxyProtocolArgs and DestinationRuleSpecTrafficPolicyProxyProtocolOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyProxyProtocolInput` via:
//
//	DestinationRuleSpecTrafficPolicyProxyProtocolArgs{...}
type DestinationRuleSpecTrafficPolicyProxyProtocolInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyProxyProtocolOutput() DestinationRuleSpecTrafficPolicyProxyProtocolOutput
	ToDestinationRuleSpecTrafficPolicyProxyProtocolOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyProxyProtocolOutput
}

// The upstream PROXY protocol settings.
type DestinationRuleSpecTrafficPolicyProxyProtocolArgs struct {
	// The PROXY protocol version to use.
	//
	// Valid Options: V1, V2
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (DestinationRuleSpecTrafficPolicyProxyProtocolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyProxyProtocol)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficPolicyProxyProtocolArgs) ToDestinationRuleSpecTrafficPolicyProxyProtocolOutput() DestinationRuleSpecTrafficPolicyProxyProtocolOutput {
	return i.ToDestinationRuleSpecTrafficPolicyProxyProtocolOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyProxyProtocolArgs) ToDestinationRuleSpecTrafficPolicyProxyProtocolOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyProxyProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyProxyProtocolOutput)
}

func (i DestinationRuleSpecTrafficPolicyProxyProtocolArgs) ToDestinationRuleSpecTrafficPolicyProxyProtocolPtrOutput() DestinationRuleSpecTrafficPolicyProxyProtocolPtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyProxyProtocolPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyProxyProtocolArgs) ToDestinationRuleSpecTrafficPolicyProxyProtocolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyProxyProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyProxyProtocolOutput).ToDestinationRuleSpecTrafficPolicyProxyProtocolPtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficPolicyProxyProtocolPtrInput is an input type that accepts DestinationRuleSpecTrafficPolicyProxyProtocolArgs, DestinationRuleSpecTrafficPolicyProxyProtocolPtr and DestinationRuleSpecTrafficPolicyProxyProtocolPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyProxyProtocolPtrInput` via:
//
//	        DestinationRuleSpecTrafficPolicyProxyProtocolArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficPolicyProxyProtocolPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyProxyProtocolPtrOutput() DestinationRuleSpecTrafficPolicyProxyProtocolPtrOutput
	ToDestinationRuleSpecTrafficPolicyProxyProtocolPtrOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyProxyProtocolPtrOutput
}

type destinationRuleSpecTrafficPolicyProxyProtocolPtrType DestinationRuleSpecTrafficPolicyProxyProtocolArgs

func DestinationRuleSpecTrafficPolicyProxyProtocolPtr(v *DestinationRuleSpecTrafficPolicyProxyProtocolArgs) DestinationRuleSpecTrafficPolicyProxyProtocolPtrInput {
	return (*destinationRuleSpecTrafficPolicyProxyProtocolPtrType)(v)
}

func (*destinationRuleSpecTrafficPolicyProxyProtocolPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicyProxyProtocol)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficPolicyProxyProtocolPtrType) ToDestinationRuleSpecTrafficPolicyProxyProtocolPtrOutput() DestinationRuleSpecTrafficPolicyProxyProtocolPtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyProxyProtocolPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficPolicyProxyProtocolPtrType) ToDestinationRuleSpecTrafficPolicyProxyProtocolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyProxyProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyProxyProtocolPtrOutput)
}

// The upstream PROXY protocol settings.
type DestinationRuleSpecTrafficPolicyProxyProtocolOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyProxyProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyProxyProtocol)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyProxyProtocolOutput) ToDestinationRuleSpecTrafficPolicyProxyProtocolOutput() DestinationRuleSpecTrafficPolicyProxyProtocolOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyProxyProtocolOutput) ToDestinationRuleSpecTrafficPolicyProxyProtocolOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyProxyProtocolOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyProxyProtocolOutput) ToDestinationRuleSpecTrafficPolicyProxyProtocolPtrOutput() DestinationRuleSpecTrafficPolicyProxyProtocolPtrOutput {
	return o.ToDestinationRuleSpecTrafficPolicyProxyProtocolPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficPolicyProxyProtocolOutput) ToDestinationRuleSpecTrafficPolicyProxyProtocolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyProxyProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficPolicyProxyProtocol) *DestinationRuleSpecTrafficPolicyProxyProtocol {
		return &v
	}).(DestinationRuleSpecTrafficPolicyProxyProtocolPtrOutput)
}

// The PROXY protocol version to use.
//
// Valid Options: V1, V2
func (o DestinationRuleSpecTrafficPolicyProxyProtocolOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyProxyProtocol) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type DestinationRuleSpecTrafficPolicyProxyProtocolPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyProxyProtocolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicyProxyProtocol)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyProxyProtocolPtrOutput) ToDestinationRuleSpecTrafficPolicyProxyProtocolPtrOutput() DestinationRuleSpecTrafficPolicyProxyProtocolPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyProxyProtocolPtrOutput) ToDestinationRuleSpecTrafficPolicyProxyProtocolPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyProxyProtocolPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyProxyProtocolPtrOutput) Elem() DestinationRuleSpecTrafficPolicyProxyProtocolOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyProxyProtocol) DestinationRuleSpecTrafficPolicyProxyProtocol {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficPolicyProxyProtocol
		return ret
	}).(DestinationRuleSpecTrafficPolicyProxyProtocolOutput)
}

// The PROXY protocol version to use.
//
// Valid Options: V1, V2
func (o DestinationRuleSpecTrafficPolicyProxyProtocolPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyProxyProtocol) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// TLS related settings for connections to the upstream service.
type DestinationRuleSpecTrafficPolicyTls struct {
	// OPTIONAL: The path to the file containing certificate authority certificates to use in verifying a presented server certificate.
	CaCertificates *string `pulumi:"caCertificates"`
	// OPTIONAL: The path to the file containing the certificate revocation list (CRL) to use in verifying a presented server certificate.
	CaCrl *string `pulumi:"caCrl"`
	// REQUIRED if mode is `MUTUAL`.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// The name of the secret that holds the TLS certs for the client including the CA certificates.
	CredentialName *string `pulumi:"credentialName"`
	// `insecureSkipVerify` specifies whether the proxy should skip verifying the CA signature and SAN for the server certificate corresponding to the host.
	InsecureSkipVerify *bool `pulumi:"insecureSkipVerify"`
	// Indicates whether connections to this port should be secured using TLS.
	//
	// Valid Options: DISABLE, SIMPLE, MUTUAL, ISTIO_MUTUAL
	Mode *string `pulumi:"mode"`
	// REQUIRED if mode is `MUTUAL`.
	PrivateKey *string `pulumi:"privateKey"`
	// SNI string to present to the server during TLS handshake.
	Sni *string `pulumi:"sni"`
	// A list of alternate names to verify the subject identity in the certificate.
	SubjectAltNames []string `pulumi:"subjectAltNames"`
}

// DestinationRuleSpecTrafficPolicyTlsInput is an input type that accepts DestinationRuleSpecTrafficPolicyTlsArgs and DestinationRuleSpecTrafficPolicyTlsOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyTlsInput` via:
//
//	DestinationRuleSpecTrafficPolicyTlsArgs{...}
type DestinationRuleSpecTrafficPolicyTlsInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyTlsOutput() DestinationRuleSpecTrafficPolicyTlsOutput
	ToDestinationRuleSpecTrafficPolicyTlsOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyTlsOutput
}

// TLS related settings for connections to the upstream service.
type DestinationRuleSpecTrafficPolicyTlsArgs struct {
	// OPTIONAL: The path to the file containing certificate authority certificates to use in verifying a presented server certificate.
	CaCertificates pulumi.StringPtrInput `pulumi:"caCertificates"`
	// OPTIONAL: The path to the file containing the certificate revocation list (CRL) to use in verifying a presented server certificate.
	CaCrl pulumi.StringPtrInput `pulumi:"caCrl"`
	// REQUIRED if mode is `MUTUAL`.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// The name of the secret that holds the TLS certs for the client including the CA certificates.
	CredentialName pulumi.StringPtrInput `pulumi:"credentialName"`
	// `insecureSkipVerify` specifies whether the proxy should skip verifying the CA signature and SAN for the server certificate corresponding to the host.
	InsecureSkipVerify pulumi.BoolPtrInput `pulumi:"insecureSkipVerify"`
	// Indicates whether connections to this port should be secured using TLS.
	//
	// Valid Options: DISABLE, SIMPLE, MUTUAL, ISTIO_MUTUAL
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// REQUIRED if mode is `MUTUAL`.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// SNI string to present to the server during TLS handshake.
	Sni pulumi.StringPtrInput `pulumi:"sni"`
	// A list of alternate names to verify the subject identity in the certificate.
	SubjectAltNames pulumi.StringArrayInput `pulumi:"subjectAltNames"`
}

func (DestinationRuleSpecTrafficPolicyTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyTls)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficPolicyTlsArgs) ToDestinationRuleSpecTrafficPolicyTlsOutput() DestinationRuleSpecTrafficPolicyTlsOutput {
	return i.ToDestinationRuleSpecTrafficPolicyTlsOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyTlsArgs) ToDestinationRuleSpecTrafficPolicyTlsOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyTlsOutput)
}

func (i DestinationRuleSpecTrafficPolicyTlsArgs) ToDestinationRuleSpecTrafficPolicyTlsPtrOutput() DestinationRuleSpecTrafficPolicyTlsPtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyTlsPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyTlsArgs) ToDestinationRuleSpecTrafficPolicyTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyTlsOutput).ToDestinationRuleSpecTrafficPolicyTlsPtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficPolicyTlsPtrInput is an input type that accepts DestinationRuleSpecTrafficPolicyTlsArgs, DestinationRuleSpecTrafficPolicyTlsPtr and DestinationRuleSpecTrafficPolicyTlsPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyTlsPtrInput` via:
//
//	        DestinationRuleSpecTrafficPolicyTlsArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficPolicyTlsPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyTlsPtrOutput() DestinationRuleSpecTrafficPolicyTlsPtrOutput
	ToDestinationRuleSpecTrafficPolicyTlsPtrOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyTlsPtrOutput
}

type destinationRuleSpecTrafficPolicyTlsPtrType DestinationRuleSpecTrafficPolicyTlsArgs

func DestinationRuleSpecTrafficPolicyTlsPtr(v *DestinationRuleSpecTrafficPolicyTlsArgs) DestinationRuleSpecTrafficPolicyTlsPtrInput {
	return (*destinationRuleSpecTrafficPolicyTlsPtrType)(v)
}

func (*destinationRuleSpecTrafficPolicyTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicyTls)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficPolicyTlsPtrType) ToDestinationRuleSpecTrafficPolicyTlsPtrOutput() DestinationRuleSpecTrafficPolicyTlsPtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyTlsPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficPolicyTlsPtrType) ToDestinationRuleSpecTrafficPolicyTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyTlsPtrOutput)
}

// TLS related settings for connections to the upstream service.
type DestinationRuleSpecTrafficPolicyTlsOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyTls)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyTlsOutput) ToDestinationRuleSpecTrafficPolicyTlsOutput() DestinationRuleSpecTrafficPolicyTlsOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyTlsOutput) ToDestinationRuleSpecTrafficPolicyTlsOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyTlsOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyTlsOutput) ToDestinationRuleSpecTrafficPolicyTlsPtrOutput() DestinationRuleSpecTrafficPolicyTlsPtrOutput {
	return o.ToDestinationRuleSpecTrafficPolicyTlsPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficPolicyTlsOutput) ToDestinationRuleSpecTrafficPolicyTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyTlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficPolicyTls) *DestinationRuleSpecTrafficPolicyTls {
		return &v
	}).(DestinationRuleSpecTrafficPolicyTlsPtrOutput)
}

// OPTIONAL: The path to the file containing certificate authority certificates to use in verifying a presented server certificate.
func (o DestinationRuleSpecTrafficPolicyTlsOutput) CaCertificates() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyTls) *string { return v.CaCertificates }).(pulumi.StringPtrOutput)
}

// OPTIONAL: The path to the file containing the certificate revocation list (CRL) to use in verifying a presented server certificate.
func (o DestinationRuleSpecTrafficPolicyTlsOutput) CaCrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyTls) *string { return v.CaCrl }).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecTrafficPolicyTlsOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyTls) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// The name of the secret that holds the TLS certs for the client including the CA certificates.
func (o DestinationRuleSpecTrafficPolicyTlsOutput) CredentialName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyTls) *string { return v.CredentialName }).(pulumi.StringPtrOutput)
}

// `insecureSkipVerify` specifies whether the proxy should skip verifying the CA signature and SAN for the server certificate corresponding to the host.
func (o DestinationRuleSpecTrafficPolicyTlsOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyTls) *bool { return v.InsecureSkipVerify }).(pulumi.BoolPtrOutput)
}

// Indicates whether connections to this port should be secured using TLS.
//
// Valid Options: DISABLE, SIMPLE, MUTUAL, ISTIO_MUTUAL
func (o DestinationRuleSpecTrafficPolicyTlsOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyTls) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecTrafficPolicyTlsOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyTls) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// SNI string to present to the server during TLS handshake.
func (o DestinationRuleSpecTrafficPolicyTlsOutput) Sni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyTls) *string { return v.Sni }).(pulumi.StringPtrOutput)
}

// A list of alternate names to verify the subject identity in the certificate.
func (o DestinationRuleSpecTrafficPolicyTlsOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyTls) []string { return v.SubjectAltNames }).(pulumi.StringArrayOutput)
}

type DestinationRuleSpecTrafficPolicyTlsPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicyTls)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyTlsPtrOutput) ToDestinationRuleSpecTrafficPolicyTlsPtrOutput() DestinationRuleSpecTrafficPolicyTlsPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyTlsPtrOutput) ToDestinationRuleSpecTrafficPolicyTlsPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyTlsPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyTlsPtrOutput) Elem() DestinationRuleSpecTrafficPolicyTlsOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyTls) DestinationRuleSpecTrafficPolicyTls {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficPolicyTls
		return ret
	}).(DestinationRuleSpecTrafficPolicyTlsOutput)
}

// OPTIONAL: The path to the file containing certificate authority certificates to use in verifying a presented server certificate.
func (o DestinationRuleSpecTrafficPolicyTlsPtrOutput) CaCertificates() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyTls) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificates
	}).(pulumi.StringPtrOutput)
}

// OPTIONAL: The path to the file containing the certificate revocation list (CRL) to use in verifying a presented server certificate.
func (o DestinationRuleSpecTrafficPolicyTlsPtrOutput) CaCrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyTls) *string {
		if v == nil {
			return nil
		}
		return v.CaCrl
	}).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecTrafficPolicyTlsPtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyTls) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

// The name of the secret that holds the TLS certs for the client including the CA certificates.
func (o DestinationRuleSpecTrafficPolicyTlsPtrOutput) CredentialName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyTls) *string {
		if v == nil {
			return nil
		}
		return v.CredentialName
	}).(pulumi.StringPtrOutput)
}

// `insecureSkipVerify` specifies whether the proxy should skip verifying the CA signature and SAN for the server certificate corresponding to the host.
func (o DestinationRuleSpecTrafficPolicyTlsPtrOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyTls) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureSkipVerify
	}).(pulumi.BoolPtrOutput)
}

// Indicates whether connections to this port should be secured using TLS.
//
// Valid Options: DISABLE, SIMPLE, MUTUAL, ISTIO_MUTUAL
func (o DestinationRuleSpecTrafficPolicyTlsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyTls) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `MUTUAL`.
func (o DestinationRuleSpecTrafficPolicyTlsPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyTls) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// SNI string to present to the server during TLS handshake.
func (o DestinationRuleSpecTrafficPolicyTlsPtrOutput) Sni() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyTls) *string {
		if v == nil {
			return nil
		}
		return v.Sni
	}).(pulumi.StringPtrOutput)
}

// A list of alternate names to verify the subject identity in the certificate.
func (o DestinationRuleSpecTrafficPolicyTlsPtrOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyTls) []string {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(pulumi.StringArrayOutput)
}

// Configuration of tunneling TCP over other transport or application layers for the host configured in the DestinationRule.
type DestinationRuleSpecTrafficPolicyTunnel struct {
	// Specifies which protocol to use for tunneling the downstream connection.
	Protocol *string `pulumi:"protocol"`
	// Specifies a host to which the downstream connection is tunneled.
	TargetHost string `pulumi:"targetHost"`
	// Specifies a port to which the downstream connection is tunneled.
	TargetPort int `pulumi:"targetPort"`
}

// DestinationRuleSpecTrafficPolicyTunnelInput is an input type that accepts DestinationRuleSpecTrafficPolicyTunnelArgs and DestinationRuleSpecTrafficPolicyTunnelOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyTunnelInput` via:
//
//	DestinationRuleSpecTrafficPolicyTunnelArgs{...}
type DestinationRuleSpecTrafficPolicyTunnelInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyTunnelOutput() DestinationRuleSpecTrafficPolicyTunnelOutput
	ToDestinationRuleSpecTrafficPolicyTunnelOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyTunnelOutput
}

// Configuration of tunneling TCP over other transport or application layers for the host configured in the DestinationRule.
type DestinationRuleSpecTrafficPolicyTunnelArgs struct {
	// Specifies which protocol to use for tunneling the downstream connection.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Specifies a host to which the downstream connection is tunneled.
	TargetHost pulumi.StringInput `pulumi:"targetHost"`
	// Specifies a port to which the downstream connection is tunneled.
	TargetPort pulumi.IntInput `pulumi:"targetPort"`
}

func (DestinationRuleSpecTrafficPolicyTunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyTunnel)(nil)).Elem()
}

func (i DestinationRuleSpecTrafficPolicyTunnelArgs) ToDestinationRuleSpecTrafficPolicyTunnelOutput() DestinationRuleSpecTrafficPolicyTunnelOutput {
	return i.ToDestinationRuleSpecTrafficPolicyTunnelOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyTunnelArgs) ToDestinationRuleSpecTrafficPolicyTunnelOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyTunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyTunnelOutput)
}

func (i DestinationRuleSpecTrafficPolicyTunnelArgs) ToDestinationRuleSpecTrafficPolicyTunnelPtrOutput() DestinationRuleSpecTrafficPolicyTunnelPtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyTunnelPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecTrafficPolicyTunnelArgs) ToDestinationRuleSpecTrafficPolicyTunnelPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyTunnelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyTunnelOutput).ToDestinationRuleSpecTrafficPolicyTunnelPtrOutputWithContext(ctx)
}

// DestinationRuleSpecTrafficPolicyTunnelPtrInput is an input type that accepts DestinationRuleSpecTrafficPolicyTunnelArgs, DestinationRuleSpecTrafficPolicyTunnelPtr and DestinationRuleSpecTrafficPolicyTunnelPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecTrafficPolicyTunnelPtrInput` via:
//
//	        DestinationRuleSpecTrafficPolicyTunnelArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecTrafficPolicyTunnelPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecTrafficPolicyTunnelPtrOutput() DestinationRuleSpecTrafficPolicyTunnelPtrOutput
	ToDestinationRuleSpecTrafficPolicyTunnelPtrOutputWithContext(context.Context) DestinationRuleSpecTrafficPolicyTunnelPtrOutput
}

type destinationRuleSpecTrafficPolicyTunnelPtrType DestinationRuleSpecTrafficPolicyTunnelArgs

func DestinationRuleSpecTrafficPolicyTunnelPtr(v *DestinationRuleSpecTrafficPolicyTunnelArgs) DestinationRuleSpecTrafficPolicyTunnelPtrInput {
	return (*destinationRuleSpecTrafficPolicyTunnelPtrType)(v)
}

func (*destinationRuleSpecTrafficPolicyTunnelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicyTunnel)(nil)).Elem()
}

func (i *destinationRuleSpecTrafficPolicyTunnelPtrType) ToDestinationRuleSpecTrafficPolicyTunnelPtrOutput() DestinationRuleSpecTrafficPolicyTunnelPtrOutput {
	return i.ToDestinationRuleSpecTrafficPolicyTunnelPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecTrafficPolicyTunnelPtrType) ToDestinationRuleSpecTrafficPolicyTunnelPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyTunnelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecTrafficPolicyTunnelPtrOutput)
}

// Configuration of tunneling TCP over other transport or application layers for the host configured in the DestinationRule.
type DestinationRuleSpecTrafficPolicyTunnelOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyTunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecTrafficPolicyTunnel)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyTunnelOutput) ToDestinationRuleSpecTrafficPolicyTunnelOutput() DestinationRuleSpecTrafficPolicyTunnelOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyTunnelOutput) ToDestinationRuleSpecTrafficPolicyTunnelOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyTunnelOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyTunnelOutput) ToDestinationRuleSpecTrafficPolicyTunnelPtrOutput() DestinationRuleSpecTrafficPolicyTunnelPtrOutput {
	return o.ToDestinationRuleSpecTrafficPolicyTunnelPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecTrafficPolicyTunnelOutput) ToDestinationRuleSpecTrafficPolicyTunnelPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyTunnelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecTrafficPolicyTunnel) *DestinationRuleSpecTrafficPolicyTunnel {
		return &v
	}).(DestinationRuleSpecTrafficPolicyTunnelPtrOutput)
}

// Specifies which protocol to use for tunneling the downstream connection.
func (o DestinationRuleSpecTrafficPolicyTunnelOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyTunnel) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Specifies a host to which the downstream connection is tunneled.
func (o DestinationRuleSpecTrafficPolicyTunnelOutput) TargetHost() pulumi.StringOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyTunnel) string { return v.TargetHost }).(pulumi.StringOutput)
}

// Specifies a port to which the downstream connection is tunneled.
func (o DestinationRuleSpecTrafficPolicyTunnelOutput) TargetPort() pulumi.IntOutput {
	return o.ApplyT(func(v DestinationRuleSpecTrafficPolicyTunnel) int { return v.TargetPort }).(pulumi.IntOutput)
}

type DestinationRuleSpecTrafficPolicyTunnelPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecTrafficPolicyTunnelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecTrafficPolicyTunnel)(nil)).Elem()
}

func (o DestinationRuleSpecTrafficPolicyTunnelPtrOutput) ToDestinationRuleSpecTrafficPolicyTunnelPtrOutput() DestinationRuleSpecTrafficPolicyTunnelPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyTunnelPtrOutput) ToDestinationRuleSpecTrafficPolicyTunnelPtrOutputWithContext(ctx context.Context) DestinationRuleSpecTrafficPolicyTunnelPtrOutput {
	return o
}

func (o DestinationRuleSpecTrafficPolicyTunnelPtrOutput) Elem() DestinationRuleSpecTrafficPolicyTunnelOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyTunnel) DestinationRuleSpecTrafficPolicyTunnel {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecTrafficPolicyTunnel
		return ret
	}).(DestinationRuleSpecTrafficPolicyTunnelOutput)
}

// Specifies which protocol to use for tunneling the downstream connection.
func (o DestinationRuleSpecTrafficPolicyTunnelPtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyTunnel) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

// Specifies a host to which the downstream connection is tunneled.
func (o DestinationRuleSpecTrafficPolicyTunnelPtrOutput) TargetHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyTunnel) *string {
		if v == nil {
			return nil
		}
		return &v.TargetHost
	}).(pulumi.StringPtrOutput)
}

// Specifies a port to which the downstream connection is tunneled.
func (o DestinationRuleSpecTrafficPolicyTunnelPtrOutput) TargetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DestinationRuleSpecTrafficPolicyTunnel) *int {
		if v == nil {
			return nil
		}
		return &v.TargetPort
	}).(pulumi.IntPtrOutput)
}

// Criteria used to select the specific set of pods/VMs on which this `DestinationRule` configuration should be applied.
type DestinationRuleSpecWorkloadSelector struct {
	// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// DestinationRuleSpecWorkloadSelectorInput is an input type that accepts DestinationRuleSpecWorkloadSelectorArgs and DestinationRuleSpecWorkloadSelectorOutput values.
// You can construct a concrete instance of `DestinationRuleSpecWorkloadSelectorInput` via:
//
//	DestinationRuleSpecWorkloadSelectorArgs{...}
type DestinationRuleSpecWorkloadSelectorInput interface {
	pulumi.Input

	ToDestinationRuleSpecWorkloadSelectorOutput() DestinationRuleSpecWorkloadSelectorOutput
	ToDestinationRuleSpecWorkloadSelectorOutputWithContext(context.Context) DestinationRuleSpecWorkloadSelectorOutput
}

// Criteria used to select the specific set of pods/VMs on which this `DestinationRule` configuration should be applied.
type DestinationRuleSpecWorkloadSelectorArgs struct {
	// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (DestinationRuleSpecWorkloadSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecWorkloadSelector)(nil)).Elem()
}

func (i DestinationRuleSpecWorkloadSelectorArgs) ToDestinationRuleSpecWorkloadSelectorOutput() DestinationRuleSpecWorkloadSelectorOutput {
	return i.ToDestinationRuleSpecWorkloadSelectorOutputWithContext(context.Background())
}

func (i DestinationRuleSpecWorkloadSelectorArgs) ToDestinationRuleSpecWorkloadSelectorOutputWithContext(ctx context.Context) DestinationRuleSpecWorkloadSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecWorkloadSelectorOutput)
}

func (i DestinationRuleSpecWorkloadSelectorArgs) ToDestinationRuleSpecWorkloadSelectorPtrOutput() DestinationRuleSpecWorkloadSelectorPtrOutput {
	return i.ToDestinationRuleSpecWorkloadSelectorPtrOutputWithContext(context.Background())
}

func (i DestinationRuleSpecWorkloadSelectorArgs) ToDestinationRuleSpecWorkloadSelectorPtrOutputWithContext(ctx context.Context) DestinationRuleSpecWorkloadSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecWorkloadSelectorOutput).ToDestinationRuleSpecWorkloadSelectorPtrOutputWithContext(ctx)
}

// DestinationRuleSpecWorkloadSelectorPtrInput is an input type that accepts DestinationRuleSpecWorkloadSelectorArgs, DestinationRuleSpecWorkloadSelectorPtr and DestinationRuleSpecWorkloadSelectorPtrOutput values.
// You can construct a concrete instance of `DestinationRuleSpecWorkloadSelectorPtrInput` via:
//
//	        DestinationRuleSpecWorkloadSelectorArgs{...}
//
//	or:
//
//	        nil
type DestinationRuleSpecWorkloadSelectorPtrInput interface {
	pulumi.Input

	ToDestinationRuleSpecWorkloadSelectorPtrOutput() DestinationRuleSpecWorkloadSelectorPtrOutput
	ToDestinationRuleSpecWorkloadSelectorPtrOutputWithContext(context.Context) DestinationRuleSpecWorkloadSelectorPtrOutput
}

type destinationRuleSpecWorkloadSelectorPtrType DestinationRuleSpecWorkloadSelectorArgs

func DestinationRuleSpecWorkloadSelectorPtr(v *DestinationRuleSpecWorkloadSelectorArgs) DestinationRuleSpecWorkloadSelectorPtrInput {
	return (*destinationRuleSpecWorkloadSelectorPtrType)(v)
}

func (*destinationRuleSpecWorkloadSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecWorkloadSelector)(nil)).Elem()
}

func (i *destinationRuleSpecWorkloadSelectorPtrType) ToDestinationRuleSpecWorkloadSelectorPtrOutput() DestinationRuleSpecWorkloadSelectorPtrOutput {
	return i.ToDestinationRuleSpecWorkloadSelectorPtrOutputWithContext(context.Background())
}

func (i *destinationRuleSpecWorkloadSelectorPtrType) ToDestinationRuleSpecWorkloadSelectorPtrOutputWithContext(ctx context.Context) DestinationRuleSpecWorkloadSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationRuleSpecWorkloadSelectorPtrOutput)
}

// Criteria used to select the specific set of pods/VMs on which this `DestinationRule` configuration should be applied.
type DestinationRuleSpecWorkloadSelectorOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecWorkloadSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationRuleSpecWorkloadSelector)(nil)).Elem()
}

func (o DestinationRuleSpecWorkloadSelectorOutput) ToDestinationRuleSpecWorkloadSelectorOutput() DestinationRuleSpecWorkloadSelectorOutput {
	return o
}

func (o DestinationRuleSpecWorkloadSelectorOutput) ToDestinationRuleSpecWorkloadSelectorOutputWithContext(ctx context.Context) DestinationRuleSpecWorkloadSelectorOutput {
	return o
}

func (o DestinationRuleSpecWorkloadSelectorOutput) ToDestinationRuleSpecWorkloadSelectorPtrOutput() DestinationRuleSpecWorkloadSelectorPtrOutput {
	return o.ToDestinationRuleSpecWorkloadSelectorPtrOutputWithContext(context.Background())
}

func (o DestinationRuleSpecWorkloadSelectorOutput) ToDestinationRuleSpecWorkloadSelectorPtrOutputWithContext(ctx context.Context) DestinationRuleSpecWorkloadSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationRuleSpecWorkloadSelector) *DestinationRuleSpecWorkloadSelector {
		return &v
	}).(DestinationRuleSpecWorkloadSelectorPtrOutput)
}

// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
func (o DestinationRuleSpecWorkloadSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v DestinationRuleSpecWorkloadSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type DestinationRuleSpecWorkloadSelectorPtrOutput struct{ *pulumi.OutputState }

func (DestinationRuleSpecWorkloadSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationRuleSpecWorkloadSelector)(nil)).Elem()
}

func (o DestinationRuleSpecWorkloadSelectorPtrOutput) ToDestinationRuleSpecWorkloadSelectorPtrOutput() DestinationRuleSpecWorkloadSelectorPtrOutput {
	return o
}

func (o DestinationRuleSpecWorkloadSelectorPtrOutput) ToDestinationRuleSpecWorkloadSelectorPtrOutputWithContext(ctx context.Context) DestinationRuleSpecWorkloadSelectorPtrOutput {
	return o
}

func (o DestinationRuleSpecWorkloadSelectorPtrOutput) Elem() DestinationRuleSpecWorkloadSelectorOutput {
	return o.ApplyT(func(v *DestinationRuleSpecWorkloadSelector) DestinationRuleSpecWorkloadSelector {
		if v != nil {
			return *v
		}
		var ret DestinationRuleSpecWorkloadSelector
		return ret
	}).(DestinationRuleSpecWorkloadSelectorOutput)
}

// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
func (o DestinationRuleSpecWorkloadSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DestinationRuleSpecWorkloadSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
type DestinationRuleSpecWorkloadSelectorMatchLabels struct {
}

type GatewayType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Configuration affecting edge load balancer. See more details at: https://istio.io/docs/reference/config/networking/gateway.html
	Spec   *GatewaySpec           `pulumi:"spec"`
	Status map[string]interface{} `pulumi:"status"`
}

// Configuration affecting edge load balancer. See more details at: https://istio.io/docs/reference/config/networking/gateway.html
type GatewaySpec struct {
	// One or more labels that indicate a specific set of pods/VMs on which this gateway configuration should be applied.
	Selector map[string]string `pulumi:"selector"`
	// A list of server specifications.
	Servers []GatewaySpecServers `pulumi:"servers"`
}

// GatewaySpecInput is an input type that accepts GatewaySpecArgs and GatewaySpecOutput values.
// You can construct a concrete instance of `GatewaySpecInput` via:
//
//	GatewaySpecArgs{...}
type GatewaySpecInput interface {
	pulumi.Input

	ToGatewaySpecOutput() GatewaySpecOutput
	ToGatewaySpecOutputWithContext(context.Context) GatewaySpecOutput
}

// Configuration affecting edge load balancer. See more details at: https://istio.io/docs/reference/config/networking/gateway.html
type GatewaySpecArgs struct {
	// One or more labels that indicate a specific set of pods/VMs on which this gateway configuration should be applied.
	Selector pulumi.StringMapInput `pulumi:"selector"`
	// A list of server specifications.
	Servers GatewaySpecServersArrayInput `pulumi:"servers"`
}

func (GatewaySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaySpec)(nil)).Elem()
}

func (i GatewaySpecArgs) ToGatewaySpecOutput() GatewaySpecOutput {
	return i.ToGatewaySpecOutputWithContext(context.Background())
}

func (i GatewaySpecArgs) ToGatewaySpecOutputWithContext(ctx context.Context) GatewaySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaySpecOutput)
}

func (i GatewaySpecArgs) ToGatewaySpecPtrOutput() GatewaySpecPtrOutput {
	return i.ToGatewaySpecPtrOutputWithContext(context.Background())
}

func (i GatewaySpecArgs) ToGatewaySpecPtrOutputWithContext(ctx context.Context) GatewaySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaySpecOutput).ToGatewaySpecPtrOutputWithContext(ctx)
}

// GatewaySpecPtrInput is an input type that accepts GatewaySpecArgs, GatewaySpecPtr and GatewaySpecPtrOutput values.
// You can construct a concrete instance of `GatewaySpecPtrInput` via:
//
//	        GatewaySpecArgs{...}
//
//	or:
//
//	        nil
type GatewaySpecPtrInput interface {
	pulumi.Input

	ToGatewaySpecPtrOutput() GatewaySpecPtrOutput
	ToGatewaySpecPtrOutputWithContext(context.Context) GatewaySpecPtrOutput
}

type gatewaySpecPtrType GatewaySpecArgs

func GatewaySpecPtr(v *GatewaySpecArgs) GatewaySpecPtrInput {
	return (*gatewaySpecPtrType)(v)
}

func (*gatewaySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaySpec)(nil)).Elem()
}

func (i *gatewaySpecPtrType) ToGatewaySpecPtrOutput() GatewaySpecPtrOutput {
	return i.ToGatewaySpecPtrOutputWithContext(context.Background())
}

func (i *gatewaySpecPtrType) ToGatewaySpecPtrOutputWithContext(ctx context.Context) GatewaySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaySpecPtrOutput)
}

// Configuration affecting edge load balancer. See more details at: https://istio.io/docs/reference/config/networking/gateway.html
type GatewaySpecOutput struct{ *pulumi.OutputState }

func (GatewaySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaySpec)(nil)).Elem()
}

func (o GatewaySpecOutput) ToGatewaySpecOutput() GatewaySpecOutput {
	return o
}

func (o GatewaySpecOutput) ToGatewaySpecOutputWithContext(ctx context.Context) GatewaySpecOutput {
	return o
}

func (o GatewaySpecOutput) ToGatewaySpecPtrOutput() GatewaySpecPtrOutput {
	return o.ToGatewaySpecPtrOutputWithContext(context.Background())
}

func (o GatewaySpecOutput) ToGatewaySpecPtrOutputWithContext(ctx context.Context) GatewaySpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaySpec) *GatewaySpec {
		return &v
	}).(GatewaySpecPtrOutput)
}

// One or more labels that indicate a specific set of pods/VMs on which this gateway configuration should be applied.
func (o GatewaySpecOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v GatewaySpec) map[string]string { return v.Selector }).(pulumi.StringMapOutput)
}

// A list of server specifications.
func (o GatewaySpecOutput) Servers() GatewaySpecServersArrayOutput {
	return o.ApplyT(func(v GatewaySpec) []GatewaySpecServers { return v.Servers }).(GatewaySpecServersArrayOutput)
}

type GatewaySpecPtrOutput struct{ *pulumi.OutputState }

func (GatewaySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaySpec)(nil)).Elem()
}

func (o GatewaySpecPtrOutput) ToGatewaySpecPtrOutput() GatewaySpecPtrOutput {
	return o
}

func (o GatewaySpecPtrOutput) ToGatewaySpecPtrOutputWithContext(ctx context.Context) GatewaySpecPtrOutput {
	return o
}

func (o GatewaySpecPtrOutput) Elem() GatewaySpecOutput {
	return o.ApplyT(func(v *GatewaySpec) GatewaySpec {
		if v != nil {
			return *v
		}
		var ret GatewaySpec
		return ret
	}).(GatewaySpecOutput)
}

// One or more labels that indicate a specific set of pods/VMs on which this gateway configuration should be applied.
func (o GatewaySpecPtrOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GatewaySpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringMapOutput)
}

// A list of server specifications.
func (o GatewaySpecPtrOutput) Servers() GatewaySpecServersArrayOutput {
	return o.ApplyT(func(v *GatewaySpec) []GatewaySpecServers {
		if v == nil {
			return nil
		}
		return v.Servers
	}).(GatewaySpecServersArrayOutput)
}

// One or more labels that indicate a specific set of pods/VMs on which this gateway configuration should be applied.
type GatewaySpecSelector struct {
}

type GatewaySpecServers struct {
	// The ip or the Unix domain socket to which the listener should be bound to.
	Bind            *string `pulumi:"bind"`
	DefaultEndpoint *string `pulumi:"defaultEndpoint"`
	// One or more hosts exposed by this gateway.
	Hosts []string `pulumi:"hosts"`
	// An optional name of the server, when set must be unique across all servers.
	Name *string `pulumi:"name"`
	// The Port on which the proxy should listen for incoming connections.
	Port GatewaySpecServersPort `pulumi:"port"`
	// Set of TLS related options that govern the server's behavior.
	Tls *GatewaySpecServersTls `pulumi:"tls"`
}

// GatewaySpecServersInput is an input type that accepts GatewaySpecServersArgs and GatewaySpecServersOutput values.
// You can construct a concrete instance of `GatewaySpecServersInput` via:
//
//	GatewaySpecServersArgs{...}
type GatewaySpecServersInput interface {
	pulumi.Input

	ToGatewaySpecServersOutput() GatewaySpecServersOutput
	ToGatewaySpecServersOutputWithContext(context.Context) GatewaySpecServersOutput
}

type GatewaySpecServersArgs struct {
	// The ip or the Unix domain socket to which the listener should be bound to.
	Bind            pulumi.StringPtrInput `pulumi:"bind"`
	DefaultEndpoint pulumi.StringPtrInput `pulumi:"defaultEndpoint"`
	// One or more hosts exposed by this gateway.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// An optional name of the server, when set must be unique across all servers.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The Port on which the proxy should listen for incoming connections.
	Port GatewaySpecServersPortInput `pulumi:"port"`
	// Set of TLS related options that govern the server's behavior.
	Tls GatewaySpecServersTlsPtrInput `pulumi:"tls"`
}

func (GatewaySpecServersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaySpecServers)(nil)).Elem()
}

func (i GatewaySpecServersArgs) ToGatewaySpecServersOutput() GatewaySpecServersOutput {
	return i.ToGatewaySpecServersOutputWithContext(context.Background())
}

func (i GatewaySpecServersArgs) ToGatewaySpecServersOutputWithContext(ctx context.Context) GatewaySpecServersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaySpecServersOutput)
}

// GatewaySpecServersArrayInput is an input type that accepts GatewaySpecServersArray and GatewaySpecServersArrayOutput values.
// You can construct a concrete instance of `GatewaySpecServersArrayInput` via:
//
//	GatewaySpecServersArray{ GatewaySpecServersArgs{...} }
type GatewaySpecServersArrayInput interface {
	pulumi.Input

	ToGatewaySpecServersArrayOutput() GatewaySpecServersArrayOutput
	ToGatewaySpecServersArrayOutputWithContext(context.Context) GatewaySpecServersArrayOutput
}

type GatewaySpecServersArray []GatewaySpecServersInput

func (GatewaySpecServersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaySpecServers)(nil)).Elem()
}

func (i GatewaySpecServersArray) ToGatewaySpecServersArrayOutput() GatewaySpecServersArrayOutput {
	return i.ToGatewaySpecServersArrayOutputWithContext(context.Background())
}

func (i GatewaySpecServersArray) ToGatewaySpecServersArrayOutputWithContext(ctx context.Context) GatewaySpecServersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaySpecServersArrayOutput)
}

type GatewaySpecServersOutput struct{ *pulumi.OutputState }

func (GatewaySpecServersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaySpecServers)(nil)).Elem()
}

func (o GatewaySpecServersOutput) ToGatewaySpecServersOutput() GatewaySpecServersOutput {
	return o
}

func (o GatewaySpecServersOutput) ToGatewaySpecServersOutputWithContext(ctx context.Context) GatewaySpecServersOutput {
	return o
}

// The ip or the Unix domain socket to which the listener should be bound to.
func (o GatewaySpecServersOutput) Bind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaySpecServers) *string { return v.Bind }).(pulumi.StringPtrOutput)
}

func (o GatewaySpecServersOutput) DefaultEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaySpecServers) *string { return v.DefaultEndpoint }).(pulumi.StringPtrOutput)
}

// One or more hosts exposed by this gateway.
func (o GatewaySpecServersOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaySpecServers) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// An optional name of the server, when set must be unique across all servers.
func (o GatewaySpecServersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaySpecServers) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The Port on which the proxy should listen for incoming connections.
func (o GatewaySpecServersOutput) Port() GatewaySpecServersPortOutput {
	return o.ApplyT(func(v GatewaySpecServers) GatewaySpecServersPort { return v.Port }).(GatewaySpecServersPortOutput)
}

// Set of TLS related options that govern the server's behavior.
func (o GatewaySpecServersOutput) Tls() GatewaySpecServersTlsPtrOutput {
	return o.ApplyT(func(v GatewaySpecServers) *GatewaySpecServersTls { return v.Tls }).(GatewaySpecServersTlsPtrOutput)
}

type GatewaySpecServersArrayOutput struct{ *pulumi.OutputState }

func (GatewaySpecServersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaySpecServers)(nil)).Elem()
}

func (o GatewaySpecServersArrayOutput) ToGatewaySpecServersArrayOutput() GatewaySpecServersArrayOutput {
	return o
}

func (o GatewaySpecServersArrayOutput) ToGatewaySpecServersArrayOutputWithContext(ctx context.Context) GatewaySpecServersArrayOutput {
	return o
}

func (o GatewaySpecServersArrayOutput) Index(i pulumi.IntInput) GatewaySpecServersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GatewaySpecServers {
		return vs[0].([]GatewaySpecServers)[vs[1].(int)]
	}).(GatewaySpecServersOutput)
}

// The Port on which the proxy should listen for incoming connections.
type GatewaySpecServersPort struct {
	// Label assigned to the port.
	Name string `pulumi:"name"`
	// A valid non-negative integer port number.
	Number int `pulumi:"number"`
	// The protocol exposed on the port.
	Protocol   string `pulumi:"protocol"`
	TargetPort *int   `pulumi:"targetPort"`
}

// GatewaySpecServersPortInput is an input type that accepts GatewaySpecServersPortArgs and GatewaySpecServersPortOutput values.
// You can construct a concrete instance of `GatewaySpecServersPortInput` via:
//
//	GatewaySpecServersPortArgs{...}
type GatewaySpecServersPortInput interface {
	pulumi.Input

	ToGatewaySpecServersPortOutput() GatewaySpecServersPortOutput
	ToGatewaySpecServersPortOutputWithContext(context.Context) GatewaySpecServersPortOutput
}

// The Port on which the proxy should listen for incoming connections.
type GatewaySpecServersPortArgs struct {
	// Label assigned to the port.
	Name pulumi.StringInput `pulumi:"name"`
	// A valid non-negative integer port number.
	Number pulumi.IntInput `pulumi:"number"`
	// The protocol exposed on the port.
	Protocol   pulumi.StringInput `pulumi:"protocol"`
	TargetPort pulumi.IntPtrInput `pulumi:"targetPort"`
}

func (GatewaySpecServersPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaySpecServersPort)(nil)).Elem()
}

func (i GatewaySpecServersPortArgs) ToGatewaySpecServersPortOutput() GatewaySpecServersPortOutput {
	return i.ToGatewaySpecServersPortOutputWithContext(context.Background())
}

func (i GatewaySpecServersPortArgs) ToGatewaySpecServersPortOutputWithContext(ctx context.Context) GatewaySpecServersPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaySpecServersPortOutput)
}

// The Port on which the proxy should listen for incoming connections.
type GatewaySpecServersPortOutput struct{ *pulumi.OutputState }

func (GatewaySpecServersPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaySpecServersPort)(nil)).Elem()
}

func (o GatewaySpecServersPortOutput) ToGatewaySpecServersPortOutput() GatewaySpecServersPortOutput {
	return o
}

func (o GatewaySpecServersPortOutput) ToGatewaySpecServersPortOutputWithContext(ctx context.Context) GatewaySpecServersPortOutput {
	return o
}

// Label assigned to the port.
func (o GatewaySpecServersPortOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaySpecServersPort) string { return v.Name }).(pulumi.StringOutput)
}

// A valid non-negative integer port number.
func (o GatewaySpecServersPortOutput) Number() pulumi.IntOutput {
	return o.ApplyT(func(v GatewaySpecServersPort) int { return v.Number }).(pulumi.IntOutput)
}

// The protocol exposed on the port.
func (o GatewaySpecServersPortOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaySpecServersPort) string { return v.Protocol }).(pulumi.StringOutput)
}

func (o GatewaySpecServersPortOutput) TargetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GatewaySpecServersPort) *int { return v.TargetPort }).(pulumi.IntPtrOutput)
}

// Set of TLS related options that govern the server's behavior.
type GatewaySpecServersTls struct {
	// REQUIRED if mode is `MUTUAL` or `OPTIONAL_MUTUAL`.
	CaCertificates *string `pulumi:"caCertificates"`
	// OPTIONAL: The path to the file containing the certificate revocation list (CRL) to use in verifying a presented client side certificate.
	CaCrl *string `pulumi:"caCrl"`
	// Optional: If specified, only support the specified cipher list.
	CipherSuites []string `pulumi:"cipherSuites"`
	// For gateways running on Kubernetes, the name of the secret that holds the TLS certs including the CA certificates.
	CredentialName *string `pulumi:"credentialName"`
	// If set to true, the load balancer will send a 301 redirect for all http connections, asking the clients to use HTTPS.
	HttpsRedirect *bool `pulumi:"httpsRedirect"`
	// Optional: Maximum TLS protocol version.
	//
	// Valid Options: TLS_AUTO, TLSV1_0, TLSV1_1, TLSV1_2, TLSV1_3
	MaxProtocolVersion *string `pulumi:"maxProtocolVersion"`
	// Optional: Minimum TLS protocol version.
	//
	// Valid Options: TLS_AUTO, TLSV1_0, TLSV1_1, TLSV1_2, TLSV1_3
	MinProtocolVersion *string `pulumi:"minProtocolVersion"`
	// Optional: Indicates whether connections to this port should be secured using TLS.
	//
	// Valid Options: PASSTHROUGH, SIMPLE, MUTUAL, AUTO_PASSTHROUGH, ISTIO_MUTUAL, OPTIONAL_MUTUAL
	Mode *string `pulumi:"mode"`
	// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
	PrivateKey *string `pulumi:"privateKey"`
	// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
	ServerCertificate *string `pulumi:"serverCertificate"`
	// A list of alternate names to verify the subject identity in the certificate presented by the client.
	SubjectAltNames []string `pulumi:"subjectAltNames"`
	// An optional list of hex-encoded SHA-256 hashes of the authorized client certificates.
	VerifyCertificateHash []string `pulumi:"verifyCertificateHash"`
	// An optional list of base64-encoded SHA-256 hashes of the SPKIs of authorized client certificates.
	VerifyCertificateSpki []string `pulumi:"verifyCertificateSpki"`
}

// GatewaySpecServersTlsInput is an input type that accepts GatewaySpecServersTlsArgs and GatewaySpecServersTlsOutput values.
// You can construct a concrete instance of `GatewaySpecServersTlsInput` via:
//
//	GatewaySpecServersTlsArgs{...}
type GatewaySpecServersTlsInput interface {
	pulumi.Input

	ToGatewaySpecServersTlsOutput() GatewaySpecServersTlsOutput
	ToGatewaySpecServersTlsOutputWithContext(context.Context) GatewaySpecServersTlsOutput
}

// Set of TLS related options that govern the server's behavior.
type GatewaySpecServersTlsArgs struct {
	// REQUIRED if mode is `MUTUAL` or `OPTIONAL_MUTUAL`.
	CaCertificates pulumi.StringPtrInput `pulumi:"caCertificates"`
	// OPTIONAL: The path to the file containing the certificate revocation list (CRL) to use in verifying a presented client side certificate.
	CaCrl pulumi.StringPtrInput `pulumi:"caCrl"`
	// Optional: If specified, only support the specified cipher list.
	CipherSuites pulumi.StringArrayInput `pulumi:"cipherSuites"`
	// For gateways running on Kubernetes, the name of the secret that holds the TLS certs including the CA certificates.
	CredentialName pulumi.StringPtrInput `pulumi:"credentialName"`
	// If set to true, the load balancer will send a 301 redirect for all http connections, asking the clients to use HTTPS.
	HttpsRedirect pulumi.BoolPtrInput `pulumi:"httpsRedirect"`
	// Optional: Maximum TLS protocol version.
	//
	// Valid Options: TLS_AUTO, TLSV1_0, TLSV1_1, TLSV1_2, TLSV1_3
	MaxProtocolVersion pulumi.StringPtrInput `pulumi:"maxProtocolVersion"`
	// Optional: Minimum TLS protocol version.
	//
	// Valid Options: TLS_AUTO, TLSV1_0, TLSV1_1, TLSV1_2, TLSV1_3
	MinProtocolVersion pulumi.StringPtrInput `pulumi:"minProtocolVersion"`
	// Optional: Indicates whether connections to this port should be secured using TLS.
	//
	// Valid Options: PASSTHROUGH, SIMPLE, MUTUAL, AUTO_PASSTHROUGH, ISTIO_MUTUAL, OPTIONAL_MUTUAL
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
	ServerCertificate pulumi.StringPtrInput `pulumi:"serverCertificate"`
	// A list of alternate names to verify the subject identity in the certificate presented by the client.
	SubjectAltNames pulumi.StringArrayInput `pulumi:"subjectAltNames"`
	// An optional list of hex-encoded SHA-256 hashes of the authorized client certificates.
	VerifyCertificateHash pulumi.StringArrayInput `pulumi:"verifyCertificateHash"`
	// An optional list of base64-encoded SHA-256 hashes of the SPKIs of authorized client certificates.
	VerifyCertificateSpki pulumi.StringArrayInput `pulumi:"verifyCertificateSpki"`
}

func (GatewaySpecServersTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaySpecServersTls)(nil)).Elem()
}

func (i GatewaySpecServersTlsArgs) ToGatewaySpecServersTlsOutput() GatewaySpecServersTlsOutput {
	return i.ToGatewaySpecServersTlsOutputWithContext(context.Background())
}

func (i GatewaySpecServersTlsArgs) ToGatewaySpecServersTlsOutputWithContext(ctx context.Context) GatewaySpecServersTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaySpecServersTlsOutput)
}

func (i GatewaySpecServersTlsArgs) ToGatewaySpecServersTlsPtrOutput() GatewaySpecServersTlsPtrOutput {
	return i.ToGatewaySpecServersTlsPtrOutputWithContext(context.Background())
}

func (i GatewaySpecServersTlsArgs) ToGatewaySpecServersTlsPtrOutputWithContext(ctx context.Context) GatewaySpecServersTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaySpecServersTlsOutput).ToGatewaySpecServersTlsPtrOutputWithContext(ctx)
}

// GatewaySpecServersTlsPtrInput is an input type that accepts GatewaySpecServersTlsArgs, GatewaySpecServersTlsPtr and GatewaySpecServersTlsPtrOutput values.
// You can construct a concrete instance of `GatewaySpecServersTlsPtrInput` via:
//
//	        GatewaySpecServersTlsArgs{...}
//
//	or:
//
//	        nil
type GatewaySpecServersTlsPtrInput interface {
	pulumi.Input

	ToGatewaySpecServersTlsPtrOutput() GatewaySpecServersTlsPtrOutput
	ToGatewaySpecServersTlsPtrOutputWithContext(context.Context) GatewaySpecServersTlsPtrOutput
}

type gatewaySpecServersTlsPtrType GatewaySpecServersTlsArgs

func GatewaySpecServersTlsPtr(v *GatewaySpecServersTlsArgs) GatewaySpecServersTlsPtrInput {
	return (*gatewaySpecServersTlsPtrType)(v)
}

func (*gatewaySpecServersTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaySpecServersTls)(nil)).Elem()
}

func (i *gatewaySpecServersTlsPtrType) ToGatewaySpecServersTlsPtrOutput() GatewaySpecServersTlsPtrOutput {
	return i.ToGatewaySpecServersTlsPtrOutputWithContext(context.Background())
}

func (i *gatewaySpecServersTlsPtrType) ToGatewaySpecServersTlsPtrOutputWithContext(ctx context.Context) GatewaySpecServersTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaySpecServersTlsPtrOutput)
}

// Set of TLS related options that govern the server's behavior.
type GatewaySpecServersTlsOutput struct{ *pulumi.OutputState }

func (GatewaySpecServersTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaySpecServersTls)(nil)).Elem()
}

func (o GatewaySpecServersTlsOutput) ToGatewaySpecServersTlsOutput() GatewaySpecServersTlsOutput {
	return o
}

func (o GatewaySpecServersTlsOutput) ToGatewaySpecServersTlsOutputWithContext(ctx context.Context) GatewaySpecServersTlsOutput {
	return o
}

func (o GatewaySpecServersTlsOutput) ToGatewaySpecServersTlsPtrOutput() GatewaySpecServersTlsPtrOutput {
	return o.ToGatewaySpecServersTlsPtrOutputWithContext(context.Background())
}

func (o GatewaySpecServersTlsOutput) ToGatewaySpecServersTlsPtrOutputWithContext(ctx context.Context) GatewaySpecServersTlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GatewaySpecServersTls) *GatewaySpecServersTls {
		return &v
	}).(GatewaySpecServersTlsPtrOutput)
}

// REQUIRED if mode is `MUTUAL` or `OPTIONAL_MUTUAL`.
func (o GatewaySpecServersTlsOutput) CaCertificates() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaySpecServersTls) *string { return v.CaCertificates }).(pulumi.StringPtrOutput)
}

// OPTIONAL: The path to the file containing the certificate revocation list (CRL) to use in verifying a presented client side certificate.
func (o GatewaySpecServersTlsOutput) CaCrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaySpecServersTls) *string { return v.CaCrl }).(pulumi.StringPtrOutput)
}

// Optional: If specified, only support the specified cipher list.
func (o GatewaySpecServersTlsOutput) CipherSuites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaySpecServersTls) []string { return v.CipherSuites }).(pulumi.StringArrayOutput)
}

// For gateways running on Kubernetes, the name of the secret that holds the TLS certs including the CA certificates.
func (o GatewaySpecServersTlsOutput) CredentialName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaySpecServersTls) *string { return v.CredentialName }).(pulumi.StringPtrOutput)
}

// If set to true, the load balancer will send a 301 redirect for all http connections, asking the clients to use HTTPS.
func (o GatewaySpecServersTlsOutput) HttpsRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GatewaySpecServersTls) *bool { return v.HttpsRedirect }).(pulumi.BoolPtrOutput)
}

// Optional: Maximum TLS protocol version.
//
// Valid Options: TLS_AUTO, TLSV1_0, TLSV1_1, TLSV1_2, TLSV1_3
func (o GatewaySpecServersTlsOutput) MaxProtocolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaySpecServersTls) *string { return v.MaxProtocolVersion }).(pulumi.StringPtrOutput)
}

// Optional: Minimum TLS protocol version.
//
// Valid Options: TLS_AUTO, TLSV1_0, TLSV1_1, TLSV1_2, TLSV1_3
func (o GatewaySpecServersTlsOutput) MinProtocolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaySpecServersTls) *string { return v.MinProtocolVersion }).(pulumi.StringPtrOutput)
}

// Optional: Indicates whether connections to this port should be secured using TLS.
//
// Valid Options: PASSTHROUGH, SIMPLE, MUTUAL, AUTO_PASSTHROUGH, ISTIO_MUTUAL, OPTIONAL_MUTUAL
func (o GatewaySpecServersTlsOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaySpecServersTls) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
func (o GatewaySpecServersTlsOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaySpecServersTls) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
func (o GatewaySpecServersTlsOutput) ServerCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaySpecServersTls) *string { return v.ServerCertificate }).(pulumi.StringPtrOutput)
}

// A list of alternate names to verify the subject identity in the certificate presented by the client.
func (o GatewaySpecServersTlsOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaySpecServersTls) []string { return v.SubjectAltNames }).(pulumi.StringArrayOutput)
}

// An optional list of hex-encoded SHA-256 hashes of the authorized client certificates.
func (o GatewaySpecServersTlsOutput) VerifyCertificateHash() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaySpecServersTls) []string { return v.VerifyCertificateHash }).(pulumi.StringArrayOutput)
}

// An optional list of base64-encoded SHA-256 hashes of the SPKIs of authorized client certificates.
func (o GatewaySpecServersTlsOutput) VerifyCertificateSpki() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaySpecServersTls) []string { return v.VerifyCertificateSpki }).(pulumi.StringArrayOutput)
}

type GatewaySpecServersTlsPtrOutput struct{ *pulumi.OutputState }

func (GatewaySpecServersTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaySpecServersTls)(nil)).Elem()
}

func (o GatewaySpecServersTlsPtrOutput) ToGatewaySpecServersTlsPtrOutput() GatewaySpecServersTlsPtrOutput {
	return o
}

func (o GatewaySpecServersTlsPtrOutput) ToGatewaySpecServersTlsPtrOutputWithContext(ctx context.Context) GatewaySpecServersTlsPtrOutput {
	return o
}

func (o GatewaySpecServersTlsPtrOutput) Elem() GatewaySpecServersTlsOutput {
	return o.ApplyT(func(v *GatewaySpecServersTls) GatewaySpecServersTls {
		if v != nil {
			return *v
		}
		var ret GatewaySpecServersTls
		return ret
	}).(GatewaySpecServersTlsOutput)
}

// REQUIRED if mode is `MUTUAL` or `OPTIONAL_MUTUAL`.
func (o GatewaySpecServersTlsPtrOutput) CaCertificates() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaySpecServersTls) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificates
	}).(pulumi.StringPtrOutput)
}

// OPTIONAL: The path to the file containing the certificate revocation list (CRL) to use in verifying a presented client side certificate.
func (o GatewaySpecServersTlsPtrOutput) CaCrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaySpecServersTls) *string {
		if v == nil {
			return nil
		}
		return v.CaCrl
	}).(pulumi.StringPtrOutput)
}

// Optional: If specified, only support the specified cipher list.
func (o GatewaySpecServersTlsPtrOutput) CipherSuites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaySpecServersTls) []string {
		if v == nil {
			return nil
		}
		return v.CipherSuites
	}).(pulumi.StringArrayOutput)
}

// For gateways running on Kubernetes, the name of the secret that holds the TLS certs including the CA certificates.
func (o GatewaySpecServersTlsPtrOutput) CredentialName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaySpecServersTls) *string {
		if v == nil {
			return nil
		}
		return v.CredentialName
	}).(pulumi.StringPtrOutput)
}

// If set to true, the load balancer will send a 301 redirect for all http connections, asking the clients to use HTTPS.
func (o GatewaySpecServersTlsPtrOutput) HttpsRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GatewaySpecServersTls) *bool {
		if v == nil {
			return nil
		}
		return v.HttpsRedirect
	}).(pulumi.BoolPtrOutput)
}

// Optional: Maximum TLS protocol version.
//
// Valid Options: TLS_AUTO, TLSV1_0, TLSV1_1, TLSV1_2, TLSV1_3
func (o GatewaySpecServersTlsPtrOutput) MaxProtocolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaySpecServersTls) *string {
		if v == nil {
			return nil
		}
		return v.MaxProtocolVersion
	}).(pulumi.StringPtrOutput)
}

// Optional: Minimum TLS protocol version.
//
// Valid Options: TLS_AUTO, TLSV1_0, TLSV1_1, TLSV1_2, TLSV1_3
func (o GatewaySpecServersTlsPtrOutput) MinProtocolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaySpecServersTls) *string {
		if v == nil {
			return nil
		}
		return v.MinProtocolVersion
	}).(pulumi.StringPtrOutput)
}

// Optional: Indicates whether connections to this port should be secured using TLS.
//
// Valid Options: PASSTHROUGH, SIMPLE, MUTUAL, AUTO_PASSTHROUGH, ISTIO_MUTUAL, OPTIONAL_MUTUAL
func (o GatewaySpecServersTlsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaySpecServersTls) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
func (o GatewaySpecServersTlsPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaySpecServersTls) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
func (o GatewaySpecServersTlsPtrOutput) ServerCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaySpecServersTls) *string {
		if v == nil {
			return nil
		}
		return v.ServerCertificate
	}).(pulumi.StringPtrOutput)
}

// A list of alternate names to verify the subject identity in the certificate presented by the client.
func (o GatewaySpecServersTlsPtrOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaySpecServersTls) []string {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(pulumi.StringArrayOutput)
}

// An optional list of hex-encoded SHA-256 hashes of the authorized client certificates.
func (o GatewaySpecServersTlsPtrOutput) VerifyCertificateHash() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaySpecServersTls) []string {
		if v == nil {
			return nil
		}
		return v.VerifyCertificateHash
	}).(pulumi.StringArrayOutput)
}

// An optional list of base64-encoded SHA-256 hashes of the SPKIs of authorized client certificates.
func (o GatewaySpecServersTlsPtrOutput) VerifyCertificateSpki() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaySpecServersTls) []string {
		if v == nil {
			return nil
		}
		return v.VerifyCertificateSpki
	}).(pulumi.StringArrayOutput)
}

type ServiceEntryType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Configuration affecting service registry. See more details at: https://istio.io/docs/reference/config/networking/service-entry.html
	Spec   *ServiceEntrySpec      `pulumi:"spec"`
	Status map[string]interface{} `pulumi:"status"`
}

// Configuration affecting service registry. See more details at: https://istio.io/docs/reference/config/networking/service-entry.html
type ServiceEntrySpec struct {
	// The virtual IP addresses associated with the service.
	Addresses []string `pulumi:"addresses"`
	// One or more endpoints associated with the service.
	Endpoints []ServiceEntrySpecEndpoints `pulumi:"endpoints"`
	// A list of namespaces to which this service is exported.
	ExportTo []string `pulumi:"exportTo"`
	// The hosts associated with the ServiceEntry.
	Hosts []string `pulumi:"hosts"`
	// Specify whether the service should be considered external to the mesh or part of the mesh.
	//
	// Valid Options: MESH_EXTERNAL, MESH_INTERNAL
	Location *string `pulumi:"location"`
	// The ports associated with the external service.
	Ports []ServiceEntrySpecPorts `pulumi:"ports"`
	// Service resolution mode for the hosts.
	//
	// Valid Options: NONE, STATIC, DNS, DNS_ROUND_ROBIN
	Resolution *string `pulumi:"resolution"`
	// If specified, the proxy will verify that the server certificate's subject alternate name matches one of the specified values.
	SubjectAltNames []string `pulumi:"subjectAltNames"`
	// Applicable only for MESH_INTERNAL services.
	WorkloadSelector *ServiceEntrySpecWorkloadSelector `pulumi:"workloadSelector"`
}

// ServiceEntrySpecInput is an input type that accepts ServiceEntrySpecArgs and ServiceEntrySpecOutput values.
// You can construct a concrete instance of `ServiceEntrySpecInput` via:
//
//	ServiceEntrySpecArgs{...}
type ServiceEntrySpecInput interface {
	pulumi.Input

	ToServiceEntrySpecOutput() ServiceEntrySpecOutput
	ToServiceEntrySpecOutputWithContext(context.Context) ServiceEntrySpecOutput
}

// Configuration affecting service registry. See more details at: https://istio.io/docs/reference/config/networking/service-entry.html
type ServiceEntrySpecArgs struct {
	// The virtual IP addresses associated with the service.
	Addresses pulumi.StringArrayInput `pulumi:"addresses"`
	// One or more endpoints associated with the service.
	Endpoints ServiceEntrySpecEndpointsArrayInput `pulumi:"endpoints"`
	// A list of namespaces to which this service is exported.
	ExportTo pulumi.StringArrayInput `pulumi:"exportTo"`
	// The hosts associated with the ServiceEntry.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// Specify whether the service should be considered external to the mesh or part of the mesh.
	//
	// Valid Options: MESH_EXTERNAL, MESH_INTERNAL
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The ports associated with the external service.
	Ports ServiceEntrySpecPortsArrayInput `pulumi:"ports"`
	// Service resolution mode for the hosts.
	//
	// Valid Options: NONE, STATIC, DNS, DNS_ROUND_ROBIN
	Resolution pulumi.StringPtrInput `pulumi:"resolution"`
	// If specified, the proxy will verify that the server certificate's subject alternate name matches one of the specified values.
	SubjectAltNames pulumi.StringArrayInput `pulumi:"subjectAltNames"`
	// Applicable only for MESH_INTERNAL services.
	WorkloadSelector ServiceEntrySpecWorkloadSelectorPtrInput `pulumi:"workloadSelector"`
}

func (ServiceEntrySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEntrySpec)(nil)).Elem()
}

func (i ServiceEntrySpecArgs) ToServiceEntrySpecOutput() ServiceEntrySpecOutput {
	return i.ToServiceEntrySpecOutputWithContext(context.Background())
}

func (i ServiceEntrySpecArgs) ToServiceEntrySpecOutputWithContext(ctx context.Context) ServiceEntrySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEntrySpecOutput)
}

func (i ServiceEntrySpecArgs) ToServiceEntrySpecPtrOutput() ServiceEntrySpecPtrOutput {
	return i.ToServiceEntrySpecPtrOutputWithContext(context.Background())
}

func (i ServiceEntrySpecArgs) ToServiceEntrySpecPtrOutputWithContext(ctx context.Context) ServiceEntrySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEntrySpecOutput).ToServiceEntrySpecPtrOutputWithContext(ctx)
}

// ServiceEntrySpecPtrInput is an input type that accepts ServiceEntrySpecArgs, ServiceEntrySpecPtr and ServiceEntrySpecPtrOutput values.
// You can construct a concrete instance of `ServiceEntrySpecPtrInput` via:
//
//	        ServiceEntrySpecArgs{...}
//
//	or:
//
//	        nil
type ServiceEntrySpecPtrInput interface {
	pulumi.Input

	ToServiceEntrySpecPtrOutput() ServiceEntrySpecPtrOutput
	ToServiceEntrySpecPtrOutputWithContext(context.Context) ServiceEntrySpecPtrOutput
}

type serviceEntrySpecPtrType ServiceEntrySpecArgs

func ServiceEntrySpecPtr(v *ServiceEntrySpecArgs) ServiceEntrySpecPtrInput {
	return (*serviceEntrySpecPtrType)(v)
}

func (*serviceEntrySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEntrySpec)(nil)).Elem()
}

func (i *serviceEntrySpecPtrType) ToServiceEntrySpecPtrOutput() ServiceEntrySpecPtrOutput {
	return i.ToServiceEntrySpecPtrOutputWithContext(context.Background())
}

func (i *serviceEntrySpecPtrType) ToServiceEntrySpecPtrOutputWithContext(ctx context.Context) ServiceEntrySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEntrySpecPtrOutput)
}

// Configuration affecting service registry. See more details at: https://istio.io/docs/reference/config/networking/service-entry.html
type ServiceEntrySpecOutput struct{ *pulumi.OutputState }

func (ServiceEntrySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEntrySpec)(nil)).Elem()
}

func (o ServiceEntrySpecOutput) ToServiceEntrySpecOutput() ServiceEntrySpecOutput {
	return o
}

func (o ServiceEntrySpecOutput) ToServiceEntrySpecOutputWithContext(ctx context.Context) ServiceEntrySpecOutput {
	return o
}

func (o ServiceEntrySpecOutput) ToServiceEntrySpecPtrOutput() ServiceEntrySpecPtrOutput {
	return o.ToServiceEntrySpecPtrOutputWithContext(context.Background())
}

func (o ServiceEntrySpecOutput) ToServiceEntrySpecPtrOutputWithContext(ctx context.Context) ServiceEntrySpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceEntrySpec) *ServiceEntrySpec {
		return &v
	}).(ServiceEntrySpecPtrOutput)
}

// The virtual IP addresses associated with the service.
func (o ServiceEntrySpecOutput) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceEntrySpec) []string { return v.Addresses }).(pulumi.StringArrayOutput)
}

// One or more endpoints associated with the service.
func (o ServiceEntrySpecOutput) Endpoints() ServiceEntrySpecEndpointsArrayOutput {
	return o.ApplyT(func(v ServiceEntrySpec) []ServiceEntrySpecEndpoints { return v.Endpoints }).(ServiceEntrySpecEndpointsArrayOutput)
}

// A list of namespaces to which this service is exported.
func (o ServiceEntrySpecOutput) ExportTo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceEntrySpec) []string { return v.ExportTo }).(pulumi.StringArrayOutput)
}

// The hosts associated with the ServiceEntry.
func (o ServiceEntrySpecOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceEntrySpec) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// Specify whether the service should be considered external to the mesh or part of the mesh.
//
// Valid Options: MESH_EXTERNAL, MESH_INTERNAL
func (o ServiceEntrySpecOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEntrySpec) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The ports associated with the external service.
func (o ServiceEntrySpecOutput) Ports() ServiceEntrySpecPortsArrayOutput {
	return o.ApplyT(func(v ServiceEntrySpec) []ServiceEntrySpecPorts { return v.Ports }).(ServiceEntrySpecPortsArrayOutput)
}

// Service resolution mode for the hosts.
//
// Valid Options: NONE, STATIC, DNS, DNS_ROUND_ROBIN
func (o ServiceEntrySpecOutput) Resolution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEntrySpec) *string { return v.Resolution }).(pulumi.StringPtrOutput)
}

// If specified, the proxy will verify that the server certificate's subject alternate name matches one of the specified values.
func (o ServiceEntrySpecOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceEntrySpec) []string { return v.SubjectAltNames }).(pulumi.StringArrayOutput)
}

// Applicable only for MESH_INTERNAL services.
func (o ServiceEntrySpecOutput) WorkloadSelector() ServiceEntrySpecWorkloadSelectorPtrOutput {
	return o.ApplyT(func(v ServiceEntrySpec) *ServiceEntrySpecWorkloadSelector { return v.WorkloadSelector }).(ServiceEntrySpecWorkloadSelectorPtrOutput)
}

type ServiceEntrySpecPtrOutput struct{ *pulumi.OutputState }

func (ServiceEntrySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEntrySpec)(nil)).Elem()
}

func (o ServiceEntrySpecPtrOutput) ToServiceEntrySpecPtrOutput() ServiceEntrySpecPtrOutput {
	return o
}

func (o ServiceEntrySpecPtrOutput) ToServiceEntrySpecPtrOutputWithContext(ctx context.Context) ServiceEntrySpecPtrOutput {
	return o
}

func (o ServiceEntrySpecPtrOutput) Elem() ServiceEntrySpecOutput {
	return o.ApplyT(func(v *ServiceEntrySpec) ServiceEntrySpec {
		if v != nil {
			return *v
		}
		var ret ServiceEntrySpec
		return ret
	}).(ServiceEntrySpecOutput)
}

// The virtual IP addresses associated with the service.
func (o ServiceEntrySpecPtrOutput) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceEntrySpec) []string {
		if v == nil {
			return nil
		}
		return v.Addresses
	}).(pulumi.StringArrayOutput)
}

// One or more endpoints associated with the service.
func (o ServiceEntrySpecPtrOutput) Endpoints() ServiceEntrySpecEndpointsArrayOutput {
	return o.ApplyT(func(v *ServiceEntrySpec) []ServiceEntrySpecEndpoints {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(ServiceEntrySpecEndpointsArrayOutput)
}

// A list of namespaces to which this service is exported.
func (o ServiceEntrySpecPtrOutput) ExportTo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceEntrySpec) []string {
		if v == nil {
			return nil
		}
		return v.ExportTo
	}).(pulumi.StringArrayOutput)
}

// The hosts associated with the ServiceEntry.
func (o ServiceEntrySpecPtrOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceEntrySpec) []string {
		if v == nil {
			return nil
		}
		return v.Hosts
	}).(pulumi.StringArrayOutput)
}

// Specify whether the service should be considered external to the mesh or part of the mesh.
//
// Valid Options: MESH_EXTERNAL, MESH_INTERNAL
func (o ServiceEntrySpecPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceEntrySpec) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// The ports associated with the external service.
func (o ServiceEntrySpecPtrOutput) Ports() ServiceEntrySpecPortsArrayOutput {
	return o.ApplyT(func(v *ServiceEntrySpec) []ServiceEntrySpecPorts {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(ServiceEntrySpecPortsArrayOutput)
}

// Service resolution mode for the hosts.
//
// Valid Options: NONE, STATIC, DNS, DNS_ROUND_ROBIN
func (o ServiceEntrySpecPtrOutput) Resolution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceEntrySpec) *string {
		if v == nil {
			return nil
		}
		return v.Resolution
	}).(pulumi.StringPtrOutput)
}

// If specified, the proxy will verify that the server certificate's subject alternate name matches one of the specified values.
func (o ServiceEntrySpecPtrOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceEntrySpec) []string {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(pulumi.StringArrayOutput)
}

// Applicable only for MESH_INTERNAL services.
func (o ServiceEntrySpecPtrOutput) WorkloadSelector() ServiceEntrySpecWorkloadSelectorPtrOutput {
	return o.ApplyT(func(v *ServiceEntrySpec) *ServiceEntrySpecWorkloadSelector {
		if v == nil {
			return nil
		}
		return v.WorkloadSelector
	}).(ServiceEntrySpecWorkloadSelectorPtrOutput)
}

type ServiceEntrySpecEndpoints struct {
	// Address associated with the network endpoint without the port.
	Address *string `pulumi:"address"`
	// One or more labels associated with the endpoint.
	Labels map[string]string `pulumi:"labels"`
	// The locality associated with the endpoint.
	Locality *string `pulumi:"locality"`
	// Network enables Istio to group endpoints resident in the same L3 domain/network.
	Network *string `pulumi:"network"`
	// Set of ports associated with the endpoint.
	Ports map[string]int `pulumi:"ports"`
	// The service account associated with the workload if a sidecar is present in the workload.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// The load balancing weight associated with the endpoint.
	Weight *int `pulumi:"weight"`
}

// ServiceEntrySpecEndpointsInput is an input type that accepts ServiceEntrySpecEndpointsArgs and ServiceEntrySpecEndpointsOutput values.
// You can construct a concrete instance of `ServiceEntrySpecEndpointsInput` via:
//
//	ServiceEntrySpecEndpointsArgs{...}
type ServiceEntrySpecEndpointsInput interface {
	pulumi.Input

	ToServiceEntrySpecEndpointsOutput() ServiceEntrySpecEndpointsOutput
	ToServiceEntrySpecEndpointsOutputWithContext(context.Context) ServiceEntrySpecEndpointsOutput
}

type ServiceEntrySpecEndpointsArgs struct {
	// Address associated with the network endpoint without the port.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// One or more labels associated with the endpoint.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The locality associated with the endpoint.
	Locality pulumi.StringPtrInput `pulumi:"locality"`
	// Network enables Istio to group endpoints resident in the same L3 domain/network.
	Network pulumi.StringPtrInput `pulumi:"network"`
	// Set of ports associated with the endpoint.
	Ports pulumi.IntMapInput `pulumi:"ports"`
	// The service account associated with the workload if a sidecar is present in the workload.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// The load balancing weight associated with the endpoint.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (ServiceEntrySpecEndpointsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEntrySpecEndpoints)(nil)).Elem()
}

func (i ServiceEntrySpecEndpointsArgs) ToServiceEntrySpecEndpointsOutput() ServiceEntrySpecEndpointsOutput {
	return i.ToServiceEntrySpecEndpointsOutputWithContext(context.Background())
}

func (i ServiceEntrySpecEndpointsArgs) ToServiceEntrySpecEndpointsOutputWithContext(ctx context.Context) ServiceEntrySpecEndpointsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEntrySpecEndpointsOutput)
}

// ServiceEntrySpecEndpointsArrayInput is an input type that accepts ServiceEntrySpecEndpointsArray and ServiceEntrySpecEndpointsArrayOutput values.
// You can construct a concrete instance of `ServiceEntrySpecEndpointsArrayInput` via:
//
//	ServiceEntrySpecEndpointsArray{ ServiceEntrySpecEndpointsArgs{...} }
type ServiceEntrySpecEndpointsArrayInput interface {
	pulumi.Input

	ToServiceEntrySpecEndpointsArrayOutput() ServiceEntrySpecEndpointsArrayOutput
	ToServiceEntrySpecEndpointsArrayOutputWithContext(context.Context) ServiceEntrySpecEndpointsArrayOutput
}

type ServiceEntrySpecEndpointsArray []ServiceEntrySpecEndpointsInput

func (ServiceEntrySpecEndpointsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEntrySpecEndpoints)(nil)).Elem()
}

func (i ServiceEntrySpecEndpointsArray) ToServiceEntrySpecEndpointsArrayOutput() ServiceEntrySpecEndpointsArrayOutput {
	return i.ToServiceEntrySpecEndpointsArrayOutputWithContext(context.Background())
}

func (i ServiceEntrySpecEndpointsArray) ToServiceEntrySpecEndpointsArrayOutputWithContext(ctx context.Context) ServiceEntrySpecEndpointsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEntrySpecEndpointsArrayOutput)
}

type ServiceEntrySpecEndpointsOutput struct{ *pulumi.OutputState }

func (ServiceEntrySpecEndpointsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEntrySpecEndpoints)(nil)).Elem()
}

func (o ServiceEntrySpecEndpointsOutput) ToServiceEntrySpecEndpointsOutput() ServiceEntrySpecEndpointsOutput {
	return o
}

func (o ServiceEntrySpecEndpointsOutput) ToServiceEntrySpecEndpointsOutputWithContext(ctx context.Context) ServiceEntrySpecEndpointsOutput {
	return o
}

// Address associated with the network endpoint without the port.
func (o ServiceEntrySpecEndpointsOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEntrySpecEndpoints) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// One or more labels associated with the endpoint.
func (o ServiceEntrySpecEndpointsOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ServiceEntrySpecEndpoints) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The locality associated with the endpoint.
func (o ServiceEntrySpecEndpointsOutput) Locality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEntrySpecEndpoints) *string { return v.Locality }).(pulumi.StringPtrOutput)
}

// Network enables Istio to group endpoints resident in the same L3 domain/network.
func (o ServiceEntrySpecEndpointsOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEntrySpecEndpoints) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// Set of ports associated with the endpoint.
func (o ServiceEntrySpecEndpointsOutput) Ports() pulumi.IntMapOutput {
	return o.ApplyT(func(v ServiceEntrySpecEndpoints) map[string]int { return v.Ports }).(pulumi.IntMapOutput)
}

// The service account associated with the workload if a sidecar is present in the workload.
func (o ServiceEntrySpecEndpointsOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEntrySpecEndpoints) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// The load balancing weight associated with the endpoint.
func (o ServiceEntrySpecEndpointsOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceEntrySpecEndpoints) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type ServiceEntrySpecEndpointsArrayOutput struct{ *pulumi.OutputState }

func (ServiceEntrySpecEndpointsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEntrySpecEndpoints)(nil)).Elem()
}

func (o ServiceEntrySpecEndpointsArrayOutput) ToServiceEntrySpecEndpointsArrayOutput() ServiceEntrySpecEndpointsArrayOutput {
	return o
}

func (o ServiceEntrySpecEndpointsArrayOutput) ToServiceEntrySpecEndpointsArrayOutputWithContext(ctx context.Context) ServiceEntrySpecEndpointsArrayOutput {
	return o
}

func (o ServiceEntrySpecEndpointsArrayOutput) Index(i pulumi.IntInput) ServiceEntrySpecEndpointsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceEntrySpecEndpoints {
		return vs[0].([]ServiceEntrySpecEndpoints)[vs[1].(int)]
	}).(ServiceEntrySpecEndpointsOutput)
}

// One or more labels associated with the endpoint.
type ServiceEntrySpecEndpointsLabels struct {
}

// Set of ports associated with the endpoint.
type ServiceEntrySpecEndpointsPorts struct {
}

type ServiceEntrySpecPorts struct {
	// Label assigned to the port.
	Name string `pulumi:"name"`
	// A valid non-negative integer port number.
	Number int `pulumi:"number"`
	// The protocol exposed on the port.
	Protocol *string `pulumi:"protocol"`
	// The port number on the endpoint where the traffic will be received.
	TargetPort *int `pulumi:"targetPort"`
}

// ServiceEntrySpecPortsInput is an input type that accepts ServiceEntrySpecPortsArgs and ServiceEntrySpecPortsOutput values.
// You can construct a concrete instance of `ServiceEntrySpecPortsInput` via:
//
//	ServiceEntrySpecPortsArgs{...}
type ServiceEntrySpecPortsInput interface {
	pulumi.Input

	ToServiceEntrySpecPortsOutput() ServiceEntrySpecPortsOutput
	ToServiceEntrySpecPortsOutputWithContext(context.Context) ServiceEntrySpecPortsOutput
}

type ServiceEntrySpecPortsArgs struct {
	// Label assigned to the port.
	Name pulumi.StringInput `pulumi:"name"`
	// A valid non-negative integer port number.
	Number pulumi.IntInput `pulumi:"number"`
	// The protocol exposed on the port.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// The port number on the endpoint where the traffic will be received.
	TargetPort pulumi.IntPtrInput `pulumi:"targetPort"`
}

func (ServiceEntrySpecPortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEntrySpecPorts)(nil)).Elem()
}

func (i ServiceEntrySpecPortsArgs) ToServiceEntrySpecPortsOutput() ServiceEntrySpecPortsOutput {
	return i.ToServiceEntrySpecPortsOutputWithContext(context.Background())
}

func (i ServiceEntrySpecPortsArgs) ToServiceEntrySpecPortsOutputWithContext(ctx context.Context) ServiceEntrySpecPortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEntrySpecPortsOutput)
}

// ServiceEntrySpecPortsArrayInput is an input type that accepts ServiceEntrySpecPortsArray and ServiceEntrySpecPortsArrayOutput values.
// You can construct a concrete instance of `ServiceEntrySpecPortsArrayInput` via:
//
//	ServiceEntrySpecPortsArray{ ServiceEntrySpecPortsArgs{...} }
type ServiceEntrySpecPortsArrayInput interface {
	pulumi.Input

	ToServiceEntrySpecPortsArrayOutput() ServiceEntrySpecPortsArrayOutput
	ToServiceEntrySpecPortsArrayOutputWithContext(context.Context) ServiceEntrySpecPortsArrayOutput
}

type ServiceEntrySpecPortsArray []ServiceEntrySpecPortsInput

func (ServiceEntrySpecPortsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEntrySpecPorts)(nil)).Elem()
}

func (i ServiceEntrySpecPortsArray) ToServiceEntrySpecPortsArrayOutput() ServiceEntrySpecPortsArrayOutput {
	return i.ToServiceEntrySpecPortsArrayOutputWithContext(context.Background())
}

func (i ServiceEntrySpecPortsArray) ToServiceEntrySpecPortsArrayOutputWithContext(ctx context.Context) ServiceEntrySpecPortsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEntrySpecPortsArrayOutput)
}

type ServiceEntrySpecPortsOutput struct{ *pulumi.OutputState }

func (ServiceEntrySpecPortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEntrySpecPorts)(nil)).Elem()
}

func (o ServiceEntrySpecPortsOutput) ToServiceEntrySpecPortsOutput() ServiceEntrySpecPortsOutput {
	return o
}

func (o ServiceEntrySpecPortsOutput) ToServiceEntrySpecPortsOutputWithContext(ctx context.Context) ServiceEntrySpecPortsOutput {
	return o
}

// Label assigned to the port.
func (o ServiceEntrySpecPortsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceEntrySpecPorts) string { return v.Name }).(pulumi.StringOutput)
}

// A valid non-negative integer port number.
func (o ServiceEntrySpecPortsOutput) Number() pulumi.IntOutput {
	return o.ApplyT(func(v ServiceEntrySpecPorts) int { return v.Number }).(pulumi.IntOutput)
}

// The protocol exposed on the port.
func (o ServiceEntrySpecPortsOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceEntrySpecPorts) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// The port number on the endpoint where the traffic will be received.
func (o ServiceEntrySpecPortsOutput) TargetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceEntrySpecPorts) *int { return v.TargetPort }).(pulumi.IntPtrOutput)
}

type ServiceEntrySpecPortsArrayOutput struct{ *pulumi.OutputState }

func (ServiceEntrySpecPortsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceEntrySpecPorts)(nil)).Elem()
}

func (o ServiceEntrySpecPortsArrayOutput) ToServiceEntrySpecPortsArrayOutput() ServiceEntrySpecPortsArrayOutput {
	return o
}

func (o ServiceEntrySpecPortsArrayOutput) ToServiceEntrySpecPortsArrayOutputWithContext(ctx context.Context) ServiceEntrySpecPortsArrayOutput {
	return o
}

func (o ServiceEntrySpecPortsArrayOutput) Index(i pulumi.IntInput) ServiceEntrySpecPortsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceEntrySpecPorts {
		return vs[0].([]ServiceEntrySpecPorts)[vs[1].(int)]
	}).(ServiceEntrySpecPortsOutput)
}

// Applicable only for MESH_INTERNAL services.
type ServiceEntrySpecWorkloadSelector struct {
	// One or more labels that indicate a specific set of pods/VMs on which the configuration should be applied.
	Labels map[string]string `pulumi:"labels"`
}

// ServiceEntrySpecWorkloadSelectorInput is an input type that accepts ServiceEntrySpecWorkloadSelectorArgs and ServiceEntrySpecWorkloadSelectorOutput values.
// You can construct a concrete instance of `ServiceEntrySpecWorkloadSelectorInput` via:
//
//	ServiceEntrySpecWorkloadSelectorArgs{...}
type ServiceEntrySpecWorkloadSelectorInput interface {
	pulumi.Input

	ToServiceEntrySpecWorkloadSelectorOutput() ServiceEntrySpecWorkloadSelectorOutput
	ToServiceEntrySpecWorkloadSelectorOutputWithContext(context.Context) ServiceEntrySpecWorkloadSelectorOutput
}

// Applicable only for MESH_INTERNAL services.
type ServiceEntrySpecWorkloadSelectorArgs struct {
	// One or more labels that indicate a specific set of pods/VMs on which the configuration should be applied.
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (ServiceEntrySpecWorkloadSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEntrySpecWorkloadSelector)(nil)).Elem()
}

func (i ServiceEntrySpecWorkloadSelectorArgs) ToServiceEntrySpecWorkloadSelectorOutput() ServiceEntrySpecWorkloadSelectorOutput {
	return i.ToServiceEntrySpecWorkloadSelectorOutputWithContext(context.Background())
}

func (i ServiceEntrySpecWorkloadSelectorArgs) ToServiceEntrySpecWorkloadSelectorOutputWithContext(ctx context.Context) ServiceEntrySpecWorkloadSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEntrySpecWorkloadSelectorOutput)
}

func (i ServiceEntrySpecWorkloadSelectorArgs) ToServiceEntrySpecWorkloadSelectorPtrOutput() ServiceEntrySpecWorkloadSelectorPtrOutput {
	return i.ToServiceEntrySpecWorkloadSelectorPtrOutputWithContext(context.Background())
}

func (i ServiceEntrySpecWorkloadSelectorArgs) ToServiceEntrySpecWorkloadSelectorPtrOutputWithContext(ctx context.Context) ServiceEntrySpecWorkloadSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEntrySpecWorkloadSelectorOutput).ToServiceEntrySpecWorkloadSelectorPtrOutputWithContext(ctx)
}

// ServiceEntrySpecWorkloadSelectorPtrInput is an input type that accepts ServiceEntrySpecWorkloadSelectorArgs, ServiceEntrySpecWorkloadSelectorPtr and ServiceEntrySpecWorkloadSelectorPtrOutput values.
// You can construct a concrete instance of `ServiceEntrySpecWorkloadSelectorPtrInput` via:
//
//	        ServiceEntrySpecWorkloadSelectorArgs{...}
//
//	or:
//
//	        nil
type ServiceEntrySpecWorkloadSelectorPtrInput interface {
	pulumi.Input

	ToServiceEntrySpecWorkloadSelectorPtrOutput() ServiceEntrySpecWorkloadSelectorPtrOutput
	ToServiceEntrySpecWorkloadSelectorPtrOutputWithContext(context.Context) ServiceEntrySpecWorkloadSelectorPtrOutput
}

type serviceEntrySpecWorkloadSelectorPtrType ServiceEntrySpecWorkloadSelectorArgs

func ServiceEntrySpecWorkloadSelectorPtr(v *ServiceEntrySpecWorkloadSelectorArgs) ServiceEntrySpecWorkloadSelectorPtrInput {
	return (*serviceEntrySpecWorkloadSelectorPtrType)(v)
}

func (*serviceEntrySpecWorkloadSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEntrySpecWorkloadSelector)(nil)).Elem()
}

func (i *serviceEntrySpecWorkloadSelectorPtrType) ToServiceEntrySpecWorkloadSelectorPtrOutput() ServiceEntrySpecWorkloadSelectorPtrOutput {
	return i.ToServiceEntrySpecWorkloadSelectorPtrOutputWithContext(context.Background())
}

func (i *serviceEntrySpecWorkloadSelectorPtrType) ToServiceEntrySpecWorkloadSelectorPtrOutputWithContext(ctx context.Context) ServiceEntrySpecWorkloadSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceEntrySpecWorkloadSelectorPtrOutput)
}

// Applicable only for MESH_INTERNAL services.
type ServiceEntrySpecWorkloadSelectorOutput struct{ *pulumi.OutputState }

func (ServiceEntrySpecWorkloadSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceEntrySpecWorkloadSelector)(nil)).Elem()
}

func (o ServiceEntrySpecWorkloadSelectorOutput) ToServiceEntrySpecWorkloadSelectorOutput() ServiceEntrySpecWorkloadSelectorOutput {
	return o
}

func (o ServiceEntrySpecWorkloadSelectorOutput) ToServiceEntrySpecWorkloadSelectorOutputWithContext(ctx context.Context) ServiceEntrySpecWorkloadSelectorOutput {
	return o
}

func (o ServiceEntrySpecWorkloadSelectorOutput) ToServiceEntrySpecWorkloadSelectorPtrOutput() ServiceEntrySpecWorkloadSelectorPtrOutput {
	return o.ToServiceEntrySpecWorkloadSelectorPtrOutputWithContext(context.Background())
}

func (o ServiceEntrySpecWorkloadSelectorOutput) ToServiceEntrySpecWorkloadSelectorPtrOutputWithContext(ctx context.Context) ServiceEntrySpecWorkloadSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceEntrySpecWorkloadSelector) *ServiceEntrySpecWorkloadSelector {
		return &v
	}).(ServiceEntrySpecWorkloadSelectorPtrOutput)
}

// One or more labels that indicate a specific set of pods/VMs on which the configuration should be applied.
func (o ServiceEntrySpecWorkloadSelectorOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ServiceEntrySpecWorkloadSelector) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type ServiceEntrySpecWorkloadSelectorPtrOutput struct{ *pulumi.OutputState }

func (ServiceEntrySpecWorkloadSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceEntrySpecWorkloadSelector)(nil)).Elem()
}

func (o ServiceEntrySpecWorkloadSelectorPtrOutput) ToServiceEntrySpecWorkloadSelectorPtrOutput() ServiceEntrySpecWorkloadSelectorPtrOutput {
	return o
}

func (o ServiceEntrySpecWorkloadSelectorPtrOutput) ToServiceEntrySpecWorkloadSelectorPtrOutputWithContext(ctx context.Context) ServiceEntrySpecWorkloadSelectorPtrOutput {
	return o
}

func (o ServiceEntrySpecWorkloadSelectorPtrOutput) Elem() ServiceEntrySpecWorkloadSelectorOutput {
	return o.ApplyT(func(v *ServiceEntrySpecWorkloadSelector) ServiceEntrySpecWorkloadSelector {
		if v != nil {
			return *v
		}
		var ret ServiceEntrySpecWorkloadSelector
		return ret
	}).(ServiceEntrySpecWorkloadSelectorOutput)
}

// One or more labels that indicate a specific set of pods/VMs on which the configuration should be applied.
func (o ServiceEntrySpecWorkloadSelectorPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServiceEntrySpecWorkloadSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// One or more labels that indicate a specific set of pods/VMs on which the configuration should be applied.
type ServiceEntrySpecWorkloadSelectorLabels struct {
}

type SidecarType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Configuration affecting network reachability of a sidecar. See more details at: https://istio.io/docs/reference/config/networking/sidecar.html
	Spec   *SidecarSpec           `pulumi:"spec"`
	Status map[string]interface{} `pulumi:"status"`
}

// Configuration affecting network reachability of a sidecar. See more details at: https://istio.io/docs/reference/config/networking/sidecar.html
type SidecarSpec struct {
	// Egress specifies the configuration of the sidecar for processing outbound traffic from the attached workload instance to other services in the mesh.
	Egress []SidecarSpecEgress `pulumi:"egress"`
	// Settings controlling the volume of connections Envoy will accept from the network.
	InboundConnectionPool *SidecarSpecInboundConnectionPool `pulumi:"inboundConnectionPool"`
	// Ingress specifies the configuration of the sidecar for processing inbound traffic to the attached workload instance.
	Ingress []SidecarSpecIngress `pulumi:"ingress"`
	// Configuration for the outbound traffic policy.
	OutboundTrafficPolicy *SidecarSpecOutboundTrafficPolicy `pulumi:"outboundTrafficPolicy"`
	// Criteria used to select the specific set of pods/VMs on which this `Sidecar` configuration should be applied.
	WorkloadSelector *SidecarSpecWorkloadSelector `pulumi:"workloadSelector"`
}

// SidecarSpecInput is an input type that accepts SidecarSpecArgs and SidecarSpecOutput values.
// You can construct a concrete instance of `SidecarSpecInput` via:
//
//	SidecarSpecArgs{...}
type SidecarSpecInput interface {
	pulumi.Input

	ToSidecarSpecOutput() SidecarSpecOutput
	ToSidecarSpecOutputWithContext(context.Context) SidecarSpecOutput
}

// Configuration affecting network reachability of a sidecar. See more details at: https://istio.io/docs/reference/config/networking/sidecar.html
type SidecarSpecArgs struct {
	// Egress specifies the configuration of the sidecar for processing outbound traffic from the attached workload instance to other services in the mesh.
	Egress SidecarSpecEgressArrayInput `pulumi:"egress"`
	// Settings controlling the volume of connections Envoy will accept from the network.
	InboundConnectionPool SidecarSpecInboundConnectionPoolPtrInput `pulumi:"inboundConnectionPool"`
	// Ingress specifies the configuration of the sidecar for processing inbound traffic to the attached workload instance.
	Ingress SidecarSpecIngressArrayInput `pulumi:"ingress"`
	// Configuration for the outbound traffic policy.
	OutboundTrafficPolicy SidecarSpecOutboundTrafficPolicyPtrInput `pulumi:"outboundTrafficPolicy"`
	// Criteria used to select the specific set of pods/VMs on which this `Sidecar` configuration should be applied.
	WorkloadSelector SidecarSpecWorkloadSelectorPtrInput `pulumi:"workloadSelector"`
}

func (SidecarSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpec)(nil)).Elem()
}

func (i SidecarSpecArgs) ToSidecarSpecOutput() SidecarSpecOutput {
	return i.ToSidecarSpecOutputWithContext(context.Background())
}

func (i SidecarSpecArgs) ToSidecarSpecOutputWithContext(ctx context.Context) SidecarSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecOutput)
}

func (i SidecarSpecArgs) ToSidecarSpecPtrOutput() SidecarSpecPtrOutput {
	return i.ToSidecarSpecPtrOutputWithContext(context.Background())
}

func (i SidecarSpecArgs) ToSidecarSpecPtrOutputWithContext(ctx context.Context) SidecarSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecOutput).ToSidecarSpecPtrOutputWithContext(ctx)
}

// SidecarSpecPtrInput is an input type that accepts SidecarSpecArgs, SidecarSpecPtr and SidecarSpecPtrOutput values.
// You can construct a concrete instance of `SidecarSpecPtrInput` via:
//
//	        SidecarSpecArgs{...}
//
//	or:
//
//	        nil
type SidecarSpecPtrInput interface {
	pulumi.Input

	ToSidecarSpecPtrOutput() SidecarSpecPtrOutput
	ToSidecarSpecPtrOutputWithContext(context.Context) SidecarSpecPtrOutput
}

type sidecarSpecPtrType SidecarSpecArgs

func SidecarSpecPtr(v *SidecarSpecArgs) SidecarSpecPtrInput {
	return (*sidecarSpecPtrType)(v)
}

func (*sidecarSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpec)(nil)).Elem()
}

func (i *sidecarSpecPtrType) ToSidecarSpecPtrOutput() SidecarSpecPtrOutput {
	return i.ToSidecarSpecPtrOutputWithContext(context.Background())
}

func (i *sidecarSpecPtrType) ToSidecarSpecPtrOutputWithContext(ctx context.Context) SidecarSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecPtrOutput)
}

// Configuration affecting network reachability of a sidecar. See more details at: https://istio.io/docs/reference/config/networking/sidecar.html
type SidecarSpecOutput struct{ *pulumi.OutputState }

func (SidecarSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpec)(nil)).Elem()
}

func (o SidecarSpecOutput) ToSidecarSpecOutput() SidecarSpecOutput {
	return o
}

func (o SidecarSpecOutput) ToSidecarSpecOutputWithContext(ctx context.Context) SidecarSpecOutput {
	return o
}

func (o SidecarSpecOutput) ToSidecarSpecPtrOutput() SidecarSpecPtrOutput {
	return o.ToSidecarSpecPtrOutputWithContext(context.Background())
}

func (o SidecarSpecOutput) ToSidecarSpecPtrOutputWithContext(ctx context.Context) SidecarSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SidecarSpec) *SidecarSpec {
		return &v
	}).(SidecarSpecPtrOutput)
}

// Egress specifies the configuration of the sidecar for processing outbound traffic from the attached workload instance to other services in the mesh.
func (o SidecarSpecOutput) Egress() SidecarSpecEgressArrayOutput {
	return o.ApplyT(func(v SidecarSpec) []SidecarSpecEgress { return v.Egress }).(SidecarSpecEgressArrayOutput)
}

// Settings controlling the volume of connections Envoy will accept from the network.
func (o SidecarSpecOutput) InboundConnectionPool() SidecarSpecInboundConnectionPoolPtrOutput {
	return o.ApplyT(func(v SidecarSpec) *SidecarSpecInboundConnectionPool { return v.InboundConnectionPool }).(SidecarSpecInboundConnectionPoolPtrOutput)
}

// Ingress specifies the configuration of the sidecar for processing inbound traffic to the attached workload instance.
func (o SidecarSpecOutput) Ingress() SidecarSpecIngressArrayOutput {
	return o.ApplyT(func(v SidecarSpec) []SidecarSpecIngress { return v.Ingress }).(SidecarSpecIngressArrayOutput)
}

// Configuration for the outbound traffic policy.
func (o SidecarSpecOutput) OutboundTrafficPolicy() SidecarSpecOutboundTrafficPolicyPtrOutput {
	return o.ApplyT(func(v SidecarSpec) *SidecarSpecOutboundTrafficPolicy { return v.OutboundTrafficPolicy }).(SidecarSpecOutboundTrafficPolicyPtrOutput)
}

// Criteria used to select the specific set of pods/VMs on which this `Sidecar` configuration should be applied.
func (o SidecarSpecOutput) WorkloadSelector() SidecarSpecWorkloadSelectorPtrOutput {
	return o.ApplyT(func(v SidecarSpec) *SidecarSpecWorkloadSelector { return v.WorkloadSelector }).(SidecarSpecWorkloadSelectorPtrOutput)
}

type SidecarSpecPtrOutput struct{ *pulumi.OutputState }

func (SidecarSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpec)(nil)).Elem()
}

func (o SidecarSpecPtrOutput) ToSidecarSpecPtrOutput() SidecarSpecPtrOutput {
	return o
}

func (o SidecarSpecPtrOutput) ToSidecarSpecPtrOutputWithContext(ctx context.Context) SidecarSpecPtrOutput {
	return o
}

func (o SidecarSpecPtrOutput) Elem() SidecarSpecOutput {
	return o.ApplyT(func(v *SidecarSpec) SidecarSpec {
		if v != nil {
			return *v
		}
		var ret SidecarSpec
		return ret
	}).(SidecarSpecOutput)
}

// Egress specifies the configuration of the sidecar for processing outbound traffic from the attached workload instance to other services in the mesh.
func (o SidecarSpecPtrOutput) Egress() SidecarSpecEgressArrayOutput {
	return o.ApplyT(func(v *SidecarSpec) []SidecarSpecEgress {
		if v == nil {
			return nil
		}
		return v.Egress
	}).(SidecarSpecEgressArrayOutput)
}

// Settings controlling the volume of connections Envoy will accept from the network.
func (o SidecarSpecPtrOutput) InboundConnectionPool() SidecarSpecInboundConnectionPoolPtrOutput {
	return o.ApplyT(func(v *SidecarSpec) *SidecarSpecInboundConnectionPool {
		if v == nil {
			return nil
		}
		return v.InboundConnectionPool
	}).(SidecarSpecInboundConnectionPoolPtrOutput)
}

// Ingress specifies the configuration of the sidecar for processing inbound traffic to the attached workload instance.
func (o SidecarSpecPtrOutput) Ingress() SidecarSpecIngressArrayOutput {
	return o.ApplyT(func(v *SidecarSpec) []SidecarSpecIngress {
		if v == nil {
			return nil
		}
		return v.Ingress
	}).(SidecarSpecIngressArrayOutput)
}

// Configuration for the outbound traffic policy.
func (o SidecarSpecPtrOutput) OutboundTrafficPolicy() SidecarSpecOutboundTrafficPolicyPtrOutput {
	return o.ApplyT(func(v *SidecarSpec) *SidecarSpecOutboundTrafficPolicy {
		if v == nil {
			return nil
		}
		return v.OutboundTrafficPolicy
	}).(SidecarSpecOutboundTrafficPolicyPtrOutput)
}

// Criteria used to select the specific set of pods/VMs on which this `Sidecar` configuration should be applied.
func (o SidecarSpecPtrOutput) WorkloadSelector() SidecarSpecWorkloadSelectorPtrOutput {
	return o.ApplyT(func(v *SidecarSpec) *SidecarSpecWorkloadSelector {
		if v == nil {
			return nil
		}
		return v.WorkloadSelector
	}).(SidecarSpecWorkloadSelectorPtrOutput)
}

type SidecarSpecEgress struct {
	// The IP(IPv4 or IPv6) or the Unix domain socket to which the listener should be bound to.
	Bind *string `pulumi:"bind"`
	// When the bind address is an IP, the captureMode option dictates how traffic to the listener is expected to be captured (or not).
	//
	// Valid Options: DEFAULT, IPTABLES, NONE
	CaptureMode *string `pulumi:"captureMode"`
	// One or more service hosts exposed by the listener in `namespace/dnsName` format.
	Hosts []string `pulumi:"hosts"`
	// The port associated with the listener.
	Port *SidecarSpecEgressPort `pulumi:"port"`
}

// SidecarSpecEgressInput is an input type that accepts SidecarSpecEgressArgs and SidecarSpecEgressOutput values.
// You can construct a concrete instance of `SidecarSpecEgressInput` via:
//
//	SidecarSpecEgressArgs{...}
type SidecarSpecEgressInput interface {
	pulumi.Input

	ToSidecarSpecEgressOutput() SidecarSpecEgressOutput
	ToSidecarSpecEgressOutputWithContext(context.Context) SidecarSpecEgressOutput
}

type SidecarSpecEgressArgs struct {
	// The IP(IPv4 or IPv6) or the Unix domain socket to which the listener should be bound to.
	Bind pulumi.StringPtrInput `pulumi:"bind"`
	// When the bind address is an IP, the captureMode option dictates how traffic to the listener is expected to be captured (or not).
	//
	// Valid Options: DEFAULT, IPTABLES, NONE
	CaptureMode pulumi.StringPtrInput `pulumi:"captureMode"`
	// One or more service hosts exposed by the listener in `namespace/dnsName` format.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// The port associated with the listener.
	Port SidecarSpecEgressPortPtrInput `pulumi:"port"`
}

func (SidecarSpecEgressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecEgress)(nil)).Elem()
}

func (i SidecarSpecEgressArgs) ToSidecarSpecEgressOutput() SidecarSpecEgressOutput {
	return i.ToSidecarSpecEgressOutputWithContext(context.Background())
}

func (i SidecarSpecEgressArgs) ToSidecarSpecEgressOutputWithContext(ctx context.Context) SidecarSpecEgressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecEgressOutput)
}

// SidecarSpecEgressArrayInput is an input type that accepts SidecarSpecEgressArray and SidecarSpecEgressArrayOutput values.
// You can construct a concrete instance of `SidecarSpecEgressArrayInput` via:
//
//	SidecarSpecEgressArray{ SidecarSpecEgressArgs{...} }
type SidecarSpecEgressArrayInput interface {
	pulumi.Input

	ToSidecarSpecEgressArrayOutput() SidecarSpecEgressArrayOutput
	ToSidecarSpecEgressArrayOutputWithContext(context.Context) SidecarSpecEgressArrayOutput
}

type SidecarSpecEgressArray []SidecarSpecEgressInput

func (SidecarSpecEgressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SidecarSpecEgress)(nil)).Elem()
}

func (i SidecarSpecEgressArray) ToSidecarSpecEgressArrayOutput() SidecarSpecEgressArrayOutput {
	return i.ToSidecarSpecEgressArrayOutputWithContext(context.Background())
}

func (i SidecarSpecEgressArray) ToSidecarSpecEgressArrayOutputWithContext(ctx context.Context) SidecarSpecEgressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecEgressArrayOutput)
}

type SidecarSpecEgressOutput struct{ *pulumi.OutputState }

func (SidecarSpecEgressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecEgress)(nil)).Elem()
}

func (o SidecarSpecEgressOutput) ToSidecarSpecEgressOutput() SidecarSpecEgressOutput {
	return o
}

func (o SidecarSpecEgressOutput) ToSidecarSpecEgressOutputWithContext(ctx context.Context) SidecarSpecEgressOutput {
	return o
}

// The IP(IPv4 or IPv6) or the Unix domain socket to which the listener should be bound to.
func (o SidecarSpecEgressOutput) Bind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecEgress) *string { return v.Bind }).(pulumi.StringPtrOutput)
}

// When the bind address is an IP, the captureMode option dictates how traffic to the listener is expected to be captured (or not).
//
// Valid Options: DEFAULT, IPTABLES, NONE
func (o SidecarSpecEgressOutput) CaptureMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecEgress) *string { return v.CaptureMode }).(pulumi.StringPtrOutput)
}

// One or more service hosts exposed by the listener in `namespace/dnsName` format.
func (o SidecarSpecEgressOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SidecarSpecEgress) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// The port associated with the listener.
func (o SidecarSpecEgressOutput) Port() SidecarSpecEgressPortPtrOutput {
	return o.ApplyT(func(v SidecarSpecEgress) *SidecarSpecEgressPort { return v.Port }).(SidecarSpecEgressPortPtrOutput)
}

type SidecarSpecEgressArrayOutput struct{ *pulumi.OutputState }

func (SidecarSpecEgressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SidecarSpecEgress)(nil)).Elem()
}

func (o SidecarSpecEgressArrayOutput) ToSidecarSpecEgressArrayOutput() SidecarSpecEgressArrayOutput {
	return o
}

func (o SidecarSpecEgressArrayOutput) ToSidecarSpecEgressArrayOutputWithContext(ctx context.Context) SidecarSpecEgressArrayOutput {
	return o
}

func (o SidecarSpecEgressArrayOutput) Index(i pulumi.IntInput) SidecarSpecEgressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SidecarSpecEgress {
		return vs[0].([]SidecarSpecEgress)[vs[1].(int)]
	}).(SidecarSpecEgressOutput)
}

// The port associated with the listener.
type SidecarSpecEgressPort struct {
	// Label assigned to the port.
	Name *string `pulumi:"name"`
	// A valid non-negative integer port number.
	Number *int `pulumi:"number"`
	// The protocol exposed on the port.
	Protocol   *string `pulumi:"protocol"`
	TargetPort *int    `pulumi:"targetPort"`
}

// SidecarSpecEgressPortInput is an input type that accepts SidecarSpecEgressPortArgs and SidecarSpecEgressPortOutput values.
// You can construct a concrete instance of `SidecarSpecEgressPortInput` via:
//
//	SidecarSpecEgressPortArgs{...}
type SidecarSpecEgressPortInput interface {
	pulumi.Input

	ToSidecarSpecEgressPortOutput() SidecarSpecEgressPortOutput
	ToSidecarSpecEgressPortOutputWithContext(context.Context) SidecarSpecEgressPortOutput
}

// The port associated with the listener.
type SidecarSpecEgressPortArgs struct {
	// Label assigned to the port.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A valid non-negative integer port number.
	Number pulumi.IntPtrInput `pulumi:"number"`
	// The protocol exposed on the port.
	Protocol   pulumi.StringPtrInput `pulumi:"protocol"`
	TargetPort pulumi.IntPtrInput    `pulumi:"targetPort"`
}

func (SidecarSpecEgressPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecEgressPort)(nil)).Elem()
}

func (i SidecarSpecEgressPortArgs) ToSidecarSpecEgressPortOutput() SidecarSpecEgressPortOutput {
	return i.ToSidecarSpecEgressPortOutputWithContext(context.Background())
}

func (i SidecarSpecEgressPortArgs) ToSidecarSpecEgressPortOutputWithContext(ctx context.Context) SidecarSpecEgressPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecEgressPortOutput)
}

func (i SidecarSpecEgressPortArgs) ToSidecarSpecEgressPortPtrOutput() SidecarSpecEgressPortPtrOutput {
	return i.ToSidecarSpecEgressPortPtrOutputWithContext(context.Background())
}

func (i SidecarSpecEgressPortArgs) ToSidecarSpecEgressPortPtrOutputWithContext(ctx context.Context) SidecarSpecEgressPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecEgressPortOutput).ToSidecarSpecEgressPortPtrOutputWithContext(ctx)
}

// SidecarSpecEgressPortPtrInput is an input type that accepts SidecarSpecEgressPortArgs, SidecarSpecEgressPortPtr and SidecarSpecEgressPortPtrOutput values.
// You can construct a concrete instance of `SidecarSpecEgressPortPtrInput` via:
//
//	        SidecarSpecEgressPortArgs{...}
//
//	or:
//
//	        nil
type SidecarSpecEgressPortPtrInput interface {
	pulumi.Input

	ToSidecarSpecEgressPortPtrOutput() SidecarSpecEgressPortPtrOutput
	ToSidecarSpecEgressPortPtrOutputWithContext(context.Context) SidecarSpecEgressPortPtrOutput
}

type sidecarSpecEgressPortPtrType SidecarSpecEgressPortArgs

func SidecarSpecEgressPortPtr(v *SidecarSpecEgressPortArgs) SidecarSpecEgressPortPtrInput {
	return (*sidecarSpecEgressPortPtrType)(v)
}

func (*sidecarSpecEgressPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecEgressPort)(nil)).Elem()
}

func (i *sidecarSpecEgressPortPtrType) ToSidecarSpecEgressPortPtrOutput() SidecarSpecEgressPortPtrOutput {
	return i.ToSidecarSpecEgressPortPtrOutputWithContext(context.Background())
}

func (i *sidecarSpecEgressPortPtrType) ToSidecarSpecEgressPortPtrOutputWithContext(ctx context.Context) SidecarSpecEgressPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecEgressPortPtrOutput)
}

// The port associated with the listener.
type SidecarSpecEgressPortOutput struct{ *pulumi.OutputState }

func (SidecarSpecEgressPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecEgressPort)(nil)).Elem()
}

func (o SidecarSpecEgressPortOutput) ToSidecarSpecEgressPortOutput() SidecarSpecEgressPortOutput {
	return o
}

func (o SidecarSpecEgressPortOutput) ToSidecarSpecEgressPortOutputWithContext(ctx context.Context) SidecarSpecEgressPortOutput {
	return o
}

func (o SidecarSpecEgressPortOutput) ToSidecarSpecEgressPortPtrOutput() SidecarSpecEgressPortPtrOutput {
	return o.ToSidecarSpecEgressPortPtrOutputWithContext(context.Background())
}

func (o SidecarSpecEgressPortOutput) ToSidecarSpecEgressPortPtrOutputWithContext(ctx context.Context) SidecarSpecEgressPortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SidecarSpecEgressPort) *SidecarSpecEgressPort {
		return &v
	}).(SidecarSpecEgressPortPtrOutput)
}

// Label assigned to the port.
func (o SidecarSpecEgressPortOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecEgressPort) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A valid non-negative integer port number.
func (o SidecarSpecEgressPortOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SidecarSpecEgressPort) *int { return v.Number }).(pulumi.IntPtrOutput)
}

// The protocol exposed on the port.
func (o SidecarSpecEgressPortOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecEgressPort) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

func (o SidecarSpecEgressPortOutput) TargetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SidecarSpecEgressPort) *int { return v.TargetPort }).(pulumi.IntPtrOutput)
}

type SidecarSpecEgressPortPtrOutput struct{ *pulumi.OutputState }

func (SidecarSpecEgressPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecEgressPort)(nil)).Elem()
}

func (o SidecarSpecEgressPortPtrOutput) ToSidecarSpecEgressPortPtrOutput() SidecarSpecEgressPortPtrOutput {
	return o
}

func (o SidecarSpecEgressPortPtrOutput) ToSidecarSpecEgressPortPtrOutputWithContext(ctx context.Context) SidecarSpecEgressPortPtrOutput {
	return o
}

func (o SidecarSpecEgressPortPtrOutput) Elem() SidecarSpecEgressPortOutput {
	return o.ApplyT(func(v *SidecarSpecEgressPort) SidecarSpecEgressPort {
		if v != nil {
			return *v
		}
		var ret SidecarSpecEgressPort
		return ret
	}).(SidecarSpecEgressPortOutput)
}

// Label assigned to the port.
func (o SidecarSpecEgressPortPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecEgressPort) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// A valid non-negative integer port number.
func (o SidecarSpecEgressPortPtrOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SidecarSpecEgressPort) *int {
		if v == nil {
			return nil
		}
		return v.Number
	}).(pulumi.IntPtrOutput)
}

// The protocol exposed on the port.
func (o SidecarSpecEgressPortPtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecEgressPort) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

func (o SidecarSpecEgressPortPtrOutput) TargetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SidecarSpecEgressPort) *int {
		if v == nil {
			return nil
		}
		return v.TargetPort
	}).(pulumi.IntPtrOutput)
}

// Settings controlling the volume of connections Envoy will accept from the network.
type SidecarSpecInboundConnectionPool struct {
	// HTTP connection pool settings.
	Http *SidecarSpecInboundConnectionPoolHttp `pulumi:"http"`
	// Settings common to both HTTP and TCP upstream connections.
	Tcp *SidecarSpecInboundConnectionPoolTcp `pulumi:"tcp"`
}

// SidecarSpecInboundConnectionPoolInput is an input type that accepts SidecarSpecInboundConnectionPoolArgs and SidecarSpecInboundConnectionPoolOutput values.
// You can construct a concrete instance of `SidecarSpecInboundConnectionPoolInput` via:
//
//	SidecarSpecInboundConnectionPoolArgs{...}
type SidecarSpecInboundConnectionPoolInput interface {
	pulumi.Input

	ToSidecarSpecInboundConnectionPoolOutput() SidecarSpecInboundConnectionPoolOutput
	ToSidecarSpecInboundConnectionPoolOutputWithContext(context.Context) SidecarSpecInboundConnectionPoolOutput
}

// Settings controlling the volume of connections Envoy will accept from the network.
type SidecarSpecInboundConnectionPoolArgs struct {
	// HTTP connection pool settings.
	Http SidecarSpecInboundConnectionPoolHttpPtrInput `pulumi:"http"`
	// Settings common to both HTTP and TCP upstream connections.
	Tcp SidecarSpecInboundConnectionPoolTcpPtrInput `pulumi:"tcp"`
}

func (SidecarSpecInboundConnectionPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecInboundConnectionPool)(nil)).Elem()
}

func (i SidecarSpecInboundConnectionPoolArgs) ToSidecarSpecInboundConnectionPoolOutput() SidecarSpecInboundConnectionPoolOutput {
	return i.ToSidecarSpecInboundConnectionPoolOutputWithContext(context.Background())
}

func (i SidecarSpecInboundConnectionPoolArgs) ToSidecarSpecInboundConnectionPoolOutputWithContext(ctx context.Context) SidecarSpecInboundConnectionPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecInboundConnectionPoolOutput)
}

func (i SidecarSpecInboundConnectionPoolArgs) ToSidecarSpecInboundConnectionPoolPtrOutput() SidecarSpecInboundConnectionPoolPtrOutput {
	return i.ToSidecarSpecInboundConnectionPoolPtrOutputWithContext(context.Background())
}

func (i SidecarSpecInboundConnectionPoolArgs) ToSidecarSpecInboundConnectionPoolPtrOutputWithContext(ctx context.Context) SidecarSpecInboundConnectionPoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecInboundConnectionPoolOutput).ToSidecarSpecInboundConnectionPoolPtrOutputWithContext(ctx)
}

// SidecarSpecInboundConnectionPoolPtrInput is an input type that accepts SidecarSpecInboundConnectionPoolArgs, SidecarSpecInboundConnectionPoolPtr and SidecarSpecInboundConnectionPoolPtrOutput values.
// You can construct a concrete instance of `SidecarSpecInboundConnectionPoolPtrInput` via:
//
//	        SidecarSpecInboundConnectionPoolArgs{...}
//
//	or:
//
//	        nil
type SidecarSpecInboundConnectionPoolPtrInput interface {
	pulumi.Input

	ToSidecarSpecInboundConnectionPoolPtrOutput() SidecarSpecInboundConnectionPoolPtrOutput
	ToSidecarSpecInboundConnectionPoolPtrOutputWithContext(context.Context) SidecarSpecInboundConnectionPoolPtrOutput
}

type sidecarSpecInboundConnectionPoolPtrType SidecarSpecInboundConnectionPoolArgs

func SidecarSpecInboundConnectionPoolPtr(v *SidecarSpecInboundConnectionPoolArgs) SidecarSpecInboundConnectionPoolPtrInput {
	return (*sidecarSpecInboundConnectionPoolPtrType)(v)
}

func (*sidecarSpecInboundConnectionPoolPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecInboundConnectionPool)(nil)).Elem()
}

func (i *sidecarSpecInboundConnectionPoolPtrType) ToSidecarSpecInboundConnectionPoolPtrOutput() SidecarSpecInboundConnectionPoolPtrOutput {
	return i.ToSidecarSpecInboundConnectionPoolPtrOutputWithContext(context.Background())
}

func (i *sidecarSpecInboundConnectionPoolPtrType) ToSidecarSpecInboundConnectionPoolPtrOutputWithContext(ctx context.Context) SidecarSpecInboundConnectionPoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecInboundConnectionPoolPtrOutput)
}

// Settings controlling the volume of connections Envoy will accept from the network.
type SidecarSpecInboundConnectionPoolOutput struct{ *pulumi.OutputState }

func (SidecarSpecInboundConnectionPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecInboundConnectionPool)(nil)).Elem()
}

func (o SidecarSpecInboundConnectionPoolOutput) ToSidecarSpecInboundConnectionPoolOutput() SidecarSpecInboundConnectionPoolOutput {
	return o
}

func (o SidecarSpecInboundConnectionPoolOutput) ToSidecarSpecInboundConnectionPoolOutputWithContext(ctx context.Context) SidecarSpecInboundConnectionPoolOutput {
	return o
}

func (o SidecarSpecInboundConnectionPoolOutput) ToSidecarSpecInboundConnectionPoolPtrOutput() SidecarSpecInboundConnectionPoolPtrOutput {
	return o.ToSidecarSpecInboundConnectionPoolPtrOutputWithContext(context.Background())
}

func (o SidecarSpecInboundConnectionPoolOutput) ToSidecarSpecInboundConnectionPoolPtrOutputWithContext(ctx context.Context) SidecarSpecInboundConnectionPoolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SidecarSpecInboundConnectionPool) *SidecarSpecInboundConnectionPool {
		return &v
	}).(SidecarSpecInboundConnectionPoolPtrOutput)
}

// HTTP connection pool settings.
func (o SidecarSpecInboundConnectionPoolOutput) Http() SidecarSpecInboundConnectionPoolHttpPtrOutput {
	return o.ApplyT(func(v SidecarSpecInboundConnectionPool) *SidecarSpecInboundConnectionPoolHttp { return v.Http }).(SidecarSpecInboundConnectionPoolHttpPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
func (o SidecarSpecInboundConnectionPoolOutput) Tcp() SidecarSpecInboundConnectionPoolTcpPtrOutput {
	return o.ApplyT(func(v SidecarSpecInboundConnectionPool) *SidecarSpecInboundConnectionPoolTcp { return v.Tcp }).(SidecarSpecInboundConnectionPoolTcpPtrOutput)
}

type SidecarSpecInboundConnectionPoolPtrOutput struct{ *pulumi.OutputState }

func (SidecarSpecInboundConnectionPoolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecInboundConnectionPool)(nil)).Elem()
}

func (o SidecarSpecInboundConnectionPoolPtrOutput) ToSidecarSpecInboundConnectionPoolPtrOutput() SidecarSpecInboundConnectionPoolPtrOutput {
	return o
}

func (o SidecarSpecInboundConnectionPoolPtrOutput) ToSidecarSpecInboundConnectionPoolPtrOutputWithContext(ctx context.Context) SidecarSpecInboundConnectionPoolPtrOutput {
	return o
}

func (o SidecarSpecInboundConnectionPoolPtrOutput) Elem() SidecarSpecInboundConnectionPoolOutput {
	return o.ApplyT(func(v *SidecarSpecInboundConnectionPool) SidecarSpecInboundConnectionPool {
		if v != nil {
			return *v
		}
		var ret SidecarSpecInboundConnectionPool
		return ret
	}).(SidecarSpecInboundConnectionPoolOutput)
}

// HTTP connection pool settings.
func (o SidecarSpecInboundConnectionPoolPtrOutput) Http() SidecarSpecInboundConnectionPoolHttpPtrOutput {
	return o.ApplyT(func(v *SidecarSpecInboundConnectionPool) *SidecarSpecInboundConnectionPoolHttp {
		if v == nil {
			return nil
		}
		return v.Http
	}).(SidecarSpecInboundConnectionPoolHttpPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
func (o SidecarSpecInboundConnectionPoolPtrOutput) Tcp() SidecarSpecInboundConnectionPoolTcpPtrOutput {
	return o.ApplyT(func(v *SidecarSpecInboundConnectionPool) *SidecarSpecInboundConnectionPoolTcp {
		if v == nil {
			return nil
		}
		return v.Tcp
	}).(SidecarSpecInboundConnectionPoolTcpPtrOutput)
}

// HTTP connection pool settings.
type SidecarSpecInboundConnectionPoolHttp struct {
	// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
	//
	// Valid Options: DEFAULT, DO_NOT_UPGRADE, UPGRADE
	H2UpgradePolicy *string `pulumi:"h2UpgradePolicy"`
	// Maximum number of requests that will be queued while waiting for a ready connection pool connection.
	Http1MaxPendingRequests *int `pulumi:"http1MaxPendingRequests"`
	// Maximum number of active requests to a destination.
	Http2MaxRequests *int `pulumi:"http2MaxRequests"`
	// The idle timeout for upstream connection pool connections.
	IdleTimeout *string `pulumi:"idleTimeout"`
	// The maximum number of concurrent streams allowed for a peer on one HTTP/2 connection.
	MaxConcurrentStreams *int `pulumi:"maxConcurrentStreams"`
	// Maximum number of requests per connection to a backend.
	MaxRequestsPerConnection *int `pulumi:"maxRequestsPerConnection"`
	// Maximum number of retries that can be outstanding to all hosts in a cluster at a given time.
	MaxRetries *int `pulumi:"maxRetries"`
	// If set to true, client protocol will be preserved while initiating connection to backend.
	UseClientProtocol *bool `pulumi:"useClientProtocol"`
}

// SidecarSpecInboundConnectionPoolHttpInput is an input type that accepts SidecarSpecInboundConnectionPoolHttpArgs and SidecarSpecInboundConnectionPoolHttpOutput values.
// You can construct a concrete instance of `SidecarSpecInboundConnectionPoolHttpInput` via:
//
//	SidecarSpecInboundConnectionPoolHttpArgs{...}
type SidecarSpecInboundConnectionPoolHttpInput interface {
	pulumi.Input

	ToSidecarSpecInboundConnectionPoolHttpOutput() SidecarSpecInboundConnectionPoolHttpOutput
	ToSidecarSpecInboundConnectionPoolHttpOutputWithContext(context.Context) SidecarSpecInboundConnectionPoolHttpOutput
}

// HTTP connection pool settings.
type SidecarSpecInboundConnectionPoolHttpArgs struct {
	// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
	//
	// Valid Options: DEFAULT, DO_NOT_UPGRADE, UPGRADE
	H2UpgradePolicy pulumi.StringPtrInput `pulumi:"h2UpgradePolicy"`
	// Maximum number of requests that will be queued while waiting for a ready connection pool connection.
	Http1MaxPendingRequests pulumi.IntPtrInput `pulumi:"http1MaxPendingRequests"`
	// Maximum number of active requests to a destination.
	Http2MaxRequests pulumi.IntPtrInput `pulumi:"http2MaxRequests"`
	// The idle timeout for upstream connection pool connections.
	IdleTimeout pulumi.StringPtrInput `pulumi:"idleTimeout"`
	// The maximum number of concurrent streams allowed for a peer on one HTTP/2 connection.
	MaxConcurrentStreams pulumi.IntPtrInput `pulumi:"maxConcurrentStreams"`
	// Maximum number of requests per connection to a backend.
	MaxRequestsPerConnection pulumi.IntPtrInput `pulumi:"maxRequestsPerConnection"`
	// Maximum number of retries that can be outstanding to all hosts in a cluster at a given time.
	MaxRetries pulumi.IntPtrInput `pulumi:"maxRetries"`
	// If set to true, client protocol will be preserved while initiating connection to backend.
	UseClientProtocol pulumi.BoolPtrInput `pulumi:"useClientProtocol"`
}

func (SidecarSpecInboundConnectionPoolHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecInboundConnectionPoolHttp)(nil)).Elem()
}

func (i SidecarSpecInboundConnectionPoolHttpArgs) ToSidecarSpecInboundConnectionPoolHttpOutput() SidecarSpecInboundConnectionPoolHttpOutput {
	return i.ToSidecarSpecInboundConnectionPoolHttpOutputWithContext(context.Background())
}

func (i SidecarSpecInboundConnectionPoolHttpArgs) ToSidecarSpecInboundConnectionPoolHttpOutputWithContext(ctx context.Context) SidecarSpecInboundConnectionPoolHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecInboundConnectionPoolHttpOutput)
}

func (i SidecarSpecInboundConnectionPoolHttpArgs) ToSidecarSpecInboundConnectionPoolHttpPtrOutput() SidecarSpecInboundConnectionPoolHttpPtrOutput {
	return i.ToSidecarSpecInboundConnectionPoolHttpPtrOutputWithContext(context.Background())
}

func (i SidecarSpecInboundConnectionPoolHttpArgs) ToSidecarSpecInboundConnectionPoolHttpPtrOutputWithContext(ctx context.Context) SidecarSpecInboundConnectionPoolHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecInboundConnectionPoolHttpOutput).ToSidecarSpecInboundConnectionPoolHttpPtrOutputWithContext(ctx)
}

// SidecarSpecInboundConnectionPoolHttpPtrInput is an input type that accepts SidecarSpecInboundConnectionPoolHttpArgs, SidecarSpecInboundConnectionPoolHttpPtr and SidecarSpecInboundConnectionPoolHttpPtrOutput values.
// You can construct a concrete instance of `SidecarSpecInboundConnectionPoolHttpPtrInput` via:
//
//	        SidecarSpecInboundConnectionPoolHttpArgs{...}
//
//	or:
//
//	        nil
type SidecarSpecInboundConnectionPoolHttpPtrInput interface {
	pulumi.Input

	ToSidecarSpecInboundConnectionPoolHttpPtrOutput() SidecarSpecInboundConnectionPoolHttpPtrOutput
	ToSidecarSpecInboundConnectionPoolHttpPtrOutputWithContext(context.Context) SidecarSpecInboundConnectionPoolHttpPtrOutput
}

type sidecarSpecInboundConnectionPoolHttpPtrType SidecarSpecInboundConnectionPoolHttpArgs

func SidecarSpecInboundConnectionPoolHttpPtr(v *SidecarSpecInboundConnectionPoolHttpArgs) SidecarSpecInboundConnectionPoolHttpPtrInput {
	return (*sidecarSpecInboundConnectionPoolHttpPtrType)(v)
}

func (*sidecarSpecInboundConnectionPoolHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecInboundConnectionPoolHttp)(nil)).Elem()
}

func (i *sidecarSpecInboundConnectionPoolHttpPtrType) ToSidecarSpecInboundConnectionPoolHttpPtrOutput() SidecarSpecInboundConnectionPoolHttpPtrOutput {
	return i.ToSidecarSpecInboundConnectionPoolHttpPtrOutputWithContext(context.Background())
}

func (i *sidecarSpecInboundConnectionPoolHttpPtrType) ToSidecarSpecInboundConnectionPoolHttpPtrOutputWithContext(ctx context.Context) SidecarSpecInboundConnectionPoolHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecInboundConnectionPoolHttpPtrOutput)
}

// HTTP connection pool settings.
type SidecarSpecInboundConnectionPoolHttpOutput struct{ *pulumi.OutputState }

func (SidecarSpecInboundConnectionPoolHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecInboundConnectionPoolHttp)(nil)).Elem()
}

func (o SidecarSpecInboundConnectionPoolHttpOutput) ToSidecarSpecInboundConnectionPoolHttpOutput() SidecarSpecInboundConnectionPoolHttpOutput {
	return o
}

func (o SidecarSpecInboundConnectionPoolHttpOutput) ToSidecarSpecInboundConnectionPoolHttpOutputWithContext(ctx context.Context) SidecarSpecInboundConnectionPoolHttpOutput {
	return o
}

func (o SidecarSpecInboundConnectionPoolHttpOutput) ToSidecarSpecInboundConnectionPoolHttpPtrOutput() SidecarSpecInboundConnectionPoolHttpPtrOutput {
	return o.ToSidecarSpecInboundConnectionPoolHttpPtrOutputWithContext(context.Background())
}

func (o SidecarSpecInboundConnectionPoolHttpOutput) ToSidecarSpecInboundConnectionPoolHttpPtrOutputWithContext(ctx context.Context) SidecarSpecInboundConnectionPoolHttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SidecarSpecInboundConnectionPoolHttp) *SidecarSpecInboundConnectionPoolHttp {
		return &v
	}).(SidecarSpecInboundConnectionPoolHttpPtrOutput)
}

// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
//
// Valid Options: DEFAULT, DO_NOT_UPGRADE, UPGRADE
func (o SidecarSpecInboundConnectionPoolHttpOutput) H2UpgradePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecInboundConnectionPoolHttp) *string { return v.H2UpgradePolicy }).(pulumi.StringPtrOutput)
}

// Maximum number of requests that will be queued while waiting for a ready connection pool connection.
func (o SidecarSpecInboundConnectionPoolHttpOutput) Http1MaxPendingRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SidecarSpecInboundConnectionPoolHttp) *int { return v.Http1MaxPendingRequests }).(pulumi.IntPtrOutput)
}

// Maximum number of active requests to a destination.
func (o SidecarSpecInboundConnectionPoolHttpOutput) Http2MaxRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SidecarSpecInboundConnectionPoolHttp) *int { return v.Http2MaxRequests }).(pulumi.IntPtrOutput)
}

// The idle timeout for upstream connection pool connections.
func (o SidecarSpecInboundConnectionPoolHttpOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecInboundConnectionPoolHttp) *string { return v.IdleTimeout }).(pulumi.StringPtrOutput)
}

// The maximum number of concurrent streams allowed for a peer on one HTTP/2 connection.
func (o SidecarSpecInboundConnectionPoolHttpOutput) MaxConcurrentStreams() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SidecarSpecInboundConnectionPoolHttp) *int { return v.MaxConcurrentStreams }).(pulumi.IntPtrOutput)
}

// Maximum number of requests per connection to a backend.
func (o SidecarSpecInboundConnectionPoolHttpOutput) MaxRequestsPerConnection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SidecarSpecInboundConnectionPoolHttp) *int { return v.MaxRequestsPerConnection }).(pulumi.IntPtrOutput)
}

// Maximum number of retries that can be outstanding to all hosts in a cluster at a given time.
func (o SidecarSpecInboundConnectionPoolHttpOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SidecarSpecInboundConnectionPoolHttp) *int { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

// If set to true, client protocol will be preserved while initiating connection to backend.
func (o SidecarSpecInboundConnectionPoolHttpOutput) UseClientProtocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SidecarSpecInboundConnectionPoolHttp) *bool { return v.UseClientProtocol }).(pulumi.BoolPtrOutput)
}

type SidecarSpecInboundConnectionPoolHttpPtrOutput struct{ *pulumi.OutputState }

func (SidecarSpecInboundConnectionPoolHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecInboundConnectionPoolHttp)(nil)).Elem()
}

func (o SidecarSpecInboundConnectionPoolHttpPtrOutput) ToSidecarSpecInboundConnectionPoolHttpPtrOutput() SidecarSpecInboundConnectionPoolHttpPtrOutput {
	return o
}

func (o SidecarSpecInboundConnectionPoolHttpPtrOutput) ToSidecarSpecInboundConnectionPoolHttpPtrOutputWithContext(ctx context.Context) SidecarSpecInboundConnectionPoolHttpPtrOutput {
	return o
}

func (o SidecarSpecInboundConnectionPoolHttpPtrOutput) Elem() SidecarSpecInboundConnectionPoolHttpOutput {
	return o.ApplyT(func(v *SidecarSpecInboundConnectionPoolHttp) SidecarSpecInboundConnectionPoolHttp {
		if v != nil {
			return *v
		}
		var ret SidecarSpecInboundConnectionPoolHttp
		return ret
	}).(SidecarSpecInboundConnectionPoolHttpOutput)
}

// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
//
// Valid Options: DEFAULT, DO_NOT_UPGRADE, UPGRADE
func (o SidecarSpecInboundConnectionPoolHttpPtrOutput) H2UpgradePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecInboundConnectionPoolHttp) *string {
		if v == nil {
			return nil
		}
		return v.H2UpgradePolicy
	}).(pulumi.StringPtrOutput)
}

// Maximum number of requests that will be queued while waiting for a ready connection pool connection.
func (o SidecarSpecInboundConnectionPoolHttpPtrOutput) Http1MaxPendingRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SidecarSpecInboundConnectionPoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.Http1MaxPendingRequests
	}).(pulumi.IntPtrOutput)
}

// Maximum number of active requests to a destination.
func (o SidecarSpecInboundConnectionPoolHttpPtrOutput) Http2MaxRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SidecarSpecInboundConnectionPoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.Http2MaxRequests
	}).(pulumi.IntPtrOutput)
}

// The idle timeout for upstream connection pool connections.
func (o SidecarSpecInboundConnectionPoolHttpPtrOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecInboundConnectionPoolHttp) *string {
		if v == nil {
			return nil
		}
		return v.IdleTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum number of concurrent streams allowed for a peer on one HTTP/2 connection.
func (o SidecarSpecInboundConnectionPoolHttpPtrOutput) MaxConcurrentStreams() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SidecarSpecInboundConnectionPoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentStreams
	}).(pulumi.IntPtrOutput)
}

// Maximum number of requests per connection to a backend.
func (o SidecarSpecInboundConnectionPoolHttpPtrOutput) MaxRequestsPerConnection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SidecarSpecInboundConnectionPoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.MaxRequestsPerConnection
	}).(pulumi.IntPtrOutput)
}

// Maximum number of retries that can be outstanding to all hosts in a cluster at a given time.
func (o SidecarSpecInboundConnectionPoolHttpPtrOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SidecarSpecInboundConnectionPoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

// If set to true, client protocol will be preserved while initiating connection to backend.
func (o SidecarSpecInboundConnectionPoolHttpPtrOutput) UseClientProtocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SidecarSpecInboundConnectionPoolHttp) *bool {
		if v == nil {
			return nil
		}
		return v.UseClientProtocol
	}).(pulumi.BoolPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
type SidecarSpecInboundConnectionPoolTcp struct {
	// TCP connection timeout.
	ConnectTimeout *string `pulumi:"connectTimeout"`
	// The idle timeout for TCP connections.
	IdleTimeout *string `pulumi:"idleTimeout"`
	// The maximum duration of a connection.
	MaxConnectionDuration *string `pulumi:"maxConnectionDuration"`
	// Maximum number of HTTP1 /TCP connections to a destination host.
	MaxConnections *int `pulumi:"maxConnections"`
	// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
	TcpKeepalive *SidecarSpecInboundConnectionPoolTcpTcpKeepalive `pulumi:"tcpKeepalive"`
}

// SidecarSpecInboundConnectionPoolTcpInput is an input type that accepts SidecarSpecInboundConnectionPoolTcpArgs and SidecarSpecInboundConnectionPoolTcpOutput values.
// You can construct a concrete instance of `SidecarSpecInboundConnectionPoolTcpInput` via:
//
//	SidecarSpecInboundConnectionPoolTcpArgs{...}
type SidecarSpecInboundConnectionPoolTcpInput interface {
	pulumi.Input

	ToSidecarSpecInboundConnectionPoolTcpOutput() SidecarSpecInboundConnectionPoolTcpOutput
	ToSidecarSpecInboundConnectionPoolTcpOutputWithContext(context.Context) SidecarSpecInboundConnectionPoolTcpOutput
}

// Settings common to both HTTP and TCP upstream connections.
type SidecarSpecInboundConnectionPoolTcpArgs struct {
	// TCP connection timeout.
	ConnectTimeout pulumi.StringPtrInput `pulumi:"connectTimeout"`
	// The idle timeout for TCP connections.
	IdleTimeout pulumi.StringPtrInput `pulumi:"idleTimeout"`
	// The maximum duration of a connection.
	MaxConnectionDuration pulumi.StringPtrInput `pulumi:"maxConnectionDuration"`
	// Maximum number of HTTP1 /TCP connections to a destination host.
	MaxConnections pulumi.IntPtrInput `pulumi:"maxConnections"`
	// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
	TcpKeepalive SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrInput `pulumi:"tcpKeepalive"`
}

func (SidecarSpecInboundConnectionPoolTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecInboundConnectionPoolTcp)(nil)).Elem()
}

func (i SidecarSpecInboundConnectionPoolTcpArgs) ToSidecarSpecInboundConnectionPoolTcpOutput() SidecarSpecInboundConnectionPoolTcpOutput {
	return i.ToSidecarSpecInboundConnectionPoolTcpOutputWithContext(context.Background())
}

func (i SidecarSpecInboundConnectionPoolTcpArgs) ToSidecarSpecInboundConnectionPoolTcpOutputWithContext(ctx context.Context) SidecarSpecInboundConnectionPoolTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecInboundConnectionPoolTcpOutput)
}

func (i SidecarSpecInboundConnectionPoolTcpArgs) ToSidecarSpecInboundConnectionPoolTcpPtrOutput() SidecarSpecInboundConnectionPoolTcpPtrOutput {
	return i.ToSidecarSpecInboundConnectionPoolTcpPtrOutputWithContext(context.Background())
}

func (i SidecarSpecInboundConnectionPoolTcpArgs) ToSidecarSpecInboundConnectionPoolTcpPtrOutputWithContext(ctx context.Context) SidecarSpecInboundConnectionPoolTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecInboundConnectionPoolTcpOutput).ToSidecarSpecInboundConnectionPoolTcpPtrOutputWithContext(ctx)
}

// SidecarSpecInboundConnectionPoolTcpPtrInput is an input type that accepts SidecarSpecInboundConnectionPoolTcpArgs, SidecarSpecInboundConnectionPoolTcpPtr and SidecarSpecInboundConnectionPoolTcpPtrOutput values.
// You can construct a concrete instance of `SidecarSpecInboundConnectionPoolTcpPtrInput` via:
//
//	        SidecarSpecInboundConnectionPoolTcpArgs{...}
//
//	or:
//
//	        nil
type SidecarSpecInboundConnectionPoolTcpPtrInput interface {
	pulumi.Input

	ToSidecarSpecInboundConnectionPoolTcpPtrOutput() SidecarSpecInboundConnectionPoolTcpPtrOutput
	ToSidecarSpecInboundConnectionPoolTcpPtrOutputWithContext(context.Context) SidecarSpecInboundConnectionPoolTcpPtrOutput
}

type sidecarSpecInboundConnectionPoolTcpPtrType SidecarSpecInboundConnectionPoolTcpArgs

func SidecarSpecInboundConnectionPoolTcpPtr(v *SidecarSpecInboundConnectionPoolTcpArgs) SidecarSpecInboundConnectionPoolTcpPtrInput {
	return (*sidecarSpecInboundConnectionPoolTcpPtrType)(v)
}

func (*sidecarSpecInboundConnectionPoolTcpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecInboundConnectionPoolTcp)(nil)).Elem()
}

func (i *sidecarSpecInboundConnectionPoolTcpPtrType) ToSidecarSpecInboundConnectionPoolTcpPtrOutput() SidecarSpecInboundConnectionPoolTcpPtrOutput {
	return i.ToSidecarSpecInboundConnectionPoolTcpPtrOutputWithContext(context.Background())
}

func (i *sidecarSpecInboundConnectionPoolTcpPtrType) ToSidecarSpecInboundConnectionPoolTcpPtrOutputWithContext(ctx context.Context) SidecarSpecInboundConnectionPoolTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecInboundConnectionPoolTcpPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
type SidecarSpecInboundConnectionPoolTcpOutput struct{ *pulumi.OutputState }

func (SidecarSpecInboundConnectionPoolTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecInboundConnectionPoolTcp)(nil)).Elem()
}

func (o SidecarSpecInboundConnectionPoolTcpOutput) ToSidecarSpecInboundConnectionPoolTcpOutput() SidecarSpecInboundConnectionPoolTcpOutput {
	return o
}

func (o SidecarSpecInboundConnectionPoolTcpOutput) ToSidecarSpecInboundConnectionPoolTcpOutputWithContext(ctx context.Context) SidecarSpecInboundConnectionPoolTcpOutput {
	return o
}

func (o SidecarSpecInboundConnectionPoolTcpOutput) ToSidecarSpecInboundConnectionPoolTcpPtrOutput() SidecarSpecInboundConnectionPoolTcpPtrOutput {
	return o.ToSidecarSpecInboundConnectionPoolTcpPtrOutputWithContext(context.Background())
}

func (o SidecarSpecInboundConnectionPoolTcpOutput) ToSidecarSpecInboundConnectionPoolTcpPtrOutputWithContext(ctx context.Context) SidecarSpecInboundConnectionPoolTcpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SidecarSpecInboundConnectionPoolTcp) *SidecarSpecInboundConnectionPoolTcp {
		return &v
	}).(SidecarSpecInboundConnectionPoolTcpPtrOutput)
}

// TCP connection timeout.
func (o SidecarSpecInboundConnectionPoolTcpOutput) ConnectTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecInboundConnectionPoolTcp) *string { return v.ConnectTimeout }).(pulumi.StringPtrOutput)
}

// The idle timeout for TCP connections.
func (o SidecarSpecInboundConnectionPoolTcpOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecInboundConnectionPoolTcp) *string { return v.IdleTimeout }).(pulumi.StringPtrOutput)
}

// The maximum duration of a connection.
func (o SidecarSpecInboundConnectionPoolTcpOutput) MaxConnectionDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecInboundConnectionPoolTcp) *string { return v.MaxConnectionDuration }).(pulumi.StringPtrOutput)
}

// Maximum number of HTTP1 /TCP connections to a destination host.
func (o SidecarSpecInboundConnectionPoolTcpOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SidecarSpecInboundConnectionPoolTcp) *int { return v.MaxConnections }).(pulumi.IntPtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
func (o SidecarSpecInboundConnectionPoolTcpOutput) TcpKeepalive() SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput {
	return o.ApplyT(func(v SidecarSpecInboundConnectionPoolTcp) *SidecarSpecInboundConnectionPoolTcpTcpKeepalive {
		return v.TcpKeepalive
	}).(SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput)
}

type SidecarSpecInboundConnectionPoolTcpPtrOutput struct{ *pulumi.OutputState }

func (SidecarSpecInboundConnectionPoolTcpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecInboundConnectionPoolTcp)(nil)).Elem()
}

func (o SidecarSpecInboundConnectionPoolTcpPtrOutput) ToSidecarSpecInboundConnectionPoolTcpPtrOutput() SidecarSpecInboundConnectionPoolTcpPtrOutput {
	return o
}

func (o SidecarSpecInboundConnectionPoolTcpPtrOutput) ToSidecarSpecInboundConnectionPoolTcpPtrOutputWithContext(ctx context.Context) SidecarSpecInboundConnectionPoolTcpPtrOutput {
	return o
}

func (o SidecarSpecInboundConnectionPoolTcpPtrOutput) Elem() SidecarSpecInboundConnectionPoolTcpOutput {
	return o.ApplyT(func(v *SidecarSpecInboundConnectionPoolTcp) SidecarSpecInboundConnectionPoolTcp {
		if v != nil {
			return *v
		}
		var ret SidecarSpecInboundConnectionPoolTcp
		return ret
	}).(SidecarSpecInboundConnectionPoolTcpOutput)
}

// TCP connection timeout.
func (o SidecarSpecInboundConnectionPoolTcpPtrOutput) ConnectTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecInboundConnectionPoolTcp) *string {
		if v == nil {
			return nil
		}
		return v.ConnectTimeout
	}).(pulumi.StringPtrOutput)
}

// The idle timeout for TCP connections.
func (o SidecarSpecInboundConnectionPoolTcpPtrOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecInboundConnectionPoolTcp) *string {
		if v == nil {
			return nil
		}
		return v.IdleTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum duration of a connection.
func (o SidecarSpecInboundConnectionPoolTcpPtrOutput) MaxConnectionDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecInboundConnectionPoolTcp) *string {
		if v == nil {
			return nil
		}
		return v.MaxConnectionDuration
	}).(pulumi.StringPtrOutput)
}

// Maximum number of HTTP1 /TCP connections to a destination host.
func (o SidecarSpecInboundConnectionPoolTcpPtrOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SidecarSpecInboundConnectionPoolTcp) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnections
	}).(pulumi.IntPtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
func (o SidecarSpecInboundConnectionPoolTcpPtrOutput) TcpKeepalive() SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput {
	return o.ApplyT(func(v *SidecarSpecInboundConnectionPoolTcp) *SidecarSpecInboundConnectionPoolTcpTcpKeepalive {
		if v == nil {
			return nil
		}
		return v.TcpKeepalive
	}).(SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
type SidecarSpecInboundConnectionPoolTcpTcpKeepalive struct {
	// The time duration between keep-alive probes.
	Interval *string `pulumi:"interval"`
	// Maximum number of keepalive probes to send without response before deciding the connection is dead.
	Probes *int `pulumi:"probes"`
	// The time duration a connection needs to be idle before keep-alive probes start being sent.
	Time *string `pulumi:"time"`
}

// SidecarSpecInboundConnectionPoolTcpTcpKeepaliveInput is an input type that accepts SidecarSpecInboundConnectionPoolTcpTcpKeepaliveArgs and SidecarSpecInboundConnectionPoolTcpTcpKeepaliveOutput values.
// You can construct a concrete instance of `SidecarSpecInboundConnectionPoolTcpTcpKeepaliveInput` via:
//
//	SidecarSpecInboundConnectionPoolTcpTcpKeepaliveArgs{...}
type SidecarSpecInboundConnectionPoolTcpTcpKeepaliveInput interface {
	pulumi.Input

	ToSidecarSpecInboundConnectionPoolTcpTcpKeepaliveOutput() SidecarSpecInboundConnectionPoolTcpTcpKeepaliveOutput
	ToSidecarSpecInboundConnectionPoolTcpTcpKeepaliveOutputWithContext(context.Context) SidecarSpecInboundConnectionPoolTcpTcpKeepaliveOutput
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
type SidecarSpecInboundConnectionPoolTcpTcpKeepaliveArgs struct {
	// The time duration between keep-alive probes.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// Maximum number of keepalive probes to send without response before deciding the connection is dead.
	Probes pulumi.IntPtrInput `pulumi:"probes"`
	// The time duration a connection needs to be idle before keep-alive probes start being sent.
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (SidecarSpecInboundConnectionPoolTcpTcpKeepaliveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecInboundConnectionPoolTcpTcpKeepalive)(nil)).Elem()
}

func (i SidecarSpecInboundConnectionPoolTcpTcpKeepaliveArgs) ToSidecarSpecInboundConnectionPoolTcpTcpKeepaliveOutput() SidecarSpecInboundConnectionPoolTcpTcpKeepaliveOutput {
	return i.ToSidecarSpecInboundConnectionPoolTcpTcpKeepaliveOutputWithContext(context.Background())
}

func (i SidecarSpecInboundConnectionPoolTcpTcpKeepaliveArgs) ToSidecarSpecInboundConnectionPoolTcpTcpKeepaliveOutputWithContext(ctx context.Context) SidecarSpecInboundConnectionPoolTcpTcpKeepaliveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecInboundConnectionPoolTcpTcpKeepaliveOutput)
}

func (i SidecarSpecInboundConnectionPoolTcpTcpKeepaliveArgs) ToSidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput() SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput {
	return i.ToSidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutputWithContext(context.Background())
}

func (i SidecarSpecInboundConnectionPoolTcpTcpKeepaliveArgs) ToSidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutputWithContext(ctx context.Context) SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecInboundConnectionPoolTcpTcpKeepaliveOutput).ToSidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutputWithContext(ctx)
}

// SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrInput is an input type that accepts SidecarSpecInboundConnectionPoolTcpTcpKeepaliveArgs, SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtr and SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput values.
// You can construct a concrete instance of `SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrInput` via:
//
//	        SidecarSpecInboundConnectionPoolTcpTcpKeepaliveArgs{...}
//
//	or:
//
//	        nil
type SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrInput interface {
	pulumi.Input

	ToSidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput() SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput
	ToSidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutputWithContext(context.Context) SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput
}

type sidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrType SidecarSpecInboundConnectionPoolTcpTcpKeepaliveArgs

func SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtr(v *SidecarSpecInboundConnectionPoolTcpTcpKeepaliveArgs) SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrInput {
	return (*sidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrType)(v)
}

func (*sidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecInboundConnectionPoolTcpTcpKeepalive)(nil)).Elem()
}

func (i *sidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrType) ToSidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput() SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput {
	return i.ToSidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutputWithContext(context.Background())
}

func (i *sidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrType) ToSidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutputWithContext(ctx context.Context) SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
type SidecarSpecInboundConnectionPoolTcpTcpKeepaliveOutput struct{ *pulumi.OutputState }

func (SidecarSpecInboundConnectionPoolTcpTcpKeepaliveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecInboundConnectionPoolTcpTcpKeepalive)(nil)).Elem()
}

func (o SidecarSpecInboundConnectionPoolTcpTcpKeepaliveOutput) ToSidecarSpecInboundConnectionPoolTcpTcpKeepaliveOutput() SidecarSpecInboundConnectionPoolTcpTcpKeepaliveOutput {
	return o
}

func (o SidecarSpecInboundConnectionPoolTcpTcpKeepaliveOutput) ToSidecarSpecInboundConnectionPoolTcpTcpKeepaliveOutputWithContext(ctx context.Context) SidecarSpecInboundConnectionPoolTcpTcpKeepaliveOutput {
	return o
}

func (o SidecarSpecInboundConnectionPoolTcpTcpKeepaliveOutput) ToSidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput() SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput {
	return o.ToSidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutputWithContext(context.Background())
}

func (o SidecarSpecInboundConnectionPoolTcpTcpKeepaliveOutput) ToSidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutputWithContext(ctx context.Context) SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SidecarSpecInboundConnectionPoolTcpTcpKeepalive) *SidecarSpecInboundConnectionPoolTcpTcpKeepalive {
		return &v
	}).(SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput)
}

// The time duration between keep-alive probes.
func (o SidecarSpecInboundConnectionPoolTcpTcpKeepaliveOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecInboundConnectionPoolTcpTcpKeepalive) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// Maximum number of keepalive probes to send without response before deciding the connection is dead.
func (o SidecarSpecInboundConnectionPoolTcpTcpKeepaliveOutput) Probes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SidecarSpecInboundConnectionPoolTcpTcpKeepalive) *int { return v.Probes }).(pulumi.IntPtrOutput)
}

// The time duration a connection needs to be idle before keep-alive probes start being sent.
func (o SidecarSpecInboundConnectionPoolTcpTcpKeepaliveOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecInboundConnectionPoolTcpTcpKeepalive) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput struct{ *pulumi.OutputState }

func (SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecInboundConnectionPoolTcpTcpKeepalive)(nil)).Elem()
}

func (o SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput) ToSidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput() SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput {
	return o
}

func (o SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput) ToSidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutputWithContext(ctx context.Context) SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput {
	return o
}

func (o SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput) Elem() SidecarSpecInboundConnectionPoolTcpTcpKeepaliveOutput {
	return o.ApplyT(func(v *SidecarSpecInboundConnectionPoolTcpTcpKeepalive) SidecarSpecInboundConnectionPoolTcpTcpKeepalive {
		if v != nil {
			return *v
		}
		var ret SidecarSpecInboundConnectionPoolTcpTcpKeepalive
		return ret
	}).(SidecarSpecInboundConnectionPoolTcpTcpKeepaliveOutput)
}

// The time duration between keep-alive probes.
func (o SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecInboundConnectionPoolTcpTcpKeepalive) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// Maximum number of keepalive probes to send without response before deciding the connection is dead.
func (o SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput) Probes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SidecarSpecInboundConnectionPoolTcpTcpKeepalive) *int {
		if v == nil {
			return nil
		}
		return v.Probes
	}).(pulumi.IntPtrOutput)
}

// The time duration a connection needs to be idle before keep-alive probes start being sent.
func (o SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecInboundConnectionPoolTcpTcpKeepalive) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

type SidecarSpecIngress struct {
	// The IP(IPv4 or IPv6) to which the listener should be bound.
	Bind *string `pulumi:"bind"`
	// The captureMode option dictates how traffic to the listener is expected to be captured (or not).
	//
	// Valid Options: DEFAULT, IPTABLES, NONE
	CaptureMode *string `pulumi:"captureMode"`
	// Settings controlling the volume of connections Envoy will accept from the network.
	ConnectionPool *SidecarSpecIngressConnectionPool `pulumi:"connectionPool"`
	// The IP endpoint or Unix domain socket to which traffic should be forwarded to.
	DefaultEndpoint *string `pulumi:"defaultEndpoint"`
	// The port associated with the listener.
	Port SidecarSpecIngressPort `pulumi:"port"`
	// Set of TLS related options that will enable TLS termination on the sidecar for requests originating from outside the mesh.
	Tls *SidecarSpecIngressTls `pulumi:"tls"`
}

// SidecarSpecIngressInput is an input type that accepts SidecarSpecIngressArgs and SidecarSpecIngressOutput values.
// You can construct a concrete instance of `SidecarSpecIngressInput` via:
//
//	SidecarSpecIngressArgs{...}
type SidecarSpecIngressInput interface {
	pulumi.Input

	ToSidecarSpecIngressOutput() SidecarSpecIngressOutput
	ToSidecarSpecIngressOutputWithContext(context.Context) SidecarSpecIngressOutput
}

type SidecarSpecIngressArgs struct {
	// The IP(IPv4 or IPv6) to which the listener should be bound.
	Bind pulumi.StringPtrInput `pulumi:"bind"`
	// The captureMode option dictates how traffic to the listener is expected to be captured (or not).
	//
	// Valid Options: DEFAULT, IPTABLES, NONE
	CaptureMode pulumi.StringPtrInput `pulumi:"captureMode"`
	// Settings controlling the volume of connections Envoy will accept from the network.
	ConnectionPool SidecarSpecIngressConnectionPoolPtrInput `pulumi:"connectionPool"`
	// The IP endpoint or Unix domain socket to which traffic should be forwarded to.
	DefaultEndpoint pulumi.StringPtrInput `pulumi:"defaultEndpoint"`
	// The port associated with the listener.
	Port SidecarSpecIngressPortInput `pulumi:"port"`
	// Set of TLS related options that will enable TLS termination on the sidecar for requests originating from outside the mesh.
	Tls SidecarSpecIngressTlsPtrInput `pulumi:"tls"`
}

func (SidecarSpecIngressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecIngress)(nil)).Elem()
}

func (i SidecarSpecIngressArgs) ToSidecarSpecIngressOutput() SidecarSpecIngressOutput {
	return i.ToSidecarSpecIngressOutputWithContext(context.Background())
}

func (i SidecarSpecIngressArgs) ToSidecarSpecIngressOutputWithContext(ctx context.Context) SidecarSpecIngressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecIngressOutput)
}

// SidecarSpecIngressArrayInput is an input type that accepts SidecarSpecIngressArray and SidecarSpecIngressArrayOutput values.
// You can construct a concrete instance of `SidecarSpecIngressArrayInput` via:
//
//	SidecarSpecIngressArray{ SidecarSpecIngressArgs{...} }
type SidecarSpecIngressArrayInput interface {
	pulumi.Input

	ToSidecarSpecIngressArrayOutput() SidecarSpecIngressArrayOutput
	ToSidecarSpecIngressArrayOutputWithContext(context.Context) SidecarSpecIngressArrayOutput
}

type SidecarSpecIngressArray []SidecarSpecIngressInput

func (SidecarSpecIngressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SidecarSpecIngress)(nil)).Elem()
}

func (i SidecarSpecIngressArray) ToSidecarSpecIngressArrayOutput() SidecarSpecIngressArrayOutput {
	return i.ToSidecarSpecIngressArrayOutputWithContext(context.Background())
}

func (i SidecarSpecIngressArray) ToSidecarSpecIngressArrayOutputWithContext(ctx context.Context) SidecarSpecIngressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecIngressArrayOutput)
}

type SidecarSpecIngressOutput struct{ *pulumi.OutputState }

func (SidecarSpecIngressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecIngress)(nil)).Elem()
}

func (o SidecarSpecIngressOutput) ToSidecarSpecIngressOutput() SidecarSpecIngressOutput {
	return o
}

func (o SidecarSpecIngressOutput) ToSidecarSpecIngressOutputWithContext(ctx context.Context) SidecarSpecIngressOutput {
	return o
}

// The IP(IPv4 or IPv6) to which the listener should be bound.
func (o SidecarSpecIngressOutput) Bind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngress) *string { return v.Bind }).(pulumi.StringPtrOutput)
}

// The captureMode option dictates how traffic to the listener is expected to be captured (or not).
//
// Valid Options: DEFAULT, IPTABLES, NONE
func (o SidecarSpecIngressOutput) CaptureMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngress) *string { return v.CaptureMode }).(pulumi.StringPtrOutput)
}

// Settings controlling the volume of connections Envoy will accept from the network.
func (o SidecarSpecIngressOutput) ConnectionPool() SidecarSpecIngressConnectionPoolPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngress) *SidecarSpecIngressConnectionPool { return v.ConnectionPool }).(SidecarSpecIngressConnectionPoolPtrOutput)
}

// The IP endpoint or Unix domain socket to which traffic should be forwarded to.
func (o SidecarSpecIngressOutput) DefaultEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngress) *string { return v.DefaultEndpoint }).(pulumi.StringPtrOutput)
}

// The port associated with the listener.
func (o SidecarSpecIngressOutput) Port() SidecarSpecIngressPortOutput {
	return o.ApplyT(func(v SidecarSpecIngress) SidecarSpecIngressPort { return v.Port }).(SidecarSpecIngressPortOutput)
}

// Set of TLS related options that will enable TLS termination on the sidecar for requests originating from outside the mesh.
func (o SidecarSpecIngressOutput) Tls() SidecarSpecIngressTlsPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngress) *SidecarSpecIngressTls { return v.Tls }).(SidecarSpecIngressTlsPtrOutput)
}

type SidecarSpecIngressArrayOutput struct{ *pulumi.OutputState }

func (SidecarSpecIngressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SidecarSpecIngress)(nil)).Elem()
}

func (o SidecarSpecIngressArrayOutput) ToSidecarSpecIngressArrayOutput() SidecarSpecIngressArrayOutput {
	return o
}

func (o SidecarSpecIngressArrayOutput) ToSidecarSpecIngressArrayOutputWithContext(ctx context.Context) SidecarSpecIngressArrayOutput {
	return o
}

func (o SidecarSpecIngressArrayOutput) Index(i pulumi.IntInput) SidecarSpecIngressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SidecarSpecIngress {
		return vs[0].([]SidecarSpecIngress)[vs[1].(int)]
	}).(SidecarSpecIngressOutput)
}

// Settings controlling the volume of connections Envoy will accept from the network.
type SidecarSpecIngressConnectionPool struct {
	// HTTP connection pool settings.
	Http *SidecarSpecIngressConnectionPoolHttp `pulumi:"http"`
	// Settings common to both HTTP and TCP upstream connections.
	Tcp *SidecarSpecIngressConnectionPoolTcp `pulumi:"tcp"`
}

// SidecarSpecIngressConnectionPoolInput is an input type that accepts SidecarSpecIngressConnectionPoolArgs and SidecarSpecIngressConnectionPoolOutput values.
// You can construct a concrete instance of `SidecarSpecIngressConnectionPoolInput` via:
//
//	SidecarSpecIngressConnectionPoolArgs{...}
type SidecarSpecIngressConnectionPoolInput interface {
	pulumi.Input

	ToSidecarSpecIngressConnectionPoolOutput() SidecarSpecIngressConnectionPoolOutput
	ToSidecarSpecIngressConnectionPoolOutputWithContext(context.Context) SidecarSpecIngressConnectionPoolOutput
}

// Settings controlling the volume of connections Envoy will accept from the network.
type SidecarSpecIngressConnectionPoolArgs struct {
	// HTTP connection pool settings.
	Http SidecarSpecIngressConnectionPoolHttpPtrInput `pulumi:"http"`
	// Settings common to both HTTP and TCP upstream connections.
	Tcp SidecarSpecIngressConnectionPoolTcpPtrInput `pulumi:"tcp"`
}

func (SidecarSpecIngressConnectionPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecIngressConnectionPool)(nil)).Elem()
}

func (i SidecarSpecIngressConnectionPoolArgs) ToSidecarSpecIngressConnectionPoolOutput() SidecarSpecIngressConnectionPoolOutput {
	return i.ToSidecarSpecIngressConnectionPoolOutputWithContext(context.Background())
}

func (i SidecarSpecIngressConnectionPoolArgs) ToSidecarSpecIngressConnectionPoolOutputWithContext(ctx context.Context) SidecarSpecIngressConnectionPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecIngressConnectionPoolOutput)
}

func (i SidecarSpecIngressConnectionPoolArgs) ToSidecarSpecIngressConnectionPoolPtrOutput() SidecarSpecIngressConnectionPoolPtrOutput {
	return i.ToSidecarSpecIngressConnectionPoolPtrOutputWithContext(context.Background())
}

func (i SidecarSpecIngressConnectionPoolArgs) ToSidecarSpecIngressConnectionPoolPtrOutputWithContext(ctx context.Context) SidecarSpecIngressConnectionPoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecIngressConnectionPoolOutput).ToSidecarSpecIngressConnectionPoolPtrOutputWithContext(ctx)
}

// SidecarSpecIngressConnectionPoolPtrInput is an input type that accepts SidecarSpecIngressConnectionPoolArgs, SidecarSpecIngressConnectionPoolPtr and SidecarSpecIngressConnectionPoolPtrOutput values.
// You can construct a concrete instance of `SidecarSpecIngressConnectionPoolPtrInput` via:
//
//	        SidecarSpecIngressConnectionPoolArgs{...}
//
//	or:
//
//	        nil
type SidecarSpecIngressConnectionPoolPtrInput interface {
	pulumi.Input

	ToSidecarSpecIngressConnectionPoolPtrOutput() SidecarSpecIngressConnectionPoolPtrOutput
	ToSidecarSpecIngressConnectionPoolPtrOutputWithContext(context.Context) SidecarSpecIngressConnectionPoolPtrOutput
}

type sidecarSpecIngressConnectionPoolPtrType SidecarSpecIngressConnectionPoolArgs

func SidecarSpecIngressConnectionPoolPtr(v *SidecarSpecIngressConnectionPoolArgs) SidecarSpecIngressConnectionPoolPtrInput {
	return (*sidecarSpecIngressConnectionPoolPtrType)(v)
}

func (*sidecarSpecIngressConnectionPoolPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecIngressConnectionPool)(nil)).Elem()
}

func (i *sidecarSpecIngressConnectionPoolPtrType) ToSidecarSpecIngressConnectionPoolPtrOutput() SidecarSpecIngressConnectionPoolPtrOutput {
	return i.ToSidecarSpecIngressConnectionPoolPtrOutputWithContext(context.Background())
}

func (i *sidecarSpecIngressConnectionPoolPtrType) ToSidecarSpecIngressConnectionPoolPtrOutputWithContext(ctx context.Context) SidecarSpecIngressConnectionPoolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecIngressConnectionPoolPtrOutput)
}

// Settings controlling the volume of connections Envoy will accept from the network.
type SidecarSpecIngressConnectionPoolOutput struct{ *pulumi.OutputState }

func (SidecarSpecIngressConnectionPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecIngressConnectionPool)(nil)).Elem()
}

func (o SidecarSpecIngressConnectionPoolOutput) ToSidecarSpecIngressConnectionPoolOutput() SidecarSpecIngressConnectionPoolOutput {
	return o
}

func (o SidecarSpecIngressConnectionPoolOutput) ToSidecarSpecIngressConnectionPoolOutputWithContext(ctx context.Context) SidecarSpecIngressConnectionPoolOutput {
	return o
}

func (o SidecarSpecIngressConnectionPoolOutput) ToSidecarSpecIngressConnectionPoolPtrOutput() SidecarSpecIngressConnectionPoolPtrOutput {
	return o.ToSidecarSpecIngressConnectionPoolPtrOutputWithContext(context.Background())
}

func (o SidecarSpecIngressConnectionPoolOutput) ToSidecarSpecIngressConnectionPoolPtrOutputWithContext(ctx context.Context) SidecarSpecIngressConnectionPoolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SidecarSpecIngressConnectionPool) *SidecarSpecIngressConnectionPool {
		return &v
	}).(SidecarSpecIngressConnectionPoolPtrOutput)
}

// HTTP connection pool settings.
func (o SidecarSpecIngressConnectionPoolOutput) Http() SidecarSpecIngressConnectionPoolHttpPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressConnectionPool) *SidecarSpecIngressConnectionPoolHttp { return v.Http }).(SidecarSpecIngressConnectionPoolHttpPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
func (o SidecarSpecIngressConnectionPoolOutput) Tcp() SidecarSpecIngressConnectionPoolTcpPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressConnectionPool) *SidecarSpecIngressConnectionPoolTcp { return v.Tcp }).(SidecarSpecIngressConnectionPoolTcpPtrOutput)
}

type SidecarSpecIngressConnectionPoolPtrOutput struct{ *pulumi.OutputState }

func (SidecarSpecIngressConnectionPoolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecIngressConnectionPool)(nil)).Elem()
}

func (o SidecarSpecIngressConnectionPoolPtrOutput) ToSidecarSpecIngressConnectionPoolPtrOutput() SidecarSpecIngressConnectionPoolPtrOutput {
	return o
}

func (o SidecarSpecIngressConnectionPoolPtrOutput) ToSidecarSpecIngressConnectionPoolPtrOutputWithContext(ctx context.Context) SidecarSpecIngressConnectionPoolPtrOutput {
	return o
}

func (o SidecarSpecIngressConnectionPoolPtrOutput) Elem() SidecarSpecIngressConnectionPoolOutput {
	return o.ApplyT(func(v *SidecarSpecIngressConnectionPool) SidecarSpecIngressConnectionPool {
		if v != nil {
			return *v
		}
		var ret SidecarSpecIngressConnectionPool
		return ret
	}).(SidecarSpecIngressConnectionPoolOutput)
}

// HTTP connection pool settings.
func (o SidecarSpecIngressConnectionPoolPtrOutput) Http() SidecarSpecIngressConnectionPoolHttpPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressConnectionPool) *SidecarSpecIngressConnectionPoolHttp {
		if v == nil {
			return nil
		}
		return v.Http
	}).(SidecarSpecIngressConnectionPoolHttpPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
func (o SidecarSpecIngressConnectionPoolPtrOutput) Tcp() SidecarSpecIngressConnectionPoolTcpPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressConnectionPool) *SidecarSpecIngressConnectionPoolTcp {
		if v == nil {
			return nil
		}
		return v.Tcp
	}).(SidecarSpecIngressConnectionPoolTcpPtrOutput)
}

// HTTP connection pool settings.
type SidecarSpecIngressConnectionPoolHttp struct {
	// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
	//
	// Valid Options: DEFAULT, DO_NOT_UPGRADE, UPGRADE
	H2UpgradePolicy *string `pulumi:"h2UpgradePolicy"`
	// Maximum number of requests that will be queued while waiting for a ready connection pool connection.
	Http1MaxPendingRequests *int `pulumi:"http1MaxPendingRequests"`
	// Maximum number of active requests to a destination.
	Http2MaxRequests *int `pulumi:"http2MaxRequests"`
	// The idle timeout for upstream connection pool connections.
	IdleTimeout *string `pulumi:"idleTimeout"`
	// The maximum number of concurrent streams allowed for a peer on one HTTP/2 connection.
	MaxConcurrentStreams *int `pulumi:"maxConcurrentStreams"`
	// Maximum number of requests per connection to a backend.
	MaxRequestsPerConnection *int `pulumi:"maxRequestsPerConnection"`
	// Maximum number of retries that can be outstanding to all hosts in a cluster at a given time.
	MaxRetries *int `pulumi:"maxRetries"`
	// If set to true, client protocol will be preserved while initiating connection to backend.
	UseClientProtocol *bool `pulumi:"useClientProtocol"`
}

// SidecarSpecIngressConnectionPoolHttpInput is an input type that accepts SidecarSpecIngressConnectionPoolHttpArgs and SidecarSpecIngressConnectionPoolHttpOutput values.
// You can construct a concrete instance of `SidecarSpecIngressConnectionPoolHttpInput` via:
//
//	SidecarSpecIngressConnectionPoolHttpArgs{...}
type SidecarSpecIngressConnectionPoolHttpInput interface {
	pulumi.Input

	ToSidecarSpecIngressConnectionPoolHttpOutput() SidecarSpecIngressConnectionPoolHttpOutput
	ToSidecarSpecIngressConnectionPoolHttpOutputWithContext(context.Context) SidecarSpecIngressConnectionPoolHttpOutput
}

// HTTP connection pool settings.
type SidecarSpecIngressConnectionPoolHttpArgs struct {
	// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
	//
	// Valid Options: DEFAULT, DO_NOT_UPGRADE, UPGRADE
	H2UpgradePolicy pulumi.StringPtrInput `pulumi:"h2UpgradePolicy"`
	// Maximum number of requests that will be queued while waiting for a ready connection pool connection.
	Http1MaxPendingRequests pulumi.IntPtrInput `pulumi:"http1MaxPendingRequests"`
	// Maximum number of active requests to a destination.
	Http2MaxRequests pulumi.IntPtrInput `pulumi:"http2MaxRequests"`
	// The idle timeout for upstream connection pool connections.
	IdleTimeout pulumi.StringPtrInput `pulumi:"idleTimeout"`
	// The maximum number of concurrent streams allowed for a peer on one HTTP/2 connection.
	MaxConcurrentStreams pulumi.IntPtrInput `pulumi:"maxConcurrentStreams"`
	// Maximum number of requests per connection to a backend.
	MaxRequestsPerConnection pulumi.IntPtrInput `pulumi:"maxRequestsPerConnection"`
	// Maximum number of retries that can be outstanding to all hosts in a cluster at a given time.
	MaxRetries pulumi.IntPtrInput `pulumi:"maxRetries"`
	// If set to true, client protocol will be preserved while initiating connection to backend.
	UseClientProtocol pulumi.BoolPtrInput `pulumi:"useClientProtocol"`
}

func (SidecarSpecIngressConnectionPoolHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecIngressConnectionPoolHttp)(nil)).Elem()
}

func (i SidecarSpecIngressConnectionPoolHttpArgs) ToSidecarSpecIngressConnectionPoolHttpOutput() SidecarSpecIngressConnectionPoolHttpOutput {
	return i.ToSidecarSpecIngressConnectionPoolHttpOutputWithContext(context.Background())
}

func (i SidecarSpecIngressConnectionPoolHttpArgs) ToSidecarSpecIngressConnectionPoolHttpOutputWithContext(ctx context.Context) SidecarSpecIngressConnectionPoolHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecIngressConnectionPoolHttpOutput)
}

func (i SidecarSpecIngressConnectionPoolHttpArgs) ToSidecarSpecIngressConnectionPoolHttpPtrOutput() SidecarSpecIngressConnectionPoolHttpPtrOutput {
	return i.ToSidecarSpecIngressConnectionPoolHttpPtrOutputWithContext(context.Background())
}

func (i SidecarSpecIngressConnectionPoolHttpArgs) ToSidecarSpecIngressConnectionPoolHttpPtrOutputWithContext(ctx context.Context) SidecarSpecIngressConnectionPoolHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecIngressConnectionPoolHttpOutput).ToSidecarSpecIngressConnectionPoolHttpPtrOutputWithContext(ctx)
}

// SidecarSpecIngressConnectionPoolHttpPtrInput is an input type that accepts SidecarSpecIngressConnectionPoolHttpArgs, SidecarSpecIngressConnectionPoolHttpPtr and SidecarSpecIngressConnectionPoolHttpPtrOutput values.
// You can construct a concrete instance of `SidecarSpecIngressConnectionPoolHttpPtrInput` via:
//
//	        SidecarSpecIngressConnectionPoolHttpArgs{...}
//
//	or:
//
//	        nil
type SidecarSpecIngressConnectionPoolHttpPtrInput interface {
	pulumi.Input

	ToSidecarSpecIngressConnectionPoolHttpPtrOutput() SidecarSpecIngressConnectionPoolHttpPtrOutput
	ToSidecarSpecIngressConnectionPoolHttpPtrOutputWithContext(context.Context) SidecarSpecIngressConnectionPoolHttpPtrOutput
}

type sidecarSpecIngressConnectionPoolHttpPtrType SidecarSpecIngressConnectionPoolHttpArgs

func SidecarSpecIngressConnectionPoolHttpPtr(v *SidecarSpecIngressConnectionPoolHttpArgs) SidecarSpecIngressConnectionPoolHttpPtrInput {
	return (*sidecarSpecIngressConnectionPoolHttpPtrType)(v)
}

func (*sidecarSpecIngressConnectionPoolHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecIngressConnectionPoolHttp)(nil)).Elem()
}

func (i *sidecarSpecIngressConnectionPoolHttpPtrType) ToSidecarSpecIngressConnectionPoolHttpPtrOutput() SidecarSpecIngressConnectionPoolHttpPtrOutput {
	return i.ToSidecarSpecIngressConnectionPoolHttpPtrOutputWithContext(context.Background())
}

func (i *sidecarSpecIngressConnectionPoolHttpPtrType) ToSidecarSpecIngressConnectionPoolHttpPtrOutputWithContext(ctx context.Context) SidecarSpecIngressConnectionPoolHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecIngressConnectionPoolHttpPtrOutput)
}

// HTTP connection pool settings.
type SidecarSpecIngressConnectionPoolHttpOutput struct{ *pulumi.OutputState }

func (SidecarSpecIngressConnectionPoolHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecIngressConnectionPoolHttp)(nil)).Elem()
}

func (o SidecarSpecIngressConnectionPoolHttpOutput) ToSidecarSpecIngressConnectionPoolHttpOutput() SidecarSpecIngressConnectionPoolHttpOutput {
	return o
}

func (o SidecarSpecIngressConnectionPoolHttpOutput) ToSidecarSpecIngressConnectionPoolHttpOutputWithContext(ctx context.Context) SidecarSpecIngressConnectionPoolHttpOutput {
	return o
}

func (o SidecarSpecIngressConnectionPoolHttpOutput) ToSidecarSpecIngressConnectionPoolHttpPtrOutput() SidecarSpecIngressConnectionPoolHttpPtrOutput {
	return o.ToSidecarSpecIngressConnectionPoolHttpPtrOutputWithContext(context.Background())
}

func (o SidecarSpecIngressConnectionPoolHttpOutput) ToSidecarSpecIngressConnectionPoolHttpPtrOutputWithContext(ctx context.Context) SidecarSpecIngressConnectionPoolHttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SidecarSpecIngressConnectionPoolHttp) *SidecarSpecIngressConnectionPoolHttp {
		return &v
	}).(SidecarSpecIngressConnectionPoolHttpPtrOutput)
}

// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
//
// Valid Options: DEFAULT, DO_NOT_UPGRADE, UPGRADE
func (o SidecarSpecIngressConnectionPoolHttpOutput) H2UpgradePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressConnectionPoolHttp) *string { return v.H2UpgradePolicy }).(pulumi.StringPtrOutput)
}

// Maximum number of requests that will be queued while waiting for a ready connection pool connection.
func (o SidecarSpecIngressConnectionPoolHttpOutput) Http1MaxPendingRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressConnectionPoolHttp) *int { return v.Http1MaxPendingRequests }).(pulumi.IntPtrOutput)
}

// Maximum number of active requests to a destination.
func (o SidecarSpecIngressConnectionPoolHttpOutput) Http2MaxRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressConnectionPoolHttp) *int { return v.Http2MaxRequests }).(pulumi.IntPtrOutput)
}

// The idle timeout for upstream connection pool connections.
func (o SidecarSpecIngressConnectionPoolHttpOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressConnectionPoolHttp) *string { return v.IdleTimeout }).(pulumi.StringPtrOutput)
}

// The maximum number of concurrent streams allowed for a peer on one HTTP/2 connection.
func (o SidecarSpecIngressConnectionPoolHttpOutput) MaxConcurrentStreams() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressConnectionPoolHttp) *int { return v.MaxConcurrentStreams }).(pulumi.IntPtrOutput)
}

// Maximum number of requests per connection to a backend.
func (o SidecarSpecIngressConnectionPoolHttpOutput) MaxRequestsPerConnection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressConnectionPoolHttp) *int { return v.MaxRequestsPerConnection }).(pulumi.IntPtrOutput)
}

// Maximum number of retries that can be outstanding to all hosts in a cluster at a given time.
func (o SidecarSpecIngressConnectionPoolHttpOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressConnectionPoolHttp) *int { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

// If set to true, client protocol will be preserved while initiating connection to backend.
func (o SidecarSpecIngressConnectionPoolHttpOutput) UseClientProtocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressConnectionPoolHttp) *bool { return v.UseClientProtocol }).(pulumi.BoolPtrOutput)
}

type SidecarSpecIngressConnectionPoolHttpPtrOutput struct{ *pulumi.OutputState }

func (SidecarSpecIngressConnectionPoolHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecIngressConnectionPoolHttp)(nil)).Elem()
}

func (o SidecarSpecIngressConnectionPoolHttpPtrOutput) ToSidecarSpecIngressConnectionPoolHttpPtrOutput() SidecarSpecIngressConnectionPoolHttpPtrOutput {
	return o
}

func (o SidecarSpecIngressConnectionPoolHttpPtrOutput) ToSidecarSpecIngressConnectionPoolHttpPtrOutputWithContext(ctx context.Context) SidecarSpecIngressConnectionPoolHttpPtrOutput {
	return o
}

func (o SidecarSpecIngressConnectionPoolHttpPtrOutput) Elem() SidecarSpecIngressConnectionPoolHttpOutput {
	return o.ApplyT(func(v *SidecarSpecIngressConnectionPoolHttp) SidecarSpecIngressConnectionPoolHttp {
		if v != nil {
			return *v
		}
		var ret SidecarSpecIngressConnectionPoolHttp
		return ret
	}).(SidecarSpecIngressConnectionPoolHttpOutput)
}

// Specify if http1.1 connection should be upgraded to http2 for the associated destination.
//
// Valid Options: DEFAULT, DO_NOT_UPGRADE, UPGRADE
func (o SidecarSpecIngressConnectionPoolHttpPtrOutput) H2UpgradePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressConnectionPoolHttp) *string {
		if v == nil {
			return nil
		}
		return v.H2UpgradePolicy
	}).(pulumi.StringPtrOutput)
}

// Maximum number of requests that will be queued while waiting for a ready connection pool connection.
func (o SidecarSpecIngressConnectionPoolHttpPtrOutput) Http1MaxPendingRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressConnectionPoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.Http1MaxPendingRequests
	}).(pulumi.IntPtrOutput)
}

// Maximum number of active requests to a destination.
func (o SidecarSpecIngressConnectionPoolHttpPtrOutput) Http2MaxRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressConnectionPoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.Http2MaxRequests
	}).(pulumi.IntPtrOutput)
}

// The idle timeout for upstream connection pool connections.
func (o SidecarSpecIngressConnectionPoolHttpPtrOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressConnectionPoolHttp) *string {
		if v == nil {
			return nil
		}
		return v.IdleTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum number of concurrent streams allowed for a peer on one HTTP/2 connection.
func (o SidecarSpecIngressConnectionPoolHttpPtrOutput) MaxConcurrentStreams() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressConnectionPoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentStreams
	}).(pulumi.IntPtrOutput)
}

// Maximum number of requests per connection to a backend.
func (o SidecarSpecIngressConnectionPoolHttpPtrOutput) MaxRequestsPerConnection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressConnectionPoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.MaxRequestsPerConnection
	}).(pulumi.IntPtrOutput)
}

// Maximum number of retries that can be outstanding to all hosts in a cluster at a given time.
func (o SidecarSpecIngressConnectionPoolHttpPtrOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressConnectionPoolHttp) *int {
		if v == nil {
			return nil
		}
		return v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

// If set to true, client protocol will be preserved while initiating connection to backend.
func (o SidecarSpecIngressConnectionPoolHttpPtrOutput) UseClientProtocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressConnectionPoolHttp) *bool {
		if v == nil {
			return nil
		}
		return v.UseClientProtocol
	}).(pulumi.BoolPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
type SidecarSpecIngressConnectionPoolTcp struct {
	// TCP connection timeout.
	ConnectTimeout *string `pulumi:"connectTimeout"`
	// The idle timeout for TCP connections.
	IdleTimeout *string `pulumi:"idleTimeout"`
	// The maximum duration of a connection.
	MaxConnectionDuration *string `pulumi:"maxConnectionDuration"`
	// Maximum number of HTTP1 /TCP connections to a destination host.
	MaxConnections *int `pulumi:"maxConnections"`
	// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
	TcpKeepalive *SidecarSpecIngressConnectionPoolTcpTcpKeepalive `pulumi:"tcpKeepalive"`
}

// SidecarSpecIngressConnectionPoolTcpInput is an input type that accepts SidecarSpecIngressConnectionPoolTcpArgs and SidecarSpecIngressConnectionPoolTcpOutput values.
// You can construct a concrete instance of `SidecarSpecIngressConnectionPoolTcpInput` via:
//
//	SidecarSpecIngressConnectionPoolTcpArgs{...}
type SidecarSpecIngressConnectionPoolTcpInput interface {
	pulumi.Input

	ToSidecarSpecIngressConnectionPoolTcpOutput() SidecarSpecIngressConnectionPoolTcpOutput
	ToSidecarSpecIngressConnectionPoolTcpOutputWithContext(context.Context) SidecarSpecIngressConnectionPoolTcpOutput
}

// Settings common to both HTTP and TCP upstream connections.
type SidecarSpecIngressConnectionPoolTcpArgs struct {
	// TCP connection timeout.
	ConnectTimeout pulumi.StringPtrInput `pulumi:"connectTimeout"`
	// The idle timeout for TCP connections.
	IdleTimeout pulumi.StringPtrInput `pulumi:"idleTimeout"`
	// The maximum duration of a connection.
	MaxConnectionDuration pulumi.StringPtrInput `pulumi:"maxConnectionDuration"`
	// Maximum number of HTTP1 /TCP connections to a destination host.
	MaxConnections pulumi.IntPtrInput `pulumi:"maxConnections"`
	// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
	TcpKeepalive SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrInput `pulumi:"tcpKeepalive"`
}

func (SidecarSpecIngressConnectionPoolTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecIngressConnectionPoolTcp)(nil)).Elem()
}

func (i SidecarSpecIngressConnectionPoolTcpArgs) ToSidecarSpecIngressConnectionPoolTcpOutput() SidecarSpecIngressConnectionPoolTcpOutput {
	return i.ToSidecarSpecIngressConnectionPoolTcpOutputWithContext(context.Background())
}

func (i SidecarSpecIngressConnectionPoolTcpArgs) ToSidecarSpecIngressConnectionPoolTcpOutputWithContext(ctx context.Context) SidecarSpecIngressConnectionPoolTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecIngressConnectionPoolTcpOutput)
}

func (i SidecarSpecIngressConnectionPoolTcpArgs) ToSidecarSpecIngressConnectionPoolTcpPtrOutput() SidecarSpecIngressConnectionPoolTcpPtrOutput {
	return i.ToSidecarSpecIngressConnectionPoolTcpPtrOutputWithContext(context.Background())
}

func (i SidecarSpecIngressConnectionPoolTcpArgs) ToSidecarSpecIngressConnectionPoolTcpPtrOutputWithContext(ctx context.Context) SidecarSpecIngressConnectionPoolTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecIngressConnectionPoolTcpOutput).ToSidecarSpecIngressConnectionPoolTcpPtrOutputWithContext(ctx)
}

// SidecarSpecIngressConnectionPoolTcpPtrInput is an input type that accepts SidecarSpecIngressConnectionPoolTcpArgs, SidecarSpecIngressConnectionPoolTcpPtr and SidecarSpecIngressConnectionPoolTcpPtrOutput values.
// You can construct a concrete instance of `SidecarSpecIngressConnectionPoolTcpPtrInput` via:
//
//	        SidecarSpecIngressConnectionPoolTcpArgs{...}
//
//	or:
//
//	        nil
type SidecarSpecIngressConnectionPoolTcpPtrInput interface {
	pulumi.Input

	ToSidecarSpecIngressConnectionPoolTcpPtrOutput() SidecarSpecIngressConnectionPoolTcpPtrOutput
	ToSidecarSpecIngressConnectionPoolTcpPtrOutputWithContext(context.Context) SidecarSpecIngressConnectionPoolTcpPtrOutput
}

type sidecarSpecIngressConnectionPoolTcpPtrType SidecarSpecIngressConnectionPoolTcpArgs

func SidecarSpecIngressConnectionPoolTcpPtr(v *SidecarSpecIngressConnectionPoolTcpArgs) SidecarSpecIngressConnectionPoolTcpPtrInput {
	return (*sidecarSpecIngressConnectionPoolTcpPtrType)(v)
}

func (*sidecarSpecIngressConnectionPoolTcpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecIngressConnectionPoolTcp)(nil)).Elem()
}

func (i *sidecarSpecIngressConnectionPoolTcpPtrType) ToSidecarSpecIngressConnectionPoolTcpPtrOutput() SidecarSpecIngressConnectionPoolTcpPtrOutput {
	return i.ToSidecarSpecIngressConnectionPoolTcpPtrOutputWithContext(context.Background())
}

func (i *sidecarSpecIngressConnectionPoolTcpPtrType) ToSidecarSpecIngressConnectionPoolTcpPtrOutputWithContext(ctx context.Context) SidecarSpecIngressConnectionPoolTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecIngressConnectionPoolTcpPtrOutput)
}

// Settings common to both HTTP and TCP upstream connections.
type SidecarSpecIngressConnectionPoolTcpOutput struct{ *pulumi.OutputState }

func (SidecarSpecIngressConnectionPoolTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecIngressConnectionPoolTcp)(nil)).Elem()
}

func (o SidecarSpecIngressConnectionPoolTcpOutput) ToSidecarSpecIngressConnectionPoolTcpOutput() SidecarSpecIngressConnectionPoolTcpOutput {
	return o
}

func (o SidecarSpecIngressConnectionPoolTcpOutput) ToSidecarSpecIngressConnectionPoolTcpOutputWithContext(ctx context.Context) SidecarSpecIngressConnectionPoolTcpOutput {
	return o
}

func (o SidecarSpecIngressConnectionPoolTcpOutput) ToSidecarSpecIngressConnectionPoolTcpPtrOutput() SidecarSpecIngressConnectionPoolTcpPtrOutput {
	return o.ToSidecarSpecIngressConnectionPoolTcpPtrOutputWithContext(context.Background())
}

func (o SidecarSpecIngressConnectionPoolTcpOutput) ToSidecarSpecIngressConnectionPoolTcpPtrOutputWithContext(ctx context.Context) SidecarSpecIngressConnectionPoolTcpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SidecarSpecIngressConnectionPoolTcp) *SidecarSpecIngressConnectionPoolTcp {
		return &v
	}).(SidecarSpecIngressConnectionPoolTcpPtrOutput)
}

// TCP connection timeout.
func (o SidecarSpecIngressConnectionPoolTcpOutput) ConnectTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressConnectionPoolTcp) *string { return v.ConnectTimeout }).(pulumi.StringPtrOutput)
}

// The idle timeout for TCP connections.
func (o SidecarSpecIngressConnectionPoolTcpOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressConnectionPoolTcp) *string { return v.IdleTimeout }).(pulumi.StringPtrOutput)
}

// The maximum duration of a connection.
func (o SidecarSpecIngressConnectionPoolTcpOutput) MaxConnectionDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressConnectionPoolTcp) *string { return v.MaxConnectionDuration }).(pulumi.StringPtrOutput)
}

// Maximum number of HTTP1 /TCP connections to a destination host.
func (o SidecarSpecIngressConnectionPoolTcpOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressConnectionPoolTcp) *int { return v.MaxConnections }).(pulumi.IntPtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
func (o SidecarSpecIngressConnectionPoolTcpOutput) TcpKeepalive() SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressConnectionPoolTcp) *SidecarSpecIngressConnectionPoolTcpTcpKeepalive {
		return v.TcpKeepalive
	}).(SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput)
}

type SidecarSpecIngressConnectionPoolTcpPtrOutput struct{ *pulumi.OutputState }

func (SidecarSpecIngressConnectionPoolTcpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecIngressConnectionPoolTcp)(nil)).Elem()
}

func (o SidecarSpecIngressConnectionPoolTcpPtrOutput) ToSidecarSpecIngressConnectionPoolTcpPtrOutput() SidecarSpecIngressConnectionPoolTcpPtrOutput {
	return o
}

func (o SidecarSpecIngressConnectionPoolTcpPtrOutput) ToSidecarSpecIngressConnectionPoolTcpPtrOutputWithContext(ctx context.Context) SidecarSpecIngressConnectionPoolTcpPtrOutput {
	return o
}

func (o SidecarSpecIngressConnectionPoolTcpPtrOutput) Elem() SidecarSpecIngressConnectionPoolTcpOutput {
	return o.ApplyT(func(v *SidecarSpecIngressConnectionPoolTcp) SidecarSpecIngressConnectionPoolTcp {
		if v != nil {
			return *v
		}
		var ret SidecarSpecIngressConnectionPoolTcp
		return ret
	}).(SidecarSpecIngressConnectionPoolTcpOutput)
}

// TCP connection timeout.
func (o SidecarSpecIngressConnectionPoolTcpPtrOutput) ConnectTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressConnectionPoolTcp) *string {
		if v == nil {
			return nil
		}
		return v.ConnectTimeout
	}).(pulumi.StringPtrOutput)
}

// The idle timeout for TCP connections.
func (o SidecarSpecIngressConnectionPoolTcpPtrOutput) IdleTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressConnectionPoolTcp) *string {
		if v == nil {
			return nil
		}
		return v.IdleTimeout
	}).(pulumi.StringPtrOutput)
}

// The maximum duration of a connection.
func (o SidecarSpecIngressConnectionPoolTcpPtrOutput) MaxConnectionDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressConnectionPoolTcp) *string {
		if v == nil {
			return nil
		}
		return v.MaxConnectionDuration
	}).(pulumi.StringPtrOutput)
}

// Maximum number of HTTP1 /TCP connections to a destination host.
func (o SidecarSpecIngressConnectionPoolTcpPtrOutput) MaxConnections() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressConnectionPoolTcp) *int {
		if v == nil {
			return nil
		}
		return v.MaxConnections
	}).(pulumi.IntPtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
func (o SidecarSpecIngressConnectionPoolTcpPtrOutput) TcpKeepalive() SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressConnectionPoolTcp) *SidecarSpecIngressConnectionPoolTcpTcpKeepalive {
		if v == nil {
			return nil
		}
		return v.TcpKeepalive
	}).(SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
type SidecarSpecIngressConnectionPoolTcpTcpKeepalive struct {
	// The time duration between keep-alive probes.
	Interval *string `pulumi:"interval"`
	// Maximum number of keepalive probes to send without response before deciding the connection is dead.
	Probes *int `pulumi:"probes"`
	// The time duration a connection needs to be idle before keep-alive probes start being sent.
	Time *string `pulumi:"time"`
}

// SidecarSpecIngressConnectionPoolTcpTcpKeepaliveInput is an input type that accepts SidecarSpecIngressConnectionPoolTcpTcpKeepaliveArgs and SidecarSpecIngressConnectionPoolTcpTcpKeepaliveOutput values.
// You can construct a concrete instance of `SidecarSpecIngressConnectionPoolTcpTcpKeepaliveInput` via:
//
//	SidecarSpecIngressConnectionPoolTcpTcpKeepaliveArgs{...}
type SidecarSpecIngressConnectionPoolTcpTcpKeepaliveInput interface {
	pulumi.Input

	ToSidecarSpecIngressConnectionPoolTcpTcpKeepaliveOutput() SidecarSpecIngressConnectionPoolTcpTcpKeepaliveOutput
	ToSidecarSpecIngressConnectionPoolTcpTcpKeepaliveOutputWithContext(context.Context) SidecarSpecIngressConnectionPoolTcpTcpKeepaliveOutput
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
type SidecarSpecIngressConnectionPoolTcpTcpKeepaliveArgs struct {
	// The time duration between keep-alive probes.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// Maximum number of keepalive probes to send without response before deciding the connection is dead.
	Probes pulumi.IntPtrInput `pulumi:"probes"`
	// The time duration a connection needs to be idle before keep-alive probes start being sent.
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (SidecarSpecIngressConnectionPoolTcpTcpKeepaliveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecIngressConnectionPoolTcpTcpKeepalive)(nil)).Elem()
}

func (i SidecarSpecIngressConnectionPoolTcpTcpKeepaliveArgs) ToSidecarSpecIngressConnectionPoolTcpTcpKeepaliveOutput() SidecarSpecIngressConnectionPoolTcpTcpKeepaliveOutput {
	return i.ToSidecarSpecIngressConnectionPoolTcpTcpKeepaliveOutputWithContext(context.Background())
}

func (i SidecarSpecIngressConnectionPoolTcpTcpKeepaliveArgs) ToSidecarSpecIngressConnectionPoolTcpTcpKeepaliveOutputWithContext(ctx context.Context) SidecarSpecIngressConnectionPoolTcpTcpKeepaliveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecIngressConnectionPoolTcpTcpKeepaliveOutput)
}

func (i SidecarSpecIngressConnectionPoolTcpTcpKeepaliveArgs) ToSidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput() SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput {
	return i.ToSidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutputWithContext(context.Background())
}

func (i SidecarSpecIngressConnectionPoolTcpTcpKeepaliveArgs) ToSidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutputWithContext(ctx context.Context) SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecIngressConnectionPoolTcpTcpKeepaliveOutput).ToSidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutputWithContext(ctx)
}

// SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrInput is an input type that accepts SidecarSpecIngressConnectionPoolTcpTcpKeepaliveArgs, SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtr and SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput values.
// You can construct a concrete instance of `SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrInput` via:
//
//	        SidecarSpecIngressConnectionPoolTcpTcpKeepaliveArgs{...}
//
//	or:
//
//	        nil
type SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrInput interface {
	pulumi.Input

	ToSidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput() SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput
	ToSidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutputWithContext(context.Context) SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput
}

type sidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrType SidecarSpecIngressConnectionPoolTcpTcpKeepaliveArgs

func SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtr(v *SidecarSpecIngressConnectionPoolTcpTcpKeepaliveArgs) SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrInput {
	return (*sidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrType)(v)
}

func (*sidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecIngressConnectionPoolTcpTcpKeepalive)(nil)).Elem()
}

func (i *sidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrType) ToSidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput() SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput {
	return i.ToSidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutputWithContext(context.Background())
}

func (i *sidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrType) ToSidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutputWithContext(ctx context.Context) SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput)
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
type SidecarSpecIngressConnectionPoolTcpTcpKeepaliveOutput struct{ *pulumi.OutputState }

func (SidecarSpecIngressConnectionPoolTcpTcpKeepaliveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecIngressConnectionPoolTcpTcpKeepalive)(nil)).Elem()
}

func (o SidecarSpecIngressConnectionPoolTcpTcpKeepaliveOutput) ToSidecarSpecIngressConnectionPoolTcpTcpKeepaliveOutput() SidecarSpecIngressConnectionPoolTcpTcpKeepaliveOutput {
	return o
}

func (o SidecarSpecIngressConnectionPoolTcpTcpKeepaliveOutput) ToSidecarSpecIngressConnectionPoolTcpTcpKeepaliveOutputWithContext(ctx context.Context) SidecarSpecIngressConnectionPoolTcpTcpKeepaliveOutput {
	return o
}

func (o SidecarSpecIngressConnectionPoolTcpTcpKeepaliveOutput) ToSidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput() SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput {
	return o.ToSidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutputWithContext(context.Background())
}

func (o SidecarSpecIngressConnectionPoolTcpTcpKeepaliveOutput) ToSidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutputWithContext(ctx context.Context) SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SidecarSpecIngressConnectionPoolTcpTcpKeepalive) *SidecarSpecIngressConnectionPoolTcpTcpKeepalive {
		return &v
	}).(SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput)
}

// The time duration between keep-alive probes.
func (o SidecarSpecIngressConnectionPoolTcpTcpKeepaliveOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressConnectionPoolTcpTcpKeepalive) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// Maximum number of keepalive probes to send without response before deciding the connection is dead.
func (o SidecarSpecIngressConnectionPoolTcpTcpKeepaliveOutput) Probes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressConnectionPoolTcpTcpKeepalive) *int { return v.Probes }).(pulumi.IntPtrOutput)
}

// The time duration a connection needs to be idle before keep-alive probes start being sent.
func (o SidecarSpecIngressConnectionPoolTcpTcpKeepaliveOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressConnectionPoolTcpTcpKeepalive) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput struct{ *pulumi.OutputState }

func (SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecIngressConnectionPoolTcpTcpKeepalive)(nil)).Elem()
}

func (o SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput) ToSidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput() SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput {
	return o
}

func (o SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput) ToSidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutputWithContext(ctx context.Context) SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput {
	return o
}

func (o SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput) Elem() SidecarSpecIngressConnectionPoolTcpTcpKeepaliveOutput {
	return o.ApplyT(func(v *SidecarSpecIngressConnectionPoolTcpTcpKeepalive) SidecarSpecIngressConnectionPoolTcpTcpKeepalive {
		if v != nil {
			return *v
		}
		var ret SidecarSpecIngressConnectionPoolTcpTcpKeepalive
		return ret
	}).(SidecarSpecIngressConnectionPoolTcpTcpKeepaliveOutput)
}

// The time duration between keep-alive probes.
func (o SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressConnectionPoolTcpTcpKeepalive) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// Maximum number of keepalive probes to send without response before deciding the connection is dead.
func (o SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput) Probes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressConnectionPoolTcpTcpKeepalive) *int {
		if v == nil {
			return nil
		}
		return v.Probes
	}).(pulumi.IntPtrOutput)
}

// The time duration a connection needs to be idle before keep-alive probes start being sent.
func (o SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressConnectionPoolTcpTcpKeepalive) *string {
		if v == nil {
			return nil
		}
		return v.Time
	}).(pulumi.StringPtrOutput)
}

// The port associated with the listener.
type SidecarSpecIngressPort struct {
	// Label assigned to the port.
	Name *string `pulumi:"name"`
	// A valid non-negative integer port number.
	Number *int `pulumi:"number"`
	// The protocol exposed on the port.
	Protocol   *string `pulumi:"protocol"`
	TargetPort *int    `pulumi:"targetPort"`
}

// SidecarSpecIngressPortInput is an input type that accepts SidecarSpecIngressPortArgs and SidecarSpecIngressPortOutput values.
// You can construct a concrete instance of `SidecarSpecIngressPortInput` via:
//
//	SidecarSpecIngressPortArgs{...}
type SidecarSpecIngressPortInput interface {
	pulumi.Input

	ToSidecarSpecIngressPortOutput() SidecarSpecIngressPortOutput
	ToSidecarSpecIngressPortOutputWithContext(context.Context) SidecarSpecIngressPortOutput
}

// The port associated with the listener.
type SidecarSpecIngressPortArgs struct {
	// Label assigned to the port.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A valid non-negative integer port number.
	Number pulumi.IntPtrInput `pulumi:"number"`
	// The protocol exposed on the port.
	Protocol   pulumi.StringPtrInput `pulumi:"protocol"`
	TargetPort pulumi.IntPtrInput    `pulumi:"targetPort"`
}

func (SidecarSpecIngressPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecIngressPort)(nil)).Elem()
}

func (i SidecarSpecIngressPortArgs) ToSidecarSpecIngressPortOutput() SidecarSpecIngressPortOutput {
	return i.ToSidecarSpecIngressPortOutputWithContext(context.Background())
}

func (i SidecarSpecIngressPortArgs) ToSidecarSpecIngressPortOutputWithContext(ctx context.Context) SidecarSpecIngressPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecIngressPortOutput)
}

// The port associated with the listener.
type SidecarSpecIngressPortOutput struct{ *pulumi.OutputState }

func (SidecarSpecIngressPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecIngressPort)(nil)).Elem()
}

func (o SidecarSpecIngressPortOutput) ToSidecarSpecIngressPortOutput() SidecarSpecIngressPortOutput {
	return o
}

func (o SidecarSpecIngressPortOutput) ToSidecarSpecIngressPortOutputWithContext(ctx context.Context) SidecarSpecIngressPortOutput {
	return o
}

// Label assigned to the port.
func (o SidecarSpecIngressPortOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressPort) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A valid non-negative integer port number.
func (o SidecarSpecIngressPortOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressPort) *int { return v.Number }).(pulumi.IntPtrOutput)
}

// The protocol exposed on the port.
func (o SidecarSpecIngressPortOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressPort) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

func (o SidecarSpecIngressPortOutput) TargetPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressPort) *int { return v.TargetPort }).(pulumi.IntPtrOutput)
}

// Set of TLS related options that will enable TLS termination on the sidecar for requests originating from outside the mesh.
type SidecarSpecIngressTls struct {
	// REQUIRED if mode is `MUTUAL` or `OPTIONAL_MUTUAL`.
	CaCertificates *string `pulumi:"caCertificates"`
	// OPTIONAL: The path to the file containing the certificate revocation list (CRL) to use in verifying a presented client side certificate.
	CaCrl *string `pulumi:"caCrl"`
	// Optional: If specified, only support the specified cipher list.
	CipherSuites []string `pulumi:"cipherSuites"`
	// For gateways running on Kubernetes, the name of the secret that holds the TLS certs including the CA certificates.
	CredentialName *string `pulumi:"credentialName"`
	// If set to true, the load balancer will send a 301 redirect for all http connections, asking the clients to use HTTPS.
	HttpsRedirect *bool `pulumi:"httpsRedirect"`
	// Optional: Maximum TLS protocol version.
	//
	// Valid Options: TLS_AUTO, TLSV1_0, TLSV1_1, TLSV1_2, TLSV1_3
	MaxProtocolVersion *string `pulumi:"maxProtocolVersion"`
	// Optional: Minimum TLS protocol version.
	//
	// Valid Options: TLS_AUTO, TLSV1_0, TLSV1_1, TLSV1_2, TLSV1_3
	MinProtocolVersion *string `pulumi:"minProtocolVersion"`
	// Optional: Indicates whether connections to this port should be secured using TLS.
	//
	// Valid Options: PASSTHROUGH, SIMPLE, MUTUAL, AUTO_PASSTHROUGH, ISTIO_MUTUAL, OPTIONAL_MUTUAL
	Mode *string `pulumi:"mode"`
	// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
	PrivateKey *string `pulumi:"privateKey"`
	// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
	ServerCertificate *string `pulumi:"serverCertificate"`
	// A list of alternate names to verify the subject identity in the certificate presented by the client.
	SubjectAltNames []string `pulumi:"subjectAltNames"`
	// An optional list of hex-encoded SHA-256 hashes of the authorized client certificates.
	VerifyCertificateHash []string `pulumi:"verifyCertificateHash"`
	// An optional list of base64-encoded SHA-256 hashes of the SPKIs of authorized client certificates.
	VerifyCertificateSpki []string `pulumi:"verifyCertificateSpki"`
}

// SidecarSpecIngressTlsInput is an input type that accepts SidecarSpecIngressTlsArgs and SidecarSpecIngressTlsOutput values.
// You can construct a concrete instance of `SidecarSpecIngressTlsInput` via:
//
//	SidecarSpecIngressTlsArgs{...}
type SidecarSpecIngressTlsInput interface {
	pulumi.Input

	ToSidecarSpecIngressTlsOutput() SidecarSpecIngressTlsOutput
	ToSidecarSpecIngressTlsOutputWithContext(context.Context) SidecarSpecIngressTlsOutput
}

// Set of TLS related options that will enable TLS termination on the sidecar for requests originating from outside the mesh.
type SidecarSpecIngressTlsArgs struct {
	// REQUIRED if mode is `MUTUAL` or `OPTIONAL_MUTUAL`.
	CaCertificates pulumi.StringPtrInput `pulumi:"caCertificates"`
	// OPTIONAL: The path to the file containing the certificate revocation list (CRL) to use in verifying a presented client side certificate.
	CaCrl pulumi.StringPtrInput `pulumi:"caCrl"`
	// Optional: If specified, only support the specified cipher list.
	CipherSuites pulumi.StringArrayInput `pulumi:"cipherSuites"`
	// For gateways running on Kubernetes, the name of the secret that holds the TLS certs including the CA certificates.
	CredentialName pulumi.StringPtrInput `pulumi:"credentialName"`
	// If set to true, the load balancer will send a 301 redirect for all http connections, asking the clients to use HTTPS.
	HttpsRedirect pulumi.BoolPtrInput `pulumi:"httpsRedirect"`
	// Optional: Maximum TLS protocol version.
	//
	// Valid Options: TLS_AUTO, TLSV1_0, TLSV1_1, TLSV1_2, TLSV1_3
	MaxProtocolVersion pulumi.StringPtrInput `pulumi:"maxProtocolVersion"`
	// Optional: Minimum TLS protocol version.
	//
	// Valid Options: TLS_AUTO, TLSV1_0, TLSV1_1, TLSV1_2, TLSV1_3
	MinProtocolVersion pulumi.StringPtrInput `pulumi:"minProtocolVersion"`
	// Optional: Indicates whether connections to this port should be secured using TLS.
	//
	// Valid Options: PASSTHROUGH, SIMPLE, MUTUAL, AUTO_PASSTHROUGH, ISTIO_MUTUAL, OPTIONAL_MUTUAL
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
	ServerCertificate pulumi.StringPtrInput `pulumi:"serverCertificate"`
	// A list of alternate names to verify the subject identity in the certificate presented by the client.
	SubjectAltNames pulumi.StringArrayInput `pulumi:"subjectAltNames"`
	// An optional list of hex-encoded SHA-256 hashes of the authorized client certificates.
	VerifyCertificateHash pulumi.StringArrayInput `pulumi:"verifyCertificateHash"`
	// An optional list of base64-encoded SHA-256 hashes of the SPKIs of authorized client certificates.
	VerifyCertificateSpki pulumi.StringArrayInput `pulumi:"verifyCertificateSpki"`
}

func (SidecarSpecIngressTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecIngressTls)(nil)).Elem()
}

func (i SidecarSpecIngressTlsArgs) ToSidecarSpecIngressTlsOutput() SidecarSpecIngressTlsOutput {
	return i.ToSidecarSpecIngressTlsOutputWithContext(context.Background())
}

func (i SidecarSpecIngressTlsArgs) ToSidecarSpecIngressTlsOutputWithContext(ctx context.Context) SidecarSpecIngressTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecIngressTlsOutput)
}

func (i SidecarSpecIngressTlsArgs) ToSidecarSpecIngressTlsPtrOutput() SidecarSpecIngressTlsPtrOutput {
	return i.ToSidecarSpecIngressTlsPtrOutputWithContext(context.Background())
}

func (i SidecarSpecIngressTlsArgs) ToSidecarSpecIngressTlsPtrOutputWithContext(ctx context.Context) SidecarSpecIngressTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecIngressTlsOutput).ToSidecarSpecIngressTlsPtrOutputWithContext(ctx)
}

// SidecarSpecIngressTlsPtrInput is an input type that accepts SidecarSpecIngressTlsArgs, SidecarSpecIngressTlsPtr and SidecarSpecIngressTlsPtrOutput values.
// You can construct a concrete instance of `SidecarSpecIngressTlsPtrInput` via:
//
//	        SidecarSpecIngressTlsArgs{...}
//
//	or:
//
//	        nil
type SidecarSpecIngressTlsPtrInput interface {
	pulumi.Input

	ToSidecarSpecIngressTlsPtrOutput() SidecarSpecIngressTlsPtrOutput
	ToSidecarSpecIngressTlsPtrOutputWithContext(context.Context) SidecarSpecIngressTlsPtrOutput
}

type sidecarSpecIngressTlsPtrType SidecarSpecIngressTlsArgs

func SidecarSpecIngressTlsPtr(v *SidecarSpecIngressTlsArgs) SidecarSpecIngressTlsPtrInput {
	return (*sidecarSpecIngressTlsPtrType)(v)
}

func (*sidecarSpecIngressTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecIngressTls)(nil)).Elem()
}

func (i *sidecarSpecIngressTlsPtrType) ToSidecarSpecIngressTlsPtrOutput() SidecarSpecIngressTlsPtrOutput {
	return i.ToSidecarSpecIngressTlsPtrOutputWithContext(context.Background())
}

func (i *sidecarSpecIngressTlsPtrType) ToSidecarSpecIngressTlsPtrOutputWithContext(ctx context.Context) SidecarSpecIngressTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecIngressTlsPtrOutput)
}

// Set of TLS related options that will enable TLS termination on the sidecar for requests originating from outside the mesh.
type SidecarSpecIngressTlsOutput struct{ *pulumi.OutputState }

func (SidecarSpecIngressTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecIngressTls)(nil)).Elem()
}

func (o SidecarSpecIngressTlsOutput) ToSidecarSpecIngressTlsOutput() SidecarSpecIngressTlsOutput {
	return o
}

func (o SidecarSpecIngressTlsOutput) ToSidecarSpecIngressTlsOutputWithContext(ctx context.Context) SidecarSpecIngressTlsOutput {
	return o
}

func (o SidecarSpecIngressTlsOutput) ToSidecarSpecIngressTlsPtrOutput() SidecarSpecIngressTlsPtrOutput {
	return o.ToSidecarSpecIngressTlsPtrOutputWithContext(context.Background())
}

func (o SidecarSpecIngressTlsOutput) ToSidecarSpecIngressTlsPtrOutputWithContext(ctx context.Context) SidecarSpecIngressTlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SidecarSpecIngressTls) *SidecarSpecIngressTls {
		return &v
	}).(SidecarSpecIngressTlsPtrOutput)
}

// REQUIRED if mode is `MUTUAL` or `OPTIONAL_MUTUAL`.
func (o SidecarSpecIngressTlsOutput) CaCertificates() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressTls) *string { return v.CaCertificates }).(pulumi.StringPtrOutput)
}

// OPTIONAL: The path to the file containing the certificate revocation list (CRL) to use in verifying a presented client side certificate.
func (o SidecarSpecIngressTlsOutput) CaCrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressTls) *string { return v.CaCrl }).(pulumi.StringPtrOutput)
}

// Optional: If specified, only support the specified cipher list.
func (o SidecarSpecIngressTlsOutput) CipherSuites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SidecarSpecIngressTls) []string { return v.CipherSuites }).(pulumi.StringArrayOutput)
}

// For gateways running on Kubernetes, the name of the secret that holds the TLS certs including the CA certificates.
func (o SidecarSpecIngressTlsOutput) CredentialName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressTls) *string { return v.CredentialName }).(pulumi.StringPtrOutput)
}

// If set to true, the load balancer will send a 301 redirect for all http connections, asking the clients to use HTTPS.
func (o SidecarSpecIngressTlsOutput) HttpsRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressTls) *bool { return v.HttpsRedirect }).(pulumi.BoolPtrOutput)
}

// Optional: Maximum TLS protocol version.
//
// Valid Options: TLS_AUTO, TLSV1_0, TLSV1_1, TLSV1_2, TLSV1_3
func (o SidecarSpecIngressTlsOutput) MaxProtocolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressTls) *string { return v.MaxProtocolVersion }).(pulumi.StringPtrOutput)
}

// Optional: Minimum TLS protocol version.
//
// Valid Options: TLS_AUTO, TLSV1_0, TLSV1_1, TLSV1_2, TLSV1_3
func (o SidecarSpecIngressTlsOutput) MinProtocolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressTls) *string { return v.MinProtocolVersion }).(pulumi.StringPtrOutput)
}

// Optional: Indicates whether connections to this port should be secured using TLS.
//
// Valid Options: PASSTHROUGH, SIMPLE, MUTUAL, AUTO_PASSTHROUGH, ISTIO_MUTUAL, OPTIONAL_MUTUAL
func (o SidecarSpecIngressTlsOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressTls) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
func (o SidecarSpecIngressTlsOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressTls) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
func (o SidecarSpecIngressTlsOutput) ServerCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecIngressTls) *string { return v.ServerCertificate }).(pulumi.StringPtrOutput)
}

// A list of alternate names to verify the subject identity in the certificate presented by the client.
func (o SidecarSpecIngressTlsOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SidecarSpecIngressTls) []string { return v.SubjectAltNames }).(pulumi.StringArrayOutput)
}

// An optional list of hex-encoded SHA-256 hashes of the authorized client certificates.
func (o SidecarSpecIngressTlsOutput) VerifyCertificateHash() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SidecarSpecIngressTls) []string { return v.VerifyCertificateHash }).(pulumi.StringArrayOutput)
}

// An optional list of base64-encoded SHA-256 hashes of the SPKIs of authorized client certificates.
func (o SidecarSpecIngressTlsOutput) VerifyCertificateSpki() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SidecarSpecIngressTls) []string { return v.VerifyCertificateSpki }).(pulumi.StringArrayOutput)
}

type SidecarSpecIngressTlsPtrOutput struct{ *pulumi.OutputState }

func (SidecarSpecIngressTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecIngressTls)(nil)).Elem()
}

func (o SidecarSpecIngressTlsPtrOutput) ToSidecarSpecIngressTlsPtrOutput() SidecarSpecIngressTlsPtrOutput {
	return o
}

func (o SidecarSpecIngressTlsPtrOutput) ToSidecarSpecIngressTlsPtrOutputWithContext(ctx context.Context) SidecarSpecIngressTlsPtrOutput {
	return o
}

func (o SidecarSpecIngressTlsPtrOutput) Elem() SidecarSpecIngressTlsOutput {
	return o.ApplyT(func(v *SidecarSpecIngressTls) SidecarSpecIngressTls {
		if v != nil {
			return *v
		}
		var ret SidecarSpecIngressTls
		return ret
	}).(SidecarSpecIngressTlsOutput)
}

// REQUIRED if mode is `MUTUAL` or `OPTIONAL_MUTUAL`.
func (o SidecarSpecIngressTlsPtrOutput) CaCertificates() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressTls) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificates
	}).(pulumi.StringPtrOutput)
}

// OPTIONAL: The path to the file containing the certificate revocation list (CRL) to use in verifying a presented client side certificate.
func (o SidecarSpecIngressTlsPtrOutput) CaCrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressTls) *string {
		if v == nil {
			return nil
		}
		return v.CaCrl
	}).(pulumi.StringPtrOutput)
}

// Optional: If specified, only support the specified cipher list.
func (o SidecarSpecIngressTlsPtrOutput) CipherSuites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SidecarSpecIngressTls) []string {
		if v == nil {
			return nil
		}
		return v.CipherSuites
	}).(pulumi.StringArrayOutput)
}

// For gateways running on Kubernetes, the name of the secret that holds the TLS certs including the CA certificates.
func (o SidecarSpecIngressTlsPtrOutput) CredentialName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressTls) *string {
		if v == nil {
			return nil
		}
		return v.CredentialName
	}).(pulumi.StringPtrOutput)
}

// If set to true, the load balancer will send a 301 redirect for all http connections, asking the clients to use HTTPS.
func (o SidecarSpecIngressTlsPtrOutput) HttpsRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressTls) *bool {
		if v == nil {
			return nil
		}
		return v.HttpsRedirect
	}).(pulumi.BoolPtrOutput)
}

// Optional: Maximum TLS protocol version.
//
// Valid Options: TLS_AUTO, TLSV1_0, TLSV1_1, TLSV1_2, TLSV1_3
func (o SidecarSpecIngressTlsPtrOutput) MaxProtocolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressTls) *string {
		if v == nil {
			return nil
		}
		return v.MaxProtocolVersion
	}).(pulumi.StringPtrOutput)
}

// Optional: Minimum TLS protocol version.
//
// Valid Options: TLS_AUTO, TLSV1_0, TLSV1_1, TLSV1_2, TLSV1_3
func (o SidecarSpecIngressTlsPtrOutput) MinProtocolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressTls) *string {
		if v == nil {
			return nil
		}
		return v.MinProtocolVersion
	}).(pulumi.StringPtrOutput)
}

// Optional: Indicates whether connections to this port should be secured using TLS.
//
// Valid Options: PASSTHROUGH, SIMPLE, MUTUAL, AUTO_PASSTHROUGH, ISTIO_MUTUAL, OPTIONAL_MUTUAL
func (o SidecarSpecIngressTlsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressTls) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
func (o SidecarSpecIngressTlsPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressTls) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// REQUIRED if mode is `SIMPLE` or `MUTUAL`.
func (o SidecarSpecIngressTlsPtrOutput) ServerCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecIngressTls) *string {
		if v == nil {
			return nil
		}
		return v.ServerCertificate
	}).(pulumi.StringPtrOutput)
}

// A list of alternate names to verify the subject identity in the certificate presented by the client.
func (o SidecarSpecIngressTlsPtrOutput) SubjectAltNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SidecarSpecIngressTls) []string {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(pulumi.StringArrayOutput)
}

// An optional list of hex-encoded SHA-256 hashes of the authorized client certificates.
func (o SidecarSpecIngressTlsPtrOutput) VerifyCertificateHash() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SidecarSpecIngressTls) []string {
		if v == nil {
			return nil
		}
		return v.VerifyCertificateHash
	}).(pulumi.StringArrayOutput)
}

// An optional list of base64-encoded SHA-256 hashes of the SPKIs of authorized client certificates.
func (o SidecarSpecIngressTlsPtrOutput) VerifyCertificateSpki() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SidecarSpecIngressTls) []string {
		if v == nil {
			return nil
		}
		return v.VerifyCertificateSpki
	}).(pulumi.StringArrayOutput)
}

// Configuration for the outbound traffic policy.
type SidecarSpecOutboundTrafficPolicy struct {
	EgressProxy *SidecarSpecOutboundTrafficPolicyEgressProxy `pulumi:"egressProxy"`
	// Valid Options: REGISTRY_ONLY, ALLOW_ANY
	Mode *string `pulumi:"mode"`
}

// SidecarSpecOutboundTrafficPolicyInput is an input type that accepts SidecarSpecOutboundTrafficPolicyArgs and SidecarSpecOutboundTrafficPolicyOutput values.
// You can construct a concrete instance of `SidecarSpecOutboundTrafficPolicyInput` via:
//
//	SidecarSpecOutboundTrafficPolicyArgs{...}
type SidecarSpecOutboundTrafficPolicyInput interface {
	pulumi.Input

	ToSidecarSpecOutboundTrafficPolicyOutput() SidecarSpecOutboundTrafficPolicyOutput
	ToSidecarSpecOutboundTrafficPolicyOutputWithContext(context.Context) SidecarSpecOutboundTrafficPolicyOutput
}

// Configuration for the outbound traffic policy.
type SidecarSpecOutboundTrafficPolicyArgs struct {
	EgressProxy SidecarSpecOutboundTrafficPolicyEgressProxyPtrInput `pulumi:"egressProxy"`
	// Valid Options: REGISTRY_ONLY, ALLOW_ANY
	Mode pulumi.StringPtrInput `pulumi:"mode"`
}

func (SidecarSpecOutboundTrafficPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecOutboundTrafficPolicy)(nil)).Elem()
}

func (i SidecarSpecOutboundTrafficPolicyArgs) ToSidecarSpecOutboundTrafficPolicyOutput() SidecarSpecOutboundTrafficPolicyOutput {
	return i.ToSidecarSpecOutboundTrafficPolicyOutputWithContext(context.Background())
}

func (i SidecarSpecOutboundTrafficPolicyArgs) ToSidecarSpecOutboundTrafficPolicyOutputWithContext(ctx context.Context) SidecarSpecOutboundTrafficPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecOutboundTrafficPolicyOutput)
}

func (i SidecarSpecOutboundTrafficPolicyArgs) ToSidecarSpecOutboundTrafficPolicyPtrOutput() SidecarSpecOutboundTrafficPolicyPtrOutput {
	return i.ToSidecarSpecOutboundTrafficPolicyPtrOutputWithContext(context.Background())
}

func (i SidecarSpecOutboundTrafficPolicyArgs) ToSidecarSpecOutboundTrafficPolicyPtrOutputWithContext(ctx context.Context) SidecarSpecOutboundTrafficPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecOutboundTrafficPolicyOutput).ToSidecarSpecOutboundTrafficPolicyPtrOutputWithContext(ctx)
}

// SidecarSpecOutboundTrafficPolicyPtrInput is an input type that accepts SidecarSpecOutboundTrafficPolicyArgs, SidecarSpecOutboundTrafficPolicyPtr and SidecarSpecOutboundTrafficPolicyPtrOutput values.
// You can construct a concrete instance of `SidecarSpecOutboundTrafficPolicyPtrInput` via:
//
//	        SidecarSpecOutboundTrafficPolicyArgs{...}
//
//	or:
//
//	        nil
type SidecarSpecOutboundTrafficPolicyPtrInput interface {
	pulumi.Input

	ToSidecarSpecOutboundTrafficPolicyPtrOutput() SidecarSpecOutboundTrafficPolicyPtrOutput
	ToSidecarSpecOutboundTrafficPolicyPtrOutputWithContext(context.Context) SidecarSpecOutboundTrafficPolicyPtrOutput
}

type sidecarSpecOutboundTrafficPolicyPtrType SidecarSpecOutboundTrafficPolicyArgs

func SidecarSpecOutboundTrafficPolicyPtr(v *SidecarSpecOutboundTrafficPolicyArgs) SidecarSpecOutboundTrafficPolicyPtrInput {
	return (*sidecarSpecOutboundTrafficPolicyPtrType)(v)
}

func (*sidecarSpecOutboundTrafficPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecOutboundTrafficPolicy)(nil)).Elem()
}

func (i *sidecarSpecOutboundTrafficPolicyPtrType) ToSidecarSpecOutboundTrafficPolicyPtrOutput() SidecarSpecOutboundTrafficPolicyPtrOutput {
	return i.ToSidecarSpecOutboundTrafficPolicyPtrOutputWithContext(context.Background())
}

func (i *sidecarSpecOutboundTrafficPolicyPtrType) ToSidecarSpecOutboundTrafficPolicyPtrOutputWithContext(ctx context.Context) SidecarSpecOutboundTrafficPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecOutboundTrafficPolicyPtrOutput)
}

// Configuration for the outbound traffic policy.
type SidecarSpecOutboundTrafficPolicyOutput struct{ *pulumi.OutputState }

func (SidecarSpecOutboundTrafficPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecOutboundTrafficPolicy)(nil)).Elem()
}

func (o SidecarSpecOutboundTrafficPolicyOutput) ToSidecarSpecOutboundTrafficPolicyOutput() SidecarSpecOutboundTrafficPolicyOutput {
	return o
}

func (o SidecarSpecOutboundTrafficPolicyOutput) ToSidecarSpecOutboundTrafficPolicyOutputWithContext(ctx context.Context) SidecarSpecOutboundTrafficPolicyOutput {
	return o
}

func (o SidecarSpecOutboundTrafficPolicyOutput) ToSidecarSpecOutboundTrafficPolicyPtrOutput() SidecarSpecOutboundTrafficPolicyPtrOutput {
	return o.ToSidecarSpecOutboundTrafficPolicyPtrOutputWithContext(context.Background())
}

func (o SidecarSpecOutboundTrafficPolicyOutput) ToSidecarSpecOutboundTrafficPolicyPtrOutputWithContext(ctx context.Context) SidecarSpecOutboundTrafficPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SidecarSpecOutboundTrafficPolicy) *SidecarSpecOutboundTrafficPolicy {
		return &v
	}).(SidecarSpecOutboundTrafficPolicyPtrOutput)
}

func (o SidecarSpecOutboundTrafficPolicyOutput) EgressProxy() SidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput {
	return o.ApplyT(func(v SidecarSpecOutboundTrafficPolicy) *SidecarSpecOutboundTrafficPolicyEgressProxy {
		return v.EgressProxy
	}).(SidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput)
}

// Valid Options: REGISTRY_ONLY, ALLOW_ANY
func (o SidecarSpecOutboundTrafficPolicyOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecOutboundTrafficPolicy) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type SidecarSpecOutboundTrafficPolicyPtrOutput struct{ *pulumi.OutputState }

func (SidecarSpecOutboundTrafficPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecOutboundTrafficPolicy)(nil)).Elem()
}

func (o SidecarSpecOutboundTrafficPolicyPtrOutput) ToSidecarSpecOutboundTrafficPolicyPtrOutput() SidecarSpecOutboundTrafficPolicyPtrOutput {
	return o
}

func (o SidecarSpecOutboundTrafficPolicyPtrOutput) ToSidecarSpecOutboundTrafficPolicyPtrOutputWithContext(ctx context.Context) SidecarSpecOutboundTrafficPolicyPtrOutput {
	return o
}

func (o SidecarSpecOutboundTrafficPolicyPtrOutput) Elem() SidecarSpecOutboundTrafficPolicyOutput {
	return o.ApplyT(func(v *SidecarSpecOutboundTrafficPolicy) SidecarSpecOutboundTrafficPolicy {
		if v != nil {
			return *v
		}
		var ret SidecarSpecOutboundTrafficPolicy
		return ret
	}).(SidecarSpecOutboundTrafficPolicyOutput)
}

func (o SidecarSpecOutboundTrafficPolicyPtrOutput) EgressProxy() SidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput {
	return o.ApplyT(func(v *SidecarSpecOutboundTrafficPolicy) *SidecarSpecOutboundTrafficPolicyEgressProxy {
		if v == nil {
			return nil
		}
		return v.EgressProxy
	}).(SidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput)
}

// Valid Options: REGISTRY_ONLY, ALLOW_ANY
func (o SidecarSpecOutboundTrafficPolicyPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecOutboundTrafficPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

type SidecarSpecOutboundTrafficPolicyEgressProxy struct {
	// The name of a service from the service registry.
	Host string `pulumi:"host"`
	// Specifies the port on the host that is being addressed.
	Port *SidecarSpecOutboundTrafficPolicyEgressProxyPort `pulumi:"port"`
	// The name of a subset within the service.
	Subset *string `pulumi:"subset"`
}

// SidecarSpecOutboundTrafficPolicyEgressProxyInput is an input type that accepts SidecarSpecOutboundTrafficPolicyEgressProxyArgs and SidecarSpecOutboundTrafficPolicyEgressProxyOutput values.
// You can construct a concrete instance of `SidecarSpecOutboundTrafficPolicyEgressProxyInput` via:
//
//	SidecarSpecOutboundTrafficPolicyEgressProxyArgs{...}
type SidecarSpecOutboundTrafficPolicyEgressProxyInput interface {
	pulumi.Input

	ToSidecarSpecOutboundTrafficPolicyEgressProxyOutput() SidecarSpecOutboundTrafficPolicyEgressProxyOutput
	ToSidecarSpecOutboundTrafficPolicyEgressProxyOutputWithContext(context.Context) SidecarSpecOutboundTrafficPolicyEgressProxyOutput
}

type SidecarSpecOutboundTrafficPolicyEgressProxyArgs struct {
	// The name of a service from the service registry.
	Host pulumi.StringInput `pulumi:"host"`
	// Specifies the port on the host that is being addressed.
	Port SidecarSpecOutboundTrafficPolicyEgressProxyPortPtrInput `pulumi:"port"`
	// The name of a subset within the service.
	Subset pulumi.StringPtrInput `pulumi:"subset"`
}

func (SidecarSpecOutboundTrafficPolicyEgressProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecOutboundTrafficPolicyEgressProxy)(nil)).Elem()
}

func (i SidecarSpecOutboundTrafficPolicyEgressProxyArgs) ToSidecarSpecOutboundTrafficPolicyEgressProxyOutput() SidecarSpecOutboundTrafficPolicyEgressProxyOutput {
	return i.ToSidecarSpecOutboundTrafficPolicyEgressProxyOutputWithContext(context.Background())
}

func (i SidecarSpecOutboundTrafficPolicyEgressProxyArgs) ToSidecarSpecOutboundTrafficPolicyEgressProxyOutputWithContext(ctx context.Context) SidecarSpecOutboundTrafficPolicyEgressProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecOutboundTrafficPolicyEgressProxyOutput)
}

func (i SidecarSpecOutboundTrafficPolicyEgressProxyArgs) ToSidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput() SidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput {
	return i.ToSidecarSpecOutboundTrafficPolicyEgressProxyPtrOutputWithContext(context.Background())
}

func (i SidecarSpecOutboundTrafficPolicyEgressProxyArgs) ToSidecarSpecOutboundTrafficPolicyEgressProxyPtrOutputWithContext(ctx context.Context) SidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecOutboundTrafficPolicyEgressProxyOutput).ToSidecarSpecOutboundTrafficPolicyEgressProxyPtrOutputWithContext(ctx)
}

// SidecarSpecOutboundTrafficPolicyEgressProxyPtrInput is an input type that accepts SidecarSpecOutboundTrafficPolicyEgressProxyArgs, SidecarSpecOutboundTrafficPolicyEgressProxyPtr and SidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput values.
// You can construct a concrete instance of `SidecarSpecOutboundTrafficPolicyEgressProxyPtrInput` via:
//
//	        SidecarSpecOutboundTrafficPolicyEgressProxyArgs{...}
//
//	or:
//
//	        nil
type SidecarSpecOutboundTrafficPolicyEgressProxyPtrInput interface {
	pulumi.Input

	ToSidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput() SidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput
	ToSidecarSpecOutboundTrafficPolicyEgressProxyPtrOutputWithContext(context.Context) SidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput
}

type sidecarSpecOutboundTrafficPolicyEgressProxyPtrType SidecarSpecOutboundTrafficPolicyEgressProxyArgs

func SidecarSpecOutboundTrafficPolicyEgressProxyPtr(v *SidecarSpecOutboundTrafficPolicyEgressProxyArgs) SidecarSpecOutboundTrafficPolicyEgressProxyPtrInput {
	return (*sidecarSpecOutboundTrafficPolicyEgressProxyPtrType)(v)
}

func (*sidecarSpecOutboundTrafficPolicyEgressProxyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecOutboundTrafficPolicyEgressProxy)(nil)).Elem()
}

func (i *sidecarSpecOutboundTrafficPolicyEgressProxyPtrType) ToSidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput() SidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput {
	return i.ToSidecarSpecOutboundTrafficPolicyEgressProxyPtrOutputWithContext(context.Background())
}

func (i *sidecarSpecOutboundTrafficPolicyEgressProxyPtrType) ToSidecarSpecOutboundTrafficPolicyEgressProxyPtrOutputWithContext(ctx context.Context) SidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput)
}

type SidecarSpecOutboundTrafficPolicyEgressProxyOutput struct{ *pulumi.OutputState }

func (SidecarSpecOutboundTrafficPolicyEgressProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecOutboundTrafficPolicyEgressProxy)(nil)).Elem()
}

func (o SidecarSpecOutboundTrafficPolicyEgressProxyOutput) ToSidecarSpecOutboundTrafficPolicyEgressProxyOutput() SidecarSpecOutboundTrafficPolicyEgressProxyOutput {
	return o
}

func (o SidecarSpecOutboundTrafficPolicyEgressProxyOutput) ToSidecarSpecOutboundTrafficPolicyEgressProxyOutputWithContext(ctx context.Context) SidecarSpecOutboundTrafficPolicyEgressProxyOutput {
	return o
}

func (o SidecarSpecOutboundTrafficPolicyEgressProxyOutput) ToSidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput() SidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput {
	return o.ToSidecarSpecOutboundTrafficPolicyEgressProxyPtrOutputWithContext(context.Background())
}

func (o SidecarSpecOutboundTrafficPolicyEgressProxyOutput) ToSidecarSpecOutboundTrafficPolicyEgressProxyPtrOutputWithContext(ctx context.Context) SidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SidecarSpecOutboundTrafficPolicyEgressProxy) *SidecarSpecOutboundTrafficPolicyEgressProxy {
		return &v
	}).(SidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput)
}

// The name of a service from the service registry.
func (o SidecarSpecOutboundTrafficPolicyEgressProxyOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v SidecarSpecOutboundTrafficPolicyEgressProxy) string { return v.Host }).(pulumi.StringOutput)
}

// Specifies the port on the host that is being addressed.
func (o SidecarSpecOutboundTrafficPolicyEgressProxyOutput) Port() SidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutput {
	return o.ApplyT(func(v SidecarSpecOutboundTrafficPolicyEgressProxy) *SidecarSpecOutboundTrafficPolicyEgressProxyPort {
		return v.Port
	}).(SidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutput)
}

// The name of a subset within the service.
func (o SidecarSpecOutboundTrafficPolicyEgressProxyOutput) Subset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SidecarSpecOutboundTrafficPolicyEgressProxy) *string { return v.Subset }).(pulumi.StringPtrOutput)
}

type SidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput struct{ *pulumi.OutputState }

func (SidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecOutboundTrafficPolicyEgressProxy)(nil)).Elem()
}

func (o SidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput) ToSidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput() SidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput {
	return o
}

func (o SidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput) ToSidecarSpecOutboundTrafficPolicyEgressProxyPtrOutputWithContext(ctx context.Context) SidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput {
	return o
}

func (o SidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput) Elem() SidecarSpecOutboundTrafficPolicyEgressProxyOutput {
	return o.ApplyT(func(v *SidecarSpecOutboundTrafficPolicyEgressProxy) SidecarSpecOutboundTrafficPolicyEgressProxy {
		if v != nil {
			return *v
		}
		var ret SidecarSpecOutboundTrafficPolicyEgressProxy
		return ret
	}).(SidecarSpecOutboundTrafficPolicyEgressProxyOutput)
}

// The name of a service from the service registry.
func (o SidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecOutboundTrafficPolicyEgressProxy) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
func (o SidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput) Port() SidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutput {
	return o.ApplyT(func(v *SidecarSpecOutboundTrafficPolicyEgressProxy) *SidecarSpecOutboundTrafficPolicyEgressProxyPort {
		if v == nil {
			return nil
		}
		return v.Port
	}).(SidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutput)
}

// The name of a subset within the service.
func (o SidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput) Subset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SidecarSpecOutboundTrafficPolicyEgressProxy) *string {
		if v == nil {
			return nil
		}
		return v.Subset
	}).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
type SidecarSpecOutboundTrafficPolicyEgressProxyPort struct {
	Number *int `pulumi:"number"`
}

// SidecarSpecOutboundTrafficPolicyEgressProxyPortInput is an input type that accepts SidecarSpecOutboundTrafficPolicyEgressProxyPortArgs and SidecarSpecOutboundTrafficPolicyEgressProxyPortOutput values.
// You can construct a concrete instance of `SidecarSpecOutboundTrafficPolicyEgressProxyPortInput` via:
//
//	SidecarSpecOutboundTrafficPolicyEgressProxyPortArgs{...}
type SidecarSpecOutboundTrafficPolicyEgressProxyPortInput interface {
	pulumi.Input

	ToSidecarSpecOutboundTrafficPolicyEgressProxyPortOutput() SidecarSpecOutboundTrafficPolicyEgressProxyPortOutput
	ToSidecarSpecOutboundTrafficPolicyEgressProxyPortOutputWithContext(context.Context) SidecarSpecOutboundTrafficPolicyEgressProxyPortOutput
}

// Specifies the port on the host that is being addressed.
type SidecarSpecOutboundTrafficPolicyEgressProxyPortArgs struct {
	Number pulumi.IntPtrInput `pulumi:"number"`
}

func (SidecarSpecOutboundTrafficPolicyEgressProxyPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecOutboundTrafficPolicyEgressProxyPort)(nil)).Elem()
}

func (i SidecarSpecOutboundTrafficPolicyEgressProxyPortArgs) ToSidecarSpecOutboundTrafficPolicyEgressProxyPortOutput() SidecarSpecOutboundTrafficPolicyEgressProxyPortOutput {
	return i.ToSidecarSpecOutboundTrafficPolicyEgressProxyPortOutputWithContext(context.Background())
}

func (i SidecarSpecOutboundTrafficPolicyEgressProxyPortArgs) ToSidecarSpecOutboundTrafficPolicyEgressProxyPortOutputWithContext(ctx context.Context) SidecarSpecOutboundTrafficPolicyEgressProxyPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecOutboundTrafficPolicyEgressProxyPortOutput)
}

func (i SidecarSpecOutboundTrafficPolicyEgressProxyPortArgs) ToSidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutput() SidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutput {
	return i.ToSidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutputWithContext(context.Background())
}

func (i SidecarSpecOutboundTrafficPolicyEgressProxyPortArgs) ToSidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutputWithContext(ctx context.Context) SidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecOutboundTrafficPolicyEgressProxyPortOutput).ToSidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutputWithContext(ctx)
}

// SidecarSpecOutboundTrafficPolicyEgressProxyPortPtrInput is an input type that accepts SidecarSpecOutboundTrafficPolicyEgressProxyPortArgs, SidecarSpecOutboundTrafficPolicyEgressProxyPortPtr and SidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutput values.
// You can construct a concrete instance of `SidecarSpecOutboundTrafficPolicyEgressProxyPortPtrInput` via:
//
//	        SidecarSpecOutboundTrafficPolicyEgressProxyPortArgs{...}
//
//	or:
//
//	        nil
type SidecarSpecOutboundTrafficPolicyEgressProxyPortPtrInput interface {
	pulumi.Input

	ToSidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutput() SidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutput
	ToSidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutputWithContext(context.Context) SidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutput
}

type sidecarSpecOutboundTrafficPolicyEgressProxyPortPtrType SidecarSpecOutboundTrafficPolicyEgressProxyPortArgs

func SidecarSpecOutboundTrafficPolicyEgressProxyPortPtr(v *SidecarSpecOutboundTrafficPolicyEgressProxyPortArgs) SidecarSpecOutboundTrafficPolicyEgressProxyPortPtrInput {
	return (*sidecarSpecOutboundTrafficPolicyEgressProxyPortPtrType)(v)
}

func (*sidecarSpecOutboundTrafficPolicyEgressProxyPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecOutboundTrafficPolicyEgressProxyPort)(nil)).Elem()
}

func (i *sidecarSpecOutboundTrafficPolicyEgressProxyPortPtrType) ToSidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutput() SidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutput {
	return i.ToSidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutputWithContext(context.Background())
}

func (i *sidecarSpecOutboundTrafficPolicyEgressProxyPortPtrType) ToSidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutputWithContext(ctx context.Context) SidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutput)
}

// Specifies the port on the host that is being addressed.
type SidecarSpecOutboundTrafficPolicyEgressProxyPortOutput struct{ *pulumi.OutputState }

func (SidecarSpecOutboundTrafficPolicyEgressProxyPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecOutboundTrafficPolicyEgressProxyPort)(nil)).Elem()
}

func (o SidecarSpecOutboundTrafficPolicyEgressProxyPortOutput) ToSidecarSpecOutboundTrafficPolicyEgressProxyPortOutput() SidecarSpecOutboundTrafficPolicyEgressProxyPortOutput {
	return o
}

func (o SidecarSpecOutboundTrafficPolicyEgressProxyPortOutput) ToSidecarSpecOutboundTrafficPolicyEgressProxyPortOutputWithContext(ctx context.Context) SidecarSpecOutboundTrafficPolicyEgressProxyPortOutput {
	return o
}

func (o SidecarSpecOutboundTrafficPolicyEgressProxyPortOutput) ToSidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutput() SidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutput {
	return o.ToSidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutputWithContext(context.Background())
}

func (o SidecarSpecOutboundTrafficPolicyEgressProxyPortOutput) ToSidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutputWithContext(ctx context.Context) SidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SidecarSpecOutboundTrafficPolicyEgressProxyPort) *SidecarSpecOutboundTrafficPolicyEgressProxyPort {
		return &v
	}).(SidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutput)
}

func (o SidecarSpecOutboundTrafficPolicyEgressProxyPortOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SidecarSpecOutboundTrafficPolicyEgressProxyPort) *int { return v.Number }).(pulumi.IntPtrOutput)
}

type SidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutput struct{ *pulumi.OutputState }

func (SidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecOutboundTrafficPolicyEgressProxyPort)(nil)).Elem()
}

func (o SidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutput) ToSidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutput() SidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutput {
	return o
}

func (o SidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutput) ToSidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutputWithContext(ctx context.Context) SidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutput {
	return o
}

func (o SidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutput) Elem() SidecarSpecOutboundTrafficPolicyEgressProxyPortOutput {
	return o.ApplyT(func(v *SidecarSpecOutboundTrafficPolicyEgressProxyPort) SidecarSpecOutboundTrafficPolicyEgressProxyPort {
		if v != nil {
			return *v
		}
		var ret SidecarSpecOutboundTrafficPolicyEgressProxyPort
		return ret
	}).(SidecarSpecOutboundTrafficPolicyEgressProxyPortOutput)
}

func (o SidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SidecarSpecOutboundTrafficPolicyEgressProxyPort) *int {
		if v == nil {
			return nil
		}
		return v.Number
	}).(pulumi.IntPtrOutput)
}

// Criteria used to select the specific set of pods/VMs on which this `Sidecar` configuration should be applied.
type SidecarSpecWorkloadSelector struct {
	// One or more labels that indicate a specific set of pods/VMs on which the configuration should be applied.
	Labels map[string]string `pulumi:"labels"`
}

// SidecarSpecWorkloadSelectorInput is an input type that accepts SidecarSpecWorkloadSelectorArgs and SidecarSpecWorkloadSelectorOutput values.
// You can construct a concrete instance of `SidecarSpecWorkloadSelectorInput` via:
//
//	SidecarSpecWorkloadSelectorArgs{...}
type SidecarSpecWorkloadSelectorInput interface {
	pulumi.Input

	ToSidecarSpecWorkloadSelectorOutput() SidecarSpecWorkloadSelectorOutput
	ToSidecarSpecWorkloadSelectorOutputWithContext(context.Context) SidecarSpecWorkloadSelectorOutput
}

// Criteria used to select the specific set of pods/VMs on which this `Sidecar` configuration should be applied.
type SidecarSpecWorkloadSelectorArgs struct {
	// One or more labels that indicate a specific set of pods/VMs on which the configuration should be applied.
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (SidecarSpecWorkloadSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecWorkloadSelector)(nil)).Elem()
}

func (i SidecarSpecWorkloadSelectorArgs) ToSidecarSpecWorkloadSelectorOutput() SidecarSpecWorkloadSelectorOutput {
	return i.ToSidecarSpecWorkloadSelectorOutputWithContext(context.Background())
}

func (i SidecarSpecWorkloadSelectorArgs) ToSidecarSpecWorkloadSelectorOutputWithContext(ctx context.Context) SidecarSpecWorkloadSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecWorkloadSelectorOutput)
}

func (i SidecarSpecWorkloadSelectorArgs) ToSidecarSpecWorkloadSelectorPtrOutput() SidecarSpecWorkloadSelectorPtrOutput {
	return i.ToSidecarSpecWorkloadSelectorPtrOutputWithContext(context.Background())
}

func (i SidecarSpecWorkloadSelectorArgs) ToSidecarSpecWorkloadSelectorPtrOutputWithContext(ctx context.Context) SidecarSpecWorkloadSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecWorkloadSelectorOutput).ToSidecarSpecWorkloadSelectorPtrOutputWithContext(ctx)
}

// SidecarSpecWorkloadSelectorPtrInput is an input type that accepts SidecarSpecWorkloadSelectorArgs, SidecarSpecWorkloadSelectorPtr and SidecarSpecWorkloadSelectorPtrOutput values.
// You can construct a concrete instance of `SidecarSpecWorkloadSelectorPtrInput` via:
//
//	        SidecarSpecWorkloadSelectorArgs{...}
//
//	or:
//
//	        nil
type SidecarSpecWorkloadSelectorPtrInput interface {
	pulumi.Input

	ToSidecarSpecWorkloadSelectorPtrOutput() SidecarSpecWorkloadSelectorPtrOutput
	ToSidecarSpecWorkloadSelectorPtrOutputWithContext(context.Context) SidecarSpecWorkloadSelectorPtrOutput
}

type sidecarSpecWorkloadSelectorPtrType SidecarSpecWorkloadSelectorArgs

func SidecarSpecWorkloadSelectorPtr(v *SidecarSpecWorkloadSelectorArgs) SidecarSpecWorkloadSelectorPtrInput {
	return (*sidecarSpecWorkloadSelectorPtrType)(v)
}

func (*sidecarSpecWorkloadSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecWorkloadSelector)(nil)).Elem()
}

func (i *sidecarSpecWorkloadSelectorPtrType) ToSidecarSpecWorkloadSelectorPtrOutput() SidecarSpecWorkloadSelectorPtrOutput {
	return i.ToSidecarSpecWorkloadSelectorPtrOutputWithContext(context.Background())
}

func (i *sidecarSpecWorkloadSelectorPtrType) ToSidecarSpecWorkloadSelectorPtrOutputWithContext(ctx context.Context) SidecarSpecWorkloadSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarSpecWorkloadSelectorPtrOutput)
}

// Criteria used to select the specific set of pods/VMs on which this `Sidecar` configuration should be applied.
type SidecarSpecWorkloadSelectorOutput struct{ *pulumi.OutputState }

func (SidecarSpecWorkloadSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SidecarSpecWorkloadSelector)(nil)).Elem()
}

func (o SidecarSpecWorkloadSelectorOutput) ToSidecarSpecWorkloadSelectorOutput() SidecarSpecWorkloadSelectorOutput {
	return o
}

func (o SidecarSpecWorkloadSelectorOutput) ToSidecarSpecWorkloadSelectorOutputWithContext(ctx context.Context) SidecarSpecWorkloadSelectorOutput {
	return o
}

func (o SidecarSpecWorkloadSelectorOutput) ToSidecarSpecWorkloadSelectorPtrOutput() SidecarSpecWorkloadSelectorPtrOutput {
	return o.ToSidecarSpecWorkloadSelectorPtrOutputWithContext(context.Background())
}

func (o SidecarSpecWorkloadSelectorOutput) ToSidecarSpecWorkloadSelectorPtrOutputWithContext(ctx context.Context) SidecarSpecWorkloadSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SidecarSpecWorkloadSelector) *SidecarSpecWorkloadSelector {
		return &v
	}).(SidecarSpecWorkloadSelectorPtrOutput)
}

// One or more labels that indicate a specific set of pods/VMs on which the configuration should be applied.
func (o SidecarSpecWorkloadSelectorOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v SidecarSpecWorkloadSelector) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type SidecarSpecWorkloadSelectorPtrOutput struct{ *pulumi.OutputState }

func (SidecarSpecWorkloadSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarSpecWorkloadSelector)(nil)).Elem()
}

func (o SidecarSpecWorkloadSelectorPtrOutput) ToSidecarSpecWorkloadSelectorPtrOutput() SidecarSpecWorkloadSelectorPtrOutput {
	return o
}

func (o SidecarSpecWorkloadSelectorPtrOutput) ToSidecarSpecWorkloadSelectorPtrOutputWithContext(ctx context.Context) SidecarSpecWorkloadSelectorPtrOutput {
	return o
}

func (o SidecarSpecWorkloadSelectorPtrOutput) Elem() SidecarSpecWorkloadSelectorOutput {
	return o.ApplyT(func(v *SidecarSpecWorkloadSelector) SidecarSpecWorkloadSelector {
		if v != nil {
			return *v
		}
		var ret SidecarSpecWorkloadSelector
		return ret
	}).(SidecarSpecWorkloadSelectorOutput)
}

// One or more labels that indicate a specific set of pods/VMs on which the configuration should be applied.
func (o SidecarSpecWorkloadSelectorPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SidecarSpecWorkloadSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// One or more labels that indicate a specific set of pods/VMs on which the configuration should be applied.
type SidecarSpecWorkloadSelectorLabels struct {
}

type VirtualServiceType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Configuration affecting label/content routing, sni routing, etc. See more details at: https://istio.io/docs/reference/config/networking/virtual-service.html
	Spec   *VirtualServiceSpec    `pulumi:"spec"`
	Status map[string]interface{} `pulumi:"status"`
}

// Configuration affecting label/content routing, sni routing, etc. See more details at: https://istio.io/docs/reference/config/networking/virtual-service.html
type VirtualServiceSpec struct {
	// A list of namespaces to which this virtual service is exported.
	ExportTo []string `pulumi:"exportTo"`
	// The names of gateways and sidecars that should apply these routes.
	Gateways []string `pulumi:"gateways"`
	// The destination hosts to which traffic is being sent.
	Hosts []string `pulumi:"hosts"`
	// An ordered list of route rules for HTTP traffic.
	Http []VirtualServiceSpecHttp `pulumi:"http"`
	// An ordered list of route rules for opaque TCP traffic.
	Tcp []VirtualServiceSpecTcp `pulumi:"tcp"`
	// An ordered list of route rule for non-terminated TLS & HTTPS traffic.
	Tls []VirtualServiceSpecTls `pulumi:"tls"`
}

// VirtualServiceSpecInput is an input type that accepts VirtualServiceSpecArgs and VirtualServiceSpecOutput values.
// You can construct a concrete instance of `VirtualServiceSpecInput` via:
//
//	VirtualServiceSpecArgs{...}
type VirtualServiceSpecInput interface {
	pulumi.Input

	ToVirtualServiceSpecOutput() VirtualServiceSpecOutput
	ToVirtualServiceSpecOutputWithContext(context.Context) VirtualServiceSpecOutput
}

// Configuration affecting label/content routing, sni routing, etc. See more details at: https://istio.io/docs/reference/config/networking/virtual-service.html
type VirtualServiceSpecArgs struct {
	// A list of namespaces to which this virtual service is exported.
	ExportTo pulumi.StringArrayInput `pulumi:"exportTo"`
	// The names of gateways and sidecars that should apply these routes.
	Gateways pulumi.StringArrayInput `pulumi:"gateways"`
	// The destination hosts to which traffic is being sent.
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// An ordered list of route rules for HTTP traffic.
	Http VirtualServiceSpecHttpArrayInput `pulumi:"http"`
	// An ordered list of route rules for opaque TCP traffic.
	Tcp VirtualServiceSpecTcpArrayInput `pulumi:"tcp"`
	// An ordered list of route rule for non-terminated TLS & HTTPS traffic.
	Tls VirtualServiceSpecTlsArrayInput `pulumi:"tls"`
}

func (VirtualServiceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpec)(nil)).Elem()
}

func (i VirtualServiceSpecArgs) ToVirtualServiceSpecOutput() VirtualServiceSpecOutput {
	return i.ToVirtualServiceSpecOutputWithContext(context.Background())
}

func (i VirtualServiceSpecArgs) ToVirtualServiceSpecOutputWithContext(ctx context.Context) VirtualServiceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecOutput)
}

func (i VirtualServiceSpecArgs) ToVirtualServiceSpecPtrOutput() VirtualServiceSpecPtrOutput {
	return i.ToVirtualServiceSpecPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecArgs) ToVirtualServiceSpecPtrOutputWithContext(ctx context.Context) VirtualServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecOutput).ToVirtualServiceSpecPtrOutputWithContext(ctx)
}

// VirtualServiceSpecPtrInput is an input type that accepts VirtualServiceSpecArgs, VirtualServiceSpecPtr and VirtualServiceSpecPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecPtrInput` via:
//
//	        VirtualServiceSpecArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecPtrOutput() VirtualServiceSpecPtrOutput
	ToVirtualServiceSpecPtrOutputWithContext(context.Context) VirtualServiceSpecPtrOutput
}

type virtualServiceSpecPtrType VirtualServiceSpecArgs

func VirtualServiceSpecPtr(v *VirtualServiceSpecArgs) VirtualServiceSpecPtrInput {
	return (*virtualServiceSpecPtrType)(v)
}

func (*virtualServiceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpec)(nil)).Elem()
}

func (i *virtualServiceSpecPtrType) ToVirtualServiceSpecPtrOutput() VirtualServiceSpecPtrOutput {
	return i.ToVirtualServiceSpecPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecPtrType) ToVirtualServiceSpecPtrOutputWithContext(ctx context.Context) VirtualServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecPtrOutput)
}

// Configuration affecting label/content routing, sni routing, etc. See more details at: https://istio.io/docs/reference/config/networking/virtual-service.html
type VirtualServiceSpecOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpec)(nil)).Elem()
}

func (o VirtualServiceSpecOutput) ToVirtualServiceSpecOutput() VirtualServiceSpecOutput {
	return o
}

func (o VirtualServiceSpecOutput) ToVirtualServiceSpecOutputWithContext(ctx context.Context) VirtualServiceSpecOutput {
	return o
}

func (o VirtualServiceSpecOutput) ToVirtualServiceSpecPtrOutput() VirtualServiceSpecPtrOutput {
	return o.ToVirtualServiceSpecPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecOutput) ToVirtualServiceSpecPtrOutputWithContext(ctx context.Context) VirtualServiceSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpec) *VirtualServiceSpec {
		return &v
	}).(VirtualServiceSpecPtrOutput)
}

// A list of namespaces to which this virtual service is exported.
func (o VirtualServiceSpecOutput) ExportTo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpec) []string { return v.ExportTo }).(pulumi.StringArrayOutput)
}

// The names of gateways and sidecars that should apply these routes.
func (o VirtualServiceSpecOutput) Gateways() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpec) []string { return v.Gateways }).(pulumi.StringArrayOutput)
}

// The destination hosts to which traffic is being sent.
func (o VirtualServiceSpecOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpec) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// An ordered list of route rules for HTTP traffic.
func (o VirtualServiceSpecOutput) Http() VirtualServiceSpecHttpArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpec) []VirtualServiceSpecHttp { return v.Http }).(VirtualServiceSpecHttpArrayOutput)
}

// An ordered list of route rules for opaque TCP traffic.
func (o VirtualServiceSpecOutput) Tcp() VirtualServiceSpecTcpArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpec) []VirtualServiceSpecTcp { return v.Tcp }).(VirtualServiceSpecTcpArrayOutput)
}

// An ordered list of route rule for non-terminated TLS & HTTPS traffic.
func (o VirtualServiceSpecOutput) Tls() VirtualServiceSpecTlsArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpec) []VirtualServiceSpecTls { return v.Tls }).(VirtualServiceSpecTlsArrayOutput)
}

type VirtualServiceSpecPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpec)(nil)).Elem()
}

func (o VirtualServiceSpecPtrOutput) ToVirtualServiceSpecPtrOutput() VirtualServiceSpecPtrOutput {
	return o
}

func (o VirtualServiceSpecPtrOutput) ToVirtualServiceSpecPtrOutputWithContext(ctx context.Context) VirtualServiceSpecPtrOutput {
	return o
}

func (o VirtualServiceSpecPtrOutput) Elem() VirtualServiceSpecOutput {
	return o.ApplyT(func(v *VirtualServiceSpec) VirtualServiceSpec {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpec
		return ret
	}).(VirtualServiceSpecOutput)
}

// A list of namespaces to which this virtual service is exported.
func (o VirtualServiceSpecPtrOutput) ExportTo() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.ExportTo
	}).(pulumi.StringArrayOutput)
}

// The names of gateways and sidecars that should apply these routes.
func (o VirtualServiceSpecPtrOutput) Gateways() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.Gateways
	}).(pulumi.StringArrayOutput)
}

// The destination hosts to which traffic is being sent.
func (o VirtualServiceSpecPtrOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.Hosts
	}).(pulumi.StringArrayOutput)
}

// An ordered list of route rules for HTTP traffic.
func (o VirtualServiceSpecPtrOutput) Http() VirtualServiceSpecHttpArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpec) []VirtualServiceSpecHttp {
		if v == nil {
			return nil
		}
		return v.Http
	}).(VirtualServiceSpecHttpArrayOutput)
}

// An ordered list of route rules for opaque TCP traffic.
func (o VirtualServiceSpecPtrOutput) Tcp() VirtualServiceSpecTcpArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpec) []VirtualServiceSpecTcp {
		if v == nil {
			return nil
		}
		return v.Tcp
	}).(VirtualServiceSpecTcpArrayOutput)
}

// An ordered list of route rule for non-terminated TLS & HTTPS traffic.
func (o VirtualServiceSpecPtrOutput) Tls() VirtualServiceSpecTlsArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpec) []VirtualServiceSpecTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(VirtualServiceSpecTlsArrayOutput)
}

type VirtualServiceSpecHttp struct {
	// Cross-Origin Resource Sharing policy (CORS).
	CorsPolicy *VirtualServiceSpecHttpCorsPolicy `pulumi:"corsPolicy"`
	// Delegate is used to specify the particular VirtualService which can be used to define delegate HTTPRoute.
	Delegate *VirtualServiceSpecHttpDelegate `pulumi:"delegate"`
	// A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
	DirectResponse *VirtualServiceSpecHttpDirectResponse `pulumi:"directResponse"`
	// Fault injection policy to apply on HTTP traffic at the client side.
	Fault   *VirtualServiceSpecHttpFault   `pulumi:"fault"`
	Headers *VirtualServiceSpecHttpHeaders `pulumi:"headers"`
	// Match conditions to be satisfied for the rule to be activated.
	Match []VirtualServiceSpecHttpMatch `pulumi:"match"`
	// Mirror HTTP traffic to a another destination in addition to forwarding the requests to the intended destination.
	Mirror        *VirtualServiceSpecHttpMirror `pulumi:"mirror"`
	MirrorPercent *int                          `pulumi:"mirrorPercent"`
	// Percentage of the traffic to be mirrored by the `mirror` field.
	MirrorPercentage *VirtualServiceSpecHttpMirrorPercentage `pulumi:"mirrorPercentage"`
	Mirror_percent   *int                                    `pulumi:"mirror_percent"`
	// Specifies the destinations to mirror HTTP traffic in addition to the original destination.
	Mirrors []VirtualServiceSpecHttpMirrors `pulumi:"mirrors"`
	// The name assigned to the route for debugging purposes.
	Name *string `pulumi:"name"`
	// A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
	Redirect interface{} `pulumi:"redirect"`
	// Retry policy for HTTP requests.
	Retries *VirtualServiceSpecHttpRetries `pulumi:"retries"`
	// Rewrite HTTP URIs and Authority headers.
	Rewrite *VirtualServiceSpecHttpRewrite `pulumi:"rewrite"`
	// A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
	Route []VirtualServiceSpecHttpRoute `pulumi:"route"`
	// Timeout for HTTP requests, default is disabled.
	Timeout *string `pulumi:"timeout"`
}

// VirtualServiceSpecHttpInput is an input type that accepts VirtualServiceSpecHttpArgs and VirtualServiceSpecHttpOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpInput` via:
//
//	VirtualServiceSpecHttpArgs{...}
type VirtualServiceSpecHttpInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpOutput() VirtualServiceSpecHttpOutput
	ToVirtualServiceSpecHttpOutputWithContext(context.Context) VirtualServiceSpecHttpOutput
}

type VirtualServiceSpecHttpArgs struct {
	// Cross-Origin Resource Sharing policy (CORS).
	CorsPolicy VirtualServiceSpecHttpCorsPolicyPtrInput `pulumi:"corsPolicy"`
	// Delegate is used to specify the particular VirtualService which can be used to define delegate HTTPRoute.
	Delegate VirtualServiceSpecHttpDelegatePtrInput `pulumi:"delegate"`
	// A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
	DirectResponse VirtualServiceSpecHttpDirectResponsePtrInput `pulumi:"directResponse"`
	// Fault injection policy to apply on HTTP traffic at the client side.
	Fault   VirtualServiceSpecHttpFaultPtrInput   `pulumi:"fault"`
	Headers VirtualServiceSpecHttpHeadersPtrInput `pulumi:"headers"`
	// Match conditions to be satisfied for the rule to be activated.
	Match VirtualServiceSpecHttpMatchArrayInput `pulumi:"match"`
	// Mirror HTTP traffic to a another destination in addition to forwarding the requests to the intended destination.
	Mirror        VirtualServiceSpecHttpMirrorPtrInput `pulumi:"mirror"`
	MirrorPercent pulumi.IntPtrInput                   `pulumi:"mirrorPercent"`
	// Percentage of the traffic to be mirrored by the `mirror` field.
	MirrorPercentage VirtualServiceSpecHttpMirrorPercentagePtrInput `pulumi:"mirrorPercentage"`
	Mirror_percent   pulumi.IntPtrInput                             `pulumi:"mirror_percent"`
	// Specifies the destinations to mirror HTTP traffic in addition to the original destination.
	Mirrors VirtualServiceSpecHttpMirrorsArrayInput `pulumi:"mirrors"`
	// The name assigned to the route for debugging purposes.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
	Redirect pulumi.Input `pulumi:"redirect"`
	// Retry policy for HTTP requests.
	Retries VirtualServiceSpecHttpRetriesPtrInput `pulumi:"retries"`
	// Rewrite HTTP URIs and Authority headers.
	Rewrite VirtualServiceSpecHttpRewritePtrInput `pulumi:"rewrite"`
	// A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
	Route VirtualServiceSpecHttpRouteArrayInput `pulumi:"route"`
	// Timeout for HTTP requests, default is disabled.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (VirtualServiceSpecHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttp)(nil)).Elem()
}

func (i VirtualServiceSpecHttpArgs) ToVirtualServiceSpecHttpOutput() VirtualServiceSpecHttpOutput {
	return i.ToVirtualServiceSpecHttpOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpArgs) ToVirtualServiceSpecHttpOutputWithContext(ctx context.Context) VirtualServiceSpecHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpOutput)
}

// VirtualServiceSpecHttpArrayInput is an input type that accepts VirtualServiceSpecHttpArray and VirtualServiceSpecHttpArrayOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpArrayInput` via:
//
//	VirtualServiceSpecHttpArray{ VirtualServiceSpecHttpArgs{...} }
type VirtualServiceSpecHttpArrayInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpArrayOutput() VirtualServiceSpecHttpArrayOutput
	ToVirtualServiceSpecHttpArrayOutputWithContext(context.Context) VirtualServiceSpecHttpArrayOutput
}

type VirtualServiceSpecHttpArray []VirtualServiceSpecHttpInput

func (VirtualServiceSpecHttpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecHttp)(nil)).Elem()
}

func (i VirtualServiceSpecHttpArray) ToVirtualServiceSpecHttpArrayOutput() VirtualServiceSpecHttpArrayOutput {
	return i.ToVirtualServiceSpecHttpArrayOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpArray) ToVirtualServiceSpecHttpArrayOutputWithContext(ctx context.Context) VirtualServiceSpecHttpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpArrayOutput)
}

type VirtualServiceSpecHttpOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttp)(nil)).Elem()
}

func (o VirtualServiceSpecHttpOutput) ToVirtualServiceSpecHttpOutput() VirtualServiceSpecHttpOutput {
	return o
}

func (o VirtualServiceSpecHttpOutput) ToVirtualServiceSpecHttpOutputWithContext(ctx context.Context) VirtualServiceSpecHttpOutput {
	return o
}

// Cross-Origin Resource Sharing policy (CORS).
func (o VirtualServiceSpecHttpOutput) CorsPolicy() VirtualServiceSpecHttpCorsPolicyPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *VirtualServiceSpecHttpCorsPolicy { return v.CorsPolicy }).(VirtualServiceSpecHttpCorsPolicyPtrOutput)
}

// Delegate is used to specify the particular VirtualService which can be used to define delegate HTTPRoute.
func (o VirtualServiceSpecHttpOutput) Delegate() VirtualServiceSpecHttpDelegatePtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *VirtualServiceSpecHttpDelegate { return v.Delegate }).(VirtualServiceSpecHttpDelegatePtrOutput)
}

// A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
func (o VirtualServiceSpecHttpOutput) DirectResponse() VirtualServiceSpecHttpDirectResponsePtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *VirtualServiceSpecHttpDirectResponse { return v.DirectResponse }).(VirtualServiceSpecHttpDirectResponsePtrOutput)
}

// Fault injection policy to apply on HTTP traffic at the client side.
func (o VirtualServiceSpecHttpOutput) Fault() VirtualServiceSpecHttpFaultPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *VirtualServiceSpecHttpFault { return v.Fault }).(VirtualServiceSpecHttpFaultPtrOutput)
}

func (o VirtualServiceSpecHttpOutput) Headers() VirtualServiceSpecHttpHeadersPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *VirtualServiceSpecHttpHeaders { return v.Headers }).(VirtualServiceSpecHttpHeadersPtrOutput)
}

// Match conditions to be satisfied for the rule to be activated.
func (o VirtualServiceSpecHttpOutput) Match() VirtualServiceSpecHttpMatchArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) []VirtualServiceSpecHttpMatch { return v.Match }).(VirtualServiceSpecHttpMatchArrayOutput)
}

// Mirror HTTP traffic to a another destination in addition to forwarding the requests to the intended destination.
func (o VirtualServiceSpecHttpOutput) Mirror() VirtualServiceSpecHttpMirrorPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *VirtualServiceSpecHttpMirror { return v.Mirror }).(VirtualServiceSpecHttpMirrorPtrOutput)
}

func (o VirtualServiceSpecHttpOutput) MirrorPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *int { return v.MirrorPercent }).(pulumi.IntPtrOutput)
}

// Percentage of the traffic to be mirrored by the `mirror` field.
func (o VirtualServiceSpecHttpOutput) MirrorPercentage() VirtualServiceSpecHttpMirrorPercentagePtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *VirtualServiceSpecHttpMirrorPercentage { return v.MirrorPercentage }).(VirtualServiceSpecHttpMirrorPercentagePtrOutput)
}

func (o VirtualServiceSpecHttpOutput) Mirror_percent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *int { return v.Mirror_percent }).(pulumi.IntPtrOutput)
}

// Specifies the destinations to mirror HTTP traffic in addition to the original destination.
func (o VirtualServiceSpecHttpOutput) Mirrors() VirtualServiceSpecHttpMirrorsArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) []VirtualServiceSpecHttpMirrors { return v.Mirrors }).(VirtualServiceSpecHttpMirrorsArrayOutput)
}

// The name assigned to the route for debugging purposes.
func (o VirtualServiceSpecHttpOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
func (o VirtualServiceSpecHttpOutput) Redirect() pulumi.AnyOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) interface{} { return v.Redirect }).(pulumi.AnyOutput)
}

// Retry policy for HTTP requests.
func (o VirtualServiceSpecHttpOutput) Retries() VirtualServiceSpecHttpRetriesPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *VirtualServiceSpecHttpRetries { return v.Retries }).(VirtualServiceSpecHttpRetriesPtrOutput)
}

// Rewrite HTTP URIs and Authority headers.
func (o VirtualServiceSpecHttpOutput) Rewrite() VirtualServiceSpecHttpRewritePtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *VirtualServiceSpecHttpRewrite { return v.Rewrite }).(VirtualServiceSpecHttpRewritePtrOutput)
}

// A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
func (o VirtualServiceSpecHttpOutput) Route() VirtualServiceSpecHttpRouteArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) []VirtualServiceSpecHttpRoute { return v.Route }).(VirtualServiceSpecHttpRouteArrayOutput)
}

// Timeout for HTTP requests, default is disabled.
func (o VirtualServiceSpecHttpOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttp) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecHttpArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecHttp)(nil)).Elem()
}

func (o VirtualServiceSpecHttpArrayOutput) ToVirtualServiceSpecHttpArrayOutput() VirtualServiceSpecHttpArrayOutput {
	return o
}

func (o VirtualServiceSpecHttpArrayOutput) ToVirtualServiceSpecHttpArrayOutputWithContext(ctx context.Context) VirtualServiceSpecHttpArrayOutput {
	return o
}

func (o VirtualServiceSpecHttpArrayOutput) Index(i pulumi.IntInput) VirtualServiceSpecHttpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualServiceSpecHttp {
		return vs[0].([]VirtualServiceSpecHttp)[vs[1].(int)]
	}).(VirtualServiceSpecHttpOutput)
}

// Cross-Origin Resource Sharing policy (CORS).
type VirtualServiceSpecHttpCorsPolicy struct {
	// Indicates whether the caller is allowed to send the actual request (not the preflight) using credentials.
	AllowCredentials *bool `pulumi:"allowCredentials"`
	// List of HTTP headers that can be used when requesting the resource.
	AllowHeaders []string `pulumi:"allowHeaders"`
	// List of HTTP methods allowed to access the resource.
	AllowMethods []string `pulumi:"allowMethods"`
	AllowOrigin  []string `pulumi:"allowOrigin"`
	// String patterns that match allowed origins.
	AllowOrigins []interface{} `pulumi:"allowOrigins"`
	// A list of HTTP headers that the browsers are allowed to access.
	ExposeHeaders []string `pulumi:"exposeHeaders"`
	// Specifies how long the results of a preflight request can be cached.
	MaxAge *string `pulumi:"maxAge"`
}

// VirtualServiceSpecHttpCorsPolicyInput is an input type that accepts VirtualServiceSpecHttpCorsPolicyArgs and VirtualServiceSpecHttpCorsPolicyOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpCorsPolicyInput` via:
//
//	VirtualServiceSpecHttpCorsPolicyArgs{...}
type VirtualServiceSpecHttpCorsPolicyInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpCorsPolicyOutput() VirtualServiceSpecHttpCorsPolicyOutput
	ToVirtualServiceSpecHttpCorsPolicyOutputWithContext(context.Context) VirtualServiceSpecHttpCorsPolicyOutput
}

// Cross-Origin Resource Sharing policy (CORS).
type VirtualServiceSpecHttpCorsPolicyArgs struct {
	// Indicates whether the caller is allowed to send the actual request (not the preflight) using credentials.
	AllowCredentials pulumi.BoolPtrInput `pulumi:"allowCredentials"`
	// List of HTTP headers that can be used when requesting the resource.
	AllowHeaders pulumi.StringArrayInput `pulumi:"allowHeaders"`
	// List of HTTP methods allowed to access the resource.
	AllowMethods pulumi.StringArrayInput `pulumi:"allowMethods"`
	AllowOrigin  pulumi.StringArrayInput `pulumi:"allowOrigin"`
	// String patterns that match allowed origins.
	AllowOrigins pulumi.ArrayInput `pulumi:"allowOrigins"`
	// A list of HTTP headers that the browsers are allowed to access.
	ExposeHeaders pulumi.StringArrayInput `pulumi:"exposeHeaders"`
	// Specifies how long the results of a preflight request can be cached.
	MaxAge pulumi.StringPtrInput `pulumi:"maxAge"`
}

func (VirtualServiceSpecHttpCorsPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpCorsPolicy)(nil)).Elem()
}

func (i VirtualServiceSpecHttpCorsPolicyArgs) ToVirtualServiceSpecHttpCorsPolicyOutput() VirtualServiceSpecHttpCorsPolicyOutput {
	return i.ToVirtualServiceSpecHttpCorsPolicyOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpCorsPolicyArgs) ToVirtualServiceSpecHttpCorsPolicyOutputWithContext(ctx context.Context) VirtualServiceSpecHttpCorsPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpCorsPolicyOutput)
}

func (i VirtualServiceSpecHttpCorsPolicyArgs) ToVirtualServiceSpecHttpCorsPolicyPtrOutput() VirtualServiceSpecHttpCorsPolicyPtrOutput {
	return i.ToVirtualServiceSpecHttpCorsPolicyPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpCorsPolicyArgs) ToVirtualServiceSpecHttpCorsPolicyPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpCorsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpCorsPolicyOutput).ToVirtualServiceSpecHttpCorsPolicyPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpCorsPolicyPtrInput is an input type that accepts VirtualServiceSpecHttpCorsPolicyArgs, VirtualServiceSpecHttpCorsPolicyPtr and VirtualServiceSpecHttpCorsPolicyPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpCorsPolicyPtrInput` via:
//
//	        VirtualServiceSpecHttpCorsPolicyArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpCorsPolicyPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpCorsPolicyPtrOutput() VirtualServiceSpecHttpCorsPolicyPtrOutput
	ToVirtualServiceSpecHttpCorsPolicyPtrOutputWithContext(context.Context) VirtualServiceSpecHttpCorsPolicyPtrOutput
}

type virtualServiceSpecHttpCorsPolicyPtrType VirtualServiceSpecHttpCorsPolicyArgs

func VirtualServiceSpecHttpCorsPolicyPtr(v *VirtualServiceSpecHttpCorsPolicyArgs) VirtualServiceSpecHttpCorsPolicyPtrInput {
	return (*virtualServiceSpecHttpCorsPolicyPtrType)(v)
}

func (*virtualServiceSpecHttpCorsPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpCorsPolicy)(nil)).Elem()
}

func (i *virtualServiceSpecHttpCorsPolicyPtrType) ToVirtualServiceSpecHttpCorsPolicyPtrOutput() VirtualServiceSpecHttpCorsPolicyPtrOutput {
	return i.ToVirtualServiceSpecHttpCorsPolicyPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpCorsPolicyPtrType) ToVirtualServiceSpecHttpCorsPolicyPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpCorsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpCorsPolicyPtrOutput)
}

// Cross-Origin Resource Sharing policy (CORS).
type VirtualServiceSpecHttpCorsPolicyOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpCorsPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpCorsPolicy)(nil)).Elem()
}

func (o VirtualServiceSpecHttpCorsPolicyOutput) ToVirtualServiceSpecHttpCorsPolicyOutput() VirtualServiceSpecHttpCorsPolicyOutput {
	return o
}

func (o VirtualServiceSpecHttpCorsPolicyOutput) ToVirtualServiceSpecHttpCorsPolicyOutputWithContext(ctx context.Context) VirtualServiceSpecHttpCorsPolicyOutput {
	return o
}

func (o VirtualServiceSpecHttpCorsPolicyOutput) ToVirtualServiceSpecHttpCorsPolicyPtrOutput() VirtualServiceSpecHttpCorsPolicyPtrOutput {
	return o.ToVirtualServiceSpecHttpCorsPolicyPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpCorsPolicyOutput) ToVirtualServiceSpecHttpCorsPolicyPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpCorsPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpCorsPolicy) *VirtualServiceSpecHttpCorsPolicy {
		return &v
	}).(VirtualServiceSpecHttpCorsPolicyPtrOutput)
}

// Indicates whether the caller is allowed to send the actual request (not the preflight) using credentials.
func (o VirtualServiceSpecHttpCorsPolicyOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpCorsPolicy) *bool { return v.AllowCredentials }).(pulumi.BoolPtrOutput)
}

// List of HTTP headers that can be used when requesting the resource.
func (o VirtualServiceSpecHttpCorsPolicyOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpCorsPolicy) []string { return v.AllowHeaders }).(pulumi.StringArrayOutput)
}

// List of HTTP methods allowed to access the resource.
func (o VirtualServiceSpecHttpCorsPolicyOutput) AllowMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpCorsPolicy) []string { return v.AllowMethods }).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpCorsPolicyOutput) AllowOrigin() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpCorsPolicy) []string { return v.AllowOrigin }).(pulumi.StringArrayOutput)
}

// String patterns that match allowed origins.
func (o VirtualServiceSpecHttpCorsPolicyOutput) AllowOrigins() pulumi.ArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpCorsPolicy) []interface{} { return v.AllowOrigins }).(pulumi.ArrayOutput)
}

// A list of HTTP headers that the browsers are allowed to access.
func (o VirtualServiceSpecHttpCorsPolicyOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpCorsPolicy) []string { return v.ExposeHeaders }).(pulumi.StringArrayOutput)
}

// Specifies how long the results of a preflight request can be cached.
func (o VirtualServiceSpecHttpCorsPolicyOutput) MaxAge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpCorsPolicy) *string { return v.MaxAge }).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecHttpCorsPolicyPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpCorsPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpCorsPolicy)(nil)).Elem()
}

func (o VirtualServiceSpecHttpCorsPolicyPtrOutput) ToVirtualServiceSpecHttpCorsPolicyPtrOutput() VirtualServiceSpecHttpCorsPolicyPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpCorsPolicyPtrOutput) ToVirtualServiceSpecHttpCorsPolicyPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpCorsPolicyPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpCorsPolicyPtrOutput) Elem() VirtualServiceSpecHttpCorsPolicyOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpCorsPolicy) VirtualServiceSpecHttpCorsPolicy {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpCorsPolicy
		return ret
	}).(VirtualServiceSpecHttpCorsPolicyOutput)
}

// Indicates whether the caller is allowed to send the actual request (not the preflight) using credentials.
func (o VirtualServiceSpecHttpCorsPolicyPtrOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpCorsPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.AllowCredentials
	}).(pulumi.BoolPtrOutput)
}

// List of HTTP headers that can be used when requesting the resource.
func (o VirtualServiceSpecHttpCorsPolicyPtrOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowHeaders
	}).(pulumi.StringArrayOutput)
}

// List of HTTP methods allowed to access the resource.
func (o VirtualServiceSpecHttpCorsPolicyPtrOutput) AllowMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowMethods
	}).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpCorsPolicyPtrOutput) AllowOrigin() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowOrigin
	}).(pulumi.StringArrayOutput)
}

// String patterns that match allowed origins.
func (o VirtualServiceSpecHttpCorsPolicyPtrOutput) AllowOrigins() pulumi.ArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpCorsPolicy) []interface{} {
		if v == nil {
			return nil
		}
		return v.AllowOrigins
	}).(pulumi.ArrayOutput)
}

// A list of HTTP headers that the browsers are allowed to access.
func (o VirtualServiceSpecHttpCorsPolicyPtrOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.ExposeHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies how long the results of a preflight request can be cached.
func (o VirtualServiceSpecHttpCorsPolicyPtrOutput) MaxAge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpCorsPolicy) *string {
		if v == nil {
			return nil
		}
		return v.MaxAge
	}).(pulumi.StringPtrOutput)
}

// Delegate is used to specify the particular VirtualService which can be used to define delegate HTTPRoute.
type VirtualServiceSpecHttpDelegate struct {
	// Name specifies the name of the delegate VirtualService.
	Name *string `pulumi:"name"`
	// Namespace specifies the namespace where the delegate VirtualService resides.
	Namespace *string `pulumi:"namespace"`
}

// VirtualServiceSpecHttpDelegateInput is an input type that accepts VirtualServiceSpecHttpDelegateArgs and VirtualServiceSpecHttpDelegateOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpDelegateInput` via:
//
//	VirtualServiceSpecHttpDelegateArgs{...}
type VirtualServiceSpecHttpDelegateInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpDelegateOutput() VirtualServiceSpecHttpDelegateOutput
	ToVirtualServiceSpecHttpDelegateOutputWithContext(context.Context) VirtualServiceSpecHttpDelegateOutput
}

// Delegate is used to specify the particular VirtualService which can be used to define delegate HTTPRoute.
type VirtualServiceSpecHttpDelegateArgs struct {
	// Name specifies the name of the delegate VirtualService.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace specifies the namespace where the delegate VirtualService resides.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (VirtualServiceSpecHttpDelegateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpDelegate)(nil)).Elem()
}

func (i VirtualServiceSpecHttpDelegateArgs) ToVirtualServiceSpecHttpDelegateOutput() VirtualServiceSpecHttpDelegateOutput {
	return i.ToVirtualServiceSpecHttpDelegateOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpDelegateArgs) ToVirtualServiceSpecHttpDelegateOutputWithContext(ctx context.Context) VirtualServiceSpecHttpDelegateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpDelegateOutput)
}

func (i VirtualServiceSpecHttpDelegateArgs) ToVirtualServiceSpecHttpDelegatePtrOutput() VirtualServiceSpecHttpDelegatePtrOutput {
	return i.ToVirtualServiceSpecHttpDelegatePtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpDelegateArgs) ToVirtualServiceSpecHttpDelegatePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpDelegatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpDelegateOutput).ToVirtualServiceSpecHttpDelegatePtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpDelegatePtrInput is an input type that accepts VirtualServiceSpecHttpDelegateArgs, VirtualServiceSpecHttpDelegatePtr and VirtualServiceSpecHttpDelegatePtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpDelegatePtrInput` via:
//
//	        VirtualServiceSpecHttpDelegateArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpDelegatePtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpDelegatePtrOutput() VirtualServiceSpecHttpDelegatePtrOutput
	ToVirtualServiceSpecHttpDelegatePtrOutputWithContext(context.Context) VirtualServiceSpecHttpDelegatePtrOutput
}

type virtualServiceSpecHttpDelegatePtrType VirtualServiceSpecHttpDelegateArgs

func VirtualServiceSpecHttpDelegatePtr(v *VirtualServiceSpecHttpDelegateArgs) VirtualServiceSpecHttpDelegatePtrInput {
	return (*virtualServiceSpecHttpDelegatePtrType)(v)
}

func (*virtualServiceSpecHttpDelegatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpDelegate)(nil)).Elem()
}

func (i *virtualServiceSpecHttpDelegatePtrType) ToVirtualServiceSpecHttpDelegatePtrOutput() VirtualServiceSpecHttpDelegatePtrOutput {
	return i.ToVirtualServiceSpecHttpDelegatePtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpDelegatePtrType) ToVirtualServiceSpecHttpDelegatePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpDelegatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpDelegatePtrOutput)
}

// Delegate is used to specify the particular VirtualService which can be used to define delegate HTTPRoute.
type VirtualServiceSpecHttpDelegateOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpDelegateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpDelegate)(nil)).Elem()
}

func (o VirtualServiceSpecHttpDelegateOutput) ToVirtualServiceSpecHttpDelegateOutput() VirtualServiceSpecHttpDelegateOutput {
	return o
}

func (o VirtualServiceSpecHttpDelegateOutput) ToVirtualServiceSpecHttpDelegateOutputWithContext(ctx context.Context) VirtualServiceSpecHttpDelegateOutput {
	return o
}

func (o VirtualServiceSpecHttpDelegateOutput) ToVirtualServiceSpecHttpDelegatePtrOutput() VirtualServiceSpecHttpDelegatePtrOutput {
	return o.ToVirtualServiceSpecHttpDelegatePtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpDelegateOutput) ToVirtualServiceSpecHttpDelegatePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpDelegatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpDelegate) *VirtualServiceSpecHttpDelegate {
		return &v
	}).(VirtualServiceSpecHttpDelegatePtrOutput)
}

// Name specifies the name of the delegate VirtualService.
func (o VirtualServiceSpecHttpDelegateOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpDelegate) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace specifies the namespace where the delegate VirtualService resides.
func (o VirtualServiceSpecHttpDelegateOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpDelegate) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecHttpDelegatePtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpDelegatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpDelegate)(nil)).Elem()
}

func (o VirtualServiceSpecHttpDelegatePtrOutput) ToVirtualServiceSpecHttpDelegatePtrOutput() VirtualServiceSpecHttpDelegatePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpDelegatePtrOutput) ToVirtualServiceSpecHttpDelegatePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpDelegatePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpDelegatePtrOutput) Elem() VirtualServiceSpecHttpDelegateOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpDelegate) VirtualServiceSpecHttpDelegate {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpDelegate
		return ret
	}).(VirtualServiceSpecHttpDelegateOutput)
}

// Name specifies the name of the delegate VirtualService.
func (o VirtualServiceSpecHttpDelegatePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpDelegate) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace specifies the namespace where the delegate VirtualService resides.
func (o VirtualServiceSpecHttpDelegatePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpDelegate) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
type VirtualServiceSpecHttpDirectResponse struct {
	// Specifies the content of the response body.
	Body interface{} `pulumi:"body"`
	// Specifies the HTTP response status to be returned.
	Status int `pulumi:"status"`
}

// VirtualServiceSpecHttpDirectResponseInput is an input type that accepts VirtualServiceSpecHttpDirectResponseArgs and VirtualServiceSpecHttpDirectResponseOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpDirectResponseInput` via:
//
//	VirtualServiceSpecHttpDirectResponseArgs{...}
type VirtualServiceSpecHttpDirectResponseInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpDirectResponseOutput() VirtualServiceSpecHttpDirectResponseOutput
	ToVirtualServiceSpecHttpDirectResponseOutputWithContext(context.Context) VirtualServiceSpecHttpDirectResponseOutput
}

// A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
type VirtualServiceSpecHttpDirectResponseArgs struct {
	// Specifies the content of the response body.
	Body pulumi.Input `pulumi:"body"`
	// Specifies the HTTP response status to be returned.
	Status pulumi.IntInput `pulumi:"status"`
}

func (VirtualServiceSpecHttpDirectResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpDirectResponse)(nil)).Elem()
}

func (i VirtualServiceSpecHttpDirectResponseArgs) ToVirtualServiceSpecHttpDirectResponseOutput() VirtualServiceSpecHttpDirectResponseOutput {
	return i.ToVirtualServiceSpecHttpDirectResponseOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpDirectResponseArgs) ToVirtualServiceSpecHttpDirectResponseOutputWithContext(ctx context.Context) VirtualServiceSpecHttpDirectResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpDirectResponseOutput)
}

func (i VirtualServiceSpecHttpDirectResponseArgs) ToVirtualServiceSpecHttpDirectResponsePtrOutput() VirtualServiceSpecHttpDirectResponsePtrOutput {
	return i.ToVirtualServiceSpecHttpDirectResponsePtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpDirectResponseArgs) ToVirtualServiceSpecHttpDirectResponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpDirectResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpDirectResponseOutput).ToVirtualServiceSpecHttpDirectResponsePtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpDirectResponsePtrInput is an input type that accepts VirtualServiceSpecHttpDirectResponseArgs, VirtualServiceSpecHttpDirectResponsePtr and VirtualServiceSpecHttpDirectResponsePtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpDirectResponsePtrInput` via:
//
//	        VirtualServiceSpecHttpDirectResponseArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpDirectResponsePtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpDirectResponsePtrOutput() VirtualServiceSpecHttpDirectResponsePtrOutput
	ToVirtualServiceSpecHttpDirectResponsePtrOutputWithContext(context.Context) VirtualServiceSpecHttpDirectResponsePtrOutput
}

type virtualServiceSpecHttpDirectResponsePtrType VirtualServiceSpecHttpDirectResponseArgs

func VirtualServiceSpecHttpDirectResponsePtr(v *VirtualServiceSpecHttpDirectResponseArgs) VirtualServiceSpecHttpDirectResponsePtrInput {
	return (*virtualServiceSpecHttpDirectResponsePtrType)(v)
}

func (*virtualServiceSpecHttpDirectResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpDirectResponse)(nil)).Elem()
}

func (i *virtualServiceSpecHttpDirectResponsePtrType) ToVirtualServiceSpecHttpDirectResponsePtrOutput() VirtualServiceSpecHttpDirectResponsePtrOutput {
	return i.ToVirtualServiceSpecHttpDirectResponsePtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpDirectResponsePtrType) ToVirtualServiceSpecHttpDirectResponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpDirectResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpDirectResponsePtrOutput)
}

// A HTTP rule can either return a direct_response, redirect or forward (default) traffic.
type VirtualServiceSpecHttpDirectResponseOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpDirectResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpDirectResponse)(nil)).Elem()
}

func (o VirtualServiceSpecHttpDirectResponseOutput) ToVirtualServiceSpecHttpDirectResponseOutput() VirtualServiceSpecHttpDirectResponseOutput {
	return o
}

func (o VirtualServiceSpecHttpDirectResponseOutput) ToVirtualServiceSpecHttpDirectResponseOutputWithContext(ctx context.Context) VirtualServiceSpecHttpDirectResponseOutput {
	return o
}

func (o VirtualServiceSpecHttpDirectResponseOutput) ToVirtualServiceSpecHttpDirectResponsePtrOutput() VirtualServiceSpecHttpDirectResponsePtrOutput {
	return o.ToVirtualServiceSpecHttpDirectResponsePtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpDirectResponseOutput) ToVirtualServiceSpecHttpDirectResponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpDirectResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpDirectResponse) *VirtualServiceSpecHttpDirectResponse {
		return &v
	}).(VirtualServiceSpecHttpDirectResponsePtrOutput)
}

// Specifies the content of the response body.
func (o VirtualServiceSpecHttpDirectResponseOutput) Body() pulumi.AnyOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpDirectResponse) interface{} { return v.Body }).(pulumi.AnyOutput)
}

// Specifies the HTTP response status to be returned.
func (o VirtualServiceSpecHttpDirectResponseOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpDirectResponse) int { return v.Status }).(pulumi.IntOutput)
}

type VirtualServiceSpecHttpDirectResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpDirectResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpDirectResponse)(nil)).Elem()
}

func (o VirtualServiceSpecHttpDirectResponsePtrOutput) ToVirtualServiceSpecHttpDirectResponsePtrOutput() VirtualServiceSpecHttpDirectResponsePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpDirectResponsePtrOutput) ToVirtualServiceSpecHttpDirectResponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpDirectResponsePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpDirectResponsePtrOutput) Elem() VirtualServiceSpecHttpDirectResponseOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpDirectResponse) VirtualServiceSpecHttpDirectResponse {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpDirectResponse
		return ret
	}).(VirtualServiceSpecHttpDirectResponseOutput)
}

// Specifies the content of the response body.
func (o VirtualServiceSpecHttpDirectResponsePtrOutput) Body() pulumi.AnyOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpDirectResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Body
	}).(pulumi.AnyOutput)
}

// Specifies the HTTP response status to be returned.
func (o VirtualServiceSpecHttpDirectResponsePtrOutput) Status() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpDirectResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.IntPtrOutput)
}

// Fault injection policy to apply on HTTP traffic at the client side.
type VirtualServiceSpecHttpFault struct {
	// Abort Http request attempts and return error codes back to downstream service, giving the impression that the upstream service is faulty.
	Abort interface{} `pulumi:"abort"`
	// Delay requests before forwarding, emulating various failures such as network issues, overloaded upstream service, etc.
	Delay interface{} `pulumi:"delay"`
}

// VirtualServiceSpecHttpFaultInput is an input type that accepts VirtualServiceSpecHttpFaultArgs and VirtualServiceSpecHttpFaultOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpFaultInput` via:
//
//	VirtualServiceSpecHttpFaultArgs{...}
type VirtualServiceSpecHttpFaultInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpFaultOutput() VirtualServiceSpecHttpFaultOutput
	ToVirtualServiceSpecHttpFaultOutputWithContext(context.Context) VirtualServiceSpecHttpFaultOutput
}

// Fault injection policy to apply on HTTP traffic at the client side.
type VirtualServiceSpecHttpFaultArgs struct {
	// Abort Http request attempts and return error codes back to downstream service, giving the impression that the upstream service is faulty.
	Abort pulumi.Input `pulumi:"abort"`
	// Delay requests before forwarding, emulating various failures such as network issues, overloaded upstream service, etc.
	Delay pulumi.Input `pulumi:"delay"`
}

func (VirtualServiceSpecHttpFaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpFault)(nil)).Elem()
}

func (i VirtualServiceSpecHttpFaultArgs) ToVirtualServiceSpecHttpFaultOutput() VirtualServiceSpecHttpFaultOutput {
	return i.ToVirtualServiceSpecHttpFaultOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpFaultArgs) ToVirtualServiceSpecHttpFaultOutputWithContext(ctx context.Context) VirtualServiceSpecHttpFaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpFaultOutput)
}

func (i VirtualServiceSpecHttpFaultArgs) ToVirtualServiceSpecHttpFaultPtrOutput() VirtualServiceSpecHttpFaultPtrOutput {
	return i.ToVirtualServiceSpecHttpFaultPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpFaultArgs) ToVirtualServiceSpecHttpFaultPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpFaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpFaultOutput).ToVirtualServiceSpecHttpFaultPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpFaultPtrInput is an input type that accepts VirtualServiceSpecHttpFaultArgs, VirtualServiceSpecHttpFaultPtr and VirtualServiceSpecHttpFaultPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpFaultPtrInput` via:
//
//	        VirtualServiceSpecHttpFaultArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpFaultPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpFaultPtrOutput() VirtualServiceSpecHttpFaultPtrOutput
	ToVirtualServiceSpecHttpFaultPtrOutputWithContext(context.Context) VirtualServiceSpecHttpFaultPtrOutput
}

type virtualServiceSpecHttpFaultPtrType VirtualServiceSpecHttpFaultArgs

func VirtualServiceSpecHttpFaultPtr(v *VirtualServiceSpecHttpFaultArgs) VirtualServiceSpecHttpFaultPtrInput {
	return (*virtualServiceSpecHttpFaultPtrType)(v)
}

func (*virtualServiceSpecHttpFaultPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpFault)(nil)).Elem()
}

func (i *virtualServiceSpecHttpFaultPtrType) ToVirtualServiceSpecHttpFaultPtrOutput() VirtualServiceSpecHttpFaultPtrOutput {
	return i.ToVirtualServiceSpecHttpFaultPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpFaultPtrType) ToVirtualServiceSpecHttpFaultPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpFaultPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpFaultPtrOutput)
}

// Fault injection policy to apply on HTTP traffic at the client side.
type VirtualServiceSpecHttpFaultOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpFaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpFault)(nil)).Elem()
}

func (o VirtualServiceSpecHttpFaultOutput) ToVirtualServiceSpecHttpFaultOutput() VirtualServiceSpecHttpFaultOutput {
	return o
}

func (o VirtualServiceSpecHttpFaultOutput) ToVirtualServiceSpecHttpFaultOutputWithContext(ctx context.Context) VirtualServiceSpecHttpFaultOutput {
	return o
}

func (o VirtualServiceSpecHttpFaultOutput) ToVirtualServiceSpecHttpFaultPtrOutput() VirtualServiceSpecHttpFaultPtrOutput {
	return o.ToVirtualServiceSpecHttpFaultPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpFaultOutput) ToVirtualServiceSpecHttpFaultPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpFaultPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpFault) *VirtualServiceSpecHttpFault {
		return &v
	}).(VirtualServiceSpecHttpFaultPtrOutput)
}

// Abort Http request attempts and return error codes back to downstream service, giving the impression that the upstream service is faulty.
func (o VirtualServiceSpecHttpFaultOutput) Abort() pulumi.AnyOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpFault) interface{} { return v.Abort }).(pulumi.AnyOutput)
}

// Delay requests before forwarding, emulating various failures such as network issues, overloaded upstream service, etc.
func (o VirtualServiceSpecHttpFaultOutput) Delay() pulumi.AnyOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpFault) interface{} { return v.Delay }).(pulumi.AnyOutput)
}

type VirtualServiceSpecHttpFaultPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpFaultPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpFault)(nil)).Elem()
}

func (o VirtualServiceSpecHttpFaultPtrOutput) ToVirtualServiceSpecHttpFaultPtrOutput() VirtualServiceSpecHttpFaultPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpFaultPtrOutput) ToVirtualServiceSpecHttpFaultPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpFaultPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpFaultPtrOutput) Elem() VirtualServiceSpecHttpFaultOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpFault) VirtualServiceSpecHttpFault {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpFault
		return ret
	}).(VirtualServiceSpecHttpFaultOutput)
}

// Abort Http request attempts and return error codes back to downstream service, giving the impression that the upstream service is faulty.
func (o VirtualServiceSpecHttpFaultPtrOutput) Abort() pulumi.AnyOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpFault) interface{} {
		if v == nil {
			return nil
		}
		return v.Abort
	}).(pulumi.AnyOutput)
}

// Delay requests before forwarding, emulating various failures such as network issues, overloaded upstream service, etc.
func (o VirtualServiceSpecHttpFaultPtrOutput) Delay() pulumi.AnyOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpFault) interface{} {
		if v == nil {
			return nil
		}
		return v.Delay
	}).(pulumi.AnyOutput)
}

type VirtualServiceSpecHttpHeaders struct {
	Request  *VirtualServiceSpecHttpHeadersRequest  `pulumi:"request"`
	Response *VirtualServiceSpecHttpHeadersResponse `pulumi:"response"`
}

// VirtualServiceSpecHttpHeadersInput is an input type that accepts VirtualServiceSpecHttpHeadersArgs and VirtualServiceSpecHttpHeadersOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpHeadersInput` via:
//
//	VirtualServiceSpecHttpHeadersArgs{...}
type VirtualServiceSpecHttpHeadersInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpHeadersOutput() VirtualServiceSpecHttpHeadersOutput
	ToVirtualServiceSpecHttpHeadersOutputWithContext(context.Context) VirtualServiceSpecHttpHeadersOutput
}

type VirtualServiceSpecHttpHeadersArgs struct {
	Request  VirtualServiceSpecHttpHeadersRequestPtrInput  `pulumi:"request"`
	Response VirtualServiceSpecHttpHeadersResponsePtrInput `pulumi:"response"`
}

func (VirtualServiceSpecHttpHeadersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpHeaders)(nil)).Elem()
}

func (i VirtualServiceSpecHttpHeadersArgs) ToVirtualServiceSpecHttpHeadersOutput() VirtualServiceSpecHttpHeadersOutput {
	return i.ToVirtualServiceSpecHttpHeadersOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpHeadersArgs) ToVirtualServiceSpecHttpHeadersOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpHeadersOutput)
}

func (i VirtualServiceSpecHttpHeadersArgs) ToVirtualServiceSpecHttpHeadersPtrOutput() VirtualServiceSpecHttpHeadersPtrOutput {
	return i.ToVirtualServiceSpecHttpHeadersPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpHeadersArgs) ToVirtualServiceSpecHttpHeadersPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpHeadersOutput).ToVirtualServiceSpecHttpHeadersPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpHeadersPtrInput is an input type that accepts VirtualServiceSpecHttpHeadersArgs, VirtualServiceSpecHttpHeadersPtr and VirtualServiceSpecHttpHeadersPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpHeadersPtrInput` via:
//
//	        VirtualServiceSpecHttpHeadersArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpHeadersPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpHeadersPtrOutput() VirtualServiceSpecHttpHeadersPtrOutput
	ToVirtualServiceSpecHttpHeadersPtrOutputWithContext(context.Context) VirtualServiceSpecHttpHeadersPtrOutput
}

type virtualServiceSpecHttpHeadersPtrType VirtualServiceSpecHttpHeadersArgs

func VirtualServiceSpecHttpHeadersPtr(v *VirtualServiceSpecHttpHeadersArgs) VirtualServiceSpecHttpHeadersPtrInput {
	return (*virtualServiceSpecHttpHeadersPtrType)(v)
}

func (*virtualServiceSpecHttpHeadersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpHeaders)(nil)).Elem()
}

func (i *virtualServiceSpecHttpHeadersPtrType) ToVirtualServiceSpecHttpHeadersPtrOutput() VirtualServiceSpecHttpHeadersPtrOutput {
	return i.ToVirtualServiceSpecHttpHeadersPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpHeadersPtrType) ToVirtualServiceSpecHttpHeadersPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpHeadersPtrOutput)
}

type VirtualServiceSpecHttpHeadersOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpHeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpHeaders)(nil)).Elem()
}

func (o VirtualServiceSpecHttpHeadersOutput) ToVirtualServiceSpecHttpHeadersOutput() VirtualServiceSpecHttpHeadersOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersOutput) ToVirtualServiceSpecHttpHeadersOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersOutput) ToVirtualServiceSpecHttpHeadersPtrOutput() VirtualServiceSpecHttpHeadersPtrOutput {
	return o.ToVirtualServiceSpecHttpHeadersPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpHeadersOutput) ToVirtualServiceSpecHttpHeadersPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpHeaders) *VirtualServiceSpecHttpHeaders {
		return &v
	}).(VirtualServiceSpecHttpHeadersPtrOutput)
}

func (o VirtualServiceSpecHttpHeadersOutput) Request() VirtualServiceSpecHttpHeadersRequestPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpHeaders) *VirtualServiceSpecHttpHeadersRequest { return v.Request }).(VirtualServiceSpecHttpHeadersRequestPtrOutput)
}

func (o VirtualServiceSpecHttpHeadersOutput) Response() VirtualServiceSpecHttpHeadersResponsePtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpHeaders) *VirtualServiceSpecHttpHeadersResponse { return v.Response }).(VirtualServiceSpecHttpHeadersResponsePtrOutput)
}

type VirtualServiceSpecHttpHeadersPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpHeadersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpHeaders)(nil)).Elem()
}

func (o VirtualServiceSpecHttpHeadersPtrOutput) ToVirtualServiceSpecHttpHeadersPtrOutput() VirtualServiceSpecHttpHeadersPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersPtrOutput) ToVirtualServiceSpecHttpHeadersPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersPtrOutput) Elem() VirtualServiceSpecHttpHeadersOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeaders) VirtualServiceSpecHttpHeaders {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpHeaders
		return ret
	}).(VirtualServiceSpecHttpHeadersOutput)
}

func (o VirtualServiceSpecHttpHeadersPtrOutput) Request() VirtualServiceSpecHttpHeadersRequestPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeaders) *VirtualServiceSpecHttpHeadersRequest {
		if v == nil {
			return nil
		}
		return v.Request
	}).(VirtualServiceSpecHttpHeadersRequestPtrOutput)
}

func (o VirtualServiceSpecHttpHeadersPtrOutput) Response() VirtualServiceSpecHttpHeadersResponsePtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeaders) *VirtualServiceSpecHttpHeadersResponse {
		if v == nil {
			return nil
		}
		return v.Response
	}).(VirtualServiceSpecHttpHeadersResponsePtrOutput)
}

type VirtualServiceSpecHttpHeadersRequest struct {
	Add    map[string]string `pulumi:"add"`
	Remove []string          `pulumi:"remove"`
	Set    map[string]string `pulumi:"set"`
}

// VirtualServiceSpecHttpHeadersRequestInput is an input type that accepts VirtualServiceSpecHttpHeadersRequestArgs and VirtualServiceSpecHttpHeadersRequestOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpHeadersRequestInput` via:
//
//	VirtualServiceSpecHttpHeadersRequestArgs{...}
type VirtualServiceSpecHttpHeadersRequestInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpHeadersRequestOutput() VirtualServiceSpecHttpHeadersRequestOutput
	ToVirtualServiceSpecHttpHeadersRequestOutputWithContext(context.Context) VirtualServiceSpecHttpHeadersRequestOutput
}

type VirtualServiceSpecHttpHeadersRequestArgs struct {
	Add    pulumi.StringMapInput   `pulumi:"add"`
	Remove pulumi.StringArrayInput `pulumi:"remove"`
	Set    pulumi.StringMapInput   `pulumi:"set"`
}

func (VirtualServiceSpecHttpHeadersRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpHeadersRequest)(nil)).Elem()
}

func (i VirtualServiceSpecHttpHeadersRequestArgs) ToVirtualServiceSpecHttpHeadersRequestOutput() VirtualServiceSpecHttpHeadersRequestOutput {
	return i.ToVirtualServiceSpecHttpHeadersRequestOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpHeadersRequestArgs) ToVirtualServiceSpecHttpHeadersRequestOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpHeadersRequestOutput)
}

func (i VirtualServiceSpecHttpHeadersRequestArgs) ToVirtualServiceSpecHttpHeadersRequestPtrOutput() VirtualServiceSpecHttpHeadersRequestPtrOutput {
	return i.ToVirtualServiceSpecHttpHeadersRequestPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpHeadersRequestArgs) ToVirtualServiceSpecHttpHeadersRequestPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpHeadersRequestOutput).ToVirtualServiceSpecHttpHeadersRequestPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpHeadersRequestPtrInput is an input type that accepts VirtualServiceSpecHttpHeadersRequestArgs, VirtualServiceSpecHttpHeadersRequestPtr and VirtualServiceSpecHttpHeadersRequestPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpHeadersRequestPtrInput` via:
//
//	        VirtualServiceSpecHttpHeadersRequestArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpHeadersRequestPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpHeadersRequestPtrOutput() VirtualServiceSpecHttpHeadersRequestPtrOutput
	ToVirtualServiceSpecHttpHeadersRequestPtrOutputWithContext(context.Context) VirtualServiceSpecHttpHeadersRequestPtrOutput
}

type virtualServiceSpecHttpHeadersRequestPtrType VirtualServiceSpecHttpHeadersRequestArgs

func VirtualServiceSpecHttpHeadersRequestPtr(v *VirtualServiceSpecHttpHeadersRequestArgs) VirtualServiceSpecHttpHeadersRequestPtrInput {
	return (*virtualServiceSpecHttpHeadersRequestPtrType)(v)
}

func (*virtualServiceSpecHttpHeadersRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpHeadersRequest)(nil)).Elem()
}

func (i *virtualServiceSpecHttpHeadersRequestPtrType) ToVirtualServiceSpecHttpHeadersRequestPtrOutput() VirtualServiceSpecHttpHeadersRequestPtrOutput {
	return i.ToVirtualServiceSpecHttpHeadersRequestPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpHeadersRequestPtrType) ToVirtualServiceSpecHttpHeadersRequestPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpHeadersRequestPtrOutput)
}

type VirtualServiceSpecHttpHeadersRequestOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpHeadersRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpHeadersRequest)(nil)).Elem()
}

func (o VirtualServiceSpecHttpHeadersRequestOutput) ToVirtualServiceSpecHttpHeadersRequestOutput() VirtualServiceSpecHttpHeadersRequestOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersRequestOutput) ToVirtualServiceSpecHttpHeadersRequestOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersRequestOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersRequestOutput) ToVirtualServiceSpecHttpHeadersRequestPtrOutput() VirtualServiceSpecHttpHeadersRequestPtrOutput {
	return o.ToVirtualServiceSpecHttpHeadersRequestPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpHeadersRequestOutput) ToVirtualServiceSpecHttpHeadersRequestPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpHeadersRequest) *VirtualServiceSpecHttpHeadersRequest {
		return &v
	}).(VirtualServiceSpecHttpHeadersRequestPtrOutput)
}

func (o VirtualServiceSpecHttpHeadersRequestOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpHeadersRequest) map[string]string { return v.Add }).(pulumi.StringMapOutput)
}

func (o VirtualServiceSpecHttpHeadersRequestOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpHeadersRequest) []string { return v.Remove }).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpHeadersRequestOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpHeadersRequest) map[string]string { return v.Set }).(pulumi.StringMapOutput)
}

type VirtualServiceSpecHttpHeadersRequestPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpHeadersRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpHeadersRequest)(nil)).Elem()
}

func (o VirtualServiceSpecHttpHeadersRequestPtrOutput) ToVirtualServiceSpecHttpHeadersRequestPtrOutput() VirtualServiceSpecHttpHeadersRequestPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersRequestPtrOutput) ToVirtualServiceSpecHttpHeadersRequestPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersRequestPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersRequestPtrOutput) Elem() VirtualServiceSpecHttpHeadersRequestOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeadersRequest) VirtualServiceSpecHttpHeadersRequest {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpHeadersRequest
		return ret
	}).(VirtualServiceSpecHttpHeadersRequestOutput)
}

func (o VirtualServiceSpecHttpHeadersRequestPtrOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeadersRequest) map[string]string {
		if v == nil {
			return nil
		}
		return v.Add
	}).(pulumi.StringMapOutput)
}

func (o VirtualServiceSpecHttpHeadersRequestPtrOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeadersRequest) []string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpHeadersRequestPtrOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeadersRequest) map[string]string {
		if v == nil {
			return nil
		}
		return v.Set
	}).(pulumi.StringMapOutput)
}

type VirtualServiceSpecHttpHeadersRequestAdd struct {
}

type VirtualServiceSpecHttpHeadersRequestSet struct {
}

type VirtualServiceSpecHttpHeadersResponse struct {
	Add    map[string]string `pulumi:"add"`
	Remove []string          `pulumi:"remove"`
	Set    map[string]string `pulumi:"set"`
}

// VirtualServiceSpecHttpHeadersResponseInput is an input type that accepts VirtualServiceSpecHttpHeadersResponseArgs and VirtualServiceSpecHttpHeadersResponseOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpHeadersResponseInput` via:
//
//	VirtualServiceSpecHttpHeadersResponseArgs{...}
type VirtualServiceSpecHttpHeadersResponseInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpHeadersResponseOutput() VirtualServiceSpecHttpHeadersResponseOutput
	ToVirtualServiceSpecHttpHeadersResponseOutputWithContext(context.Context) VirtualServiceSpecHttpHeadersResponseOutput
}

type VirtualServiceSpecHttpHeadersResponseArgs struct {
	Add    pulumi.StringMapInput   `pulumi:"add"`
	Remove pulumi.StringArrayInput `pulumi:"remove"`
	Set    pulumi.StringMapInput   `pulumi:"set"`
}

func (VirtualServiceSpecHttpHeadersResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpHeadersResponse)(nil)).Elem()
}

func (i VirtualServiceSpecHttpHeadersResponseArgs) ToVirtualServiceSpecHttpHeadersResponseOutput() VirtualServiceSpecHttpHeadersResponseOutput {
	return i.ToVirtualServiceSpecHttpHeadersResponseOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpHeadersResponseArgs) ToVirtualServiceSpecHttpHeadersResponseOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpHeadersResponseOutput)
}

func (i VirtualServiceSpecHttpHeadersResponseArgs) ToVirtualServiceSpecHttpHeadersResponsePtrOutput() VirtualServiceSpecHttpHeadersResponsePtrOutput {
	return i.ToVirtualServiceSpecHttpHeadersResponsePtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpHeadersResponseArgs) ToVirtualServiceSpecHttpHeadersResponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpHeadersResponseOutput).ToVirtualServiceSpecHttpHeadersResponsePtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpHeadersResponsePtrInput is an input type that accepts VirtualServiceSpecHttpHeadersResponseArgs, VirtualServiceSpecHttpHeadersResponsePtr and VirtualServiceSpecHttpHeadersResponsePtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpHeadersResponsePtrInput` via:
//
//	        VirtualServiceSpecHttpHeadersResponseArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpHeadersResponsePtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpHeadersResponsePtrOutput() VirtualServiceSpecHttpHeadersResponsePtrOutput
	ToVirtualServiceSpecHttpHeadersResponsePtrOutputWithContext(context.Context) VirtualServiceSpecHttpHeadersResponsePtrOutput
}

type virtualServiceSpecHttpHeadersResponsePtrType VirtualServiceSpecHttpHeadersResponseArgs

func VirtualServiceSpecHttpHeadersResponsePtr(v *VirtualServiceSpecHttpHeadersResponseArgs) VirtualServiceSpecHttpHeadersResponsePtrInput {
	return (*virtualServiceSpecHttpHeadersResponsePtrType)(v)
}

func (*virtualServiceSpecHttpHeadersResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpHeadersResponse)(nil)).Elem()
}

func (i *virtualServiceSpecHttpHeadersResponsePtrType) ToVirtualServiceSpecHttpHeadersResponsePtrOutput() VirtualServiceSpecHttpHeadersResponsePtrOutput {
	return i.ToVirtualServiceSpecHttpHeadersResponsePtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpHeadersResponsePtrType) ToVirtualServiceSpecHttpHeadersResponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpHeadersResponsePtrOutput)
}

type VirtualServiceSpecHttpHeadersResponseOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpHeadersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpHeadersResponse)(nil)).Elem()
}

func (o VirtualServiceSpecHttpHeadersResponseOutput) ToVirtualServiceSpecHttpHeadersResponseOutput() VirtualServiceSpecHttpHeadersResponseOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersResponseOutput) ToVirtualServiceSpecHttpHeadersResponseOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersResponseOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersResponseOutput) ToVirtualServiceSpecHttpHeadersResponsePtrOutput() VirtualServiceSpecHttpHeadersResponsePtrOutput {
	return o.ToVirtualServiceSpecHttpHeadersResponsePtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpHeadersResponseOutput) ToVirtualServiceSpecHttpHeadersResponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpHeadersResponse) *VirtualServiceSpecHttpHeadersResponse {
		return &v
	}).(VirtualServiceSpecHttpHeadersResponsePtrOutput)
}

func (o VirtualServiceSpecHttpHeadersResponseOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpHeadersResponse) map[string]string { return v.Add }).(pulumi.StringMapOutput)
}

func (o VirtualServiceSpecHttpHeadersResponseOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpHeadersResponse) []string { return v.Remove }).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpHeadersResponseOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpHeadersResponse) map[string]string { return v.Set }).(pulumi.StringMapOutput)
}

type VirtualServiceSpecHttpHeadersResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpHeadersResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpHeadersResponse)(nil)).Elem()
}

func (o VirtualServiceSpecHttpHeadersResponsePtrOutput) ToVirtualServiceSpecHttpHeadersResponsePtrOutput() VirtualServiceSpecHttpHeadersResponsePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersResponsePtrOutput) ToVirtualServiceSpecHttpHeadersResponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpHeadersResponsePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpHeadersResponsePtrOutput) Elem() VirtualServiceSpecHttpHeadersResponseOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeadersResponse) VirtualServiceSpecHttpHeadersResponse {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpHeadersResponse
		return ret
	}).(VirtualServiceSpecHttpHeadersResponseOutput)
}

func (o VirtualServiceSpecHttpHeadersResponsePtrOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeadersResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Add
	}).(pulumi.StringMapOutput)
}

func (o VirtualServiceSpecHttpHeadersResponsePtrOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeadersResponse) []string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpHeadersResponsePtrOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpHeadersResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Set
	}).(pulumi.StringMapOutput)
}

type VirtualServiceSpecHttpHeadersResponseAdd struct {
}

type VirtualServiceSpecHttpHeadersResponseSet struct {
}

type VirtualServiceSpecHttpMatch struct {
	// HTTP Authority values are case-sensitive and formatted as follows: - `exact: "value"` for exact string match - `prefix: "value"` for prefix-based match - `regex: "value"` for RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
	Authority interface{} `pulumi:"authority"`
	// Names of gateways where the rule should be applied.
	Gateways []string `pulumi:"gateways"`
	// The header keys must be lowercase and use hyphen as the separator, e.g.
	Headers map[string]interface{} `pulumi:"headers"`
	// Flag to specify whether the URI matching should be case-insensitive.
	IgnoreUriCase *bool `pulumi:"ignoreUriCase"`
	// HTTP Method values are case-sensitive and formatted as follows: - `exact: "value"` for exact string match - `prefix: "value"` for prefix-based match - `regex: "value"` for RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
	Method interface{} `pulumi:"method"`
	// The name assigned to a match.
	Name *string `pulumi:"name"`
	// Specifies the ports on the host that is being addressed.
	Port *int `pulumi:"port"`
	// Query parameters for matching.
	QueryParams map[string]interface{} `pulumi:"queryParams"`
	// URI Scheme values are case-sensitive and formatted as follows: - `exact: "value"` for exact string match - `prefix: "value"` for prefix-based match - `regex: "value"` for RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
	Scheme interface{} `pulumi:"scheme"`
	// One or more labels that constrain the applicability of a rule to source (client) workloads with the given labels.
	SourceLabels map[string]string `pulumi:"sourceLabels"`
	// Source namespace constraining the applicability of a rule to workloads in that namespace.
	SourceNamespace *string `pulumi:"sourceNamespace"`
	// The human readable prefix to use when emitting statistics for this route.
	StatPrefix *string `pulumi:"statPrefix"`
	// URI to match values are case-sensitive and formatted as follows: - `exact: "value"` for exact string match - `prefix: "value"` for prefix-based match - `regex: "value"` for RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
	Uri interface{} `pulumi:"uri"`
	// withoutHeader has the same syntax with the header, but has opposite meaning.
	WithoutHeaders map[string]interface{} `pulumi:"withoutHeaders"`
}

// VirtualServiceSpecHttpMatchInput is an input type that accepts VirtualServiceSpecHttpMatchArgs and VirtualServiceSpecHttpMatchOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMatchInput` via:
//
//	VirtualServiceSpecHttpMatchArgs{...}
type VirtualServiceSpecHttpMatchInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMatchOutput() VirtualServiceSpecHttpMatchOutput
	ToVirtualServiceSpecHttpMatchOutputWithContext(context.Context) VirtualServiceSpecHttpMatchOutput
}

type VirtualServiceSpecHttpMatchArgs struct {
	// HTTP Authority values are case-sensitive and formatted as follows: - `exact: "value"` for exact string match - `prefix: "value"` for prefix-based match - `regex: "value"` for RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
	Authority pulumi.Input `pulumi:"authority"`
	// Names of gateways where the rule should be applied.
	Gateways pulumi.StringArrayInput `pulumi:"gateways"`
	// The header keys must be lowercase and use hyphen as the separator, e.g.
	Headers pulumi.MapInput `pulumi:"headers"`
	// Flag to specify whether the URI matching should be case-insensitive.
	IgnoreUriCase pulumi.BoolPtrInput `pulumi:"ignoreUriCase"`
	// HTTP Method values are case-sensitive and formatted as follows: - `exact: "value"` for exact string match - `prefix: "value"` for prefix-based match - `regex: "value"` for RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
	Method pulumi.Input `pulumi:"method"`
	// The name assigned to a match.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the ports on the host that is being addressed.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Query parameters for matching.
	QueryParams pulumi.MapInput `pulumi:"queryParams"`
	// URI Scheme values are case-sensitive and formatted as follows: - `exact: "value"` for exact string match - `prefix: "value"` for prefix-based match - `regex: "value"` for RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
	Scheme pulumi.Input `pulumi:"scheme"`
	// One or more labels that constrain the applicability of a rule to source (client) workloads with the given labels.
	SourceLabels pulumi.StringMapInput `pulumi:"sourceLabels"`
	// Source namespace constraining the applicability of a rule to workloads in that namespace.
	SourceNamespace pulumi.StringPtrInput `pulumi:"sourceNamespace"`
	// The human readable prefix to use when emitting statistics for this route.
	StatPrefix pulumi.StringPtrInput `pulumi:"statPrefix"`
	// URI to match values are case-sensitive and formatted as follows: - `exact: "value"` for exact string match - `prefix: "value"` for prefix-based match - `regex: "value"` for RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
	Uri pulumi.Input `pulumi:"uri"`
	// withoutHeader has the same syntax with the header, but has opposite meaning.
	WithoutHeaders pulumi.MapInput `pulumi:"withoutHeaders"`
}

func (VirtualServiceSpecHttpMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMatch)(nil)).Elem()
}

func (i VirtualServiceSpecHttpMatchArgs) ToVirtualServiceSpecHttpMatchOutput() VirtualServiceSpecHttpMatchOutput {
	return i.ToVirtualServiceSpecHttpMatchOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMatchArgs) ToVirtualServiceSpecHttpMatchOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMatchOutput)
}

// VirtualServiceSpecHttpMatchArrayInput is an input type that accepts VirtualServiceSpecHttpMatchArray and VirtualServiceSpecHttpMatchArrayOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMatchArrayInput` via:
//
//	VirtualServiceSpecHttpMatchArray{ VirtualServiceSpecHttpMatchArgs{...} }
type VirtualServiceSpecHttpMatchArrayInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMatchArrayOutput() VirtualServiceSpecHttpMatchArrayOutput
	ToVirtualServiceSpecHttpMatchArrayOutputWithContext(context.Context) VirtualServiceSpecHttpMatchArrayOutput
}

type VirtualServiceSpecHttpMatchArray []VirtualServiceSpecHttpMatchInput

func (VirtualServiceSpecHttpMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecHttpMatch)(nil)).Elem()
}

func (i VirtualServiceSpecHttpMatchArray) ToVirtualServiceSpecHttpMatchArrayOutput() VirtualServiceSpecHttpMatchArrayOutput {
	return i.ToVirtualServiceSpecHttpMatchArrayOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMatchArray) ToVirtualServiceSpecHttpMatchArrayOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMatchArrayOutput)
}

type VirtualServiceSpecHttpMatchOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMatch)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMatchOutput) ToVirtualServiceSpecHttpMatchOutput() VirtualServiceSpecHttpMatchOutput {
	return o
}

func (o VirtualServiceSpecHttpMatchOutput) ToVirtualServiceSpecHttpMatchOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMatchOutput {
	return o
}

// HTTP Authority values are case-sensitive and formatted as follows: - `exact: "value"` for exact string match - `prefix: "value"` for prefix-based match - `regex: "value"` for RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
func (o VirtualServiceSpecHttpMatchOutput) Authority() pulumi.AnyOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) interface{} { return v.Authority }).(pulumi.AnyOutput)
}

// Names of gateways where the rule should be applied.
func (o VirtualServiceSpecHttpMatchOutput) Gateways() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) []string { return v.Gateways }).(pulumi.StringArrayOutput)
}

// The header keys must be lowercase and use hyphen as the separator, e.g.
func (o VirtualServiceSpecHttpMatchOutput) Headers() pulumi.MapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) map[string]interface{} { return v.Headers }).(pulumi.MapOutput)
}

// Flag to specify whether the URI matching should be case-insensitive.
func (o VirtualServiceSpecHttpMatchOutput) IgnoreUriCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) *bool { return v.IgnoreUriCase }).(pulumi.BoolPtrOutput)
}

// HTTP Method values are case-sensitive and formatted as follows: - `exact: "value"` for exact string match - `prefix: "value"` for prefix-based match - `regex: "value"` for RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
func (o VirtualServiceSpecHttpMatchOutput) Method() pulumi.AnyOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) interface{} { return v.Method }).(pulumi.AnyOutput)
}

// The name assigned to a match.
func (o VirtualServiceSpecHttpMatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specifies the ports on the host that is being addressed.
func (o VirtualServiceSpecHttpMatchOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Query parameters for matching.
func (o VirtualServiceSpecHttpMatchOutput) QueryParams() pulumi.MapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) map[string]interface{} { return v.QueryParams }).(pulumi.MapOutput)
}

// URI Scheme values are case-sensitive and formatted as follows: - `exact: "value"` for exact string match - `prefix: "value"` for prefix-based match - `regex: "value"` for RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
func (o VirtualServiceSpecHttpMatchOutput) Scheme() pulumi.AnyOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) interface{} { return v.Scheme }).(pulumi.AnyOutput)
}

// One or more labels that constrain the applicability of a rule to source (client) workloads with the given labels.
func (o VirtualServiceSpecHttpMatchOutput) SourceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) map[string]string { return v.SourceLabels }).(pulumi.StringMapOutput)
}

// Source namespace constraining the applicability of a rule to workloads in that namespace.
func (o VirtualServiceSpecHttpMatchOutput) SourceNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) *string { return v.SourceNamespace }).(pulumi.StringPtrOutput)
}

// The human readable prefix to use when emitting statistics for this route.
func (o VirtualServiceSpecHttpMatchOutput) StatPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) *string { return v.StatPrefix }).(pulumi.StringPtrOutput)
}

// URI to match values are case-sensitive and formatted as follows: - `exact: "value"` for exact string match - `prefix: "value"` for prefix-based match - `regex: "value"` for RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
func (o VirtualServiceSpecHttpMatchOutput) Uri() pulumi.AnyOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) interface{} { return v.Uri }).(pulumi.AnyOutput)
}

// withoutHeader has the same syntax with the header, but has opposite meaning.
func (o VirtualServiceSpecHttpMatchOutput) WithoutHeaders() pulumi.MapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMatch) map[string]interface{} { return v.WithoutHeaders }).(pulumi.MapOutput)
}

type VirtualServiceSpecHttpMatchArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecHttpMatch)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMatchArrayOutput) ToVirtualServiceSpecHttpMatchArrayOutput() VirtualServiceSpecHttpMatchArrayOutput {
	return o
}

func (o VirtualServiceSpecHttpMatchArrayOutput) ToVirtualServiceSpecHttpMatchArrayOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMatchArrayOutput {
	return o
}

func (o VirtualServiceSpecHttpMatchArrayOutput) Index(i pulumi.IntInput) VirtualServiceSpecHttpMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualServiceSpecHttpMatch {
		return vs[0].([]VirtualServiceSpecHttpMatch)[vs[1].(int)]
	}).(VirtualServiceSpecHttpMatchOutput)
}

// The header keys must be lowercase and use hyphen as the separator, e.g.
type VirtualServiceSpecHttpMatchHeaders struct {
}

// Query parameters for matching.
type VirtualServiceSpecHttpMatchQueryParams struct {
}

// One or more labels that constrain the applicability of a rule to source (client) workloads with the given labels.
type VirtualServiceSpecHttpMatchSourceLabels struct {
}

// withoutHeader has the same syntax with the header, but has opposite meaning.
type VirtualServiceSpecHttpMatchWithoutHeaders struct {
}

// Mirror HTTP traffic to a another destination in addition to forwarding the requests to the intended destination.
type VirtualServiceSpecHttpMirror struct {
	// The name of a service from the service registry.
	Host string `pulumi:"host"`
	// Specifies the port on the host that is being addressed.
	Port *VirtualServiceSpecHttpMirrorPort `pulumi:"port"`
	// The name of a subset within the service.
	Subset *string `pulumi:"subset"`
}

// VirtualServiceSpecHttpMirrorInput is an input type that accepts VirtualServiceSpecHttpMirrorArgs and VirtualServiceSpecHttpMirrorOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMirrorInput` via:
//
//	VirtualServiceSpecHttpMirrorArgs{...}
type VirtualServiceSpecHttpMirrorInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMirrorOutput() VirtualServiceSpecHttpMirrorOutput
	ToVirtualServiceSpecHttpMirrorOutputWithContext(context.Context) VirtualServiceSpecHttpMirrorOutput
}

// Mirror HTTP traffic to a another destination in addition to forwarding the requests to the intended destination.
type VirtualServiceSpecHttpMirrorArgs struct {
	// The name of a service from the service registry.
	Host pulumi.StringInput `pulumi:"host"`
	// Specifies the port on the host that is being addressed.
	Port VirtualServiceSpecHttpMirrorPortPtrInput `pulumi:"port"`
	// The name of a subset within the service.
	Subset pulumi.StringPtrInput `pulumi:"subset"`
}

func (VirtualServiceSpecHttpMirrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMirror)(nil)).Elem()
}

func (i VirtualServiceSpecHttpMirrorArgs) ToVirtualServiceSpecHttpMirrorOutput() VirtualServiceSpecHttpMirrorOutput {
	return i.ToVirtualServiceSpecHttpMirrorOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMirrorArgs) ToVirtualServiceSpecHttpMirrorOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorOutput)
}

func (i VirtualServiceSpecHttpMirrorArgs) ToVirtualServiceSpecHttpMirrorPtrOutput() VirtualServiceSpecHttpMirrorPtrOutput {
	return i.ToVirtualServiceSpecHttpMirrorPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMirrorArgs) ToVirtualServiceSpecHttpMirrorPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorOutput).ToVirtualServiceSpecHttpMirrorPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpMirrorPtrInput is an input type that accepts VirtualServiceSpecHttpMirrorArgs, VirtualServiceSpecHttpMirrorPtr and VirtualServiceSpecHttpMirrorPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMirrorPtrInput` via:
//
//	        VirtualServiceSpecHttpMirrorArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpMirrorPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMirrorPtrOutput() VirtualServiceSpecHttpMirrorPtrOutput
	ToVirtualServiceSpecHttpMirrorPtrOutputWithContext(context.Context) VirtualServiceSpecHttpMirrorPtrOutput
}

type virtualServiceSpecHttpMirrorPtrType VirtualServiceSpecHttpMirrorArgs

func VirtualServiceSpecHttpMirrorPtr(v *VirtualServiceSpecHttpMirrorArgs) VirtualServiceSpecHttpMirrorPtrInput {
	return (*virtualServiceSpecHttpMirrorPtrType)(v)
}

func (*virtualServiceSpecHttpMirrorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpMirror)(nil)).Elem()
}

func (i *virtualServiceSpecHttpMirrorPtrType) ToVirtualServiceSpecHttpMirrorPtrOutput() VirtualServiceSpecHttpMirrorPtrOutput {
	return i.ToVirtualServiceSpecHttpMirrorPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpMirrorPtrType) ToVirtualServiceSpecHttpMirrorPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorPtrOutput)
}

// Mirror HTTP traffic to a another destination in addition to forwarding the requests to the intended destination.
type VirtualServiceSpecHttpMirrorOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMirrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMirror)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMirrorOutput) ToVirtualServiceSpecHttpMirrorOutput() VirtualServiceSpecHttpMirrorOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorOutput) ToVirtualServiceSpecHttpMirrorOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorOutput) ToVirtualServiceSpecHttpMirrorPtrOutput() VirtualServiceSpecHttpMirrorPtrOutput {
	return o.ToVirtualServiceSpecHttpMirrorPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpMirrorOutput) ToVirtualServiceSpecHttpMirrorPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpMirror) *VirtualServiceSpecHttpMirror {
		return &v
	}).(VirtualServiceSpecHttpMirrorPtrOutput)
}

// The name of a service from the service registry.
func (o VirtualServiceSpecHttpMirrorOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMirror) string { return v.Host }).(pulumi.StringOutput)
}

// Specifies the port on the host that is being addressed.
func (o VirtualServiceSpecHttpMirrorOutput) Port() VirtualServiceSpecHttpMirrorPortPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMirror) *VirtualServiceSpecHttpMirrorPort { return v.Port }).(VirtualServiceSpecHttpMirrorPortPtrOutput)
}

// The name of a subset within the service.
func (o VirtualServiceSpecHttpMirrorOutput) Subset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMirror) *string { return v.Subset }).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecHttpMirrorPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMirrorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpMirror)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMirrorPtrOutput) ToVirtualServiceSpecHttpMirrorPtrOutput() VirtualServiceSpecHttpMirrorPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorPtrOutput) ToVirtualServiceSpecHttpMirrorPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorPtrOutput) Elem() VirtualServiceSpecHttpMirrorOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpMirror) VirtualServiceSpecHttpMirror {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpMirror
		return ret
	}).(VirtualServiceSpecHttpMirrorOutput)
}

// The name of a service from the service registry.
func (o VirtualServiceSpecHttpMirrorPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpMirror) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
func (o VirtualServiceSpecHttpMirrorPtrOutput) Port() VirtualServiceSpecHttpMirrorPortPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpMirror) *VirtualServiceSpecHttpMirrorPort {
		if v == nil {
			return nil
		}
		return v.Port
	}).(VirtualServiceSpecHttpMirrorPortPtrOutput)
}

// The name of a subset within the service.
func (o VirtualServiceSpecHttpMirrorPtrOutput) Subset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpMirror) *string {
		if v == nil {
			return nil
		}
		return v.Subset
	}).(pulumi.StringPtrOutput)
}

// Percentage of the traffic to be mirrored by the `mirror` field.
type VirtualServiceSpecHttpMirrorPercentage struct {
	Value *float64 `pulumi:"value"`
}

// VirtualServiceSpecHttpMirrorPercentageInput is an input type that accepts VirtualServiceSpecHttpMirrorPercentageArgs and VirtualServiceSpecHttpMirrorPercentageOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMirrorPercentageInput` via:
//
//	VirtualServiceSpecHttpMirrorPercentageArgs{...}
type VirtualServiceSpecHttpMirrorPercentageInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMirrorPercentageOutput() VirtualServiceSpecHttpMirrorPercentageOutput
	ToVirtualServiceSpecHttpMirrorPercentageOutputWithContext(context.Context) VirtualServiceSpecHttpMirrorPercentageOutput
}

// Percentage of the traffic to be mirrored by the `mirror` field.
type VirtualServiceSpecHttpMirrorPercentageArgs struct {
	Value pulumi.Float64PtrInput `pulumi:"value"`
}

func (VirtualServiceSpecHttpMirrorPercentageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMirrorPercentage)(nil)).Elem()
}

func (i VirtualServiceSpecHttpMirrorPercentageArgs) ToVirtualServiceSpecHttpMirrorPercentageOutput() VirtualServiceSpecHttpMirrorPercentageOutput {
	return i.ToVirtualServiceSpecHttpMirrorPercentageOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMirrorPercentageArgs) ToVirtualServiceSpecHttpMirrorPercentageOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPercentageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorPercentageOutput)
}

func (i VirtualServiceSpecHttpMirrorPercentageArgs) ToVirtualServiceSpecHttpMirrorPercentagePtrOutput() VirtualServiceSpecHttpMirrorPercentagePtrOutput {
	return i.ToVirtualServiceSpecHttpMirrorPercentagePtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMirrorPercentageArgs) ToVirtualServiceSpecHttpMirrorPercentagePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPercentagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorPercentageOutput).ToVirtualServiceSpecHttpMirrorPercentagePtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpMirrorPercentagePtrInput is an input type that accepts VirtualServiceSpecHttpMirrorPercentageArgs, VirtualServiceSpecHttpMirrorPercentagePtr and VirtualServiceSpecHttpMirrorPercentagePtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMirrorPercentagePtrInput` via:
//
//	        VirtualServiceSpecHttpMirrorPercentageArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpMirrorPercentagePtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMirrorPercentagePtrOutput() VirtualServiceSpecHttpMirrorPercentagePtrOutput
	ToVirtualServiceSpecHttpMirrorPercentagePtrOutputWithContext(context.Context) VirtualServiceSpecHttpMirrorPercentagePtrOutput
}

type virtualServiceSpecHttpMirrorPercentagePtrType VirtualServiceSpecHttpMirrorPercentageArgs

func VirtualServiceSpecHttpMirrorPercentagePtr(v *VirtualServiceSpecHttpMirrorPercentageArgs) VirtualServiceSpecHttpMirrorPercentagePtrInput {
	return (*virtualServiceSpecHttpMirrorPercentagePtrType)(v)
}

func (*virtualServiceSpecHttpMirrorPercentagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpMirrorPercentage)(nil)).Elem()
}

func (i *virtualServiceSpecHttpMirrorPercentagePtrType) ToVirtualServiceSpecHttpMirrorPercentagePtrOutput() VirtualServiceSpecHttpMirrorPercentagePtrOutput {
	return i.ToVirtualServiceSpecHttpMirrorPercentagePtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpMirrorPercentagePtrType) ToVirtualServiceSpecHttpMirrorPercentagePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPercentagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorPercentagePtrOutput)
}

// Percentage of the traffic to be mirrored by the `mirror` field.
type VirtualServiceSpecHttpMirrorPercentageOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMirrorPercentageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMirrorPercentage)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMirrorPercentageOutput) ToVirtualServiceSpecHttpMirrorPercentageOutput() VirtualServiceSpecHttpMirrorPercentageOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorPercentageOutput) ToVirtualServiceSpecHttpMirrorPercentageOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPercentageOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorPercentageOutput) ToVirtualServiceSpecHttpMirrorPercentagePtrOutput() VirtualServiceSpecHttpMirrorPercentagePtrOutput {
	return o.ToVirtualServiceSpecHttpMirrorPercentagePtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpMirrorPercentageOutput) ToVirtualServiceSpecHttpMirrorPercentagePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPercentagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpMirrorPercentage) *VirtualServiceSpecHttpMirrorPercentage {
		return &v
	}).(VirtualServiceSpecHttpMirrorPercentagePtrOutput)
}

func (o VirtualServiceSpecHttpMirrorPercentageOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMirrorPercentage) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

type VirtualServiceSpecHttpMirrorPercentagePtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMirrorPercentagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpMirrorPercentage)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMirrorPercentagePtrOutput) ToVirtualServiceSpecHttpMirrorPercentagePtrOutput() VirtualServiceSpecHttpMirrorPercentagePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorPercentagePtrOutput) ToVirtualServiceSpecHttpMirrorPercentagePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPercentagePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorPercentagePtrOutput) Elem() VirtualServiceSpecHttpMirrorPercentageOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpMirrorPercentage) VirtualServiceSpecHttpMirrorPercentage {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpMirrorPercentage
		return ret
	}).(VirtualServiceSpecHttpMirrorPercentageOutput)
}

func (o VirtualServiceSpecHttpMirrorPercentagePtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpMirrorPercentage) *float64 {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.Float64PtrOutput)
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecHttpMirrorPort struct {
	Number *int `pulumi:"number"`
}

// VirtualServiceSpecHttpMirrorPortInput is an input type that accepts VirtualServiceSpecHttpMirrorPortArgs and VirtualServiceSpecHttpMirrorPortOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMirrorPortInput` via:
//
//	VirtualServiceSpecHttpMirrorPortArgs{...}
type VirtualServiceSpecHttpMirrorPortInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMirrorPortOutput() VirtualServiceSpecHttpMirrorPortOutput
	ToVirtualServiceSpecHttpMirrorPortOutputWithContext(context.Context) VirtualServiceSpecHttpMirrorPortOutput
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecHttpMirrorPortArgs struct {
	Number pulumi.IntPtrInput `pulumi:"number"`
}

func (VirtualServiceSpecHttpMirrorPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMirrorPort)(nil)).Elem()
}

func (i VirtualServiceSpecHttpMirrorPortArgs) ToVirtualServiceSpecHttpMirrorPortOutput() VirtualServiceSpecHttpMirrorPortOutput {
	return i.ToVirtualServiceSpecHttpMirrorPortOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMirrorPortArgs) ToVirtualServiceSpecHttpMirrorPortOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorPortOutput)
}

func (i VirtualServiceSpecHttpMirrorPortArgs) ToVirtualServiceSpecHttpMirrorPortPtrOutput() VirtualServiceSpecHttpMirrorPortPtrOutput {
	return i.ToVirtualServiceSpecHttpMirrorPortPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMirrorPortArgs) ToVirtualServiceSpecHttpMirrorPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorPortOutput).ToVirtualServiceSpecHttpMirrorPortPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpMirrorPortPtrInput is an input type that accepts VirtualServiceSpecHttpMirrorPortArgs, VirtualServiceSpecHttpMirrorPortPtr and VirtualServiceSpecHttpMirrorPortPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMirrorPortPtrInput` via:
//
//	        VirtualServiceSpecHttpMirrorPortArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpMirrorPortPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMirrorPortPtrOutput() VirtualServiceSpecHttpMirrorPortPtrOutput
	ToVirtualServiceSpecHttpMirrorPortPtrOutputWithContext(context.Context) VirtualServiceSpecHttpMirrorPortPtrOutput
}

type virtualServiceSpecHttpMirrorPortPtrType VirtualServiceSpecHttpMirrorPortArgs

func VirtualServiceSpecHttpMirrorPortPtr(v *VirtualServiceSpecHttpMirrorPortArgs) VirtualServiceSpecHttpMirrorPortPtrInput {
	return (*virtualServiceSpecHttpMirrorPortPtrType)(v)
}

func (*virtualServiceSpecHttpMirrorPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpMirrorPort)(nil)).Elem()
}

func (i *virtualServiceSpecHttpMirrorPortPtrType) ToVirtualServiceSpecHttpMirrorPortPtrOutput() VirtualServiceSpecHttpMirrorPortPtrOutput {
	return i.ToVirtualServiceSpecHttpMirrorPortPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpMirrorPortPtrType) ToVirtualServiceSpecHttpMirrorPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorPortPtrOutput)
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecHttpMirrorPortOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMirrorPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMirrorPort)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMirrorPortOutput) ToVirtualServiceSpecHttpMirrorPortOutput() VirtualServiceSpecHttpMirrorPortOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorPortOutput) ToVirtualServiceSpecHttpMirrorPortOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPortOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorPortOutput) ToVirtualServiceSpecHttpMirrorPortPtrOutput() VirtualServiceSpecHttpMirrorPortPtrOutput {
	return o.ToVirtualServiceSpecHttpMirrorPortPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpMirrorPortOutput) ToVirtualServiceSpecHttpMirrorPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpMirrorPort) *VirtualServiceSpecHttpMirrorPort {
		return &v
	}).(VirtualServiceSpecHttpMirrorPortPtrOutput)
}

func (o VirtualServiceSpecHttpMirrorPortOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMirrorPort) *int { return v.Number }).(pulumi.IntPtrOutput)
}

type VirtualServiceSpecHttpMirrorPortPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMirrorPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpMirrorPort)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMirrorPortPtrOutput) ToVirtualServiceSpecHttpMirrorPortPtrOutput() VirtualServiceSpecHttpMirrorPortPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorPortPtrOutput) ToVirtualServiceSpecHttpMirrorPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorPortPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorPortPtrOutput) Elem() VirtualServiceSpecHttpMirrorPortOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpMirrorPort) VirtualServiceSpecHttpMirrorPort {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpMirrorPort
		return ret
	}).(VirtualServiceSpecHttpMirrorPortOutput)
}

func (o VirtualServiceSpecHttpMirrorPortPtrOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpMirrorPort) *int {
		if v == nil {
			return nil
		}
		return v.Number
	}).(pulumi.IntPtrOutput)
}

type VirtualServiceSpecHttpMirrors struct {
	// Destination specifies the target of the mirror operation.
	Destination VirtualServiceSpecHttpMirrorsDestination `pulumi:"destination"`
	// Percentage of the traffic to be mirrored by the `destination` field.
	Percentage *VirtualServiceSpecHttpMirrorsPercentage `pulumi:"percentage"`
}

// VirtualServiceSpecHttpMirrorsInput is an input type that accepts VirtualServiceSpecHttpMirrorsArgs and VirtualServiceSpecHttpMirrorsOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMirrorsInput` via:
//
//	VirtualServiceSpecHttpMirrorsArgs{...}
type VirtualServiceSpecHttpMirrorsInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMirrorsOutput() VirtualServiceSpecHttpMirrorsOutput
	ToVirtualServiceSpecHttpMirrorsOutputWithContext(context.Context) VirtualServiceSpecHttpMirrorsOutput
}

type VirtualServiceSpecHttpMirrorsArgs struct {
	// Destination specifies the target of the mirror operation.
	Destination VirtualServiceSpecHttpMirrorsDestinationInput `pulumi:"destination"`
	// Percentage of the traffic to be mirrored by the `destination` field.
	Percentage VirtualServiceSpecHttpMirrorsPercentagePtrInput `pulumi:"percentage"`
}

func (VirtualServiceSpecHttpMirrorsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMirrors)(nil)).Elem()
}

func (i VirtualServiceSpecHttpMirrorsArgs) ToVirtualServiceSpecHttpMirrorsOutput() VirtualServiceSpecHttpMirrorsOutput {
	return i.ToVirtualServiceSpecHttpMirrorsOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMirrorsArgs) ToVirtualServiceSpecHttpMirrorsOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorsOutput)
}

// VirtualServiceSpecHttpMirrorsArrayInput is an input type that accepts VirtualServiceSpecHttpMirrorsArray and VirtualServiceSpecHttpMirrorsArrayOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMirrorsArrayInput` via:
//
//	VirtualServiceSpecHttpMirrorsArray{ VirtualServiceSpecHttpMirrorsArgs{...} }
type VirtualServiceSpecHttpMirrorsArrayInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMirrorsArrayOutput() VirtualServiceSpecHttpMirrorsArrayOutput
	ToVirtualServiceSpecHttpMirrorsArrayOutputWithContext(context.Context) VirtualServiceSpecHttpMirrorsArrayOutput
}

type VirtualServiceSpecHttpMirrorsArray []VirtualServiceSpecHttpMirrorsInput

func (VirtualServiceSpecHttpMirrorsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecHttpMirrors)(nil)).Elem()
}

func (i VirtualServiceSpecHttpMirrorsArray) ToVirtualServiceSpecHttpMirrorsArrayOutput() VirtualServiceSpecHttpMirrorsArrayOutput {
	return i.ToVirtualServiceSpecHttpMirrorsArrayOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMirrorsArray) ToVirtualServiceSpecHttpMirrorsArrayOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorsArrayOutput)
}

type VirtualServiceSpecHttpMirrorsOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMirrorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMirrors)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMirrorsOutput) ToVirtualServiceSpecHttpMirrorsOutput() VirtualServiceSpecHttpMirrorsOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorsOutput) ToVirtualServiceSpecHttpMirrorsOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorsOutput {
	return o
}

// Destination specifies the target of the mirror operation.
func (o VirtualServiceSpecHttpMirrorsOutput) Destination() VirtualServiceSpecHttpMirrorsDestinationOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMirrors) VirtualServiceSpecHttpMirrorsDestination { return v.Destination }).(VirtualServiceSpecHttpMirrorsDestinationOutput)
}

// Percentage of the traffic to be mirrored by the `destination` field.
func (o VirtualServiceSpecHttpMirrorsOutput) Percentage() VirtualServiceSpecHttpMirrorsPercentagePtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMirrors) *VirtualServiceSpecHttpMirrorsPercentage { return v.Percentage }).(VirtualServiceSpecHttpMirrorsPercentagePtrOutput)
}

type VirtualServiceSpecHttpMirrorsArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMirrorsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecHttpMirrors)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMirrorsArrayOutput) ToVirtualServiceSpecHttpMirrorsArrayOutput() VirtualServiceSpecHttpMirrorsArrayOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorsArrayOutput) ToVirtualServiceSpecHttpMirrorsArrayOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorsArrayOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorsArrayOutput) Index(i pulumi.IntInput) VirtualServiceSpecHttpMirrorsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualServiceSpecHttpMirrors {
		return vs[0].([]VirtualServiceSpecHttpMirrors)[vs[1].(int)]
	}).(VirtualServiceSpecHttpMirrorsOutput)
}

// Destination specifies the target of the mirror operation.
type VirtualServiceSpecHttpMirrorsDestination struct {
	// The name of a service from the service registry.
	Host string `pulumi:"host"`
	// Specifies the port on the host that is being addressed.
	Port *VirtualServiceSpecHttpMirrorsDestinationPort `pulumi:"port"`
	// The name of a subset within the service.
	Subset *string `pulumi:"subset"`
}

// VirtualServiceSpecHttpMirrorsDestinationInput is an input type that accepts VirtualServiceSpecHttpMirrorsDestinationArgs and VirtualServiceSpecHttpMirrorsDestinationOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMirrorsDestinationInput` via:
//
//	VirtualServiceSpecHttpMirrorsDestinationArgs{...}
type VirtualServiceSpecHttpMirrorsDestinationInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMirrorsDestinationOutput() VirtualServiceSpecHttpMirrorsDestinationOutput
	ToVirtualServiceSpecHttpMirrorsDestinationOutputWithContext(context.Context) VirtualServiceSpecHttpMirrorsDestinationOutput
}

// Destination specifies the target of the mirror operation.
type VirtualServiceSpecHttpMirrorsDestinationArgs struct {
	// The name of a service from the service registry.
	Host pulumi.StringInput `pulumi:"host"`
	// Specifies the port on the host that is being addressed.
	Port VirtualServiceSpecHttpMirrorsDestinationPortPtrInput `pulumi:"port"`
	// The name of a subset within the service.
	Subset pulumi.StringPtrInput `pulumi:"subset"`
}

func (VirtualServiceSpecHttpMirrorsDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMirrorsDestination)(nil)).Elem()
}

func (i VirtualServiceSpecHttpMirrorsDestinationArgs) ToVirtualServiceSpecHttpMirrorsDestinationOutput() VirtualServiceSpecHttpMirrorsDestinationOutput {
	return i.ToVirtualServiceSpecHttpMirrorsDestinationOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMirrorsDestinationArgs) ToVirtualServiceSpecHttpMirrorsDestinationOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorsDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorsDestinationOutput)
}

// Destination specifies the target of the mirror operation.
type VirtualServiceSpecHttpMirrorsDestinationOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMirrorsDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMirrorsDestination)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMirrorsDestinationOutput) ToVirtualServiceSpecHttpMirrorsDestinationOutput() VirtualServiceSpecHttpMirrorsDestinationOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorsDestinationOutput) ToVirtualServiceSpecHttpMirrorsDestinationOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorsDestinationOutput {
	return o
}

// The name of a service from the service registry.
func (o VirtualServiceSpecHttpMirrorsDestinationOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMirrorsDestination) string { return v.Host }).(pulumi.StringOutput)
}

// Specifies the port on the host that is being addressed.
func (o VirtualServiceSpecHttpMirrorsDestinationOutput) Port() VirtualServiceSpecHttpMirrorsDestinationPortPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMirrorsDestination) *VirtualServiceSpecHttpMirrorsDestinationPort {
		return v.Port
	}).(VirtualServiceSpecHttpMirrorsDestinationPortPtrOutput)
}

// The name of a subset within the service.
func (o VirtualServiceSpecHttpMirrorsDestinationOutput) Subset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMirrorsDestination) *string { return v.Subset }).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecHttpMirrorsDestinationPort struct {
	Number *int `pulumi:"number"`
}

// VirtualServiceSpecHttpMirrorsDestinationPortInput is an input type that accepts VirtualServiceSpecHttpMirrorsDestinationPortArgs and VirtualServiceSpecHttpMirrorsDestinationPortOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMirrorsDestinationPortInput` via:
//
//	VirtualServiceSpecHttpMirrorsDestinationPortArgs{...}
type VirtualServiceSpecHttpMirrorsDestinationPortInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMirrorsDestinationPortOutput() VirtualServiceSpecHttpMirrorsDestinationPortOutput
	ToVirtualServiceSpecHttpMirrorsDestinationPortOutputWithContext(context.Context) VirtualServiceSpecHttpMirrorsDestinationPortOutput
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecHttpMirrorsDestinationPortArgs struct {
	Number pulumi.IntPtrInput `pulumi:"number"`
}

func (VirtualServiceSpecHttpMirrorsDestinationPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMirrorsDestinationPort)(nil)).Elem()
}

func (i VirtualServiceSpecHttpMirrorsDestinationPortArgs) ToVirtualServiceSpecHttpMirrorsDestinationPortOutput() VirtualServiceSpecHttpMirrorsDestinationPortOutput {
	return i.ToVirtualServiceSpecHttpMirrorsDestinationPortOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMirrorsDestinationPortArgs) ToVirtualServiceSpecHttpMirrorsDestinationPortOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorsDestinationPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorsDestinationPortOutput)
}

func (i VirtualServiceSpecHttpMirrorsDestinationPortArgs) ToVirtualServiceSpecHttpMirrorsDestinationPortPtrOutput() VirtualServiceSpecHttpMirrorsDestinationPortPtrOutput {
	return i.ToVirtualServiceSpecHttpMirrorsDestinationPortPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMirrorsDestinationPortArgs) ToVirtualServiceSpecHttpMirrorsDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorsDestinationPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorsDestinationPortOutput).ToVirtualServiceSpecHttpMirrorsDestinationPortPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpMirrorsDestinationPortPtrInput is an input type that accepts VirtualServiceSpecHttpMirrorsDestinationPortArgs, VirtualServiceSpecHttpMirrorsDestinationPortPtr and VirtualServiceSpecHttpMirrorsDestinationPortPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMirrorsDestinationPortPtrInput` via:
//
//	        VirtualServiceSpecHttpMirrorsDestinationPortArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpMirrorsDestinationPortPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMirrorsDestinationPortPtrOutput() VirtualServiceSpecHttpMirrorsDestinationPortPtrOutput
	ToVirtualServiceSpecHttpMirrorsDestinationPortPtrOutputWithContext(context.Context) VirtualServiceSpecHttpMirrorsDestinationPortPtrOutput
}

type virtualServiceSpecHttpMirrorsDestinationPortPtrType VirtualServiceSpecHttpMirrorsDestinationPortArgs

func VirtualServiceSpecHttpMirrorsDestinationPortPtr(v *VirtualServiceSpecHttpMirrorsDestinationPortArgs) VirtualServiceSpecHttpMirrorsDestinationPortPtrInput {
	return (*virtualServiceSpecHttpMirrorsDestinationPortPtrType)(v)
}

func (*virtualServiceSpecHttpMirrorsDestinationPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpMirrorsDestinationPort)(nil)).Elem()
}

func (i *virtualServiceSpecHttpMirrorsDestinationPortPtrType) ToVirtualServiceSpecHttpMirrorsDestinationPortPtrOutput() VirtualServiceSpecHttpMirrorsDestinationPortPtrOutput {
	return i.ToVirtualServiceSpecHttpMirrorsDestinationPortPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpMirrorsDestinationPortPtrType) ToVirtualServiceSpecHttpMirrorsDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorsDestinationPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorsDestinationPortPtrOutput)
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecHttpMirrorsDestinationPortOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMirrorsDestinationPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMirrorsDestinationPort)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMirrorsDestinationPortOutput) ToVirtualServiceSpecHttpMirrorsDestinationPortOutput() VirtualServiceSpecHttpMirrorsDestinationPortOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorsDestinationPortOutput) ToVirtualServiceSpecHttpMirrorsDestinationPortOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorsDestinationPortOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorsDestinationPortOutput) ToVirtualServiceSpecHttpMirrorsDestinationPortPtrOutput() VirtualServiceSpecHttpMirrorsDestinationPortPtrOutput {
	return o.ToVirtualServiceSpecHttpMirrorsDestinationPortPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpMirrorsDestinationPortOutput) ToVirtualServiceSpecHttpMirrorsDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorsDestinationPortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpMirrorsDestinationPort) *VirtualServiceSpecHttpMirrorsDestinationPort {
		return &v
	}).(VirtualServiceSpecHttpMirrorsDestinationPortPtrOutput)
}

func (o VirtualServiceSpecHttpMirrorsDestinationPortOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMirrorsDestinationPort) *int { return v.Number }).(pulumi.IntPtrOutput)
}

type VirtualServiceSpecHttpMirrorsDestinationPortPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMirrorsDestinationPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpMirrorsDestinationPort)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMirrorsDestinationPortPtrOutput) ToVirtualServiceSpecHttpMirrorsDestinationPortPtrOutput() VirtualServiceSpecHttpMirrorsDestinationPortPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorsDestinationPortPtrOutput) ToVirtualServiceSpecHttpMirrorsDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorsDestinationPortPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorsDestinationPortPtrOutput) Elem() VirtualServiceSpecHttpMirrorsDestinationPortOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpMirrorsDestinationPort) VirtualServiceSpecHttpMirrorsDestinationPort {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpMirrorsDestinationPort
		return ret
	}).(VirtualServiceSpecHttpMirrorsDestinationPortOutput)
}

func (o VirtualServiceSpecHttpMirrorsDestinationPortPtrOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpMirrorsDestinationPort) *int {
		if v == nil {
			return nil
		}
		return v.Number
	}).(pulumi.IntPtrOutput)
}

// Percentage of the traffic to be mirrored by the `destination` field.
type VirtualServiceSpecHttpMirrorsPercentage struct {
	Value *float64 `pulumi:"value"`
}

// VirtualServiceSpecHttpMirrorsPercentageInput is an input type that accepts VirtualServiceSpecHttpMirrorsPercentageArgs and VirtualServiceSpecHttpMirrorsPercentageOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMirrorsPercentageInput` via:
//
//	VirtualServiceSpecHttpMirrorsPercentageArgs{...}
type VirtualServiceSpecHttpMirrorsPercentageInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMirrorsPercentageOutput() VirtualServiceSpecHttpMirrorsPercentageOutput
	ToVirtualServiceSpecHttpMirrorsPercentageOutputWithContext(context.Context) VirtualServiceSpecHttpMirrorsPercentageOutput
}

// Percentage of the traffic to be mirrored by the `destination` field.
type VirtualServiceSpecHttpMirrorsPercentageArgs struct {
	Value pulumi.Float64PtrInput `pulumi:"value"`
}

func (VirtualServiceSpecHttpMirrorsPercentageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMirrorsPercentage)(nil)).Elem()
}

func (i VirtualServiceSpecHttpMirrorsPercentageArgs) ToVirtualServiceSpecHttpMirrorsPercentageOutput() VirtualServiceSpecHttpMirrorsPercentageOutput {
	return i.ToVirtualServiceSpecHttpMirrorsPercentageOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMirrorsPercentageArgs) ToVirtualServiceSpecHttpMirrorsPercentageOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorsPercentageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorsPercentageOutput)
}

func (i VirtualServiceSpecHttpMirrorsPercentageArgs) ToVirtualServiceSpecHttpMirrorsPercentagePtrOutput() VirtualServiceSpecHttpMirrorsPercentagePtrOutput {
	return i.ToVirtualServiceSpecHttpMirrorsPercentagePtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpMirrorsPercentageArgs) ToVirtualServiceSpecHttpMirrorsPercentagePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorsPercentagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorsPercentageOutput).ToVirtualServiceSpecHttpMirrorsPercentagePtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpMirrorsPercentagePtrInput is an input type that accepts VirtualServiceSpecHttpMirrorsPercentageArgs, VirtualServiceSpecHttpMirrorsPercentagePtr and VirtualServiceSpecHttpMirrorsPercentagePtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpMirrorsPercentagePtrInput` via:
//
//	        VirtualServiceSpecHttpMirrorsPercentageArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpMirrorsPercentagePtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpMirrorsPercentagePtrOutput() VirtualServiceSpecHttpMirrorsPercentagePtrOutput
	ToVirtualServiceSpecHttpMirrorsPercentagePtrOutputWithContext(context.Context) VirtualServiceSpecHttpMirrorsPercentagePtrOutput
}

type virtualServiceSpecHttpMirrorsPercentagePtrType VirtualServiceSpecHttpMirrorsPercentageArgs

func VirtualServiceSpecHttpMirrorsPercentagePtr(v *VirtualServiceSpecHttpMirrorsPercentageArgs) VirtualServiceSpecHttpMirrorsPercentagePtrInput {
	return (*virtualServiceSpecHttpMirrorsPercentagePtrType)(v)
}

func (*virtualServiceSpecHttpMirrorsPercentagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpMirrorsPercentage)(nil)).Elem()
}

func (i *virtualServiceSpecHttpMirrorsPercentagePtrType) ToVirtualServiceSpecHttpMirrorsPercentagePtrOutput() VirtualServiceSpecHttpMirrorsPercentagePtrOutput {
	return i.ToVirtualServiceSpecHttpMirrorsPercentagePtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpMirrorsPercentagePtrType) ToVirtualServiceSpecHttpMirrorsPercentagePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorsPercentagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpMirrorsPercentagePtrOutput)
}

// Percentage of the traffic to be mirrored by the `destination` field.
type VirtualServiceSpecHttpMirrorsPercentageOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMirrorsPercentageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpMirrorsPercentage)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMirrorsPercentageOutput) ToVirtualServiceSpecHttpMirrorsPercentageOutput() VirtualServiceSpecHttpMirrorsPercentageOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorsPercentageOutput) ToVirtualServiceSpecHttpMirrorsPercentageOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorsPercentageOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorsPercentageOutput) ToVirtualServiceSpecHttpMirrorsPercentagePtrOutput() VirtualServiceSpecHttpMirrorsPercentagePtrOutput {
	return o.ToVirtualServiceSpecHttpMirrorsPercentagePtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpMirrorsPercentageOutput) ToVirtualServiceSpecHttpMirrorsPercentagePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorsPercentagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpMirrorsPercentage) *VirtualServiceSpecHttpMirrorsPercentage {
		return &v
	}).(VirtualServiceSpecHttpMirrorsPercentagePtrOutput)
}

func (o VirtualServiceSpecHttpMirrorsPercentageOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpMirrorsPercentage) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

type VirtualServiceSpecHttpMirrorsPercentagePtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpMirrorsPercentagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpMirrorsPercentage)(nil)).Elem()
}

func (o VirtualServiceSpecHttpMirrorsPercentagePtrOutput) ToVirtualServiceSpecHttpMirrorsPercentagePtrOutput() VirtualServiceSpecHttpMirrorsPercentagePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorsPercentagePtrOutput) ToVirtualServiceSpecHttpMirrorsPercentagePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpMirrorsPercentagePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpMirrorsPercentagePtrOutput) Elem() VirtualServiceSpecHttpMirrorsPercentageOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpMirrorsPercentage) VirtualServiceSpecHttpMirrorsPercentage {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpMirrorsPercentage
		return ret
	}).(VirtualServiceSpecHttpMirrorsPercentageOutput)
}

func (o VirtualServiceSpecHttpMirrorsPercentagePtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpMirrorsPercentage) *float64 {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.Float64PtrOutput)
}

// Retry policy for HTTP requests.
type VirtualServiceSpecHttpRetries struct {
	// Number of retries to be allowed for a given request.
	Attempts *int `pulumi:"attempts"`
	// Timeout per attempt for a given request, including the initial call and any retries.
	PerTryTimeout *string `pulumi:"perTryTimeout"`
	// Specifies the conditions under which retry takes place.
	RetryOn *string `pulumi:"retryOn"`
	// Flag to specify whether the retries should retry to other localities.
	RetryRemoteLocalities *bool `pulumi:"retryRemoteLocalities"`
}

// VirtualServiceSpecHttpRetriesInput is an input type that accepts VirtualServiceSpecHttpRetriesArgs and VirtualServiceSpecHttpRetriesOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRetriesInput` via:
//
//	VirtualServiceSpecHttpRetriesArgs{...}
type VirtualServiceSpecHttpRetriesInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRetriesOutput() VirtualServiceSpecHttpRetriesOutput
	ToVirtualServiceSpecHttpRetriesOutputWithContext(context.Context) VirtualServiceSpecHttpRetriesOutput
}

// Retry policy for HTTP requests.
type VirtualServiceSpecHttpRetriesArgs struct {
	// Number of retries to be allowed for a given request.
	Attempts pulumi.IntPtrInput `pulumi:"attempts"`
	// Timeout per attempt for a given request, including the initial call and any retries.
	PerTryTimeout pulumi.StringPtrInput `pulumi:"perTryTimeout"`
	// Specifies the conditions under which retry takes place.
	RetryOn pulumi.StringPtrInput `pulumi:"retryOn"`
	// Flag to specify whether the retries should retry to other localities.
	RetryRemoteLocalities pulumi.BoolPtrInput `pulumi:"retryRemoteLocalities"`
}

func (VirtualServiceSpecHttpRetriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRetries)(nil)).Elem()
}

func (i VirtualServiceSpecHttpRetriesArgs) ToVirtualServiceSpecHttpRetriesOutput() VirtualServiceSpecHttpRetriesOutput {
	return i.ToVirtualServiceSpecHttpRetriesOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRetriesArgs) ToVirtualServiceSpecHttpRetriesOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRetriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRetriesOutput)
}

func (i VirtualServiceSpecHttpRetriesArgs) ToVirtualServiceSpecHttpRetriesPtrOutput() VirtualServiceSpecHttpRetriesPtrOutput {
	return i.ToVirtualServiceSpecHttpRetriesPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRetriesArgs) ToVirtualServiceSpecHttpRetriesPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRetriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRetriesOutput).ToVirtualServiceSpecHttpRetriesPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpRetriesPtrInput is an input type that accepts VirtualServiceSpecHttpRetriesArgs, VirtualServiceSpecHttpRetriesPtr and VirtualServiceSpecHttpRetriesPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRetriesPtrInput` via:
//
//	        VirtualServiceSpecHttpRetriesArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpRetriesPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRetriesPtrOutput() VirtualServiceSpecHttpRetriesPtrOutput
	ToVirtualServiceSpecHttpRetriesPtrOutputWithContext(context.Context) VirtualServiceSpecHttpRetriesPtrOutput
}

type virtualServiceSpecHttpRetriesPtrType VirtualServiceSpecHttpRetriesArgs

func VirtualServiceSpecHttpRetriesPtr(v *VirtualServiceSpecHttpRetriesArgs) VirtualServiceSpecHttpRetriesPtrInput {
	return (*virtualServiceSpecHttpRetriesPtrType)(v)
}

func (*virtualServiceSpecHttpRetriesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRetries)(nil)).Elem()
}

func (i *virtualServiceSpecHttpRetriesPtrType) ToVirtualServiceSpecHttpRetriesPtrOutput() VirtualServiceSpecHttpRetriesPtrOutput {
	return i.ToVirtualServiceSpecHttpRetriesPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpRetriesPtrType) ToVirtualServiceSpecHttpRetriesPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRetriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRetriesPtrOutput)
}

// Retry policy for HTTP requests.
type VirtualServiceSpecHttpRetriesOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRetriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRetries)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRetriesOutput) ToVirtualServiceSpecHttpRetriesOutput() VirtualServiceSpecHttpRetriesOutput {
	return o
}

func (o VirtualServiceSpecHttpRetriesOutput) ToVirtualServiceSpecHttpRetriesOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRetriesOutput {
	return o
}

func (o VirtualServiceSpecHttpRetriesOutput) ToVirtualServiceSpecHttpRetriesPtrOutput() VirtualServiceSpecHttpRetriesPtrOutput {
	return o.ToVirtualServiceSpecHttpRetriesPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpRetriesOutput) ToVirtualServiceSpecHttpRetriesPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRetriesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpRetries) *VirtualServiceSpecHttpRetries {
		return &v
	}).(VirtualServiceSpecHttpRetriesPtrOutput)
}

// Number of retries to be allowed for a given request.
func (o VirtualServiceSpecHttpRetriesOutput) Attempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRetries) *int { return v.Attempts }).(pulumi.IntPtrOutput)
}

// Timeout per attempt for a given request, including the initial call and any retries.
func (o VirtualServiceSpecHttpRetriesOutput) PerTryTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRetries) *string { return v.PerTryTimeout }).(pulumi.StringPtrOutput)
}

// Specifies the conditions under which retry takes place.
func (o VirtualServiceSpecHttpRetriesOutput) RetryOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRetries) *string { return v.RetryOn }).(pulumi.StringPtrOutput)
}

// Flag to specify whether the retries should retry to other localities.
func (o VirtualServiceSpecHttpRetriesOutput) RetryRemoteLocalities() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRetries) *bool { return v.RetryRemoteLocalities }).(pulumi.BoolPtrOutput)
}

type VirtualServiceSpecHttpRetriesPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRetriesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRetries)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRetriesPtrOutput) ToVirtualServiceSpecHttpRetriesPtrOutput() VirtualServiceSpecHttpRetriesPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRetriesPtrOutput) ToVirtualServiceSpecHttpRetriesPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRetriesPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRetriesPtrOutput) Elem() VirtualServiceSpecHttpRetriesOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRetries) VirtualServiceSpecHttpRetries {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpRetries
		return ret
	}).(VirtualServiceSpecHttpRetriesOutput)
}

// Number of retries to be allowed for a given request.
func (o VirtualServiceSpecHttpRetriesPtrOutput) Attempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRetries) *int {
		if v == nil {
			return nil
		}
		return v.Attempts
	}).(pulumi.IntPtrOutput)
}

// Timeout per attempt for a given request, including the initial call and any retries.
func (o VirtualServiceSpecHttpRetriesPtrOutput) PerTryTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRetries) *string {
		if v == nil {
			return nil
		}
		return v.PerTryTimeout
	}).(pulumi.StringPtrOutput)
}

// Specifies the conditions under which retry takes place.
func (o VirtualServiceSpecHttpRetriesPtrOutput) RetryOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRetries) *string {
		if v == nil {
			return nil
		}
		return v.RetryOn
	}).(pulumi.StringPtrOutput)
}

// Flag to specify whether the retries should retry to other localities.
func (o VirtualServiceSpecHttpRetriesPtrOutput) RetryRemoteLocalities() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRetries) *bool {
		if v == nil {
			return nil
		}
		return v.RetryRemoteLocalities
	}).(pulumi.BoolPtrOutput)
}

// Rewrite HTTP URIs and Authority headers.
type VirtualServiceSpecHttpRewrite struct {
	// rewrite the Authority/Host header with this value.
	Authority *string `pulumi:"authority"`
	// rewrite the path (or the prefix) portion of the URI with this value.
	Uri *string `pulumi:"uri"`
	// rewrite the path portion of the URI with the specified regex.
	UriRegexRewrite *VirtualServiceSpecHttpRewriteUriRegexRewrite `pulumi:"uriRegexRewrite"`
}

// VirtualServiceSpecHttpRewriteInput is an input type that accepts VirtualServiceSpecHttpRewriteArgs and VirtualServiceSpecHttpRewriteOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRewriteInput` via:
//
//	VirtualServiceSpecHttpRewriteArgs{...}
type VirtualServiceSpecHttpRewriteInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRewriteOutput() VirtualServiceSpecHttpRewriteOutput
	ToVirtualServiceSpecHttpRewriteOutputWithContext(context.Context) VirtualServiceSpecHttpRewriteOutput
}

// Rewrite HTTP URIs and Authority headers.
type VirtualServiceSpecHttpRewriteArgs struct {
	// rewrite the Authority/Host header with this value.
	Authority pulumi.StringPtrInput `pulumi:"authority"`
	// rewrite the path (or the prefix) portion of the URI with this value.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
	// rewrite the path portion of the URI with the specified regex.
	UriRegexRewrite VirtualServiceSpecHttpRewriteUriRegexRewritePtrInput `pulumi:"uriRegexRewrite"`
}

func (VirtualServiceSpecHttpRewriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRewrite)(nil)).Elem()
}

func (i VirtualServiceSpecHttpRewriteArgs) ToVirtualServiceSpecHttpRewriteOutput() VirtualServiceSpecHttpRewriteOutput {
	return i.ToVirtualServiceSpecHttpRewriteOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRewriteArgs) ToVirtualServiceSpecHttpRewriteOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRewriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRewriteOutput)
}

func (i VirtualServiceSpecHttpRewriteArgs) ToVirtualServiceSpecHttpRewritePtrOutput() VirtualServiceSpecHttpRewritePtrOutput {
	return i.ToVirtualServiceSpecHttpRewritePtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRewriteArgs) ToVirtualServiceSpecHttpRewritePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRewriteOutput).ToVirtualServiceSpecHttpRewritePtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpRewritePtrInput is an input type that accepts VirtualServiceSpecHttpRewriteArgs, VirtualServiceSpecHttpRewritePtr and VirtualServiceSpecHttpRewritePtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRewritePtrInput` via:
//
//	        VirtualServiceSpecHttpRewriteArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpRewritePtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRewritePtrOutput() VirtualServiceSpecHttpRewritePtrOutput
	ToVirtualServiceSpecHttpRewritePtrOutputWithContext(context.Context) VirtualServiceSpecHttpRewritePtrOutput
}

type virtualServiceSpecHttpRewritePtrType VirtualServiceSpecHttpRewriteArgs

func VirtualServiceSpecHttpRewritePtr(v *VirtualServiceSpecHttpRewriteArgs) VirtualServiceSpecHttpRewritePtrInput {
	return (*virtualServiceSpecHttpRewritePtrType)(v)
}

func (*virtualServiceSpecHttpRewritePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRewrite)(nil)).Elem()
}

func (i *virtualServiceSpecHttpRewritePtrType) ToVirtualServiceSpecHttpRewritePtrOutput() VirtualServiceSpecHttpRewritePtrOutput {
	return i.ToVirtualServiceSpecHttpRewritePtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpRewritePtrType) ToVirtualServiceSpecHttpRewritePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRewritePtrOutput)
}

// Rewrite HTTP URIs and Authority headers.
type VirtualServiceSpecHttpRewriteOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRewriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRewrite)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRewriteOutput) ToVirtualServiceSpecHttpRewriteOutput() VirtualServiceSpecHttpRewriteOutput {
	return o
}

func (o VirtualServiceSpecHttpRewriteOutput) ToVirtualServiceSpecHttpRewriteOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRewriteOutput {
	return o
}

func (o VirtualServiceSpecHttpRewriteOutput) ToVirtualServiceSpecHttpRewritePtrOutput() VirtualServiceSpecHttpRewritePtrOutput {
	return o.ToVirtualServiceSpecHttpRewritePtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpRewriteOutput) ToVirtualServiceSpecHttpRewritePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRewritePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpRewrite) *VirtualServiceSpecHttpRewrite {
		return &v
	}).(VirtualServiceSpecHttpRewritePtrOutput)
}

// rewrite the Authority/Host header with this value.
func (o VirtualServiceSpecHttpRewriteOutput) Authority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRewrite) *string { return v.Authority }).(pulumi.StringPtrOutput)
}

// rewrite the path (or the prefix) portion of the URI with this value.
func (o VirtualServiceSpecHttpRewriteOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRewrite) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// rewrite the path portion of the URI with the specified regex.
func (o VirtualServiceSpecHttpRewriteOutput) UriRegexRewrite() VirtualServiceSpecHttpRewriteUriRegexRewritePtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRewrite) *VirtualServiceSpecHttpRewriteUriRegexRewrite {
		return v.UriRegexRewrite
	}).(VirtualServiceSpecHttpRewriteUriRegexRewritePtrOutput)
}

type VirtualServiceSpecHttpRewritePtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRewritePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRewrite)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRewritePtrOutput) ToVirtualServiceSpecHttpRewritePtrOutput() VirtualServiceSpecHttpRewritePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRewritePtrOutput) ToVirtualServiceSpecHttpRewritePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRewritePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRewritePtrOutput) Elem() VirtualServiceSpecHttpRewriteOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRewrite) VirtualServiceSpecHttpRewrite {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpRewrite
		return ret
	}).(VirtualServiceSpecHttpRewriteOutput)
}

// rewrite the Authority/Host header with this value.
func (o VirtualServiceSpecHttpRewritePtrOutput) Authority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRewrite) *string {
		if v == nil {
			return nil
		}
		return v.Authority
	}).(pulumi.StringPtrOutput)
}

// rewrite the path (or the prefix) portion of the URI with this value.
func (o VirtualServiceSpecHttpRewritePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRewrite) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// rewrite the path portion of the URI with the specified regex.
func (o VirtualServiceSpecHttpRewritePtrOutput) UriRegexRewrite() VirtualServiceSpecHttpRewriteUriRegexRewritePtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRewrite) *VirtualServiceSpecHttpRewriteUriRegexRewrite {
		if v == nil {
			return nil
		}
		return v.UriRegexRewrite
	}).(VirtualServiceSpecHttpRewriteUriRegexRewritePtrOutput)
}

// rewrite the path portion of the URI with the specified regex.
type VirtualServiceSpecHttpRewriteUriRegexRewrite struct {
	// RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
	Match *string `pulumi:"match"`
	// The string that should replace into matching portions of original URI.
	Rewrite *string `pulumi:"rewrite"`
}

// VirtualServiceSpecHttpRewriteUriRegexRewriteInput is an input type that accepts VirtualServiceSpecHttpRewriteUriRegexRewriteArgs and VirtualServiceSpecHttpRewriteUriRegexRewriteOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRewriteUriRegexRewriteInput` via:
//
//	VirtualServiceSpecHttpRewriteUriRegexRewriteArgs{...}
type VirtualServiceSpecHttpRewriteUriRegexRewriteInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRewriteUriRegexRewriteOutput() VirtualServiceSpecHttpRewriteUriRegexRewriteOutput
	ToVirtualServiceSpecHttpRewriteUriRegexRewriteOutputWithContext(context.Context) VirtualServiceSpecHttpRewriteUriRegexRewriteOutput
}

// rewrite the path portion of the URI with the specified regex.
type VirtualServiceSpecHttpRewriteUriRegexRewriteArgs struct {
	// RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
	Match pulumi.StringPtrInput `pulumi:"match"`
	// The string that should replace into matching portions of original URI.
	Rewrite pulumi.StringPtrInput `pulumi:"rewrite"`
}

func (VirtualServiceSpecHttpRewriteUriRegexRewriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRewriteUriRegexRewrite)(nil)).Elem()
}

func (i VirtualServiceSpecHttpRewriteUriRegexRewriteArgs) ToVirtualServiceSpecHttpRewriteUriRegexRewriteOutput() VirtualServiceSpecHttpRewriteUriRegexRewriteOutput {
	return i.ToVirtualServiceSpecHttpRewriteUriRegexRewriteOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRewriteUriRegexRewriteArgs) ToVirtualServiceSpecHttpRewriteUriRegexRewriteOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRewriteUriRegexRewriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRewriteUriRegexRewriteOutput)
}

func (i VirtualServiceSpecHttpRewriteUriRegexRewriteArgs) ToVirtualServiceSpecHttpRewriteUriRegexRewritePtrOutput() VirtualServiceSpecHttpRewriteUriRegexRewritePtrOutput {
	return i.ToVirtualServiceSpecHttpRewriteUriRegexRewritePtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRewriteUriRegexRewriteArgs) ToVirtualServiceSpecHttpRewriteUriRegexRewritePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRewriteUriRegexRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRewriteUriRegexRewriteOutput).ToVirtualServiceSpecHttpRewriteUriRegexRewritePtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpRewriteUriRegexRewritePtrInput is an input type that accepts VirtualServiceSpecHttpRewriteUriRegexRewriteArgs, VirtualServiceSpecHttpRewriteUriRegexRewritePtr and VirtualServiceSpecHttpRewriteUriRegexRewritePtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRewriteUriRegexRewritePtrInput` via:
//
//	        VirtualServiceSpecHttpRewriteUriRegexRewriteArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpRewriteUriRegexRewritePtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRewriteUriRegexRewritePtrOutput() VirtualServiceSpecHttpRewriteUriRegexRewritePtrOutput
	ToVirtualServiceSpecHttpRewriteUriRegexRewritePtrOutputWithContext(context.Context) VirtualServiceSpecHttpRewriteUriRegexRewritePtrOutput
}

type virtualServiceSpecHttpRewriteUriRegexRewritePtrType VirtualServiceSpecHttpRewriteUriRegexRewriteArgs

func VirtualServiceSpecHttpRewriteUriRegexRewritePtr(v *VirtualServiceSpecHttpRewriteUriRegexRewriteArgs) VirtualServiceSpecHttpRewriteUriRegexRewritePtrInput {
	return (*virtualServiceSpecHttpRewriteUriRegexRewritePtrType)(v)
}

func (*virtualServiceSpecHttpRewriteUriRegexRewritePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRewriteUriRegexRewrite)(nil)).Elem()
}

func (i *virtualServiceSpecHttpRewriteUriRegexRewritePtrType) ToVirtualServiceSpecHttpRewriteUriRegexRewritePtrOutput() VirtualServiceSpecHttpRewriteUriRegexRewritePtrOutput {
	return i.ToVirtualServiceSpecHttpRewriteUriRegexRewritePtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpRewriteUriRegexRewritePtrType) ToVirtualServiceSpecHttpRewriteUriRegexRewritePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRewriteUriRegexRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRewriteUriRegexRewritePtrOutput)
}

// rewrite the path portion of the URI with the specified regex.
type VirtualServiceSpecHttpRewriteUriRegexRewriteOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRewriteUriRegexRewriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRewriteUriRegexRewrite)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRewriteUriRegexRewriteOutput) ToVirtualServiceSpecHttpRewriteUriRegexRewriteOutput() VirtualServiceSpecHttpRewriteUriRegexRewriteOutput {
	return o
}

func (o VirtualServiceSpecHttpRewriteUriRegexRewriteOutput) ToVirtualServiceSpecHttpRewriteUriRegexRewriteOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRewriteUriRegexRewriteOutput {
	return o
}

func (o VirtualServiceSpecHttpRewriteUriRegexRewriteOutput) ToVirtualServiceSpecHttpRewriteUriRegexRewritePtrOutput() VirtualServiceSpecHttpRewriteUriRegexRewritePtrOutput {
	return o.ToVirtualServiceSpecHttpRewriteUriRegexRewritePtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpRewriteUriRegexRewriteOutput) ToVirtualServiceSpecHttpRewriteUriRegexRewritePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRewriteUriRegexRewritePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpRewriteUriRegexRewrite) *VirtualServiceSpecHttpRewriteUriRegexRewrite {
		return &v
	}).(VirtualServiceSpecHttpRewriteUriRegexRewritePtrOutput)
}

// RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
func (o VirtualServiceSpecHttpRewriteUriRegexRewriteOutput) Match() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRewriteUriRegexRewrite) *string { return v.Match }).(pulumi.StringPtrOutput)
}

// The string that should replace into matching portions of original URI.
func (o VirtualServiceSpecHttpRewriteUriRegexRewriteOutput) Rewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRewriteUriRegexRewrite) *string { return v.Rewrite }).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecHttpRewriteUriRegexRewritePtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRewriteUriRegexRewritePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRewriteUriRegexRewrite)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRewriteUriRegexRewritePtrOutput) ToVirtualServiceSpecHttpRewriteUriRegexRewritePtrOutput() VirtualServiceSpecHttpRewriteUriRegexRewritePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRewriteUriRegexRewritePtrOutput) ToVirtualServiceSpecHttpRewriteUriRegexRewritePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRewriteUriRegexRewritePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRewriteUriRegexRewritePtrOutput) Elem() VirtualServiceSpecHttpRewriteUriRegexRewriteOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRewriteUriRegexRewrite) VirtualServiceSpecHttpRewriteUriRegexRewrite {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpRewriteUriRegexRewrite
		return ret
	}).(VirtualServiceSpecHttpRewriteUriRegexRewriteOutput)
}

// RE2 style regex-based match (https://github.com/google/re2/wiki/Syntax).
func (o VirtualServiceSpecHttpRewriteUriRegexRewritePtrOutput) Match() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRewriteUriRegexRewrite) *string {
		if v == nil {
			return nil
		}
		return v.Match
	}).(pulumi.StringPtrOutput)
}

// The string that should replace into matching portions of original URI.
func (o VirtualServiceSpecHttpRewriteUriRegexRewritePtrOutput) Rewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRewriteUriRegexRewrite) *string {
		if v == nil {
			return nil
		}
		return v.Rewrite
	}).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecHttpRoute struct {
	// Destination uniquely identifies the instances of a service to which the request/connection should be forwarded to.
	Destination VirtualServiceSpecHttpRouteDestination `pulumi:"destination"`
	Headers     *VirtualServiceSpecHttpRouteHeaders    `pulumi:"headers"`
	// Weight specifies the relative proportion of traffic to be forwarded to the destination.
	Weight *int `pulumi:"weight"`
}

// VirtualServiceSpecHttpRouteInput is an input type that accepts VirtualServiceSpecHttpRouteArgs and VirtualServiceSpecHttpRouteOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteInput` via:
//
//	VirtualServiceSpecHttpRouteArgs{...}
type VirtualServiceSpecHttpRouteInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteOutput() VirtualServiceSpecHttpRouteOutput
	ToVirtualServiceSpecHttpRouteOutputWithContext(context.Context) VirtualServiceSpecHttpRouteOutput
}

type VirtualServiceSpecHttpRouteArgs struct {
	// Destination uniquely identifies the instances of a service to which the request/connection should be forwarded to.
	Destination VirtualServiceSpecHttpRouteDestinationInput `pulumi:"destination"`
	Headers     VirtualServiceSpecHttpRouteHeadersPtrInput  `pulumi:"headers"`
	// Weight specifies the relative proportion of traffic to be forwarded to the destination.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (VirtualServiceSpecHttpRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRoute)(nil)).Elem()
}

func (i VirtualServiceSpecHttpRouteArgs) ToVirtualServiceSpecHttpRouteOutput() VirtualServiceSpecHttpRouteOutput {
	return i.ToVirtualServiceSpecHttpRouteOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteArgs) ToVirtualServiceSpecHttpRouteOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteOutput)
}

// VirtualServiceSpecHttpRouteArrayInput is an input type that accepts VirtualServiceSpecHttpRouteArray and VirtualServiceSpecHttpRouteArrayOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteArrayInput` via:
//
//	VirtualServiceSpecHttpRouteArray{ VirtualServiceSpecHttpRouteArgs{...} }
type VirtualServiceSpecHttpRouteArrayInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteArrayOutput() VirtualServiceSpecHttpRouteArrayOutput
	ToVirtualServiceSpecHttpRouteArrayOutputWithContext(context.Context) VirtualServiceSpecHttpRouteArrayOutput
}

type VirtualServiceSpecHttpRouteArray []VirtualServiceSpecHttpRouteInput

func (VirtualServiceSpecHttpRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecHttpRoute)(nil)).Elem()
}

func (i VirtualServiceSpecHttpRouteArray) ToVirtualServiceSpecHttpRouteArrayOutput() VirtualServiceSpecHttpRouteArrayOutput {
	return i.ToVirtualServiceSpecHttpRouteArrayOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteArray) ToVirtualServiceSpecHttpRouteArrayOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteArrayOutput)
}

type VirtualServiceSpecHttpRouteOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRoute)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteOutput) ToVirtualServiceSpecHttpRouteOutput() VirtualServiceSpecHttpRouteOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteOutput) ToVirtualServiceSpecHttpRouteOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteOutput {
	return o
}

// Destination uniquely identifies the instances of a service to which the request/connection should be forwarded to.
func (o VirtualServiceSpecHttpRouteOutput) Destination() VirtualServiceSpecHttpRouteDestinationOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRoute) VirtualServiceSpecHttpRouteDestination { return v.Destination }).(VirtualServiceSpecHttpRouteDestinationOutput)
}

func (o VirtualServiceSpecHttpRouteOutput) Headers() VirtualServiceSpecHttpRouteHeadersPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRoute) *VirtualServiceSpecHttpRouteHeaders { return v.Headers }).(VirtualServiceSpecHttpRouteHeadersPtrOutput)
}

// Weight specifies the relative proportion of traffic to be forwarded to the destination.
func (o VirtualServiceSpecHttpRouteOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRoute) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type VirtualServiceSpecHttpRouteArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecHttpRoute)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteArrayOutput) ToVirtualServiceSpecHttpRouteArrayOutput() VirtualServiceSpecHttpRouteArrayOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteArrayOutput) ToVirtualServiceSpecHttpRouteArrayOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteArrayOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteArrayOutput) Index(i pulumi.IntInput) VirtualServiceSpecHttpRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualServiceSpecHttpRoute {
		return vs[0].([]VirtualServiceSpecHttpRoute)[vs[1].(int)]
	}).(VirtualServiceSpecHttpRouteOutput)
}

// Destination uniquely identifies the instances of a service to which the request/connection should be forwarded to.
type VirtualServiceSpecHttpRouteDestination struct {
	// The name of a service from the service registry.
	Host string `pulumi:"host"`
	// Specifies the port on the host that is being addressed.
	Port *VirtualServiceSpecHttpRouteDestinationPort `pulumi:"port"`
	// The name of a subset within the service.
	Subset *string `pulumi:"subset"`
}

// VirtualServiceSpecHttpRouteDestinationInput is an input type that accepts VirtualServiceSpecHttpRouteDestinationArgs and VirtualServiceSpecHttpRouteDestinationOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteDestinationInput` via:
//
//	VirtualServiceSpecHttpRouteDestinationArgs{...}
type VirtualServiceSpecHttpRouteDestinationInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteDestinationOutput() VirtualServiceSpecHttpRouteDestinationOutput
	ToVirtualServiceSpecHttpRouteDestinationOutputWithContext(context.Context) VirtualServiceSpecHttpRouteDestinationOutput
}

// Destination uniquely identifies the instances of a service to which the request/connection should be forwarded to.
type VirtualServiceSpecHttpRouteDestinationArgs struct {
	// The name of a service from the service registry.
	Host pulumi.StringInput `pulumi:"host"`
	// Specifies the port on the host that is being addressed.
	Port VirtualServiceSpecHttpRouteDestinationPortPtrInput `pulumi:"port"`
	// The name of a subset within the service.
	Subset pulumi.StringPtrInput `pulumi:"subset"`
}

func (VirtualServiceSpecHttpRouteDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRouteDestination)(nil)).Elem()
}

func (i VirtualServiceSpecHttpRouteDestinationArgs) ToVirtualServiceSpecHttpRouteDestinationOutput() VirtualServiceSpecHttpRouteDestinationOutput {
	return i.ToVirtualServiceSpecHttpRouteDestinationOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteDestinationArgs) ToVirtualServiceSpecHttpRouteDestinationOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteDestinationOutput)
}

// Destination uniquely identifies the instances of a service to which the request/connection should be forwarded to.
type VirtualServiceSpecHttpRouteDestinationOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRouteDestination)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteDestinationOutput) ToVirtualServiceSpecHttpRouteDestinationOutput() VirtualServiceSpecHttpRouteDestinationOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteDestinationOutput) ToVirtualServiceSpecHttpRouteDestinationOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationOutput {
	return o
}

// The name of a service from the service registry.
func (o VirtualServiceSpecHttpRouteDestinationOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteDestination) string { return v.Host }).(pulumi.StringOutput)
}

// Specifies the port on the host that is being addressed.
func (o VirtualServiceSpecHttpRouteDestinationOutput) Port() VirtualServiceSpecHttpRouteDestinationPortPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteDestination) *VirtualServiceSpecHttpRouteDestinationPort {
		return v.Port
	}).(VirtualServiceSpecHttpRouteDestinationPortPtrOutput)
}

// The name of a subset within the service.
func (o VirtualServiceSpecHttpRouteDestinationOutput) Subset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteDestination) *string { return v.Subset }).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecHttpRouteDestinationPort struct {
	Number *int `pulumi:"number"`
}

// VirtualServiceSpecHttpRouteDestinationPortInput is an input type that accepts VirtualServiceSpecHttpRouteDestinationPortArgs and VirtualServiceSpecHttpRouteDestinationPortOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteDestinationPortInput` via:
//
//	VirtualServiceSpecHttpRouteDestinationPortArgs{...}
type VirtualServiceSpecHttpRouteDestinationPortInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteDestinationPortOutput() VirtualServiceSpecHttpRouteDestinationPortOutput
	ToVirtualServiceSpecHttpRouteDestinationPortOutputWithContext(context.Context) VirtualServiceSpecHttpRouteDestinationPortOutput
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecHttpRouteDestinationPortArgs struct {
	Number pulumi.IntPtrInput `pulumi:"number"`
}

func (VirtualServiceSpecHttpRouteDestinationPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRouteDestinationPort)(nil)).Elem()
}

func (i VirtualServiceSpecHttpRouteDestinationPortArgs) ToVirtualServiceSpecHttpRouteDestinationPortOutput() VirtualServiceSpecHttpRouteDestinationPortOutput {
	return i.ToVirtualServiceSpecHttpRouteDestinationPortOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteDestinationPortArgs) ToVirtualServiceSpecHttpRouteDestinationPortOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteDestinationPortOutput)
}

func (i VirtualServiceSpecHttpRouteDestinationPortArgs) ToVirtualServiceSpecHttpRouteDestinationPortPtrOutput() VirtualServiceSpecHttpRouteDestinationPortPtrOutput {
	return i.ToVirtualServiceSpecHttpRouteDestinationPortPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteDestinationPortArgs) ToVirtualServiceSpecHttpRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteDestinationPortOutput).ToVirtualServiceSpecHttpRouteDestinationPortPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpRouteDestinationPortPtrInput is an input type that accepts VirtualServiceSpecHttpRouteDestinationPortArgs, VirtualServiceSpecHttpRouteDestinationPortPtr and VirtualServiceSpecHttpRouteDestinationPortPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteDestinationPortPtrInput` via:
//
//	        VirtualServiceSpecHttpRouteDestinationPortArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpRouteDestinationPortPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteDestinationPortPtrOutput() VirtualServiceSpecHttpRouteDestinationPortPtrOutput
	ToVirtualServiceSpecHttpRouteDestinationPortPtrOutputWithContext(context.Context) VirtualServiceSpecHttpRouteDestinationPortPtrOutput
}

type virtualServiceSpecHttpRouteDestinationPortPtrType VirtualServiceSpecHttpRouteDestinationPortArgs

func VirtualServiceSpecHttpRouteDestinationPortPtr(v *VirtualServiceSpecHttpRouteDestinationPortArgs) VirtualServiceSpecHttpRouteDestinationPortPtrInput {
	return (*virtualServiceSpecHttpRouteDestinationPortPtrType)(v)
}

func (*virtualServiceSpecHttpRouteDestinationPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRouteDestinationPort)(nil)).Elem()
}

func (i *virtualServiceSpecHttpRouteDestinationPortPtrType) ToVirtualServiceSpecHttpRouteDestinationPortPtrOutput() VirtualServiceSpecHttpRouteDestinationPortPtrOutput {
	return i.ToVirtualServiceSpecHttpRouteDestinationPortPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpRouteDestinationPortPtrType) ToVirtualServiceSpecHttpRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteDestinationPortPtrOutput)
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecHttpRouteDestinationPortOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteDestinationPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRouteDestinationPort)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteDestinationPortOutput) ToVirtualServiceSpecHttpRouteDestinationPortOutput() VirtualServiceSpecHttpRouteDestinationPortOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteDestinationPortOutput) ToVirtualServiceSpecHttpRouteDestinationPortOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationPortOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteDestinationPortOutput) ToVirtualServiceSpecHttpRouteDestinationPortPtrOutput() VirtualServiceSpecHttpRouteDestinationPortPtrOutput {
	return o.ToVirtualServiceSpecHttpRouteDestinationPortPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpRouteDestinationPortOutput) ToVirtualServiceSpecHttpRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationPortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpRouteDestinationPort) *VirtualServiceSpecHttpRouteDestinationPort {
		return &v
	}).(VirtualServiceSpecHttpRouteDestinationPortPtrOutput)
}

func (o VirtualServiceSpecHttpRouteDestinationPortOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteDestinationPort) *int { return v.Number }).(pulumi.IntPtrOutput)
}

type VirtualServiceSpecHttpRouteDestinationPortPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteDestinationPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRouteDestinationPort)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteDestinationPortPtrOutput) ToVirtualServiceSpecHttpRouteDestinationPortPtrOutput() VirtualServiceSpecHttpRouteDestinationPortPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteDestinationPortPtrOutput) ToVirtualServiceSpecHttpRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteDestinationPortPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteDestinationPortPtrOutput) Elem() VirtualServiceSpecHttpRouteDestinationPortOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteDestinationPort) VirtualServiceSpecHttpRouteDestinationPort {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpRouteDestinationPort
		return ret
	}).(VirtualServiceSpecHttpRouteDestinationPortOutput)
}

func (o VirtualServiceSpecHttpRouteDestinationPortPtrOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteDestinationPort) *int {
		if v == nil {
			return nil
		}
		return v.Number
	}).(pulumi.IntPtrOutput)
}

type VirtualServiceSpecHttpRouteHeaders struct {
	Request  *VirtualServiceSpecHttpRouteHeadersRequest  `pulumi:"request"`
	Response *VirtualServiceSpecHttpRouteHeadersResponse `pulumi:"response"`
}

// VirtualServiceSpecHttpRouteHeadersInput is an input type that accepts VirtualServiceSpecHttpRouteHeadersArgs and VirtualServiceSpecHttpRouteHeadersOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteHeadersInput` via:
//
//	VirtualServiceSpecHttpRouteHeadersArgs{...}
type VirtualServiceSpecHttpRouteHeadersInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteHeadersOutput() VirtualServiceSpecHttpRouteHeadersOutput
	ToVirtualServiceSpecHttpRouteHeadersOutputWithContext(context.Context) VirtualServiceSpecHttpRouteHeadersOutput
}

type VirtualServiceSpecHttpRouteHeadersArgs struct {
	Request  VirtualServiceSpecHttpRouteHeadersRequestPtrInput  `pulumi:"request"`
	Response VirtualServiceSpecHttpRouteHeadersResponsePtrInput `pulumi:"response"`
}

func (VirtualServiceSpecHttpRouteHeadersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRouteHeaders)(nil)).Elem()
}

func (i VirtualServiceSpecHttpRouteHeadersArgs) ToVirtualServiceSpecHttpRouteHeadersOutput() VirtualServiceSpecHttpRouteHeadersOutput {
	return i.ToVirtualServiceSpecHttpRouteHeadersOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteHeadersArgs) ToVirtualServiceSpecHttpRouteHeadersOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteHeadersOutput)
}

func (i VirtualServiceSpecHttpRouteHeadersArgs) ToVirtualServiceSpecHttpRouteHeadersPtrOutput() VirtualServiceSpecHttpRouteHeadersPtrOutput {
	return i.ToVirtualServiceSpecHttpRouteHeadersPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteHeadersArgs) ToVirtualServiceSpecHttpRouteHeadersPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteHeadersOutput).ToVirtualServiceSpecHttpRouteHeadersPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpRouteHeadersPtrInput is an input type that accepts VirtualServiceSpecHttpRouteHeadersArgs, VirtualServiceSpecHttpRouteHeadersPtr and VirtualServiceSpecHttpRouteHeadersPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteHeadersPtrInput` via:
//
//	        VirtualServiceSpecHttpRouteHeadersArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpRouteHeadersPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteHeadersPtrOutput() VirtualServiceSpecHttpRouteHeadersPtrOutput
	ToVirtualServiceSpecHttpRouteHeadersPtrOutputWithContext(context.Context) VirtualServiceSpecHttpRouteHeadersPtrOutput
}

type virtualServiceSpecHttpRouteHeadersPtrType VirtualServiceSpecHttpRouteHeadersArgs

func VirtualServiceSpecHttpRouteHeadersPtr(v *VirtualServiceSpecHttpRouteHeadersArgs) VirtualServiceSpecHttpRouteHeadersPtrInput {
	return (*virtualServiceSpecHttpRouteHeadersPtrType)(v)
}

func (*virtualServiceSpecHttpRouteHeadersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRouteHeaders)(nil)).Elem()
}

func (i *virtualServiceSpecHttpRouteHeadersPtrType) ToVirtualServiceSpecHttpRouteHeadersPtrOutput() VirtualServiceSpecHttpRouteHeadersPtrOutput {
	return i.ToVirtualServiceSpecHttpRouteHeadersPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpRouteHeadersPtrType) ToVirtualServiceSpecHttpRouteHeadersPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteHeadersPtrOutput)
}

type VirtualServiceSpecHttpRouteHeadersOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteHeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRouteHeaders)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteHeadersOutput) ToVirtualServiceSpecHttpRouteHeadersOutput() VirtualServiceSpecHttpRouteHeadersOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersOutput) ToVirtualServiceSpecHttpRouteHeadersOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersOutput) ToVirtualServiceSpecHttpRouteHeadersPtrOutput() VirtualServiceSpecHttpRouteHeadersPtrOutput {
	return o.ToVirtualServiceSpecHttpRouteHeadersPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpRouteHeadersOutput) ToVirtualServiceSpecHttpRouteHeadersPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpRouteHeaders) *VirtualServiceSpecHttpRouteHeaders {
		return &v
	}).(VirtualServiceSpecHttpRouteHeadersPtrOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersOutput) Request() VirtualServiceSpecHttpRouteHeadersRequestPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteHeaders) *VirtualServiceSpecHttpRouteHeadersRequest {
		return v.Request
	}).(VirtualServiceSpecHttpRouteHeadersRequestPtrOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersOutput) Response() VirtualServiceSpecHttpRouteHeadersResponsePtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteHeaders) *VirtualServiceSpecHttpRouteHeadersResponse {
		return v.Response
	}).(VirtualServiceSpecHttpRouteHeadersResponsePtrOutput)
}

type VirtualServiceSpecHttpRouteHeadersPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteHeadersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRouteHeaders)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteHeadersPtrOutput) ToVirtualServiceSpecHttpRouteHeadersPtrOutput() VirtualServiceSpecHttpRouteHeadersPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersPtrOutput) ToVirtualServiceSpecHttpRouteHeadersPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersPtrOutput) Elem() VirtualServiceSpecHttpRouteHeadersOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeaders) VirtualServiceSpecHttpRouteHeaders {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpRouteHeaders
		return ret
	}).(VirtualServiceSpecHttpRouteHeadersOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersPtrOutput) Request() VirtualServiceSpecHttpRouteHeadersRequestPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeaders) *VirtualServiceSpecHttpRouteHeadersRequest {
		if v == nil {
			return nil
		}
		return v.Request
	}).(VirtualServiceSpecHttpRouteHeadersRequestPtrOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersPtrOutput) Response() VirtualServiceSpecHttpRouteHeadersResponsePtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeaders) *VirtualServiceSpecHttpRouteHeadersResponse {
		if v == nil {
			return nil
		}
		return v.Response
	}).(VirtualServiceSpecHttpRouteHeadersResponsePtrOutput)
}

type VirtualServiceSpecHttpRouteHeadersRequest struct {
	Add    map[string]string `pulumi:"add"`
	Remove []string          `pulumi:"remove"`
	Set    map[string]string `pulumi:"set"`
}

// VirtualServiceSpecHttpRouteHeadersRequestInput is an input type that accepts VirtualServiceSpecHttpRouteHeadersRequestArgs and VirtualServiceSpecHttpRouteHeadersRequestOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteHeadersRequestInput` via:
//
//	VirtualServiceSpecHttpRouteHeadersRequestArgs{...}
type VirtualServiceSpecHttpRouteHeadersRequestInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteHeadersRequestOutput() VirtualServiceSpecHttpRouteHeadersRequestOutput
	ToVirtualServiceSpecHttpRouteHeadersRequestOutputWithContext(context.Context) VirtualServiceSpecHttpRouteHeadersRequestOutput
}

type VirtualServiceSpecHttpRouteHeadersRequestArgs struct {
	Add    pulumi.StringMapInput   `pulumi:"add"`
	Remove pulumi.StringArrayInput `pulumi:"remove"`
	Set    pulumi.StringMapInput   `pulumi:"set"`
}

func (VirtualServiceSpecHttpRouteHeadersRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRouteHeadersRequest)(nil)).Elem()
}

func (i VirtualServiceSpecHttpRouteHeadersRequestArgs) ToVirtualServiceSpecHttpRouteHeadersRequestOutput() VirtualServiceSpecHttpRouteHeadersRequestOutput {
	return i.ToVirtualServiceSpecHttpRouteHeadersRequestOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteHeadersRequestArgs) ToVirtualServiceSpecHttpRouteHeadersRequestOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteHeadersRequestOutput)
}

func (i VirtualServiceSpecHttpRouteHeadersRequestArgs) ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutput() VirtualServiceSpecHttpRouteHeadersRequestPtrOutput {
	return i.ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteHeadersRequestArgs) ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteHeadersRequestOutput).ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpRouteHeadersRequestPtrInput is an input type that accepts VirtualServiceSpecHttpRouteHeadersRequestArgs, VirtualServiceSpecHttpRouteHeadersRequestPtr and VirtualServiceSpecHttpRouteHeadersRequestPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteHeadersRequestPtrInput` via:
//
//	        VirtualServiceSpecHttpRouteHeadersRequestArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpRouteHeadersRequestPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutput() VirtualServiceSpecHttpRouteHeadersRequestPtrOutput
	ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutputWithContext(context.Context) VirtualServiceSpecHttpRouteHeadersRequestPtrOutput
}

type virtualServiceSpecHttpRouteHeadersRequestPtrType VirtualServiceSpecHttpRouteHeadersRequestArgs

func VirtualServiceSpecHttpRouteHeadersRequestPtr(v *VirtualServiceSpecHttpRouteHeadersRequestArgs) VirtualServiceSpecHttpRouteHeadersRequestPtrInput {
	return (*virtualServiceSpecHttpRouteHeadersRequestPtrType)(v)
}

func (*virtualServiceSpecHttpRouteHeadersRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRouteHeadersRequest)(nil)).Elem()
}

func (i *virtualServiceSpecHttpRouteHeadersRequestPtrType) ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutput() VirtualServiceSpecHttpRouteHeadersRequestPtrOutput {
	return i.ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpRouteHeadersRequestPtrType) ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteHeadersRequestPtrOutput)
}

type VirtualServiceSpecHttpRouteHeadersRequestOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteHeadersRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRouteHeadersRequest)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteHeadersRequestOutput) ToVirtualServiceSpecHttpRouteHeadersRequestOutput() VirtualServiceSpecHttpRouteHeadersRequestOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersRequestOutput) ToVirtualServiceSpecHttpRouteHeadersRequestOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersRequestOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersRequestOutput) ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutput() VirtualServiceSpecHttpRouteHeadersRequestPtrOutput {
	return o.ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpRouteHeadersRequestOutput) ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpRouteHeadersRequest) *VirtualServiceSpecHttpRouteHeadersRequest {
		return &v
	}).(VirtualServiceSpecHttpRouteHeadersRequestPtrOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersRequestOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteHeadersRequest) map[string]string { return v.Add }).(pulumi.StringMapOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersRequestOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteHeadersRequest) []string { return v.Remove }).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersRequestOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteHeadersRequest) map[string]string { return v.Set }).(pulumi.StringMapOutput)
}

type VirtualServiceSpecHttpRouteHeadersRequestPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteHeadersRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRouteHeadersRequest)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteHeadersRequestPtrOutput) ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutput() VirtualServiceSpecHttpRouteHeadersRequestPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersRequestPtrOutput) ToVirtualServiceSpecHttpRouteHeadersRequestPtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersRequestPtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersRequestPtrOutput) Elem() VirtualServiceSpecHttpRouteHeadersRequestOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeadersRequest) VirtualServiceSpecHttpRouteHeadersRequest {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpRouteHeadersRequest
		return ret
	}).(VirtualServiceSpecHttpRouteHeadersRequestOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersRequestPtrOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeadersRequest) map[string]string {
		if v == nil {
			return nil
		}
		return v.Add
	}).(pulumi.StringMapOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersRequestPtrOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeadersRequest) []string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersRequestPtrOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeadersRequest) map[string]string {
		if v == nil {
			return nil
		}
		return v.Set
	}).(pulumi.StringMapOutput)
}

type VirtualServiceSpecHttpRouteHeadersRequestAdd struct {
}

type VirtualServiceSpecHttpRouteHeadersRequestSet struct {
}

type VirtualServiceSpecHttpRouteHeadersResponse struct {
	Add    map[string]string `pulumi:"add"`
	Remove []string          `pulumi:"remove"`
	Set    map[string]string `pulumi:"set"`
}

// VirtualServiceSpecHttpRouteHeadersResponseInput is an input type that accepts VirtualServiceSpecHttpRouteHeadersResponseArgs and VirtualServiceSpecHttpRouteHeadersResponseOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteHeadersResponseInput` via:
//
//	VirtualServiceSpecHttpRouteHeadersResponseArgs{...}
type VirtualServiceSpecHttpRouteHeadersResponseInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteHeadersResponseOutput() VirtualServiceSpecHttpRouteHeadersResponseOutput
	ToVirtualServiceSpecHttpRouteHeadersResponseOutputWithContext(context.Context) VirtualServiceSpecHttpRouteHeadersResponseOutput
}

type VirtualServiceSpecHttpRouteHeadersResponseArgs struct {
	Add    pulumi.StringMapInput   `pulumi:"add"`
	Remove pulumi.StringArrayInput `pulumi:"remove"`
	Set    pulumi.StringMapInput   `pulumi:"set"`
}

func (VirtualServiceSpecHttpRouteHeadersResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRouteHeadersResponse)(nil)).Elem()
}

func (i VirtualServiceSpecHttpRouteHeadersResponseArgs) ToVirtualServiceSpecHttpRouteHeadersResponseOutput() VirtualServiceSpecHttpRouteHeadersResponseOutput {
	return i.ToVirtualServiceSpecHttpRouteHeadersResponseOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteHeadersResponseArgs) ToVirtualServiceSpecHttpRouteHeadersResponseOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteHeadersResponseOutput)
}

func (i VirtualServiceSpecHttpRouteHeadersResponseArgs) ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutput() VirtualServiceSpecHttpRouteHeadersResponsePtrOutput {
	return i.ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecHttpRouteHeadersResponseArgs) ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteHeadersResponseOutput).ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutputWithContext(ctx)
}

// VirtualServiceSpecHttpRouteHeadersResponsePtrInput is an input type that accepts VirtualServiceSpecHttpRouteHeadersResponseArgs, VirtualServiceSpecHttpRouteHeadersResponsePtr and VirtualServiceSpecHttpRouteHeadersResponsePtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecHttpRouteHeadersResponsePtrInput` via:
//
//	        VirtualServiceSpecHttpRouteHeadersResponseArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecHttpRouteHeadersResponsePtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutput() VirtualServiceSpecHttpRouteHeadersResponsePtrOutput
	ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutputWithContext(context.Context) VirtualServiceSpecHttpRouteHeadersResponsePtrOutput
}

type virtualServiceSpecHttpRouteHeadersResponsePtrType VirtualServiceSpecHttpRouteHeadersResponseArgs

func VirtualServiceSpecHttpRouteHeadersResponsePtr(v *VirtualServiceSpecHttpRouteHeadersResponseArgs) VirtualServiceSpecHttpRouteHeadersResponsePtrInput {
	return (*virtualServiceSpecHttpRouteHeadersResponsePtrType)(v)
}

func (*virtualServiceSpecHttpRouteHeadersResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRouteHeadersResponse)(nil)).Elem()
}

func (i *virtualServiceSpecHttpRouteHeadersResponsePtrType) ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutput() VirtualServiceSpecHttpRouteHeadersResponsePtrOutput {
	return i.ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecHttpRouteHeadersResponsePtrType) ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecHttpRouteHeadersResponsePtrOutput)
}

type VirtualServiceSpecHttpRouteHeadersResponseOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteHeadersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecHttpRouteHeadersResponse)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteHeadersResponseOutput) ToVirtualServiceSpecHttpRouteHeadersResponseOutput() VirtualServiceSpecHttpRouteHeadersResponseOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersResponseOutput) ToVirtualServiceSpecHttpRouteHeadersResponseOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersResponseOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersResponseOutput) ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutput() VirtualServiceSpecHttpRouteHeadersResponsePtrOutput {
	return o.ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecHttpRouteHeadersResponseOutput) ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecHttpRouteHeadersResponse) *VirtualServiceSpecHttpRouteHeadersResponse {
		return &v
	}).(VirtualServiceSpecHttpRouteHeadersResponsePtrOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersResponseOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteHeadersResponse) map[string]string { return v.Add }).(pulumi.StringMapOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersResponseOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteHeadersResponse) []string { return v.Remove }).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersResponseOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecHttpRouteHeadersResponse) map[string]string { return v.Set }).(pulumi.StringMapOutput)
}

type VirtualServiceSpecHttpRouteHeadersResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecHttpRouteHeadersResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecHttpRouteHeadersResponse)(nil)).Elem()
}

func (o VirtualServiceSpecHttpRouteHeadersResponsePtrOutput) ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutput() VirtualServiceSpecHttpRouteHeadersResponsePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersResponsePtrOutput) ToVirtualServiceSpecHttpRouteHeadersResponsePtrOutputWithContext(ctx context.Context) VirtualServiceSpecHttpRouteHeadersResponsePtrOutput {
	return o
}

func (o VirtualServiceSpecHttpRouteHeadersResponsePtrOutput) Elem() VirtualServiceSpecHttpRouteHeadersResponseOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeadersResponse) VirtualServiceSpecHttpRouteHeadersResponse {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecHttpRouteHeadersResponse
		return ret
	}).(VirtualServiceSpecHttpRouteHeadersResponseOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersResponsePtrOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeadersResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Add
	}).(pulumi.StringMapOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersResponsePtrOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeadersResponse) []string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringArrayOutput)
}

func (o VirtualServiceSpecHttpRouteHeadersResponsePtrOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VirtualServiceSpecHttpRouteHeadersResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Set
	}).(pulumi.StringMapOutput)
}

type VirtualServiceSpecHttpRouteHeadersResponseAdd struct {
}

type VirtualServiceSpecHttpRouteHeadersResponseSet struct {
}

type VirtualServiceSpecTcp struct {
	// Match conditions to be satisfied for the rule to be activated.
	Match []VirtualServiceSpecTcpMatch `pulumi:"match"`
	// The destination to which the connection should be forwarded to.
	Route []VirtualServiceSpecTcpRoute `pulumi:"route"`
}

// VirtualServiceSpecTcpInput is an input type that accepts VirtualServiceSpecTcpArgs and VirtualServiceSpecTcpOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTcpInput` via:
//
//	VirtualServiceSpecTcpArgs{...}
type VirtualServiceSpecTcpInput interface {
	pulumi.Input

	ToVirtualServiceSpecTcpOutput() VirtualServiceSpecTcpOutput
	ToVirtualServiceSpecTcpOutputWithContext(context.Context) VirtualServiceSpecTcpOutput
}

type VirtualServiceSpecTcpArgs struct {
	// Match conditions to be satisfied for the rule to be activated.
	Match VirtualServiceSpecTcpMatchArrayInput `pulumi:"match"`
	// The destination to which the connection should be forwarded to.
	Route VirtualServiceSpecTcpRouteArrayInput `pulumi:"route"`
}

func (VirtualServiceSpecTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTcp)(nil)).Elem()
}

func (i VirtualServiceSpecTcpArgs) ToVirtualServiceSpecTcpOutput() VirtualServiceSpecTcpOutput {
	return i.ToVirtualServiceSpecTcpOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTcpArgs) ToVirtualServiceSpecTcpOutputWithContext(ctx context.Context) VirtualServiceSpecTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpOutput)
}

// VirtualServiceSpecTcpArrayInput is an input type that accepts VirtualServiceSpecTcpArray and VirtualServiceSpecTcpArrayOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTcpArrayInput` via:
//
//	VirtualServiceSpecTcpArray{ VirtualServiceSpecTcpArgs{...} }
type VirtualServiceSpecTcpArrayInput interface {
	pulumi.Input

	ToVirtualServiceSpecTcpArrayOutput() VirtualServiceSpecTcpArrayOutput
	ToVirtualServiceSpecTcpArrayOutputWithContext(context.Context) VirtualServiceSpecTcpArrayOutput
}

type VirtualServiceSpecTcpArray []VirtualServiceSpecTcpInput

func (VirtualServiceSpecTcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTcp)(nil)).Elem()
}

func (i VirtualServiceSpecTcpArray) ToVirtualServiceSpecTcpArrayOutput() VirtualServiceSpecTcpArrayOutput {
	return i.ToVirtualServiceSpecTcpArrayOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTcpArray) ToVirtualServiceSpecTcpArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpArrayOutput)
}

type VirtualServiceSpecTcpOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTcp)(nil)).Elem()
}

func (o VirtualServiceSpecTcpOutput) ToVirtualServiceSpecTcpOutput() VirtualServiceSpecTcpOutput {
	return o
}

func (o VirtualServiceSpecTcpOutput) ToVirtualServiceSpecTcpOutputWithContext(ctx context.Context) VirtualServiceSpecTcpOutput {
	return o
}

// Match conditions to be satisfied for the rule to be activated.
func (o VirtualServiceSpecTcpOutput) Match() VirtualServiceSpecTcpMatchArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcp) []VirtualServiceSpecTcpMatch { return v.Match }).(VirtualServiceSpecTcpMatchArrayOutput)
}

// The destination to which the connection should be forwarded to.
func (o VirtualServiceSpecTcpOutput) Route() VirtualServiceSpecTcpRouteArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcp) []VirtualServiceSpecTcpRoute { return v.Route }).(VirtualServiceSpecTcpRouteArrayOutput)
}

type VirtualServiceSpecTcpArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTcp)(nil)).Elem()
}

func (o VirtualServiceSpecTcpArrayOutput) ToVirtualServiceSpecTcpArrayOutput() VirtualServiceSpecTcpArrayOutput {
	return o
}

func (o VirtualServiceSpecTcpArrayOutput) ToVirtualServiceSpecTcpArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTcpArrayOutput {
	return o
}

func (o VirtualServiceSpecTcpArrayOutput) Index(i pulumi.IntInput) VirtualServiceSpecTcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualServiceSpecTcp {
		return vs[0].([]VirtualServiceSpecTcp)[vs[1].(int)]
	}).(VirtualServiceSpecTcpOutput)
}

type VirtualServiceSpecTcpMatch struct {
	// IPv4 or IPv6 ip addresses of destination with optional subnet.
	DestinationSubnets []string `pulumi:"destinationSubnets"`
	// Names of gateways where the rule should be applied.
	Gateways []string `pulumi:"gateways"`
	// Specifies the port on the host that is being addressed.
	Port *int `pulumi:"port"`
	// One or more labels that constrain the applicability of a rule to workloads with the given labels.
	SourceLabels map[string]string `pulumi:"sourceLabels"`
	// Source namespace constraining the applicability of a rule to workloads in that namespace.
	SourceNamespace *string `pulumi:"sourceNamespace"`
	SourceSubnet    *string `pulumi:"sourceSubnet"`
}

// VirtualServiceSpecTcpMatchInput is an input type that accepts VirtualServiceSpecTcpMatchArgs and VirtualServiceSpecTcpMatchOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTcpMatchInput` via:
//
//	VirtualServiceSpecTcpMatchArgs{...}
type VirtualServiceSpecTcpMatchInput interface {
	pulumi.Input

	ToVirtualServiceSpecTcpMatchOutput() VirtualServiceSpecTcpMatchOutput
	ToVirtualServiceSpecTcpMatchOutputWithContext(context.Context) VirtualServiceSpecTcpMatchOutput
}

type VirtualServiceSpecTcpMatchArgs struct {
	// IPv4 or IPv6 ip addresses of destination with optional subnet.
	DestinationSubnets pulumi.StringArrayInput `pulumi:"destinationSubnets"`
	// Names of gateways where the rule should be applied.
	Gateways pulumi.StringArrayInput `pulumi:"gateways"`
	// Specifies the port on the host that is being addressed.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// One or more labels that constrain the applicability of a rule to workloads with the given labels.
	SourceLabels pulumi.StringMapInput `pulumi:"sourceLabels"`
	// Source namespace constraining the applicability of a rule to workloads in that namespace.
	SourceNamespace pulumi.StringPtrInput `pulumi:"sourceNamespace"`
	SourceSubnet    pulumi.StringPtrInput `pulumi:"sourceSubnet"`
}

func (VirtualServiceSpecTcpMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTcpMatch)(nil)).Elem()
}

func (i VirtualServiceSpecTcpMatchArgs) ToVirtualServiceSpecTcpMatchOutput() VirtualServiceSpecTcpMatchOutput {
	return i.ToVirtualServiceSpecTcpMatchOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTcpMatchArgs) ToVirtualServiceSpecTcpMatchOutputWithContext(ctx context.Context) VirtualServiceSpecTcpMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpMatchOutput)
}

// VirtualServiceSpecTcpMatchArrayInput is an input type that accepts VirtualServiceSpecTcpMatchArray and VirtualServiceSpecTcpMatchArrayOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTcpMatchArrayInput` via:
//
//	VirtualServiceSpecTcpMatchArray{ VirtualServiceSpecTcpMatchArgs{...} }
type VirtualServiceSpecTcpMatchArrayInput interface {
	pulumi.Input

	ToVirtualServiceSpecTcpMatchArrayOutput() VirtualServiceSpecTcpMatchArrayOutput
	ToVirtualServiceSpecTcpMatchArrayOutputWithContext(context.Context) VirtualServiceSpecTcpMatchArrayOutput
}

type VirtualServiceSpecTcpMatchArray []VirtualServiceSpecTcpMatchInput

func (VirtualServiceSpecTcpMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTcpMatch)(nil)).Elem()
}

func (i VirtualServiceSpecTcpMatchArray) ToVirtualServiceSpecTcpMatchArrayOutput() VirtualServiceSpecTcpMatchArrayOutput {
	return i.ToVirtualServiceSpecTcpMatchArrayOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTcpMatchArray) ToVirtualServiceSpecTcpMatchArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTcpMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpMatchArrayOutput)
}

type VirtualServiceSpecTcpMatchOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTcpMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTcpMatch)(nil)).Elem()
}

func (o VirtualServiceSpecTcpMatchOutput) ToVirtualServiceSpecTcpMatchOutput() VirtualServiceSpecTcpMatchOutput {
	return o
}

func (o VirtualServiceSpecTcpMatchOutput) ToVirtualServiceSpecTcpMatchOutputWithContext(ctx context.Context) VirtualServiceSpecTcpMatchOutput {
	return o
}

// IPv4 or IPv6 ip addresses of destination with optional subnet.
func (o VirtualServiceSpecTcpMatchOutput) DestinationSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpMatch) []string { return v.DestinationSubnets }).(pulumi.StringArrayOutput)
}

// Names of gateways where the rule should be applied.
func (o VirtualServiceSpecTcpMatchOutput) Gateways() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpMatch) []string { return v.Gateways }).(pulumi.StringArrayOutput)
}

// Specifies the port on the host that is being addressed.
func (o VirtualServiceSpecTcpMatchOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpMatch) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// One or more labels that constrain the applicability of a rule to workloads with the given labels.
func (o VirtualServiceSpecTcpMatchOutput) SourceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpMatch) map[string]string { return v.SourceLabels }).(pulumi.StringMapOutput)
}

// Source namespace constraining the applicability of a rule to workloads in that namespace.
func (o VirtualServiceSpecTcpMatchOutput) SourceNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpMatch) *string { return v.SourceNamespace }).(pulumi.StringPtrOutput)
}

func (o VirtualServiceSpecTcpMatchOutput) SourceSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpMatch) *string { return v.SourceSubnet }).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecTcpMatchArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTcpMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTcpMatch)(nil)).Elem()
}

func (o VirtualServiceSpecTcpMatchArrayOutput) ToVirtualServiceSpecTcpMatchArrayOutput() VirtualServiceSpecTcpMatchArrayOutput {
	return o
}

func (o VirtualServiceSpecTcpMatchArrayOutput) ToVirtualServiceSpecTcpMatchArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTcpMatchArrayOutput {
	return o
}

func (o VirtualServiceSpecTcpMatchArrayOutput) Index(i pulumi.IntInput) VirtualServiceSpecTcpMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualServiceSpecTcpMatch {
		return vs[0].([]VirtualServiceSpecTcpMatch)[vs[1].(int)]
	}).(VirtualServiceSpecTcpMatchOutput)
}

// One or more labels that constrain the applicability of a rule to workloads with the given labels.
type VirtualServiceSpecTcpMatchSourceLabels struct {
}

type VirtualServiceSpecTcpRoute struct {
	// Destination uniquely identifies the instances of a service to which the request/connection should be forwarded to.
	Destination VirtualServiceSpecTcpRouteDestination `pulumi:"destination"`
	// Weight specifies the relative proportion of traffic to be forwarded to the destination.
	Weight *int `pulumi:"weight"`
}

// VirtualServiceSpecTcpRouteInput is an input type that accepts VirtualServiceSpecTcpRouteArgs and VirtualServiceSpecTcpRouteOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTcpRouteInput` via:
//
//	VirtualServiceSpecTcpRouteArgs{...}
type VirtualServiceSpecTcpRouteInput interface {
	pulumi.Input

	ToVirtualServiceSpecTcpRouteOutput() VirtualServiceSpecTcpRouteOutput
	ToVirtualServiceSpecTcpRouteOutputWithContext(context.Context) VirtualServiceSpecTcpRouteOutput
}

type VirtualServiceSpecTcpRouteArgs struct {
	// Destination uniquely identifies the instances of a service to which the request/connection should be forwarded to.
	Destination VirtualServiceSpecTcpRouteDestinationInput `pulumi:"destination"`
	// Weight specifies the relative proportion of traffic to be forwarded to the destination.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (VirtualServiceSpecTcpRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTcpRoute)(nil)).Elem()
}

func (i VirtualServiceSpecTcpRouteArgs) ToVirtualServiceSpecTcpRouteOutput() VirtualServiceSpecTcpRouteOutput {
	return i.ToVirtualServiceSpecTcpRouteOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTcpRouteArgs) ToVirtualServiceSpecTcpRouteOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpRouteOutput)
}

// VirtualServiceSpecTcpRouteArrayInput is an input type that accepts VirtualServiceSpecTcpRouteArray and VirtualServiceSpecTcpRouteArrayOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTcpRouteArrayInput` via:
//
//	VirtualServiceSpecTcpRouteArray{ VirtualServiceSpecTcpRouteArgs{...} }
type VirtualServiceSpecTcpRouteArrayInput interface {
	pulumi.Input

	ToVirtualServiceSpecTcpRouteArrayOutput() VirtualServiceSpecTcpRouteArrayOutput
	ToVirtualServiceSpecTcpRouteArrayOutputWithContext(context.Context) VirtualServiceSpecTcpRouteArrayOutput
}

type VirtualServiceSpecTcpRouteArray []VirtualServiceSpecTcpRouteInput

func (VirtualServiceSpecTcpRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTcpRoute)(nil)).Elem()
}

func (i VirtualServiceSpecTcpRouteArray) ToVirtualServiceSpecTcpRouteArrayOutput() VirtualServiceSpecTcpRouteArrayOutput {
	return i.ToVirtualServiceSpecTcpRouteArrayOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTcpRouteArray) ToVirtualServiceSpecTcpRouteArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpRouteArrayOutput)
}

type VirtualServiceSpecTcpRouteOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTcpRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTcpRoute)(nil)).Elem()
}

func (o VirtualServiceSpecTcpRouteOutput) ToVirtualServiceSpecTcpRouteOutput() VirtualServiceSpecTcpRouteOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteOutput) ToVirtualServiceSpecTcpRouteOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteOutput {
	return o
}

// Destination uniquely identifies the instances of a service to which the request/connection should be forwarded to.
func (o VirtualServiceSpecTcpRouteOutput) Destination() VirtualServiceSpecTcpRouteDestinationOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpRoute) VirtualServiceSpecTcpRouteDestination { return v.Destination }).(VirtualServiceSpecTcpRouteDestinationOutput)
}

// Weight specifies the relative proportion of traffic to be forwarded to the destination.
func (o VirtualServiceSpecTcpRouteOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpRoute) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type VirtualServiceSpecTcpRouteArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTcpRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTcpRoute)(nil)).Elem()
}

func (o VirtualServiceSpecTcpRouteArrayOutput) ToVirtualServiceSpecTcpRouteArrayOutput() VirtualServiceSpecTcpRouteArrayOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteArrayOutput) ToVirtualServiceSpecTcpRouteArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteArrayOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteArrayOutput) Index(i pulumi.IntInput) VirtualServiceSpecTcpRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualServiceSpecTcpRoute {
		return vs[0].([]VirtualServiceSpecTcpRoute)[vs[1].(int)]
	}).(VirtualServiceSpecTcpRouteOutput)
}

// Destination uniquely identifies the instances of a service to which the request/connection should be forwarded to.
type VirtualServiceSpecTcpRouteDestination struct {
	// The name of a service from the service registry.
	Host string `pulumi:"host"`
	// Specifies the port on the host that is being addressed.
	Port *VirtualServiceSpecTcpRouteDestinationPort `pulumi:"port"`
	// The name of a subset within the service.
	Subset *string `pulumi:"subset"`
}

// VirtualServiceSpecTcpRouteDestinationInput is an input type that accepts VirtualServiceSpecTcpRouteDestinationArgs and VirtualServiceSpecTcpRouteDestinationOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTcpRouteDestinationInput` via:
//
//	VirtualServiceSpecTcpRouteDestinationArgs{...}
type VirtualServiceSpecTcpRouteDestinationInput interface {
	pulumi.Input

	ToVirtualServiceSpecTcpRouteDestinationOutput() VirtualServiceSpecTcpRouteDestinationOutput
	ToVirtualServiceSpecTcpRouteDestinationOutputWithContext(context.Context) VirtualServiceSpecTcpRouteDestinationOutput
}

// Destination uniquely identifies the instances of a service to which the request/connection should be forwarded to.
type VirtualServiceSpecTcpRouteDestinationArgs struct {
	// The name of a service from the service registry.
	Host pulumi.StringInput `pulumi:"host"`
	// Specifies the port on the host that is being addressed.
	Port VirtualServiceSpecTcpRouteDestinationPortPtrInput `pulumi:"port"`
	// The name of a subset within the service.
	Subset pulumi.StringPtrInput `pulumi:"subset"`
}

func (VirtualServiceSpecTcpRouteDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTcpRouteDestination)(nil)).Elem()
}

func (i VirtualServiceSpecTcpRouteDestinationArgs) ToVirtualServiceSpecTcpRouteDestinationOutput() VirtualServiceSpecTcpRouteDestinationOutput {
	return i.ToVirtualServiceSpecTcpRouteDestinationOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTcpRouteDestinationArgs) ToVirtualServiceSpecTcpRouteDestinationOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpRouteDestinationOutput)
}

// Destination uniquely identifies the instances of a service to which the request/connection should be forwarded to.
type VirtualServiceSpecTcpRouteDestinationOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTcpRouteDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTcpRouteDestination)(nil)).Elem()
}

func (o VirtualServiceSpecTcpRouteDestinationOutput) ToVirtualServiceSpecTcpRouteDestinationOutput() VirtualServiceSpecTcpRouteDestinationOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteDestinationOutput) ToVirtualServiceSpecTcpRouteDestinationOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationOutput {
	return o
}

// The name of a service from the service registry.
func (o VirtualServiceSpecTcpRouteDestinationOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpRouteDestination) string { return v.Host }).(pulumi.StringOutput)
}

// Specifies the port on the host that is being addressed.
func (o VirtualServiceSpecTcpRouteDestinationOutput) Port() VirtualServiceSpecTcpRouteDestinationPortPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpRouteDestination) *VirtualServiceSpecTcpRouteDestinationPort {
		return v.Port
	}).(VirtualServiceSpecTcpRouteDestinationPortPtrOutput)
}

// The name of a subset within the service.
func (o VirtualServiceSpecTcpRouteDestinationOutput) Subset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpRouteDestination) *string { return v.Subset }).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecTcpRouteDestinationPort struct {
	Number *int `pulumi:"number"`
}

// VirtualServiceSpecTcpRouteDestinationPortInput is an input type that accepts VirtualServiceSpecTcpRouteDestinationPortArgs and VirtualServiceSpecTcpRouteDestinationPortOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTcpRouteDestinationPortInput` via:
//
//	VirtualServiceSpecTcpRouteDestinationPortArgs{...}
type VirtualServiceSpecTcpRouteDestinationPortInput interface {
	pulumi.Input

	ToVirtualServiceSpecTcpRouteDestinationPortOutput() VirtualServiceSpecTcpRouteDestinationPortOutput
	ToVirtualServiceSpecTcpRouteDestinationPortOutputWithContext(context.Context) VirtualServiceSpecTcpRouteDestinationPortOutput
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecTcpRouteDestinationPortArgs struct {
	Number pulumi.IntPtrInput `pulumi:"number"`
}

func (VirtualServiceSpecTcpRouteDestinationPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTcpRouteDestinationPort)(nil)).Elem()
}

func (i VirtualServiceSpecTcpRouteDestinationPortArgs) ToVirtualServiceSpecTcpRouteDestinationPortOutput() VirtualServiceSpecTcpRouteDestinationPortOutput {
	return i.ToVirtualServiceSpecTcpRouteDestinationPortOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTcpRouteDestinationPortArgs) ToVirtualServiceSpecTcpRouteDestinationPortOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpRouteDestinationPortOutput)
}

func (i VirtualServiceSpecTcpRouteDestinationPortArgs) ToVirtualServiceSpecTcpRouteDestinationPortPtrOutput() VirtualServiceSpecTcpRouteDestinationPortPtrOutput {
	return i.ToVirtualServiceSpecTcpRouteDestinationPortPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTcpRouteDestinationPortArgs) ToVirtualServiceSpecTcpRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpRouteDestinationPortOutput).ToVirtualServiceSpecTcpRouteDestinationPortPtrOutputWithContext(ctx)
}

// VirtualServiceSpecTcpRouteDestinationPortPtrInput is an input type that accepts VirtualServiceSpecTcpRouteDestinationPortArgs, VirtualServiceSpecTcpRouteDestinationPortPtr and VirtualServiceSpecTcpRouteDestinationPortPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTcpRouteDestinationPortPtrInput` via:
//
//	        VirtualServiceSpecTcpRouteDestinationPortArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecTcpRouteDestinationPortPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecTcpRouteDestinationPortPtrOutput() VirtualServiceSpecTcpRouteDestinationPortPtrOutput
	ToVirtualServiceSpecTcpRouteDestinationPortPtrOutputWithContext(context.Context) VirtualServiceSpecTcpRouteDestinationPortPtrOutput
}

type virtualServiceSpecTcpRouteDestinationPortPtrType VirtualServiceSpecTcpRouteDestinationPortArgs

func VirtualServiceSpecTcpRouteDestinationPortPtr(v *VirtualServiceSpecTcpRouteDestinationPortArgs) VirtualServiceSpecTcpRouteDestinationPortPtrInput {
	return (*virtualServiceSpecTcpRouteDestinationPortPtrType)(v)
}

func (*virtualServiceSpecTcpRouteDestinationPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecTcpRouteDestinationPort)(nil)).Elem()
}

func (i *virtualServiceSpecTcpRouteDestinationPortPtrType) ToVirtualServiceSpecTcpRouteDestinationPortPtrOutput() VirtualServiceSpecTcpRouteDestinationPortPtrOutput {
	return i.ToVirtualServiceSpecTcpRouteDestinationPortPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecTcpRouteDestinationPortPtrType) ToVirtualServiceSpecTcpRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTcpRouteDestinationPortPtrOutput)
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecTcpRouteDestinationPortOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTcpRouteDestinationPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTcpRouteDestinationPort)(nil)).Elem()
}

func (o VirtualServiceSpecTcpRouteDestinationPortOutput) ToVirtualServiceSpecTcpRouteDestinationPortOutput() VirtualServiceSpecTcpRouteDestinationPortOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteDestinationPortOutput) ToVirtualServiceSpecTcpRouteDestinationPortOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationPortOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteDestinationPortOutput) ToVirtualServiceSpecTcpRouteDestinationPortPtrOutput() VirtualServiceSpecTcpRouteDestinationPortPtrOutput {
	return o.ToVirtualServiceSpecTcpRouteDestinationPortPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecTcpRouteDestinationPortOutput) ToVirtualServiceSpecTcpRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationPortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecTcpRouteDestinationPort) *VirtualServiceSpecTcpRouteDestinationPort {
		return &v
	}).(VirtualServiceSpecTcpRouteDestinationPortPtrOutput)
}

func (o VirtualServiceSpecTcpRouteDestinationPortOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTcpRouteDestinationPort) *int { return v.Number }).(pulumi.IntPtrOutput)
}

type VirtualServiceSpecTcpRouteDestinationPortPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTcpRouteDestinationPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecTcpRouteDestinationPort)(nil)).Elem()
}

func (o VirtualServiceSpecTcpRouteDestinationPortPtrOutput) ToVirtualServiceSpecTcpRouteDestinationPortPtrOutput() VirtualServiceSpecTcpRouteDestinationPortPtrOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteDestinationPortPtrOutput) ToVirtualServiceSpecTcpRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTcpRouteDestinationPortPtrOutput {
	return o
}

func (o VirtualServiceSpecTcpRouteDestinationPortPtrOutput) Elem() VirtualServiceSpecTcpRouteDestinationPortOutput {
	return o.ApplyT(func(v *VirtualServiceSpecTcpRouteDestinationPort) VirtualServiceSpecTcpRouteDestinationPort {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecTcpRouteDestinationPort
		return ret
	}).(VirtualServiceSpecTcpRouteDestinationPortOutput)
}

func (o VirtualServiceSpecTcpRouteDestinationPortPtrOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecTcpRouteDestinationPort) *int {
		if v == nil {
			return nil
		}
		return v.Number
	}).(pulumi.IntPtrOutput)
}

type VirtualServiceSpecTls struct {
	// Match conditions to be satisfied for the rule to be activated.
	Match []VirtualServiceSpecTlsMatch `pulumi:"match"`
	// The destination to which the connection should be forwarded to.
	Route []VirtualServiceSpecTlsRoute `pulumi:"route"`
}

// VirtualServiceSpecTlsInput is an input type that accepts VirtualServiceSpecTlsArgs and VirtualServiceSpecTlsOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTlsInput` via:
//
//	VirtualServiceSpecTlsArgs{...}
type VirtualServiceSpecTlsInput interface {
	pulumi.Input

	ToVirtualServiceSpecTlsOutput() VirtualServiceSpecTlsOutput
	ToVirtualServiceSpecTlsOutputWithContext(context.Context) VirtualServiceSpecTlsOutput
}

type VirtualServiceSpecTlsArgs struct {
	// Match conditions to be satisfied for the rule to be activated.
	Match VirtualServiceSpecTlsMatchArrayInput `pulumi:"match"`
	// The destination to which the connection should be forwarded to.
	Route VirtualServiceSpecTlsRouteArrayInput `pulumi:"route"`
}

func (VirtualServiceSpecTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTls)(nil)).Elem()
}

func (i VirtualServiceSpecTlsArgs) ToVirtualServiceSpecTlsOutput() VirtualServiceSpecTlsOutput {
	return i.ToVirtualServiceSpecTlsOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTlsArgs) ToVirtualServiceSpecTlsOutputWithContext(ctx context.Context) VirtualServiceSpecTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsOutput)
}

// VirtualServiceSpecTlsArrayInput is an input type that accepts VirtualServiceSpecTlsArray and VirtualServiceSpecTlsArrayOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTlsArrayInput` via:
//
//	VirtualServiceSpecTlsArray{ VirtualServiceSpecTlsArgs{...} }
type VirtualServiceSpecTlsArrayInput interface {
	pulumi.Input

	ToVirtualServiceSpecTlsArrayOutput() VirtualServiceSpecTlsArrayOutput
	ToVirtualServiceSpecTlsArrayOutputWithContext(context.Context) VirtualServiceSpecTlsArrayOutput
}

type VirtualServiceSpecTlsArray []VirtualServiceSpecTlsInput

func (VirtualServiceSpecTlsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTls)(nil)).Elem()
}

func (i VirtualServiceSpecTlsArray) ToVirtualServiceSpecTlsArrayOutput() VirtualServiceSpecTlsArrayOutput {
	return i.ToVirtualServiceSpecTlsArrayOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTlsArray) ToVirtualServiceSpecTlsArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTlsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsArrayOutput)
}

type VirtualServiceSpecTlsOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTls)(nil)).Elem()
}

func (o VirtualServiceSpecTlsOutput) ToVirtualServiceSpecTlsOutput() VirtualServiceSpecTlsOutput {
	return o
}

func (o VirtualServiceSpecTlsOutput) ToVirtualServiceSpecTlsOutputWithContext(ctx context.Context) VirtualServiceSpecTlsOutput {
	return o
}

// Match conditions to be satisfied for the rule to be activated.
func (o VirtualServiceSpecTlsOutput) Match() VirtualServiceSpecTlsMatchArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecTls) []VirtualServiceSpecTlsMatch { return v.Match }).(VirtualServiceSpecTlsMatchArrayOutput)
}

// The destination to which the connection should be forwarded to.
func (o VirtualServiceSpecTlsOutput) Route() VirtualServiceSpecTlsRouteArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecTls) []VirtualServiceSpecTlsRoute { return v.Route }).(VirtualServiceSpecTlsRouteArrayOutput)
}

type VirtualServiceSpecTlsArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTlsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTls)(nil)).Elem()
}

func (o VirtualServiceSpecTlsArrayOutput) ToVirtualServiceSpecTlsArrayOutput() VirtualServiceSpecTlsArrayOutput {
	return o
}

func (o VirtualServiceSpecTlsArrayOutput) ToVirtualServiceSpecTlsArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTlsArrayOutput {
	return o
}

func (o VirtualServiceSpecTlsArrayOutput) Index(i pulumi.IntInput) VirtualServiceSpecTlsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualServiceSpecTls {
		return vs[0].([]VirtualServiceSpecTls)[vs[1].(int)]
	}).(VirtualServiceSpecTlsOutput)
}

type VirtualServiceSpecTlsMatch struct {
	// IPv4 or IPv6 ip addresses of destination with optional subnet.
	DestinationSubnets []string `pulumi:"destinationSubnets"`
	// Names of gateways where the rule should be applied.
	Gateways []string `pulumi:"gateways"`
	// Specifies the port on the host that is being addressed.
	Port *int `pulumi:"port"`
	// SNI (server name indicator) to match on.
	SniHosts []string `pulumi:"sniHosts"`
	// One or more labels that constrain the applicability of a rule to workloads with the given labels.
	SourceLabels map[string]string `pulumi:"sourceLabels"`
	// Source namespace constraining the applicability of a rule to workloads in that namespace.
	SourceNamespace *string `pulumi:"sourceNamespace"`
}

// VirtualServiceSpecTlsMatchInput is an input type that accepts VirtualServiceSpecTlsMatchArgs and VirtualServiceSpecTlsMatchOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTlsMatchInput` via:
//
//	VirtualServiceSpecTlsMatchArgs{...}
type VirtualServiceSpecTlsMatchInput interface {
	pulumi.Input

	ToVirtualServiceSpecTlsMatchOutput() VirtualServiceSpecTlsMatchOutput
	ToVirtualServiceSpecTlsMatchOutputWithContext(context.Context) VirtualServiceSpecTlsMatchOutput
}

type VirtualServiceSpecTlsMatchArgs struct {
	// IPv4 or IPv6 ip addresses of destination with optional subnet.
	DestinationSubnets pulumi.StringArrayInput `pulumi:"destinationSubnets"`
	// Names of gateways where the rule should be applied.
	Gateways pulumi.StringArrayInput `pulumi:"gateways"`
	// Specifies the port on the host that is being addressed.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// SNI (server name indicator) to match on.
	SniHosts pulumi.StringArrayInput `pulumi:"sniHosts"`
	// One or more labels that constrain the applicability of a rule to workloads with the given labels.
	SourceLabels pulumi.StringMapInput `pulumi:"sourceLabels"`
	// Source namespace constraining the applicability of a rule to workloads in that namespace.
	SourceNamespace pulumi.StringPtrInput `pulumi:"sourceNamespace"`
}

func (VirtualServiceSpecTlsMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTlsMatch)(nil)).Elem()
}

func (i VirtualServiceSpecTlsMatchArgs) ToVirtualServiceSpecTlsMatchOutput() VirtualServiceSpecTlsMatchOutput {
	return i.ToVirtualServiceSpecTlsMatchOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTlsMatchArgs) ToVirtualServiceSpecTlsMatchOutputWithContext(ctx context.Context) VirtualServiceSpecTlsMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsMatchOutput)
}

// VirtualServiceSpecTlsMatchArrayInput is an input type that accepts VirtualServiceSpecTlsMatchArray and VirtualServiceSpecTlsMatchArrayOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTlsMatchArrayInput` via:
//
//	VirtualServiceSpecTlsMatchArray{ VirtualServiceSpecTlsMatchArgs{...} }
type VirtualServiceSpecTlsMatchArrayInput interface {
	pulumi.Input

	ToVirtualServiceSpecTlsMatchArrayOutput() VirtualServiceSpecTlsMatchArrayOutput
	ToVirtualServiceSpecTlsMatchArrayOutputWithContext(context.Context) VirtualServiceSpecTlsMatchArrayOutput
}

type VirtualServiceSpecTlsMatchArray []VirtualServiceSpecTlsMatchInput

func (VirtualServiceSpecTlsMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTlsMatch)(nil)).Elem()
}

func (i VirtualServiceSpecTlsMatchArray) ToVirtualServiceSpecTlsMatchArrayOutput() VirtualServiceSpecTlsMatchArrayOutput {
	return i.ToVirtualServiceSpecTlsMatchArrayOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTlsMatchArray) ToVirtualServiceSpecTlsMatchArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTlsMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsMatchArrayOutput)
}

type VirtualServiceSpecTlsMatchOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTlsMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTlsMatch)(nil)).Elem()
}

func (o VirtualServiceSpecTlsMatchOutput) ToVirtualServiceSpecTlsMatchOutput() VirtualServiceSpecTlsMatchOutput {
	return o
}

func (o VirtualServiceSpecTlsMatchOutput) ToVirtualServiceSpecTlsMatchOutputWithContext(ctx context.Context) VirtualServiceSpecTlsMatchOutput {
	return o
}

// IPv4 or IPv6 ip addresses of destination with optional subnet.
func (o VirtualServiceSpecTlsMatchOutput) DestinationSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsMatch) []string { return v.DestinationSubnets }).(pulumi.StringArrayOutput)
}

// Names of gateways where the rule should be applied.
func (o VirtualServiceSpecTlsMatchOutput) Gateways() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsMatch) []string { return v.Gateways }).(pulumi.StringArrayOutput)
}

// Specifies the port on the host that is being addressed.
func (o VirtualServiceSpecTlsMatchOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsMatch) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// SNI (server name indicator) to match on.
func (o VirtualServiceSpecTlsMatchOutput) SniHosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsMatch) []string { return v.SniHosts }).(pulumi.StringArrayOutput)
}

// One or more labels that constrain the applicability of a rule to workloads with the given labels.
func (o VirtualServiceSpecTlsMatchOutput) SourceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsMatch) map[string]string { return v.SourceLabels }).(pulumi.StringMapOutput)
}

// Source namespace constraining the applicability of a rule to workloads in that namespace.
func (o VirtualServiceSpecTlsMatchOutput) SourceNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsMatch) *string { return v.SourceNamespace }).(pulumi.StringPtrOutput)
}

type VirtualServiceSpecTlsMatchArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTlsMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTlsMatch)(nil)).Elem()
}

func (o VirtualServiceSpecTlsMatchArrayOutput) ToVirtualServiceSpecTlsMatchArrayOutput() VirtualServiceSpecTlsMatchArrayOutput {
	return o
}

func (o VirtualServiceSpecTlsMatchArrayOutput) ToVirtualServiceSpecTlsMatchArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTlsMatchArrayOutput {
	return o
}

func (o VirtualServiceSpecTlsMatchArrayOutput) Index(i pulumi.IntInput) VirtualServiceSpecTlsMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualServiceSpecTlsMatch {
		return vs[0].([]VirtualServiceSpecTlsMatch)[vs[1].(int)]
	}).(VirtualServiceSpecTlsMatchOutput)
}

// One or more labels that constrain the applicability of a rule to workloads with the given labels.
type VirtualServiceSpecTlsMatchSourceLabels struct {
}

type VirtualServiceSpecTlsRoute struct {
	// Destination uniquely identifies the instances of a service to which the request/connection should be forwarded to.
	Destination VirtualServiceSpecTlsRouteDestination `pulumi:"destination"`
	// Weight specifies the relative proportion of traffic to be forwarded to the destination.
	Weight *int `pulumi:"weight"`
}

// VirtualServiceSpecTlsRouteInput is an input type that accepts VirtualServiceSpecTlsRouteArgs and VirtualServiceSpecTlsRouteOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTlsRouteInput` via:
//
//	VirtualServiceSpecTlsRouteArgs{...}
type VirtualServiceSpecTlsRouteInput interface {
	pulumi.Input

	ToVirtualServiceSpecTlsRouteOutput() VirtualServiceSpecTlsRouteOutput
	ToVirtualServiceSpecTlsRouteOutputWithContext(context.Context) VirtualServiceSpecTlsRouteOutput
}

type VirtualServiceSpecTlsRouteArgs struct {
	// Destination uniquely identifies the instances of a service to which the request/connection should be forwarded to.
	Destination VirtualServiceSpecTlsRouteDestinationInput `pulumi:"destination"`
	// Weight specifies the relative proportion of traffic to be forwarded to the destination.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (VirtualServiceSpecTlsRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTlsRoute)(nil)).Elem()
}

func (i VirtualServiceSpecTlsRouteArgs) ToVirtualServiceSpecTlsRouteOutput() VirtualServiceSpecTlsRouteOutput {
	return i.ToVirtualServiceSpecTlsRouteOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTlsRouteArgs) ToVirtualServiceSpecTlsRouteOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsRouteOutput)
}

// VirtualServiceSpecTlsRouteArrayInput is an input type that accepts VirtualServiceSpecTlsRouteArray and VirtualServiceSpecTlsRouteArrayOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTlsRouteArrayInput` via:
//
//	VirtualServiceSpecTlsRouteArray{ VirtualServiceSpecTlsRouteArgs{...} }
type VirtualServiceSpecTlsRouteArrayInput interface {
	pulumi.Input

	ToVirtualServiceSpecTlsRouteArrayOutput() VirtualServiceSpecTlsRouteArrayOutput
	ToVirtualServiceSpecTlsRouteArrayOutputWithContext(context.Context) VirtualServiceSpecTlsRouteArrayOutput
}

type VirtualServiceSpecTlsRouteArray []VirtualServiceSpecTlsRouteInput

func (VirtualServiceSpecTlsRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTlsRoute)(nil)).Elem()
}

func (i VirtualServiceSpecTlsRouteArray) ToVirtualServiceSpecTlsRouteArrayOutput() VirtualServiceSpecTlsRouteArrayOutput {
	return i.ToVirtualServiceSpecTlsRouteArrayOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTlsRouteArray) ToVirtualServiceSpecTlsRouteArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsRouteArrayOutput)
}

type VirtualServiceSpecTlsRouteOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTlsRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTlsRoute)(nil)).Elem()
}

func (o VirtualServiceSpecTlsRouteOutput) ToVirtualServiceSpecTlsRouteOutput() VirtualServiceSpecTlsRouteOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteOutput) ToVirtualServiceSpecTlsRouteOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteOutput {
	return o
}

// Destination uniquely identifies the instances of a service to which the request/connection should be forwarded to.
func (o VirtualServiceSpecTlsRouteOutput) Destination() VirtualServiceSpecTlsRouteDestinationOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsRoute) VirtualServiceSpecTlsRouteDestination { return v.Destination }).(VirtualServiceSpecTlsRouteDestinationOutput)
}

// Weight specifies the relative proportion of traffic to be forwarded to the destination.
func (o VirtualServiceSpecTlsRouteOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsRoute) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type VirtualServiceSpecTlsRouteArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTlsRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualServiceSpecTlsRoute)(nil)).Elem()
}

func (o VirtualServiceSpecTlsRouteArrayOutput) ToVirtualServiceSpecTlsRouteArrayOutput() VirtualServiceSpecTlsRouteArrayOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteArrayOutput) ToVirtualServiceSpecTlsRouteArrayOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteArrayOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteArrayOutput) Index(i pulumi.IntInput) VirtualServiceSpecTlsRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualServiceSpecTlsRoute {
		return vs[0].([]VirtualServiceSpecTlsRoute)[vs[1].(int)]
	}).(VirtualServiceSpecTlsRouteOutput)
}

// Destination uniquely identifies the instances of a service to which the request/connection should be forwarded to.
type VirtualServiceSpecTlsRouteDestination struct {
	// The name of a service from the service registry.
	Host string `pulumi:"host"`
	// Specifies the port on the host that is being addressed.
	Port *VirtualServiceSpecTlsRouteDestinationPort `pulumi:"port"`
	// The name of a subset within the service.
	Subset *string `pulumi:"subset"`
}

// VirtualServiceSpecTlsRouteDestinationInput is an input type that accepts VirtualServiceSpecTlsRouteDestinationArgs and VirtualServiceSpecTlsRouteDestinationOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTlsRouteDestinationInput` via:
//
//	VirtualServiceSpecTlsRouteDestinationArgs{...}
type VirtualServiceSpecTlsRouteDestinationInput interface {
	pulumi.Input

	ToVirtualServiceSpecTlsRouteDestinationOutput() VirtualServiceSpecTlsRouteDestinationOutput
	ToVirtualServiceSpecTlsRouteDestinationOutputWithContext(context.Context) VirtualServiceSpecTlsRouteDestinationOutput
}

// Destination uniquely identifies the instances of a service to which the request/connection should be forwarded to.
type VirtualServiceSpecTlsRouteDestinationArgs struct {
	// The name of a service from the service registry.
	Host pulumi.StringInput `pulumi:"host"`
	// Specifies the port on the host that is being addressed.
	Port VirtualServiceSpecTlsRouteDestinationPortPtrInput `pulumi:"port"`
	// The name of a subset within the service.
	Subset pulumi.StringPtrInput `pulumi:"subset"`
}

func (VirtualServiceSpecTlsRouteDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTlsRouteDestination)(nil)).Elem()
}

func (i VirtualServiceSpecTlsRouteDestinationArgs) ToVirtualServiceSpecTlsRouteDestinationOutput() VirtualServiceSpecTlsRouteDestinationOutput {
	return i.ToVirtualServiceSpecTlsRouteDestinationOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTlsRouteDestinationArgs) ToVirtualServiceSpecTlsRouteDestinationOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsRouteDestinationOutput)
}

// Destination uniquely identifies the instances of a service to which the request/connection should be forwarded to.
type VirtualServiceSpecTlsRouteDestinationOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTlsRouteDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTlsRouteDestination)(nil)).Elem()
}

func (o VirtualServiceSpecTlsRouteDestinationOutput) ToVirtualServiceSpecTlsRouteDestinationOutput() VirtualServiceSpecTlsRouteDestinationOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteDestinationOutput) ToVirtualServiceSpecTlsRouteDestinationOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationOutput {
	return o
}

// The name of a service from the service registry.
func (o VirtualServiceSpecTlsRouteDestinationOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsRouteDestination) string { return v.Host }).(pulumi.StringOutput)
}

// Specifies the port on the host that is being addressed.
func (o VirtualServiceSpecTlsRouteDestinationOutput) Port() VirtualServiceSpecTlsRouteDestinationPortPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsRouteDestination) *VirtualServiceSpecTlsRouteDestinationPort {
		return v.Port
	}).(VirtualServiceSpecTlsRouteDestinationPortPtrOutput)
}

// The name of a subset within the service.
func (o VirtualServiceSpecTlsRouteDestinationOutput) Subset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsRouteDestination) *string { return v.Subset }).(pulumi.StringPtrOutput)
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecTlsRouteDestinationPort struct {
	Number *int `pulumi:"number"`
}

// VirtualServiceSpecTlsRouteDestinationPortInput is an input type that accepts VirtualServiceSpecTlsRouteDestinationPortArgs and VirtualServiceSpecTlsRouteDestinationPortOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTlsRouteDestinationPortInput` via:
//
//	VirtualServiceSpecTlsRouteDestinationPortArgs{...}
type VirtualServiceSpecTlsRouteDestinationPortInput interface {
	pulumi.Input

	ToVirtualServiceSpecTlsRouteDestinationPortOutput() VirtualServiceSpecTlsRouteDestinationPortOutput
	ToVirtualServiceSpecTlsRouteDestinationPortOutputWithContext(context.Context) VirtualServiceSpecTlsRouteDestinationPortOutput
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecTlsRouteDestinationPortArgs struct {
	Number pulumi.IntPtrInput `pulumi:"number"`
}

func (VirtualServiceSpecTlsRouteDestinationPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTlsRouteDestinationPort)(nil)).Elem()
}

func (i VirtualServiceSpecTlsRouteDestinationPortArgs) ToVirtualServiceSpecTlsRouteDestinationPortOutput() VirtualServiceSpecTlsRouteDestinationPortOutput {
	return i.ToVirtualServiceSpecTlsRouteDestinationPortOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTlsRouteDestinationPortArgs) ToVirtualServiceSpecTlsRouteDestinationPortOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsRouteDestinationPortOutput)
}

func (i VirtualServiceSpecTlsRouteDestinationPortArgs) ToVirtualServiceSpecTlsRouteDestinationPortPtrOutput() VirtualServiceSpecTlsRouteDestinationPortPtrOutput {
	return i.ToVirtualServiceSpecTlsRouteDestinationPortPtrOutputWithContext(context.Background())
}

func (i VirtualServiceSpecTlsRouteDestinationPortArgs) ToVirtualServiceSpecTlsRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsRouteDestinationPortOutput).ToVirtualServiceSpecTlsRouteDestinationPortPtrOutputWithContext(ctx)
}

// VirtualServiceSpecTlsRouteDestinationPortPtrInput is an input type that accepts VirtualServiceSpecTlsRouteDestinationPortArgs, VirtualServiceSpecTlsRouteDestinationPortPtr and VirtualServiceSpecTlsRouteDestinationPortPtrOutput values.
// You can construct a concrete instance of `VirtualServiceSpecTlsRouteDestinationPortPtrInput` via:
//
//	        VirtualServiceSpecTlsRouteDestinationPortArgs{...}
//
//	or:
//
//	        nil
type VirtualServiceSpecTlsRouteDestinationPortPtrInput interface {
	pulumi.Input

	ToVirtualServiceSpecTlsRouteDestinationPortPtrOutput() VirtualServiceSpecTlsRouteDestinationPortPtrOutput
	ToVirtualServiceSpecTlsRouteDestinationPortPtrOutputWithContext(context.Context) VirtualServiceSpecTlsRouteDestinationPortPtrOutput
}

type virtualServiceSpecTlsRouteDestinationPortPtrType VirtualServiceSpecTlsRouteDestinationPortArgs

func VirtualServiceSpecTlsRouteDestinationPortPtr(v *VirtualServiceSpecTlsRouteDestinationPortArgs) VirtualServiceSpecTlsRouteDestinationPortPtrInput {
	return (*virtualServiceSpecTlsRouteDestinationPortPtrType)(v)
}

func (*virtualServiceSpecTlsRouteDestinationPortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecTlsRouteDestinationPort)(nil)).Elem()
}

func (i *virtualServiceSpecTlsRouteDestinationPortPtrType) ToVirtualServiceSpecTlsRouteDestinationPortPtrOutput() VirtualServiceSpecTlsRouteDestinationPortPtrOutput {
	return i.ToVirtualServiceSpecTlsRouteDestinationPortPtrOutputWithContext(context.Background())
}

func (i *virtualServiceSpecTlsRouteDestinationPortPtrType) ToVirtualServiceSpecTlsRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationPortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceSpecTlsRouteDestinationPortPtrOutput)
}

// Specifies the port on the host that is being addressed.
type VirtualServiceSpecTlsRouteDestinationPortOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTlsRouteDestinationPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualServiceSpecTlsRouteDestinationPort)(nil)).Elem()
}

func (o VirtualServiceSpecTlsRouteDestinationPortOutput) ToVirtualServiceSpecTlsRouteDestinationPortOutput() VirtualServiceSpecTlsRouteDestinationPortOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteDestinationPortOutput) ToVirtualServiceSpecTlsRouteDestinationPortOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationPortOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteDestinationPortOutput) ToVirtualServiceSpecTlsRouteDestinationPortPtrOutput() VirtualServiceSpecTlsRouteDestinationPortPtrOutput {
	return o.ToVirtualServiceSpecTlsRouteDestinationPortPtrOutputWithContext(context.Background())
}

func (o VirtualServiceSpecTlsRouteDestinationPortOutput) ToVirtualServiceSpecTlsRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationPortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualServiceSpecTlsRouteDestinationPort) *VirtualServiceSpecTlsRouteDestinationPort {
		return &v
	}).(VirtualServiceSpecTlsRouteDestinationPortPtrOutput)
}

func (o VirtualServiceSpecTlsRouteDestinationPortOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualServiceSpecTlsRouteDestinationPort) *int { return v.Number }).(pulumi.IntPtrOutput)
}

type VirtualServiceSpecTlsRouteDestinationPortPtrOutput struct{ *pulumi.OutputState }

func (VirtualServiceSpecTlsRouteDestinationPortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceSpecTlsRouteDestinationPort)(nil)).Elem()
}

func (o VirtualServiceSpecTlsRouteDestinationPortPtrOutput) ToVirtualServiceSpecTlsRouteDestinationPortPtrOutput() VirtualServiceSpecTlsRouteDestinationPortPtrOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteDestinationPortPtrOutput) ToVirtualServiceSpecTlsRouteDestinationPortPtrOutputWithContext(ctx context.Context) VirtualServiceSpecTlsRouteDestinationPortPtrOutput {
	return o
}

func (o VirtualServiceSpecTlsRouteDestinationPortPtrOutput) Elem() VirtualServiceSpecTlsRouteDestinationPortOutput {
	return o.ApplyT(func(v *VirtualServiceSpecTlsRouteDestinationPort) VirtualServiceSpecTlsRouteDestinationPort {
		if v != nil {
			return *v
		}
		var ret VirtualServiceSpecTlsRouteDestinationPort
		return ret
	}).(VirtualServiceSpecTlsRouteDestinationPortOutput)
}

func (o VirtualServiceSpecTlsRouteDestinationPortPtrOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualServiceSpecTlsRouteDestinationPort) *int {
		if v == nil {
			return nil
		}
		return v.Number
	}).(pulumi.IntPtrOutput)
}

type WorkloadEntryType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Configuration affecting VMs onboarded into the mesh. See more details at: https://istio.io/docs/reference/config/networking/workload-entry.html
	Spec   *WorkloadEntrySpec     `pulumi:"spec"`
	Status map[string]interface{} `pulumi:"status"`
}

// Configuration affecting VMs onboarded into the mesh. See more details at: https://istio.io/docs/reference/config/networking/workload-entry.html
type WorkloadEntrySpec struct {
	// Address associated with the network endpoint without the port.
	Address *string `pulumi:"address"`
	// One or more labels associated with the endpoint.
	Labels map[string]string `pulumi:"labels"`
	// The locality associated with the endpoint.
	Locality *string `pulumi:"locality"`
	// Network enables Istio to group endpoints resident in the same L3 domain/network.
	Network *string `pulumi:"network"`
	// Set of ports associated with the endpoint.
	Ports map[string]int `pulumi:"ports"`
	// The service account associated with the workload if a sidecar is present in the workload.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// The load balancing weight associated with the endpoint.
	Weight *int `pulumi:"weight"`
}

// WorkloadEntrySpecInput is an input type that accepts WorkloadEntrySpecArgs and WorkloadEntrySpecOutput values.
// You can construct a concrete instance of `WorkloadEntrySpecInput` via:
//
//	WorkloadEntrySpecArgs{...}
type WorkloadEntrySpecInput interface {
	pulumi.Input

	ToWorkloadEntrySpecOutput() WorkloadEntrySpecOutput
	ToWorkloadEntrySpecOutputWithContext(context.Context) WorkloadEntrySpecOutput
}

// Configuration affecting VMs onboarded into the mesh. See more details at: https://istio.io/docs/reference/config/networking/workload-entry.html
type WorkloadEntrySpecArgs struct {
	// Address associated with the network endpoint without the port.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// One or more labels associated with the endpoint.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The locality associated with the endpoint.
	Locality pulumi.StringPtrInput `pulumi:"locality"`
	// Network enables Istio to group endpoints resident in the same L3 domain/network.
	Network pulumi.StringPtrInput `pulumi:"network"`
	// Set of ports associated with the endpoint.
	Ports pulumi.IntMapInput `pulumi:"ports"`
	// The service account associated with the workload if a sidecar is present in the workload.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// The load balancing weight associated with the endpoint.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (WorkloadEntrySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadEntrySpec)(nil)).Elem()
}

func (i WorkloadEntrySpecArgs) ToWorkloadEntrySpecOutput() WorkloadEntrySpecOutput {
	return i.ToWorkloadEntrySpecOutputWithContext(context.Background())
}

func (i WorkloadEntrySpecArgs) ToWorkloadEntrySpecOutputWithContext(ctx context.Context) WorkloadEntrySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadEntrySpecOutput)
}

func (i WorkloadEntrySpecArgs) ToWorkloadEntrySpecPtrOutput() WorkloadEntrySpecPtrOutput {
	return i.ToWorkloadEntrySpecPtrOutputWithContext(context.Background())
}

func (i WorkloadEntrySpecArgs) ToWorkloadEntrySpecPtrOutputWithContext(ctx context.Context) WorkloadEntrySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadEntrySpecOutput).ToWorkloadEntrySpecPtrOutputWithContext(ctx)
}

// WorkloadEntrySpecPtrInput is an input type that accepts WorkloadEntrySpecArgs, WorkloadEntrySpecPtr and WorkloadEntrySpecPtrOutput values.
// You can construct a concrete instance of `WorkloadEntrySpecPtrInput` via:
//
//	        WorkloadEntrySpecArgs{...}
//
//	or:
//
//	        nil
type WorkloadEntrySpecPtrInput interface {
	pulumi.Input

	ToWorkloadEntrySpecPtrOutput() WorkloadEntrySpecPtrOutput
	ToWorkloadEntrySpecPtrOutputWithContext(context.Context) WorkloadEntrySpecPtrOutput
}

type workloadEntrySpecPtrType WorkloadEntrySpecArgs

func WorkloadEntrySpecPtr(v *WorkloadEntrySpecArgs) WorkloadEntrySpecPtrInput {
	return (*workloadEntrySpecPtrType)(v)
}

func (*workloadEntrySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadEntrySpec)(nil)).Elem()
}

func (i *workloadEntrySpecPtrType) ToWorkloadEntrySpecPtrOutput() WorkloadEntrySpecPtrOutput {
	return i.ToWorkloadEntrySpecPtrOutputWithContext(context.Background())
}

func (i *workloadEntrySpecPtrType) ToWorkloadEntrySpecPtrOutputWithContext(ctx context.Context) WorkloadEntrySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadEntrySpecPtrOutput)
}

// Configuration affecting VMs onboarded into the mesh. See more details at: https://istio.io/docs/reference/config/networking/workload-entry.html
type WorkloadEntrySpecOutput struct{ *pulumi.OutputState }

func (WorkloadEntrySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadEntrySpec)(nil)).Elem()
}

func (o WorkloadEntrySpecOutput) ToWorkloadEntrySpecOutput() WorkloadEntrySpecOutput {
	return o
}

func (o WorkloadEntrySpecOutput) ToWorkloadEntrySpecOutputWithContext(ctx context.Context) WorkloadEntrySpecOutput {
	return o
}

func (o WorkloadEntrySpecOutput) ToWorkloadEntrySpecPtrOutput() WorkloadEntrySpecPtrOutput {
	return o.ToWorkloadEntrySpecPtrOutputWithContext(context.Background())
}

func (o WorkloadEntrySpecOutput) ToWorkloadEntrySpecPtrOutputWithContext(ctx context.Context) WorkloadEntrySpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkloadEntrySpec) *WorkloadEntrySpec {
		return &v
	}).(WorkloadEntrySpecPtrOutput)
}

// Address associated with the network endpoint without the port.
func (o WorkloadEntrySpecOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkloadEntrySpec) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// One or more labels associated with the endpoint.
func (o WorkloadEntrySpecOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v WorkloadEntrySpec) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The locality associated with the endpoint.
func (o WorkloadEntrySpecOutput) Locality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkloadEntrySpec) *string { return v.Locality }).(pulumi.StringPtrOutput)
}

// Network enables Istio to group endpoints resident in the same L3 domain/network.
func (o WorkloadEntrySpecOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkloadEntrySpec) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// Set of ports associated with the endpoint.
func (o WorkloadEntrySpecOutput) Ports() pulumi.IntMapOutput {
	return o.ApplyT(func(v WorkloadEntrySpec) map[string]int { return v.Ports }).(pulumi.IntMapOutput)
}

// The service account associated with the workload if a sidecar is present in the workload.
func (o WorkloadEntrySpecOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkloadEntrySpec) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// The load balancing weight associated with the endpoint.
func (o WorkloadEntrySpecOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkloadEntrySpec) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type WorkloadEntrySpecPtrOutput struct{ *pulumi.OutputState }

func (WorkloadEntrySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadEntrySpec)(nil)).Elem()
}

func (o WorkloadEntrySpecPtrOutput) ToWorkloadEntrySpecPtrOutput() WorkloadEntrySpecPtrOutput {
	return o
}

func (o WorkloadEntrySpecPtrOutput) ToWorkloadEntrySpecPtrOutputWithContext(ctx context.Context) WorkloadEntrySpecPtrOutput {
	return o
}

func (o WorkloadEntrySpecPtrOutput) Elem() WorkloadEntrySpecOutput {
	return o.ApplyT(func(v *WorkloadEntrySpec) WorkloadEntrySpec {
		if v != nil {
			return *v
		}
		var ret WorkloadEntrySpec
		return ret
	}).(WorkloadEntrySpecOutput)
}

// Address associated with the network endpoint without the port.
func (o WorkloadEntrySpecPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkloadEntrySpec) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// One or more labels associated with the endpoint.
func (o WorkloadEntrySpecPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WorkloadEntrySpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// The locality associated with the endpoint.
func (o WorkloadEntrySpecPtrOutput) Locality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkloadEntrySpec) *string {
		if v == nil {
			return nil
		}
		return v.Locality
	}).(pulumi.StringPtrOutput)
}

// Network enables Istio to group endpoints resident in the same L3 domain/network.
func (o WorkloadEntrySpecPtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkloadEntrySpec) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

// Set of ports associated with the endpoint.
func (o WorkloadEntrySpecPtrOutput) Ports() pulumi.IntMapOutput {
	return o.ApplyT(func(v *WorkloadEntrySpec) map[string]int {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(pulumi.IntMapOutput)
}

// The service account associated with the workload if a sidecar is present in the workload.
func (o WorkloadEntrySpecPtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkloadEntrySpec) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// The load balancing weight associated with the endpoint.
func (o WorkloadEntrySpecPtrOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkloadEntrySpec) *int {
		if v == nil {
			return nil
		}
		return v.Weight
	}).(pulumi.IntPtrOutput)
}

// One or more labels associated with the endpoint.
type WorkloadEntrySpecLabels struct {
}

// Set of ports associated with the endpoint.
type WorkloadEntrySpecPorts struct {
}

type WorkloadGroupType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// `WorkloadGroup` enables specifying the properties of a single workload for bootstrap and provides a template for `WorkloadEntry`, similar to how `Deployment` specifies properties of workloads via `Pod` templates.
	Spec   *WorkloadGroupSpec     `pulumi:"spec"`
	Status map[string]interface{} `pulumi:"status"`
}

// `WorkloadGroup` enables specifying the properties of a single workload for bootstrap and provides a template for `WorkloadEntry`, similar to how `Deployment` specifies properties of workloads via `Pod` templates.
type WorkloadGroupSpec struct {
	// Metadata that will be used for all corresponding `WorkloadEntries`.
	Metadata *WorkloadGroupSpecMetadata `pulumi:"metadata"`
	// `ReadinessProbe` describes the configuration the user must provide for healthchecking on their workload.
	Probe interface{} `pulumi:"probe"`
	// Template to be used for the generation of `WorkloadEntry` resources that belong to this `WorkloadGroup`.
	Template WorkloadGroupSpecTemplate `pulumi:"template"`
}

// WorkloadGroupSpecInput is an input type that accepts WorkloadGroupSpecArgs and WorkloadGroupSpecOutput values.
// You can construct a concrete instance of `WorkloadGroupSpecInput` via:
//
//	WorkloadGroupSpecArgs{...}
type WorkloadGroupSpecInput interface {
	pulumi.Input

	ToWorkloadGroupSpecOutput() WorkloadGroupSpecOutput
	ToWorkloadGroupSpecOutputWithContext(context.Context) WorkloadGroupSpecOutput
}

// `WorkloadGroup` enables specifying the properties of a single workload for bootstrap and provides a template for `WorkloadEntry`, similar to how `Deployment` specifies properties of workloads via `Pod` templates.
type WorkloadGroupSpecArgs struct {
	// Metadata that will be used for all corresponding `WorkloadEntries`.
	Metadata WorkloadGroupSpecMetadataPtrInput `pulumi:"metadata"`
	// `ReadinessProbe` describes the configuration the user must provide for healthchecking on their workload.
	Probe pulumi.Input `pulumi:"probe"`
	// Template to be used for the generation of `WorkloadEntry` resources that belong to this `WorkloadGroup`.
	Template WorkloadGroupSpecTemplateInput `pulumi:"template"`
}

func (WorkloadGroupSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadGroupSpec)(nil)).Elem()
}

func (i WorkloadGroupSpecArgs) ToWorkloadGroupSpecOutput() WorkloadGroupSpecOutput {
	return i.ToWorkloadGroupSpecOutputWithContext(context.Background())
}

func (i WorkloadGroupSpecArgs) ToWorkloadGroupSpecOutputWithContext(ctx context.Context) WorkloadGroupSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadGroupSpecOutput)
}

func (i WorkloadGroupSpecArgs) ToWorkloadGroupSpecPtrOutput() WorkloadGroupSpecPtrOutput {
	return i.ToWorkloadGroupSpecPtrOutputWithContext(context.Background())
}

func (i WorkloadGroupSpecArgs) ToWorkloadGroupSpecPtrOutputWithContext(ctx context.Context) WorkloadGroupSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadGroupSpecOutput).ToWorkloadGroupSpecPtrOutputWithContext(ctx)
}

// WorkloadGroupSpecPtrInput is an input type that accepts WorkloadGroupSpecArgs, WorkloadGroupSpecPtr and WorkloadGroupSpecPtrOutput values.
// You can construct a concrete instance of `WorkloadGroupSpecPtrInput` via:
//
//	        WorkloadGroupSpecArgs{...}
//
//	or:
//
//	        nil
type WorkloadGroupSpecPtrInput interface {
	pulumi.Input

	ToWorkloadGroupSpecPtrOutput() WorkloadGroupSpecPtrOutput
	ToWorkloadGroupSpecPtrOutputWithContext(context.Context) WorkloadGroupSpecPtrOutput
}

type workloadGroupSpecPtrType WorkloadGroupSpecArgs

func WorkloadGroupSpecPtr(v *WorkloadGroupSpecArgs) WorkloadGroupSpecPtrInput {
	return (*workloadGroupSpecPtrType)(v)
}

func (*workloadGroupSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadGroupSpec)(nil)).Elem()
}

func (i *workloadGroupSpecPtrType) ToWorkloadGroupSpecPtrOutput() WorkloadGroupSpecPtrOutput {
	return i.ToWorkloadGroupSpecPtrOutputWithContext(context.Background())
}

func (i *workloadGroupSpecPtrType) ToWorkloadGroupSpecPtrOutputWithContext(ctx context.Context) WorkloadGroupSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadGroupSpecPtrOutput)
}

// `WorkloadGroup` enables specifying the properties of a single workload for bootstrap and provides a template for `WorkloadEntry`, similar to how `Deployment` specifies properties of workloads via `Pod` templates.
type WorkloadGroupSpecOutput struct{ *pulumi.OutputState }

func (WorkloadGroupSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadGroupSpec)(nil)).Elem()
}

func (o WorkloadGroupSpecOutput) ToWorkloadGroupSpecOutput() WorkloadGroupSpecOutput {
	return o
}

func (o WorkloadGroupSpecOutput) ToWorkloadGroupSpecOutputWithContext(ctx context.Context) WorkloadGroupSpecOutput {
	return o
}

func (o WorkloadGroupSpecOutput) ToWorkloadGroupSpecPtrOutput() WorkloadGroupSpecPtrOutput {
	return o.ToWorkloadGroupSpecPtrOutputWithContext(context.Background())
}

func (o WorkloadGroupSpecOutput) ToWorkloadGroupSpecPtrOutputWithContext(ctx context.Context) WorkloadGroupSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkloadGroupSpec) *WorkloadGroupSpec {
		return &v
	}).(WorkloadGroupSpecPtrOutput)
}

// Metadata that will be used for all corresponding `WorkloadEntries`.
func (o WorkloadGroupSpecOutput) Metadata() WorkloadGroupSpecMetadataPtrOutput {
	return o.ApplyT(func(v WorkloadGroupSpec) *WorkloadGroupSpecMetadata { return v.Metadata }).(WorkloadGroupSpecMetadataPtrOutput)
}

// `ReadinessProbe` describes the configuration the user must provide for healthchecking on their workload.
func (o WorkloadGroupSpecOutput) Probe() pulumi.AnyOutput {
	return o.ApplyT(func(v WorkloadGroupSpec) interface{} { return v.Probe }).(pulumi.AnyOutput)
}

// Template to be used for the generation of `WorkloadEntry` resources that belong to this `WorkloadGroup`.
func (o WorkloadGroupSpecOutput) Template() WorkloadGroupSpecTemplateOutput {
	return o.ApplyT(func(v WorkloadGroupSpec) WorkloadGroupSpecTemplate { return v.Template }).(WorkloadGroupSpecTemplateOutput)
}

type WorkloadGroupSpecPtrOutput struct{ *pulumi.OutputState }

func (WorkloadGroupSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadGroupSpec)(nil)).Elem()
}

func (o WorkloadGroupSpecPtrOutput) ToWorkloadGroupSpecPtrOutput() WorkloadGroupSpecPtrOutput {
	return o
}

func (o WorkloadGroupSpecPtrOutput) ToWorkloadGroupSpecPtrOutputWithContext(ctx context.Context) WorkloadGroupSpecPtrOutput {
	return o
}

func (o WorkloadGroupSpecPtrOutput) Elem() WorkloadGroupSpecOutput {
	return o.ApplyT(func(v *WorkloadGroupSpec) WorkloadGroupSpec {
		if v != nil {
			return *v
		}
		var ret WorkloadGroupSpec
		return ret
	}).(WorkloadGroupSpecOutput)
}

// Metadata that will be used for all corresponding `WorkloadEntries`.
func (o WorkloadGroupSpecPtrOutput) Metadata() WorkloadGroupSpecMetadataPtrOutput {
	return o.ApplyT(func(v *WorkloadGroupSpec) *WorkloadGroupSpecMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(WorkloadGroupSpecMetadataPtrOutput)
}

// `ReadinessProbe` describes the configuration the user must provide for healthchecking on their workload.
func (o WorkloadGroupSpecPtrOutput) Probe() pulumi.AnyOutput {
	return o.ApplyT(func(v *WorkloadGroupSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.Probe
	}).(pulumi.AnyOutput)
}

// Template to be used for the generation of `WorkloadEntry` resources that belong to this `WorkloadGroup`.
func (o WorkloadGroupSpecPtrOutput) Template() WorkloadGroupSpecTemplatePtrOutput {
	return o.ApplyT(func(v *WorkloadGroupSpec) *WorkloadGroupSpecTemplate {
		if v == nil {
			return nil
		}
		return &v.Template
	}).(WorkloadGroupSpecTemplatePtrOutput)
}

// Metadata that will be used for all corresponding `WorkloadEntries`.
type WorkloadGroupSpecMetadata struct {
	Annotations map[string]string `pulumi:"annotations"`
	Labels      map[string]string `pulumi:"labels"`
}

// WorkloadGroupSpecMetadataInput is an input type that accepts WorkloadGroupSpecMetadataArgs and WorkloadGroupSpecMetadataOutput values.
// You can construct a concrete instance of `WorkloadGroupSpecMetadataInput` via:
//
//	WorkloadGroupSpecMetadataArgs{...}
type WorkloadGroupSpecMetadataInput interface {
	pulumi.Input

	ToWorkloadGroupSpecMetadataOutput() WorkloadGroupSpecMetadataOutput
	ToWorkloadGroupSpecMetadataOutputWithContext(context.Context) WorkloadGroupSpecMetadataOutput
}

// Metadata that will be used for all corresponding `WorkloadEntries`.
type WorkloadGroupSpecMetadataArgs struct {
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	Labels      pulumi.StringMapInput `pulumi:"labels"`
}

func (WorkloadGroupSpecMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadGroupSpecMetadata)(nil)).Elem()
}

func (i WorkloadGroupSpecMetadataArgs) ToWorkloadGroupSpecMetadataOutput() WorkloadGroupSpecMetadataOutput {
	return i.ToWorkloadGroupSpecMetadataOutputWithContext(context.Background())
}

func (i WorkloadGroupSpecMetadataArgs) ToWorkloadGroupSpecMetadataOutputWithContext(ctx context.Context) WorkloadGroupSpecMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadGroupSpecMetadataOutput)
}

func (i WorkloadGroupSpecMetadataArgs) ToWorkloadGroupSpecMetadataPtrOutput() WorkloadGroupSpecMetadataPtrOutput {
	return i.ToWorkloadGroupSpecMetadataPtrOutputWithContext(context.Background())
}

func (i WorkloadGroupSpecMetadataArgs) ToWorkloadGroupSpecMetadataPtrOutputWithContext(ctx context.Context) WorkloadGroupSpecMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadGroupSpecMetadataOutput).ToWorkloadGroupSpecMetadataPtrOutputWithContext(ctx)
}

// WorkloadGroupSpecMetadataPtrInput is an input type that accepts WorkloadGroupSpecMetadataArgs, WorkloadGroupSpecMetadataPtr and WorkloadGroupSpecMetadataPtrOutput values.
// You can construct a concrete instance of `WorkloadGroupSpecMetadataPtrInput` via:
//
//	        WorkloadGroupSpecMetadataArgs{...}
//
//	or:
//
//	        nil
type WorkloadGroupSpecMetadataPtrInput interface {
	pulumi.Input

	ToWorkloadGroupSpecMetadataPtrOutput() WorkloadGroupSpecMetadataPtrOutput
	ToWorkloadGroupSpecMetadataPtrOutputWithContext(context.Context) WorkloadGroupSpecMetadataPtrOutput
}

type workloadGroupSpecMetadataPtrType WorkloadGroupSpecMetadataArgs

func WorkloadGroupSpecMetadataPtr(v *WorkloadGroupSpecMetadataArgs) WorkloadGroupSpecMetadataPtrInput {
	return (*workloadGroupSpecMetadataPtrType)(v)
}

func (*workloadGroupSpecMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadGroupSpecMetadata)(nil)).Elem()
}

func (i *workloadGroupSpecMetadataPtrType) ToWorkloadGroupSpecMetadataPtrOutput() WorkloadGroupSpecMetadataPtrOutput {
	return i.ToWorkloadGroupSpecMetadataPtrOutputWithContext(context.Background())
}

func (i *workloadGroupSpecMetadataPtrType) ToWorkloadGroupSpecMetadataPtrOutputWithContext(ctx context.Context) WorkloadGroupSpecMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadGroupSpecMetadataPtrOutput)
}

// Metadata that will be used for all corresponding `WorkloadEntries`.
type WorkloadGroupSpecMetadataOutput struct{ *pulumi.OutputState }

func (WorkloadGroupSpecMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadGroupSpecMetadata)(nil)).Elem()
}

func (o WorkloadGroupSpecMetadataOutput) ToWorkloadGroupSpecMetadataOutput() WorkloadGroupSpecMetadataOutput {
	return o
}

func (o WorkloadGroupSpecMetadataOutput) ToWorkloadGroupSpecMetadataOutputWithContext(ctx context.Context) WorkloadGroupSpecMetadataOutput {
	return o
}

func (o WorkloadGroupSpecMetadataOutput) ToWorkloadGroupSpecMetadataPtrOutput() WorkloadGroupSpecMetadataPtrOutput {
	return o.ToWorkloadGroupSpecMetadataPtrOutputWithContext(context.Background())
}

func (o WorkloadGroupSpecMetadataOutput) ToWorkloadGroupSpecMetadataPtrOutputWithContext(ctx context.Context) WorkloadGroupSpecMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkloadGroupSpecMetadata) *WorkloadGroupSpecMetadata {
		return &v
	}).(WorkloadGroupSpecMetadataPtrOutput)
}

func (o WorkloadGroupSpecMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v WorkloadGroupSpecMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o WorkloadGroupSpecMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v WorkloadGroupSpecMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type WorkloadGroupSpecMetadataPtrOutput struct{ *pulumi.OutputState }

func (WorkloadGroupSpecMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadGroupSpecMetadata)(nil)).Elem()
}

func (o WorkloadGroupSpecMetadataPtrOutput) ToWorkloadGroupSpecMetadataPtrOutput() WorkloadGroupSpecMetadataPtrOutput {
	return o
}

func (o WorkloadGroupSpecMetadataPtrOutput) ToWorkloadGroupSpecMetadataPtrOutputWithContext(ctx context.Context) WorkloadGroupSpecMetadataPtrOutput {
	return o
}

func (o WorkloadGroupSpecMetadataPtrOutput) Elem() WorkloadGroupSpecMetadataOutput {
	return o.ApplyT(func(v *WorkloadGroupSpecMetadata) WorkloadGroupSpecMetadata {
		if v != nil {
			return *v
		}
		var ret WorkloadGroupSpecMetadata
		return ret
	}).(WorkloadGroupSpecMetadataOutput)
}

func (o WorkloadGroupSpecMetadataPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WorkloadGroupSpecMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o WorkloadGroupSpecMetadataPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WorkloadGroupSpecMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

type WorkloadGroupSpecMetadataAnnotations struct {
}

type WorkloadGroupSpecMetadataLabels struct {
}

// Template to be used for the generation of `WorkloadEntry` resources that belong to this `WorkloadGroup`.
type WorkloadGroupSpecTemplate struct {
	// Address associated with the network endpoint without the port.
	Address *string `pulumi:"address"`
	// One or more labels associated with the endpoint.
	Labels map[string]string `pulumi:"labels"`
	// The locality associated with the endpoint.
	Locality *string `pulumi:"locality"`
	// Network enables Istio to group endpoints resident in the same L3 domain/network.
	Network *string `pulumi:"network"`
	// Set of ports associated with the endpoint.
	Ports map[string]int `pulumi:"ports"`
	// The service account associated with the workload if a sidecar is present in the workload.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// The load balancing weight associated with the endpoint.
	Weight *int `pulumi:"weight"`
}

// WorkloadGroupSpecTemplateInput is an input type that accepts WorkloadGroupSpecTemplateArgs and WorkloadGroupSpecTemplateOutput values.
// You can construct a concrete instance of `WorkloadGroupSpecTemplateInput` via:
//
//	WorkloadGroupSpecTemplateArgs{...}
type WorkloadGroupSpecTemplateInput interface {
	pulumi.Input

	ToWorkloadGroupSpecTemplateOutput() WorkloadGroupSpecTemplateOutput
	ToWorkloadGroupSpecTemplateOutputWithContext(context.Context) WorkloadGroupSpecTemplateOutput
}

// Template to be used for the generation of `WorkloadEntry` resources that belong to this `WorkloadGroup`.
type WorkloadGroupSpecTemplateArgs struct {
	// Address associated with the network endpoint without the port.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// One or more labels associated with the endpoint.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The locality associated with the endpoint.
	Locality pulumi.StringPtrInput `pulumi:"locality"`
	// Network enables Istio to group endpoints resident in the same L3 domain/network.
	Network pulumi.StringPtrInput `pulumi:"network"`
	// Set of ports associated with the endpoint.
	Ports pulumi.IntMapInput `pulumi:"ports"`
	// The service account associated with the workload if a sidecar is present in the workload.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// The load balancing weight associated with the endpoint.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (WorkloadGroupSpecTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadGroupSpecTemplate)(nil)).Elem()
}

func (i WorkloadGroupSpecTemplateArgs) ToWorkloadGroupSpecTemplateOutput() WorkloadGroupSpecTemplateOutput {
	return i.ToWorkloadGroupSpecTemplateOutputWithContext(context.Background())
}

func (i WorkloadGroupSpecTemplateArgs) ToWorkloadGroupSpecTemplateOutputWithContext(ctx context.Context) WorkloadGroupSpecTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadGroupSpecTemplateOutput)
}

func (i WorkloadGroupSpecTemplateArgs) ToWorkloadGroupSpecTemplatePtrOutput() WorkloadGroupSpecTemplatePtrOutput {
	return i.ToWorkloadGroupSpecTemplatePtrOutputWithContext(context.Background())
}

func (i WorkloadGroupSpecTemplateArgs) ToWorkloadGroupSpecTemplatePtrOutputWithContext(ctx context.Context) WorkloadGroupSpecTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadGroupSpecTemplateOutput).ToWorkloadGroupSpecTemplatePtrOutputWithContext(ctx)
}

// WorkloadGroupSpecTemplatePtrInput is an input type that accepts WorkloadGroupSpecTemplateArgs, WorkloadGroupSpecTemplatePtr and WorkloadGroupSpecTemplatePtrOutput values.
// You can construct a concrete instance of `WorkloadGroupSpecTemplatePtrInput` via:
//
//	        WorkloadGroupSpecTemplateArgs{...}
//
//	or:
//
//	        nil
type WorkloadGroupSpecTemplatePtrInput interface {
	pulumi.Input

	ToWorkloadGroupSpecTemplatePtrOutput() WorkloadGroupSpecTemplatePtrOutput
	ToWorkloadGroupSpecTemplatePtrOutputWithContext(context.Context) WorkloadGroupSpecTemplatePtrOutput
}

type workloadGroupSpecTemplatePtrType WorkloadGroupSpecTemplateArgs

func WorkloadGroupSpecTemplatePtr(v *WorkloadGroupSpecTemplateArgs) WorkloadGroupSpecTemplatePtrInput {
	return (*workloadGroupSpecTemplatePtrType)(v)
}

func (*workloadGroupSpecTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadGroupSpecTemplate)(nil)).Elem()
}

func (i *workloadGroupSpecTemplatePtrType) ToWorkloadGroupSpecTemplatePtrOutput() WorkloadGroupSpecTemplatePtrOutput {
	return i.ToWorkloadGroupSpecTemplatePtrOutputWithContext(context.Background())
}

func (i *workloadGroupSpecTemplatePtrType) ToWorkloadGroupSpecTemplatePtrOutputWithContext(ctx context.Context) WorkloadGroupSpecTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkloadGroupSpecTemplatePtrOutput)
}

// Template to be used for the generation of `WorkloadEntry` resources that belong to this `WorkloadGroup`.
type WorkloadGroupSpecTemplateOutput struct{ *pulumi.OutputState }

func (WorkloadGroupSpecTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkloadGroupSpecTemplate)(nil)).Elem()
}

func (o WorkloadGroupSpecTemplateOutput) ToWorkloadGroupSpecTemplateOutput() WorkloadGroupSpecTemplateOutput {
	return o
}

func (o WorkloadGroupSpecTemplateOutput) ToWorkloadGroupSpecTemplateOutputWithContext(ctx context.Context) WorkloadGroupSpecTemplateOutput {
	return o
}

func (o WorkloadGroupSpecTemplateOutput) ToWorkloadGroupSpecTemplatePtrOutput() WorkloadGroupSpecTemplatePtrOutput {
	return o.ToWorkloadGroupSpecTemplatePtrOutputWithContext(context.Background())
}

func (o WorkloadGroupSpecTemplateOutput) ToWorkloadGroupSpecTemplatePtrOutputWithContext(ctx context.Context) WorkloadGroupSpecTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkloadGroupSpecTemplate) *WorkloadGroupSpecTemplate {
		return &v
	}).(WorkloadGroupSpecTemplatePtrOutput)
}

// Address associated with the network endpoint without the port.
func (o WorkloadGroupSpecTemplateOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkloadGroupSpecTemplate) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// One or more labels associated with the endpoint.
func (o WorkloadGroupSpecTemplateOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v WorkloadGroupSpecTemplate) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The locality associated with the endpoint.
func (o WorkloadGroupSpecTemplateOutput) Locality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkloadGroupSpecTemplate) *string { return v.Locality }).(pulumi.StringPtrOutput)
}

// Network enables Istio to group endpoints resident in the same L3 domain/network.
func (o WorkloadGroupSpecTemplateOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkloadGroupSpecTemplate) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// Set of ports associated with the endpoint.
func (o WorkloadGroupSpecTemplateOutput) Ports() pulumi.IntMapOutput {
	return o.ApplyT(func(v WorkloadGroupSpecTemplate) map[string]int { return v.Ports }).(pulumi.IntMapOutput)
}

// The service account associated with the workload if a sidecar is present in the workload.
func (o WorkloadGroupSpecTemplateOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkloadGroupSpecTemplate) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// The load balancing weight associated with the endpoint.
func (o WorkloadGroupSpecTemplateOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkloadGroupSpecTemplate) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type WorkloadGroupSpecTemplatePtrOutput struct{ *pulumi.OutputState }

func (WorkloadGroupSpecTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkloadGroupSpecTemplate)(nil)).Elem()
}

func (o WorkloadGroupSpecTemplatePtrOutput) ToWorkloadGroupSpecTemplatePtrOutput() WorkloadGroupSpecTemplatePtrOutput {
	return o
}

func (o WorkloadGroupSpecTemplatePtrOutput) ToWorkloadGroupSpecTemplatePtrOutputWithContext(ctx context.Context) WorkloadGroupSpecTemplatePtrOutput {
	return o
}

func (o WorkloadGroupSpecTemplatePtrOutput) Elem() WorkloadGroupSpecTemplateOutput {
	return o.ApplyT(func(v *WorkloadGroupSpecTemplate) WorkloadGroupSpecTemplate {
		if v != nil {
			return *v
		}
		var ret WorkloadGroupSpecTemplate
		return ret
	}).(WorkloadGroupSpecTemplateOutput)
}

// Address associated with the network endpoint without the port.
func (o WorkloadGroupSpecTemplatePtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkloadGroupSpecTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// One or more labels associated with the endpoint.
func (o WorkloadGroupSpecTemplatePtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WorkloadGroupSpecTemplate) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// The locality associated with the endpoint.
func (o WorkloadGroupSpecTemplatePtrOutput) Locality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkloadGroupSpecTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Locality
	}).(pulumi.StringPtrOutput)
}

// Network enables Istio to group endpoints resident in the same L3 domain/network.
func (o WorkloadGroupSpecTemplatePtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkloadGroupSpecTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

// Set of ports associated with the endpoint.
func (o WorkloadGroupSpecTemplatePtrOutput) Ports() pulumi.IntMapOutput {
	return o.ApplyT(func(v *WorkloadGroupSpecTemplate) map[string]int {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(pulumi.IntMapOutput)
}

// The service account associated with the workload if a sidecar is present in the workload.
func (o WorkloadGroupSpecTemplatePtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkloadGroupSpecTemplate) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// The load balancing weight associated with the endpoint.
func (o WorkloadGroupSpecTemplatePtrOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkloadGroupSpecTemplate) *int {
		if v == nil {
			return nil
		}
		return v.Weight
	}).(pulumi.IntPtrOutput)
}

// One or more labels associated with the endpoint.
type WorkloadGroupSpecTemplateLabels struct {
}

// Set of ports associated with the endpoint.
type WorkloadGroupSpecTemplatePorts struct {
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecInput)(nil)).Elem(), DestinationRuleSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecPtrInput)(nil)).Elem(), DestinationRuleSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsInput)(nil)).Elem(), DestinationRuleSpecSubsetsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsArrayInput)(nil)).Elem(), DestinationRuleSpecSubsetsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArrayInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyTlsInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyTlsPtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyTunnelInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyTunnelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrInput)(nil)).Elem(), DestinationRuleSpecSubsetsTrafficPolicyTunnelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPtrInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyConnectionPoolInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyConnectionPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyConnectionPoolPtrInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyConnectionPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyConnectionPoolHttpInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyConnectionPoolHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyConnectionPoolHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyConnectionPoolTcpInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyConnectionPoolTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyConnectionPoolTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyOutlierDetectionInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyOutlierDetectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyOutlierDetectionPtrInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyOutlierDetectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettingsInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyPortLevelSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettingsArrayInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyPortLevelSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettingsPortInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyPortLevelSettingsPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyPortLevelSettingsPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyProxyProtocolInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyProxyProtocolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyProxyProtocolPtrInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyProxyProtocolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyTlsInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyTlsPtrInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyTunnelInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyTunnelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecTrafficPolicyTunnelPtrInput)(nil)).Elem(), DestinationRuleSpecTrafficPolicyTunnelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecWorkloadSelectorInput)(nil)).Elem(), DestinationRuleSpecWorkloadSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationRuleSpecWorkloadSelectorPtrInput)(nil)).Elem(), DestinationRuleSpecWorkloadSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaySpecInput)(nil)).Elem(), GatewaySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaySpecPtrInput)(nil)).Elem(), GatewaySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaySpecServersInput)(nil)).Elem(), GatewaySpecServersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaySpecServersArrayInput)(nil)).Elem(), GatewaySpecServersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaySpecServersPortInput)(nil)).Elem(), GatewaySpecServersPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaySpecServersTlsInput)(nil)).Elem(), GatewaySpecServersTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaySpecServersTlsPtrInput)(nil)).Elem(), GatewaySpecServersTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEntrySpecInput)(nil)).Elem(), ServiceEntrySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEntrySpecPtrInput)(nil)).Elem(), ServiceEntrySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEntrySpecEndpointsInput)(nil)).Elem(), ServiceEntrySpecEndpointsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEntrySpecEndpointsArrayInput)(nil)).Elem(), ServiceEntrySpecEndpointsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEntrySpecPortsInput)(nil)).Elem(), ServiceEntrySpecPortsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEntrySpecPortsArrayInput)(nil)).Elem(), ServiceEntrySpecPortsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEntrySpecWorkloadSelectorInput)(nil)).Elem(), ServiceEntrySpecWorkloadSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceEntrySpecWorkloadSelectorPtrInput)(nil)).Elem(), ServiceEntrySpecWorkloadSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecInput)(nil)).Elem(), SidecarSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecPtrInput)(nil)).Elem(), SidecarSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecEgressInput)(nil)).Elem(), SidecarSpecEgressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecEgressArrayInput)(nil)).Elem(), SidecarSpecEgressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecEgressPortInput)(nil)).Elem(), SidecarSpecEgressPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecEgressPortPtrInput)(nil)).Elem(), SidecarSpecEgressPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecInboundConnectionPoolInput)(nil)).Elem(), SidecarSpecInboundConnectionPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecInboundConnectionPoolPtrInput)(nil)).Elem(), SidecarSpecInboundConnectionPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecInboundConnectionPoolHttpInput)(nil)).Elem(), SidecarSpecInboundConnectionPoolHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecInboundConnectionPoolHttpPtrInput)(nil)).Elem(), SidecarSpecInboundConnectionPoolHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecInboundConnectionPoolTcpInput)(nil)).Elem(), SidecarSpecInboundConnectionPoolTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecInboundConnectionPoolTcpPtrInput)(nil)).Elem(), SidecarSpecInboundConnectionPoolTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecInboundConnectionPoolTcpTcpKeepaliveInput)(nil)).Elem(), SidecarSpecInboundConnectionPoolTcpTcpKeepaliveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrInput)(nil)).Elem(), SidecarSpecInboundConnectionPoolTcpTcpKeepaliveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecIngressInput)(nil)).Elem(), SidecarSpecIngressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecIngressArrayInput)(nil)).Elem(), SidecarSpecIngressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecIngressConnectionPoolInput)(nil)).Elem(), SidecarSpecIngressConnectionPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecIngressConnectionPoolPtrInput)(nil)).Elem(), SidecarSpecIngressConnectionPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecIngressConnectionPoolHttpInput)(nil)).Elem(), SidecarSpecIngressConnectionPoolHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecIngressConnectionPoolHttpPtrInput)(nil)).Elem(), SidecarSpecIngressConnectionPoolHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecIngressConnectionPoolTcpInput)(nil)).Elem(), SidecarSpecIngressConnectionPoolTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecIngressConnectionPoolTcpPtrInput)(nil)).Elem(), SidecarSpecIngressConnectionPoolTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecIngressConnectionPoolTcpTcpKeepaliveInput)(nil)).Elem(), SidecarSpecIngressConnectionPoolTcpTcpKeepaliveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrInput)(nil)).Elem(), SidecarSpecIngressConnectionPoolTcpTcpKeepaliveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecIngressPortInput)(nil)).Elem(), SidecarSpecIngressPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecIngressTlsInput)(nil)).Elem(), SidecarSpecIngressTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecIngressTlsPtrInput)(nil)).Elem(), SidecarSpecIngressTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecOutboundTrafficPolicyInput)(nil)).Elem(), SidecarSpecOutboundTrafficPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecOutboundTrafficPolicyPtrInput)(nil)).Elem(), SidecarSpecOutboundTrafficPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecOutboundTrafficPolicyEgressProxyInput)(nil)).Elem(), SidecarSpecOutboundTrafficPolicyEgressProxyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecOutboundTrafficPolicyEgressProxyPtrInput)(nil)).Elem(), SidecarSpecOutboundTrafficPolicyEgressProxyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecOutboundTrafficPolicyEgressProxyPortInput)(nil)).Elem(), SidecarSpecOutboundTrafficPolicyEgressProxyPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecOutboundTrafficPolicyEgressProxyPortPtrInput)(nil)).Elem(), SidecarSpecOutboundTrafficPolicyEgressProxyPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecWorkloadSelectorInput)(nil)).Elem(), SidecarSpecWorkloadSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarSpecWorkloadSelectorPtrInput)(nil)).Elem(), SidecarSpecWorkloadSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecInput)(nil)).Elem(), VirtualServiceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecPtrInput)(nil)).Elem(), VirtualServiceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpInput)(nil)).Elem(), VirtualServiceSpecHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpArrayInput)(nil)).Elem(), VirtualServiceSpecHttpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpCorsPolicyInput)(nil)).Elem(), VirtualServiceSpecHttpCorsPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpCorsPolicyPtrInput)(nil)).Elem(), VirtualServiceSpecHttpCorsPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpDelegateInput)(nil)).Elem(), VirtualServiceSpecHttpDelegateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpDelegatePtrInput)(nil)).Elem(), VirtualServiceSpecHttpDelegateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpDirectResponseInput)(nil)).Elem(), VirtualServiceSpecHttpDirectResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpDirectResponsePtrInput)(nil)).Elem(), VirtualServiceSpecHttpDirectResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpFaultInput)(nil)).Elem(), VirtualServiceSpecHttpFaultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpFaultPtrInput)(nil)).Elem(), VirtualServiceSpecHttpFaultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpHeadersInput)(nil)).Elem(), VirtualServiceSpecHttpHeadersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpHeadersPtrInput)(nil)).Elem(), VirtualServiceSpecHttpHeadersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpHeadersRequestInput)(nil)).Elem(), VirtualServiceSpecHttpHeadersRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpHeadersRequestPtrInput)(nil)).Elem(), VirtualServiceSpecHttpHeadersRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpHeadersResponseInput)(nil)).Elem(), VirtualServiceSpecHttpHeadersResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpHeadersResponsePtrInput)(nil)).Elem(), VirtualServiceSpecHttpHeadersResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMatchInput)(nil)).Elem(), VirtualServiceSpecHttpMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMatchArrayInput)(nil)).Elem(), VirtualServiceSpecHttpMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMirrorInput)(nil)).Elem(), VirtualServiceSpecHttpMirrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMirrorPtrInput)(nil)).Elem(), VirtualServiceSpecHttpMirrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMirrorPercentageInput)(nil)).Elem(), VirtualServiceSpecHttpMirrorPercentageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMirrorPercentagePtrInput)(nil)).Elem(), VirtualServiceSpecHttpMirrorPercentageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMirrorPortInput)(nil)).Elem(), VirtualServiceSpecHttpMirrorPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMirrorPortPtrInput)(nil)).Elem(), VirtualServiceSpecHttpMirrorPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMirrorsInput)(nil)).Elem(), VirtualServiceSpecHttpMirrorsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMirrorsArrayInput)(nil)).Elem(), VirtualServiceSpecHttpMirrorsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMirrorsDestinationInput)(nil)).Elem(), VirtualServiceSpecHttpMirrorsDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMirrorsDestinationPortInput)(nil)).Elem(), VirtualServiceSpecHttpMirrorsDestinationPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMirrorsDestinationPortPtrInput)(nil)).Elem(), VirtualServiceSpecHttpMirrorsDestinationPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMirrorsPercentageInput)(nil)).Elem(), VirtualServiceSpecHttpMirrorsPercentageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpMirrorsPercentagePtrInput)(nil)).Elem(), VirtualServiceSpecHttpMirrorsPercentageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRetriesInput)(nil)).Elem(), VirtualServiceSpecHttpRetriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRetriesPtrInput)(nil)).Elem(), VirtualServiceSpecHttpRetriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRewriteInput)(nil)).Elem(), VirtualServiceSpecHttpRewriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRewritePtrInput)(nil)).Elem(), VirtualServiceSpecHttpRewriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRewriteUriRegexRewriteInput)(nil)).Elem(), VirtualServiceSpecHttpRewriteUriRegexRewriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRewriteUriRegexRewritePtrInput)(nil)).Elem(), VirtualServiceSpecHttpRewriteUriRegexRewriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteInput)(nil)).Elem(), VirtualServiceSpecHttpRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteArrayInput)(nil)).Elem(), VirtualServiceSpecHttpRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteDestinationInput)(nil)).Elem(), VirtualServiceSpecHttpRouteDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteDestinationPortInput)(nil)).Elem(), VirtualServiceSpecHttpRouteDestinationPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteDestinationPortPtrInput)(nil)).Elem(), VirtualServiceSpecHttpRouteDestinationPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteHeadersInput)(nil)).Elem(), VirtualServiceSpecHttpRouteHeadersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteHeadersPtrInput)(nil)).Elem(), VirtualServiceSpecHttpRouteHeadersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteHeadersRequestInput)(nil)).Elem(), VirtualServiceSpecHttpRouteHeadersRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteHeadersRequestPtrInput)(nil)).Elem(), VirtualServiceSpecHttpRouteHeadersRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteHeadersResponseInput)(nil)).Elem(), VirtualServiceSpecHttpRouteHeadersResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecHttpRouteHeadersResponsePtrInput)(nil)).Elem(), VirtualServiceSpecHttpRouteHeadersResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTcpInput)(nil)).Elem(), VirtualServiceSpecTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTcpArrayInput)(nil)).Elem(), VirtualServiceSpecTcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTcpMatchInput)(nil)).Elem(), VirtualServiceSpecTcpMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTcpMatchArrayInput)(nil)).Elem(), VirtualServiceSpecTcpMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTcpRouteInput)(nil)).Elem(), VirtualServiceSpecTcpRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTcpRouteArrayInput)(nil)).Elem(), VirtualServiceSpecTcpRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTcpRouteDestinationInput)(nil)).Elem(), VirtualServiceSpecTcpRouteDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTcpRouteDestinationPortInput)(nil)).Elem(), VirtualServiceSpecTcpRouteDestinationPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTcpRouteDestinationPortPtrInput)(nil)).Elem(), VirtualServiceSpecTcpRouteDestinationPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTlsInput)(nil)).Elem(), VirtualServiceSpecTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTlsArrayInput)(nil)).Elem(), VirtualServiceSpecTlsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTlsMatchInput)(nil)).Elem(), VirtualServiceSpecTlsMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTlsMatchArrayInput)(nil)).Elem(), VirtualServiceSpecTlsMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTlsRouteInput)(nil)).Elem(), VirtualServiceSpecTlsRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTlsRouteArrayInput)(nil)).Elem(), VirtualServiceSpecTlsRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTlsRouteDestinationInput)(nil)).Elem(), VirtualServiceSpecTlsRouteDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTlsRouteDestinationPortInput)(nil)).Elem(), VirtualServiceSpecTlsRouteDestinationPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceSpecTlsRouteDestinationPortPtrInput)(nil)).Elem(), VirtualServiceSpecTlsRouteDestinationPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadEntrySpecInput)(nil)).Elem(), WorkloadEntrySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadEntrySpecPtrInput)(nil)).Elem(), WorkloadEntrySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadGroupSpecInput)(nil)).Elem(), WorkloadGroupSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadGroupSpecPtrInput)(nil)).Elem(), WorkloadGroupSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadGroupSpecMetadataInput)(nil)).Elem(), WorkloadGroupSpecMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadGroupSpecMetadataPtrInput)(nil)).Elem(), WorkloadGroupSpecMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadGroupSpecTemplateInput)(nil)).Elem(), WorkloadGroupSpecTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkloadGroupSpecTemplatePtrInput)(nil)).Elem(), WorkloadGroupSpecTemplateArgs{})
	pulumi.RegisterOutputType(DestinationRuleSpecOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsArrayOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolHttpPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyOutlierDetectionPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsArrayOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsPortPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyPortLevelSettingsTlsPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyProxyProtocolPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyTlsOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyTlsPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyTunnelOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecSubsetsTrafficPolicyTunnelPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyConnectionPoolOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyConnectionPoolPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyConnectionPoolHttpOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyConnectionPoolHttpPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyConnectionPoolTcpOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyConnectionPoolTcpPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepaliveOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyConnectionPoolTcpTcpKeepalivePtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyOutlierDetectionOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyOutlierDetectionPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyPortLevelSettingsOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyPortLevelSettingsArrayOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolHttpPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepaliveOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyPortLevelSettingsConnectionPoolTcpTcpKeepalivePtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyPortLevelSettingsOutlierDetectionPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyPortLevelSettingsPortOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyPortLevelSettingsPortPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyPortLevelSettingsTlsPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyProxyProtocolOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyProxyProtocolPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyTlsOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyTlsPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyTunnelOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecTrafficPolicyTunnelPtrOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecWorkloadSelectorOutput{})
	pulumi.RegisterOutputType(DestinationRuleSpecWorkloadSelectorPtrOutput{})
	pulumi.RegisterOutputType(GatewaySpecOutput{})
	pulumi.RegisterOutputType(GatewaySpecPtrOutput{})
	pulumi.RegisterOutputType(GatewaySpecServersOutput{})
	pulumi.RegisterOutputType(GatewaySpecServersArrayOutput{})
	pulumi.RegisterOutputType(GatewaySpecServersPortOutput{})
	pulumi.RegisterOutputType(GatewaySpecServersTlsOutput{})
	pulumi.RegisterOutputType(GatewaySpecServersTlsPtrOutput{})
	pulumi.RegisterOutputType(ServiceEntrySpecOutput{})
	pulumi.RegisterOutputType(ServiceEntrySpecPtrOutput{})
	pulumi.RegisterOutputType(ServiceEntrySpecEndpointsOutput{})
	pulumi.RegisterOutputType(ServiceEntrySpecEndpointsArrayOutput{})
	pulumi.RegisterOutputType(ServiceEntrySpecPortsOutput{})
	pulumi.RegisterOutputType(ServiceEntrySpecPortsArrayOutput{})
	pulumi.RegisterOutputType(ServiceEntrySpecWorkloadSelectorOutput{})
	pulumi.RegisterOutputType(ServiceEntrySpecWorkloadSelectorPtrOutput{})
	pulumi.RegisterOutputType(SidecarSpecOutput{})
	pulumi.RegisterOutputType(SidecarSpecPtrOutput{})
	pulumi.RegisterOutputType(SidecarSpecEgressOutput{})
	pulumi.RegisterOutputType(SidecarSpecEgressArrayOutput{})
	pulumi.RegisterOutputType(SidecarSpecEgressPortOutput{})
	pulumi.RegisterOutputType(SidecarSpecEgressPortPtrOutput{})
	pulumi.RegisterOutputType(SidecarSpecInboundConnectionPoolOutput{})
	pulumi.RegisterOutputType(SidecarSpecInboundConnectionPoolPtrOutput{})
	pulumi.RegisterOutputType(SidecarSpecInboundConnectionPoolHttpOutput{})
	pulumi.RegisterOutputType(SidecarSpecInboundConnectionPoolHttpPtrOutput{})
	pulumi.RegisterOutputType(SidecarSpecInboundConnectionPoolTcpOutput{})
	pulumi.RegisterOutputType(SidecarSpecInboundConnectionPoolTcpPtrOutput{})
	pulumi.RegisterOutputType(SidecarSpecInboundConnectionPoolTcpTcpKeepaliveOutput{})
	pulumi.RegisterOutputType(SidecarSpecInboundConnectionPoolTcpTcpKeepalivePtrOutput{})
	pulumi.RegisterOutputType(SidecarSpecIngressOutput{})
	pulumi.RegisterOutputType(SidecarSpecIngressArrayOutput{})
	pulumi.RegisterOutputType(SidecarSpecIngressConnectionPoolOutput{})
	pulumi.RegisterOutputType(SidecarSpecIngressConnectionPoolPtrOutput{})
	pulumi.RegisterOutputType(SidecarSpecIngressConnectionPoolHttpOutput{})
	pulumi.RegisterOutputType(SidecarSpecIngressConnectionPoolHttpPtrOutput{})
	pulumi.RegisterOutputType(SidecarSpecIngressConnectionPoolTcpOutput{})
	pulumi.RegisterOutputType(SidecarSpecIngressConnectionPoolTcpPtrOutput{})
	pulumi.RegisterOutputType(SidecarSpecIngressConnectionPoolTcpTcpKeepaliveOutput{})
	pulumi.RegisterOutputType(SidecarSpecIngressConnectionPoolTcpTcpKeepalivePtrOutput{})
	pulumi.RegisterOutputType(SidecarSpecIngressPortOutput{})
	pulumi.RegisterOutputType(SidecarSpecIngressTlsOutput{})
	pulumi.RegisterOutputType(SidecarSpecIngressTlsPtrOutput{})
	pulumi.RegisterOutputType(SidecarSpecOutboundTrafficPolicyOutput{})
	pulumi.RegisterOutputType(SidecarSpecOutboundTrafficPolicyPtrOutput{})
	pulumi.RegisterOutputType(SidecarSpecOutboundTrafficPolicyEgressProxyOutput{})
	pulumi.RegisterOutputType(SidecarSpecOutboundTrafficPolicyEgressProxyPtrOutput{})
	pulumi.RegisterOutputType(SidecarSpecOutboundTrafficPolicyEgressProxyPortOutput{})
	pulumi.RegisterOutputType(SidecarSpecOutboundTrafficPolicyEgressProxyPortPtrOutput{})
	pulumi.RegisterOutputType(SidecarSpecWorkloadSelectorOutput{})
	pulumi.RegisterOutputType(SidecarSpecWorkloadSelectorPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpCorsPolicyOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpCorsPolicyPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpDelegateOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpDelegatePtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpDirectResponseOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpDirectResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpFaultOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpFaultPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpHeadersOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpHeadersPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpHeadersRequestOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpHeadersRequestPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpHeadersResponseOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpHeadersResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMatchOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMatchArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMirrorOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMirrorPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMirrorPercentageOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMirrorPercentagePtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMirrorPortOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMirrorPortPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMirrorsOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMirrorsArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMirrorsDestinationOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMirrorsDestinationPortOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMirrorsDestinationPortPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMirrorsPercentageOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpMirrorsPercentagePtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRetriesOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRetriesPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRewriteOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRewritePtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRewriteUriRegexRewriteOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRewriteUriRegexRewritePtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteDestinationOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteDestinationPortOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteDestinationPortPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteHeadersOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteHeadersPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteHeadersRequestOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteHeadersRequestPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteHeadersResponseOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecHttpRouteHeadersResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTcpOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTcpArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTcpMatchOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTcpMatchArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTcpRouteOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTcpRouteArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTcpRouteDestinationOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTcpRouteDestinationPortOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTcpRouteDestinationPortPtrOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTlsOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTlsArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTlsMatchOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTlsMatchArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTlsRouteOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTlsRouteArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTlsRouteDestinationOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTlsRouteDestinationPortOutput{})
	pulumi.RegisterOutputType(VirtualServiceSpecTlsRouteDestinationPortPtrOutput{})
	pulumi.RegisterOutputType(WorkloadEntrySpecOutput{})
	pulumi.RegisterOutputType(WorkloadEntrySpecPtrOutput{})
	pulumi.RegisterOutputType(WorkloadGroupSpecOutput{})
	pulumi.RegisterOutputType(WorkloadGroupSpecPtrOutput{})
	pulumi.RegisterOutputType(WorkloadGroupSpecMetadataOutput{})
	pulumi.RegisterOutputType(WorkloadGroupSpecMetadataPtrOutput{})
	pulumi.RegisterOutputType(WorkloadGroupSpecTemplateOutput{})
	pulumi.RegisterOutputType(WorkloadGroupSpecTemplatePtrOutput{})
}
