// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Elasticsearch represents an Elasticsearch resource in a Kubernetes cluster.
type ElasticsearchType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// ElasticsearchSpec holds the specification of an Elasticsearch cluster.
	Spec *ElasticsearchSpec `pulumi:"spec"`
	// ElasticsearchStatus represents the observed state of Elasticsearch.
	Status *ElasticsearchStatus `pulumi:"status"`
}

type ElasticsearchMetadata struct {
}

// ElasticsearchSpec holds the specification of an Elasticsearch cluster.
type ElasticsearchSpec struct {
	// Auth contains user authentication and authorization security settings for Elasticsearch.
	Auth *ElasticsearchSpecAuth `pulumi:"auth"`
	// HTTP holds HTTP layer settings for Elasticsearch.
	Http *ElasticsearchSpecHttp `pulumi:"http"`
	// Image is the Elasticsearch Docker image to deploy.
	Image *string `pulumi:"image"`
	// Monitoring enables you to collect and ship log and monitoring data of this Elasticsearch cluster.
	// See https://www.elastic.co/guide/en/elasticsearch/reference/current/monitor-elasticsearch-cluster.html.
	// Metricbeat and Filebeat are deployed in the same Pod as sidecars and each one sends data to one or two different
	// Elasticsearch monitoring clusters running in the same Kubernetes cluster.
	Monitoring *ElasticsearchSpecMonitoring `pulumi:"monitoring"`
	// NodeSets allow specifying groups of Elasticsearch nodes sharing the same configuration and Pod templates.
	NodeSets []ElasticsearchSpecNodeSets `pulumi:"nodeSets"`
	// PodDisruptionBudget provides access to the default Pod disruption budget for the Elasticsearch cluster.
	// The default budget doesn't allow any Pod to be removed in case the cluster is not green or if there is only one node of type `data` or `master`.
	// In all other cases the default PodDisruptionBudget sets `minUnavailable` equal to the total number of nodes minus 1.
	// To disable, set `PodDisruptionBudget` to the empty value (`{}` in YAML).
	PodDisruptionBudget *ElasticsearchSpecPodDisruptionBudget `pulumi:"podDisruptionBudget"`
	// RemoteClusters enables you to establish uni-directional connections to a remote Elasticsearch cluster.
	RemoteClusters []ElasticsearchSpecRemoteClusters `pulumi:"remoteClusters"`
	// RevisionHistoryLimit is the number of revisions to retain to allow rollback in the underlying StatefulSets.
	RevisionHistoryLimit *int `pulumi:"revisionHistoryLimit"`
	// SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Elasticsearch.
	SecureSettings []ElasticsearchSpecSecureSettings `pulumi:"secureSettings"`
	// ServiceAccountName is used to check access from the current resource to a resource (for ex. a remote Elasticsearch cluster) in a different namespace.
	// Can only be used if ECK is enforcing RBAC on references.
	ServiceAccountName *string `pulumi:"serviceAccountName"`
	// Transport holds transport layer settings for Elasticsearch.
	Transport *ElasticsearchSpecTransport `pulumi:"transport"`
	// UpdateStrategy specifies how updates to the cluster should be performed.
	UpdateStrategy *ElasticsearchSpecUpdateStrategy `pulumi:"updateStrategy"`
	// Version of Elasticsearch.
	Version string `pulumi:"version"`
	// VolumeClaimDeletePolicy sets the policy for handling deletion of PersistentVolumeClaims for all NodeSets.
	// Possible values are DeleteOnScaledownOnly and DeleteOnScaledownAndClusterDeletion. Defaults to DeleteOnScaledownAndClusterDeletion.
	VolumeClaimDeletePolicy *string `pulumi:"volumeClaimDeletePolicy"`
}

// ElasticsearchSpecInput is an input type that accepts ElasticsearchSpecArgs and ElasticsearchSpecOutput values.
// You can construct a concrete instance of `ElasticsearchSpecInput` via:
//
//	ElasticsearchSpecArgs{...}
type ElasticsearchSpecInput interface {
	pulumi.Input

	ToElasticsearchSpecOutput() ElasticsearchSpecOutput
	ToElasticsearchSpecOutputWithContext(context.Context) ElasticsearchSpecOutput
}

// ElasticsearchSpec holds the specification of an Elasticsearch cluster.
type ElasticsearchSpecArgs struct {
	// Auth contains user authentication and authorization security settings for Elasticsearch.
	Auth ElasticsearchSpecAuthPtrInput `pulumi:"auth"`
	// HTTP holds HTTP layer settings for Elasticsearch.
	Http ElasticsearchSpecHttpPtrInput `pulumi:"http"`
	// Image is the Elasticsearch Docker image to deploy.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Monitoring enables you to collect and ship log and monitoring data of this Elasticsearch cluster.
	// See https://www.elastic.co/guide/en/elasticsearch/reference/current/monitor-elasticsearch-cluster.html.
	// Metricbeat and Filebeat are deployed in the same Pod as sidecars and each one sends data to one or two different
	// Elasticsearch monitoring clusters running in the same Kubernetes cluster.
	Monitoring ElasticsearchSpecMonitoringPtrInput `pulumi:"monitoring"`
	// NodeSets allow specifying groups of Elasticsearch nodes sharing the same configuration and Pod templates.
	NodeSets ElasticsearchSpecNodeSetsArrayInput `pulumi:"nodeSets"`
	// PodDisruptionBudget provides access to the default Pod disruption budget for the Elasticsearch cluster.
	// The default budget doesn't allow any Pod to be removed in case the cluster is not green or if there is only one node of type `data` or `master`.
	// In all other cases the default PodDisruptionBudget sets `minUnavailable` equal to the total number of nodes minus 1.
	// To disable, set `PodDisruptionBudget` to the empty value (`{}` in YAML).
	PodDisruptionBudget ElasticsearchSpecPodDisruptionBudgetPtrInput `pulumi:"podDisruptionBudget"`
	// RemoteClusters enables you to establish uni-directional connections to a remote Elasticsearch cluster.
	RemoteClusters ElasticsearchSpecRemoteClustersArrayInput `pulumi:"remoteClusters"`
	// RevisionHistoryLimit is the number of revisions to retain to allow rollback in the underlying StatefulSets.
	RevisionHistoryLimit pulumi.IntPtrInput `pulumi:"revisionHistoryLimit"`
	// SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Elasticsearch.
	SecureSettings ElasticsearchSpecSecureSettingsArrayInput `pulumi:"secureSettings"`
	// ServiceAccountName is used to check access from the current resource to a resource (for ex. a remote Elasticsearch cluster) in a different namespace.
	// Can only be used if ECK is enforcing RBAC on references.
	ServiceAccountName pulumi.StringPtrInput `pulumi:"serviceAccountName"`
	// Transport holds transport layer settings for Elasticsearch.
	Transport ElasticsearchSpecTransportPtrInput `pulumi:"transport"`
	// UpdateStrategy specifies how updates to the cluster should be performed.
	UpdateStrategy ElasticsearchSpecUpdateStrategyPtrInput `pulumi:"updateStrategy"`
	// Version of Elasticsearch.
	Version pulumi.StringInput `pulumi:"version"`
	// VolumeClaimDeletePolicy sets the policy for handling deletion of PersistentVolumeClaims for all NodeSets.
	// Possible values are DeleteOnScaledownOnly and DeleteOnScaledownAndClusterDeletion. Defaults to DeleteOnScaledownAndClusterDeletion.
	VolumeClaimDeletePolicy pulumi.StringPtrInput `pulumi:"volumeClaimDeletePolicy"`
}

func (ElasticsearchSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpec)(nil)).Elem()
}

func (i ElasticsearchSpecArgs) ToElasticsearchSpecOutput() ElasticsearchSpecOutput {
	return i.ToElasticsearchSpecOutputWithContext(context.Background())
}

func (i ElasticsearchSpecArgs) ToElasticsearchSpecOutputWithContext(ctx context.Context) ElasticsearchSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecOutput)
}

func (i ElasticsearchSpecArgs) ToElasticsearchSpecPtrOutput() ElasticsearchSpecPtrOutput {
	return i.ToElasticsearchSpecPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecArgs) ToElasticsearchSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecOutput).ToElasticsearchSpecPtrOutputWithContext(ctx)
}

// ElasticsearchSpecPtrInput is an input type that accepts ElasticsearchSpecArgs, ElasticsearchSpecPtr and ElasticsearchSpecPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPtrInput` via:
//
//	        ElasticsearchSpecArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecPtrOutput() ElasticsearchSpecPtrOutput
	ToElasticsearchSpecPtrOutputWithContext(context.Context) ElasticsearchSpecPtrOutput
}

type elasticsearchSpecPtrType ElasticsearchSpecArgs

func ElasticsearchSpecPtr(v *ElasticsearchSpecArgs) ElasticsearchSpecPtrInput {
	return (*elasticsearchSpecPtrType)(v)
}

func (*elasticsearchSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpec)(nil)).Elem()
}

func (i *elasticsearchSpecPtrType) ToElasticsearchSpecPtrOutput() ElasticsearchSpecPtrOutput {
	return i.ToElasticsearchSpecPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecPtrType) ToElasticsearchSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPtrOutput)
}

// ElasticsearchSpec holds the specification of an Elasticsearch cluster.
type ElasticsearchSpecOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpec)(nil)).Elem()
}

func (o ElasticsearchSpecOutput) ToElasticsearchSpecOutput() ElasticsearchSpecOutput {
	return o
}

func (o ElasticsearchSpecOutput) ToElasticsearchSpecOutputWithContext(ctx context.Context) ElasticsearchSpecOutput {
	return o
}

func (o ElasticsearchSpecOutput) ToElasticsearchSpecPtrOutput() ElasticsearchSpecPtrOutput {
	return o.ToElasticsearchSpecPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecOutput) ToElasticsearchSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpec) *ElasticsearchSpec {
		return &v
	}).(ElasticsearchSpecPtrOutput)
}

// Auth contains user authentication and authorization security settings for Elasticsearch.
func (o ElasticsearchSpecOutput) Auth() ElasticsearchSpecAuthPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpec) *ElasticsearchSpecAuth { return v.Auth }).(ElasticsearchSpecAuthPtrOutput)
}

// HTTP holds HTTP layer settings for Elasticsearch.
func (o ElasticsearchSpecOutput) Http() ElasticsearchSpecHttpPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpec) *ElasticsearchSpecHttp { return v.Http }).(ElasticsearchSpecHttpPtrOutput)
}

// Image is the Elasticsearch Docker image to deploy.
func (o ElasticsearchSpecOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpec) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Monitoring enables you to collect and ship log and monitoring data of this Elasticsearch cluster.
// See https://www.elastic.co/guide/en/elasticsearch/reference/current/monitor-elasticsearch-cluster.html.
// Metricbeat and Filebeat are deployed in the same Pod as sidecars and each one sends data to one or two different
// Elasticsearch monitoring clusters running in the same Kubernetes cluster.
func (o ElasticsearchSpecOutput) Monitoring() ElasticsearchSpecMonitoringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpec) *ElasticsearchSpecMonitoring { return v.Monitoring }).(ElasticsearchSpecMonitoringPtrOutput)
}

// NodeSets allow specifying groups of Elasticsearch nodes sharing the same configuration and Pod templates.
func (o ElasticsearchSpecOutput) NodeSets() ElasticsearchSpecNodeSetsArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpec) []ElasticsearchSpecNodeSets { return v.NodeSets }).(ElasticsearchSpecNodeSetsArrayOutput)
}

// PodDisruptionBudget provides access to the default Pod disruption budget for the Elasticsearch cluster.
// The default budget doesn't allow any Pod to be removed in case the cluster is not green or if there is only one node of type `data` or `master`.
// In all other cases the default PodDisruptionBudget sets `minUnavailable` equal to the total number of nodes minus 1.
// To disable, set `PodDisruptionBudget` to the empty value (`{}` in YAML).
func (o ElasticsearchSpecOutput) PodDisruptionBudget() ElasticsearchSpecPodDisruptionBudgetPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpec) *ElasticsearchSpecPodDisruptionBudget { return v.PodDisruptionBudget }).(ElasticsearchSpecPodDisruptionBudgetPtrOutput)
}

// RemoteClusters enables you to establish uni-directional connections to a remote Elasticsearch cluster.
func (o ElasticsearchSpecOutput) RemoteClusters() ElasticsearchSpecRemoteClustersArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpec) []ElasticsearchSpecRemoteClusters { return v.RemoteClusters }).(ElasticsearchSpecRemoteClustersArrayOutput)
}

// RevisionHistoryLimit is the number of revisions to retain to allow rollback in the underlying StatefulSets.
func (o ElasticsearchSpecOutput) RevisionHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpec) *int { return v.RevisionHistoryLimit }).(pulumi.IntPtrOutput)
}

// SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Elasticsearch.
func (o ElasticsearchSpecOutput) SecureSettings() ElasticsearchSpecSecureSettingsArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpec) []ElasticsearchSpecSecureSettings { return v.SecureSettings }).(ElasticsearchSpecSecureSettingsArrayOutput)
}

// ServiceAccountName is used to check access from the current resource to a resource (for ex. a remote Elasticsearch cluster) in a different namespace.
// Can only be used if ECK is enforcing RBAC on references.
func (o ElasticsearchSpecOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpec) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

// Transport holds transport layer settings for Elasticsearch.
func (o ElasticsearchSpecOutput) Transport() ElasticsearchSpecTransportPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpec) *ElasticsearchSpecTransport { return v.Transport }).(ElasticsearchSpecTransportPtrOutput)
}

// UpdateStrategy specifies how updates to the cluster should be performed.
func (o ElasticsearchSpecOutput) UpdateStrategy() ElasticsearchSpecUpdateStrategyPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpec) *ElasticsearchSpecUpdateStrategy { return v.UpdateStrategy }).(ElasticsearchSpecUpdateStrategyPtrOutput)
}

// Version of Elasticsearch.
func (o ElasticsearchSpecOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticsearchSpec) string { return v.Version }).(pulumi.StringOutput)
}

// VolumeClaimDeletePolicy sets the policy for handling deletion of PersistentVolumeClaims for all NodeSets.
// Possible values are DeleteOnScaledownOnly and DeleteOnScaledownAndClusterDeletion. Defaults to DeleteOnScaledownAndClusterDeletion.
func (o ElasticsearchSpecOutput) VolumeClaimDeletePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpec) *string { return v.VolumeClaimDeletePolicy }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpec)(nil)).Elem()
}

func (o ElasticsearchSpecPtrOutput) ToElasticsearchSpecPtrOutput() ElasticsearchSpecPtrOutput {
	return o
}

func (o ElasticsearchSpecPtrOutput) ToElasticsearchSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPtrOutput {
	return o
}

func (o ElasticsearchSpecPtrOutput) Elem() ElasticsearchSpecOutput {
	return o.ApplyT(func(v *ElasticsearchSpec) ElasticsearchSpec {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpec
		return ret
	}).(ElasticsearchSpecOutput)
}

// Auth contains user authentication and authorization security settings for Elasticsearch.
func (o ElasticsearchSpecPtrOutput) Auth() ElasticsearchSpecAuthPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpec) *ElasticsearchSpecAuth {
		if v == nil {
			return nil
		}
		return v.Auth
	}).(ElasticsearchSpecAuthPtrOutput)
}

// HTTP holds HTTP layer settings for Elasticsearch.
func (o ElasticsearchSpecPtrOutput) Http() ElasticsearchSpecHttpPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpec) *ElasticsearchSpecHttp {
		if v == nil {
			return nil
		}
		return v.Http
	}).(ElasticsearchSpecHttpPtrOutput)
}

// Image is the Elasticsearch Docker image to deploy.
func (o ElasticsearchSpecPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpec) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// Monitoring enables you to collect and ship log and monitoring data of this Elasticsearch cluster.
// See https://www.elastic.co/guide/en/elasticsearch/reference/current/monitor-elasticsearch-cluster.html.
// Metricbeat and Filebeat are deployed in the same Pod as sidecars and each one sends data to one or two different
// Elasticsearch monitoring clusters running in the same Kubernetes cluster.
func (o ElasticsearchSpecPtrOutput) Monitoring() ElasticsearchSpecMonitoringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpec) *ElasticsearchSpecMonitoring {
		if v == nil {
			return nil
		}
		return v.Monitoring
	}).(ElasticsearchSpecMonitoringPtrOutput)
}

// NodeSets allow specifying groups of Elasticsearch nodes sharing the same configuration and Pod templates.
func (o ElasticsearchSpecPtrOutput) NodeSets() ElasticsearchSpecNodeSetsArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpec) []ElasticsearchSpecNodeSets {
		if v == nil {
			return nil
		}
		return v.NodeSets
	}).(ElasticsearchSpecNodeSetsArrayOutput)
}

// PodDisruptionBudget provides access to the default Pod disruption budget for the Elasticsearch cluster.
// The default budget doesn't allow any Pod to be removed in case the cluster is not green or if there is only one node of type `data` or `master`.
// In all other cases the default PodDisruptionBudget sets `minUnavailable` equal to the total number of nodes minus 1.
// To disable, set `PodDisruptionBudget` to the empty value (`{}` in YAML).
func (o ElasticsearchSpecPtrOutput) PodDisruptionBudget() ElasticsearchSpecPodDisruptionBudgetPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpec) *ElasticsearchSpecPodDisruptionBudget {
		if v == nil {
			return nil
		}
		return v.PodDisruptionBudget
	}).(ElasticsearchSpecPodDisruptionBudgetPtrOutput)
}

// RemoteClusters enables you to establish uni-directional connections to a remote Elasticsearch cluster.
func (o ElasticsearchSpecPtrOutput) RemoteClusters() ElasticsearchSpecRemoteClustersArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpec) []ElasticsearchSpecRemoteClusters {
		if v == nil {
			return nil
		}
		return v.RemoteClusters
	}).(ElasticsearchSpecRemoteClustersArrayOutput)
}

// RevisionHistoryLimit is the number of revisions to retain to allow rollback in the underlying StatefulSets.
func (o ElasticsearchSpecPtrOutput) RevisionHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpec) *int {
		if v == nil {
			return nil
		}
		return v.RevisionHistoryLimit
	}).(pulumi.IntPtrOutput)
}

// SecureSettings is a list of references to Kubernetes secrets containing sensitive configuration options for Elasticsearch.
func (o ElasticsearchSpecPtrOutput) SecureSettings() ElasticsearchSpecSecureSettingsArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpec) []ElasticsearchSpecSecureSettings {
		if v == nil {
			return nil
		}
		return v.SecureSettings
	}).(ElasticsearchSpecSecureSettingsArrayOutput)
}

// ServiceAccountName is used to check access from the current resource to a resource (for ex. a remote Elasticsearch cluster) in a different namespace.
// Can only be used if ECK is enforcing RBAC on references.
func (o ElasticsearchSpecPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpec) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

// Transport holds transport layer settings for Elasticsearch.
func (o ElasticsearchSpecPtrOutput) Transport() ElasticsearchSpecTransportPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpec) *ElasticsearchSpecTransport {
		if v == nil {
			return nil
		}
		return v.Transport
	}).(ElasticsearchSpecTransportPtrOutput)
}

// UpdateStrategy specifies how updates to the cluster should be performed.
func (o ElasticsearchSpecPtrOutput) UpdateStrategy() ElasticsearchSpecUpdateStrategyPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpec) *ElasticsearchSpecUpdateStrategy {
		if v == nil {
			return nil
		}
		return v.UpdateStrategy
	}).(ElasticsearchSpecUpdateStrategyPtrOutput)
}

// Version of Elasticsearch.
func (o ElasticsearchSpecPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

// VolumeClaimDeletePolicy sets the policy for handling deletion of PersistentVolumeClaims for all NodeSets.
// Possible values are DeleteOnScaledownOnly and DeleteOnScaledownAndClusterDeletion. Defaults to DeleteOnScaledownAndClusterDeletion.
func (o ElasticsearchSpecPtrOutput) VolumeClaimDeletePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpec) *string {
		if v == nil {
			return nil
		}
		return v.VolumeClaimDeletePolicy
	}).(pulumi.StringPtrOutput)
}

// Auth contains user authentication and authorization security settings for Elasticsearch.
type ElasticsearchSpecAuth struct {
	// DisableElasticUser disables the default elastic user that is created by ECK.
	DisableElasticUser *bool `pulumi:"disableElasticUser"`
	// FileRealm to propagate to the Elasticsearch cluster.
	FileRealm []ElasticsearchSpecAuthFileRealm `pulumi:"fileRealm"`
	// Roles to propagate to the Elasticsearch cluster.
	Roles []ElasticsearchSpecAuthRoles `pulumi:"roles"`
}

// ElasticsearchSpecAuthInput is an input type that accepts ElasticsearchSpecAuthArgs and ElasticsearchSpecAuthOutput values.
// You can construct a concrete instance of `ElasticsearchSpecAuthInput` via:
//
//	ElasticsearchSpecAuthArgs{...}
type ElasticsearchSpecAuthInput interface {
	pulumi.Input

	ToElasticsearchSpecAuthOutput() ElasticsearchSpecAuthOutput
	ToElasticsearchSpecAuthOutputWithContext(context.Context) ElasticsearchSpecAuthOutput
}

// Auth contains user authentication and authorization security settings for Elasticsearch.
type ElasticsearchSpecAuthArgs struct {
	// DisableElasticUser disables the default elastic user that is created by ECK.
	DisableElasticUser pulumi.BoolPtrInput `pulumi:"disableElasticUser"`
	// FileRealm to propagate to the Elasticsearch cluster.
	FileRealm ElasticsearchSpecAuthFileRealmArrayInput `pulumi:"fileRealm"`
	// Roles to propagate to the Elasticsearch cluster.
	Roles ElasticsearchSpecAuthRolesArrayInput `pulumi:"roles"`
}

func (ElasticsearchSpecAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecAuth)(nil)).Elem()
}

func (i ElasticsearchSpecAuthArgs) ToElasticsearchSpecAuthOutput() ElasticsearchSpecAuthOutput {
	return i.ToElasticsearchSpecAuthOutputWithContext(context.Background())
}

func (i ElasticsearchSpecAuthArgs) ToElasticsearchSpecAuthOutputWithContext(ctx context.Context) ElasticsearchSpecAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecAuthOutput)
}

func (i ElasticsearchSpecAuthArgs) ToElasticsearchSpecAuthPtrOutput() ElasticsearchSpecAuthPtrOutput {
	return i.ToElasticsearchSpecAuthPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecAuthArgs) ToElasticsearchSpecAuthPtrOutputWithContext(ctx context.Context) ElasticsearchSpecAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecAuthOutput).ToElasticsearchSpecAuthPtrOutputWithContext(ctx)
}

// ElasticsearchSpecAuthPtrInput is an input type that accepts ElasticsearchSpecAuthArgs, ElasticsearchSpecAuthPtr and ElasticsearchSpecAuthPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecAuthPtrInput` via:
//
//	        ElasticsearchSpecAuthArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecAuthPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecAuthPtrOutput() ElasticsearchSpecAuthPtrOutput
	ToElasticsearchSpecAuthPtrOutputWithContext(context.Context) ElasticsearchSpecAuthPtrOutput
}

type elasticsearchSpecAuthPtrType ElasticsearchSpecAuthArgs

func ElasticsearchSpecAuthPtr(v *ElasticsearchSpecAuthArgs) ElasticsearchSpecAuthPtrInput {
	return (*elasticsearchSpecAuthPtrType)(v)
}

func (*elasticsearchSpecAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecAuth)(nil)).Elem()
}

func (i *elasticsearchSpecAuthPtrType) ToElasticsearchSpecAuthPtrOutput() ElasticsearchSpecAuthPtrOutput {
	return i.ToElasticsearchSpecAuthPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecAuthPtrType) ToElasticsearchSpecAuthPtrOutputWithContext(ctx context.Context) ElasticsearchSpecAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecAuthPtrOutput)
}

// Auth contains user authentication and authorization security settings for Elasticsearch.
type ElasticsearchSpecAuthOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecAuth)(nil)).Elem()
}

func (o ElasticsearchSpecAuthOutput) ToElasticsearchSpecAuthOutput() ElasticsearchSpecAuthOutput {
	return o
}

func (o ElasticsearchSpecAuthOutput) ToElasticsearchSpecAuthOutputWithContext(ctx context.Context) ElasticsearchSpecAuthOutput {
	return o
}

func (o ElasticsearchSpecAuthOutput) ToElasticsearchSpecAuthPtrOutput() ElasticsearchSpecAuthPtrOutput {
	return o.ToElasticsearchSpecAuthPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecAuthOutput) ToElasticsearchSpecAuthPtrOutputWithContext(ctx context.Context) ElasticsearchSpecAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecAuth) *ElasticsearchSpecAuth {
		return &v
	}).(ElasticsearchSpecAuthPtrOutput)
}

// DisableElasticUser disables the default elastic user that is created by ECK.
func (o ElasticsearchSpecAuthOutput) DisableElasticUser() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecAuth) *bool { return v.DisableElasticUser }).(pulumi.BoolPtrOutput)
}

// FileRealm to propagate to the Elasticsearch cluster.
func (o ElasticsearchSpecAuthOutput) FileRealm() ElasticsearchSpecAuthFileRealmArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecAuth) []ElasticsearchSpecAuthFileRealm { return v.FileRealm }).(ElasticsearchSpecAuthFileRealmArrayOutput)
}

// Roles to propagate to the Elasticsearch cluster.
func (o ElasticsearchSpecAuthOutput) Roles() ElasticsearchSpecAuthRolesArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecAuth) []ElasticsearchSpecAuthRoles { return v.Roles }).(ElasticsearchSpecAuthRolesArrayOutput)
}

type ElasticsearchSpecAuthPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecAuth)(nil)).Elem()
}

func (o ElasticsearchSpecAuthPtrOutput) ToElasticsearchSpecAuthPtrOutput() ElasticsearchSpecAuthPtrOutput {
	return o
}

func (o ElasticsearchSpecAuthPtrOutput) ToElasticsearchSpecAuthPtrOutputWithContext(ctx context.Context) ElasticsearchSpecAuthPtrOutput {
	return o
}

func (o ElasticsearchSpecAuthPtrOutput) Elem() ElasticsearchSpecAuthOutput {
	return o.ApplyT(func(v *ElasticsearchSpecAuth) ElasticsearchSpecAuth {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecAuth
		return ret
	}).(ElasticsearchSpecAuthOutput)
}

// DisableElasticUser disables the default elastic user that is created by ECK.
func (o ElasticsearchSpecAuthPtrOutput) DisableElasticUser() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecAuth) *bool {
		if v == nil {
			return nil
		}
		return v.DisableElasticUser
	}).(pulumi.BoolPtrOutput)
}

// FileRealm to propagate to the Elasticsearch cluster.
func (o ElasticsearchSpecAuthPtrOutput) FileRealm() ElasticsearchSpecAuthFileRealmArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecAuth) []ElasticsearchSpecAuthFileRealm {
		if v == nil {
			return nil
		}
		return v.FileRealm
	}).(ElasticsearchSpecAuthFileRealmArrayOutput)
}

// Roles to propagate to the Elasticsearch cluster.
func (o ElasticsearchSpecAuthPtrOutput) Roles() ElasticsearchSpecAuthRolesArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecAuth) []ElasticsearchSpecAuthRoles {
		if v == nil {
			return nil
		}
		return v.Roles
	}).(ElasticsearchSpecAuthRolesArrayOutput)
}

// FileRealmSource references users to create in the Elasticsearch cluster.
type ElasticsearchSpecAuthFileRealm struct {
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// ElasticsearchSpecAuthFileRealmInput is an input type that accepts ElasticsearchSpecAuthFileRealmArgs and ElasticsearchSpecAuthFileRealmOutput values.
// You can construct a concrete instance of `ElasticsearchSpecAuthFileRealmInput` via:
//
//	ElasticsearchSpecAuthFileRealmArgs{...}
type ElasticsearchSpecAuthFileRealmInput interface {
	pulumi.Input

	ToElasticsearchSpecAuthFileRealmOutput() ElasticsearchSpecAuthFileRealmOutput
	ToElasticsearchSpecAuthFileRealmOutputWithContext(context.Context) ElasticsearchSpecAuthFileRealmOutput
}

// FileRealmSource references users to create in the Elasticsearch cluster.
type ElasticsearchSpecAuthFileRealmArgs struct {
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (ElasticsearchSpecAuthFileRealmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecAuthFileRealm)(nil)).Elem()
}

func (i ElasticsearchSpecAuthFileRealmArgs) ToElasticsearchSpecAuthFileRealmOutput() ElasticsearchSpecAuthFileRealmOutput {
	return i.ToElasticsearchSpecAuthFileRealmOutputWithContext(context.Background())
}

func (i ElasticsearchSpecAuthFileRealmArgs) ToElasticsearchSpecAuthFileRealmOutputWithContext(ctx context.Context) ElasticsearchSpecAuthFileRealmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecAuthFileRealmOutput)
}

// ElasticsearchSpecAuthFileRealmArrayInput is an input type that accepts ElasticsearchSpecAuthFileRealmArray and ElasticsearchSpecAuthFileRealmArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecAuthFileRealmArrayInput` via:
//
//	ElasticsearchSpecAuthFileRealmArray{ ElasticsearchSpecAuthFileRealmArgs{...} }
type ElasticsearchSpecAuthFileRealmArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecAuthFileRealmArrayOutput() ElasticsearchSpecAuthFileRealmArrayOutput
	ToElasticsearchSpecAuthFileRealmArrayOutputWithContext(context.Context) ElasticsearchSpecAuthFileRealmArrayOutput
}

type ElasticsearchSpecAuthFileRealmArray []ElasticsearchSpecAuthFileRealmInput

func (ElasticsearchSpecAuthFileRealmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecAuthFileRealm)(nil)).Elem()
}

func (i ElasticsearchSpecAuthFileRealmArray) ToElasticsearchSpecAuthFileRealmArrayOutput() ElasticsearchSpecAuthFileRealmArrayOutput {
	return i.ToElasticsearchSpecAuthFileRealmArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecAuthFileRealmArray) ToElasticsearchSpecAuthFileRealmArrayOutputWithContext(ctx context.Context) ElasticsearchSpecAuthFileRealmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecAuthFileRealmArrayOutput)
}

// FileRealmSource references users to create in the Elasticsearch cluster.
type ElasticsearchSpecAuthFileRealmOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecAuthFileRealmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecAuthFileRealm)(nil)).Elem()
}

func (o ElasticsearchSpecAuthFileRealmOutput) ToElasticsearchSpecAuthFileRealmOutput() ElasticsearchSpecAuthFileRealmOutput {
	return o
}

func (o ElasticsearchSpecAuthFileRealmOutput) ToElasticsearchSpecAuthFileRealmOutputWithContext(ctx context.Context) ElasticsearchSpecAuthFileRealmOutput {
	return o
}

// SecretName is the name of the secret.
func (o ElasticsearchSpecAuthFileRealmOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecAuthFileRealm) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecAuthFileRealmArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecAuthFileRealmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecAuthFileRealm)(nil)).Elem()
}

func (o ElasticsearchSpecAuthFileRealmArrayOutput) ToElasticsearchSpecAuthFileRealmArrayOutput() ElasticsearchSpecAuthFileRealmArrayOutput {
	return o
}

func (o ElasticsearchSpecAuthFileRealmArrayOutput) ToElasticsearchSpecAuthFileRealmArrayOutputWithContext(ctx context.Context) ElasticsearchSpecAuthFileRealmArrayOutput {
	return o
}

func (o ElasticsearchSpecAuthFileRealmArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecAuthFileRealmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecAuthFileRealm {
		return vs[0].([]ElasticsearchSpecAuthFileRealm)[vs[1].(int)]
	}).(ElasticsearchSpecAuthFileRealmOutput)
}

// RoleSource references roles to create in the Elasticsearch cluster.
type ElasticsearchSpecAuthRoles struct {
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// ElasticsearchSpecAuthRolesInput is an input type that accepts ElasticsearchSpecAuthRolesArgs and ElasticsearchSpecAuthRolesOutput values.
// You can construct a concrete instance of `ElasticsearchSpecAuthRolesInput` via:
//
//	ElasticsearchSpecAuthRolesArgs{...}
type ElasticsearchSpecAuthRolesInput interface {
	pulumi.Input

	ToElasticsearchSpecAuthRolesOutput() ElasticsearchSpecAuthRolesOutput
	ToElasticsearchSpecAuthRolesOutputWithContext(context.Context) ElasticsearchSpecAuthRolesOutput
}

// RoleSource references roles to create in the Elasticsearch cluster.
type ElasticsearchSpecAuthRolesArgs struct {
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (ElasticsearchSpecAuthRolesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecAuthRoles)(nil)).Elem()
}

func (i ElasticsearchSpecAuthRolesArgs) ToElasticsearchSpecAuthRolesOutput() ElasticsearchSpecAuthRolesOutput {
	return i.ToElasticsearchSpecAuthRolesOutputWithContext(context.Background())
}

func (i ElasticsearchSpecAuthRolesArgs) ToElasticsearchSpecAuthRolesOutputWithContext(ctx context.Context) ElasticsearchSpecAuthRolesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecAuthRolesOutput)
}

// ElasticsearchSpecAuthRolesArrayInput is an input type that accepts ElasticsearchSpecAuthRolesArray and ElasticsearchSpecAuthRolesArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecAuthRolesArrayInput` via:
//
//	ElasticsearchSpecAuthRolesArray{ ElasticsearchSpecAuthRolesArgs{...} }
type ElasticsearchSpecAuthRolesArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecAuthRolesArrayOutput() ElasticsearchSpecAuthRolesArrayOutput
	ToElasticsearchSpecAuthRolesArrayOutputWithContext(context.Context) ElasticsearchSpecAuthRolesArrayOutput
}

type ElasticsearchSpecAuthRolesArray []ElasticsearchSpecAuthRolesInput

func (ElasticsearchSpecAuthRolesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecAuthRoles)(nil)).Elem()
}

func (i ElasticsearchSpecAuthRolesArray) ToElasticsearchSpecAuthRolesArrayOutput() ElasticsearchSpecAuthRolesArrayOutput {
	return i.ToElasticsearchSpecAuthRolesArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecAuthRolesArray) ToElasticsearchSpecAuthRolesArrayOutputWithContext(ctx context.Context) ElasticsearchSpecAuthRolesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecAuthRolesArrayOutput)
}

// RoleSource references roles to create in the Elasticsearch cluster.
type ElasticsearchSpecAuthRolesOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecAuthRolesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecAuthRoles)(nil)).Elem()
}

func (o ElasticsearchSpecAuthRolesOutput) ToElasticsearchSpecAuthRolesOutput() ElasticsearchSpecAuthRolesOutput {
	return o
}

func (o ElasticsearchSpecAuthRolesOutput) ToElasticsearchSpecAuthRolesOutputWithContext(ctx context.Context) ElasticsearchSpecAuthRolesOutput {
	return o
}

// SecretName is the name of the secret.
func (o ElasticsearchSpecAuthRolesOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecAuthRoles) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecAuthRolesArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecAuthRolesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecAuthRoles)(nil)).Elem()
}

func (o ElasticsearchSpecAuthRolesArrayOutput) ToElasticsearchSpecAuthRolesArrayOutput() ElasticsearchSpecAuthRolesArrayOutput {
	return o
}

func (o ElasticsearchSpecAuthRolesArrayOutput) ToElasticsearchSpecAuthRolesArrayOutputWithContext(ctx context.Context) ElasticsearchSpecAuthRolesArrayOutput {
	return o
}

func (o ElasticsearchSpecAuthRolesArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecAuthRolesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecAuthRoles {
		return vs[0].([]ElasticsearchSpecAuthRoles)[vs[1].(int)]
	}).(ElasticsearchSpecAuthRolesOutput)
}

// HTTP holds HTTP layer settings for Elasticsearch.
type ElasticsearchSpecHttp struct {
	// Service defines the template for the associated Kubernetes Service object.
	Service *ElasticsearchSpecHttpService `pulumi:"service"`
	// TLS defines options for configuring TLS for HTTP.
	Tls *ElasticsearchSpecHttpTls `pulumi:"tls"`
}

// ElasticsearchSpecHttpInput is an input type that accepts ElasticsearchSpecHttpArgs and ElasticsearchSpecHttpOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpInput` via:
//
//	ElasticsearchSpecHttpArgs{...}
type ElasticsearchSpecHttpInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpOutput() ElasticsearchSpecHttpOutput
	ToElasticsearchSpecHttpOutputWithContext(context.Context) ElasticsearchSpecHttpOutput
}

// HTTP holds HTTP layer settings for Elasticsearch.
type ElasticsearchSpecHttpArgs struct {
	// Service defines the template for the associated Kubernetes Service object.
	Service ElasticsearchSpecHttpServicePtrInput `pulumi:"service"`
	// TLS defines options for configuring TLS for HTTP.
	Tls ElasticsearchSpecHttpTlsPtrInput `pulumi:"tls"`
}

func (ElasticsearchSpecHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttp)(nil)).Elem()
}

func (i ElasticsearchSpecHttpArgs) ToElasticsearchSpecHttpOutput() ElasticsearchSpecHttpOutput {
	return i.ToElasticsearchSpecHttpOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpArgs) ToElasticsearchSpecHttpOutputWithContext(ctx context.Context) ElasticsearchSpecHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpOutput)
}

func (i ElasticsearchSpecHttpArgs) ToElasticsearchSpecHttpPtrOutput() ElasticsearchSpecHttpPtrOutput {
	return i.ToElasticsearchSpecHttpPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpArgs) ToElasticsearchSpecHttpPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpOutput).ToElasticsearchSpecHttpPtrOutputWithContext(ctx)
}

// ElasticsearchSpecHttpPtrInput is an input type that accepts ElasticsearchSpecHttpArgs, ElasticsearchSpecHttpPtr and ElasticsearchSpecHttpPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpPtrInput` via:
//
//	        ElasticsearchSpecHttpArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecHttpPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpPtrOutput() ElasticsearchSpecHttpPtrOutput
	ToElasticsearchSpecHttpPtrOutputWithContext(context.Context) ElasticsearchSpecHttpPtrOutput
}

type elasticsearchSpecHttpPtrType ElasticsearchSpecHttpArgs

func ElasticsearchSpecHttpPtr(v *ElasticsearchSpecHttpArgs) ElasticsearchSpecHttpPtrInput {
	return (*elasticsearchSpecHttpPtrType)(v)
}

func (*elasticsearchSpecHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttp)(nil)).Elem()
}

func (i *elasticsearchSpecHttpPtrType) ToElasticsearchSpecHttpPtrOutput() ElasticsearchSpecHttpPtrOutput {
	return i.ToElasticsearchSpecHttpPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecHttpPtrType) ToElasticsearchSpecHttpPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpPtrOutput)
}

// HTTP holds HTTP layer settings for Elasticsearch.
type ElasticsearchSpecHttpOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttp)(nil)).Elem()
}

func (o ElasticsearchSpecHttpOutput) ToElasticsearchSpecHttpOutput() ElasticsearchSpecHttpOutput {
	return o
}

func (o ElasticsearchSpecHttpOutput) ToElasticsearchSpecHttpOutputWithContext(ctx context.Context) ElasticsearchSpecHttpOutput {
	return o
}

func (o ElasticsearchSpecHttpOutput) ToElasticsearchSpecHttpPtrOutput() ElasticsearchSpecHttpPtrOutput {
	return o.ToElasticsearchSpecHttpPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecHttpOutput) ToElasticsearchSpecHttpPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecHttp) *ElasticsearchSpecHttp {
		return &v
	}).(ElasticsearchSpecHttpPtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
func (o ElasticsearchSpecHttpOutput) Service() ElasticsearchSpecHttpServicePtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttp) *ElasticsearchSpecHttpService { return v.Service }).(ElasticsearchSpecHttpServicePtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
func (o ElasticsearchSpecHttpOutput) Tls() ElasticsearchSpecHttpTlsPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttp) *ElasticsearchSpecHttpTls { return v.Tls }).(ElasticsearchSpecHttpTlsPtrOutput)
}

type ElasticsearchSpecHttpPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttp)(nil)).Elem()
}

func (o ElasticsearchSpecHttpPtrOutput) ToElasticsearchSpecHttpPtrOutput() ElasticsearchSpecHttpPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpPtrOutput) ToElasticsearchSpecHttpPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpPtrOutput) Elem() ElasticsearchSpecHttpOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttp) ElasticsearchSpecHttp {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecHttp
		return ret
	}).(ElasticsearchSpecHttpOutput)
}

// Service defines the template for the associated Kubernetes Service object.
func (o ElasticsearchSpecHttpPtrOutput) Service() ElasticsearchSpecHttpServicePtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttp) *ElasticsearchSpecHttpService {
		if v == nil {
			return nil
		}
		return v.Service
	}).(ElasticsearchSpecHttpServicePtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
func (o ElasticsearchSpecHttpPtrOutput) Tls() ElasticsearchSpecHttpTlsPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttp) *ElasticsearchSpecHttpTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(ElasticsearchSpecHttpTlsPtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
type ElasticsearchSpecHttpService struct {
	// ObjectMeta is the metadata of the service.
	// The name and namespace provided here are managed by ECK and will be ignored.
	Metadata *ElasticsearchSpecHttpServiceMetadata `pulumi:"metadata"`
	// Spec is the specification of the service.
	Spec *ElasticsearchSpecHttpServiceSpec `pulumi:"spec"`
}

// ElasticsearchSpecHttpServiceInput is an input type that accepts ElasticsearchSpecHttpServiceArgs and ElasticsearchSpecHttpServiceOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceInput` via:
//
//	ElasticsearchSpecHttpServiceArgs{...}
type ElasticsearchSpecHttpServiceInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceOutput() ElasticsearchSpecHttpServiceOutput
	ToElasticsearchSpecHttpServiceOutputWithContext(context.Context) ElasticsearchSpecHttpServiceOutput
}

// Service defines the template for the associated Kubernetes Service object.
type ElasticsearchSpecHttpServiceArgs struct {
	// ObjectMeta is the metadata of the service.
	// The name and namespace provided here are managed by ECK and will be ignored.
	Metadata ElasticsearchSpecHttpServiceMetadataPtrInput `pulumi:"metadata"`
	// Spec is the specification of the service.
	Spec ElasticsearchSpecHttpServiceSpecPtrInput `pulumi:"spec"`
}

func (ElasticsearchSpecHttpServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpService)(nil)).Elem()
}

func (i ElasticsearchSpecHttpServiceArgs) ToElasticsearchSpecHttpServiceOutput() ElasticsearchSpecHttpServiceOutput {
	return i.ToElasticsearchSpecHttpServiceOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceArgs) ToElasticsearchSpecHttpServiceOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceOutput)
}

func (i ElasticsearchSpecHttpServiceArgs) ToElasticsearchSpecHttpServicePtrOutput() ElasticsearchSpecHttpServicePtrOutput {
	return i.ToElasticsearchSpecHttpServicePtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceArgs) ToElasticsearchSpecHttpServicePtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceOutput).ToElasticsearchSpecHttpServicePtrOutputWithContext(ctx)
}

// ElasticsearchSpecHttpServicePtrInput is an input type that accepts ElasticsearchSpecHttpServiceArgs, ElasticsearchSpecHttpServicePtr and ElasticsearchSpecHttpServicePtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServicePtrInput` via:
//
//	        ElasticsearchSpecHttpServiceArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecHttpServicePtrInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServicePtrOutput() ElasticsearchSpecHttpServicePtrOutput
	ToElasticsearchSpecHttpServicePtrOutputWithContext(context.Context) ElasticsearchSpecHttpServicePtrOutput
}

type elasticsearchSpecHttpServicePtrType ElasticsearchSpecHttpServiceArgs

func ElasticsearchSpecHttpServicePtr(v *ElasticsearchSpecHttpServiceArgs) ElasticsearchSpecHttpServicePtrInput {
	return (*elasticsearchSpecHttpServicePtrType)(v)
}

func (*elasticsearchSpecHttpServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpService)(nil)).Elem()
}

func (i *elasticsearchSpecHttpServicePtrType) ToElasticsearchSpecHttpServicePtrOutput() ElasticsearchSpecHttpServicePtrOutput {
	return i.ToElasticsearchSpecHttpServicePtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecHttpServicePtrType) ToElasticsearchSpecHttpServicePtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServicePtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
type ElasticsearchSpecHttpServiceOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpService)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceOutput) ToElasticsearchSpecHttpServiceOutput() ElasticsearchSpecHttpServiceOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceOutput) ToElasticsearchSpecHttpServiceOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceOutput) ToElasticsearchSpecHttpServicePtrOutput() ElasticsearchSpecHttpServicePtrOutput {
	return o.ToElasticsearchSpecHttpServicePtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecHttpServiceOutput) ToElasticsearchSpecHttpServicePtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecHttpService) *ElasticsearchSpecHttpService {
		return &v
	}).(ElasticsearchSpecHttpServicePtrOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
func (o ElasticsearchSpecHttpServiceOutput) Metadata() ElasticsearchSpecHttpServiceMetadataPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpService) *ElasticsearchSpecHttpServiceMetadata { return v.Metadata }).(ElasticsearchSpecHttpServiceMetadataPtrOutput)
}

// Spec is the specification of the service.
func (o ElasticsearchSpecHttpServiceOutput) Spec() ElasticsearchSpecHttpServiceSpecPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpService) *ElasticsearchSpecHttpServiceSpec { return v.Spec }).(ElasticsearchSpecHttpServiceSpecPtrOutput)
}

type ElasticsearchSpecHttpServicePtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpService)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServicePtrOutput) ToElasticsearchSpecHttpServicePtrOutput() ElasticsearchSpecHttpServicePtrOutput {
	return o
}

func (o ElasticsearchSpecHttpServicePtrOutput) ToElasticsearchSpecHttpServicePtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServicePtrOutput {
	return o
}

func (o ElasticsearchSpecHttpServicePtrOutput) Elem() ElasticsearchSpecHttpServiceOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpService) ElasticsearchSpecHttpService {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecHttpService
		return ret
	}).(ElasticsearchSpecHttpServiceOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
func (o ElasticsearchSpecHttpServicePtrOutput) Metadata() ElasticsearchSpecHttpServiceMetadataPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpService) *ElasticsearchSpecHttpServiceMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(ElasticsearchSpecHttpServiceMetadataPtrOutput)
}

// Spec is the specification of the service.
func (o ElasticsearchSpecHttpServicePtrOutput) Spec() ElasticsearchSpecHttpServiceSpecPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpService) *ElasticsearchSpecHttpServiceSpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(ElasticsearchSpecHttpServiceSpecPtrOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type ElasticsearchSpecHttpServiceMetadata struct {
	Annotations map[string]string `pulumi:"annotations"`
	Finalizers  []string          `pulumi:"finalizers"`
	Labels      map[string]string `pulumi:"labels"`
	Name        *string           `pulumi:"name"`
	Namespace   *string           `pulumi:"namespace"`
}

// ElasticsearchSpecHttpServiceMetadataInput is an input type that accepts ElasticsearchSpecHttpServiceMetadataArgs and ElasticsearchSpecHttpServiceMetadataOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceMetadataInput` via:
//
//	ElasticsearchSpecHttpServiceMetadataArgs{...}
type ElasticsearchSpecHttpServiceMetadataInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceMetadataOutput() ElasticsearchSpecHttpServiceMetadataOutput
	ToElasticsearchSpecHttpServiceMetadataOutputWithContext(context.Context) ElasticsearchSpecHttpServiceMetadataOutput
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type ElasticsearchSpecHttpServiceMetadataArgs struct {
	Annotations pulumi.StringMapInput   `pulumi:"annotations"`
	Finalizers  pulumi.StringArrayInput `pulumi:"finalizers"`
	Labels      pulumi.StringMapInput   `pulumi:"labels"`
	Name        pulumi.StringPtrInput   `pulumi:"name"`
	Namespace   pulumi.StringPtrInput   `pulumi:"namespace"`
}

func (ElasticsearchSpecHttpServiceMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServiceMetadata)(nil)).Elem()
}

func (i ElasticsearchSpecHttpServiceMetadataArgs) ToElasticsearchSpecHttpServiceMetadataOutput() ElasticsearchSpecHttpServiceMetadataOutput {
	return i.ToElasticsearchSpecHttpServiceMetadataOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceMetadataArgs) ToElasticsearchSpecHttpServiceMetadataOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceMetadataOutput)
}

func (i ElasticsearchSpecHttpServiceMetadataArgs) ToElasticsearchSpecHttpServiceMetadataPtrOutput() ElasticsearchSpecHttpServiceMetadataPtrOutput {
	return i.ToElasticsearchSpecHttpServiceMetadataPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceMetadataArgs) ToElasticsearchSpecHttpServiceMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceMetadataOutput).ToElasticsearchSpecHttpServiceMetadataPtrOutputWithContext(ctx)
}

// ElasticsearchSpecHttpServiceMetadataPtrInput is an input type that accepts ElasticsearchSpecHttpServiceMetadataArgs, ElasticsearchSpecHttpServiceMetadataPtr and ElasticsearchSpecHttpServiceMetadataPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceMetadataPtrInput` via:
//
//	        ElasticsearchSpecHttpServiceMetadataArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecHttpServiceMetadataPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceMetadataPtrOutput() ElasticsearchSpecHttpServiceMetadataPtrOutput
	ToElasticsearchSpecHttpServiceMetadataPtrOutputWithContext(context.Context) ElasticsearchSpecHttpServiceMetadataPtrOutput
}

type elasticsearchSpecHttpServiceMetadataPtrType ElasticsearchSpecHttpServiceMetadataArgs

func ElasticsearchSpecHttpServiceMetadataPtr(v *ElasticsearchSpecHttpServiceMetadataArgs) ElasticsearchSpecHttpServiceMetadataPtrInput {
	return (*elasticsearchSpecHttpServiceMetadataPtrType)(v)
}

func (*elasticsearchSpecHttpServiceMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpServiceMetadata)(nil)).Elem()
}

func (i *elasticsearchSpecHttpServiceMetadataPtrType) ToElasticsearchSpecHttpServiceMetadataPtrOutput() ElasticsearchSpecHttpServiceMetadataPtrOutput {
	return i.ToElasticsearchSpecHttpServiceMetadataPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecHttpServiceMetadataPtrType) ToElasticsearchSpecHttpServiceMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceMetadataPtrOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type ElasticsearchSpecHttpServiceMetadataOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServiceMetadata)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceMetadataOutput) ToElasticsearchSpecHttpServiceMetadataOutput() ElasticsearchSpecHttpServiceMetadataOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceMetadataOutput) ToElasticsearchSpecHttpServiceMetadataOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceMetadataOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceMetadataOutput) ToElasticsearchSpecHttpServiceMetadataPtrOutput() ElasticsearchSpecHttpServiceMetadataPtrOutput {
	return o.ToElasticsearchSpecHttpServiceMetadataPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecHttpServiceMetadataOutput) ToElasticsearchSpecHttpServiceMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecHttpServiceMetadata) *ElasticsearchSpecHttpServiceMetadata {
		return &v
	}).(ElasticsearchSpecHttpServiceMetadataPtrOutput)
}

func (o ElasticsearchSpecHttpServiceMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecHttpServiceMetadataOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceMetadata) []string { return v.Finalizers }).(pulumi.StringArrayOutput)
}

func (o ElasticsearchSpecHttpServiceMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecHttpServiceMetadataOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceMetadata) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecHttpServiceMetadataOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceMetadata) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecHttpServiceMetadataPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpServiceMetadata)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceMetadataPtrOutput) ToElasticsearchSpecHttpServiceMetadataPtrOutput() ElasticsearchSpecHttpServiceMetadataPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceMetadataPtrOutput) ToElasticsearchSpecHttpServiceMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceMetadataPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceMetadataPtrOutput) Elem() ElasticsearchSpecHttpServiceMetadataOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceMetadata) ElasticsearchSpecHttpServiceMetadata {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecHttpServiceMetadata
		return ret
	}).(ElasticsearchSpecHttpServiceMetadataOutput)
}

func (o ElasticsearchSpecHttpServiceMetadataPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecHttpServiceMetadataPtrOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceMetadata) []string {
		if v == nil {
			return nil
		}
		return v.Finalizers
	}).(pulumi.StringArrayOutput)
}

func (o ElasticsearchSpecHttpServiceMetadataPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecHttpServiceMetadataPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecHttpServiceMetadataPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecHttpServiceMetadataAnnotations struct {
}

type ElasticsearchSpecHttpServiceMetadataLabels struct {
}

// Spec is the specification of the service.
type ElasticsearchSpecHttpServiceSpec struct {
	// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
	// allocated for services with type LoadBalancer.  Default is "true". It
	// may be set to "false" if the cluster load-balancer does not rely on
	// NodePorts.  If the caller requests specific NodePorts (by specifying a
	// value), those requests will be respected, regardless of this field.
	// This field may only be set for services with type LoadBalancer and will
	// be cleared if the type is changed to any other type.
	AllocateLoadBalancerNodePorts *bool `pulumi:"allocateLoadBalancerNodePorts"`
	// clusterIP is the IP address of the service and is usually assigned
	// randomly. If an address is specified manually, is in-range (as per
	// system configuration), and is not in use, it will be allocated to the
	// service; otherwise creation of the service will fail. This field may not
	// be changed through updates unless the type field is also being changed
	// to ExternalName (which requires this field to be blank) or the type
	// field is being changed from ExternalName (in which case this field may
	// optionally be specified, as describe above).  Valid values are "None",
	// empty string (""), or a valid IP address. Setting this to "None" makes a
	// "headless service" (no virtual IP), which is useful when direct endpoint
	// connections are preferred and proxying is not required.  Only applies to
	// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
	// when creating a Service of type ExternalName, creation will fail. This
	// field will be wiped when updating a Service to type ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP *string `pulumi:"clusterIP"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are
	// usually assigned randomly.  If an address is specified manually, is
	// in-range (as per system configuration), and is not in use, it will be
	// allocated to the service; otherwise creation of the service will fail.
	// This field may not be changed through updates unless the type field is
	// also being changed to ExternalName (which requires this field to be
	// empty) or the type field is being changed from ExternalName (in which
	// case this field may optionally be specified, as describe above).  Valid
	// values are "None", empty string (""), or a valid IP address.  Setting
	// this to "None" makes a "headless service" (no virtual IP), which is
	// useful when direct endpoint connections are preferred and proxying is
	// not required.  Only applies to types ClusterIP, NodePort, and
	// LoadBalancer. If this field is specified when creating a Service of type
	// ExternalName, creation will fail. This field will be wiped when updating
	// a Service to type ExternalName.  If this field is not specified, it will
	// be initialized from the clusterIP field.  If this field is specified,
	// clients must ensure that clusterIPs[0] and clusterIP have the same
	// value.
	//
	// This field may hold a maximum of two entries (dual-stack IPs, in either order).
	// These IPs must correspond to the values of the ipFamilies field. Both
	// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIPs []string `pulumi:"clusterIPs"`
	// externalIPs is a list of IP addresses for which nodes in the cluster
	// will also accept traffic for this service.  These IPs are not managed by
	// Kubernetes.  The user is responsible for ensuring that traffic arrives
	// at a node with this IP.  A common example is external load-balancers
	// that are not part of the Kubernetes system.
	ExternalIPs []string `pulumi:"externalIPs"`
	// externalName is the external reference that discovery mechanisms will
	// return as an alias for this service (e.g. a DNS CNAME record). No
	// proxying will be involved.  Must be a lowercase RFC-1123 hostname
	// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName *string `pulumi:"externalName"`
	// externalTrafficPolicy describes how nodes distribute service traffic they
	// receive on one of the Service's "externally-facing" addresses (NodePorts,
	// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
	// the service in a way that assumes that external load balancers will take care
	// of balancing the service traffic between nodes, and so each node will deliver
	// traffic only to the node-local endpoints of the service, without masquerading
	// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
	// be dropped.) The default value, "Cluster", uses the standard behavior of
	// routing to all endpoints evenly (possibly modified by topology and other
	// features). Note that traffic sent to an External IP or LoadBalancer IP from
	// within the cluster will always get "Cluster" semantics, but clients sending to
	// a NodePort from within the cluster may need to take traffic policy into account
	// when picking a node.
	ExternalTrafficPolicy *string `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service.
	// This only applies when type is set to LoadBalancer and
	// externalTrafficPolicy is set to Local. If a value is specified, is
	// in-range, and is not in use, it will be used.  If not specified, a value
	// will be automatically allocated.  External systems (e.g. load-balancers)
	// can use this port to determine if a given node holds endpoints for this
	// service or not.  If this field is specified when creating a Service
	// which does not need it, creation will fail. This field will be wiped
	// when updating a Service to no longer need it (e.g. changing type).
	// This field cannot be updated once set.
	HealthCheckNodePort *int `pulumi:"healthCheckNodePort"`
	// InternalTrafficPolicy describes how nodes distribute service traffic they
	// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
	// only want to talk to endpoints of the service on the same node as the pod,
	// dropping the traffic if there are no local endpoints. The default value,
	// "Cluster", uses the standard behavior of routing to all endpoints evenly
	// (possibly modified by topology and other features).
	InternalTrafficPolicy *string `pulumi:"internalTrafficPolicy"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
	// service. This field is usually assigned automatically based on cluster
	// configuration and the ipFamilyPolicy field. If this field is specified
	// manually, the requested family is available in the cluster,
	// and ipFamilyPolicy allows it, it will be used; otherwise creation of
	// the service will fail. This field is conditionally mutable: it allows
	// for adding or removing a secondary IP family, but it does not allow
	// changing the primary IP family of the Service. Valid values are "IPv4"
	// and "IPv6".  This field only applies to Services of types ClusterIP,
	// NodePort, and LoadBalancer, and does apply to "headless" services.
	// This field will be wiped when updating a Service to type ExternalName.
	//
	// This field may hold a maximum of two entries (dual-stack families, in
	// either order).  These families must correspond to the values of the
	// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
	// governed by the ipFamilyPolicy field.
	IpFamilies []string `pulumi:"ipFamilies"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by
	// this Service. If there is no value provided, then this field will be set
	// to SingleStack. Services can be "SingleStack" (a single IP family),
	// "PreferDualStack" (two IP families on dual-stack configured clusters or
	// a single IP family on single-stack clusters), or "RequireDualStack"
	// (two IP families on dual-stack configured clusters, otherwise fail). The
	// ipFamilies and clusterIPs fields depend on the value of this field. This
	// field will be wiped when updating a service to type ExternalName.
	IpFamilyPolicy *string `pulumi:"ipFamilyPolicy"`
	// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
	// If specified, the value of this field must be a label-style identifier, with an optional prefix,
	// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
	// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
	// balancer implementation is used, today this is typically done through the cloud provider integration,
	// but should apply for any default implementation. If set, it is assumed that a load balancer
	// implementation is watching for Services with a matching class. Any default load balancer
	// implementation (e.g. cloud providers) should ignore Services that set this field.
	// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
	// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass *string `pulumi:"loadBalancerClass"`
	// Only applies to Service Type: LoadBalancer.
	// This feature depends on whether the underlying cloud-provider supports specifying
	// the loadBalancerIP when a load balancer is created.
	// This field will be ignored if the cloud-provider does not support the feature.
	// Deprecated: This field was under-specified and its meaning varies across implementations.
	// Using it is non-portable and it may not support dual-stack.
	// Users are encouraged to use implementation-specific annotations when available.
	LoadBalancerIP *string `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider
	// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
	// cloud-provider does not support the feature."
	// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
	LoadBalancerSourceRanges []string `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports []ElasticsearchSpecHttpServiceSpecPorts `pulumi:"ports"`
	// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
	// Service should disregard any indications of ready/not-ready.
	// The primary use case for setting this field is for a StatefulSet's Headless Service to
	// propagate SRV DNS records for its Pods for the purpose of peer discovery.
	// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
	// Services interpret this to mean that all endpoints are considered "ready" even if the
	// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
	// through the Endpoints or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses *bool `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this
	// selector. If empty or not present, the service is assumed to have an
	// external process managing its endpoints, which Kubernetes will not
	// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
	// Ignored if type is ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector map[string]string `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity.
	// Enable client IP based session affinity.
	// Must be ClientIP or None.
	// Defaults to None.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity *string `pulumi:"sessionAffinity"`
	// sessionAffinityConfig contains the configurations of session affinity.
	SessionAffinityConfig *ElasticsearchSpecHttpServiceSpecSessionAffinityConfig `pulumi:"sessionAffinityConfig"`
	// TrafficDistribution offers a way to express preferences for how traffic is
	// distributed to Service endpoints. Implementations can use this field as a
	// hint, but are not required to guarantee strict adherence. If the field is
	// not set, the implementation will apply its default routing strategy. If set
	// to "PreferClose", implementations should prioritize endpoints that are
	// topologically close (e.g., same zone).
	// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
	TrafficDistribution *string `pulumi:"trafficDistribution"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid
	// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
	// "ClusterIP" allocates a cluster-internal IP address for load-balancing
	// to endpoints. Endpoints are determined by the selector or if that is not
	// specified, by manual construction of an Endpoints object or
	// EndpointSlice objects. If clusterIP is "None", no virtual IP is
	// allocated and the endpoints are published as a set of endpoints rather
	// than a virtual IP.
	// "NodePort" builds on ClusterIP and allocates a port on every node which
	// routes to the same endpoints as the clusterIP.
	// "LoadBalancer" builds on NodePort and creates an external load-balancer
	// (if supported in the current cloud) which routes to the same endpoints
	// as the clusterIP.
	// "ExternalName" aliases this service to the specified externalName.
	// Several other fields do not apply to ExternalName services.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type *string `pulumi:"type"`
}

// ElasticsearchSpecHttpServiceSpecInput is an input type that accepts ElasticsearchSpecHttpServiceSpecArgs and ElasticsearchSpecHttpServiceSpecOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceSpecInput` via:
//
//	ElasticsearchSpecHttpServiceSpecArgs{...}
type ElasticsearchSpecHttpServiceSpecInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceSpecOutput() ElasticsearchSpecHttpServiceSpecOutput
	ToElasticsearchSpecHttpServiceSpecOutputWithContext(context.Context) ElasticsearchSpecHttpServiceSpecOutput
}

// Spec is the specification of the service.
type ElasticsearchSpecHttpServiceSpecArgs struct {
	// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
	// allocated for services with type LoadBalancer.  Default is "true". It
	// may be set to "false" if the cluster load-balancer does not rely on
	// NodePorts.  If the caller requests specific NodePorts (by specifying a
	// value), those requests will be respected, regardless of this field.
	// This field may only be set for services with type LoadBalancer and will
	// be cleared if the type is changed to any other type.
	AllocateLoadBalancerNodePorts pulumi.BoolPtrInput `pulumi:"allocateLoadBalancerNodePorts"`
	// clusterIP is the IP address of the service and is usually assigned
	// randomly. If an address is specified manually, is in-range (as per
	// system configuration), and is not in use, it will be allocated to the
	// service; otherwise creation of the service will fail. This field may not
	// be changed through updates unless the type field is also being changed
	// to ExternalName (which requires this field to be blank) or the type
	// field is being changed from ExternalName (in which case this field may
	// optionally be specified, as describe above).  Valid values are "None",
	// empty string (""), or a valid IP address. Setting this to "None" makes a
	// "headless service" (no virtual IP), which is useful when direct endpoint
	// connections are preferred and proxying is not required.  Only applies to
	// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
	// when creating a Service of type ExternalName, creation will fail. This
	// field will be wiped when updating a Service to type ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP pulumi.StringPtrInput `pulumi:"clusterIP"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are
	// usually assigned randomly.  If an address is specified manually, is
	// in-range (as per system configuration), and is not in use, it will be
	// allocated to the service; otherwise creation of the service will fail.
	// This field may not be changed through updates unless the type field is
	// also being changed to ExternalName (which requires this field to be
	// empty) or the type field is being changed from ExternalName (in which
	// case this field may optionally be specified, as describe above).  Valid
	// values are "None", empty string (""), or a valid IP address.  Setting
	// this to "None" makes a "headless service" (no virtual IP), which is
	// useful when direct endpoint connections are preferred and proxying is
	// not required.  Only applies to types ClusterIP, NodePort, and
	// LoadBalancer. If this field is specified when creating a Service of type
	// ExternalName, creation will fail. This field will be wiped when updating
	// a Service to type ExternalName.  If this field is not specified, it will
	// be initialized from the clusterIP field.  If this field is specified,
	// clients must ensure that clusterIPs[0] and clusterIP have the same
	// value.
	//
	// This field may hold a maximum of two entries (dual-stack IPs, in either order).
	// These IPs must correspond to the values of the ipFamilies field. Both
	// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIPs pulumi.StringArrayInput `pulumi:"clusterIPs"`
	// externalIPs is a list of IP addresses for which nodes in the cluster
	// will also accept traffic for this service.  These IPs are not managed by
	// Kubernetes.  The user is responsible for ensuring that traffic arrives
	// at a node with this IP.  A common example is external load-balancers
	// that are not part of the Kubernetes system.
	ExternalIPs pulumi.StringArrayInput `pulumi:"externalIPs"`
	// externalName is the external reference that discovery mechanisms will
	// return as an alias for this service (e.g. a DNS CNAME record). No
	// proxying will be involved.  Must be a lowercase RFC-1123 hostname
	// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName pulumi.StringPtrInput `pulumi:"externalName"`
	// externalTrafficPolicy describes how nodes distribute service traffic they
	// receive on one of the Service's "externally-facing" addresses (NodePorts,
	// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
	// the service in a way that assumes that external load balancers will take care
	// of balancing the service traffic between nodes, and so each node will deliver
	// traffic only to the node-local endpoints of the service, without masquerading
	// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
	// be dropped.) The default value, "Cluster", uses the standard behavior of
	// routing to all endpoints evenly (possibly modified by topology and other
	// features). Note that traffic sent to an External IP or LoadBalancer IP from
	// within the cluster will always get "Cluster" semantics, but clients sending to
	// a NodePort from within the cluster may need to take traffic policy into account
	// when picking a node.
	ExternalTrafficPolicy pulumi.StringPtrInput `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service.
	// This only applies when type is set to LoadBalancer and
	// externalTrafficPolicy is set to Local. If a value is specified, is
	// in-range, and is not in use, it will be used.  If not specified, a value
	// will be automatically allocated.  External systems (e.g. load-balancers)
	// can use this port to determine if a given node holds endpoints for this
	// service or not.  If this field is specified when creating a Service
	// which does not need it, creation will fail. This field will be wiped
	// when updating a Service to no longer need it (e.g. changing type).
	// This field cannot be updated once set.
	HealthCheckNodePort pulumi.IntPtrInput `pulumi:"healthCheckNodePort"`
	// InternalTrafficPolicy describes how nodes distribute service traffic they
	// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
	// only want to talk to endpoints of the service on the same node as the pod,
	// dropping the traffic if there are no local endpoints. The default value,
	// "Cluster", uses the standard behavior of routing to all endpoints evenly
	// (possibly modified by topology and other features).
	InternalTrafficPolicy pulumi.StringPtrInput `pulumi:"internalTrafficPolicy"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
	// service. This field is usually assigned automatically based on cluster
	// configuration and the ipFamilyPolicy field. If this field is specified
	// manually, the requested family is available in the cluster,
	// and ipFamilyPolicy allows it, it will be used; otherwise creation of
	// the service will fail. This field is conditionally mutable: it allows
	// for adding or removing a secondary IP family, but it does not allow
	// changing the primary IP family of the Service. Valid values are "IPv4"
	// and "IPv6".  This field only applies to Services of types ClusterIP,
	// NodePort, and LoadBalancer, and does apply to "headless" services.
	// This field will be wiped when updating a Service to type ExternalName.
	//
	// This field may hold a maximum of two entries (dual-stack families, in
	// either order).  These families must correspond to the values of the
	// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
	// governed by the ipFamilyPolicy field.
	IpFamilies pulumi.StringArrayInput `pulumi:"ipFamilies"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by
	// this Service. If there is no value provided, then this field will be set
	// to SingleStack. Services can be "SingleStack" (a single IP family),
	// "PreferDualStack" (two IP families on dual-stack configured clusters or
	// a single IP family on single-stack clusters), or "RequireDualStack"
	// (two IP families on dual-stack configured clusters, otherwise fail). The
	// ipFamilies and clusterIPs fields depend on the value of this field. This
	// field will be wiped when updating a service to type ExternalName.
	IpFamilyPolicy pulumi.StringPtrInput `pulumi:"ipFamilyPolicy"`
	// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
	// If specified, the value of this field must be a label-style identifier, with an optional prefix,
	// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
	// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
	// balancer implementation is used, today this is typically done through the cloud provider integration,
	// but should apply for any default implementation. If set, it is assumed that a load balancer
	// implementation is watching for Services with a matching class. Any default load balancer
	// implementation (e.g. cloud providers) should ignore Services that set this field.
	// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
	// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass pulumi.StringPtrInput `pulumi:"loadBalancerClass"`
	// Only applies to Service Type: LoadBalancer.
	// This feature depends on whether the underlying cloud-provider supports specifying
	// the loadBalancerIP when a load balancer is created.
	// This field will be ignored if the cloud-provider does not support the feature.
	// Deprecated: This field was under-specified and its meaning varies across implementations.
	// Using it is non-portable and it may not support dual-stack.
	// Users are encouraged to use implementation-specific annotations when available.
	LoadBalancerIP pulumi.StringPtrInput `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider
	// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
	// cloud-provider does not support the feature."
	// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
	LoadBalancerSourceRanges pulumi.StringArrayInput `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports ElasticsearchSpecHttpServiceSpecPortsArrayInput `pulumi:"ports"`
	// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
	// Service should disregard any indications of ready/not-ready.
	// The primary use case for setting this field is for a StatefulSet's Headless Service to
	// propagate SRV DNS records for its Pods for the purpose of peer discovery.
	// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
	// Services interpret this to mean that all endpoints are considered "ready" even if the
	// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
	// through the Endpoints or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses pulumi.BoolPtrInput `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this
	// selector. If empty or not present, the service is assumed to have an
	// external process managing its endpoints, which Kubernetes will not
	// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
	// Ignored if type is ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector pulumi.StringMapInput `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity.
	// Enable client IP based session affinity.
	// Must be ClientIP or None.
	// Defaults to None.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity pulumi.StringPtrInput `pulumi:"sessionAffinity"`
	// sessionAffinityConfig contains the configurations of session affinity.
	SessionAffinityConfig ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrInput `pulumi:"sessionAffinityConfig"`
	// TrafficDistribution offers a way to express preferences for how traffic is
	// distributed to Service endpoints. Implementations can use this field as a
	// hint, but are not required to guarantee strict adherence. If the field is
	// not set, the implementation will apply its default routing strategy. If set
	// to "PreferClose", implementations should prioritize endpoints that are
	// topologically close (e.g., same zone).
	// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
	TrafficDistribution pulumi.StringPtrInput `pulumi:"trafficDistribution"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid
	// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
	// "ClusterIP" allocates a cluster-internal IP address for load-balancing
	// to endpoints. Endpoints are determined by the selector or if that is not
	// specified, by manual construction of an Endpoints object or
	// EndpointSlice objects. If clusterIP is "None", no virtual IP is
	// allocated and the endpoints are published as a set of endpoints rather
	// than a virtual IP.
	// "NodePort" builds on ClusterIP and allocates a port on every node which
	// routes to the same endpoints as the clusterIP.
	// "LoadBalancer" builds on NodePort and creates an external load-balancer
	// (if supported in the current cloud) which routes to the same endpoints
	// as the clusterIP.
	// "ExternalName" aliases this service to the specified externalName.
	// Several other fields do not apply to ExternalName services.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ElasticsearchSpecHttpServiceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServiceSpec)(nil)).Elem()
}

func (i ElasticsearchSpecHttpServiceSpecArgs) ToElasticsearchSpecHttpServiceSpecOutput() ElasticsearchSpecHttpServiceSpecOutput {
	return i.ToElasticsearchSpecHttpServiceSpecOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceSpecArgs) ToElasticsearchSpecHttpServiceSpecOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecOutput)
}

func (i ElasticsearchSpecHttpServiceSpecArgs) ToElasticsearchSpecHttpServiceSpecPtrOutput() ElasticsearchSpecHttpServiceSpecPtrOutput {
	return i.ToElasticsearchSpecHttpServiceSpecPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceSpecArgs) ToElasticsearchSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecOutput).ToElasticsearchSpecHttpServiceSpecPtrOutputWithContext(ctx)
}

// ElasticsearchSpecHttpServiceSpecPtrInput is an input type that accepts ElasticsearchSpecHttpServiceSpecArgs, ElasticsearchSpecHttpServiceSpecPtr and ElasticsearchSpecHttpServiceSpecPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceSpecPtrInput` via:
//
//	        ElasticsearchSpecHttpServiceSpecArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecHttpServiceSpecPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceSpecPtrOutput() ElasticsearchSpecHttpServiceSpecPtrOutput
	ToElasticsearchSpecHttpServiceSpecPtrOutputWithContext(context.Context) ElasticsearchSpecHttpServiceSpecPtrOutput
}

type elasticsearchSpecHttpServiceSpecPtrType ElasticsearchSpecHttpServiceSpecArgs

func ElasticsearchSpecHttpServiceSpecPtr(v *ElasticsearchSpecHttpServiceSpecArgs) ElasticsearchSpecHttpServiceSpecPtrInput {
	return (*elasticsearchSpecHttpServiceSpecPtrType)(v)
}

func (*elasticsearchSpecHttpServiceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpServiceSpec)(nil)).Elem()
}

func (i *elasticsearchSpecHttpServiceSpecPtrType) ToElasticsearchSpecHttpServiceSpecPtrOutput() ElasticsearchSpecHttpServiceSpecPtrOutput {
	return i.ToElasticsearchSpecHttpServiceSpecPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecHttpServiceSpecPtrType) ToElasticsearchSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecPtrOutput)
}

// Spec is the specification of the service.
type ElasticsearchSpecHttpServiceSpecOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServiceSpec)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceSpecOutput) ToElasticsearchSpecHttpServiceSpecOutput() ElasticsearchSpecHttpServiceSpecOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecOutput) ToElasticsearchSpecHttpServiceSpecOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecOutput) ToElasticsearchSpecHttpServiceSpecPtrOutput() ElasticsearchSpecHttpServiceSpecPtrOutput {
	return o.ToElasticsearchSpecHttpServiceSpecPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecHttpServiceSpecOutput) ToElasticsearchSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecHttpServiceSpec) *ElasticsearchSpecHttpServiceSpec {
		return &v
	}).(ElasticsearchSpecHttpServiceSpecPtrOutput)
}

// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
// allocated for services with type LoadBalancer.  Default is "true". It
// may be set to "false" if the cluster load-balancer does not rely on
// NodePorts.  If the caller requests specific NodePorts (by specifying a
// value), those requests will be respected, regardless of this field.
// This field may only be set for services with type LoadBalancer and will
// be cleared if the type is changed to any other type.
func (o ElasticsearchSpecHttpServiceSpecOutput) AllocateLoadBalancerNodePorts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) *bool { return v.AllocateLoadBalancerNodePorts }).(pulumi.BoolPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned
// randomly. If an address is specified manually, is in-range (as per
// system configuration), and is not in use, it will be allocated to the
// service; otherwise creation of the service will fail. This field may not
// be changed through updates unless the type field is also being changed
// to ExternalName (which requires this field to be blank) or the type
// field is being changed from ExternalName (in which case this field may
// optionally be specified, as describe above).  Valid values are "None",
// empty string (""), or a valid IP address. Setting this to "None" makes a
// "headless service" (no virtual IP), which is useful when direct endpoint
// connections are preferred and proxying is not required.  Only applies to
// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
// when creating a Service of type ExternalName, creation will fail. This
// field will be wiped when updating a Service to type ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecHttpServiceSpecOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) *string { return v.ClusterIP }).(pulumi.StringPtrOutput)
}

// ClusterIPs is a list of IP addresses assigned to this service, and are
// usually assigned randomly.  If an address is specified manually, is
// in-range (as per system configuration), and is not in use, it will be
// allocated to the service; otherwise creation of the service will fail.
// This field may not be changed through updates unless the type field is
// also being changed to ExternalName (which requires this field to be
// empty) or the type field is being changed from ExternalName (in which
// case this field may optionally be specified, as describe above).  Valid
// values are "None", empty string (""), or a valid IP address.  Setting
// this to "None" makes a "headless service" (no virtual IP), which is
// useful when direct endpoint connections are preferred and proxying is
// not required.  Only applies to types ClusterIP, NodePort, and
// LoadBalancer. If this field is specified when creating a Service of type
// ExternalName, creation will fail. This field will be wiped when updating
// a Service to type ExternalName.  If this field is not specified, it will
// be initialized from the clusterIP field.  If this field is specified,
// clients must ensure that clusterIPs[0] and clusterIP have the same
// value.
//
// This field may hold a maximum of two entries (dual-stack IPs, in either order).
// These IPs must correspond to the values of the ipFamilies field. Both
// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecHttpServiceSpecOutput) ClusterIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) []string { return v.ClusterIPs }).(pulumi.StringArrayOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster
// will also accept traffic for this service.  These IPs are not managed by
// Kubernetes.  The user is responsible for ensuring that traffic arrives
// at a node with this IP.  A common example is external load-balancers
// that are not part of the Kubernetes system.
func (o ElasticsearchSpecHttpServiceSpecOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) []string { return v.ExternalIPs }).(pulumi.StringArrayOutput)
}

// externalName is the external reference that discovery mechanisms will
// return as an alias for this service (e.g. a DNS CNAME record). No
// proxying will be involved.  Must be a lowercase RFC-1123 hostname
// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
func (o ElasticsearchSpecHttpServiceSpecOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) *string { return v.ExternalName }).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy describes how nodes distribute service traffic they
// receive on one of the Service's "externally-facing" addresses (NodePorts,
// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
// the service in a way that assumes that external load balancers will take care
// of balancing the service traffic between nodes, and so each node will deliver
// traffic only to the node-local endpoints of the service, without masquerading
// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
// be dropped.) The default value, "Cluster", uses the standard behavior of
// routing to all endpoints evenly (possibly modified by topology and other
// features). Note that traffic sent to an External IP or LoadBalancer IP from
// within the cluster will always get "Cluster" semantics, but clients sending to
// a NodePort from within the cluster may need to take traffic policy into account
// when picking a node.
func (o ElasticsearchSpecHttpServiceSpecOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) *string { return v.ExternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service.
// This only applies when type is set to LoadBalancer and
// externalTrafficPolicy is set to Local. If a value is specified, is
// in-range, and is not in use, it will be used.  If not specified, a value
// will be automatically allocated.  External systems (e.g. load-balancers)
// can use this port to determine if a given node holds endpoints for this
// service or not.  If this field is specified when creating a Service
// which does not need it, creation will fail. This field will be wiped
// when updating a Service to no longer need it (e.g. changing type).
// This field cannot be updated once set.
func (o ElasticsearchSpecHttpServiceSpecOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) *int { return v.HealthCheckNodePort }).(pulumi.IntPtrOutput)
}

// InternalTrafficPolicy describes how nodes distribute service traffic they
// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
// only want to talk to endpoints of the service on the same node as the pod,
// dropping the traffic if there are no local endpoints. The default value,
// "Cluster", uses the standard behavior of routing to all endpoints evenly
// (possibly modified by topology and other features).
func (o ElasticsearchSpecHttpServiceSpecOutput) InternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) *string { return v.InternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
// service. This field is usually assigned automatically based on cluster
// configuration and the ipFamilyPolicy field. If this field is specified
// manually, the requested family is available in the cluster,
// and ipFamilyPolicy allows it, it will be used; otherwise creation of
// the service will fail. This field is conditionally mutable: it allows
// for adding or removing a secondary IP family, but it does not allow
// changing the primary IP family of the Service. Valid values are "IPv4"
// and "IPv6".  This field only applies to Services of types ClusterIP,
// NodePort, and LoadBalancer, and does apply to "headless" services.
// This field will be wiped when updating a Service to type ExternalName.
//
// This field may hold a maximum of two entries (dual-stack families, in
// either order).  These families must correspond to the values of the
// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
// governed by the ipFamilyPolicy field.
func (o ElasticsearchSpecHttpServiceSpecOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) []string { return v.IpFamilies }).(pulumi.StringArrayOutput)
}

// IPFamilyPolicy represents the dual-stack-ness requested or required by
// this Service. If there is no value provided, then this field will be set
// to SingleStack. Services can be "SingleStack" (a single IP family),
// "PreferDualStack" (two IP families on dual-stack configured clusters or
// a single IP family on single-stack clusters), or "RequireDualStack"
// (two IP families on dual-stack configured clusters, otherwise fail). The
// ipFamilies and clusterIPs fields depend on the value of this field. This
// field will be wiped when updating a service to type ExternalName.
func (o ElasticsearchSpecHttpServiceSpecOutput) IpFamilyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) *string { return v.IpFamilyPolicy }).(pulumi.StringPtrOutput)
}

// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
// If specified, the value of this field must be a label-style identifier, with an optional prefix,
// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
// balancer implementation is used, today this is typically done through the cloud provider integration,
// but should apply for any default implementation. If set, it is assumed that a load balancer
// implementation is watching for Services with a matching class. Any default load balancer
// implementation (e.g. cloud providers) should ignore Services that set this field.
// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
func (o ElasticsearchSpecHttpServiceSpecOutput) LoadBalancerClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) *string { return v.LoadBalancerClass }).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer.
// This feature depends on whether the underlying cloud-provider supports specifying
// the loadBalancerIP when a load balancer is created.
// This field will be ignored if the cloud-provider does not support the feature.
// Deprecated: This field was under-specified and its meaning varies across implementations.
// Using it is non-portable and it may not support dual-stack.
// Users are encouraged to use implementation-specific annotations when available.
func (o ElasticsearchSpecHttpServiceSpecOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) *string { return v.LoadBalancerIP }).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider
// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
// cloud-provider does not support the feature."
// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
func (o ElasticsearchSpecHttpServiceSpecOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) []string { return v.LoadBalancerSourceRanges }).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecHttpServiceSpecOutput) Ports() ElasticsearchSpecHttpServiceSpecPortsArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) []ElasticsearchSpecHttpServiceSpecPorts { return v.Ports }).(ElasticsearchSpecHttpServiceSpecPortsArrayOutput)
}

// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
// Service should disregard any indications of ready/not-ready.
// The primary use case for setting this field is for a StatefulSet's Headless Service to
// propagate SRV DNS records for its Pods for the purpose of peer discovery.
// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
// Services interpret this to mean that all endpoints are considered "ready" even if the
// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
// through the Endpoints or EndpointSlice resources can safely assume this behavior.
func (o ElasticsearchSpecHttpServiceSpecOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) *bool { return v.PublishNotReadyAddresses }).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this
// selector. If empty or not present, the service is assumed to have an
// external process managing its endpoints, which Kubernetes will not
// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
// Ignored if type is ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o ElasticsearchSpecHttpServiceSpecOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) map[string]string { return v.Selector }).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity.
// Enable client IP based session affinity.
// Must be ClientIP or None.
// Defaults to None.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecHttpServiceSpecOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) *string { return v.SessionAffinity }).(pulumi.StringPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
func (o ElasticsearchSpecHttpServiceSpecOutput) SessionAffinityConfig() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) *ElasticsearchSpecHttpServiceSpecSessionAffinityConfig {
		return v.SessionAffinityConfig
	}).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// TrafficDistribution offers a way to express preferences for how traffic is
// distributed to Service endpoints. Implementations can use this field as a
// hint, but are not required to guarantee strict adherence. If the field is
// not set, the implementation will apply its default routing strategy. If set
// to "PreferClose", implementations should prioritize endpoints that are
// topologically close (e.g., same zone).
// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
func (o ElasticsearchSpecHttpServiceSpecOutput) TrafficDistribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) *string { return v.TrafficDistribution }).(pulumi.StringPtrOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid
// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
// "ClusterIP" allocates a cluster-internal IP address for load-balancing
// to endpoints. Endpoints are determined by the selector or if that is not
// specified, by manual construction of an Endpoints object or
// EndpointSlice objects. If clusterIP is "None", no virtual IP is
// allocated and the endpoints are published as a set of endpoints rather
// than a virtual IP.
// "NodePort" builds on ClusterIP and allocates a port on every node which
// routes to the same endpoints as the clusterIP.
// "LoadBalancer" builds on NodePort and creates an external load-balancer
// (if supported in the current cloud) which routes to the same endpoints
// as the clusterIP.
// "ExternalName" aliases this service to the specified externalName.
// Several other fields do not apply to ExternalName services.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o ElasticsearchSpecHttpServiceSpecOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpec) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecHttpServiceSpecPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpServiceSpec)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceSpecPtrOutput) ToElasticsearchSpecHttpServiceSpecPtrOutput() ElasticsearchSpecHttpServiceSpecPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecPtrOutput) ToElasticsearchSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecPtrOutput) Elem() ElasticsearchSpecHttpServiceSpecOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) ElasticsearchSpecHttpServiceSpec {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecHttpServiceSpec
		return ret
	}).(ElasticsearchSpecHttpServiceSpecOutput)
}

// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
// allocated for services with type LoadBalancer.  Default is "true". It
// may be set to "false" if the cluster load-balancer does not rely on
// NodePorts.  If the caller requests specific NodePorts (by specifying a
// value), those requests will be respected, regardless of this field.
// This field may only be set for services with type LoadBalancer and will
// be cleared if the type is changed to any other type.
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) AllocateLoadBalancerNodePorts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.AllocateLoadBalancerNodePorts
	}).(pulumi.BoolPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned
// randomly. If an address is specified manually, is in-range (as per
// system configuration), and is not in use, it will be allocated to the
// service; otherwise creation of the service will fail. This field may not
// be changed through updates unless the type field is also being changed
// to ExternalName (which requires this field to be blank) or the type
// field is being changed from ExternalName (in which case this field may
// optionally be specified, as describe above).  Valid values are "None",
// empty string (""), or a valid IP address. Setting this to "None" makes a
// "headless service" (no virtual IP), which is useful when direct endpoint
// connections are preferred and proxying is not required.  Only applies to
// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
// when creating a Service of type ExternalName, creation will fail. This
// field will be wiped when updating a Service to type ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ClusterIP
	}).(pulumi.StringPtrOutput)
}

// ClusterIPs is a list of IP addresses assigned to this service, and are
// usually assigned randomly.  If an address is specified manually, is
// in-range (as per system configuration), and is not in use, it will be
// allocated to the service; otherwise creation of the service will fail.
// This field may not be changed through updates unless the type field is
// also being changed to ExternalName (which requires this field to be
// empty) or the type field is being changed from ExternalName (in which
// case this field may optionally be specified, as describe above).  Valid
// values are "None", empty string (""), or a valid IP address.  Setting
// this to "None" makes a "headless service" (no virtual IP), which is
// useful when direct endpoint connections are preferred and proxying is
// not required.  Only applies to types ClusterIP, NodePort, and
// LoadBalancer. If this field is specified when creating a Service of type
// ExternalName, creation will fail. This field will be wiped when updating
// a Service to type ExternalName.  If this field is not specified, it will
// be initialized from the clusterIP field.  If this field is specified,
// clients must ensure that clusterIPs[0] and clusterIP have the same
// value.
//
// This field may hold a maximum of two entries (dual-stack IPs, in either order).
// These IPs must correspond to the values of the ipFamilies field. Both
// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) ClusterIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.ClusterIPs
	}).(pulumi.StringArrayOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster
// will also accept traffic for this service.  These IPs are not managed by
// Kubernetes.  The user is responsible for ensuring that traffic arrives
// at a node with this IP.  A common example is external load-balancers
// that are not part of the Kubernetes system.
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.ExternalIPs
	}).(pulumi.StringArrayOutput)
}

// externalName is the external reference that discovery mechanisms will
// return as an alias for this service (e.g. a DNS CNAME record). No
// proxying will be involved.  Must be a lowercase RFC-1123 hostname
// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ExternalName
	}).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy describes how nodes distribute service traffic they
// receive on one of the Service's "externally-facing" addresses (NodePorts,
// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
// the service in a way that assumes that external load balancers will take care
// of balancing the service traffic between nodes, and so each node will deliver
// traffic only to the node-local endpoints of the service, without masquerading
// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
// be dropped.) The default value, "Cluster", uses the standard behavior of
// routing to all endpoints evenly (possibly modified by topology and other
// features). Note that traffic sent to an External IP or LoadBalancer IP from
// within the cluster will always get "Cluster" semantics, but clients sending to
// a NodePort from within the cluster may need to take traffic policy into account
// when picking a node.
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ExternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service.
// This only applies when type is set to LoadBalancer and
// externalTrafficPolicy is set to Local. If a value is specified, is
// in-range, and is not in use, it will be used.  If not specified, a value
// will be automatically allocated.  External systems (e.g. load-balancers)
// can use this port to determine if a given node holds endpoints for this
// service or not.  If this field is specified when creating a Service
// which does not need it, creation will fail. This field will be wiped
// when updating a Service to no longer need it (e.g. changing type).
// This field cannot be updated once set.
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) *int {
		if v == nil {
			return nil
		}
		return v.HealthCheckNodePort
	}).(pulumi.IntPtrOutput)
}

// InternalTrafficPolicy describes how nodes distribute service traffic they
// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
// only want to talk to endpoints of the service on the same node as the pod,
// dropping the traffic if there are no local endpoints. The default value,
// "Cluster", uses the standard behavior of routing to all endpoints evenly
// (possibly modified by topology and other features).
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) InternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.InternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
// service. This field is usually assigned automatically based on cluster
// configuration and the ipFamilyPolicy field. If this field is specified
// manually, the requested family is available in the cluster,
// and ipFamilyPolicy allows it, it will be used; otherwise creation of
// the service will fail. This field is conditionally mutable: it allows
// for adding or removing a secondary IP family, but it does not allow
// changing the primary IP family of the Service. Valid values are "IPv4"
// and "IPv6".  This field only applies to Services of types ClusterIP,
// NodePort, and LoadBalancer, and does apply to "headless" services.
// This field will be wiped when updating a Service to type ExternalName.
//
// This field may hold a maximum of two entries (dual-stack families, in
// either order).  These families must correspond to the values of the
// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
// governed by the ipFamilyPolicy field.
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.IpFamilies
	}).(pulumi.StringArrayOutput)
}

// IPFamilyPolicy represents the dual-stack-ness requested or required by
// this Service. If there is no value provided, then this field will be set
// to SingleStack. Services can be "SingleStack" (a single IP family),
// "PreferDualStack" (two IP families on dual-stack configured clusters or
// a single IP family on single-stack clusters), or "RequireDualStack"
// (two IP families on dual-stack configured clusters, otherwise fail). The
// ipFamilies and clusterIPs fields depend on the value of this field. This
// field will be wiped when updating a service to type ExternalName.
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) IpFamilyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.IpFamilyPolicy
	}).(pulumi.StringPtrOutput)
}

// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
// If specified, the value of this field must be a label-style identifier, with an optional prefix,
// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
// balancer implementation is used, today this is typically done through the cloud provider integration,
// but should apply for any default implementation. If set, it is assumed that a load balancer
// implementation is watching for Services with a matching class. Any default load balancer
// implementation (e.g. cloud providers) should ignore Services that set this field.
// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) LoadBalancerClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerClass
	}).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer.
// This feature depends on whether the underlying cloud-provider supports specifying
// the loadBalancerIP when a load balancer is created.
// This field will be ignored if the cloud-provider does not support the feature.
// Deprecated: This field was under-specified and its meaning varies across implementations.
// Using it is non-portable and it may not support dual-stack.
// Users are encouraged to use implementation-specific annotations when available.
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerIP
	}).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider
// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
// cloud-provider does not support the feature."
// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSourceRanges
	}).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) Ports() ElasticsearchSpecHttpServiceSpecPortsArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) []ElasticsearchSpecHttpServiceSpecPorts {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(ElasticsearchSpecHttpServiceSpecPortsArrayOutput)
}

// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
// Service should disregard any indications of ready/not-ready.
// The primary use case for setting this field is for a StatefulSet's Headless Service to
// propagate SRV DNS records for its Pods for the purpose of peer discovery.
// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
// Services interpret this to mean that all endpoints are considered "ready" even if the
// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
// through the Endpoints or EndpointSlice resources can safely assume this behavior.
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.PublishNotReadyAddresses
	}).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this
// selector. If empty or not present, the service is assumed to have an
// external process managing its endpoints, which Kubernetes will not
// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
// Ignored if type is ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity.
// Enable client IP based session affinity.
// Must be ClientIP or None.
// Defaults to None.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.SessionAffinity
	}).(pulumi.StringPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) SessionAffinityConfig() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) *ElasticsearchSpecHttpServiceSpecSessionAffinityConfig {
		if v == nil {
			return nil
		}
		return v.SessionAffinityConfig
	}).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// TrafficDistribution offers a way to express preferences for how traffic is
// distributed to Service endpoints. Implementations can use this field as a
// hint, but are not required to guarantee strict adherence. If the field is
// not set, the implementation will apply its default routing strategy. If set
// to "PreferClose", implementations should prioritize endpoints that are
// topologically close (e.g., same zone).
// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) TrafficDistribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.TrafficDistribution
	}).(pulumi.StringPtrOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid
// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
// "ClusterIP" allocates a cluster-internal IP address for load-balancing
// to endpoints. Endpoints are determined by the selector or if that is not
// specified, by manual construction of an Endpoints object or
// EndpointSlice objects. If clusterIP is "None", no virtual IP is
// allocated and the endpoints are published as a set of endpoints rather
// than a virtual IP.
// "NodePort" builds on ClusterIP and allocates a port on every node which
// routes to the same endpoints as the clusterIP.
// "LoadBalancer" builds on NodePort and creates an external load-balancer
// (if supported in the current cloud) which routes to the same endpoints
// as the clusterIP.
// "ExternalName" aliases this service to the specified externalName.
// Several other fields do not apply to ExternalName services.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o ElasticsearchSpecHttpServiceSpecPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// ServicePort contains information on service's port.
type ElasticsearchSpecHttpServiceSpecPorts struct {
	// The application protocol for this port.
	// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
	// This field follows standard Kubernetes label syntax.
	// Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per
	// RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
	//   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
	//   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
	//
	// * Other protocols should use implementation-defined prefixed names such as
	// mycompany.com/my-custom-protocol.
	AppProtocol *string `pulumi:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL.
	// All ports within a ServiceSpec must have unique names. When considering
	// the endpoints for a Service, this must match the 'name' field in the
	// EndpointPort.
	// Optional if only one ServicePort is defined on this service.
	Name *string `pulumi:"name"`
	// The port on each node on which this service is exposed when type is
	// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
	// specified, in-range, and not in use it will be used, otherwise the
	// operation will fail.  If not specified, a port will be allocated if this
	// Service requires one.  If this field is specified when creating a
	// Service which does not need it, creation will fail. This field will be
	// wiped when updating a Service to no longer need it (e.g. changing type
	// from NodePort to ClusterIP).
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort *int `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port int `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
	// Default is TCP.
	Protocol *string `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service.
	// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	// If this is a string, it will be looked up as a named port in the
	// target Pod's container ports. If this is not specified, the value
	// of the 'port' field is used (an identity map).
	// This field is ignored for services with clusterIP=None, and should be
	// omitted or set equal to the 'port' field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort interface{} `pulumi:"targetPort"`
}

// Defaults sets the appropriate defaults for ElasticsearchSpecHttpServiceSpecPorts
func (val *ElasticsearchSpecHttpServiceSpecPorts) Defaults() *ElasticsearchSpecHttpServiceSpecPorts {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		protocol_ := "TCP"
		tmp.Protocol = &protocol_
	}
	return &tmp
}

// ElasticsearchSpecHttpServiceSpecPortsInput is an input type that accepts ElasticsearchSpecHttpServiceSpecPortsArgs and ElasticsearchSpecHttpServiceSpecPortsOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceSpecPortsInput` via:
//
//	ElasticsearchSpecHttpServiceSpecPortsArgs{...}
type ElasticsearchSpecHttpServiceSpecPortsInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceSpecPortsOutput() ElasticsearchSpecHttpServiceSpecPortsOutput
	ToElasticsearchSpecHttpServiceSpecPortsOutputWithContext(context.Context) ElasticsearchSpecHttpServiceSpecPortsOutput
}

// ServicePort contains information on service's port.
type ElasticsearchSpecHttpServiceSpecPortsArgs struct {
	// The application protocol for this port.
	// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
	// This field follows standard Kubernetes label syntax.
	// Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per
	// RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
	//   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
	//   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
	//
	// * Other protocols should use implementation-defined prefixed names such as
	// mycompany.com/my-custom-protocol.
	AppProtocol pulumi.StringPtrInput `pulumi:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL.
	// All ports within a ServiceSpec must have unique names. When considering
	// the endpoints for a Service, this must match the 'name' field in the
	// EndpointPort.
	// Optional if only one ServicePort is defined on this service.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port on each node on which this service is exposed when type is
	// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
	// specified, in-range, and not in use it will be used, otherwise the
	// operation will fail.  If not specified, a port will be allocated if this
	// Service requires one.  If this field is specified when creating a
	// Service which does not need it, creation will fail. This field will be
	// wiped when updating a Service to no longer need it (e.g. changing type
	// from NodePort to ClusterIP).
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort pulumi.IntPtrInput `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port pulumi.IntInput `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
	// Default is TCP.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service.
	// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	// If this is a string, it will be looked up as a named port in the
	// target Pod's container ports. If this is not specified, the value
	// of the 'port' field is used (an identity map).
	// This field is ignored for services with clusterIP=None, and should be
	// omitted or set equal to the 'port' field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort pulumi.Input `pulumi:"targetPort"`
}

// Defaults sets the appropriate defaults for ElasticsearchSpecHttpServiceSpecPortsArgs
func (val *ElasticsearchSpecHttpServiceSpecPortsArgs) Defaults() *ElasticsearchSpecHttpServiceSpecPortsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		tmp.Protocol = pulumi.StringPtr("TCP")
	}
	return &tmp
}
func (ElasticsearchSpecHttpServiceSpecPortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (i ElasticsearchSpecHttpServiceSpecPortsArgs) ToElasticsearchSpecHttpServiceSpecPortsOutput() ElasticsearchSpecHttpServiceSpecPortsOutput {
	return i.ToElasticsearchSpecHttpServiceSpecPortsOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceSpecPortsArgs) ToElasticsearchSpecHttpServiceSpecPortsOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecPortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecPortsOutput)
}

// ElasticsearchSpecHttpServiceSpecPortsArrayInput is an input type that accepts ElasticsearchSpecHttpServiceSpecPortsArray and ElasticsearchSpecHttpServiceSpecPortsArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceSpecPortsArrayInput` via:
//
//	ElasticsearchSpecHttpServiceSpecPortsArray{ ElasticsearchSpecHttpServiceSpecPortsArgs{...} }
type ElasticsearchSpecHttpServiceSpecPortsArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceSpecPortsArrayOutput() ElasticsearchSpecHttpServiceSpecPortsArrayOutput
	ToElasticsearchSpecHttpServiceSpecPortsArrayOutputWithContext(context.Context) ElasticsearchSpecHttpServiceSpecPortsArrayOutput
}

type ElasticsearchSpecHttpServiceSpecPortsArray []ElasticsearchSpecHttpServiceSpecPortsInput

func (ElasticsearchSpecHttpServiceSpecPortsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (i ElasticsearchSpecHttpServiceSpecPortsArray) ToElasticsearchSpecHttpServiceSpecPortsArrayOutput() ElasticsearchSpecHttpServiceSpecPortsArrayOutput {
	return i.ToElasticsearchSpecHttpServiceSpecPortsArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceSpecPortsArray) ToElasticsearchSpecHttpServiceSpecPortsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecPortsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecPortsArrayOutput)
}

// ServicePort contains information on service's port.
type ElasticsearchSpecHttpServiceSpecPortsOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceSpecPortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceSpecPortsOutput) ToElasticsearchSpecHttpServiceSpecPortsOutput() ElasticsearchSpecHttpServiceSpecPortsOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecPortsOutput) ToElasticsearchSpecHttpServiceSpecPortsOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecPortsOutput {
	return o
}

// The application protocol for this port.
// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
// This field follows standard Kubernetes label syntax.
// Valid values are either:
//
// * Un-prefixed protocol names - reserved for IANA standard service names (as per
// RFC-6335 and https://www.iana.org/assignments/service-names).
//
// * Kubernetes-defined prefixed names:
//   - 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
//   - 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
//   - 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
//
// * Other protocols should use implementation-defined prefixed names such as
// mycompany.com/my-custom-protocol.
func (o ElasticsearchSpecHttpServiceSpecPortsOutput) AppProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPorts) *string { return v.AppProtocol }).(pulumi.StringPtrOutput)
}

// The name of this port within the service. This must be a DNS_LABEL.
// All ports within a ServiceSpec must have unique names. When considering
// the endpoints for a Service, this must match the 'name' field in the
// EndpointPort.
// Optional if only one ServicePort is defined on this service.
func (o ElasticsearchSpecHttpServiceSpecPortsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPorts) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port on each node on which this service is exposed when type is
// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
// specified, in-range, and not in use it will be used, otherwise the
// operation will fail.  If not specified, a port will be allocated if this
// Service requires one.  If this field is specified when creating a
// Service which does not need it, creation will fail. This field will be
// wiped when updating a Service to no longer need it (e.g. changing type
// from NodePort to ClusterIP).
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
func (o ElasticsearchSpecHttpServiceSpecPortsOutput) NodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPorts) *int { return v.NodePort }).(pulumi.IntPtrOutput)
}

// The port that will be exposed by this service.
func (o ElasticsearchSpecHttpServiceSpecPortsOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPorts) int { return v.Port }).(pulumi.IntOutput)
}

// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
// Default is TCP.
func (o ElasticsearchSpecHttpServiceSpecPortsOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPorts) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the pods targeted by the service.
// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
// If this is a string, it will be looked up as a named port in the
// target Pod's container ports. If this is not specified, the value
// of the 'port' field is used (an identity map).
// This field is ignored for services with clusterIP=None, and should be
// omitted or set equal to the 'port' field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
func (o ElasticsearchSpecHttpServiceSpecPortsOutput) TargetPort() pulumi.AnyOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecPorts) interface{} { return v.TargetPort }).(pulumi.AnyOutput)
}

type ElasticsearchSpecHttpServiceSpecPortsArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceSpecPortsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceSpecPortsArrayOutput) ToElasticsearchSpecHttpServiceSpecPortsArrayOutput() ElasticsearchSpecHttpServiceSpecPortsArrayOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecPortsArrayOutput) ToElasticsearchSpecHttpServiceSpecPortsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecPortsArrayOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecPortsArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecHttpServiceSpecPortsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecHttpServiceSpecPorts {
		return vs[0].([]ElasticsearchSpecHttpServiceSpecPorts)[vs[1].(int)]
	}).(ElasticsearchSpecHttpServiceSpecPortsOutput)
}

// Route service traffic to pods with label keys and values matching this
// selector. If empty or not present, the service is assumed to have an
// external process managing its endpoints, which Kubernetes will not
// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
// Ignored if type is ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
type ElasticsearchSpecHttpServiceSpecSelector struct {
}

// sessionAffinityConfig contains the configurations of session affinity.
type ElasticsearchSpecHttpServiceSpecSessionAffinityConfig struct {
	// clientIP contains the configurations of Client IP based session affinity.
	ClientIP *ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIp `pulumi:"clientIP"`
}

// ElasticsearchSpecHttpServiceSpecSessionAffinityConfigInput is an input type that accepts ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs and ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceSpecSessionAffinityConfigInput` via:
//
//	ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs{...}
type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput
	ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput
}

// sessionAffinityConfig contains the configurations of session affinity.
type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs struct {
	// clientIP contains the configurations of Client IP based session affinity.
	ClientIP ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrInput `pulumi:"clientIP"`
}

func (ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (i ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput {
	return i.ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput)
}

func (i ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return i.ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput).ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx)
}

// ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrInput is an input type that accepts ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs, ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtr and ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrInput` via:
//
//	        ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput
	ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput
}

type elasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrType ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs

func ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtr(v *ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrInput {
	return (*elasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrType)(v)
}

func (*elasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (i *elasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrType) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return i.ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrType) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecHttpServiceSpecSessionAffinityConfig) *ElasticsearchSpecHttpServiceSpecSessionAffinityConfig {
		return &v
	}).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput) ClientIP() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecSessionAffinityConfig) *ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIp {
		return v.ClientIP
	}).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput)
}

type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput) Elem() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecSessionAffinityConfig) ElasticsearchSpecHttpServiceSpecSessionAffinityConfig {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecHttpServiceSpecSessionAffinityConfig
		return ret
	}).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ClientIP() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecSessionAffinityConfig) *ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIp {
		if v == nil {
			return nil
		}
		return v.ClientIP
	}).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIp struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
	// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
	// Default value is 10800(for 3 hours).
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpInput is an input type that accepts ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpArgs and ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpInput` via:
//
//	ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpArgs{...}
type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput
	ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutputWithContext(context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput
}

// clientIP contains the configurations of Client IP based session affinity.
type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpArgs struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
	// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
	// Default value is 10800(for 3 hours).
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIp)(nil)).Elem()
}

func (i ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpArgs) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput {
	return i.ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpArgs) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput)
}

func (i ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpArgs) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return i.ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpArgs) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput).ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(ctx)
}

// ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrInput is an input type that accepts ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpArgs, ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtr and ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrInput` via:
//
//	        ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput
	ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput
}

type elasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrType ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpArgs

func ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtr(v *ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpArgs) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrInput {
	return (*elasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrType)(v)
}

func (*elasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIp)(nil)).Elem()
}

func (i *elasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrType) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return i.ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrType) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIp)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o.ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIp) *ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIp {
		return &v
	}).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
// Default value is 10800(for 3 hours).
func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIp) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIp)(nil)).Elem()
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput) ToElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput) Elem() ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIp) ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIp {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIp
		return ret
	}).(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
// Default value is 10800(for 3 hours).
func (o ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIp) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
type ElasticsearchSpecHttpTls struct {
	// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
	// The referenced secret should contain the following:
	//
	// - `ca.crt`: The certificate authority (optional).
	// - `tls.crt`: The certificate (or a chain).
	// - `tls.key`: The private key to the first certificate in the certificate chain.
	Certificate *ElasticsearchSpecHttpTlsCertificate `pulumi:"certificate"`
	// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
	SelfSignedCertificate *ElasticsearchSpecHttpTlsSelfSignedCertificate `pulumi:"selfSignedCertificate"`
}

// ElasticsearchSpecHttpTlsInput is an input type that accepts ElasticsearchSpecHttpTlsArgs and ElasticsearchSpecHttpTlsOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpTlsInput` via:
//
//	ElasticsearchSpecHttpTlsArgs{...}
type ElasticsearchSpecHttpTlsInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpTlsOutput() ElasticsearchSpecHttpTlsOutput
	ToElasticsearchSpecHttpTlsOutputWithContext(context.Context) ElasticsearchSpecHttpTlsOutput
}

// TLS defines options for configuring TLS for HTTP.
type ElasticsearchSpecHttpTlsArgs struct {
	// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
	// The referenced secret should contain the following:
	//
	// - `ca.crt`: The certificate authority (optional).
	// - `tls.crt`: The certificate (or a chain).
	// - `tls.key`: The private key to the first certificate in the certificate chain.
	Certificate ElasticsearchSpecHttpTlsCertificatePtrInput `pulumi:"certificate"`
	// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
	SelfSignedCertificate ElasticsearchSpecHttpTlsSelfSignedCertificatePtrInput `pulumi:"selfSignedCertificate"`
}

func (ElasticsearchSpecHttpTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpTls)(nil)).Elem()
}

func (i ElasticsearchSpecHttpTlsArgs) ToElasticsearchSpecHttpTlsOutput() ElasticsearchSpecHttpTlsOutput {
	return i.ToElasticsearchSpecHttpTlsOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpTlsArgs) ToElasticsearchSpecHttpTlsOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsOutput)
}

func (i ElasticsearchSpecHttpTlsArgs) ToElasticsearchSpecHttpTlsPtrOutput() ElasticsearchSpecHttpTlsPtrOutput {
	return i.ToElasticsearchSpecHttpTlsPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpTlsArgs) ToElasticsearchSpecHttpTlsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsOutput).ToElasticsearchSpecHttpTlsPtrOutputWithContext(ctx)
}

// ElasticsearchSpecHttpTlsPtrInput is an input type that accepts ElasticsearchSpecHttpTlsArgs, ElasticsearchSpecHttpTlsPtr and ElasticsearchSpecHttpTlsPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpTlsPtrInput` via:
//
//	        ElasticsearchSpecHttpTlsArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecHttpTlsPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpTlsPtrOutput() ElasticsearchSpecHttpTlsPtrOutput
	ToElasticsearchSpecHttpTlsPtrOutputWithContext(context.Context) ElasticsearchSpecHttpTlsPtrOutput
}

type elasticsearchSpecHttpTlsPtrType ElasticsearchSpecHttpTlsArgs

func ElasticsearchSpecHttpTlsPtr(v *ElasticsearchSpecHttpTlsArgs) ElasticsearchSpecHttpTlsPtrInput {
	return (*elasticsearchSpecHttpTlsPtrType)(v)
}

func (*elasticsearchSpecHttpTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpTls)(nil)).Elem()
}

func (i *elasticsearchSpecHttpTlsPtrType) ToElasticsearchSpecHttpTlsPtrOutput() ElasticsearchSpecHttpTlsPtrOutput {
	return i.ToElasticsearchSpecHttpTlsPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecHttpTlsPtrType) ToElasticsearchSpecHttpTlsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsPtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
type ElasticsearchSpecHttpTlsOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpTls)(nil)).Elem()
}

func (o ElasticsearchSpecHttpTlsOutput) ToElasticsearchSpecHttpTlsOutput() ElasticsearchSpecHttpTlsOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsOutput) ToElasticsearchSpecHttpTlsOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsOutput) ToElasticsearchSpecHttpTlsPtrOutput() ElasticsearchSpecHttpTlsPtrOutput {
	return o.ToElasticsearchSpecHttpTlsPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecHttpTlsOutput) ToElasticsearchSpecHttpTlsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecHttpTls) *ElasticsearchSpecHttpTls {
		return &v
	}).(ElasticsearchSpecHttpTlsPtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
func (o ElasticsearchSpecHttpTlsOutput) Certificate() ElasticsearchSpecHttpTlsCertificatePtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpTls) *ElasticsearchSpecHttpTlsCertificate { return v.Certificate }).(ElasticsearchSpecHttpTlsCertificatePtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
func (o ElasticsearchSpecHttpTlsOutput) SelfSignedCertificate() ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpTls) *ElasticsearchSpecHttpTlsSelfSignedCertificate {
		return v.SelfSignedCertificate
	}).(ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput)
}

type ElasticsearchSpecHttpTlsPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpTls)(nil)).Elem()
}

func (o ElasticsearchSpecHttpTlsPtrOutput) ToElasticsearchSpecHttpTlsPtrOutput() ElasticsearchSpecHttpTlsPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsPtrOutput) ToElasticsearchSpecHttpTlsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsPtrOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsPtrOutput) Elem() ElasticsearchSpecHttpTlsOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpTls) ElasticsearchSpecHttpTls {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecHttpTls
		return ret
	}).(ElasticsearchSpecHttpTlsOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
func (o ElasticsearchSpecHttpTlsPtrOutput) Certificate() ElasticsearchSpecHttpTlsCertificatePtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpTls) *ElasticsearchSpecHttpTlsCertificate {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(ElasticsearchSpecHttpTlsCertificatePtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
func (o ElasticsearchSpecHttpTlsPtrOutput) SelfSignedCertificate() ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpTls) *ElasticsearchSpecHttpTlsSelfSignedCertificate {
		if v == nil {
			return nil
		}
		return v.SelfSignedCertificate
	}).(ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
type ElasticsearchSpecHttpTlsCertificate struct {
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// ElasticsearchSpecHttpTlsCertificateInput is an input type that accepts ElasticsearchSpecHttpTlsCertificateArgs and ElasticsearchSpecHttpTlsCertificateOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpTlsCertificateInput` via:
//
//	ElasticsearchSpecHttpTlsCertificateArgs{...}
type ElasticsearchSpecHttpTlsCertificateInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpTlsCertificateOutput() ElasticsearchSpecHttpTlsCertificateOutput
	ToElasticsearchSpecHttpTlsCertificateOutputWithContext(context.Context) ElasticsearchSpecHttpTlsCertificateOutput
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
type ElasticsearchSpecHttpTlsCertificateArgs struct {
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (ElasticsearchSpecHttpTlsCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpTlsCertificate)(nil)).Elem()
}

func (i ElasticsearchSpecHttpTlsCertificateArgs) ToElasticsearchSpecHttpTlsCertificateOutput() ElasticsearchSpecHttpTlsCertificateOutput {
	return i.ToElasticsearchSpecHttpTlsCertificateOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpTlsCertificateArgs) ToElasticsearchSpecHttpTlsCertificateOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsCertificateOutput)
}

func (i ElasticsearchSpecHttpTlsCertificateArgs) ToElasticsearchSpecHttpTlsCertificatePtrOutput() ElasticsearchSpecHttpTlsCertificatePtrOutput {
	return i.ToElasticsearchSpecHttpTlsCertificatePtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpTlsCertificateArgs) ToElasticsearchSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsCertificateOutput).ToElasticsearchSpecHttpTlsCertificatePtrOutputWithContext(ctx)
}

// ElasticsearchSpecHttpTlsCertificatePtrInput is an input type that accepts ElasticsearchSpecHttpTlsCertificateArgs, ElasticsearchSpecHttpTlsCertificatePtr and ElasticsearchSpecHttpTlsCertificatePtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpTlsCertificatePtrInput` via:
//
//	        ElasticsearchSpecHttpTlsCertificateArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecHttpTlsCertificatePtrInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpTlsCertificatePtrOutput() ElasticsearchSpecHttpTlsCertificatePtrOutput
	ToElasticsearchSpecHttpTlsCertificatePtrOutputWithContext(context.Context) ElasticsearchSpecHttpTlsCertificatePtrOutput
}

type elasticsearchSpecHttpTlsCertificatePtrType ElasticsearchSpecHttpTlsCertificateArgs

func ElasticsearchSpecHttpTlsCertificatePtr(v *ElasticsearchSpecHttpTlsCertificateArgs) ElasticsearchSpecHttpTlsCertificatePtrInput {
	return (*elasticsearchSpecHttpTlsCertificatePtrType)(v)
}

func (*elasticsearchSpecHttpTlsCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpTlsCertificate)(nil)).Elem()
}

func (i *elasticsearchSpecHttpTlsCertificatePtrType) ToElasticsearchSpecHttpTlsCertificatePtrOutput() ElasticsearchSpecHttpTlsCertificatePtrOutput {
	return i.ToElasticsearchSpecHttpTlsCertificatePtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecHttpTlsCertificatePtrType) ToElasticsearchSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsCertificatePtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
type ElasticsearchSpecHttpTlsCertificateOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpTlsCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpTlsCertificate)(nil)).Elem()
}

func (o ElasticsearchSpecHttpTlsCertificateOutput) ToElasticsearchSpecHttpTlsCertificateOutput() ElasticsearchSpecHttpTlsCertificateOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsCertificateOutput) ToElasticsearchSpecHttpTlsCertificateOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsCertificateOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsCertificateOutput) ToElasticsearchSpecHttpTlsCertificatePtrOutput() ElasticsearchSpecHttpTlsCertificatePtrOutput {
	return o.ToElasticsearchSpecHttpTlsCertificatePtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecHttpTlsCertificateOutput) ToElasticsearchSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecHttpTlsCertificate) *ElasticsearchSpecHttpTlsCertificate {
		return &v
	}).(ElasticsearchSpecHttpTlsCertificatePtrOutput)
}

// SecretName is the name of the secret.
func (o ElasticsearchSpecHttpTlsCertificateOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpTlsCertificate) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecHttpTlsCertificatePtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpTlsCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpTlsCertificate)(nil)).Elem()
}

func (o ElasticsearchSpecHttpTlsCertificatePtrOutput) ToElasticsearchSpecHttpTlsCertificatePtrOutput() ElasticsearchSpecHttpTlsCertificatePtrOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsCertificatePtrOutput) ToElasticsearchSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsCertificatePtrOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsCertificatePtrOutput) Elem() ElasticsearchSpecHttpTlsCertificateOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpTlsCertificate) ElasticsearchSpecHttpTlsCertificate {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecHttpTlsCertificate
		return ret
	}).(ElasticsearchSpecHttpTlsCertificateOutput)
}

// SecretName is the name of the secret.
func (o ElasticsearchSpecHttpTlsCertificatePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpTlsCertificate) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type ElasticsearchSpecHttpTlsSelfSignedCertificate struct {
	// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
	Disabled *bool `pulumi:"disabled"`
	// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
	SubjectAltNames []ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames `pulumi:"subjectAltNames"`
}

// ElasticsearchSpecHttpTlsSelfSignedCertificateInput is an input type that accepts ElasticsearchSpecHttpTlsSelfSignedCertificateArgs and ElasticsearchSpecHttpTlsSelfSignedCertificateOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpTlsSelfSignedCertificateInput` via:
//
//	ElasticsearchSpecHttpTlsSelfSignedCertificateArgs{...}
type ElasticsearchSpecHttpTlsSelfSignedCertificateInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpTlsSelfSignedCertificateOutput() ElasticsearchSpecHttpTlsSelfSignedCertificateOutput
	ToElasticsearchSpecHttpTlsSelfSignedCertificateOutputWithContext(context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificateOutput
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type ElasticsearchSpecHttpTlsSelfSignedCertificateArgs struct {
	// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
	SubjectAltNames ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput `pulumi:"subjectAltNames"`
}

func (ElasticsearchSpecHttpTlsSelfSignedCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (i ElasticsearchSpecHttpTlsSelfSignedCertificateArgs) ToElasticsearchSpecHttpTlsSelfSignedCertificateOutput() ElasticsearchSpecHttpTlsSelfSignedCertificateOutput {
	return i.ToElasticsearchSpecHttpTlsSelfSignedCertificateOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpTlsSelfSignedCertificateArgs) ToElasticsearchSpecHttpTlsSelfSignedCertificateOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsSelfSignedCertificateOutput)
}

func (i ElasticsearchSpecHttpTlsSelfSignedCertificateArgs) ToElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput() ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return i.ToElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpTlsSelfSignedCertificateArgs) ToElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsSelfSignedCertificateOutput).ToElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx)
}

// ElasticsearchSpecHttpTlsSelfSignedCertificatePtrInput is an input type that accepts ElasticsearchSpecHttpTlsSelfSignedCertificateArgs, ElasticsearchSpecHttpTlsSelfSignedCertificatePtr and ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpTlsSelfSignedCertificatePtrInput` via:
//
//	        ElasticsearchSpecHttpTlsSelfSignedCertificateArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecHttpTlsSelfSignedCertificatePtrInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput() ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput
	ToElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput
}

type elasticsearchSpecHttpTlsSelfSignedCertificatePtrType ElasticsearchSpecHttpTlsSelfSignedCertificateArgs

func ElasticsearchSpecHttpTlsSelfSignedCertificatePtr(v *ElasticsearchSpecHttpTlsSelfSignedCertificateArgs) ElasticsearchSpecHttpTlsSelfSignedCertificatePtrInput {
	return (*elasticsearchSpecHttpTlsSelfSignedCertificatePtrType)(v)
}

func (*elasticsearchSpecHttpTlsSelfSignedCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (i *elasticsearchSpecHttpTlsSelfSignedCertificatePtrType) ToElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput() ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return i.ToElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecHttpTlsSelfSignedCertificatePtrType) ToElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type ElasticsearchSpecHttpTlsSelfSignedCertificateOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpTlsSelfSignedCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificateOutput) ToElasticsearchSpecHttpTlsSelfSignedCertificateOutput() ElasticsearchSpecHttpTlsSelfSignedCertificateOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificateOutput) ToElasticsearchSpecHttpTlsSelfSignedCertificateOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificateOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificateOutput) ToElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput() ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ToElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificateOutput) ToElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecHttpTlsSelfSignedCertificate) *ElasticsearchSpecHttpTlsSelfSignedCertificate {
		return &v
	}).(ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput)
}

// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
func (o ElasticsearchSpecHttpTlsSelfSignedCertificateOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpTlsSelfSignedCertificate) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
func (o ElasticsearchSpecHttpTlsSelfSignedCertificateOutput) SubjectAltNames() ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpTlsSelfSignedCertificate) []ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames {
		return v.SubjectAltNames
	}).(ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput)
}

type ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput) ToElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput() ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput) ToElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput) Elem() ElasticsearchSpecHttpTlsSelfSignedCertificateOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpTlsSelfSignedCertificate) ElasticsearchSpecHttpTlsSelfSignedCertificate {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecHttpTlsSelfSignedCertificate
		return ret
	}).(ElasticsearchSpecHttpTlsSelfSignedCertificateOutput)
}

// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
func (o ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpTlsSelfSignedCertificate) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
func (o ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput) SubjectAltNames() ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecHttpTlsSelfSignedCertificate) []ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput)
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames struct {
	// DNS is the DNS name of the subject.
	Dns *string `pulumi:"dns"`
	// IP is the IP address of the subject.
	Ip *string `pulumi:"ip"`
}

// ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput is an input type that accepts ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs and ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput` via:
//
//	ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs{...}
type ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput() ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput
	ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs struct {
	// DNS is the DNS name of the subject.
	Dns pulumi.StringPtrInput `pulumi:"dns"`
	// IP is the IP address of the subject.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
}

func (ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (i ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs) ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput() ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return i.ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs) ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput)
}

// ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput is an input type that accepts ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray and ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput` via:
//
//	ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray{ ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs{...} }
type ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput() ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput
	ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput
}

type ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray []ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput

func (ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (i ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray) ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput() ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return i.ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray) ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput)
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput() ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return o
}

// DNS is the DNS name of the subject.
func (o ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) Dns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames) *string { return v.Dns }).(pulumi.StringPtrOutput)
}

// IP is the IP address of the subject.
func (o ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput() ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) ToElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(ctx context.Context) ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o
}

func (o ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames {
		return vs[0].([]ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNames)[vs[1].(int)]
	}).(ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput)
}

// Monitoring enables you to collect and ship log and monitoring data of this Elasticsearch cluster.
// See https://www.elastic.co/guide/en/elasticsearch/reference/current/monitor-elasticsearch-cluster.html.
// Metricbeat and Filebeat are deployed in the same Pod as sidecars and each one sends data to one or two different
// Elasticsearch monitoring clusters running in the same Kubernetes cluster.
type ElasticsearchSpecMonitoring struct {
	// Logs holds references to Elasticsearch clusters which receive log data from an associated resource.
	Logs *ElasticsearchSpecMonitoringLogs `pulumi:"logs"`
	// Metrics holds references to Elasticsearch clusters which receive monitoring data from this resource.
	Metrics *ElasticsearchSpecMonitoringMetrics `pulumi:"metrics"`
}

// ElasticsearchSpecMonitoringInput is an input type that accepts ElasticsearchSpecMonitoringArgs and ElasticsearchSpecMonitoringOutput values.
// You can construct a concrete instance of `ElasticsearchSpecMonitoringInput` via:
//
//	ElasticsearchSpecMonitoringArgs{...}
type ElasticsearchSpecMonitoringInput interface {
	pulumi.Input

	ToElasticsearchSpecMonitoringOutput() ElasticsearchSpecMonitoringOutput
	ToElasticsearchSpecMonitoringOutputWithContext(context.Context) ElasticsearchSpecMonitoringOutput
}

// Monitoring enables you to collect and ship log and monitoring data of this Elasticsearch cluster.
// See https://www.elastic.co/guide/en/elasticsearch/reference/current/monitor-elasticsearch-cluster.html.
// Metricbeat and Filebeat are deployed in the same Pod as sidecars and each one sends data to one or two different
// Elasticsearch monitoring clusters running in the same Kubernetes cluster.
type ElasticsearchSpecMonitoringArgs struct {
	// Logs holds references to Elasticsearch clusters which receive log data from an associated resource.
	Logs ElasticsearchSpecMonitoringLogsPtrInput `pulumi:"logs"`
	// Metrics holds references to Elasticsearch clusters which receive monitoring data from this resource.
	Metrics ElasticsearchSpecMonitoringMetricsPtrInput `pulumi:"metrics"`
}

func (ElasticsearchSpecMonitoringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecMonitoring)(nil)).Elem()
}

func (i ElasticsearchSpecMonitoringArgs) ToElasticsearchSpecMonitoringOutput() ElasticsearchSpecMonitoringOutput {
	return i.ToElasticsearchSpecMonitoringOutputWithContext(context.Background())
}

func (i ElasticsearchSpecMonitoringArgs) ToElasticsearchSpecMonitoringOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringOutput)
}

func (i ElasticsearchSpecMonitoringArgs) ToElasticsearchSpecMonitoringPtrOutput() ElasticsearchSpecMonitoringPtrOutput {
	return i.ToElasticsearchSpecMonitoringPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecMonitoringArgs) ToElasticsearchSpecMonitoringPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringOutput).ToElasticsearchSpecMonitoringPtrOutputWithContext(ctx)
}

// ElasticsearchSpecMonitoringPtrInput is an input type that accepts ElasticsearchSpecMonitoringArgs, ElasticsearchSpecMonitoringPtr and ElasticsearchSpecMonitoringPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecMonitoringPtrInput` via:
//
//	        ElasticsearchSpecMonitoringArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecMonitoringPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecMonitoringPtrOutput() ElasticsearchSpecMonitoringPtrOutput
	ToElasticsearchSpecMonitoringPtrOutputWithContext(context.Context) ElasticsearchSpecMonitoringPtrOutput
}

type elasticsearchSpecMonitoringPtrType ElasticsearchSpecMonitoringArgs

func ElasticsearchSpecMonitoringPtr(v *ElasticsearchSpecMonitoringArgs) ElasticsearchSpecMonitoringPtrInput {
	return (*elasticsearchSpecMonitoringPtrType)(v)
}

func (*elasticsearchSpecMonitoringPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecMonitoring)(nil)).Elem()
}

func (i *elasticsearchSpecMonitoringPtrType) ToElasticsearchSpecMonitoringPtrOutput() ElasticsearchSpecMonitoringPtrOutput {
	return i.ToElasticsearchSpecMonitoringPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecMonitoringPtrType) ToElasticsearchSpecMonitoringPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringPtrOutput)
}

// Monitoring enables you to collect and ship log and monitoring data of this Elasticsearch cluster.
// See https://www.elastic.co/guide/en/elasticsearch/reference/current/monitor-elasticsearch-cluster.html.
// Metricbeat and Filebeat are deployed in the same Pod as sidecars and each one sends data to one or two different
// Elasticsearch monitoring clusters running in the same Kubernetes cluster.
type ElasticsearchSpecMonitoringOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecMonitoringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecMonitoring)(nil)).Elem()
}

func (o ElasticsearchSpecMonitoringOutput) ToElasticsearchSpecMonitoringOutput() ElasticsearchSpecMonitoringOutput {
	return o
}

func (o ElasticsearchSpecMonitoringOutput) ToElasticsearchSpecMonitoringOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringOutput {
	return o
}

func (o ElasticsearchSpecMonitoringOutput) ToElasticsearchSpecMonitoringPtrOutput() ElasticsearchSpecMonitoringPtrOutput {
	return o.ToElasticsearchSpecMonitoringPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecMonitoringOutput) ToElasticsearchSpecMonitoringPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecMonitoring) *ElasticsearchSpecMonitoring {
		return &v
	}).(ElasticsearchSpecMonitoringPtrOutput)
}

// Logs holds references to Elasticsearch clusters which receive log data from an associated resource.
func (o ElasticsearchSpecMonitoringOutput) Logs() ElasticsearchSpecMonitoringLogsPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoring) *ElasticsearchSpecMonitoringLogs { return v.Logs }).(ElasticsearchSpecMonitoringLogsPtrOutput)
}

// Metrics holds references to Elasticsearch clusters which receive monitoring data from this resource.
func (o ElasticsearchSpecMonitoringOutput) Metrics() ElasticsearchSpecMonitoringMetricsPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoring) *ElasticsearchSpecMonitoringMetrics { return v.Metrics }).(ElasticsearchSpecMonitoringMetricsPtrOutput)
}

type ElasticsearchSpecMonitoringPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecMonitoringPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecMonitoring)(nil)).Elem()
}

func (o ElasticsearchSpecMonitoringPtrOutput) ToElasticsearchSpecMonitoringPtrOutput() ElasticsearchSpecMonitoringPtrOutput {
	return o
}

func (o ElasticsearchSpecMonitoringPtrOutput) ToElasticsearchSpecMonitoringPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringPtrOutput {
	return o
}

func (o ElasticsearchSpecMonitoringPtrOutput) Elem() ElasticsearchSpecMonitoringOutput {
	return o.ApplyT(func(v *ElasticsearchSpecMonitoring) ElasticsearchSpecMonitoring {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecMonitoring
		return ret
	}).(ElasticsearchSpecMonitoringOutput)
}

// Logs holds references to Elasticsearch clusters which receive log data from an associated resource.
func (o ElasticsearchSpecMonitoringPtrOutput) Logs() ElasticsearchSpecMonitoringLogsPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecMonitoring) *ElasticsearchSpecMonitoringLogs {
		if v == nil {
			return nil
		}
		return v.Logs
	}).(ElasticsearchSpecMonitoringLogsPtrOutput)
}

// Metrics holds references to Elasticsearch clusters which receive monitoring data from this resource.
func (o ElasticsearchSpecMonitoringPtrOutput) Metrics() ElasticsearchSpecMonitoringMetricsPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecMonitoring) *ElasticsearchSpecMonitoringMetrics {
		if v == nil {
			return nil
		}
		return v.Metrics
	}).(ElasticsearchSpecMonitoringMetricsPtrOutput)
}

// Logs holds references to Elasticsearch clusters which receive log data from an associated resource.
type ElasticsearchSpecMonitoringLogs struct {
	// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
	// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
	ElasticsearchRefs []ElasticsearchSpecMonitoringLogsElasticsearchRefs `pulumi:"elasticsearchRefs"`
}

// ElasticsearchSpecMonitoringLogsInput is an input type that accepts ElasticsearchSpecMonitoringLogsArgs and ElasticsearchSpecMonitoringLogsOutput values.
// You can construct a concrete instance of `ElasticsearchSpecMonitoringLogsInput` via:
//
//	ElasticsearchSpecMonitoringLogsArgs{...}
type ElasticsearchSpecMonitoringLogsInput interface {
	pulumi.Input

	ToElasticsearchSpecMonitoringLogsOutput() ElasticsearchSpecMonitoringLogsOutput
	ToElasticsearchSpecMonitoringLogsOutputWithContext(context.Context) ElasticsearchSpecMonitoringLogsOutput
}

// Logs holds references to Elasticsearch clusters which receive log data from an associated resource.
type ElasticsearchSpecMonitoringLogsArgs struct {
	// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
	// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
	ElasticsearchRefs ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayInput `pulumi:"elasticsearchRefs"`
}

func (ElasticsearchSpecMonitoringLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecMonitoringLogs)(nil)).Elem()
}

func (i ElasticsearchSpecMonitoringLogsArgs) ToElasticsearchSpecMonitoringLogsOutput() ElasticsearchSpecMonitoringLogsOutput {
	return i.ToElasticsearchSpecMonitoringLogsOutputWithContext(context.Background())
}

func (i ElasticsearchSpecMonitoringLogsArgs) ToElasticsearchSpecMonitoringLogsOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringLogsOutput)
}

func (i ElasticsearchSpecMonitoringLogsArgs) ToElasticsearchSpecMonitoringLogsPtrOutput() ElasticsearchSpecMonitoringLogsPtrOutput {
	return i.ToElasticsearchSpecMonitoringLogsPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecMonitoringLogsArgs) ToElasticsearchSpecMonitoringLogsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringLogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringLogsOutput).ToElasticsearchSpecMonitoringLogsPtrOutputWithContext(ctx)
}

// ElasticsearchSpecMonitoringLogsPtrInput is an input type that accepts ElasticsearchSpecMonitoringLogsArgs, ElasticsearchSpecMonitoringLogsPtr and ElasticsearchSpecMonitoringLogsPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecMonitoringLogsPtrInput` via:
//
//	        ElasticsearchSpecMonitoringLogsArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecMonitoringLogsPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecMonitoringLogsPtrOutput() ElasticsearchSpecMonitoringLogsPtrOutput
	ToElasticsearchSpecMonitoringLogsPtrOutputWithContext(context.Context) ElasticsearchSpecMonitoringLogsPtrOutput
}

type elasticsearchSpecMonitoringLogsPtrType ElasticsearchSpecMonitoringLogsArgs

func ElasticsearchSpecMonitoringLogsPtr(v *ElasticsearchSpecMonitoringLogsArgs) ElasticsearchSpecMonitoringLogsPtrInput {
	return (*elasticsearchSpecMonitoringLogsPtrType)(v)
}

func (*elasticsearchSpecMonitoringLogsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecMonitoringLogs)(nil)).Elem()
}

func (i *elasticsearchSpecMonitoringLogsPtrType) ToElasticsearchSpecMonitoringLogsPtrOutput() ElasticsearchSpecMonitoringLogsPtrOutput {
	return i.ToElasticsearchSpecMonitoringLogsPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecMonitoringLogsPtrType) ToElasticsearchSpecMonitoringLogsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringLogsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringLogsPtrOutput)
}

// Logs holds references to Elasticsearch clusters which receive log data from an associated resource.
type ElasticsearchSpecMonitoringLogsOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecMonitoringLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecMonitoringLogs)(nil)).Elem()
}

func (o ElasticsearchSpecMonitoringLogsOutput) ToElasticsearchSpecMonitoringLogsOutput() ElasticsearchSpecMonitoringLogsOutput {
	return o
}

func (o ElasticsearchSpecMonitoringLogsOutput) ToElasticsearchSpecMonitoringLogsOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringLogsOutput {
	return o
}

func (o ElasticsearchSpecMonitoringLogsOutput) ToElasticsearchSpecMonitoringLogsPtrOutput() ElasticsearchSpecMonitoringLogsPtrOutput {
	return o.ToElasticsearchSpecMonitoringLogsPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecMonitoringLogsOutput) ToElasticsearchSpecMonitoringLogsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringLogsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecMonitoringLogs) *ElasticsearchSpecMonitoringLogs {
		return &v
	}).(ElasticsearchSpecMonitoringLogsPtrOutput)
}

// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
func (o ElasticsearchSpecMonitoringLogsOutput) ElasticsearchRefs() ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringLogs) []ElasticsearchSpecMonitoringLogsElasticsearchRefs {
		return v.ElasticsearchRefs
	}).(ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput)
}

type ElasticsearchSpecMonitoringLogsPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecMonitoringLogsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecMonitoringLogs)(nil)).Elem()
}

func (o ElasticsearchSpecMonitoringLogsPtrOutput) ToElasticsearchSpecMonitoringLogsPtrOutput() ElasticsearchSpecMonitoringLogsPtrOutput {
	return o
}

func (o ElasticsearchSpecMonitoringLogsPtrOutput) ToElasticsearchSpecMonitoringLogsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringLogsPtrOutput {
	return o
}

func (o ElasticsearchSpecMonitoringLogsPtrOutput) Elem() ElasticsearchSpecMonitoringLogsOutput {
	return o.ApplyT(func(v *ElasticsearchSpecMonitoringLogs) ElasticsearchSpecMonitoringLogs {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecMonitoringLogs
		return ret
	}).(ElasticsearchSpecMonitoringLogsOutput)
}

// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
func (o ElasticsearchSpecMonitoringLogsPtrOutput) ElasticsearchRefs() ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecMonitoringLogs) []ElasticsearchSpecMonitoringLogsElasticsearchRefs {
		if v == nil {
			return nil
		}
		return v.ElasticsearchRefs
	}).(ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput)
}

// ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator
// or a Secret describing an external Elastic resource not managed by the operator.
type ElasticsearchSpecMonitoringLogsElasticsearchRefs struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name *string `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace *string `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName *string `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName *string `pulumi:"serviceName"`
}

// ElasticsearchSpecMonitoringLogsElasticsearchRefsInput is an input type that accepts ElasticsearchSpecMonitoringLogsElasticsearchRefsArgs and ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput values.
// You can construct a concrete instance of `ElasticsearchSpecMonitoringLogsElasticsearchRefsInput` via:
//
//	ElasticsearchSpecMonitoringLogsElasticsearchRefsArgs{...}
type ElasticsearchSpecMonitoringLogsElasticsearchRefsInput interface {
	pulumi.Input

	ToElasticsearchSpecMonitoringLogsElasticsearchRefsOutput() ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput
	ToElasticsearchSpecMonitoringLogsElasticsearchRefsOutputWithContext(context.Context) ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput
}

// ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator
// or a Secret describing an external Elastic resource not managed by the operator.
type ElasticsearchSpecMonitoringLogsElasticsearchRefsArgs struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
}

func (ElasticsearchSpecMonitoringLogsElasticsearchRefsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecMonitoringLogsElasticsearchRefs)(nil)).Elem()
}

func (i ElasticsearchSpecMonitoringLogsElasticsearchRefsArgs) ToElasticsearchSpecMonitoringLogsElasticsearchRefsOutput() ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput {
	return i.ToElasticsearchSpecMonitoringLogsElasticsearchRefsOutputWithContext(context.Background())
}

func (i ElasticsearchSpecMonitoringLogsElasticsearchRefsArgs) ToElasticsearchSpecMonitoringLogsElasticsearchRefsOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput)
}

// ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayInput is an input type that accepts ElasticsearchSpecMonitoringLogsElasticsearchRefsArray and ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayInput` via:
//
//	ElasticsearchSpecMonitoringLogsElasticsearchRefsArray{ ElasticsearchSpecMonitoringLogsElasticsearchRefsArgs{...} }
type ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput() ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput
	ToElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutputWithContext(context.Context) ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput
}

type ElasticsearchSpecMonitoringLogsElasticsearchRefsArray []ElasticsearchSpecMonitoringLogsElasticsearchRefsInput

func (ElasticsearchSpecMonitoringLogsElasticsearchRefsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecMonitoringLogsElasticsearchRefs)(nil)).Elem()
}

func (i ElasticsearchSpecMonitoringLogsElasticsearchRefsArray) ToElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput() ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput {
	return i.ToElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecMonitoringLogsElasticsearchRefsArray) ToElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput)
}

// ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator
// or a Secret describing an external Elastic resource not managed by the operator.
type ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecMonitoringLogsElasticsearchRefs)(nil)).Elem()
}

func (o ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput) ToElasticsearchSpecMonitoringLogsElasticsearchRefsOutput() ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput {
	return o
}

func (o ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput) ToElasticsearchSpecMonitoringLogsElasticsearchRefsOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput {
	return o
}

// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
func (o ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringLogsElasticsearchRefs) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringLogsElasticsearchRefs) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
// Elastic resource not managed by the operator. The referenced secret must contain the following:
//   - `url`: the URL to reach the Elastic resource
//   - `username`: the username of the user to be authenticated to the Elastic resource
//   - `password`: the password of the user to be authenticated to the Elastic resource
//   - `ca.crt`: the CA certificate in PEM format (optional)
//   - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
//     This field cannot be used in combination with the other fields name, namespace or serviceName.
func (o ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringLogsElasticsearchRefs) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
// the referenced resource is used.
func (o ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringLogsElasticsearchRefs) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecMonitoringLogsElasticsearchRefs)(nil)).Elem()
}

func (o ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput) ToElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput() ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput {
	return o
}

func (o ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput) ToElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput {
	return o
}

func (o ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecMonitoringLogsElasticsearchRefs {
		return vs[0].([]ElasticsearchSpecMonitoringLogsElasticsearchRefs)[vs[1].(int)]
	}).(ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput)
}

// Metrics holds references to Elasticsearch clusters which receive monitoring data from this resource.
type ElasticsearchSpecMonitoringMetrics struct {
	// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
	// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
	ElasticsearchRefs []ElasticsearchSpecMonitoringMetricsElasticsearchRefs `pulumi:"elasticsearchRefs"`
}

// ElasticsearchSpecMonitoringMetricsInput is an input type that accepts ElasticsearchSpecMonitoringMetricsArgs and ElasticsearchSpecMonitoringMetricsOutput values.
// You can construct a concrete instance of `ElasticsearchSpecMonitoringMetricsInput` via:
//
//	ElasticsearchSpecMonitoringMetricsArgs{...}
type ElasticsearchSpecMonitoringMetricsInput interface {
	pulumi.Input

	ToElasticsearchSpecMonitoringMetricsOutput() ElasticsearchSpecMonitoringMetricsOutput
	ToElasticsearchSpecMonitoringMetricsOutputWithContext(context.Context) ElasticsearchSpecMonitoringMetricsOutput
}

// Metrics holds references to Elasticsearch clusters which receive monitoring data from this resource.
type ElasticsearchSpecMonitoringMetricsArgs struct {
	// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
	// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
	ElasticsearchRefs ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayInput `pulumi:"elasticsearchRefs"`
}

func (ElasticsearchSpecMonitoringMetricsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecMonitoringMetrics)(nil)).Elem()
}

func (i ElasticsearchSpecMonitoringMetricsArgs) ToElasticsearchSpecMonitoringMetricsOutput() ElasticsearchSpecMonitoringMetricsOutput {
	return i.ToElasticsearchSpecMonitoringMetricsOutputWithContext(context.Background())
}

func (i ElasticsearchSpecMonitoringMetricsArgs) ToElasticsearchSpecMonitoringMetricsOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringMetricsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringMetricsOutput)
}

func (i ElasticsearchSpecMonitoringMetricsArgs) ToElasticsearchSpecMonitoringMetricsPtrOutput() ElasticsearchSpecMonitoringMetricsPtrOutput {
	return i.ToElasticsearchSpecMonitoringMetricsPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecMonitoringMetricsArgs) ToElasticsearchSpecMonitoringMetricsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringMetricsOutput).ToElasticsearchSpecMonitoringMetricsPtrOutputWithContext(ctx)
}

// ElasticsearchSpecMonitoringMetricsPtrInput is an input type that accepts ElasticsearchSpecMonitoringMetricsArgs, ElasticsearchSpecMonitoringMetricsPtr and ElasticsearchSpecMonitoringMetricsPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecMonitoringMetricsPtrInput` via:
//
//	        ElasticsearchSpecMonitoringMetricsArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecMonitoringMetricsPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecMonitoringMetricsPtrOutput() ElasticsearchSpecMonitoringMetricsPtrOutput
	ToElasticsearchSpecMonitoringMetricsPtrOutputWithContext(context.Context) ElasticsearchSpecMonitoringMetricsPtrOutput
}

type elasticsearchSpecMonitoringMetricsPtrType ElasticsearchSpecMonitoringMetricsArgs

func ElasticsearchSpecMonitoringMetricsPtr(v *ElasticsearchSpecMonitoringMetricsArgs) ElasticsearchSpecMonitoringMetricsPtrInput {
	return (*elasticsearchSpecMonitoringMetricsPtrType)(v)
}

func (*elasticsearchSpecMonitoringMetricsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecMonitoringMetrics)(nil)).Elem()
}

func (i *elasticsearchSpecMonitoringMetricsPtrType) ToElasticsearchSpecMonitoringMetricsPtrOutput() ElasticsearchSpecMonitoringMetricsPtrOutput {
	return i.ToElasticsearchSpecMonitoringMetricsPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecMonitoringMetricsPtrType) ToElasticsearchSpecMonitoringMetricsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringMetricsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringMetricsPtrOutput)
}

// Metrics holds references to Elasticsearch clusters which receive monitoring data from this resource.
type ElasticsearchSpecMonitoringMetricsOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecMonitoringMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecMonitoringMetrics)(nil)).Elem()
}

func (o ElasticsearchSpecMonitoringMetricsOutput) ToElasticsearchSpecMonitoringMetricsOutput() ElasticsearchSpecMonitoringMetricsOutput {
	return o
}

func (o ElasticsearchSpecMonitoringMetricsOutput) ToElasticsearchSpecMonitoringMetricsOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringMetricsOutput {
	return o
}

func (o ElasticsearchSpecMonitoringMetricsOutput) ToElasticsearchSpecMonitoringMetricsPtrOutput() ElasticsearchSpecMonitoringMetricsPtrOutput {
	return o.ToElasticsearchSpecMonitoringMetricsPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecMonitoringMetricsOutput) ToElasticsearchSpecMonitoringMetricsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringMetricsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecMonitoringMetrics) *ElasticsearchSpecMonitoringMetrics {
		return &v
	}).(ElasticsearchSpecMonitoringMetricsPtrOutput)
}

// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
func (o ElasticsearchSpecMonitoringMetricsOutput) ElasticsearchRefs() ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringMetrics) []ElasticsearchSpecMonitoringMetricsElasticsearchRefs {
		return v.ElasticsearchRefs
	}).(ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput)
}

type ElasticsearchSpecMonitoringMetricsPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecMonitoringMetricsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecMonitoringMetrics)(nil)).Elem()
}

func (o ElasticsearchSpecMonitoringMetricsPtrOutput) ToElasticsearchSpecMonitoringMetricsPtrOutput() ElasticsearchSpecMonitoringMetricsPtrOutput {
	return o
}

func (o ElasticsearchSpecMonitoringMetricsPtrOutput) ToElasticsearchSpecMonitoringMetricsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringMetricsPtrOutput {
	return o
}

func (o ElasticsearchSpecMonitoringMetricsPtrOutput) Elem() ElasticsearchSpecMonitoringMetricsOutput {
	return o.ApplyT(func(v *ElasticsearchSpecMonitoringMetrics) ElasticsearchSpecMonitoringMetrics {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecMonitoringMetrics
		return ret
	}).(ElasticsearchSpecMonitoringMetricsOutput)
}

// ElasticsearchRefs is a reference to a list of monitoring Elasticsearch clusters running in the same Kubernetes cluster.
// Due to existing limitations, only a single Elasticsearch cluster is currently supported.
func (o ElasticsearchSpecMonitoringMetricsPtrOutput) ElasticsearchRefs() ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecMonitoringMetrics) []ElasticsearchSpecMonitoringMetricsElasticsearchRefs {
		if v == nil {
			return nil
		}
		return v.ElasticsearchRefs
	}).(ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput)
}

// ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator
// or a Secret describing an external Elastic resource not managed by the operator.
type ElasticsearchSpecMonitoringMetricsElasticsearchRefs struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name *string `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace *string `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName *string `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName *string `pulumi:"serviceName"`
}

// ElasticsearchSpecMonitoringMetricsElasticsearchRefsInput is an input type that accepts ElasticsearchSpecMonitoringMetricsElasticsearchRefsArgs and ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput values.
// You can construct a concrete instance of `ElasticsearchSpecMonitoringMetricsElasticsearchRefsInput` via:
//
//	ElasticsearchSpecMonitoringMetricsElasticsearchRefsArgs{...}
type ElasticsearchSpecMonitoringMetricsElasticsearchRefsInput interface {
	pulumi.Input

	ToElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput() ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput
	ToElasticsearchSpecMonitoringMetricsElasticsearchRefsOutputWithContext(context.Context) ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput
}

// ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator
// or a Secret describing an external Elastic resource not managed by the operator.
type ElasticsearchSpecMonitoringMetricsElasticsearchRefsArgs struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
}

func (ElasticsearchSpecMonitoringMetricsElasticsearchRefsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecMonitoringMetricsElasticsearchRefs)(nil)).Elem()
}

func (i ElasticsearchSpecMonitoringMetricsElasticsearchRefsArgs) ToElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput() ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput {
	return i.ToElasticsearchSpecMonitoringMetricsElasticsearchRefsOutputWithContext(context.Background())
}

func (i ElasticsearchSpecMonitoringMetricsElasticsearchRefsArgs) ToElasticsearchSpecMonitoringMetricsElasticsearchRefsOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput)
}

// ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayInput is an input type that accepts ElasticsearchSpecMonitoringMetricsElasticsearchRefsArray and ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayInput` via:
//
//	ElasticsearchSpecMonitoringMetricsElasticsearchRefsArray{ ElasticsearchSpecMonitoringMetricsElasticsearchRefsArgs{...} }
type ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput() ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput
	ToElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutputWithContext(context.Context) ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput
}

type ElasticsearchSpecMonitoringMetricsElasticsearchRefsArray []ElasticsearchSpecMonitoringMetricsElasticsearchRefsInput

func (ElasticsearchSpecMonitoringMetricsElasticsearchRefsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecMonitoringMetricsElasticsearchRefs)(nil)).Elem()
}

func (i ElasticsearchSpecMonitoringMetricsElasticsearchRefsArray) ToElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput() ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput {
	return i.ToElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecMonitoringMetricsElasticsearchRefsArray) ToElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput)
}

// ObjectSelector defines a reference to a Kubernetes object which can be an Elastic resource managed by the operator
// or a Secret describing an external Elastic resource not managed by the operator.
type ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecMonitoringMetricsElasticsearchRefs)(nil)).Elem()
}

func (o ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput) ToElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput() ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput {
	return o
}

func (o ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput) ToElasticsearchSpecMonitoringMetricsElasticsearchRefsOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput {
	return o
}

// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
func (o ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringMetricsElasticsearchRefs) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringMetricsElasticsearchRefs) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
// Elastic resource not managed by the operator. The referenced secret must contain the following:
//   - `url`: the URL to reach the Elastic resource
//   - `username`: the username of the user to be authenticated to the Elastic resource
//   - `password`: the password of the user to be authenticated to the Elastic resource
//   - `ca.crt`: the CA certificate in PEM format (optional)
//   - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
//     This field cannot be used in combination with the other fields name, namespace or serviceName.
func (o ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringMetricsElasticsearchRefs) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
// the referenced resource is used.
func (o ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecMonitoringMetricsElasticsearchRefs) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecMonitoringMetricsElasticsearchRefs)(nil)).Elem()
}

func (o ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput) ToElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput() ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput {
	return o
}

func (o ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput) ToElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput {
	return o
}

func (o ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecMonitoringMetricsElasticsearchRefs {
		return vs[0].([]ElasticsearchSpecMonitoringMetricsElasticsearchRefs)[vs[1].(int)]
	}).(ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput)
}

// NodeSet is the specification for a group of Elasticsearch nodes sharing the same configuration and a Pod template.
type ElasticsearchSpecNodeSets struct {
	// Config holds the Elasticsearch configuration.
	Config map[string]interface{} `pulumi:"config"`
	// Count of Elasticsearch nodes to deploy.
	// If the node set is managed by an autoscaling policy the initial value is automatically set by the autoscaling controller.
	Count *int `pulumi:"count"`
	// Name of this set of nodes. Becomes a part of the Elasticsearch node.name setting.
	Name string `pulumi:"name"`
	// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Pods belonging to this NodeSet.
	PodTemplate map[string]interface{} `pulumi:"podTemplate"`
	// VolumeClaimTemplates is a list of persistent volume claims to be used by each Pod in this NodeSet.
	// Every claim in this list must have a matching volumeMount in one of the containers defined in the PodTemplate.
	// Items defined here take precedence over any default claims added by the operator with the same name.
	VolumeClaimTemplates []ElasticsearchSpecNodeSetsVolumeClaimTemplates `pulumi:"volumeClaimTemplates"`
}

// ElasticsearchSpecNodeSetsInput is an input type that accepts ElasticsearchSpecNodeSetsArgs and ElasticsearchSpecNodeSetsOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsInput` via:
//
//	ElasticsearchSpecNodeSetsArgs{...}
type ElasticsearchSpecNodeSetsInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsOutput() ElasticsearchSpecNodeSetsOutput
	ToElasticsearchSpecNodeSetsOutputWithContext(context.Context) ElasticsearchSpecNodeSetsOutput
}

// NodeSet is the specification for a group of Elasticsearch nodes sharing the same configuration and a Pod template.
type ElasticsearchSpecNodeSetsArgs struct {
	// Config holds the Elasticsearch configuration.
	Config pulumi.MapInput `pulumi:"config"`
	// Count of Elasticsearch nodes to deploy.
	// If the node set is managed by an autoscaling policy the initial value is automatically set by the autoscaling controller.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// Name of this set of nodes. Becomes a part of the Elasticsearch node.name setting.
	Name pulumi.StringInput `pulumi:"name"`
	// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Pods belonging to this NodeSet.
	PodTemplate pulumi.MapInput `pulumi:"podTemplate"`
	// VolumeClaimTemplates is a list of persistent volume claims to be used by each Pod in this NodeSet.
	// Every claim in this list must have a matching volumeMount in one of the containers defined in the PodTemplate.
	// Items defined here take precedence over any default claims added by the operator with the same name.
	VolumeClaimTemplates ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayInput `pulumi:"volumeClaimTemplates"`
}

func (ElasticsearchSpecNodeSetsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSets)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsArgs) ToElasticsearchSpecNodeSetsOutput() ElasticsearchSpecNodeSetsOutput {
	return i.ToElasticsearchSpecNodeSetsOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsArgs) ToElasticsearchSpecNodeSetsOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsOutput)
}

// ElasticsearchSpecNodeSetsArrayInput is an input type that accepts ElasticsearchSpecNodeSetsArray and ElasticsearchSpecNodeSetsArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsArrayInput` via:
//
//	ElasticsearchSpecNodeSetsArray{ ElasticsearchSpecNodeSetsArgs{...} }
type ElasticsearchSpecNodeSetsArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsArrayOutput() ElasticsearchSpecNodeSetsArrayOutput
	ToElasticsearchSpecNodeSetsArrayOutputWithContext(context.Context) ElasticsearchSpecNodeSetsArrayOutput
}

type ElasticsearchSpecNodeSetsArray []ElasticsearchSpecNodeSetsInput

func (ElasticsearchSpecNodeSetsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecNodeSets)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsArray) ToElasticsearchSpecNodeSetsArrayOutput() ElasticsearchSpecNodeSetsArrayOutput {
	return i.ToElasticsearchSpecNodeSetsArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsArray) ToElasticsearchSpecNodeSetsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsArrayOutput)
}

// NodeSet is the specification for a group of Elasticsearch nodes sharing the same configuration and a Pod template.
type ElasticsearchSpecNodeSetsOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSets)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsOutput) ToElasticsearchSpecNodeSetsOutput() ElasticsearchSpecNodeSetsOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsOutput) ToElasticsearchSpecNodeSetsOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsOutput {
	return o
}

// Config holds the Elasticsearch configuration.
func (o ElasticsearchSpecNodeSetsOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSets) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

// Count of Elasticsearch nodes to deploy.
// If the node set is managed by an autoscaling policy the initial value is automatically set by the autoscaling controller.
func (o ElasticsearchSpecNodeSetsOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSets) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// Name of this set of nodes. Becomes a part of the Elasticsearch node.name setting.
func (o ElasticsearchSpecNodeSetsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSets) string { return v.Name }).(pulumi.StringOutput)
}

// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Pods belonging to this NodeSet.
func (o ElasticsearchSpecNodeSetsOutput) PodTemplate() pulumi.MapOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSets) map[string]interface{} { return v.PodTemplate }).(pulumi.MapOutput)
}

// VolumeClaimTemplates is a list of persistent volume claims to be used by each Pod in this NodeSet.
// Every claim in this list must have a matching volumeMount in one of the containers defined in the PodTemplate.
// Items defined here take precedence over any default claims added by the operator with the same name.
func (o ElasticsearchSpecNodeSetsOutput) VolumeClaimTemplates() ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSets) []ElasticsearchSpecNodeSetsVolumeClaimTemplates {
		return v.VolumeClaimTemplates
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput)
}

type ElasticsearchSpecNodeSetsArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecNodeSets)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsArrayOutput) ToElasticsearchSpecNodeSetsArrayOutput() ElasticsearchSpecNodeSetsArrayOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsArrayOutput) ToElasticsearchSpecNodeSetsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsArrayOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecNodeSetsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecNodeSets {
		return vs[0].([]ElasticsearchSpecNodeSets)[vs[1].(int)]
	}).(ElasticsearchSpecNodeSetsOutput)
}

// PersistentVolumeClaim is a user's request for and claim to a persistent volume
type ElasticsearchSpecNodeSetsVolumeClaimTemplates struct {
	// APIVersion defines the versioned schema of this representation of an object.
	// Servers should convert recognized schemas to the latest internal value, and
	// may reject unrecognized values.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents.
	// Servers may infer this from the endpoint the client submits requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata `pulumi:"metadata"`
	// spec defines the desired characteristics of a volume requested by a pod author.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	Spec *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec `pulumi:"spec"`
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesArgs and ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesInput` via:
//
//	ElasticsearchSpecNodeSetsVolumeClaimTemplatesArgs{...}
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput
}

// PersistentVolumeClaim is a user's request for and claim to a persistent volume
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesArgs struct {
	// APIVersion defines the versioned schema of this representation of an object.
	// Servers should convert recognized schemas to the latest internal value, and
	// may reject unrecognized values.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents.
	// Servers may infer this from the endpoint the client submits requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrInput `pulumi:"metadata"`
	// spec defines the desired characteristics of a volume requested by a pod author.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	Spec ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrInput `pulumi:"spec"`
}

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplates)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput)
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesArray and ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayInput` via:
//
//	ElasticsearchSpecNodeSetsVolumeClaimTemplatesArray{ ElasticsearchSpecNodeSetsVolumeClaimTemplatesArgs{...} }
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesArray []ElasticsearchSpecNodeSetsVolumeClaimTemplatesInput

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecNodeSetsVolumeClaimTemplates)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesArray) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesArray) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput)
}

// PersistentVolumeClaim is a user's request for and claim to a persistent volume
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplates)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object.
// Servers should convert recognized schemas to the latest internal value, and
// may reject unrecognized values.
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplates) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents.
// Servers may infer this from the endpoint the client submits requests to.
// Cannot be updated.
// In CamelCase.
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplates) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata.
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput) Metadata() ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplates) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata {
		return v.Metadata
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput)
}

// spec defines the desired characteristics of a volume requested by a pod author.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput) Spec() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplates) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec {
		return v.Spec
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput)
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecNodeSetsVolumeClaimTemplates)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecNodeSetsVolumeClaimTemplates {
		return vs[0].([]ElasticsearchSpecNodeSetsVolumeClaimTemplates)[vs[1].(int)]
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput)
}

// Standard object's metadata.
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata struct {
	Annotations map[string]string `pulumi:"annotations"`
	Finalizers  []string          `pulumi:"finalizers"`
	Labels      map[string]string `pulumi:"labels"`
	Name        *string           `pulumi:"name"`
	Namespace   *string           `pulumi:"namespace"`
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs and ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataInput` via:
//
//	ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs{...}
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput
}

// Standard object's metadata.
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs struct {
	Annotations pulumi.StringMapInput   `pulumi:"annotations"`
	Finalizers  pulumi.StringArrayInput `pulumi:"finalizers"`
	Labels      pulumi.StringMapInput   `pulumi:"labels"`
	Name        pulumi.StringPtrInput   `pulumi:"name"`
	Namespace   pulumi.StringPtrInput   `pulumi:"namespace"`
}

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput)
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput).ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutputWithContext(ctx)
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs, ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtr and ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrInput` via:
//
//	        ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput
}

type elasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrType ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs

func ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtr(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs) ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrInput {
	return (*elasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrType)(v)
}

func (*elasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata)(nil)).Elem()
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput)
}

// Standard object's metadata.
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput {
	return o.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata {
		return &v
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata) []string { return v.Finalizers }).(pulumi.StringArrayOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput) Elem() ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata) ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata
		return ret
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata) []string {
		if v == nil {
			return nil
		}
		return v.Finalizers
	}).(pulumi.StringArrayOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataAnnotations struct {
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataLabels struct {
}

// spec defines the desired characteristics of a volume requested by a pod author.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec struct {
	// accessModes contains the desired access modes the volume should have.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes []string `pulumi:"accessModes"`
	// dataSource field can be used to specify either:
	// * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
	// * An existing PVC (PersistentVolumeClaim)
	//   If the provisioner or an external controller can support the specified data source,
	//   it will create a new volume based on the contents of the specified data source.
	//   When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
	//   and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
	//   If the namespace is specified, then dataSourceRef will not be copied to dataSource.
	DataSource *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource `pulumi:"dataSource"`
	// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
	// volume is desired. This may be any object from a non-empty API group (non
	// core object) or a PersistentVolumeClaim object.
	// When this field is specified, volume binding will only succeed if the type of
	// the specified object matches some installed volume populator or dynamic
	// provisioner.
	// This field will replace the functionality of the dataSource field and as such
	// if both fields are non-empty, they must have the same value. For backwards
	// compatibility, when namespace isn't specified in dataSourceRef,
	// both fields (dataSource and dataSourceRef) will be set to the same
	// value automatically if one of them is empty and the other is non-empty.
	// When namespace is specified in dataSourceRef,
	// dataSource isn't set to the same value and must be empty.
	// There are three important differences between dataSource and dataSourceRef:
	// * While dataSource only allows two specific types of objects, dataSourceRef
	//   allows any non-core object, as well as PersistentVolumeClaim objects.
	// * While dataSource ignores disallowed values (dropping them), dataSourceRef
	//   preserves all values, and generates an error if a disallowed value is
	//   specified.
	// * While dataSource only allows local objects, dataSourceRef allows objects
	//   in any namespaces.
	//   (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
	//   (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	DataSourceRef *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef `pulumi:"dataSourceRef"`
	// resources represents the minimum resources the volume should have.
	// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
	// that are lower than previous value but must still be higher than capacity recorded in the
	// status field of the claim.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	Resources *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources `pulumi:"resources"`
	// selector is a label query over volumes to consider for binding.
	Selector *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector `pulumi:"selector"`
	// storageClassName is the name of the StorageClass required by the claim.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName *string `pulumi:"storageClassName"`
	// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
	// If specified, the CSI driver will create or update the volume with the attributes defined
	// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
	// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
	// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
	// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
	// will be set by the persistentvolume controller if it exists.
	// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
	// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
	// exists.
	// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
	// (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
	VolumeAttributesClassName *string `pulumi:"volumeAttributesClassName"`
	// volumeMode defines what type of volume is required by the claim.
	// Value of Filesystem is implied when not included in claim spec.
	VolumeMode *string `pulumi:"volumeMode"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName *string `pulumi:"volumeName"`
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecInput` via:
//
//	ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs{...}
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput
}

// spec defines the desired characteristics of a volume requested by a pod author.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs struct {
	// accessModes contains the desired access modes the volume should have.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes pulumi.StringArrayInput `pulumi:"accessModes"`
	// dataSource field can be used to specify either:
	// * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
	// * An existing PVC (PersistentVolumeClaim)
	//   If the provisioner or an external controller can support the specified data source,
	//   it will create a new volume based on the contents of the specified data source.
	//   When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
	//   and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
	//   If the namespace is specified, then dataSourceRef will not be copied to dataSource.
	DataSource ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrInput `pulumi:"dataSource"`
	// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
	// volume is desired. This may be any object from a non-empty API group (non
	// core object) or a PersistentVolumeClaim object.
	// When this field is specified, volume binding will only succeed if the type of
	// the specified object matches some installed volume populator or dynamic
	// provisioner.
	// This field will replace the functionality of the dataSource field and as such
	// if both fields are non-empty, they must have the same value. For backwards
	// compatibility, when namespace isn't specified in dataSourceRef,
	// both fields (dataSource and dataSourceRef) will be set to the same
	// value automatically if one of them is empty and the other is non-empty.
	// When namespace is specified in dataSourceRef,
	// dataSource isn't set to the same value and must be empty.
	// There are three important differences between dataSource and dataSourceRef:
	// * While dataSource only allows two specific types of objects, dataSourceRef
	//   allows any non-core object, as well as PersistentVolumeClaim objects.
	// * While dataSource ignores disallowed values (dropping them), dataSourceRef
	//   preserves all values, and generates an error if a disallowed value is
	//   specified.
	// * While dataSource only allows local objects, dataSourceRef allows objects
	//   in any namespaces.
	//   (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
	//   (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	DataSourceRef ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrInput `pulumi:"dataSourceRef"`
	// resources represents the minimum resources the volume should have.
	// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
	// that are lower than previous value but must still be higher than capacity recorded in the
	// status field of the claim.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
	Resources ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrInput `pulumi:"resources"`
	// selector is a label query over volumes to consider for binding.
	Selector ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrInput `pulumi:"selector"`
	// storageClassName is the name of the StorageClass required by the claim.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName pulumi.StringPtrInput `pulumi:"storageClassName"`
	// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
	// If specified, the CSI driver will create or update the volume with the attributes defined
	// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
	// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
	// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
	// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
	// will be set by the persistentvolume controller if it exists.
	// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
	// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
	// exists.
	// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
	// (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
	VolumeAttributesClassName pulumi.StringPtrInput `pulumi:"volumeAttributesClassName"`
	// volumeMode defines what type of volume is required by the claim.
	// Value of Filesystem is implied when not included in claim spec.
	VolumeMode pulumi.StringPtrInput `pulumi:"volumeMode"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
}

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput)
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput).ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutputWithContext(ctx)
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs, ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtr and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrInput` via:
//
//	        ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput
}

type elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrType ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs

func ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtr(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrInput {
	return (*elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrType)(v)
}

func (*elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec)(nil)).Elem()
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput)
}

// spec defines the desired characteristics of a volume requested by a pod author.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput {
	return o.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec {
		return &v
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput)
}

// accessModes contains the desired access modes the volume should have.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) []string { return v.AccessModes }).(pulumi.StringArrayOutput)
}

// dataSource field can be used to specify either:
//   - An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
//   - An existing PVC (PersistentVolumeClaim)
//     If the provisioner or an external controller can support the specified data source,
//     it will create a new volume based on the contents of the specified data source.
//     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
//     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
//     If the namespace is specified, then dataSourceRef will not be copied to dataSource.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput) DataSource() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource {
		return v.DataSource
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
// volume is desired. This may be any object from a non-empty API group (non
// core object) or a PersistentVolumeClaim object.
// When this field is specified, volume binding will only succeed if the type of
// the specified object matches some installed volume populator or dynamic
// provisioner.
// This field will replace the functionality of the dataSource field and as such
// if both fields are non-empty, they must have the same value. For backwards
// compatibility, when namespace isn't specified in dataSourceRef,
// both fields (dataSource and dataSourceRef) will be set to the same
// value automatically if one of them is empty and the other is non-empty.
// When namespace is specified in dataSourceRef,
// dataSource isn't set to the same value and must be empty.
// There are three important differences between dataSource and dataSourceRef:
//   - While dataSource only allows two specific types of objects, dataSourceRef
//     allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
//     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput) DataSourceRef() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef {
		return v.DataSourceRef
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput)
}

// resources represents the minimum resources the volume should have.
// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
// that are lower than previous value but must still be higher than capacity recorded in the
// status field of the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput) Resources() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources {
		return v.Resources
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput)
}

// selector is a label query over volumes to consider for binding.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput) Selector() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector {
		return v.Selector
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput)
}

// storageClassName is the name of the StorageClass required by the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *string { return v.StorageClassName }).(pulumi.StringPtrOutput)
}

// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
// If specified, the CSI driver will create or update the volume with the attributes defined
// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
// will be set by the persistentvolume controller if it exists.
// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
// exists.
// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
// (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput) VolumeAttributesClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *string { return v.VolumeAttributesClassName }).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim.
// Value of Filesystem is implied when not included in claim spec.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *string { return v.VolumeMode }).(pulumi.StringPtrOutput)
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput) Elem() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec
		return ret
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput)
}

// accessModes contains the desired access modes the volume should have.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) []string {
		if v == nil {
			return nil
		}
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

// dataSource field can be used to specify either:
//   - An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
//   - An existing PVC (PersistentVolumeClaim)
//     If the provisioner or an external controller can support the specified data source,
//     it will create a new volume based on the contents of the specified data source.
//     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
//     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
//     If the namespace is specified, then dataSourceRef will not be copied to dataSource.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput) DataSource() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
// volume is desired. This may be any object from a non-empty API group (non
// core object) or a PersistentVolumeClaim object.
// When this field is specified, volume binding will only succeed if the type of
// the specified object matches some installed volume populator or dynamic
// provisioner.
// This field will replace the functionality of the dataSource field and as such
// if both fields are non-empty, they must have the same value. For backwards
// compatibility, when namespace isn't specified in dataSourceRef,
// both fields (dataSource and dataSourceRef) will be set to the same
// value automatically if one of them is empty and the other is non-empty.
// When namespace is specified in dataSourceRef,
// dataSource isn't set to the same value and must be empty.
// There are three important differences between dataSource and dataSourceRef:
//   - While dataSource only allows two specific types of objects, dataSourceRef
//     allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
//     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput) DataSourceRef() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef {
		if v == nil {
			return nil
		}
		return v.DataSourceRef
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput)
}

// resources represents the minimum resources the volume should have.
// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
// that are lower than previous value but must still be higher than capacity recorded in the
// status field of the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput) Resources() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput)
}

// selector is a label query over volumes to consider for binding.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput) Selector() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput)
}

// storageClassName is the name of the StorageClass required by the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *string {
		if v == nil {
			return nil
		}
		return v.StorageClassName
	}).(pulumi.StringPtrOutput)
}

// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
// If specified, the CSI driver will create or update the volume with the attributes defined
// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
// will be set by the persistentvolume controller if it exists.
// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
// exists.
// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
// (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput) VolumeAttributesClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *string {
		if v == nil {
			return nil
		}
		return v.VolumeAttributesClassName
	}).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim.
// Value of Filesystem is implied when not included in claim spec.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *string {
		if v == nil {
			return nil
		}
		return v.VolumeMode
	}).(pulumi.StringPtrOutput)
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpec) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// dataSource field can be used to specify either:
//   - An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
//   - An existing PVC (PersistentVolumeClaim)
//     If the provisioner or an external controller can support the specified data source,
//     it will create a new volume based on the contents of the specified data source.
//     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
//     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
//     If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name string `pulumi:"name"`
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceInput` via:
//
//	ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs{...}
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput
}

// dataSource field can be used to specify either:
//   - An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
//   - An existing PVC (PersistentVolumeClaim)
//     If the provisioner or an external controller can support the specified data source,
//     it will create a new volume based on the contents of the specified data source.
//     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
//     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
//     If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringInput `pulumi:"name"`
}

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput)
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput).ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutputWithContext(ctx)
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs, ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtr and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrInput` via:
//
//	        ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput
}

type elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrType ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs

func ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtr(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrInput {
	return (*elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrType)(v)
}

func (*elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource)(nil)).Elem()
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput)
}

// dataSource field can be used to specify either:
//   - An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
//   - An existing PVC (PersistentVolumeClaim)
//     If the provisioner or an external controller can support the specified data source,
//     it will create a new volume based on the contents of the specified data source.
//     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
//     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
//     If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput {
	return o.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource {
		return &v
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource) string { return v.Kind }).(pulumi.StringOutput)
}

// Name is the name of resource being referenced
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource) string { return v.Name }).(pulumi.StringOutput)
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput) Elem() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource
		return ret
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSource) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
// volume is desired. This may be any object from a non-empty API group (non
// core object) or a PersistentVolumeClaim object.
// When this field is specified, volume binding will only succeed if the type of
// the specified object matches some installed volume populator or dynamic
// provisioner.
// This field will replace the functionality of the dataSource field and as such
// if both fields are non-empty, they must have the same value. For backwards
// compatibility, when namespace isn't specified in dataSourceRef,
// both fields (dataSource and dataSourceRef) will be set to the same
// value automatically if one of them is empty and the other is non-empty.
// When namespace is specified in dataSourceRef,
// dataSource isn't set to the same value and must be empty.
// There are three important differences between dataSource and dataSourceRef:
//   - While dataSource only allows two specific types of objects, dataSourceRef
//     allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
//     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name string `pulumi:"name"`
	// Namespace is the namespace of resource being referenced
	// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
	// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	Namespace *string `pulumi:"namespace"`
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefInput` via:
//
//	ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs{...}
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
// volume is desired. This may be any object from a non-empty API group (non
// core object) or a PersistentVolumeClaim object.
// When this field is specified, volume binding will only succeed if the type of
// the specified object matches some installed volume populator or dynamic
// provisioner.
// This field will replace the functionality of the dataSource field and as such
// if both fields are non-empty, they must have the same value. For backwards
// compatibility, when namespace isn't specified in dataSourceRef,
// both fields (dataSource and dataSourceRef) will be set to the same
// value automatically if one of them is empty and the other is non-empty.
// When namespace is specified in dataSourceRef,
// dataSource isn't set to the same value and must be empty.
// There are three important differences between dataSource and dataSourceRef:
//   - While dataSource only allows two specific types of objects, dataSourceRef
//     allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
//     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace is the namespace of resource being referenced
	// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
	// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput)
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput).ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutputWithContext(ctx)
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs, ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtr and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrInput` via:
//
//	        ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput
}

type elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrType ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs

func ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtr(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrInput {
	return (*elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrType)(v)
}

func (*elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef)(nil)).Elem()
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
// volume is desired. This may be any object from a non-empty API group (non
// core object) or a PersistentVolumeClaim object.
// When this field is specified, volume binding will only succeed if the type of
// the specified object matches some installed volume populator or dynamic
// provisioner.
// This field will replace the functionality of the dataSource field and as such
// if both fields are non-empty, they must have the same value. For backwards
// compatibility, when namespace isn't specified in dataSourceRef,
// both fields (dataSource and dataSourceRef) will be set to the same
// value automatically if one of them is empty and the other is non-empty.
// When namespace is specified in dataSourceRef,
// dataSource isn't set to the same value and must be empty.
// There are three important differences between dataSource and dataSourceRef:
//   - While dataSource only allows two specific types of objects, dataSourceRef
//     allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
//     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput {
	return o.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef {
		return &v
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef) string { return v.Kind }).(pulumi.StringOutput)
}

// Name is the name of resource being referenced
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace is the namespace of resource being referenced
// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput) Elem() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef
		return ret
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of resource being referenced
// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// resources represents the minimum resources the volume should have.
// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
// that are lower than previous value but must still be higher than capacity recorded in the
// status field of the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources struct {
	// Limits describes the maximum amount of compute resources allowed.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits map[string]interface{} `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
	// otherwise to an implementation-defined value. Requests cannot exceed Limits.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests map[string]interface{} `pulumi:"requests"`
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesInput` via:
//
//	ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs{...}
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput
}

// resources represents the minimum resources the volume should have.
// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
// that are lower than previous value but must still be higher than capacity recorded in the
// status field of the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs struct {
	// Limits describes the maximum amount of compute resources allowed.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits pulumi.MapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
	// otherwise to an implementation-defined value. Requests cannot exceed Limits.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests pulumi.MapInput `pulumi:"requests"`
}

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput)
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput).ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutputWithContext(ctx)
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs, ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtr and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrInput` via:
//
//	        ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput
}

type elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrType ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs

func ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtr(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrInput {
	return (*elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrType)(v)
}

func (*elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources)(nil)).Elem()
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput)
}

// resources represents the minimum resources the volume should have.
// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
// that are lower than previous value but must still be higher than capacity recorded in the
// status field of the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput {
	return o.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources {
		return &v
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources) map[string]interface{} {
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required.
// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
// otherwise to an implementation-defined value. Requests cannot exceed Limits.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources) map[string]interface{} {
		return v.Requests
	}).(pulumi.MapOutput)
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput) Elem() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources
		return ret
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput)
}

// Limits describes the maximum amount of compute resources allowed.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required.
// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
// otherwise to an implementation-defined value. Requests cannot exceed Limits.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResources) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.MapOutput)
}

// Limits describes the maximum amount of compute resources allowed.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesLimits struct {
}

// Requests describes the minimum amount of compute resources required.
// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
// otherwise to an implementation-defined value. Requests cannot exceed Limits.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesRequests struct {
}

// selector is a label query over volumes to consider for binding.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorInput` via:
//
//	ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs{...}
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput
}

// selector is a label query over volumes to consider for binding.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput)
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput).ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutputWithContext(ctx)
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs, ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtr and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrInput` via:
//
//	        ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput
}

type elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrType ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs

func ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtr(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrInput {
	return (*elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrType)(v)
}

func (*elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector)(nil)).Elem()
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrType) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput)
}

// selector is a label query over volumes to consider for binding.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput {
	return o.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector) *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector {
		return &v
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput) MatchExpressions() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector) []ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions {
		return v.MatchExpressions
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput) Elem() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector
		return ret
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput) MatchExpressions() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector) []ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values []string `pulumi:"values"`
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArgs and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsInput` via:
//
//	ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArgs{...}
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArgs) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput)
}

// ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayInput is an input type that accepts ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArray and ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayInput` via:
//
//	ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArray{ ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArgs{...} }
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput
	ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutputWithContext(context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArray []ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsInput

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArray) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput {
	return i.ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArray) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values.
// Valid operators are In, NotIn, Exists and DoesNotExist.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions) string {
		return v.Operator
	}).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn,
// the values array must be non-empty. If the operator is Exists or DoesNotExist,
// the values array must be empty. This array is replaced during a strategic
// merge patch.
func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput() ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput) ToElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions {
		return vs[0].([]ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressions)[vs[1].(int)]
	}).(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
type ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchLabels struct {
}

// PodDisruptionBudget provides access to the default Pod disruption budget for the Elasticsearch cluster.
// The default budget doesn't allow any Pod to be removed in case the cluster is not green or if there is only one node of type `data` or `master`.
// In all other cases the default PodDisruptionBudget sets `minUnavailable` equal to the total number of nodes minus 1.
// To disable, set `PodDisruptionBudget` to the empty value (`{}` in YAML).
type ElasticsearchSpecPodDisruptionBudget struct {
	// ObjectMeta is the metadata of the PDB.
	// The name and namespace provided here are managed by ECK and will be ignored.
	Metadata *ElasticsearchSpecPodDisruptionBudgetMetadata `pulumi:"metadata"`
	// Spec is the specification of the PDB.
	Spec *ElasticsearchSpecPodDisruptionBudgetSpec `pulumi:"spec"`
}

// ElasticsearchSpecPodDisruptionBudgetInput is an input type that accepts ElasticsearchSpecPodDisruptionBudgetArgs and ElasticsearchSpecPodDisruptionBudgetOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPodDisruptionBudgetInput` via:
//
//	ElasticsearchSpecPodDisruptionBudgetArgs{...}
type ElasticsearchSpecPodDisruptionBudgetInput interface {
	pulumi.Input

	ToElasticsearchSpecPodDisruptionBudgetOutput() ElasticsearchSpecPodDisruptionBudgetOutput
	ToElasticsearchSpecPodDisruptionBudgetOutputWithContext(context.Context) ElasticsearchSpecPodDisruptionBudgetOutput
}

// PodDisruptionBudget provides access to the default Pod disruption budget for the Elasticsearch cluster.
// The default budget doesn't allow any Pod to be removed in case the cluster is not green or if there is only one node of type `data` or `master`.
// In all other cases the default PodDisruptionBudget sets `minUnavailable` equal to the total number of nodes minus 1.
// To disable, set `PodDisruptionBudget` to the empty value (`{}` in YAML).
type ElasticsearchSpecPodDisruptionBudgetArgs struct {
	// ObjectMeta is the metadata of the PDB.
	// The name and namespace provided here are managed by ECK and will be ignored.
	Metadata ElasticsearchSpecPodDisruptionBudgetMetadataPtrInput `pulumi:"metadata"`
	// Spec is the specification of the PDB.
	Spec ElasticsearchSpecPodDisruptionBudgetSpecPtrInput `pulumi:"spec"`
}

func (ElasticsearchSpecPodDisruptionBudgetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudget)(nil)).Elem()
}

func (i ElasticsearchSpecPodDisruptionBudgetArgs) ToElasticsearchSpecPodDisruptionBudgetOutput() ElasticsearchSpecPodDisruptionBudgetOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPodDisruptionBudgetArgs) ToElasticsearchSpecPodDisruptionBudgetOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetOutput)
}

func (i ElasticsearchSpecPodDisruptionBudgetArgs) ToElasticsearchSpecPodDisruptionBudgetPtrOutput() ElasticsearchSpecPodDisruptionBudgetPtrOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPodDisruptionBudgetArgs) ToElasticsearchSpecPodDisruptionBudgetPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetOutput).ToElasticsearchSpecPodDisruptionBudgetPtrOutputWithContext(ctx)
}

// ElasticsearchSpecPodDisruptionBudgetPtrInput is an input type that accepts ElasticsearchSpecPodDisruptionBudgetArgs, ElasticsearchSpecPodDisruptionBudgetPtr and ElasticsearchSpecPodDisruptionBudgetPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPodDisruptionBudgetPtrInput` via:
//
//	        ElasticsearchSpecPodDisruptionBudgetArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecPodDisruptionBudgetPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecPodDisruptionBudgetPtrOutput() ElasticsearchSpecPodDisruptionBudgetPtrOutput
	ToElasticsearchSpecPodDisruptionBudgetPtrOutputWithContext(context.Context) ElasticsearchSpecPodDisruptionBudgetPtrOutput
}

type elasticsearchSpecPodDisruptionBudgetPtrType ElasticsearchSpecPodDisruptionBudgetArgs

func ElasticsearchSpecPodDisruptionBudgetPtr(v *ElasticsearchSpecPodDisruptionBudgetArgs) ElasticsearchSpecPodDisruptionBudgetPtrInput {
	return (*elasticsearchSpecPodDisruptionBudgetPtrType)(v)
}

func (*elasticsearchSpecPodDisruptionBudgetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecPodDisruptionBudget)(nil)).Elem()
}

func (i *elasticsearchSpecPodDisruptionBudgetPtrType) ToElasticsearchSpecPodDisruptionBudgetPtrOutput() ElasticsearchSpecPodDisruptionBudgetPtrOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecPodDisruptionBudgetPtrType) ToElasticsearchSpecPodDisruptionBudgetPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetPtrOutput)
}

// PodDisruptionBudget provides access to the default Pod disruption budget for the Elasticsearch cluster.
// The default budget doesn't allow any Pod to be removed in case the cluster is not green or if there is only one node of type `data` or `master`.
// In all other cases the default PodDisruptionBudget sets `minUnavailable` equal to the total number of nodes minus 1.
// To disable, set `PodDisruptionBudget` to the empty value (`{}` in YAML).
type ElasticsearchSpecPodDisruptionBudgetOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPodDisruptionBudgetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudget)(nil)).Elem()
}

func (o ElasticsearchSpecPodDisruptionBudgetOutput) ToElasticsearchSpecPodDisruptionBudgetOutput() ElasticsearchSpecPodDisruptionBudgetOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetOutput) ToElasticsearchSpecPodDisruptionBudgetOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetOutput) ToElasticsearchSpecPodDisruptionBudgetPtrOutput() ElasticsearchSpecPodDisruptionBudgetPtrOutput {
	return o.ToElasticsearchSpecPodDisruptionBudgetPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecPodDisruptionBudgetOutput) ToElasticsearchSpecPodDisruptionBudgetPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecPodDisruptionBudget) *ElasticsearchSpecPodDisruptionBudget {
		return &v
	}).(ElasticsearchSpecPodDisruptionBudgetPtrOutput)
}

// ObjectMeta is the metadata of the PDB.
// The name and namespace provided here are managed by ECK and will be ignored.
func (o ElasticsearchSpecPodDisruptionBudgetOutput) Metadata() ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudget) *ElasticsearchSpecPodDisruptionBudgetMetadata {
		return v.Metadata
	}).(ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput)
}

// Spec is the specification of the PDB.
func (o ElasticsearchSpecPodDisruptionBudgetOutput) Spec() ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudget) *ElasticsearchSpecPodDisruptionBudgetSpec { return v.Spec }).(ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput)
}

type ElasticsearchSpecPodDisruptionBudgetPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPodDisruptionBudgetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecPodDisruptionBudget)(nil)).Elem()
}

func (o ElasticsearchSpecPodDisruptionBudgetPtrOutput) ToElasticsearchSpecPodDisruptionBudgetPtrOutput() ElasticsearchSpecPodDisruptionBudgetPtrOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetPtrOutput) ToElasticsearchSpecPodDisruptionBudgetPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetPtrOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetPtrOutput) Elem() ElasticsearchSpecPodDisruptionBudgetOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudget) ElasticsearchSpecPodDisruptionBudget {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecPodDisruptionBudget
		return ret
	}).(ElasticsearchSpecPodDisruptionBudgetOutput)
}

// ObjectMeta is the metadata of the PDB.
// The name and namespace provided here are managed by ECK and will be ignored.
func (o ElasticsearchSpecPodDisruptionBudgetPtrOutput) Metadata() ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudget) *ElasticsearchSpecPodDisruptionBudgetMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput)
}

// Spec is the specification of the PDB.
func (o ElasticsearchSpecPodDisruptionBudgetPtrOutput) Spec() ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudget) *ElasticsearchSpecPodDisruptionBudgetSpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput)
}

// ObjectMeta is the metadata of the PDB.
// The name and namespace provided here are managed by ECK and will be ignored.
type ElasticsearchSpecPodDisruptionBudgetMetadata struct {
	Annotations map[string]string `pulumi:"annotations"`
	Finalizers  []string          `pulumi:"finalizers"`
	Labels      map[string]string `pulumi:"labels"`
	Name        *string           `pulumi:"name"`
	Namespace   *string           `pulumi:"namespace"`
}

// ElasticsearchSpecPodDisruptionBudgetMetadataInput is an input type that accepts ElasticsearchSpecPodDisruptionBudgetMetadataArgs and ElasticsearchSpecPodDisruptionBudgetMetadataOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPodDisruptionBudgetMetadataInput` via:
//
//	ElasticsearchSpecPodDisruptionBudgetMetadataArgs{...}
type ElasticsearchSpecPodDisruptionBudgetMetadataInput interface {
	pulumi.Input

	ToElasticsearchSpecPodDisruptionBudgetMetadataOutput() ElasticsearchSpecPodDisruptionBudgetMetadataOutput
	ToElasticsearchSpecPodDisruptionBudgetMetadataOutputWithContext(context.Context) ElasticsearchSpecPodDisruptionBudgetMetadataOutput
}

// ObjectMeta is the metadata of the PDB.
// The name and namespace provided here are managed by ECK and will be ignored.
type ElasticsearchSpecPodDisruptionBudgetMetadataArgs struct {
	Annotations pulumi.StringMapInput   `pulumi:"annotations"`
	Finalizers  pulumi.StringArrayInput `pulumi:"finalizers"`
	Labels      pulumi.StringMapInput   `pulumi:"labels"`
	Name        pulumi.StringPtrInput   `pulumi:"name"`
	Namespace   pulumi.StringPtrInput   `pulumi:"namespace"`
}

func (ElasticsearchSpecPodDisruptionBudgetMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetMetadata)(nil)).Elem()
}

func (i ElasticsearchSpecPodDisruptionBudgetMetadataArgs) ToElasticsearchSpecPodDisruptionBudgetMetadataOutput() ElasticsearchSpecPodDisruptionBudgetMetadataOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetMetadataOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPodDisruptionBudgetMetadataArgs) ToElasticsearchSpecPodDisruptionBudgetMetadataOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetMetadataOutput)
}

func (i ElasticsearchSpecPodDisruptionBudgetMetadataArgs) ToElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput() ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetMetadataPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPodDisruptionBudgetMetadataArgs) ToElasticsearchSpecPodDisruptionBudgetMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetMetadataOutput).ToElasticsearchSpecPodDisruptionBudgetMetadataPtrOutputWithContext(ctx)
}

// ElasticsearchSpecPodDisruptionBudgetMetadataPtrInput is an input type that accepts ElasticsearchSpecPodDisruptionBudgetMetadataArgs, ElasticsearchSpecPodDisruptionBudgetMetadataPtr and ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPodDisruptionBudgetMetadataPtrInput` via:
//
//	        ElasticsearchSpecPodDisruptionBudgetMetadataArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecPodDisruptionBudgetMetadataPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput() ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput
	ToElasticsearchSpecPodDisruptionBudgetMetadataPtrOutputWithContext(context.Context) ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput
}

type elasticsearchSpecPodDisruptionBudgetMetadataPtrType ElasticsearchSpecPodDisruptionBudgetMetadataArgs

func ElasticsearchSpecPodDisruptionBudgetMetadataPtr(v *ElasticsearchSpecPodDisruptionBudgetMetadataArgs) ElasticsearchSpecPodDisruptionBudgetMetadataPtrInput {
	return (*elasticsearchSpecPodDisruptionBudgetMetadataPtrType)(v)
}

func (*elasticsearchSpecPodDisruptionBudgetMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecPodDisruptionBudgetMetadata)(nil)).Elem()
}

func (i *elasticsearchSpecPodDisruptionBudgetMetadataPtrType) ToElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput() ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetMetadataPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecPodDisruptionBudgetMetadataPtrType) ToElasticsearchSpecPodDisruptionBudgetMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput)
}

// ObjectMeta is the metadata of the PDB.
// The name and namespace provided here are managed by ECK and will be ignored.
type ElasticsearchSpecPodDisruptionBudgetMetadataOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPodDisruptionBudgetMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetMetadata)(nil)).Elem()
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataOutput) ToElasticsearchSpecPodDisruptionBudgetMetadataOutput() ElasticsearchSpecPodDisruptionBudgetMetadataOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataOutput) ToElasticsearchSpecPodDisruptionBudgetMetadataOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetMetadataOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataOutput) ToElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput() ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput {
	return o.ToElasticsearchSpecPodDisruptionBudgetMetadataPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataOutput) ToElasticsearchSpecPodDisruptionBudgetMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecPodDisruptionBudgetMetadata) *ElasticsearchSpecPodDisruptionBudgetMetadata {
		return &v
	}).(ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetMetadata) []string { return v.Finalizers }).(pulumi.StringArrayOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetMetadata) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetMetadata) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecPodDisruptionBudgetMetadata)(nil)).Elem()
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput) ToElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput() ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput) ToElasticsearchSpecPodDisruptionBudgetMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput) Elem() ElasticsearchSpecPodDisruptionBudgetMetadataOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetMetadata) ElasticsearchSpecPodDisruptionBudgetMetadata {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecPodDisruptionBudgetMetadata
		return ret
	}).(ElasticsearchSpecPodDisruptionBudgetMetadataOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetMetadata) []string {
		if v == nil {
			return nil
		}
		return v.Finalizers
	}).(pulumi.StringArrayOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecPodDisruptionBudgetMetadataAnnotations struct {
}

type ElasticsearchSpecPodDisruptionBudgetMetadataLabels struct {
}

// Spec is the specification of the PDB.
type ElasticsearchSpecPodDisruptionBudgetSpec struct {
	// An eviction is allowed if at most "maxUnavailable" pods selected by
	// "selector" are unavailable after the eviction, i.e. even in absence of
	// the evicted pod. For example, one can prevent all voluntary evictions
	// by specifying 0. This is a mutually exclusive setting with "minAvailable".
	MaxUnavailable interface{} `pulumi:"maxUnavailable"`
	// An eviction is allowed if at least "minAvailable" pods selected by
	// "selector" will still be available after the eviction, i.e. even in the
	// absence of the evicted pod.  So for example you can prevent all voluntary
	// evictions by specifying "100%".
	MinAvailable interface{} `pulumi:"minAvailable"`
	// Label query over pods whose evictions are managed by the disruption
	// budget.
	// A null selector will match no pods, while an empty ({}) selector will select
	// all pods within the namespace.
	Selector *ElasticsearchSpecPodDisruptionBudgetSpecSelector `pulumi:"selector"`
	// UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods
	// should be considered for eviction. Current implementation considers healthy pods,
	// as pods that have status.conditions item with type="Ready",status="True".
	//
	// Valid policies are IfHealthyBudget and AlwaysAllow.
	// If no policy is specified, the default behavior will be used,
	// which corresponds to the IfHealthyBudget policy.
	//
	// IfHealthyBudget policy means that running pods (status.phase="Running"),
	// but not yet healthy can be evicted only if the guarded application is not
	// disrupted (status.currentHealthy is at least equal to status.desiredHealthy).
	// Healthy pods will be subject to the PDB for eviction.
	//
	// AlwaysAllow policy means that all running pods (status.phase="Running"),
	// but not yet healthy are considered disrupted and can be evicted regardless
	// of whether the criteria in a PDB is met. This means perspective running
	// pods of a disrupted application might not get a chance to become healthy.
	// Healthy pods will be subject to the PDB for eviction.
	//
	// Additional policies may be added in the future.
	// Clients making eviction decisions should disallow eviction of unhealthy pods
	// if they encounter an unrecognized policy in this field.
	//
	// This field is beta-level. The eviction API uses this field when
	// the feature gate PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).
	UnhealthyPodEvictionPolicy *string `pulumi:"unhealthyPodEvictionPolicy"`
}

// ElasticsearchSpecPodDisruptionBudgetSpecInput is an input type that accepts ElasticsearchSpecPodDisruptionBudgetSpecArgs and ElasticsearchSpecPodDisruptionBudgetSpecOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPodDisruptionBudgetSpecInput` via:
//
//	ElasticsearchSpecPodDisruptionBudgetSpecArgs{...}
type ElasticsearchSpecPodDisruptionBudgetSpecInput interface {
	pulumi.Input

	ToElasticsearchSpecPodDisruptionBudgetSpecOutput() ElasticsearchSpecPodDisruptionBudgetSpecOutput
	ToElasticsearchSpecPodDisruptionBudgetSpecOutputWithContext(context.Context) ElasticsearchSpecPodDisruptionBudgetSpecOutput
}

// Spec is the specification of the PDB.
type ElasticsearchSpecPodDisruptionBudgetSpecArgs struct {
	// An eviction is allowed if at most "maxUnavailable" pods selected by
	// "selector" are unavailable after the eviction, i.e. even in absence of
	// the evicted pod. For example, one can prevent all voluntary evictions
	// by specifying 0. This is a mutually exclusive setting with "minAvailable".
	MaxUnavailable pulumi.Input `pulumi:"maxUnavailable"`
	// An eviction is allowed if at least "minAvailable" pods selected by
	// "selector" will still be available after the eviction, i.e. even in the
	// absence of the evicted pod.  So for example you can prevent all voluntary
	// evictions by specifying "100%".
	MinAvailable pulumi.Input `pulumi:"minAvailable"`
	// Label query over pods whose evictions are managed by the disruption
	// budget.
	// A null selector will match no pods, while an empty ({}) selector will select
	// all pods within the namespace.
	Selector ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrInput `pulumi:"selector"`
	// UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods
	// should be considered for eviction. Current implementation considers healthy pods,
	// as pods that have status.conditions item with type="Ready",status="True".
	//
	// Valid policies are IfHealthyBudget and AlwaysAllow.
	// If no policy is specified, the default behavior will be used,
	// which corresponds to the IfHealthyBudget policy.
	//
	// IfHealthyBudget policy means that running pods (status.phase="Running"),
	// but not yet healthy can be evicted only if the guarded application is not
	// disrupted (status.currentHealthy is at least equal to status.desiredHealthy).
	// Healthy pods will be subject to the PDB for eviction.
	//
	// AlwaysAllow policy means that all running pods (status.phase="Running"),
	// but not yet healthy are considered disrupted and can be evicted regardless
	// of whether the criteria in a PDB is met. This means perspective running
	// pods of a disrupted application might not get a chance to become healthy.
	// Healthy pods will be subject to the PDB for eviction.
	//
	// Additional policies may be added in the future.
	// Clients making eviction decisions should disallow eviction of unhealthy pods
	// if they encounter an unrecognized policy in this field.
	//
	// This field is beta-level. The eviction API uses this field when
	// the feature gate PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).
	UnhealthyPodEvictionPolicy pulumi.StringPtrInput `pulumi:"unhealthyPodEvictionPolicy"`
}

func (ElasticsearchSpecPodDisruptionBudgetSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpec)(nil)).Elem()
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecArgs) ToElasticsearchSpecPodDisruptionBudgetSpecOutput() ElasticsearchSpecPodDisruptionBudgetSpecOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetSpecOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecArgs) ToElasticsearchSpecPodDisruptionBudgetSpecOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetSpecOutput)
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecArgs) ToElasticsearchSpecPodDisruptionBudgetSpecPtrOutput() ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetSpecPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecArgs) ToElasticsearchSpecPodDisruptionBudgetSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetSpecOutput).ToElasticsearchSpecPodDisruptionBudgetSpecPtrOutputWithContext(ctx)
}

// ElasticsearchSpecPodDisruptionBudgetSpecPtrInput is an input type that accepts ElasticsearchSpecPodDisruptionBudgetSpecArgs, ElasticsearchSpecPodDisruptionBudgetSpecPtr and ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPodDisruptionBudgetSpecPtrInput` via:
//
//	        ElasticsearchSpecPodDisruptionBudgetSpecArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecPodDisruptionBudgetSpecPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecPodDisruptionBudgetSpecPtrOutput() ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput
	ToElasticsearchSpecPodDisruptionBudgetSpecPtrOutputWithContext(context.Context) ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput
}

type elasticsearchSpecPodDisruptionBudgetSpecPtrType ElasticsearchSpecPodDisruptionBudgetSpecArgs

func ElasticsearchSpecPodDisruptionBudgetSpecPtr(v *ElasticsearchSpecPodDisruptionBudgetSpecArgs) ElasticsearchSpecPodDisruptionBudgetSpecPtrInput {
	return (*elasticsearchSpecPodDisruptionBudgetSpecPtrType)(v)
}

func (*elasticsearchSpecPodDisruptionBudgetSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecPodDisruptionBudgetSpec)(nil)).Elem()
}

func (i *elasticsearchSpecPodDisruptionBudgetSpecPtrType) ToElasticsearchSpecPodDisruptionBudgetSpecPtrOutput() ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetSpecPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecPodDisruptionBudgetSpecPtrType) ToElasticsearchSpecPodDisruptionBudgetSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput)
}

// Spec is the specification of the PDB.
type ElasticsearchSpecPodDisruptionBudgetSpecOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPodDisruptionBudgetSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpec)(nil)).Elem()
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecOutput) ToElasticsearchSpecPodDisruptionBudgetSpecOutput() ElasticsearchSpecPodDisruptionBudgetSpecOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecOutput) ToElasticsearchSpecPodDisruptionBudgetSpecOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecOutput) ToElasticsearchSpecPodDisruptionBudgetSpecPtrOutput() ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput {
	return o.ToElasticsearchSpecPodDisruptionBudgetSpecPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecOutput) ToElasticsearchSpecPodDisruptionBudgetSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecPodDisruptionBudgetSpec) *ElasticsearchSpecPodDisruptionBudgetSpec {
		return &v
	}).(ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput)
}

// An eviction is allowed if at most "maxUnavailable" pods selected by
// "selector" are unavailable after the eviction, i.e. even in absence of
// the evicted pod. For example, one can prevent all voluntary evictions
// by specifying 0. This is a mutually exclusive setting with "minAvailable".
func (o ElasticsearchSpecPodDisruptionBudgetSpecOutput) MaxUnavailable() pulumi.AnyOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetSpec) interface{} { return v.MaxUnavailable }).(pulumi.AnyOutput)
}

// An eviction is allowed if at least "minAvailable" pods selected by
// "selector" will still be available after the eviction, i.e. even in the
// absence of the evicted pod.  So for example you can prevent all voluntary
// evictions by specifying "100%".
func (o ElasticsearchSpecPodDisruptionBudgetSpecOutput) MinAvailable() pulumi.AnyOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetSpec) interface{} { return v.MinAvailable }).(pulumi.AnyOutput)
}

// Label query over pods whose evictions are managed by the disruption
// budget.
// A null selector will match no pods, while an empty ({}) selector will select
// all pods within the namespace.
func (o ElasticsearchSpecPodDisruptionBudgetSpecOutput) Selector() ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetSpec) *ElasticsearchSpecPodDisruptionBudgetSpecSelector {
		return v.Selector
	}).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput)
}

// UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods
// should be considered for eviction. Current implementation considers healthy pods,
// as pods that have status.conditions item with type="Ready",status="True".
//
// Valid policies are IfHealthyBudget and AlwaysAllow.
// If no policy is specified, the default behavior will be used,
// which corresponds to the IfHealthyBudget policy.
//
// IfHealthyBudget policy means that running pods (status.phase="Running"),
// but not yet healthy can be evicted only if the guarded application is not
// disrupted (status.currentHealthy is at least equal to status.desiredHealthy).
// Healthy pods will be subject to the PDB for eviction.
//
// AlwaysAllow policy means that all running pods (status.phase="Running"),
// but not yet healthy are considered disrupted and can be evicted regardless
// of whether the criteria in a PDB is met. This means perspective running
// pods of a disrupted application might not get a chance to become healthy.
// Healthy pods will be subject to the PDB for eviction.
//
// Additional policies may be added in the future.
// Clients making eviction decisions should disallow eviction of unhealthy pods
// if they encounter an unrecognized policy in this field.
//
// This field is beta-level. The eviction API uses this field when
// the feature gate PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).
func (o ElasticsearchSpecPodDisruptionBudgetSpecOutput) UnhealthyPodEvictionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetSpec) *string { return v.UnhealthyPodEvictionPolicy }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecPodDisruptionBudgetSpec)(nil)).Elem()
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput) ToElasticsearchSpecPodDisruptionBudgetSpecPtrOutput() ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput) ToElasticsearchSpecPodDisruptionBudgetSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput) Elem() ElasticsearchSpecPodDisruptionBudgetSpecOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetSpec) ElasticsearchSpecPodDisruptionBudgetSpec {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecPodDisruptionBudgetSpec
		return ret
	}).(ElasticsearchSpecPodDisruptionBudgetSpecOutput)
}

// An eviction is allowed if at most "maxUnavailable" pods selected by
// "selector" are unavailable after the eviction, i.e. even in absence of
// the evicted pod. For example, one can prevent all voluntary evictions
// by specifying 0. This is a mutually exclusive setting with "minAvailable".
func (o ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput) MaxUnavailable() pulumi.AnyOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.MaxUnavailable
	}).(pulumi.AnyOutput)
}

// An eviction is allowed if at least "minAvailable" pods selected by
// "selector" will still be available after the eviction, i.e. even in the
// absence of the evicted pod.  So for example you can prevent all voluntary
// evictions by specifying "100%".
func (o ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput) MinAvailable() pulumi.AnyOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetSpec) interface{} {
		if v == nil {
			return nil
		}
		return v.MinAvailable
	}).(pulumi.AnyOutput)
}

// Label query over pods whose evictions are managed by the disruption
// budget.
// A null selector will match no pods, while an empty ({}) selector will select
// all pods within the namespace.
func (o ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput) Selector() ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetSpec) *ElasticsearchSpecPodDisruptionBudgetSpecSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput)
}

// UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods
// should be considered for eviction. Current implementation considers healthy pods,
// as pods that have status.conditions item with type="Ready",status="True".
//
// Valid policies are IfHealthyBudget and AlwaysAllow.
// If no policy is specified, the default behavior will be used,
// which corresponds to the IfHealthyBudget policy.
//
// IfHealthyBudget policy means that running pods (status.phase="Running"),
// but not yet healthy can be evicted only if the guarded application is not
// disrupted (status.currentHealthy is at least equal to status.desiredHealthy).
// Healthy pods will be subject to the PDB for eviction.
//
// AlwaysAllow policy means that all running pods (status.phase="Running"),
// but not yet healthy are considered disrupted and can be evicted regardless
// of whether the criteria in a PDB is met. This means perspective running
// pods of a disrupted application might not get a chance to become healthy.
// Healthy pods will be subject to the PDB for eviction.
//
// Additional policies may be added in the future.
// Clients making eviction decisions should disallow eviction of unhealthy pods
// if they encounter an unrecognized policy in this field.
//
// This field is beta-level. The eviction API uses this field when
// the feature gate PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).
func (o ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput) UnhealthyPodEvictionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetSpec) *string {
		if v == nil {
			return nil
		}
		return v.UnhealthyPodEvictionPolicy
	}).(pulumi.StringPtrOutput)
}

// Label query over pods whose evictions are managed by the disruption
// budget.
// A null selector will match no pods, while an empty ({}) selector will select
// all pods within the namespace.
type ElasticsearchSpecPodDisruptionBudgetSpecSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ElasticsearchSpecPodDisruptionBudgetSpecSelectorInput is an input type that accepts ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs and ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPodDisruptionBudgetSpecSelectorInput` via:
//
//	ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs{...}
type ElasticsearchSpecPodDisruptionBudgetSpecSelectorInput interface {
	pulumi.Input

	ToElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput
	ToElasticsearchSpecPodDisruptionBudgetSpecSelectorOutputWithContext(context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput
}

// Label query over pods whose evictions are managed by the disruption
// budget.
// A null selector will match no pods, while an empty ({}) selector will select
// all pods within the namespace.
type ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecSelector)(nil)).Elem()
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetSpecSelectorOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput)
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput).ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutputWithContext(ctx)
}

// ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrInput is an input type that accepts ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs, ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtr and ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrInput` via:
//
//	        ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput
	ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutputWithContext(context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput
}

type elasticsearchSpecPodDisruptionBudgetSpecSelectorPtrType ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs

func ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtr(v *ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs) ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrInput {
	return (*elasticsearchSpecPodDisruptionBudgetSpecSelectorPtrType)(v)
}

func (*elasticsearchSpecPodDisruptionBudgetSpecSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecPodDisruptionBudgetSpecSelector)(nil)).Elem()
}

func (i *elasticsearchSpecPodDisruptionBudgetSpecSelectorPtrType) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecPodDisruptionBudgetSpecSelectorPtrType) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput)
}

// Label query over pods whose evictions are managed by the disruption
// budget.
// A null selector will match no pods, while an empty ({}) selector will select
// all pods within the namespace.
type ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecSelector)(nil)).Elem()
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput {
	return o.ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecPodDisruptionBudgetSpecSelector) *ElasticsearchSpecPodDisruptionBudgetSpecSelector {
		return &v
	}).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput) MatchExpressions() ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetSpecSelector) []ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions {
		return v.MatchExpressions
	}).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetSpecSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecPodDisruptionBudgetSpecSelector)(nil)).Elem()
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput) Elem() ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetSpecSelector) ElasticsearchSpecPodDisruptionBudgetSpecSelector {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecPodDisruptionBudgetSpecSelector
		return ret
	}).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput) MatchExpressions() ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetSpecSelector) []ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecPodDisruptionBudgetSpecSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key string `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values []string `pulumi:"values"`
}

// ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsInput is an input type that accepts ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArgs and ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsInput` via:
//
//	ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArgs{...}
type ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput
	ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutputWithContext(context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArgs) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArgs) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput)
}

// ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayInput is an input type that accepts ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArray and ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayInput` via:
//
//	ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArray{ ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArgs{...} }
type ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput
	ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutputWithContext(context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput
}

type ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArray []ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsInput

func (ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArray) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput {
	return i.ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArray) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions) string { return v.Key }).(pulumi.StringOutput)
}

// operator represents a key's relationship to a set of values.
// Valid operators are In, NotIn, Exists and DoesNotExist.
func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions) string { return v.Operator }).(pulumi.StringOutput)
}

// values is an array of string values. If the operator is In or NotIn,
// the values array must be non-empty. If the operator is Exists or DoesNotExist,
// the values array must be empty. This array is replaced during a strategic
// merge patch.
func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput() ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput) ToElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions {
		return vs[0].([]ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressions)[vs[1].(int)]
	}).(ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
type ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchLabels struct {
}

// RemoteCluster declares a remote Elasticsearch cluster connection.
type ElasticsearchSpecRemoteClusters struct {
	// ElasticsearchRef is a reference to an Elasticsearch cluster running within the same k8s cluster.
	ElasticsearchRef *ElasticsearchSpecRemoteClustersElasticsearchRef `pulumi:"elasticsearchRef"`
	// Name is the name of the remote cluster as it is set in the Elasticsearch settings.
	// The name is expected to be unique for each remote clusters.
	Name string `pulumi:"name"`
}

// ElasticsearchSpecRemoteClustersInput is an input type that accepts ElasticsearchSpecRemoteClustersArgs and ElasticsearchSpecRemoteClustersOutput values.
// You can construct a concrete instance of `ElasticsearchSpecRemoteClustersInput` via:
//
//	ElasticsearchSpecRemoteClustersArgs{...}
type ElasticsearchSpecRemoteClustersInput interface {
	pulumi.Input

	ToElasticsearchSpecRemoteClustersOutput() ElasticsearchSpecRemoteClustersOutput
	ToElasticsearchSpecRemoteClustersOutputWithContext(context.Context) ElasticsearchSpecRemoteClustersOutput
}

// RemoteCluster declares a remote Elasticsearch cluster connection.
type ElasticsearchSpecRemoteClustersArgs struct {
	// ElasticsearchRef is a reference to an Elasticsearch cluster running within the same k8s cluster.
	ElasticsearchRef ElasticsearchSpecRemoteClustersElasticsearchRefPtrInput `pulumi:"elasticsearchRef"`
	// Name is the name of the remote cluster as it is set in the Elasticsearch settings.
	// The name is expected to be unique for each remote clusters.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ElasticsearchSpecRemoteClustersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecRemoteClusters)(nil)).Elem()
}

func (i ElasticsearchSpecRemoteClustersArgs) ToElasticsearchSpecRemoteClustersOutput() ElasticsearchSpecRemoteClustersOutput {
	return i.ToElasticsearchSpecRemoteClustersOutputWithContext(context.Background())
}

func (i ElasticsearchSpecRemoteClustersArgs) ToElasticsearchSpecRemoteClustersOutputWithContext(ctx context.Context) ElasticsearchSpecRemoteClustersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecRemoteClustersOutput)
}

// ElasticsearchSpecRemoteClustersArrayInput is an input type that accepts ElasticsearchSpecRemoteClustersArray and ElasticsearchSpecRemoteClustersArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecRemoteClustersArrayInput` via:
//
//	ElasticsearchSpecRemoteClustersArray{ ElasticsearchSpecRemoteClustersArgs{...} }
type ElasticsearchSpecRemoteClustersArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecRemoteClustersArrayOutput() ElasticsearchSpecRemoteClustersArrayOutput
	ToElasticsearchSpecRemoteClustersArrayOutputWithContext(context.Context) ElasticsearchSpecRemoteClustersArrayOutput
}

type ElasticsearchSpecRemoteClustersArray []ElasticsearchSpecRemoteClustersInput

func (ElasticsearchSpecRemoteClustersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecRemoteClusters)(nil)).Elem()
}

func (i ElasticsearchSpecRemoteClustersArray) ToElasticsearchSpecRemoteClustersArrayOutput() ElasticsearchSpecRemoteClustersArrayOutput {
	return i.ToElasticsearchSpecRemoteClustersArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecRemoteClustersArray) ToElasticsearchSpecRemoteClustersArrayOutputWithContext(ctx context.Context) ElasticsearchSpecRemoteClustersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecRemoteClustersArrayOutput)
}

// RemoteCluster declares a remote Elasticsearch cluster connection.
type ElasticsearchSpecRemoteClustersOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecRemoteClustersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecRemoteClusters)(nil)).Elem()
}

func (o ElasticsearchSpecRemoteClustersOutput) ToElasticsearchSpecRemoteClustersOutput() ElasticsearchSpecRemoteClustersOutput {
	return o
}

func (o ElasticsearchSpecRemoteClustersOutput) ToElasticsearchSpecRemoteClustersOutputWithContext(ctx context.Context) ElasticsearchSpecRemoteClustersOutput {
	return o
}

// ElasticsearchRef is a reference to an Elasticsearch cluster running within the same k8s cluster.
func (o ElasticsearchSpecRemoteClustersOutput) ElasticsearchRef() ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecRemoteClusters) *ElasticsearchSpecRemoteClustersElasticsearchRef {
		return v.ElasticsearchRef
	}).(ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput)
}

// Name is the name of the remote cluster as it is set in the Elasticsearch settings.
// The name is expected to be unique for each remote clusters.
func (o ElasticsearchSpecRemoteClustersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticsearchSpecRemoteClusters) string { return v.Name }).(pulumi.StringOutput)
}

type ElasticsearchSpecRemoteClustersArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecRemoteClustersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecRemoteClusters)(nil)).Elem()
}

func (o ElasticsearchSpecRemoteClustersArrayOutput) ToElasticsearchSpecRemoteClustersArrayOutput() ElasticsearchSpecRemoteClustersArrayOutput {
	return o
}

func (o ElasticsearchSpecRemoteClustersArrayOutput) ToElasticsearchSpecRemoteClustersArrayOutputWithContext(ctx context.Context) ElasticsearchSpecRemoteClustersArrayOutput {
	return o
}

func (o ElasticsearchSpecRemoteClustersArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecRemoteClustersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecRemoteClusters {
		return vs[0].([]ElasticsearchSpecRemoteClusters)[vs[1].(int)]
	}).(ElasticsearchSpecRemoteClustersOutput)
}

// ElasticsearchRef is a reference to an Elasticsearch cluster running within the same k8s cluster.
type ElasticsearchSpecRemoteClustersElasticsearchRef struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name *string `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace *string `pulumi:"namespace"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName *string `pulumi:"serviceName"`
}

// ElasticsearchSpecRemoteClustersElasticsearchRefInput is an input type that accepts ElasticsearchSpecRemoteClustersElasticsearchRefArgs and ElasticsearchSpecRemoteClustersElasticsearchRefOutput values.
// You can construct a concrete instance of `ElasticsearchSpecRemoteClustersElasticsearchRefInput` via:
//
//	ElasticsearchSpecRemoteClustersElasticsearchRefArgs{...}
type ElasticsearchSpecRemoteClustersElasticsearchRefInput interface {
	pulumi.Input

	ToElasticsearchSpecRemoteClustersElasticsearchRefOutput() ElasticsearchSpecRemoteClustersElasticsearchRefOutput
	ToElasticsearchSpecRemoteClustersElasticsearchRefOutputWithContext(context.Context) ElasticsearchSpecRemoteClustersElasticsearchRefOutput
}

// ElasticsearchRef is a reference to an Elasticsearch cluster running within the same k8s cluster.
type ElasticsearchSpecRemoteClustersElasticsearchRefArgs struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
}

func (ElasticsearchSpecRemoteClustersElasticsearchRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecRemoteClustersElasticsearchRef)(nil)).Elem()
}

func (i ElasticsearchSpecRemoteClustersElasticsearchRefArgs) ToElasticsearchSpecRemoteClustersElasticsearchRefOutput() ElasticsearchSpecRemoteClustersElasticsearchRefOutput {
	return i.ToElasticsearchSpecRemoteClustersElasticsearchRefOutputWithContext(context.Background())
}

func (i ElasticsearchSpecRemoteClustersElasticsearchRefArgs) ToElasticsearchSpecRemoteClustersElasticsearchRefOutputWithContext(ctx context.Context) ElasticsearchSpecRemoteClustersElasticsearchRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecRemoteClustersElasticsearchRefOutput)
}

func (i ElasticsearchSpecRemoteClustersElasticsearchRefArgs) ToElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput() ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput {
	return i.ToElasticsearchSpecRemoteClustersElasticsearchRefPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecRemoteClustersElasticsearchRefArgs) ToElasticsearchSpecRemoteClustersElasticsearchRefPtrOutputWithContext(ctx context.Context) ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecRemoteClustersElasticsearchRefOutput).ToElasticsearchSpecRemoteClustersElasticsearchRefPtrOutputWithContext(ctx)
}

// ElasticsearchSpecRemoteClustersElasticsearchRefPtrInput is an input type that accepts ElasticsearchSpecRemoteClustersElasticsearchRefArgs, ElasticsearchSpecRemoteClustersElasticsearchRefPtr and ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecRemoteClustersElasticsearchRefPtrInput` via:
//
//	        ElasticsearchSpecRemoteClustersElasticsearchRefArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecRemoteClustersElasticsearchRefPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput() ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput
	ToElasticsearchSpecRemoteClustersElasticsearchRefPtrOutputWithContext(context.Context) ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput
}

type elasticsearchSpecRemoteClustersElasticsearchRefPtrType ElasticsearchSpecRemoteClustersElasticsearchRefArgs

func ElasticsearchSpecRemoteClustersElasticsearchRefPtr(v *ElasticsearchSpecRemoteClustersElasticsearchRefArgs) ElasticsearchSpecRemoteClustersElasticsearchRefPtrInput {
	return (*elasticsearchSpecRemoteClustersElasticsearchRefPtrType)(v)
}

func (*elasticsearchSpecRemoteClustersElasticsearchRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecRemoteClustersElasticsearchRef)(nil)).Elem()
}

func (i *elasticsearchSpecRemoteClustersElasticsearchRefPtrType) ToElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput() ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput {
	return i.ToElasticsearchSpecRemoteClustersElasticsearchRefPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecRemoteClustersElasticsearchRefPtrType) ToElasticsearchSpecRemoteClustersElasticsearchRefPtrOutputWithContext(ctx context.Context) ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput)
}

// ElasticsearchRef is a reference to an Elasticsearch cluster running within the same k8s cluster.
type ElasticsearchSpecRemoteClustersElasticsearchRefOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecRemoteClustersElasticsearchRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecRemoteClustersElasticsearchRef)(nil)).Elem()
}

func (o ElasticsearchSpecRemoteClustersElasticsearchRefOutput) ToElasticsearchSpecRemoteClustersElasticsearchRefOutput() ElasticsearchSpecRemoteClustersElasticsearchRefOutput {
	return o
}

func (o ElasticsearchSpecRemoteClustersElasticsearchRefOutput) ToElasticsearchSpecRemoteClustersElasticsearchRefOutputWithContext(ctx context.Context) ElasticsearchSpecRemoteClustersElasticsearchRefOutput {
	return o
}

func (o ElasticsearchSpecRemoteClustersElasticsearchRefOutput) ToElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput() ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput {
	return o.ToElasticsearchSpecRemoteClustersElasticsearchRefPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecRemoteClustersElasticsearchRefOutput) ToElasticsearchSpecRemoteClustersElasticsearchRefPtrOutputWithContext(ctx context.Context) ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecRemoteClustersElasticsearchRef) *ElasticsearchSpecRemoteClustersElasticsearchRef {
		return &v
	}).(ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput)
}

// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
func (o ElasticsearchSpecRemoteClustersElasticsearchRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecRemoteClustersElasticsearchRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o ElasticsearchSpecRemoteClustersElasticsearchRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecRemoteClustersElasticsearchRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
// the referenced resource is used.
func (o ElasticsearchSpecRemoteClustersElasticsearchRefOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecRemoteClustersElasticsearchRef) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecRemoteClustersElasticsearchRef)(nil)).Elem()
}

func (o ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput) ToElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput() ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput {
	return o
}

func (o ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput) ToElasticsearchSpecRemoteClustersElasticsearchRefPtrOutputWithContext(ctx context.Context) ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput {
	return o
}

func (o ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput) Elem() ElasticsearchSpecRemoteClustersElasticsearchRefOutput {
	return o.ApplyT(func(v *ElasticsearchSpecRemoteClustersElasticsearchRef) ElasticsearchSpecRemoteClustersElasticsearchRef {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecRemoteClustersElasticsearchRef
		return ret
	}).(ElasticsearchSpecRemoteClustersElasticsearchRefOutput)
}

// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
func (o ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecRemoteClustersElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecRemoteClustersElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
// the referenced resource is used.
func (o ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecRemoteClustersElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return v.ServiceName
	}).(pulumi.StringPtrOutput)
}

// SecretSource defines a data source based on a Kubernetes Secret.
type ElasticsearchSpecSecureSettings struct {
	// Entries define how to project each key-value pair in the secret to filesystem paths.
	// If not defined, all keys will be projected to similarly named paths in the filesystem.
	// If defined, only the specified keys will be projected to the corresponding paths.
	Entries []ElasticsearchSpecSecureSettingsEntries `pulumi:"entries"`
	// SecretName is the name of the secret.
	SecretName string `pulumi:"secretName"`
}

// ElasticsearchSpecSecureSettingsInput is an input type that accepts ElasticsearchSpecSecureSettingsArgs and ElasticsearchSpecSecureSettingsOutput values.
// You can construct a concrete instance of `ElasticsearchSpecSecureSettingsInput` via:
//
//	ElasticsearchSpecSecureSettingsArgs{...}
type ElasticsearchSpecSecureSettingsInput interface {
	pulumi.Input

	ToElasticsearchSpecSecureSettingsOutput() ElasticsearchSpecSecureSettingsOutput
	ToElasticsearchSpecSecureSettingsOutputWithContext(context.Context) ElasticsearchSpecSecureSettingsOutput
}

// SecretSource defines a data source based on a Kubernetes Secret.
type ElasticsearchSpecSecureSettingsArgs struct {
	// Entries define how to project each key-value pair in the secret to filesystem paths.
	// If not defined, all keys will be projected to similarly named paths in the filesystem.
	// If defined, only the specified keys will be projected to the corresponding paths.
	Entries ElasticsearchSpecSecureSettingsEntriesArrayInput `pulumi:"entries"`
	// SecretName is the name of the secret.
	SecretName pulumi.StringInput `pulumi:"secretName"`
}

func (ElasticsearchSpecSecureSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecSecureSettings)(nil)).Elem()
}

func (i ElasticsearchSpecSecureSettingsArgs) ToElasticsearchSpecSecureSettingsOutput() ElasticsearchSpecSecureSettingsOutput {
	return i.ToElasticsearchSpecSecureSettingsOutputWithContext(context.Background())
}

func (i ElasticsearchSpecSecureSettingsArgs) ToElasticsearchSpecSecureSettingsOutputWithContext(ctx context.Context) ElasticsearchSpecSecureSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecSecureSettingsOutput)
}

// ElasticsearchSpecSecureSettingsArrayInput is an input type that accepts ElasticsearchSpecSecureSettingsArray and ElasticsearchSpecSecureSettingsArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecSecureSettingsArrayInput` via:
//
//	ElasticsearchSpecSecureSettingsArray{ ElasticsearchSpecSecureSettingsArgs{...} }
type ElasticsearchSpecSecureSettingsArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecSecureSettingsArrayOutput() ElasticsearchSpecSecureSettingsArrayOutput
	ToElasticsearchSpecSecureSettingsArrayOutputWithContext(context.Context) ElasticsearchSpecSecureSettingsArrayOutput
}

type ElasticsearchSpecSecureSettingsArray []ElasticsearchSpecSecureSettingsInput

func (ElasticsearchSpecSecureSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecSecureSettings)(nil)).Elem()
}

func (i ElasticsearchSpecSecureSettingsArray) ToElasticsearchSpecSecureSettingsArrayOutput() ElasticsearchSpecSecureSettingsArrayOutput {
	return i.ToElasticsearchSpecSecureSettingsArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecSecureSettingsArray) ToElasticsearchSpecSecureSettingsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecSecureSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecSecureSettingsArrayOutput)
}

// SecretSource defines a data source based on a Kubernetes Secret.
type ElasticsearchSpecSecureSettingsOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecSecureSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecSecureSettings)(nil)).Elem()
}

func (o ElasticsearchSpecSecureSettingsOutput) ToElasticsearchSpecSecureSettingsOutput() ElasticsearchSpecSecureSettingsOutput {
	return o
}

func (o ElasticsearchSpecSecureSettingsOutput) ToElasticsearchSpecSecureSettingsOutputWithContext(ctx context.Context) ElasticsearchSpecSecureSettingsOutput {
	return o
}

// Entries define how to project each key-value pair in the secret to filesystem paths.
// If not defined, all keys will be projected to similarly named paths in the filesystem.
// If defined, only the specified keys will be projected to the corresponding paths.
func (o ElasticsearchSpecSecureSettingsOutput) Entries() ElasticsearchSpecSecureSettingsEntriesArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecSecureSettings) []ElasticsearchSpecSecureSettingsEntries { return v.Entries }).(ElasticsearchSpecSecureSettingsEntriesArrayOutput)
}

// SecretName is the name of the secret.
func (o ElasticsearchSpecSecureSettingsOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticsearchSpecSecureSettings) string { return v.SecretName }).(pulumi.StringOutput)
}

type ElasticsearchSpecSecureSettingsArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecSecureSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecSecureSettings)(nil)).Elem()
}

func (o ElasticsearchSpecSecureSettingsArrayOutput) ToElasticsearchSpecSecureSettingsArrayOutput() ElasticsearchSpecSecureSettingsArrayOutput {
	return o
}

func (o ElasticsearchSpecSecureSettingsArrayOutput) ToElasticsearchSpecSecureSettingsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecSecureSettingsArrayOutput {
	return o
}

func (o ElasticsearchSpecSecureSettingsArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecSecureSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecSecureSettings {
		return vs[0].([]ElasticsearchSpecSecureSettings)[vs[1].(int)]
	}).(ElasticsearchSpecSecureSettingsOutput)
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type ElasticsearchSpecSecureSettingsEntries struct {
	// Key is the key contained in the secret.
	Key string `pulumi:"key"`
	// Path is the relative file path to map the key to.
	// Path must not be an absolute file path and must not contain any ".." components.
	Path *string `pulumi:"path"`
}

// ElasticsearchSpecSecureSettingsEntriesInput is an input type that accepts ElasticsearchSpecSecureSettingsEntriesArgs and ElasticsearchSpecSecureSettingsEntriesOutput values.
// You can construct a concrete instance of `ElasticsearchSpecSecureSettingsEntriesInput` via:
//
//	ElasticsearchSpecSecureSettingsEntriesArgs{...}
type ElasticsearchSpecSecureSettingsEntriesInput interface {
	pulumi.Input

	ToElasticsearchSpecSecureSettingsEntriesOutput() ElasticsearchSpecSecureSettingsEntriesOutput
	ToElasticsearchSpecSecureSettingsEntriesOutputWithContext(context.Context) ElasticsearchSpecSecureSettingsEntriesOutput
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type ElasticsearchSpecSecureSettingsEntriesArgs struct {
	// Key is the key contained in the secret.
	Key pulumi.StringInput `pulumi:"key"`
	// Path is the relative file path to map the key to.
	// Path must not be an absolute file path and must not contain any ".." components.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (ElasticsearchSpecSecureSettingsEntriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecSecureSettingsEntries)(nil)).Elem()
}

func (i ElasticsearchSpecSecureSettingsEntriesArgs) ToElasticsearchSpecSecureSettingsEntriesOutput() ElasticsearchSpecSecureSettingsEntriesOutput {
	return i.ToElasticsearchSpecSecureSettingsEntriesOutputWithContext(context.Background())
}

func (i ElasticsearchSpecSecureSettingsEntriesArgs) ToElasticsearchSpecSecureSettingsEntriesOutputWithContext(ctx context.Context) ElasticsearchSpecSecureSettingsEntriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecSecureSettingsEntriesOutput)
}

// ElasticsearchSpecSecureSettingsEntriesArrayInput is an input type that accepts ElasticsearchSpecSecureSettingsEntriesArray and ElasticsearchSpecSecureSettingsEntriesArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecSecureSettingsEntriesArrayInput` via:
//
//	ElasticsearchSpecSecureSettingsEntriesArray{ ElasticsearchSpecSecureSettingsEntriesArgs{...} }
type ElasticsearchSpecSecureSettingsEntriesArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecSecureSettingsEntriesArrayOutput() ElasticsearchSpecSecureSettingsEntriesArrayOutput
	ToElasticsearchSpecSecureSettingsEntriesArrayOutputWithContext(context.Context) ElasticsearchSpecSecureSettingsEntriesArrayOutput
}

type ElasticsearchSpecSecureSettingsEntriesArray []ElasticsearchSpecSecureSettingsEntriesInput

func (ElasticsearchSpecSecureSettingsEntriesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecSecureSettingsEntries)(nil)).Elem()
}

func (i ElasticsearchSpecSecureSettingsEntriesArray) ToElasticsearchSpecSecureSettingsEntriesArrayOutput() ElasticsearchSpecSecureSettingsEntriesArrayOutput {
	return i.ToElasticsearchSpecSecureSettingsEntriesArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecSecureSettingsEntriesArray) ToElasticsearchSpecSecureSettingsEntriesArrayOutputWithContext(ctx context.Context) ElasticsearchSpecSecureSettingsEntriesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecSecureSettingsEntriesArrayOutput)
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type ElasticsearchSpecSecureSettingsEntriesOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecSecureSettingsEntriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecSecureSettingsEntries)(nil)).Elem()
}

func (o ElasticsearchSpecSecureSettingsEntriesOutput) ToElasticsearchSpecSecureSettingsEntriesOutput() ElasticsearchSpecSecureSettingsEntriesOutput {
	return o
}

func (o ElasticsearchSpecSecureSettingsEntriesOutput) ToElasticsearchSpecSecureSettingsEntriesOutputWithContext(ctx context.Context) ElasticsearchSpecSecureSettingsEntriesOutput {
	return o
}

// Key is the key contained in the secret.
func (o ElasticsearchSpecSecureSettingsEntriesOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticsearchSpecSecureSettingsEntries) string { return v.Key }).(pulumi.StringOutput)
}

// Path is the relative file path to map the key to.
// Path must not be an absolute file path and must not contain any ".." components.
func (o ElasticsearchSpecSecureSettingsEntriesOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecSecureSettingsEntries) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecSecureSettingsEntriesArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecSecureSettingsEntriesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecSecureSettingsEntries)(nil)).Elem()
}

func (o ElasticsearchSpecSecureSettingsEntriesArrayOutput) ToElasticsearchSpecSecureSettingsEntriesArrayOutput() ElasticsearchSpecSecureSettingsEntriesArrayOutput {
	return o
}

func (o ElasticsearchSpecSecureSettingsEntriesArrayOutput) ToElasticsearchSpecSecureSettingsEntriesArrayOutputWithContext(ctx context.Context) ElasticsearchSpecSecureSettingsEntriesArrayOutput {
	return o
}

func (o ElasticsearchSpecSecureSettingsEntriesArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecSecureSettingsEntriesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecSecureSettingsEntries {
		return vs[0].([]ElasticsearchSpecSecureSettingsEntries)[vs[1].(int)]
	}).(ElasticsearchSpecSecureSettingsEntriesOutput)
}

// Transport holds transport layer settings for Elasticsearch.
type ElasticsearchSpecTransport struct {
	// Service defines the template for the associated Kubernetes Service object.
	Service *ElasticsearchSpecTransportService `pulumi:"service"`
	// TLS defines options for configuring TLS on the transport layer.
	Tls *ElasticsearchSpecTransportTls `pulumi:"tls"`
}

// ElasticsearchSpecTransportInput is an input type that accepts ElasticsearchSpecTransportArgs and ElasticsearchSpecTransportOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportInput` via:
//
//	ElasticsearchSpecTransportArgs{...}
type ElasticsearchSpecTransportInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportOutput() ElasticsearchSpecTransportOutput
	ToElasticsearchSpecTransportOutputWithContext(context.Context) ElasticsearchSpecTransportOutput
}

// Transport holds transport layer settings for Elasticsearch.
type ElasticsearchSpecTransportArgs struct {
	// Service defines the template for the associated Kubernetes Service object.
	Service ElasticsearchSpecTransportServicePtrInput `pulumi:"service"`
	// TLS defines options for configuring TLS on the transport layer.
	Tls ElasticsearchSpecTransportTlsPtrInput `pulumi:"tls"`
}

func (ElasticsearchSpecTransportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransport)(nil)).Elem()
}

func (i ElasticsearchSpecTransportArgs) ToElasticsearchSpecTransportOutput() ElasticsearchSpecTransportOutput {
	return i.ToElasticsearchSpecTransportOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportArgs) ToElasticsearchSpecTransportOutputWithContext(ctx context.Context) ElasticsearchSpecTransportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportOutput)
}

func (i ElasticsearchSpecTransportArgs) ToElasticsearchSpecTransportPtrOutput() ElasticsearchSpecTransportPtrOutput {
	return i.ToElasticsearchSpecTransportPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportArgs) ToElasticsearchSpecTransportPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportOutput).ToElasticsearchSpecTransportPtrOutputWithContext(ctx)
}

// ElasticsearchSpecTransportPtrInput is an input type that accepts ElasticsearchSpecTransportArgs, ElasticsearchSpecTransportPtr and ElasticsearchSpecTransportPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportPtrInput` via:
//
//	        ElasticsearchSpecTransportArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecTransportPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportPtrOutput() ElasticsearchSpecTransportPtrOutput
	ToElasticsearchSpecTransportPtrOutputWithContext(context.Context) ElasticsearchSpecTransportPtrOutput
}

type elasticsearchSpecTransportPtrType ElasticsearchSpecTransportArgs

func ElasticsearchSpecTransportPtr(v *ElasticsearchSpecTransportArgs) ElasticsearchSpecTransportPtrInput {
	return (*elasticsearchSpecTransportPtrType)(v)
}

func (*elasticsearchSpecTransportPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransport)(nil)).Elem()
}

func (i *elasticsearchSpecTransportPtrType) ToElasticsearchSpecTransportPtrOutput() ElasticsearchSpecTransportPtrOutput {
	return i.ToElasticsearchSpecTransportPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecTransportPtrType) ToElasticsearchSpecTransportPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportPtrOutput)
}

// Transport holds transport layer settings for Elasticsearch.
type ElasticsearchSpecTransportOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransport)(nil)).Elem()
}

func (o ElasticsearchSpecTransportOutput) ToElasticsearchSpecTransportOutput() ElasticsearchSpecTransportOutput {
	return o
}

func (o ElasticsearchSpecTransportOutput) ToElasticsearchSpecTransportOutputWithContext(ctx context.Context) ElasticsearchSpecTransportOutput {
	return o
}

func (o ElasticsearchSpecTransportOutput) ToElasticsearchSpecTransportPtrOutput() ElasticsearchSpecTransportPtrOutput {
	return o.ToElasticsearchSpecTransportPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecTransportOutput) ToElasticsearchSpecTransportPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecTransport) *ElasticsearchSpecTransport {
		return &v
	}).(ElasticsearchSpecTransportPtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
func (o ElasticsearchSpecTransportOutput) Service() ElasticsearchSpecTransportServicePtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransport) *ElasticsearchSpecTransportService { return v.Service }).(ElasticsearchSpecTransportServicePtrOutput)
}

// TLS defines options for configuring TLS on the transport layer.
func (o ElasticsearchSpecTransportOutput) Tls() ElasticsearchSpecTransportTlsPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransport) *ElasticsearchSpecTransportTls { return v.Tls }).(ElasticsearchSpecTransportTlsPtrOutput)
}

type ElasticsearchSpecTransportPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransport)(nil)).Elem()
}

func (o ElasticsearchSpecTransportPtrOutput) ToElasticsearchSpecTransportPtrOutput() ElasticsearchSpecTransportPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportPtrOutput) ToElasticsearchSpecTransportPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportPtrOutput) Elem() ElasticsearchSpecTransportOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransport) ElasticsearchSpecTransport {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecTransport
		return ret
	}).(ElasticsearchSpecTransportOutput)
}

// Service defines the template for the associated Kubernetes Service object.
func (o ElasticsearchSpecTransportPtrOutput) Service() ElasticsearchSpecTransportServicePtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransport) *ElasticsearchSpecTransportService {
		if v == nil {
			return nil
		}
		return v.Service
	}).(ElasticsearchSpecTransportServicePtrOutput)
}

// TLS defines options for configuring TLS on the transport layer.
func (o ElasticsearchSpecTransportPtrOutput) Tls() ElasticsearchSpecTransportTlsPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransport) *ElasticsearchSpecTransportTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(ElasticsearchSpecTransportTlsPtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
type ElasticsearchSpecTransportService struct {
	// ObjectMeta is the metadata of the service.
	// The name and namespace provided here are managed by ECK and will be ignored.
	Metadata *ElasticsearchSpecTransportServiceMetadata `pulumi:"metadata"`
	// Spec is the specification of the service.
	Spec *ElasticsearchSpecTransportServiceSpec `pulumi:"spec"`
}

// ElasticsearchSpecTransportServiceInput is an input type that accepts ElasticsearchSpecTransportServiceArgs and ElasticsearchSpecTransportServiceOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceInput` via:
//
//	ElasticsearchSpecTransportServiceArgs{...}
type ElasticsearchSpecTransportServiceInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceOutput() ElasticsearchSpecTransportServiceOutput
	ToElasticsearchSpecTransportServiceOutputWithContext(context.Context) ElasticsearchSpecTransportServiceOutput
}

// Service defines the template for the associated Kubernetes Service object.
type ElasticsearchSpecTransportServiceArgs struct {
	// ObjectMeta is the metadata of the service.
	// The name and namespace provided here are managed by ECK and will be ignored.
	Metadata ElasticsearchSpecTransportServiceMetadataPtrInput `pulumi:"metadata"`
	// Spec is the specification of the service.
	Spec ElasticsearchSpecTransportServiceSpecPtrInput `pulumi:"spec"`
}

func (ElasticsearchSpecTransportServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportService)(nil)).Elem()
}

func (i ElasticsearchSpecTransportServiceArgs) ToElasticsearchSpecTransportServiceOutput() ElasticsearchSpecTransportServiceOutput {
	return i.ToElasticsearchSpecTransportServiceOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceArgs) ToElasticsearchSpecTransportServiceOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceOutput)
}

func (i ElasticsearchSpecTransportServiceArgs) ToElasticsearchSpecTransportServicePtrOutput() ElasticsearchSpecTransportServicePtrOutput {
	return i.ToElasticsearchSpecTransportServicePtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceArgs) ToElasticsearchSpecTransportServicePtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceOutput).ToElasticsearchSpecTransportServicePtrOutputWithContext(ctx)
}

// ElasticsearchSpecTransportServicePtrInput is an input type that accepts ElasticsearchSpecTransportServiceArgs, ElasticsearchSpecTransportServicePtr and ElasticsearchSpecTransportServicePtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServicePtrInput` via:
//
//	        ElasticsearchSpecTransportServiceArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecTransportServicePtrInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServicePtrOutput() ElasticsearchSpecTransportServicePtrOutput
	ToElasticsearchSpecTransportServicePtrOutputWithContext(context.Context) ElasticsearchSpecTransportServicePtrOutput
}

type elasticsearchSpecTransportServicePtrType ElasticsearchSpecTransportServiceArgs

func ElasticsearchSpecTransportServicePtr(v *ElasticsearchSpecTransportServiceArgs) ElasticsearchSpecTransportServicePtrInput {
	return (*elasticsearchSpecTransportServicePtrType)(v)
}

func (*elasticsearchSpecTransportServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportService)(nil)).Elem()
}

func (i *elasticsearchSpecTransportServicePtrType) ToElasticsearchSpecTransportServicePtrOutput() ElasticsearchSpecTransportServicePtrOutput {
	return i.ToElasticsearchSpecTransportServicePtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecTransportServicePtrType) ToElasticsearchSpecTransportServicePtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServicePtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
type ElasticsearchSpecTransportServiceOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportService)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceOutput) ToElasticsearchSpecTransportServiceOutput() ElasticsearchSpecTransportServiceOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceOutput) ToElasticsearchSpecTransportServiceOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceOutput) ToElasticsearchSpecTransportServicePtrOutput() ElasticsearchSpecTransportServicePtrOutput {
	return o.ToElasticsearchSpecTransportServicePtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecTransportServiceOutput) ToElasticsearchSpecTransportServicePtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecTransportService) *ElasticsearchSpecTransportService {
		return &v
	}).(ElasticsearchSpecTransportServicePtrOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
func (o ElasticsearchSpecTransportServiceOutput) Metadata() ElasticsearchSpecTransportServiceMetadataPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportService) *ElasticsearchSpecTransportServiceMetadata {
		return v.Metadata
	}).(ElasticsearchSpecTransportServiceMetadataPtrOutput)
}

// Spec is the specification of the service.
func (o ElasticsearchSpecTransportServiceOutput) Spec() ElasticsearchSpecTransportServiceSpecPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportService) *ElasticsearchSpecTransportServiceSpec { return v.Spec }).(ElasticsearchSpecTransportServiceSpecPtrOutput)
}

type ElasticsearchSpecTransportServicePtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportService)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServicePtrOutput) ToElasticsearchSpecTransportServicePtrOutput() ElasticsearchSpecTransportServicePtrOutput {
	return o
}

func (o ElasticsearchSpecTransportServicePtrOutput) ToElasticsearchSpecTransportServicePtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServicePtrOutput {
	return o
}

func (o ElasticsearchSpecTransportServicePtrOutput) Elem() ElasticsearchSpecTransportServiceOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportService) ElasticsearchSpecTransportService {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecTransportService
		return ret
	}).(ElasticsearchSpecTransportServiceOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
func (o ElasticsearchSpecTransportServicePtrOutput) Metadata() ElasticsearchSpecTransportServiceMetadataPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportService) *ElasticsearchSpecTransportServiceMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(ElasticsearchSpecTransportServiceMetadataPtrOutput)
}

// Spec is the specification of the service.
func (o ElasticsearchSpecTransportServicePtrOutput) Spec() ElasticsearchSpecTransportServiceSpecPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportService) *ElasticsearchSpecTransportServiceSpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(ElasticsearchSpecTransportServiceSpecPtrOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type ElasticsearchSpecTransportServiceMetadata struct {
	Annotations map[string]string `pulumi:"annotations"`
	Finalizers  []string          `pulumi:"finalizers"`
	Labels      map[string]string `pulumi:"labels"`
	Name        *string           `pulumi:"name"`
	Namespace   *string           `pulumi:"namespace"`
}

// ElasticsearchSpecTransportServiceMetadataInput is an input type that accepts ElasticsearchSpecTransportServiceMetadataArgs and ElasticsearchSpecTransportServiceMetadataOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceMetadataInput` via:
//
//	ElasticsearchSpecTransportServiceMetadataArgs{...}
type ElasticsearchSpecTransportServiceMetadataInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceMetadataOutput() ElasticsearchSpecTransportServiceMetadataOutput
	ToElasticsearchSpecTransportServiceMetadataOutputWithContext(context.Context) ElasticsearchSpecTransportServiceMetadataOutput
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type ElasticsearchSpecTransportServiceMetadataArgs struct {
	Annotations pulumi.StringMapInput   `pulumi:"annotations"`
	Finalizers  pulumi.StringArrayInput `pulumi:"finalizers"`
	Labels      pulumi.StringMapInput   `pulumi:"labels"`
	Name        pulumi.StringPtrInput   `pulumi:"name"`
	Namespace   pulumi.StringPtrInput   `pulumi:"namespace"`
}

func (ElasticsearchSpecTransportServiceMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServiceMetadata)(nil)).Elem()
}

func (i ElasticsearchSpecTransportServiceMetadataArgs) ToElasticsearchSpecTransportServiceMetadataOutput() ElasticsearchSpecTransportServiceMetadataOutput {
	return i.ToElasticsearchSpecTransportServiceMetadataOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceMetadataArgs) ToElasticsearchSpecTransportServiceMetadataOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceMetadataOutput)
}

func (i ElasticsearchSpecTransportServiceMetadataArgs) ToElasticsearchSpecTransportServiceMetadataPtrOutput() ElasticsearchSpecTransportServiceMetadataPtrOutput {
	return i.ToElasticsearchSpecTransportServiceMetadataPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceMetadataArgs) ToElasticsearchSpecTransportServiceMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceMetadataOutput).ToElasticsearchSpecTransportServiceMetadataPtrOutputWithContext(ctx)
}

// ElasticsearchSpecTransportServiceMetadataPtrInput is an input type that accepts ElasticsearchSpecTransportServiceMetadataArgs, ElasticsearchSpecTransportServiceMetadataPtr and ElasticsearchSpecTransportServiceMetadataPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceMetadataPtrInput` via:
//
//	        ElasticsearchSpecTransportServiceMetadataArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecTransportServiceMetadataPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceMetadataPtrOutput() ElasticsearchSpecTransportServiceMetadataPtrOutput
	ToElasticsearchSpecTransportServiceMetadataPtrOutputWithContext(context.Context) ElasticsearchSpecTransportServiceMetadataPtrOutput
}

type elasticsearchSpecTransportServiceMetadataPtrType ElasticsearchSpecTransportServiceMetadataArgs

func ElasticsearchSpecTransportServiceMetadataPtr(v *ElasticsearchSpecTransportServiceMetadataArgs) ElasticsearchSpecTransportServiceMetadataPtrInput {
	return (*elasticsearchSpecTransportServiceMetadataPtrType)(v)
}

func (*elasticsearchSpecTransportServiceMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportServiceMetadata)(nil)).Elem()
}

func (i *elasticsearchSpecTransportServiceMetadataPtrType) ToElasticsearchSpecTransportServiceMetadataPtrOutput() ElasticsearchSpecTransportServiceMetadataPtrOutput {
	return i.ToElasticsearchSpecTransportServiceMetadataPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecTransportServiceMetadataPtrType) ToElasticsearchSpecTransportServiceMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceMetadataPtrOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type ElasticsearchSpecTransportServiceMetadataOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServiceMetadata)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceMetadataOutput) ToElasticsearchSpecTransportServiceMetadataOutput() ElasticsearchSpecTransportServiceMetadataOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceMetadataOutput) ToElasticsearchSpecTransportServiceMetadataOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceMetadataOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceMetadataOutput) ToElasticsearchSpecTransportServiceMetadataPtrOutput() ElasticsearchSpecTransportServiceMetadataPtrOutput {
	return o.ToElasticsearchSpecTransportServiceMetadataPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecTransportServiceMetadataOutput) ToElasticsearchSpecTransportServiceMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecTransportServiceMetadata) *ElasticsearchSpecTransportServiceMetadata {
		return &v
	}).(ElasticsearchSpecTransportServiceMetadataPtrOutput)
}

func (o ElasticsearchSpecTransportServiceMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecTransportServiceMetadataOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceMetadata) []string { return v.Finalizers }).(pulumi.StringArrayOutput)
}

func (o ElasticsearchSpecTransportServiceMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecTransportServiceMetadataOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceMetadata) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecTransportServiceMetadataOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceMetadata) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecTransportServiceMetadataPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportServiceMetadata)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceMetadataPtrOutput) ToElasticsearchSpecTransportServiceMetadataPtrOutput() ElasticsearchSpecTransportServiceMetadataPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceMetadataPtrOutput) ToElasticsearchSpecTransportServiceMetadataPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceMetadataPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceMetadataPtrOutput) Elem() ElasticsearchSpecTransportServiceMetadataOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceMetadata) ElasticsearchSpecTransportServiceMetadata {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecTransportServiceMetadata
		return ret
	}).(ElasticsearchSpecTransportServiceMetadataOutput)
}

func (o ElasticsearchSpecTransportServiceMetadataPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecTransportServiceMetadataPtrOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceMetadata) []string {
		if v == nil {
			return nil
		}
		return v.Finalizers
	}).(pulumi.StringArrayOutput)
}

func (o ElasticsearchSpecTransportServiceMetadataPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

func (o ElasticsearchSpecTransportServiceMetadataPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o ElasticsearchSpecTransportServiceMetadataPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecTransportServiceMetadataAnnotations struct {
}

type ElasticsearchSpecTransportServiceMetadataLabels struct {
}

// Spec is the specification of the service.
type ElasticsearchSpecTransportServiceSpec struct {
	// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
	// allocated for services with type LoadBalancer.  Default is "true". It
	// may be set to "false" if the cluster load-balancer does not rely on
	// NodePorts.  If the caller requests specific NodePorts (by specifying a
	// value), those requests will be respected, regardless of this field.
	// This field may only be set for services with type LoadBalancer and will
	// be cleared if the type is changed to any other type.
	AllocateLoadBalancerNodePorts *bool `pulumi:"allocateLoadBalancerNodePorts"`
	// clusterIP is the IP address of the service and is usually assigned
	// randomly. If an address is specified manually, is in-range (as per
	// system configuration), and is not in use, it will be allocated to the
	// service; otherwise creation of the service will fail. This field may not
	// be changed through updates unless the type field is also being changed
	// to ExternalName (which requires this field to be blank) or the type
	// field is being changed from ExternalName (in which case this field may
	// optionally be specified, as describe above).  Valid values are "None",
	// empty string (""), or a valid IP address. Setting this to "None" makes a
	// "headless service" (no virtual IP), which is useful when direct endpoint
	// connections are preferred and proxying is not required.  Only applies to
	// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
	// when creating a Service of type ExternalName, creation will fail. This
	// field will be wiped when updating a Service to type ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP *string `pulumi:"clusterIP"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are
	// usually assigned randomly.  If an address is specified manually, is
	// in-range (as per system configuration), and is not in use, it will be
	// allocated to the service; otherwise creation of the service will fail.
	// This field may not be changed through updates unless the type field is
	// also being changed to ExternalName (which requires this field to be
	// empty) or the type field is being changed from ExternalName (in which
	// case this field may optionally be specified, as describe above).  Valid
	// values are "None", empty string (""), or a valid IP address.  Setting
	// this to "None" makes a "headless service" (no virtual IP), which is
	// useful when direct endpoint connections are preferred and proxying is
	// not required.  Only applies to types ClusterIP, NodePort, and
	// LoadBalancer. If this field is specified when creating a Service of type
	// ExternalName, creation will fail. This field will be wiped when updating
	// a Service to type ExternalName.  If this field is not specified, it will
	// be initialized from the clusterIP field.  If this field is specified,
	// clients must ensure that clusterIPs[0] and clusterIP have the same
	// value.
	//
	// This field may hold a maximum of two entries (dual-stack IPs, in either order).
	// These IPs must correspond to the values of the ipFamilies field. Both
	// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIPs []string `pulumi:"clusterIPs"`
	// externalIPs is a list of IP addresses for which nodes in the cluster
	// will also accept traffic for this service.  These IPs are not managed by
	// Kubernetes.  The user is responsible for ensuring that traffic arrives
	// at a node with this IP.  A common example is external load-balancers
	// that are not part of the Kubernetes system.
	ExternalIPs []string `pulumi:"externalIPs"`
	// externalName is the external reference that discovery mechanisms will
	// return as an alias for this service (e.g. a DNS CNAME record). No
	// proxying will be involved.  Must be a lowercase RFC-1123 hostname
	// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName *string `pulumi:"externalName"`
	// externalTrafficPolicy describes how nodes distribute service traffic they
	// receive on one of the Service's "externally-facing" addresses (NodePorts,
	// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
	// the service in a way that assumes that external load balancers will take care
	// of balancing the service traffic between nodes, and so each node will deliver
	// traffic only to the node-local endpoints of the service, without masquerading
	// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
	// be dropped.) The default value, "Cluster", uses the standard behavior of
	// routing to all endpoints evenly (possibly modified by topology and other
	// features). Note that traffic sent to an External IP or LoadBalancer IP from
	// within the cluster will always get "Cluster" semantics, but clients sending to
	// a NodePort from within the cluster may need to take traffic policy into account
	// when picking a node.
	ExternalTrafficPolicy *string `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service.
	// This only applies when type is set to LoadBalancer and
	// externalTrafficPolicy is set to Local. If a value is specified, is
	// in-range, and is not in use, it will be used.  If not specified, a value
	// will be automatically allocated.  External systems (e.g. load-balancers)
	// can use this port to determine if a given node holds endpoints for this
	// service or not.  If this field is specified when creating a Service
	// which does not need it, creation will fail. This field will be wiped
	// when updating a Service to no longer need it (e.g. changing type).
	// This field cannot be updated once set.
	HealthCheckNodePort *int `pulumi:"healthCheckNodePort"`
	// InternalTrafficPolicy describes how nodes distribute service traffic they
	// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
	// only want to talk to endpoints of the service on the same node as the pod,
	// dropping the traffic if there are no local endpoints. The default value,
	// "Cluster", uses the standard behavior of routing to all endpoints evenly
	// (possibly modified by topology and other features).
	InternalTrafficPolicy *string `pulumi:"internalTrafficPolicy"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
	// service. This field is usually assigned automatically based on cluster
	// configuration and the ipFamilyPolicy field. If this field is specified
	// manually, the requested family is available in the cluster,
	// and ipFamilyPolicy allows it, it will be used; otherwise creation of
	// the service will fail. This field is conditionally mutable: it allows
	// for adding or removing a secondary IP family, but it does not allow
	// changing the primary IP family of the Service. Valid values are "IPv4"
	// and "IPv6".  This field only applies to Services of types ClusterIP,
	// NodePort, and LoadBalancer, and does apply to "headless" services.
	// This field will be wiped when updating a Service to type ExternalName.
	//
	// This field may hold a maximum of two entries (dual-stack families, in
	// either order).  These families must correspond to the values of the
	// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
	// governed by the ipFamilyPolicy field.
	IpFamilies []string `pulumi:"ipFamilies"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by
	// this Service. If there is no value provided, then this field will be set
	// to SingleStack. Services can be "SingleStack" (a single IP family),
	// "PreferDualStack" (two IP families on dual-stack configured clusters or
	// a single IP family on single-stack clusters), or "RequireDualStack"
	// (two IP families on dual-stack configured clusters, otherwise fail). The
	// ipFamilies and clusterIPs fields depend on the value of this field. This
	// field will be wiped when updating a service to type ExternalName.
	IpFamilyPolicy *string `pulumi:"ipFamilyPolicy"`
	// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
	// If specified, the value of this field must be a label-style identifier, with an optional prefix,
	// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
	// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
	// balancer implementation is used, today this is typically done through the cloud provider integration,
	// but should apply for any default implementation. If set, it is assumed that a load balancer
	// implementation is watching for Services with a matching class. Any default load balancer
	// implementation (e.g. cloud providers) should ignore Services that set this field.
	// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
	// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass *string `pulumi:"loadBalancerClass"`
	// Only applies to Service Type: LoadBalancer.
	// This feature depends on whether the underlying cloud-provider supports specifying
	// the loadBalancerIP when a load balancer is created.
	// This field will be ignored if the cloud-provider does not support the feature.
	// Deprecated: This field was under-specified and its meaning varies across implementations.
	// Using it is non-portable and it may not support dual-stack.
	// Users are encouraged to use implementation-specific annotations when available.
	LoadBalancerIP *string `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider
	// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
	// cloud-provider does not support the feature."
	// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
	LoadBalancerSourceRanges []string `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports []ElasticsearchSpecTransportServiceSpecPorts `pulumi:"ports"`
	// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
	// Service should disregard any indications of ready/not-ready.
	// The primary use case for setting this field is for a StatefulSet's Headless Service to
	// propagate SRV DNS records for its Pods for the purpose of peer discovery.
	// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
	// Services interpret this to mean that all endpoints are considered "ready" even if the
	// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
	// through the Endpoints or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses *bool `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this
	// selector. If empty or not present, the service is assumed to have an
	// external process managing its endpoints, which Kubernetes will not
	// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
	// Ignored if type is ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector map[string]string `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity.
	// Enable client IP based session affinity.
	// Must be ClientIP or None.
	// Defaults to None.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity *string `pulumi:"sessionAffinity"`
	// sessionAffinityConfig contains the configurations of session affinity.
	SessionAffinityConfig *ElasticsearchSpecTransportServiceSpecSessionAffinityConfig `pulumi:"sessionAffinityConfig"`
	// TrafficDistribution offers a way to express preferences for how traffic is
	// distributed to Service endpoints. Implementations can use this field as a
	// hint, but are not required to guarantee strict adherence. If the field is
	// not set, the implementation will apply its default routing strategy. If set
	// to "PreferClose", implementations should prioritize endpoints that are
	// topologically close (e.g., same zone).
	// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
	TrafficDistribution *string `pulumi:"trafficDistribution"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid
	// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
	// "ClusterIP" allocates a cluster-internal IP address for load-balancing
	// to endpoints. Endpoints are determined by the selector or if that is not
	// specified, by manual construction of an Endpoints object or
	// EndpointSlice objects. If clusterIP is "None", no virtual IP is
	// allocated and the endpoints are published as a set of endpoints rather
	// than a virtual IP.
	// "NodePort" builds on ClusterIP and allocates a port on every node which
	// routes to the same endpoints as the clusterIP.
	// "LoadBalancer" builds on NodePort and creates an external load-balancer
	// (if supported in the current cloud) which routes to the same endpoints
	// as the clusterIP.
	// "ExternalName" aliases this service to the specified externalName.
	// Several other fields do not apply to ExternalName services.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type *string `pulumi:"type"`
}

// ElasticsearchSpecTransportServiceSpecInput is an input type that accepts ElasticsearchSpecTransportServiceSpecArgs and ElasticsearchSpecTransportServiceSpecOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceSpecInput` via:
//
//	ElasticsearchSpecTransportServiceSpecArgs{...}
type ElasticsearchSpecTransportServiceSpecInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceSpecOutput() ElasticsearchSpecTransportServiceSpecOutput
	ToElasticsearchSpecTransportServiceSpecOutputWithContext(context.Context) ElasticsearchSpecTransportServiceSpecOutput
}

// Spec is the specification of the service.
type ElasticsearchSpecTransportServiceSpecArgs struct {
	// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
	// allocated for services with type LoadBalancer.  Default is "true". It
	// may be set to "false" if the cluster load-balancer does not rely on
	// NodePorts.  If the caller requests specific NodePorts (by specifying a
	// value), those requests will be respected, regardless of this field.
	// This field may only be set for services with type LoadBalancer and will
	// be cleared if the type is changed to any other type.
	AllocateLoadBalancerNodePorts pulumi.BoolPtrInput `pulumi:"allocateLoadBalancerNodePorts"`
	// clusterIP is the IP address of the service and is usually assigned
	// randomly. If an address is specified manually, is in-range (as per
	// system configuration), and is not in use, it will be allocated to the
	// service; otherwise creation of the service will fail. This field may not
	// be changed through updates unless the type field is also being changed
	// to ExternalName (which requires this field to be blank) or the type
	// field is being changed from ExternalName (in which case this field may
	// optionally be specified, as describe above).  Valid values are "None",
	// empty string (""), or a valid IP address. Setting this to "None" makes a
	// "headless service" (no virtual IP), which is useful when direct endpoint
	// connections are preferred and proxying is not required.  Only applies to
	// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
	// when creating a Service of type ExternalName, creation will fail. This
	// field will be wiped when updating a Service to type ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP pulumi.StringPtrInput `pulumi:"clusterIP"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are
	// usually assigned randomly.  If an address is specified manually, is
	// in-range (as per system configuration), and is not in use, it will be
	// allocated to the service; otherwise creation of the service will fail.
	// This field may not be changed through updates unless the type field is
	// also being changed to ExternalName (which requires this field to be
	// empty) or the type field is being changed from ExternalName (in which
	// case this field may optionally be specified, as describe above).  Valid
	// values are "None", empty string (""), or a valid IP address.  Setting
	// this to "None" makes a "headless service" (no virtual IP), which is
	// useful when direct endpoint connections are preferred and proxying is
	// not required.  Only applies to types ClusterIP, NodePort, and
	// LoadBalancer. If this field is specified when creating a Service of type
	// ExternalName, creation will fail. This field will be wiped when updating
	// a Service to type ExternalName.  If this field is not specified, it will
	// be initialized from the clusterIP field.  If this field is specified,
	// clients must ensure that clusterIPs[0] and clusterIP have the same
	// value.
	//
	// This field may hold a maximum of two entries (dual-stack IPs, in either order).
	// These IPs must correspond to the values of the ipFamilies field. Both
	// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIPs pulumi.StringArrayInput `pulumi:"clusterIPs"`
	// externalIPs is a list of IP addresses for which nodes in the cluster
	// will also accept traffic for this service.  These IPs are not managed by
	// Kubernetes.  The user is responsible for ensuring that traffic arrives
	// at a node with this IP.  A common example is external load-balancers
	// that are not part of the Kubernetes system.
	ExternalIPs pulumi.StringArrayInput `pulumi:"externalIPs"`
	// externalName is the external reference that discovery mechanisms will
	// return as an alias for this service (e.g. a DNS CNAME record). No
	// proxying will be involved.  Must be a lowercase RFC-1123 hostname
	// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName pulumi.StringPtrInput `pulumi:"externalName"`
	// externalTrafficPolicy describes how nodes distribute service traffic they
	// receive on one of the Service's "externally-facing" addresses (NodePorts,
	// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
	// the service in a way that assumes that external load balancers will take care
	// of balancing the service traffic between nodes, and so each node will deliver
	// traffic only to the node-local endpoints of the service, without masquerading
	// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
	// be dropped.) The default value, "Cluster", uses the standard behavior of
	// routing to all endpoints evenly (possibly modified by topology and other
	// features). Note that traffic sent to an External IP or LoadBalancer IP from
	// within the cluster will always get "Cluster" semantics, but clients sending to
	// a NodePort from within the cluster may need to take traffic policy into account
	// when picking a node.
	ExternalTrafficPolicy pulumi.StringPtrInput `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service.
	// This only applies when type is set to LoadBalancer and
	// externalTrafficPolicy is set to Local. If a value is specified, is
	// in-range, and is not in use, it will be used.  If not specified, a value
	// will be automatically allocated.  External systems (e.g. load-balancers)
	// can use this port to determine if a given node holds endpoints for this
	// service or not.  If this field is specified when creating a Service
	// which does not need it, creation will fail. This field will be wiped
	// when updating a Service to no longer need it (e.g. changing type).
	// This field cannot be updated once set.
	HealthCheckNodePort pulumi.IntPtrInput `pulumi:"healthCheckNodePort"`
	// InternalTrafficPolicy describes how nodes distribute service traffic they
	// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
	// only want to talk to endpoints of the service on the same node as the pod,
	// dropping the traffic if there are no local endpoints. The default value,
	// "Cluster", uses the standard behavior of routing to all endpoints evenly
	// (possibly modified by topology and other features).
	InternalTrafficPolicy pulumi.StringPtrInput `pulumi:"internalTrafficPolicy"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
	// service. This field is usually assigned automatically based on cluster
	// configuration and the ipFamilyPolicy field. If this field is specified
	// manually, the requested family is available in the cluster,
	// and ipFamilyPolicy allows it, it will be used; otherwise creation of
	// the service will fail. This field is conditionally mutable: it allows
	// for adding or removing a secondary IP family, but it does not allow
	// changing the primary IP family of the Service. Valid values are "IPv4"
	// and "IPv6".  This field only applies to Services of types ClusterIP,
	// NodePort, and LoadBalancer, and does apply to "headless" services.
	// This field will be wiped when updating a Service to type ExternalName.
	//
	// This field may hold a maximum of two entries (dual-stack families, in
	// either order).  These families must correspond to the values of the
	// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
	// governed by the ipFamilyPolicy field.
	IpFamilies pulumi.StringArrayInput `pulumi:"ipFamilies"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by
	// this Service. If there is no value provided, then this field will be set
	// to SingleStack. Services can be "SingleStack" (a single IP family),
	// "PreferDualStack" (two IP families on dual-stack configured clusters or
	// a single IP family on single-stack clusters), or "RequireDualStack"
	// (two IP families on dual-stack configured clusters, otherwise fail). The
	// ipFamilies and clusterIPs fields depend on the value of this field. This
	// field will be wiped when updating a service to type ExternalName.
	IpFamilyPolicy pulumi.StringPtrInput `pulumi:"ipFamilyPolicy"`
	// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
	// If specified, the value of this field must be a label-style identifier, with an optional prefix,
	// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
	// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
	// balancer implementation is used, today this is typically done through the cloud provider integration,
	// but should apply for any default implementation. If set, it is assumed that a load balancer
	// implementation is watching for Services with a matching class. Any default load balancer
	// implementation (e.g. cloud providers) should ignore Services that set this field.
	// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
	// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass pulumi.StringPtrInput `pulumi:"loadBalancerClass"`
	// Only applies to Service Type: LoadBalancer.
	// This feature depends on whether the underlying cloud-provider supports specifying
	// the loadBalancerIP when a load balancer is created.
	// This field will be ignored if the cloud-provider does not support the feature.
	// Deprecated: This field was under-specified and its meaning varies across implementations.
	// Using it is non-portable and it may not support dual-stack.
	// Users are encouraged to use implementation-specific annotations when available.
	LoadBalancerIP pulumi.StringPtrInput `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider
	// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
	// cloud-provider does not support the feature."
	// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
	LoadBalancerSourceRanges pulumi.StringArrayInput `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports ElasticsearchSpecTransportServiceSpecPortsArrayInput `pulumi:"ports"`
	// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
	// Service should disregard any indications of ready/not-ready.
	// The primary use case for setting this field is for a StatefulSet's Headless Service to
	// propagate SRV DNS records for its Pods for the purpose of peer discovery.
	// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
	// Services interpret this to mean that all endpoints are considered "ready" even if the
	// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
	// through the Endpoints or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses pulumi.BoolPtrInput `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this
	// selector. If empty or not present, the service is assumed to have an
	// external process managing its endpoints, which Kubernetes will not
	// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
	// Ignored if type is ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector pulumi.StringMapInput `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity.
	// Enable client IP based session affinity.
	// Must be ClientIP or None.
	// Defaults to None.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity pulumi.StringPtrInput `pulumi:"sessionAffinity"`
	// sessionAffinityConfig contains the configurations of session affinity.
	SessionAffinityConfig ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrInput `pulumi:"sessionAffinityConfig"`
	// TrafficDistribution offers a way to express preferences for how traffic is
	// distributed to Service endpoints. Implementations can use this field as a
	// hint, but are not required to guarantee strict adherence. If the field is
	// not set, the implementation will apply its default routing strategy. If set
	// to "PreferClose", implementations should prioritize endpoints that are
	// topologically close (e.g., same zone).
	// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
	TrafficDistribution pulumi.StringPtrInput `pulumi:"trafficDistribution"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid
	// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
	// "ClusterIP" allocates a cluster-internal IP address for load-balancing
	// to endpoints. Endpoints are determined by the selector or if that is not
	// specified, by manual construction of an Endpoints object or
	// EndpointSlice objects. If clusterIP is "None", no virtual IP is
	// allocated and the endpoints are published as a set of endpoints rather
	// than a virtual IP.
	// "NodePort" builds on ClusterIP and allocates a port on every node which
	// routes to the same endpoints as the clusterIP.
	// "LoadBalancer" builds on NodePort and creates an external load-balancer
	// (if supported in the current cloud) which routes to the same endpoints
	// as the clusterIP.
	// "ExternalName" aliases this service to the specified externalName.
	// Several other fields do not apply to ExternalName services.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ElasticsearchSpecTransportServiceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServiceSpec)(nil)).Elem()
}

func (i ElasticsearchSpecTransportServiceSpecArgs) ToElasticsearchSpecTransportServiceSpecOutput() ElasticsearchSpecTransportServiceSpecOutput {
	return i.ToElasticsearchSpecTransportServiceSpecOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceSpecArgs) ToElasticsearchSpecTransportServiceSpecOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecOutput)
}

func (i ElasticsearchSpecTransportServiceSpecArgs) ToElasticsearchSpecTransportServiceSpecPtrOutput() ElasticsearchSpecTransportServiceSpecPtrOutput {
	return i.ToElasticsearchSpecTransportServiceSpecPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceSpecArgs) ToElasticsearchSpecTransportServiceSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecOutput).ToElasticsearchSpecTransportServiceSpecPtrOutputWithContext(ctx)
}

// ElasticsearchSpecTransportServiceSpecPtrInput is an input type that accepts ElasticsearchSpecTransportServiceSpecArgs, ElasticsearchSpecTransportServiceSpecPtr and ElasticsearchSpecTransportServiceSpecPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceSpecPtrInput` via:
//
//	        ElasticsearchSpecTransportServiceSpecArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecTransportServiceSpecPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceSpecPtrOutput() ElasticsearchSpecTransportServiceSpecPtrOutput
	ToElasticsearchSpecTransportServiceSpecPtrOutputWithContext(context.Context) ElasticsearchSpecTransportServiceSpecPtrOutput
}

type elasticsearchSpecTransportServiceSpecPtrType ElasticsearchSpecTransportServiceSpecArgs

func ElasticsearchSpecTransportServiceSpecPtr(v *ElasticsearchSpecTransportServiceSpecArgs) ElasticsearchSpecTransportServiceSpecPtrInput {
	return (*elasticsearchSpecTransportServiceSpecPtrType)(v)
}

func (*elasticsearchSpecTransportServiceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportServiceSpec)(nil)).Elem()
}

func (i *elasticsearchSpecTransportServiceSpecPtrType) ToElasticsearchSpecTransportServiceSpecPtrOutput() ElasticsearchSpecTransportServiceSpecPtrOutput {
	return i.ToElasticsearchSpecTransportServiceSpecPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecTransportServiceSpecPtrType) ToElasticsearchSpecTransportServiceSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecPtrOutput)
}

// Spec is the specification of the service.
type ElasticsearchSpecTransportServiceSpecOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServiceSpec)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceSpecOutput) ToElasticsearchSpecTransportServiceSpecOutput() ElasticsearchSpecTransportServiceSpecOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecOutput) ToElasticsearchSpecTransportServiceSpecOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecOutput) ToElasticsearchSpecTransportServiceSpecPtrOutput() ElasticsearchSpecTransportServiceSpecPtrOutput {
	return o.ToElasticsearchSpecTransportServiceSpecPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecTransportServiceSpecOutput) ToElasticsearchSpecTransportServiceSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecTransportServiceSpec) *ElasticsearchSpecTransportServiceSpec {
		return &v
	}).(ElasticsearchSpecTransportServiceSpecPtrOutput)
}

// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
// allocated for services with type LoadBalancer.  Default is "true". It
// may be set to "false" if the cluster load-balancer does not rely on
// NodePorts.  If the caller requests specific NodePorts (by specifying a
// value), those requests will be respected, regardless of this field.
// This field may only be set for services with type LoadBalancer and will
// be cleared if the type is changed to any other type.
func (o ElasticsearchSpecTransportServiceSpecOutput) AllocateLoadBalancerNodePorts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) *bool { return v.AllocateLoadBalancerNodePorts }).(pulumi.BoolPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned
// randomly. If an address is specified manually, is in-range (as per
// system configuration), and is not in use, it will be allocated to the
// service; otherwise creation of the service will fail. This field may not
// be changed through updates unless the type field is also being changed
// to ExternalName (which requires this field to be blank) or the type
// field is being changed from ExternalName (in which case this field may
// optionally be specified, as describe above).  Valid values are "None",
// empty string (""), or a valid IP address. Setting this to "None" makes a
// "headless service" (no virtual IP), which is useful when direct endpoint
// connections are preferred and proxying is not required.  Only applies to
// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
// when creating a Service of type ExternalName, creation will fail. This
// field will be wiped when updating a Service to type ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecTransportServiceSpecOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) *string { return v.ClusterIP }).(pulumi.StringPtrOutput)
}

// ClusterIPs is a list of IP addresses assigned to this service, and are
// usually assigned randomly.  If an address is specified manually, is
// in-range (as per system configuration), and is not in use, it will be
// allocated to the service; otherwise creation of the service will fail.
// This field may not be changed through updates unless the type field is
// also being changed to ExternalName (which requires this field to be
// empty) or the type field is being changed from ExternalName (in which
// case this field may optionally be specified, as describe above).  Valid
// values are "None", empty string (""), or a valid IP address.  Setting
// this to "None" makes a "headless service" (no virtual IP), which is
// useful when direct endpoint connections are preferred and proxying is
// not required.  Only applies to types ClusterIP, NodePort, and
// LoadBalancer. If this field is specified when creating a Service of type
// ExternalName, creation will fail. This field will be wiped when updating
// a Service to type ExternalName.  If this field is not specified, it will
// be initialized from the clusterIP field.  If this field is specified,
// clients must ensure that clusterIPs[0] and clusterIP have the same
// value.
//
// This field may hold a maximum of two entries (dual-stack IPs, in either order).
// These IPs must correspond to the values of the ipFamilies field. Both
// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecTransportServiceSpecOutput) ClusterIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) []string { return v.ClusterIPs }).(pulumi.StringArrayOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster
// will also accept traffic for this service.  These IPs are not managed by
// Kubernetes.  The user is responsible for ensuring that traffic arrives
// at a node with this IP.  A common example is external load-balancers
// that are not part of the Kubernetes system.
func (o ElasticsearchSpecTransportServiceSpecOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) []string { return v.ExternalIPs }).(pulumi.StringArrayOutput)
}

// externalName is the external reference that discovery mechanisms will
// return as an alias for this service (e.g. a DNS CNAME record). No
// proxying will be involved.  Must be a lowercase RFC-1123 hostname
// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
func (o ElasticsearchSpecTransportServiceSpecOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) *string { return v.ExternalName }).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy describes how nodes distribute service traffic they
// receive on one of the Service's "externally-facing" addresses (NodePorts,
// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
// the service in a way that assumes that external load balancers will take care
// of balancing the service traffic between nodes, and so each node will deliver
// traffic only to the node-local endpoints of the service, without masquerading
// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
// be dropped.) The default value, "Cluster", uses the standard behavior of
// routing to all endpoints evenly (possibly modified by topology and other
// features). Note that traffic sent to an External IP or LoadBalancer IP from
// within the cluster will always get "Cluster" semantics, but clients sending to
// a NodePort from within the cluster may need to take traffic policy into account
// when picking a node.
func (o ElasticsearchSpecTransportServiceSpecOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) *string { return v.ExternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service.
// This only applies when type is set to LoadBalancer and
// externalTrafficPolicy is set to Local. If a value is specified, is
// in-range, and is not in use, it will be used.  If not specified, a value
// will be automatically allocated.  External systems (e.g. load-balancers)
// can use this port to determine if a given node holds endpoints for this
// service or not.  If this field is specified when creating a Service
// which does not need it, creation will fail. This field will be wiped
// when updating a Service to no longer need it (e.g. changing type).
// This field cannot be updated once set.
func (o ElasticsearchSpecTransportServiceSpecOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) *int { return v.HealthCheckNodePort }).(pulumi.IntPtrOutput)
}

// InternalTrafficPolicy describes how nodes distribute service traffic they
// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
// only want to talk to endpoints of the service on the same node as the pod,
// dropping the traffic if there are no local endpoints. The default value,
// "Cluster", uses the standard behavior of routing to all endpoints evenly
// (possibly modified by topology and other features).
func (o ElasticsearchSpecTransportServiceSpecOutput) InternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) *string { return v.InternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
// service. This field is usually assigned automatically based on cluster
// configuration and the ipFamilyPolicy field. If this field is specified
// manually, the requested family is available in the cluster,
// and ipFamilyPolicy allows it, it will be used; otherwise creation of
// the service will fail. This field is conditionally mutable: it allows
// for adding or removing a secondary IP family, but it does not allow
// changing the primary IP family of the Service. Valid values are "IPv4"
// and "IPv6".  This field only applies to Services of types ClusterIP,
// NodePort, and LoadBalancer, and does apply to "headless" services.
// This field will be wiped when updating a Service to type ExternalName.
//
// This field may hold a maximum of two entries (dual-stack families, in
// either order).  These families must correspond to the values of the
// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
// governed by the ipFamilyPolicy field.
func (o ElasticsearchSpecTransportServiceSpecOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) []string { return v.IpFamilies }).(pulumi.StringArrayOutput)
}

// IPFamilyPolicy represents the dual-stack-ness requested or required by
// this Service. If there is no value provided, then this field will be set
// to SingleStack. Services can be "SingleStack" (a single IP family),
// "PreferDualStack" (two IP families on dual-stack configured clusters or
// a single IP family on single-stack clusters), or "RequireDualStack"
// (two IP families on dual-stack configured clusters, otherwise fail). The
// ipFamilies and clusterIPs fields depend on the value of this field. This
// field will be wiped when updating a service to type ExternalName.
func (o ElasticsearchSpecTransportServiceSpecOutput) IpFamilyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) *string { return v.IpFamilyPolicy }).(pulumi.StringPtrOutput)
}

// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
// If specified, the value of this field must be a label-style identifier, with an optional prefix,
// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
// balancer implementation is used, today this is typically done through the cloud provider integration,
// but should apply for any default implementation. If set, it is assumed that a load balancer
// implementation is watching for Services with a matching class. Any default load balancer
// implementation (e.g. cloud providers) should ignore Services that set this field.
// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
func (o ElasticsearchSpecTransportServiceSpecOutput) LoadBalancerClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) *string { return v.LoadBalancerClass }).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer.
// This feature depends on whether the underlying cloud-provider supports specifying
// the loadBalancerIP when a load balancer is created.
// This field will be ignored if the cloud-provider does not support the feature.
// Deprecated: This field was under-specified and its meaning varies across implementations.
// Using it is non-portable and it may not support dual-stack.
// Users are encouraged to use implementation-specific annotations when available.
func (o ElasticsearchSpecTransportServiceSpecOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) *string { return v.LoadBalancerIP }).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider
// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
// cloud-provider does not support the feature."
// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
func (o ElasticsearchSpecTransportServiceSpecOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) []string { return v.LoadBalancerSourceRanges }).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecTransportServiceSpecOutput) Ports() ElasticsearchSpecTransportServiceSpecPortsArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) []ElasticsearchSpecTransportServiceSpecPorts {
		return v.Ports
	}).(ElasticsearchSpecTransportServiceSpecPortsArrayOutput)
}

// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
// Service should disregard any indications of ready/not-ready.
// The primary use case for setting this field is for a StatefulSet's Headless Service to
// propagate SRV DNS records for its Pods for the purpose of peer discovery.
// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
// Services interpret this to mean that all endpoints are considered "ready" even if the
// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
// through the Endpoints or EndpointSlice resources can safely assume this behavior.
func (o ElasticsearchSpecTransportServiceSpecOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) *bool { return v.PublishNotReadyAddresses }).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this
// selector. If empty or not present, the service is assumed to have an
// external process managing its endpoints, which Kubernetes will not
// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
// Ignored if type is ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o ElasticsearchSpecTransportServiceSpecOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) map[string]string { return v.Selector }).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity.
// Enable client IP based session affinity.
// Must be ClientIP or None.
// Defaults to None.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecTransportServiceSpecOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) *string { return v.SessionAffinity }).(pulumi.StringPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
func (o ElasticsearchSpecTransportServiceSpecOutput) SessionAffinityConfig() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) *ElasticsearchSpecTransportServiceSpecSessionAffinityConfig {
		return v.SessionAffinityConfig
	}).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput)
}

// TrafficDistribution offers a way to express preferences for how traffic is
// distributed to Service endpoints. Implementations can use this field as a
// hint, but are not required to guarantee strict adherence. If the field is
// not set, the implementation will apply its default routing strategy. If set
// to "PreferClose", implementations should prioritize endpoints that are
// topologically close (e.g., same zone).
// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
func (o ElasticsearchSpecTransportServiceSpecOutput) TrafficDistribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) *string { return v.TrafficDistribution }).(pulumi.StringPtrOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid
// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
// "ClusterIP" allocates a cluster-internal IP address for load-balancing
// to endpoints. Endpoints are determined by the selector or if that is not
// specified, by manual construction of an Endpoints object or
// EndpointSlice objects. If clusterIP is "None", no virtual IP is
// allocated and the endpoints are published as a set of endpoints rather
// than a virtual IP.
// "NodePort" builds on ClusterIP and allocates a port on every node which
// routes to the same endpoints as the clusterIP.
// "LoadBalancer" builds on NodePort and creates an external load-balancer
// (if supported in the current cloud) which routes to the same endpoints
// as the clusterIP.
// "ExternalName" aliases this service to the specified externalName.
// Several other fields do not apply to ExternalName services.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o ElasticsearchSpecTransportServiceSpecOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpec) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecTransportServiceSpecPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportServiceSpec)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceSpecPtrOutput) ToElasticsearchSpecTransportServiceSpecPtrOutput() ElasticsearchSpecTransportServiceSpecPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecPtrOutput) ToElasticsearchSpecTransportServiceSpecPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecPtrOutput) Elem() ElasticsearchSpecTransportServiceSpecOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) ElasticsearchSpecTransportServiceSpec {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecTransportServiceSpec
		return ret
	}).(ElasticsearchSpecTransportServiceSpecOutput)
}

// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
// allocated for services with type LoadBalancer.  Default is "true". It
// may be set to "false" if the cluster load-balancer does not rely on
// NodePorts.  If the caller requests specific NodePorts (by specifying a
// value), those requests will be respected, regardless of this field.
// This field may only be set for services with type LoadBalancer and will
// be cleared if the type is changed to any other type.
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) AllocateLoadBalancerNodePorts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.AllocateLoadBalancerNodePorts
	}).(pulumi.BoolPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned
// randomly. If an address is specified manually, is in-range (as per
// system configuration), and is not in use, it will be allocated to the
// service; otherwise creation of the service will fail. This field may not
// be changed through updates unless the type field is also being changed
// to ExternalName (which requires this field to be blank) or the type
// field is being changed from ExternalName (in which case this field may
// optionally be specified, as describe above).  Valid values are "None",
// empty string (""), or a valid IP address. Setting this to "None" makes a
// "headless service" (no virtual IP), which is useful when direct endpoint
// connections are preferred and proxying is not required.  Only applies to
// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
// when creating a Service of type ExternalName, creation will fail. This
// field will be wiped when updating a Service to type ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ClusterIP
	}).(pulumi.StringPtrOutput)
}

// ClusterIPs is a list of IP addresses assigned to this service, and are
// usually assigned randomly.  If an address is specified manually, is
// in-range (as per system configuration), and is not in use, it will be
// allocated to the service; otherwise creation of the service will fail.
// This field may not be changed through updates unless the type field is
// also being changed to ExternalName (which requires this field to be
// empty) or the type field is being changed from ExternalName (in which
// case this field may optionally be specified, as describe above).  Valid
// values are "None", empty string (""), or a valid IP address.  Setting
// this to "None" makes a "headless service" (no virtual IP), which is
// useful when direct endpoint connections are preferred and proxying is
// not required.  Only applies to types ClusterIP, NodePort, and
// LoadBalancer. If this field is specified when creating a Service of type
// ExternalName, creation will fail. This field will be wiped when updating
// a Service to type ExternalName.  If this field is not specified, it will
// be initialized from the clusterIP field.  If this field is specified,
// clients must ensure that clusterIPs[0] and clusterIP have the same
// value.
//
// This field may hold a maximum of two entries (dual-stack IPs, in either order).
// These IPs must correspond to the values of the ipFamilies field. Both
// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) ClusterIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.ClusterIPs
	}).(pulumi.StringArrayOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster
// will also accept traffic for this service.  These IPs are not managed by
// Kubernetes.  The user is responsible for ensuring that traffic arrives
// at a node with this IP.  A common example is external load-balancers
// that are not part of the Kubernetes system.
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.ExternalIPs
	}).(pulumi.StringArrayOutput)
}

// externalName is the external reference that discovery mechanisms will
// return as an alias for this service (e.g. a DNS CNAME record). No
// proxying will be involved.  Must be a lowercase RFC-1123 hostname
// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ExternalName
	}).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy describes how nodes distribute service traffic they
// receive on one of the Service's "externally-facing" addresses (NodePorts,
// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
// the service in a way that assumes that external load balancers will take care
// of balancing the service traffic between nodes, and so each node will deliver
// traffic only to the node-local endpoints of the service, without masquerading
// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
// be dropped.) The default value, "Cluster", uses the standard behavior of
// routing to all endpoints evenly (possibly modified by topology and other
// features). Note that traffic sent to an External IP or LoadBalancer IP from
// within the cluster will always get "Cluster" semantics, but clients sending to
// a NodePort from within the cluster may need to take traffic policy into account
// when picking a node.
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ExternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service.
// This only applies when type is set to LoadBalancer and
// externalTrafficPolicy is set to Local. If a value is specified, is
// in-range, and is not in use, it will be used.  If not specified, a value
// will be automatically allocated.  External systems (e.g. load-balancers)
// can use this port to determine if a given node holds endpoints for this
// service or not.  If this field is specified when creating a Service
// which does not need it, creation will fail. This field will be wiped
// when updating a Service to no longer need it (e.g. changing type).
// This field cannot be updated once set.
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) *int {
		if v == nil {
			return nil
		}
		return v.HealthCheckNodePort
	}).(pulumi.IntPtrOutput)
}

// InternalTrafficPolicy describes how nodes distribute service traffic they
// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
// only want to talk to endpoints of the service on the same node as the pod,
// dropping the traffic if there are no local endpoints. The default value,
// "Cluster", uses the standard behavior of routing to all endpoints evenly
// (possibly modified by topology and other features).
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) InternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.InternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
// service. This field is usually assigned automatically based on cluster
// configuration and the ipFamilyPolicy field. If this field is specified
// manually, the requested family is available in the cluster,
// and ipFamilyPolicy allows it, it will be used; otherwise creation of
// the service will fail. This field is conditionally mutable: it allows
// for adding or removing a secondary IP family, but it does not allow
// changing the primary IP family of the Service. Valid values are "IPv4"
// and "IPv6".  This field only applies to Services of types ClusterIP,
// NodePort, and LoadBalancer, and does apply to "headless" services.
// This field will be wiped when updating a Service to type ExternalName.
//
// This field may hold a maximum of two entries (dual-stack families, in
// either order).  These families must correspond to the values of the
// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
// governed by the ipFamilyPolicy field.
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.IpFamilies
	}).(pulumi.StringArrayOutput)
}

// IPFamilyPolicy represents the dual-stack-ness requested or required by
// this Service. If there is no value provided, then this field will be set
// to SingleStack. Services can be "SingleStack" (a single IP family),
// "PreferDualStack" (two IP families on dual-stack configured clusters or
// a single IP family on single-stack clusters), or "RequireDualStack"
// (two IP families on dual-stack configured clusters, otherwise fail). The
// ipFamilies and clusterIPs fields depend on the value of this field. This
// field will be wiped when updating a service to type ExternalName.
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) IpFamilyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.IpFamilyPolicy
	}).(pulumi.StringPtrOutput)
}

// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
// If specified, the value of this field must be a label-style identifier, with an optional prefix,
// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
// balancer implementation is used, today this is typically done through the cloud provider integration,
// but should apply for any default implementation. If set, it is assumed that a load balancer
// implementation is watching for Services with a matching class. Any default load balancer
// implementation (e.g. cloud providers) should ignore Services that set this field.
// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) LoadBalancerClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerClass
	}).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer.
// This feature depends on whether the underlying cloud-provider supports specifying
// the loadBalancerIP when a load balancer is created.
// This field will be ignored if the cloud-provider does not support the feature.
// Deprecated: This field was under-specified and its meaning varies across implementations.
// Using it is non-portable and it may not support dual-stack.
// Users are encouraged to use implementation-specific annotations when available.
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerIP
	}).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider
// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
// cloud-provider does not support the feature."
// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSourceRanges
	}).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) Ports() ElasticsearchSpecTransportServiceSpecPortsArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) []ElasticsearchSpecTransportServiceSpecPorts {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(ElasticsearchSpecTransportServiceSpecPortsArrayOutput)
}

// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
// Service should disregard any indications of ready/not-ready.
// The primary use case for setting this field is for a StatefulSet's Headless Service to
// propagate SRV DNS records for its Pods for the purpose of peer discovery.
// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
// Services interpret this to mean that all endpoints are considered "ready" even if the
// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
// through the Endpoints or EndpointSlice resources can safely assume this behavior.
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.PublishNotReadyAddresses
	}).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this
// selector. If empty or not present, the service is assumed to have an
// external process managing its endpoints, which Kubernetes will not
// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
// Ignored if type is ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity.
// Enable client IP based session affinity.
// Must be ClientIP or None.
// Defaults to None.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.SessionAffinity
	}).(pulumi.StringPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) SessionAffinityConfig() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) *ElasticsearchSpecTransportServiceSpecSessionAffinityConfig {
		if v == nil {
			return nil
		}
		return v.SessionAffinityConfig
	}).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput)
}

// TrafficDistribution offers a way to express preferences for how traffic is
// distributed to Service endpoints. Implementations can use this field as a
// hint, but are not required to guarantee strict adherence. If the field is
// not set, the implementation will apply its default routing strategy. If set
// to "PreferClose", implementations should prioritize endpoints that are
// topologically close (e.g., same zone).
// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) TrafficDistribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.TrafficDistribution
	}).(pulumi.StringPtrOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid
// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
// "ClusterIP" allocates a cluster-internal IP address for load-balancing
// to endpoints. Endpoints are determined by the selector or if that is not
// specified, by manual construction of an Endpoints object or
// EndpointSlice objects. If clusterIP is "None", no virtual IP is
// allocated and the endpoints are published as a set of endpoints rather
// than a virtual IP.
// "NodePort" builds on ClusterIP and allocates a port on every node which
// routes to the same endpoints as the clusterIP.
// "LoadBalancer" builds on NodePort and creates an external load-balancer
// (if supported in the current cloud) which routes to the same endpoints
// as the clusterIP.
// "ExternalName" aliases this service to the specified externalName.
// Several other fields do not apply to ExternalName services.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o ElasticsearchSpecTransportServiceSpecPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// ServicePort contains information on service's port.
type ElasticsearchSpecTransportServiceSpecPorts struct {
	// The application protocol for this port.
	// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
	// This field follows standard Kubernetes label syntax.
	// Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per
	// RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
	//   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
	//   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
	//
	// * Other protocols should use implementation-defined prefixed names such as
	// mycompany.com/my-custom-protocol.
	AppProtocol *string `pulumi:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL.
	// All ports within a ServiceSpec must have unique names. When considering
	// the endpoints for a Service, this must match the 'name' field in the
	// EndpointPort.
	// Optional if only one ServicePort is defined on this service.
	Name *string `pulumi:"name"`
	// The port on each node on which this service is exposed when type is
	// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
	// specified, in-range, and not in use it will be used, otherwise the
	// operation will fail.  If not specified, a port will be allocated if this
	// Service requires one.  If this field is specified when creating a
	// Service which does not need it, creation will fail. This field will be
	// wiped when updating a Service to no longer need it (e.g. changing type
	// from NodePort to ClusterIP).
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort *int `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port int `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
	// Default is TCP.
	Protocol *string `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service.
	// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	// If this is a string, it will be looked up as a named port in the
	// target Pod's container ports. If this is not specified, the value
	// of the 'port' field is used (an identity map).
	// This field is ignored for services with clusterIP=None, and should be
	// omitted or set equal to the 'port' field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort interface{} `pulumi:"targetPort"`
}

// Defaults sets the appropriate defaults for ElasticsearchSpecTransportServiceSpecPorts
func (val *ElasticsearchSpecTransportServiceSpecPorts) Defaults() *ElasticsearchSpecTransportServiceSpecPorts {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		protocol_ := "TCP"
		tmp.Protocol = &protocol_
	}
	return &tmp
}

// ElasticsearchSpecTransportServiceSpecPortsInput is an input type that accepts ElasticsearchSpecTransportServiceSpecPortsArgs and ElasticsearchSpecTransportServiceSpecPortsOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceSpecPortsInput` via:
//
//	ElasticsearchSpecTransportServiceSpecPortsArgs{...}
type ElasticsearchSpecTransportServiceSpecPortsInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceSpecPortsOutput() ElasticsearchSpecTransportServiceSpecPortsOutput
	ToElasticsearchSpecTransportServiceSpecPortsOutputWithContext(context.Context) ElasticsearchSpecTransportServiceSpecPortsOutput
}

// ServicePort contains information on service's port.
type ElasticsearchSpecTransportServiceSpecPortsArgs struct {
	// The application protocol for this port.
	// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
	// This field follows standard Kubernetes label syntax.
	// Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per
	// RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
	//   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
	//   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
	//
	// * Other protocols should use implementation-defined prefixed names such as
	// mycompany.com/my-custom-protocol.
	AppProtocol pulumi.StringPtrInput `pulumi:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL.
	// All ports within a ServiceSpec must have unique names. When considering
	// the endpoints for a Service, this must match the 'name' field in the
	// EndpointPort.
	// Optional if only one ServicePort is defined on this service.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port on each node on which this service is exposed when type is
	// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
	// specified, in-range, and not in use it will be used, otherwise the
	// operation will fail.  If not specified, a port will be allocated if this
	// Service requires one.  If this field is specified when creating a
	// Service which does not need it, creation will fail. This field will be
	// wiped when updating a Service to no longer need it (e.g. changing type
	// from NodePort to ClusterIP).
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort pulumi.IntPtrInput `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port pulumi.IntInput `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
	// Default is TCP.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service.
	// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	// If this is a string, it will be looked up as a named port in the
	// target Pod's container ports. If this is not specified, the value
	// of the 'port' field is used (an identity map).
	// This field is ignored for services with clusterIP=None, and should be
	// omitted or set equal to the 'port' field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort pulumi.Input `pulumi:"targetPort"`
}

// Defaults sets the appropriate defaults for ElasticsearchSpecTransportServiceSpecPortsArgs
func (val *ElasticsearchSpecTransportServiceSpecPortsArgs) Defaults() *ElasticsearchSpecTransportServiceSpecPortsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		tmp.Protocol = pulumi.StringPtr("TCP")
	}
	return &tmp
}
func (ElasticsearchSpecTransportServiceSpecPortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecPorts)(nil)).Elem()
}

func (i ElasticsearchSpecTransportServiceSpecPortsArgs) ToElasticsearchSpecTransportServiceSpecPortsOutput() ElasticsearchSpecTransportServiceSpecPortsOutput {
	return i.ToElasticsearchSpecTransportServiceSpecPortsOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceSpecPortsArgs) ToElasticsearchSpecTransportServiceSpecPortsOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecPortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecPortsOutput)
}

// ElasticsearchSpecTransportServiceSpecPortsArrayInput is an input type that accepts ElasticsearchSpecTransportServiceSpecPortsArray and ElasticsearchSpecTransportServiceSpecPortsArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceSpecPortsArrayInput` via:
//
//	ElasticsearchSpecTransportServiceSpecPortsArray{ ElasticsearchSpecTransportServiceSpecPortsArgs{...} }
type ElasticsearchSpecTransportServiceSpecPortsArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceSpecPortsArrayOutput() ElasticsearchSpecTransportServiceSpecPortsArrayOutput
	ToElasticsearchSpecTransportServiceSpecPortsArrayOutputWithContext(context.Context) ElasticsearchSpecTransportServiceSpecPortsArrayOutput
}

type ElasticsearchSpecTransportServiceSpecPortsArray []ElasticsearchSpecTransportServiceSpecPortsInput

func (ElasticsearchSpecTransportServiceSpecPortsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecTransportServiceSpecPorts)(nil)).Elem()
}

func (i ElasticsearchSpecTransportServiceSpecPortsArray) ToElasticsearchSpecTransportServiceSpecPortsArrayOutput() ElasticsearchSpecTransportServiceSpecPortsArrayOutput {
	return i.ToElasticsearchSpecTransportServiceSpecPortsArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceSpecPortsArray) ToElasticsearchSpecTransportServiceSpecPortsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecPortsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecPortsArrayOutput)
}

// ServicePort contains information on service's port.
type ElasticsearchSpecTransportServiceSpecPortsOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceSpecPortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecPorts)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceSpecPortsOutput) ToElasticsearchSpecTransportServiceSpecPortsOutput() ElasticsearchSpecTransportServiceSpecPortsOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecPortsOutput) ToElasticsearchSpecTransportServiceSpecPortsOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecPortsOutput {
	return o
}

// The application protocol for this port.
// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
// This field follows standard Kubernetes label syntax.
// Valid values are either:
//
// * Un-prefixed protocol names - reserved for IANA standard service names (as per
// RFC-6335 and https://www.iana.org/assignments/service-names).
//
// * Kubernetes-defined prefixed names:
//   - 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
//   - 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
//   - 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
//
// * Other protocols should use implementation-defined prefixed names such as
// mycompany.com/my-custom-protocol.
func (o ElasticsearchSpecTransportServiceSpecPortsOutput) AppProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPorts) *string { return v.AppProtocol }).(pulumi.StringPtrOutput)
}

// The name of this port within the service. This must be a DNS_LABEL.
// All ports within a ServiceSpec must have unique names. When considering
// the endpoints for a Service, this must match the 'name' field in the
// EndpointPort.
// Optional if only one ServicePort is defined on this service.
func (o ElasticsearchSpecTransportServiceSpecPortsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPorts) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port on each node on which this service is exposed when type is
// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
// specified, in-range, and not in use it will be used, otherwise the
// operation will fail.  If not specified, a port will be allocated if this
// Service requires one.  If this field is specified when creating a
// Service which does not need it, creation will fail. This field will be
// wiped when updating a Service to no longer need it (e.g. changing type
// from NodePort to ClusterIP).
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
func (o ElasticsearchSpecTransportServiceSpecPortsOutput) NodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPorts) *int { return v.NodePort }).(pulumi.IntPtrOutput)
}

// The port that will be exposed by this service.
func (o ElasticsearchSpecTransportServiceSpecPortsOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPorts) int { return v.Port }).(pulumi.IntOutput)
}

// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
// Default is TCP.
func (o ElasticsearchSpecTransportServiceSpecPortsOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPorts) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the pods targeted by the service.
// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
// If this is a string, it will be looked up as a named port in the
// target Pod's container ports. If this is not specified, the value
// of the 'port' field is used (an identity map).
// This field is ignored for services with clusterIP=None, and should be
// omitted or set equal to the 'port' field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
func (o ElasticsearchSpecTransportServiceSpecPortsOutput) TargetPort() pulumi.AnyOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecPorts) interface{} { return v.TargetPort }).(pulumi.AnyOutput)
}

type ElasticsearchSpecTransportServiceSpecPortsArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceSpecPortsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecTransportServiceSpecPorts)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceSpecPortsArrayOutput) ToElasticsearchSpecTransportServiceSpecPortsArrayOutput() ElasticsearchSpecTransportServiceSpecPortsArrayOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecPortsArrayOutput) ToElasticsearchSpecTransportServiceSpecPortsArrayOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecPortsArrayOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecPortsArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecTransportServiceSpecPortsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecTransportServiceSpecPorts {
		return vs[0].([]ElasticsearchSpecTransportServiceSpecPorts)[vs[1].(int)]
	}).(ElasticsearchSpecTransportServiceSpecPortsOutput)
}

// Route service traffic to pods with label keys and values matching this
// selector. If empty or not present, the service is assumed to have an
// external process managing its endpoints, which Kubernetes will not
// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
// Ignored if type is ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
type ElasticsearchSpecTransportServiceSpecSelector struct {
}

// sessionAffinityConfig contains the configurations of session affinity.
type ElasticsearchSpecTransportServiceSpecSessionAffinityConfig struct {
	// clientIP contains the configurations of Client IP based session affinity.
	ClientIP *ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIp `pulumi:"clientIP"`
}

// ElasticsearchSpecTransportServiceSpecSessionAffinityConfigInput is an input type that accepts ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs and ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceSpecSessionAffinityConfigInput` via:
//
//	ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs{...}
type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput
	ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutputWithContext(context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput
}

// sessionAffinityConfig contains the configurations of session affinity.
type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs struct {
	// clientIP contains the configurations of Client IP based session affinity.
	ClientIP ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrInput `pulumi:"clientIP"`
}

func (ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (i ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput {
	return i.ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput)
}

func (i ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput {
	return i.ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput).ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx)
}

// ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrInput is an input type that accepts ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs, ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtr and ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrInput` via:
//
//	        ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput
	ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput
}

type elasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrType ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs

func ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtr(v *ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrInput {
	return (*elasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrType)(v)
}

func (*elasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (i *elasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrType) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput {
	return i.ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrType) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput {
	return o.ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecTransportServiceSpecSessionAffinityConfig) *ElasticsearchSpecTransportServiceSpecSessionAffinityConfig {
		return &v
	}).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput) ClientIP() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecSessionAffinityConfig) *ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIp {
		return v.ClientIP
	}).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutput)
}

type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput) Elem() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecSessionAffinityConfig) ElasticsearchSpecTransportServiceSpecSessionAffinityConfig {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecTransportServiceSpecSessionAffinityConfig
		return ret
	}).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput) ClientIP() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecSessionAffinityConfig) *ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIp {
		if v == nil {
			return nil
		}
		return v.ClientIP
	}).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIp struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
	// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
	// Default value is 10800(for 3 hours).
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpInput is an input type that accepts ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpArgs and ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpInput` via:
//
//	ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpArgs{...}
type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpOutput
	ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpOutputWithContext(context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpOutput
}

// clientIP contains the configurations of Client IP based session affinity.
type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpArgs struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
	// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
	// Default value is 10800(for 3 hours).
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIp)(nil)).Elem()
}

func (i ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpArgs) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpOutput {
	return i.ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpArgs) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpOutput)
}

func (i ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpArgs) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return i.ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpArgs) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpOutput).ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(ctx)
}

// ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrInput is an input type that accepts ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpArgs, ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtr and ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrInput` via:
//
//	        ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutput
	ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutput
}

type elasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrType ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpArgs

func ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtr(v *ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpArgs) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrInput {
	return (*elasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrType)(v)
}

func (*elasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIp)(nil)).Elem()
}

func (i *elasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrType) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return i.ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrType) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIp)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o.ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIp) *ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIp {
		return &v
	}).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
// Default value is 10800(for 3 hours).
func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIp) *int {
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

type ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIp)(nil)).Elem()
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutput() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutput) ToElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutput) Elem() ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIp) ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIp {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIp
		return ret
	}).(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
// Default value is 10800(for 3 hours).
func (o ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIp) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// TLS defines options for configuring TLS on the transport layer.
type ElasticsearchSpecTransportTls struct {
	// Certificate is a reference to a Kubernetes secret that contains the CA certificate
	// and private key for generating node certificates.
	// The referenced secret should contain the following:
	//
	// - `ca.crt`: The CA certificate in PEM format.
	// - `ca.key`: The private key for the CA certificate in PEM format.
	Certificate *ElasticsearchSpecTransportTlsCertificate `pulumi:"certificate"`
	// CertificateAuthorities is a reference to a config map that contains one or more x509 certificates for
	// trusted authorities in PEM format. The certificates need to be in a file called `ca.crt`.
	CertificateAuthorities *ElasticsearchSpecTransportTlsCertificateAuthorities `pulumi:"certificateAuthorities"`
	// OtherNameSuffix when defined will be prefixed with the Pod name and used as the common name,
	// and the first DNSName, as well as an OtherName required by Elasticsearch in the Subject Alternative Name
	// extension of each Elasticsearch node's transport TLS certificate.
	// Example: if set to "node.cluster.local", the generated certificate will have its otherName set to "<pod_name>.node.cluster.local".
	OtherNameSuffix *string `pulumi:"otherNameSuffix"`
	// SelfSignedCertificates allows configuring the self-signed certificate generated by the operator.
	SelfSignedCertificates *ElasticsearchSpecTransportTlsSelfSignedCertificates `pulumi:"selfSignedCertificates"`
	// SubjectAlternativeNames is a list of SANs to include in the generated node transport TLS certificates.
	SubjectAltNames []ElasticsearchSpecTransportTlsSubjectAltNames `pulumi:"subjectAltNames"`
}

// ElasticsearchSpecTransportTlsInput is an input type that accepts ElasticsearchSpecTransportTlsArgs and ElasticsearchSpecTransportTlsOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportTlsInput` via:
//
//	ElasticsearchSpecTransportTlsArgs{...}
type ElasticsearchSpecTransportTlsInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportTlsOutput() ElasticsearchSpecTransportTlsOutput
	ToElasticsearchSpecTransportTlsOutputWithContext(context.Context) ElasticsearchSpecTransportTlsOutput
}

// TLS defines options for configuring TLS on the transport layer.
type ElasticsearchSpecTransportTlsArgs struct {
	// Certificate is a reference to a Kubernetes secret that contains the CA certificate
	// and private key for generating node certificates.
	// The referenced secret should contain the following:
	//
	// - `ca.crt`: The CA certificate in PEM format.
	// - `ca.key`: The private key for the CA certificate in PEM format.
	Certificate ElasticsearchSpecTransportTlsCertificatePtrInput `pulumi:"certificate"`
	// CertificateAuthorities is a reference to a config map that contains one or more x509 certificates for
	// trusted authorities in PEM format. The certificates need to be in a file called `ca.crt`.
	CertificateAuthorities ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrInput `pulumi:"certificateAuthorities"`
	// OtherNameSuffix when defined will be prefixed with the Pod name and used as the common name,
	// and the first DNSName, as well as an OtherName required by Elasticsearch in the Subject Alternative Name
	// extension of each Elasticsearch node's transport TLS certificate.
	// Example: if set to "node.cluster.local", the generated certificate will have its otherName set to "<pod_name>.node.cluster.local".
	OtherNameSuffix pulumi.StringPtrInput `pulumi:"otherNameSuffix"`
	// SelfSignedCertificates allows configuring the self-signed certificate generated by the operator.
	SelfSignedCertificates ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrInput `pulumi:"selfSignedCertificates"`
	// SubjectAlternativeNames is a list of SANs to include in the generated node transport TLS certificates.
	SubjectAltNames ElasticsearchSpecTransportTlsSubjectAltNamesArrayInput `pulumi:"subjectAltNames"`
}

func (ElasticsearchSpecTransportTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportTls)(nil)).Elem()
}

func (i ElasticsearchSpecTransportTlsArgs) ToElasticsearchSpecTransportTlsOutput() ElasticsearchSpecTransportTlsOutput {
	return i.ToElasticsearchSpecTransportTlsOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportTlsArgs) ToElasticsearchSpecTransportTlsOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsOutput)
}

func (i ElasticsearchSpecTransportTlsArgs) ToElasticsearchSpecTransportTlsPtrOutput() ElasticsearchSpecTransportTlsPtrOutput {
	return i.ToElasticsearchSpecTransportTlsPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportTlsArgs) ToElasticsearchSpecTransportTlsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsOutput).ToElasticsearchSpecTransportTlsPtrOutputWithContext(ctx)
}

// ElasticsearchSpecTransportTlsPtrInput is an input type that accepts ElasticsearchSpecTransportTlsArgs, ElasticsearchSpecTransportTlsPtr and ElasticsearchSpecTransportTlsPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportTlsPtrInput` via:
//
//	        ElasticsearchSpecTransportTlsArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecTransportTlsPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportTlsPtrOutput() ElasticsearchSpecTransportTlsPtrOutput
	ToElasticsearchSpecTransportTlsPtrOutputWithContext(context.Context) ElasticsearchSpecTransportTlsPtrOutput
}

type elasticsearchSpecTransportTlsPtrType ElasticsearchSpecTransportTlsArgs

func ElasticsearchSpecTransportTlsPtr(v *ElasticsearchSpecTransportTlsArgs) ElasticsearchSpecTransportTlsPtrInput {
	return (*elasticsearchSpecTransportTlsPtrType)(v)
}

func (*elasticsearchSpecTransportTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportTls)(nil)).Elem()
}

func (i *elasticsearchSpecTransportTlsPtrType) ToElasticsearchSpecTransportTlsPtrOutput() ElasticsearchSpecTransportTlsPtrOutput {
	return i.ToElasticsearchSpecTransportTlsPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecTransportTlsPtrType) ToElasticsearchSpecTransportTlsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsPtrOutput)
}

// TLS defines options for configuring TLS on the transport layer.
type ElasticsearchSpecTransportTlsOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportTls)(nil)).Elem()
}

func (o ElasticsearchSpecTransportTlsOutput) ToElasticsearchSpecTransportTlsOutput() ElasticsearchSpecTransportTlsOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsOutput) ToElasticsearchSpecTransportTlsOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsOutput) ToElasticsearchSpecTransportTlsPtrOutput() ElasticsearchSpecTransportTlsPtrOutput {
	return o.ToElasticsearchSpecTransportTlsPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecTransportTlsOutput) ToElasticsearchSpecTransportTlsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecTransportTls) *ElasticsearchSpecTransportTls {
		return &v
	}).(ElasticsearchSpecTransportTlsPtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the CA certificate
// and private key for generating node certificates.
// The referenced secret should contain the following:
//
// - `ca.crt`: The CA certificate in PEM format.
// - `ca.key`: The private key for the CA certificate in PEM format.
func (o ElasticsearchSpecTransportTlsOutput) Certificate() ElasticsearchSpecTransportTlsCertificatePtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportTls) *ElasticsearchSpecTransportTlsCertificate { return v.Certificate }).(ElasticsearchSpecTransportTlsCertificatePtrOutput)
}

// CertificateAuthorities is a reference to a config map that contains one or more x509 certificates for
// trusted authorities in PEM format. The certificates need to be in a file called `ca.crt`.
func (o ElasticsearchSpecTransportTlsOutput) CertificateAuthorities() ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportTls) *ElasticsearchSpecTransportTlsCertificateAuthorities {
		return v.CertificateAuthorities
	}).(ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput)
}

// OtherNameSuffix when defined will be prefixed with the Pod name and used as the common name,
// and the first DNSName, as well as an OtherName required by Elasticsearch in the Subject Alternative Name
// extension of each Elasticsearch node's transport TLS certificate.
// Example: if set to "node.cluster.local", the generated certificate will have its otherName set to "<pod_name>.node.cluster.local".
func (o ElasticsearchSpecTransportTlsOutput) OtherNameSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportTls) *string { return v.OtherNameSuffix }).(pulumi.StringPtrOutput)
}

// SelfSignedCertificates allows configuring the self-signed certificate generated by the operator.
func (o ElasticsearchSpecTransportTlsOutput) SelfSignedCertificates() ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportTls) *ElasticsearchSpecTransportTlsSelfSignedCertificates {
		return v.SelfSignedCertificates
	}).(ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput)
}

// SubjectAlternativeNames is a list of SANs to include in the generated node transport TLS certificates.
func (o ElasticsearchSpecTransportTlsOutput) SubjectAltNames() ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportTls) []ElasticsearchSpecTransportTlsSubjectAltNames {
		return v.SubjectAltNames
	}).(ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput)
}

type ElasticsearchSpecTransportTlsPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportTls)(nil)).Elem()
}

func (o ElasticsearchSpecTransportTlsPtrOutput) ToElasticsearchSpecTransportTlsPtrOutput() ElasticsearchSpecTransportTlsPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsPtrOutput) ToElasticsearchSpecTransportTlsPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsPtrOutput) Elem() ElasticsearchSpecTransportTlsOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTls) ElasticsearchSpecTransportTls {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecTransportTls
		return ret
	}).(ElasticsearchSpecTransportTlsOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the CA certificate
// and private key for generating node certificates.
// The referenced secret should contain the following:
//
// - `ca.crt`: The CA certificate in PEM format.
// - `ca.key`: The private key for the CA certificate in PEM format.
func (o ElasticsearchSpecTransportTlsPtrOutput) Certificate() ElasticsearchSpecTransportTlsCertificatePtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTls) *ElasticsearchSpecTransportTlsCertificate {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(ElasticsearchSpecTransportTlsCertificatePtrOutput)
}

// CertificateAuthorities is a reference to a config map that contains one or more x509 certificates for
// trusted authorities in PEM format. The certificates need to be in a file called `ca.crt`.
func (o ElasticsearchSpecTransportTlsPtrOutput) CertificateAuthorities() ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTls) *ElasticsearchSpecTransportTlsCertificateAuthorities {
		if v == nil {
			return nil
		}
		return v.CertificateAuthorities
	}).(ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput)
}

// OtherNameSuffix when defined will be prefixed with the Pod name and used as the common name,
// and the first DNSName, as well as an OtherName required by Elasticsearch in the Subject Alternative Name
// extension of each Elasticsearch node's transport TLS certificate.
// Example: if set to "node.cluster.local", the generated certificate will have its otherName set to "<pod_name>.node.cluster.local".
func (o ElasticsearchSpecTransportTlsPtrOutput) OtherNameSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTls) *string {
		if v == nil {
			return nil
		}
		return v.OtherNameSuffix
	}).(pulumi.StringPtrOutput)
}

// SelfSignedCertificates allows configuring the self-signed certificate generated by the operator.
func (o ElasticsearchSpecTransportTlsPtrOutput) SelfSignedCertificates() ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTls) *ElasticsearchSpecTransportTlsSelfSignedCertificates {
		if v == nil {
			return nil
		}
		return v.SelfSignedCertificates
	}).(ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput)
}

// SubjectAlternativeNames is a list of SANs to include in the generated node transport TLS certificates.
func (o ElasticsearchSpecTransportTlsPtrOutput) SubjectAltNames() ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTls) []ElasticsearchSpecTransportTlsSubjectAltNames {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the CA certificate
// and private key for generating node certificates.
// The referenced secret should contain the following:
//
// - `ca.crt`: The CA certificate in PEM format.
// - `ca.key`: The private key for the CA certificate in PEM format.
type ElasticsearchSpecTransportTlsCertificate struct {
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// ElasticsearchSpecTransportTlsCertificateInput is an input type that accepts ElasticsearchSpecTransportTlsCertificateArgs and ElasticsearchSpecTransportTlsCertificateOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportTlsCertificateInput` via:
//
//	ElasticsearchSpecTransportTlsCertificateArgs{...}
type ElasticsearchSpecTransportTlsCertificateInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportTlsCertificateOutput() ElasticsearchSpecTransportTlsCertificateOutput
	ToElasticsearchSpecTransportTlsCertificateOutputWithContext(context.Context) ElasticsearchSpecTransportTlsCertificateOutput
}

// Certificate is a reference to a Kubernetes secret that contains the CA certificate
// and private key for generating node certificates.
// The referenced secret should contain the following:
//
// - `ca.crt`: The CA certificate in PEM format.
// - `ca.key`: The private key for the CA certificate in PEM format.
type ElasticsearchSpecTransportTlsCertificateArgs struct {
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (ElasticsearchSpecTransportTlsCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportTlsCertificate)(nil)).Elem()
}

func (i ElasticsearchSpecTransportTlsCertificateArgs) ToElasticsearchSpecTransportTlsCertificateOutput() ElasticsearchSpecTransportTlsCertificateOutput {
	return i.ToElasticsearchSpecTransportTlsCertificateOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportTlsCertificateArgs) ToElasticsearchSpecTransportTlsCertificateOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsCertificateOutput)
}

func (i ElasticsearchSpecTransportTlsCertificateArgs) ToElasticsearchSpecTransportTlsCertificatePtrOutput() ElasticsearchSpecTransportTlsCertificatePtrOutput {
	return i.ToElasticsearchSpecTransportTlsCertificatePtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportTlsCertificateArgs) ToElasticsearchSpecTransportTlsCertificatePtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsCertificateOutput).ToElasticsearchSpecTransportTlsCertificatePtrOutputWithContext(ctx)
}

// ElasticsearchSpecTransportTlsCertificatePtrInput is an input type that accepts ElasticsearchSpecTransportTlsCertificateArgs, ElasticsearchSpecTransportTlsCertificatePtr and ElasticsearchSpecTransportTlsCertificatePtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportTlsCertificatePtrInput` via:
//
//	        ElasticsearchSpecTransportTlsCertificateArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecTransportTlsCertificatePtrInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportTlsCertificatePtrOutput() ElasticsearchSpecTransportTlsCertificatePtrOutput
	ToElasticsearchSpecTransportTlsCertificatePtrOutputWithContext(context.Context) ElasticsearchSpecTransportTlsCertificatePtrOutput
}

type elasticsearchSpecTransportTlsCertificatePtrType ElasticsearchSpecTransportTlsCertificateArgs

func ElasticsearchSpecTransportTlsCertificatePtr(v *ElasticsearchSpecTransportTlsCertificateArgs) ElasticsearchSpecTransportTlsCertificatePtrInput {
	return (*elasticsearchSpecTransportTlsCertificatePtrType)(v)
}

func (*elasticsearchSpecTransportTlsCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportTlsCertificate)(nil)).Elem()
}

func (i *elasticsearchSpecTransportTlsCertificatePtrType) ToElasticsearchSpecTransportTlsCertificatePtrOutput() ElasticsearchSpecTransportTlsCertificatePtrOutput {
	return i.ToElasticsearchSpecTransportTlsCertificatePtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecTransportTlsCertificatePtrType) ToElasticsearchSpecTransportTlsCertificatePtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsCertificatePtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the CA certificate
// and private key for generating node certificates.
// The referenced secret should contain the following:
//
// - `ca.crt`: The CA certificate in PEM format.
// - `ca.key`: The private key for the CA certificate in PEM format.
type ElasticsearchSpecTransportTlsCertificateOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportTlsCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportTlsCertificate)(nil)).Elem()
}

func (o ElasticsearchSpecTransportTlsCertificateOutput) ToElasticsearchSpecTransportTlsCertificateOutput() ElasticsearchSpecTransportTlsCertificateOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsCertificateOutput) ToElasticsearchSpecTransportTlsCertificateOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificateOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsCertificateOutput) ToElasticsearchSpecTransportTlsCertificatePtrOutput() ElasticsearchSpecTransportTlsCertificatePtrOutput {
	return o.ToElasticsearchSpecTransportTlsCertificatePtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecTransportTlsCertificateOutput) ToElasticsearchSpecTransportTlsCertificatePtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecTransportTlsCertificate) *ElasticsearchSpecTransportTlsCertificate {
		return &v
	}).(ElasticsearchSpecTransportTlsCertificatePtrOutput)
}

// SecretName is the name of the secret.
func (o ElasticsearchSpecTransportTlsCertificateOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportTlsCertificate) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecTransportTlsCertificatePtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportTlsCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportTlsCertificate)(nil)).Elem()
}

func (o ElasticsearchSpecTransportTlsCertificatePtrOutput) ToElasticsearchSpecTransportTlsCertificatePtrOutput() ElasticsearchSpecTransportTlsCertificatePtrOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsCertificatePtrOutput) ToElasticsearchSpecTransportTlsCertificatePtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificatePtrOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsCertificatePtrOutput) Elem() ElasticsearchSpecTransportTlsCertificateOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTlsCertificate) ElasticsearchSpecTransportTlsCertificate {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecTransportTlsCertificate
		return ret
	}).(ElasticsearchSpecTransportTlsCertificateOutput)
}

// SecretName is the name of the secret.
func (o ElasticsearchSpecTransportTlsCertificatePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTlsCertificate) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// CertificateAuthorities is a reference to a config map that contains one or more x509 certificates for
// trusted authorities in PEM format. The certificates need to be in a file called `ca.crt`.
type ElasticsearchSpecTransportTlsCertificateAuthorities struct {
	ConfigMapName *string `pulumi:"configMapName"`
}

// ElasticsearchSpecTransportTlsCertificateAuthoritiesInput is an input type that accepts ElasticsearchSpecTransportTlsCertificateAuthoritiesArgs and ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportTlsCertificateAuthoritiesInput` via:
//
//	ElasticsearchSpecTransportTlsCertificateAuthoritiesArgs{...}
type ElasticsearchSpecTransportTlsCertificateAuthoritiesInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportTlsCertificateAuthoritiesOutput() ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput
	ToElasticsearchSpecTransportTlsCertificateAuthoritiesOutputWithContext(context.Context) ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput
}

// CertificateAuthorities is a reference to a config map that contains one or more x509 certificates for
// trusted authorities in PEM format. The certificates need to be in a file called `ca.crt`.
type ElasticsearchSpecTransportTlsCertificateAuthoritiesArgs struct {
	ConfigMapName pulumi.StringPtrInput `pulumi:"configMapName"`
}

func (ElasticsearchSpecTransportTlsCertificateAuthoritiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportTlsCertificateAuthorities)(nil)).Elem()
}

func (i ElasticsearchSpecTransportTlsCertificateAuthoritiesArgs) ToElasticsearchSpecTransportTlsCertificateAuthoritiesOutput() ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput {
	return i.ToElasticsearchSpecTransportTlsCertificateAuthoritiesOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportTlsCertificateAuthoritiesArgs) ToElasticsearchSpecTransportTlsCertificateAuthoritiesOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput)
}

func (i ElasticsearchSpecTransportTlsCertificateAuthoritiesArgs) ToElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput() ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput {
	return i.ToElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportTlsCertificateAuthoritiesArgs) ToElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput).ToElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutputWithContext(ctx)
}

// ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrInput is an input type that accepts ElasticsearchSpecTransportTlsCertificateAuthoritiesArgs, ElasticsearchSpecTransportTlsCertificateAuthoritiesPtr and ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrInput` via:
//
//	        ElasticsearchSpecTransportTlsCertificateAuthoritiesArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput() ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput
	ToElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutputWithContext(context.Context) ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput
}

type elasticsearchSpecTransportTlsCertificateAuthoritiesPtrType ElasticsearchSpecTransportTlsCertificateAuthoritiesArgs

func ElasticsearchSpecTransportTlsCertificateAuthoritiesPtr(v *ElasticsearchSpecTransportTlsCertificateAuthoritiesArgs) ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrInput {
	return (*elasticsearchSpecTransportTlsCertificateAuthoritiesPtrType)(v)
}

func (*elasticsearchSpecTransportTlsCertificateAuthoritiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportTlsCertificateAuthorities)(nil)).Elem()
}

func (i *elasticsearchSpecTransportTlsCertificateAuthoritiesPtrType) ToElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput() ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput {
	return i.ToElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecTransportTlsCertificateAuthoritiesPtrType) ToElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput)
}

// CertificateAuthorities is a reference to a config map that contains one or more x509 certificates for
// trusted authorities in PEM format. The certificates need to be in a file called `ca.crt`.
type ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportTlsCertificateAuthorities)(nil)).Elem()
}

func (o ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput) ToElasticsearchSpecTransportTlsCertificateAuthoritiesOutput() ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput) ToElasticsearchSpecTransportTlsCertificateAuthoritiesOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput) ToElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput() ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput {
	return o.ToElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput) ToElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecTransportTlsCertificateAuthorities) *ElasticsearchSpecTransportTlsCertificateAuthorities {
		return &v
	}).(ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput)
}

func (o ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput) ConfigMapName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportTlsCertificateAuthorities) *string { return v.ConfigMapName }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportTlsCertificateAuthorities)(nil)).Elem()
}

func (o ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput) ToElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput() ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput) ToElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput) Elem() ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTlsCertificateAuthorities) ElasticsearchSpecTransportTlsCertificateAuthorities {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecTransportTlsCertificateAuthorities
		return ret
	}).(ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput)
}

func (o ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput) ConfigMapName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTlsCertificateAuthorities) *string {
		if v == nil {
			return nil
		}
		return v.ConfigMapName
	}).(pulumi.StringPtrOutput)
}

// SelfSignedCertificates allows configuring the self-signed certificate generated by the operator.
type ElasticsearchSpecTransportTlsSelfSignedCertificates struct {
	// Disabled indicates that provisioning of the self-signed certificates should be disabled.
	Disabled *bool `pulumi:"disabled"`
}

// ElasticsearchSpecTransportTlsSelfSignedCertificatesInput is an input type that accepts ElasticsearchSpecTransportTlsSelfSignedCertificatesArgs and ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportTlsSelfSignedCertificatesInput` via:
//
//	ElasticsearchSpecTransportTlsSelfSignedCertificatesArgs{...}
type ElasticsearchSpecTransportTlsSelfSignedCertificatesInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportTlsSelfSignedCertificatesOutput() ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput
	ToElasticsearchSpecTransportTlsSelfSignedCertificatesOutputWithContext(context.Context) ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput
}

// SelfSignedCertificates allows configuring the self-signed certificate generated by the operator.
type ElasticsearchSpecTransportTlsSelfSignedCertificatesArgs struct {
	// Disabled indicates that provisioning of the self-signed certificates should be disabled.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
}

func (ElasticsearchSpecTransportTlsSelfSignedCertificatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportTlsSelfSignedCertificates)(nil)).Elem()
}

func (i ElasticsearchSpecTransportTlsSelfSignedCertificatesArgs) ToElasticsearchSpecTransportTlsSelfSignedCertificatesOutput() ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput {
	return i.ToElasticsearchSpecTransportTlsSelfSignedCertificatesOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportTlsSelfSignedCertificatesArgs) ToElasticsearchSpecTransportTlsSelfSignedCertificatesOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput)
}

func (i ElasticsearchSpecTransportTlsSelfSignedCertificatesArgs) ToElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput() ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput {
	return i.ToElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportTlsSelfSignedCertificatesArgs) ToElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput).ToElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutputWithContext(ctx)
}

// ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrInput is an input type that accepts ElasticsearchSpecTransportTlsSelfSignedCertificatesArgs, ElasticsearchSpecTransportTlsSelfSignedCertificatesPtr and ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrInput` via:
//
//	        ElasticsearchSpecTransportTlsSelfSignedCertificatesArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput() ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput
	ToElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutputWithContext(context.Context) ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput
}

type elasticsearchSpecTransportTlsSelfSignedCertificatesPtrType ElasticsearchSpecTransportTlsSelfSignedCertificatesArgs

func ElasticsearchSpecTransportTlsSelfSignedCertificatesPtr(v *ElasticsearchSpecTransportTlsSelfSignedCertificatesArgs) ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrInput {
	return (*elasticsearchSpecTransportTlsSelfSignedCertificatesPtrType)(v)
}

func (*elasticsearchSpecTransportTlsSelfSignedCertificatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportTlsSelfSignedCertificates)(nil)).Elem()
}

func (i *elasticsearchSpecTransportTlsSelfSignedCertificatesPtrType) ToElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput() ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput {
	return i.ToElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecTransportTlsSelfSignedCertificatesPtrType) ToElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput)
}

// SelfSignedCertificates allows configuring the self-signed certificate generated by the operator.
type ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportTlsSelfSignedCertificates)(nil)).Elem()
}

func (o ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput) ToElasticsearchSpecTransportTlsSelfSignedCertificatesOutput() ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput) ToElasticsearchSpecTransportTlsSelfSignedCertificatesOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput) ToElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput() ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput {
	return o.ToElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput) ToElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecTransportTlsSelfSignedCertificates) *ElasticsearchSpecTransportTlsSelfSignedCertificates {
		return &v
	}).(ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput)
}

// Disabled indicates that provisioning of the self-signed certificates should be disabled.
func (o ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportTlsSelfSignedCertificates) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

type ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecTransportTlsSelfSignedCertificates)(nil)).Elem()
}

func (o ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput) ToElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput() ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput) ToElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput) Elem() ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTlsSelfSignedCertificates) ElasticsearchSpecTransportTlsSelfSignedCertificates {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecTransportTlsSelfSignedCertificates
		return ret
	}).(ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput)
}

// Disabled indicates that provisioning of the self-signed certificates should be disabled.
func (o ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecTransportTlsSelfSignedCertificates) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type ElasticsearchSpecTransportTlsSubjectAltNames struct {
	// DNS is the DNS name of the subject.
	Dns *string `pulumi:"dns"`
	// IP is the IP address of the subject.
	Ip *string `pulumi:"ip"`
}

// ElasticsearchSpecTransportTlsSubjectAltNamesInput is an input type that accepts ElasticsearchSpecTransportTlsSubjectAltNamesArgs and ElasticsearchSpecTransportTlsSubjectAltNamesOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportTlsSubjectAltNamesInput` via:
//
//	ElasticsearchSpecTransportTlsSubjectAltNamesArgs{...}
type ElasticsearchSpecTransportTlsSubjectAltNamesInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportTlsSubjectAltNamesOutput() ElasticsearchSpecTransportTlsSubjectAltNamesOutput
	ToElasticsearchSpecTransportTlsSubjectAltNamesOutputWithContext(context.Context) ElasticsearchSpecTransportTlsSubjectAltNamesOutput
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type ElasticsearchSpecTransportTlsSubjectAltNamesArgs struct {
	// DNS is the DNS name of the subject.
	Dns pulumi.StringPtrInput `pulumi:"dns"`
	// IP is the IP address of the subject.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
}

func (ElasticsearchSpecTransportTlsSubjectAltNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportTlsSubjectAltNames)(nil)).Elem()
}

func (i ElasticsearchSpecTransportTlsSubjectAltNamesArgs) ToElasticsearchSpecTransportTlsSubjectAltNamesOutput() ElasticsearchSpecTransportTlsSubjectAltNamesOutput {
	return i.ToElasticsearchSpecTransportTlsSubjectAltNamesOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportTlsSubjectAltNamesArgs) ToElasticsearchSpecTransportTlsSubjectAltNamesOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsSubjectAltNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsSubjectAltNamesOutput)
}

// ElasticsearchSpecTransportTlsSubjectAltNamesArrayInput is an input type that accepts ElasticsearchSpecTransportTlsSubjectAltNamesArray and ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSpecTransportTlsSubjectAltNamesArrayInput` via:
//
//	ElasticsearchSpecTransportTlsSubjectAltNamesArray{ ElasticsearchSpecTransportTlsSubjectAltNamesArgs{...} }
type ElasticsearchSpecTransportTlsSubjectAltNamesArrayInput interface {
	pulumi.Input

	ToElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput() ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput
	ToElasticsearchSpecTransportTlsSubjectAltNamesArrayOutputWithContext(context.Context) ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput
}

type ElasticsearchSpecTransportTlsSubjectAltNamesArray []ElasticsearchSpecTransportTlsSubjectAltNamesInput

func (ElasticsearchSpecTransportTlsSubjectAltNamesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecTransportTlsSubjectAltNames)(nil)).Elem()
}

func (i ElasticsearchSpecTransportTlsSubjectAltNamesArray) ToElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput() ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput {
	return i.ToElasticsearchSpecTransportTlsSubjectAltNamesArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSpecTransportTlsSubjectAltNamesArray) ToElasticsearchSpecTransportTlsSubjectAltNamesArrayOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput)
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type ElasticsearchSpecTransportTlsSubjectAltNamesOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportTlsSubjectAltNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecTransportTlsSubjectAltNames)(nil)).Elem()
}

func (o ElasticsearchSpecTransportTlsSubjectAltNamesOutput) ToElasticsearchSpecTransportTlsSubjectAltNamesOutput() ElasticsearchSpecTransportTlsSubjectAltNamesOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsSubjectAltNamesOutput) ToElasticsearchSpecTransportTlsSubjectAltNamesOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsSubjectAltNamesOutput {
	return o
}

// DNS is the DNS name of the subject.
func (o ElasticsearchSpecTransportTlsSubjectAltNamesOutput) Dns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportTlsSubjectAltNames) *string { return v.Dns }).(pulumi.StringPtrOutput)
}

// IP is the IP address of the subject.
func (o ElasticsearchSpecTransportTlsSubjectAltNamesOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecTransportTlsSubjectAltNames) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchSpecTransportTlsSubjectAltNames)(nil)).Elem()
}

func (o ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput) ToElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput() ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput) ToElasticsearchSpecTransportTlsSubjectAltNamesArrayOutputWithContext(ctx context.Context) ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput {
	return o
}

func (o ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput) Index(i pulumi.IntInput) ElasticsearchSpecTransportTlsSubjectAltNamesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchSpecTransportTlsSubjectAltNames {
		return vs[0].([]ElasticsearchSpecTransportTlsSubjectAltNames)[vs[1].(int)]
	}).(ElasticsearchSpecTransportTlsSubjectAltNamesOutput)
}

// UpdateStrategy specifies how updates to the cluster should be performed.
type ElasticsearchSpecUpdateStrategy struct {
	// ChangeBudget defines the constraints to consider when applying changes to the Elasticsearch cluster.
	ChangeBudget *ElasticsearchSpecUpdateStrategyChangeBudget `pulumi:"changeBudget"`
}

// ElasticsearchSpecUpdateStrategyInput is an input type that accepts ElasticsearchSpecUpdateStrategyArgs and ElasticsearchSpecUpdateStrategyOutput values.
// You can construct a concrete instance of `ElasticsearchSpecUpdateStrategyInput` via:
//
//	ElasticsearchSpecUpdateStrategyArgs{...}
type ElasticsearchSpecUpdateStrategyInput interface {
	pulumi.Input

	ToElasticsearchSpecUpdateStrategyOutput() ElasticsearchSpecUpdateStrategyOutput
	ToElasticsearchSpecUpdateStrategyOutputWithContext(context.Context) ElasticsearchSpecUpdateStrategyOutput
}

// UpdateStrategy specifies how updates to the cluster should be performed.
type ElasticsearchSpecUpdateStrategyArgs struct {
	// ChangeBudget defines the constraints to consider when applying changes to the Elasticsearch cluster.
	ChangeBudget ElasticsearchSpecUpdateStrategyChangeBudgetPtrInput `pulumi:"changeBudget"`
}

func (ElasticsearchSpecUpdateStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecUpdateStrategy)(nil)).Elem()
}

func (i ElasticsearchSpecUpdateStrategyArgs) ToElasticsearchSpecUpdateStrategyOutput() ElasticsearchSpecUpdateStrategyOutput {
	return i.ToElasticsearchSpecUpdateStrategyOutputWithContext(context.Background())
}

func (i ElasticsearchSpecUpdateStrategyArgs) ToElasticsearchSpecUpdateStrategyOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecUpdateStrategyOutput)
}

func (i ElasticsearchSpecUpdateStrategyArgs) ToElasticsearchSpecUpdateStrategyPtrOutput() ElasticsearchSpecUpdateStrategyPtrOutput {
	return i.ToElasticsearchSpecUpdateStrategyPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecUpdateStrategyArgs) ToElasticsearchSpecUpdateStrategyPtrOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecUpdateStrategyOutput).ToElasticsearchSpecUpdateStrategyPtrOutputWithContext(ctx)
}

// ElasticsearchSpecUpdateStrategyPtrInput is an input type that accepts ElasticsearchSpecUpdateStrategyArgs, ElasticsearchSpecUpdateStrategyPtr and ElasticsearchSpecUpdateStrategyPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecUpdateStrategyPtrInput` via:
//
//	        ElasticsearchSpecUpdateStrategyArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecUpdateStrategyPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecUpdateStrategyPtrOutput() ElasticsearchSpecUpdateStrategyPtrOutput
	ToElasticsearchSpecUpdateStrategyPtrOutputWithContext(context.Context) ElasticsearchSpecUpdateStrategyPtrOutput
}

type elasticsearchSpecUpdateStrategyPtrType ElasticsearchSpecUpdateStrategyArgs

func ElasticsearchSpecUpdateStrategyPtr(v *ElasticsearchSpecUpdateStrategyArgs) ElasticsearchSpecUpdateStrategyPtrInput {
	return (*elasticsearchSpecUpdateStrategyPtrType)(v)
}

func (*elasticsearchSpecUpdateStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecUpdateStrategy)(nil)).Elem()
}

func (i *elasticsearchSpecUpdateStrategyPtrType) ToElasticsearchSpecUpdateStrategyPtrOutput() ElasticsearchSpecUpdateStrategyPtrOutput {
	return i.ToElasticsearchSpecUpdateStrategyPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecUpdateStrategyPtrType) ToElasticsearchSpecUpdateStrategyPtrOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecUpdateStrategyPtrOutput)
}

// UpdateStrategy specifies how updates to the cluster should be performed.
type ElasticsearchSpecUpdateStrategyOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecUpdateStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecUpdateStrategy)(nil)).Elem()
}

func (o ElasticsearchSpecUpdateStrategyOutput) ToElasticsearchSpecUpdateStrategyOutput() ElasticsearchSpecUpdateStrategyOutput {
	return o
}

func (o ElasticsearchSpecUpdateStrategyOutput) ToElasticsearchSpecUpdateStrategyOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyOutput {
	return o
}

func (o ElasticsearchSpecUpdateStrategyOutput) ToElasticsearchSpecUpdateStrategyPtrOutput() ElasticsearchSpecUpdateStrategyPtrOutput {
	return o.ToElasticsearchSpecUpdateStrategyPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecUpdateStrategyOutput) ToElasticsearchSpecUpdateStrategyPtrOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecUpdateStrategy) *ElasticsearchSpecUpdateStrategy {
		return &v
	}).(ElasticsearchSpecUpdateStrategyPtrOutput)
}

// ChangeBudget defines the constraints to consider when applying changes to the Elasticsearch cluster.
func (o ElasticsearchSpecUpdateStrategyOutput) ChangeBudget() ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecUpdateStrategy) *ElasticsearchSpecUpdateStrategyChangeBudget {
		return v.ChangeBudget
	}).(ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput)
}

type ElasticsearchSpecUpdateStrategyPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecUpdateStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecUpdateStrategy)(nil)).Elem()
}

func (o ElasticsearchSpecUpdateStrategyPtrOutput) ToElasticsearchSpecUpdateStrategyPtrOutput() ElasticsearchSpecUpdateStrategyPtrOutput {
	return o
}

func (o ElasticsearchSpecUpdateStrategyPtrOutput) ToElasticsearchSpecUpdateStrategyPtrOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyPtrOutput {
	return o
}

func (o ElasticsearchSpecUpdateStrategyPtrOutput) Elem() ElasticsearchSpecUpdateStrategyOutput {
	return o.ApplyT(func(v *ElasticsearchSpecUpdateStrategy) ElasticsearchSpecUpdateStrategy {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecUpdateStrategy
		return ret
	}).(ElasticsearchSpecUpdateStrategyOutput)
}

// ChangeBudget defines the constraints to consider when applying changes to the Elasticsearch cluster.
func (o ElasticsearchSpecUpdateStrategyPtrOutput) ChangeBudget() ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecUpdateStrategy) *ElasticsearchSpecUpdateStrategyChangeBudget {
		if v == nil {
			return nil
		}
		return v.ChangeBudget
	}).(ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput)
}

// ChangeBudget defines the constraints to consider when applying changes to the Elasticsearch cluster.
type ElasticsearchSpecUpdateStrategyChangeBudget struct {
	// MaxSurge is the maximum number of new Pods that can be created exceeding the original number of Pods defined in
	// the specification. MaxSurge is only taken into consideration when scaling up. Setting a negative value will
	// disable the restriction. Defaults to unbounded if not specified.
	MaxSurge *int `pulumi:"maxSurge"`
	// MaxUnavailable is the maximum number of Pods that can be unavailable (not ready) during the update due to
	// circumstances under the control of the operator. Setting a negative value will disable this restriction.
	// Defaults to 1 if not specified.
	MaxUnavailable *int `pulumi:"maxUnavailable"`
}

// ElasticsearchSpecUpdateStrategyChangeBudgetInput is an input type that accepts ElasticsearchSpecUpdateStrategyChangeBudgetArgs and ElasticsearchSpecUpdateStrategyChangeBudgetOutput values.
// You can construct a concrete instance of `ElasticsearchSpecUpdateStrategyChangeBudgetInput` via:
//
//	ElasticsearchSpecUpdateStrategyChangeBudgetArgs{...}
type ElasticsearchSpecUpdateStrategyChangeBudgetInput interface {
	pulumi.Input

	ToElasticsearchSpecUpdateStrategyChangeBudgetOutput() ElasticsearchSpecUpdateStrategyChangeBudgetOutput
	ToElasticsearchSpecUpdateStrategyChangeBudgetOutputWithContext(context.Context) ElasticsearchSpecUpdateStrategyChangeBudgetOutput
}

// ChangeBudget defines the constraints to consider when applying changes to the Elasticsearch cluster.
type ElasticsearchSpecUpdateStrategyChangeBudgetArgs struct {
	// MaxSurge is the maximum number of new Pods that can be created exceeding the original number of Pods defined in
	// the specification. MaxSurge is only taken into consideration when scaling up. Setting a negative value will
	// disable the restriction. Defaults to unbounded if not specified.
	MaxSurge pulumi.IntPtrInput `pulumi:"maxSurge"`
	// MaxUnavailable is the maximum number of Pods that can be unavailable (not ready) during the update due to
	// circumstances under the control of the operator. Setting a negative value will disable this restriction.
	// Defaults to 1 if not specified.
	MaxUnavailable pulumi.IntPtrInput `pulumi:"maxUnavailable"`
}

func (ElasticsearchSpecUpdateStrategyChangeBudgetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecUpdateStrategyChangeBudget)(nil)).Elem()
}

func (i ElasticsearchSpecUpdateStrategyChangeBudgetArgs) ToElasticsearchSpecUpdateStrategyChangeBudgetOutput() ElasticsearchSpecUpdateStrategyChangeBudgetOutput {
	return i.ToElasticsearchSpecUpdateStrategyChangeBudgetOutputWithContext(context.Background())
}

func (i ElasticsearchSpecUpdateStrategyChangeBudgetArgs) ToElasticsearchSpecUpdateStrategyChangeBudgetOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyChangeBudgetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecUpdateStrategyChangeBudgetOutput)
}

func (i ElasticsearchSpecUpdateStrategyChangeBudgetArgs) ToElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput() ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput {
	return i.ToElasticsearchSpecUpdateStrategyChangeBudgetPtrOutputWithContext(context.Background())
}

func (i ElasticsearchSpecUpdateStrategyChangeBudgetArgs) ToElasticsearchSpecUpdateStrategyChangeBudgetPtrOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecUpdateStrategyChangeBudgetOutput).ToElasticsearchSpecUpdateStrategyChangeBudgetPtrOutputWithContext(ctx)
}

// ElasticsearchSpecUpdateStrategyChangeBudgetPtrInput is an input type that accepts ElasticsearchSpecUpdateStrategyChangeBudgetArgs, ElasticsearchSpecUpdateStrategyChangeBudgetPtr and ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput values.
// You can construct a concrete instance of `ElasticsearchSpecUpdateStrategyChangeBudgetPtrInput` via:
//
//	        ElasticsearchSpecUpdateStrategyChangeBudgetArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchSpecUpdateStrategyChangeBudgetPtrInput interface {
	pulumi.Input

	ToElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput() ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput
	ToElasticsearchSpecUpdateStrategyChangeBudgetPtrOutputWithContext(context.Context) ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput
}

type elasticsearchSpecUpdateStrategyChangeBudgetPtrType ElasticsearchSpecUpdateStrategyChangeBudgetArgs

func ElasticsearchSpecUpdateStrategyChangeBudgetPtr(v *ElasticsearchSpecUpdateStrategyChangeBudgetArgs) ElasticsearchSpecUpdateStrategyChangeBudgetPtrInput {
	return (*elasticsearchSpecUpdateStrategyChangeBudgetPtrType)(v)
}

func (*elasticsearchSpecUpdateStrategyChangeBudgetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecUpdateStrategyChangeBudget)(nil)).Elem()
}

func (i *elasticsearchSpecUpdateStrategyChangeBudgetPtrType) ToElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput() ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput {
	return i.ToElasticsearchSpecUpdateStrategyChangeBudgetPtrOutputWithContext(context.Background())
}

func (i *elasticsearchSpecUpdateStrategyChangeBudgetPtrType) ToElasticsearchSpecUpdateStrategyChangeBudgetPtrOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput)
}

// ChangeBudget defines the constraints to consider when applying changes to the Elasticsearch cluster.
type ElasticsearchSpecUpdateStrategyChangeBudgetOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecUpdateStrategyChangeBudgetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchSpecUpdateStrategyChangeBudget)(nil)).Elem()
}

func (o ElasticsearchSpecUpdateStrategyChangeBudgetOutput) ToElasticsearchSpecUpdateStrategyChangeBudgetOutput() ElasticsearchSpecUpdateStrategyChangeBudgetOutput {
	return o
}

func (o ElasticsearchSpecUpdateStrategyChangeBudgetOutput) ToElasticsearchSpecUpdateStrategyChangeBudgetOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyChangeBudgetOutput {
	return o
}

func (o ElasticsearchSpecUpdateStrategyChangeBudgetOutput) ToElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput() ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput {
	return o.ToElasticsearchSpecUpdateStrategyChangeBudgetPtrOutputWithContext(context.Background())
}

func (o ElasticsearchSpecUpdateStrategyChangeBudgetOutput) ToElasticsearchSpecUpdateStrategyChangeBudgetPtrOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchSpecUpdateStrategyChangeBudget) *ElasticsearchSpecUpdateStrategyChangeBudget {
		return &v
	}).(ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput)
}

// MaxSurge is the maximum number of new Pods that can be created exceeding the original number of Pods defined in
// the specification. MaxSurge is only taken into consideration when scaling up. Setting a negative value will
// disable the restriction. Defaults to unbounded if not specified.
func (o ElasticsearchSpecUpdateStrategyChangeBudgetOutput) MaxSurge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecUpdateStrategyChangeBudget) *int { return v.MaxSurge }).(pulumi.IntPtrOutput)
}

// MaxUnavailable is the maximum number of Pods that can be unavailable (not ready) during the update due to
// circumstances under the control of the operator. Setting a negative value will disable this restriction.
// Defaults to 1 if not specified.
func (o ElasticsearchSpecUpdateStrategyChangeBudgetOutput) MaxUnavailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchSpecUpdateStrategyChangeBudget) *int { return v.MaxUnavailable }).(pulumi.IntPtrOutput)
}

type ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSpecUpdateStrategyChangeBudget)(nil)).Elem()
}

func (o ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput) ToElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput() ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput {
	return o
}

func (o ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput) ToElasticsearchSpecUpdateStrategyChangeBudgetPtrOutputWithContext(ctx context.Context) ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput {
	return o
}

func (o ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput) Elem() ElasticsearchSpecUpdateStrategyChangeBudgetOutput {
	return o.ApplyT(func(v *ElasticsearchSpecUpdateStrategyChangeBudget) ElasticsearchSpecUpdateStrategyChangeBudget {
		if v != nil {
			return *v
		}
		var ret ElasticsearchSpecUpdateStrategyChangeBudget
		return ret
	}).(ElasticsearchSpecUpdateStrategyChangeBudgetOutput)
}

// MaxSurge is the maximum number of new Pods that can be created exceeding the original number of Pods defined in
// the specification. MaxSurge is only taken into consideration when scaling up. Setting a negative value will
// disable the restriction. Defaults to unbounded if not specified.
func (o ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput) MaxSurge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecUpdateStrategyChangeBudget) *int {
		if v == nil {
			return nil
		}
		return v.MaxSurge
	}).(pulumi.IntPtrOutput)
}

// MaxUnavailable is the maximum number of Pods that can be unavailable (not ready) during the update due to
// circumstances under the control of the operator. Setting a negative value will disable this restriction.
// Defaults to 1 if not specified.
func (o ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput) MaxUnavailable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticsearchSpecUpdateStrategyChangeBudget) *int {
		if v == nil {
			return nil
		}
		return v.MaxUnavailable
	}).(pulumi.IntPtrOutput)
}

// ElasticsearchStatus represents the observed state of Elasticsearch.
type ElasticsearchStatus struct {
	// AvailableNodes is the number of available instances.
	AvailableNodes *int `pulumi:"availableNodes"`
	// Conditions holds the current service state of an Elasticsearch cluster.
	// **This API is in technical preview and may be changed or removed in a future release.**
	Conditions []ElasticsearchStatusConditions `pulumi:"conditions"`
	// ElasticsearchHealth is the health of the cluster as returned by the health API.
	Health *string `pulumi:"health"`
	// InProgressOperations represents changes being applied by the operator to the Elasticsearch cluster.
	// **This API is in technical preview and may be changed or removed in a future release.**
	InProgressOperations *ElasticsearchStatusInProgressOperations `pulumi:"inProgressOperations"`
	// AssociationStatusMap is the map of association's namespaced name string to its AssociationStatus. For resources that
	// have a single Association of a given type (for ex. single ES reference), this map contains a single entry.
	MonitoringAssociationStatus map[string]string `pulumi:"monitoringAssociationStatus"`
	// ObservedGeneration is the most recent generation observed for this Elasticsearch cluster.
	// It corresponds to the metadata generation, which is updated on mutation by the API Server.
	// If the generation observed in status diverges from the generation in metadata, the Elasticsearch
	// controller has not yet processed the changes contained in the Elasticsearch specification.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// ElasticsearchOrchestrationPhase is the phase Elasticsearch is in from the controller point of view.
	Phase *string `pulumi:"phase"`
	// Version of the stack resource currently running. During version upgrades, multiple versions may run
	// in parallel: this value specifies the lowest version currently running.
	Version *string `pulumi:"version"`
}

// ElasticsearchStatusInput is an input type that accepts ElasticsearchStatusArgs and ElasticsearchStatusOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInput` via:
//
//	ElasticsearchStatusArgs{...}
type ElasticsearchStatusInput interface {
	pulumi.Input

	ToElasticsearchStatusOutput() ElasticsearchStatusOutput
	ToElasticsearchStatusOutputWithContext(context.Context) ElasticsearchStatusOutput
}

// ElasticsearchStatus represents the observed state of Elasticsearch.
type ElasticsearchStatusArgs struct {
	// AvailableNodes is the number of available instances.
	AvailableNodes pulumi.IntPtrInput `pulumi:"availableNodes"`
	// Conditions holds the current service state of an Elasticsearch cluster.
	// **This API is in technical preview and may be changed or removed in a future release.**
	Conditions ElasticsearchStatusConditionsArrayInput `pulumi:"conditions"`
	// ElasticsearchHealth is the health of the cluster as returned by the health API.
	Health pulumi.StringPtrInput `pulumi:"health"`
	// InProgressOperations represents changes being applied by the operator to the Elasticsearch cluster.
	// **This API is in technical preview and may be changed or removed in a future release.**
	InProgressOperations ElasticsearchStatusInProgressOperationsPtrInput `pulumi:"inProgressOperations"`
	// AssociationStatusMap is the map of association's namespaced name string to its AssociationStatus. For resources that
	// have a single Association of a given type (for ex. single ES reference), this map contains a single entry.
	MonitoringAssociationStatus pulumi.StringMapInput `pulumi:"monitoringAssociationStatus"`
	// ObservedGeneration is the most recent generation observed for this Elasticsearch cluster.
	// It corresponds to the metadata generation, which is updated on mutation by the API Server.
	// If the generation observed in status diverges from the generation in metadata, the Elasticsearch
	// controller has not yet processed the changes contained in the Elasticsearch specification.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// ElasticsearchOrchestrationPhase is the phase Elasticsearch is in from the controller point of view.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// Version of the stack resource currently running. During version upgrades, multiple versions may run
	// in parallel: this value specifies the lowest version currently running.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ElasticsearchStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatus)(nil)).Elem()
}

func (i ElasticsearchStatusArgs) ToElasticsearchStatusOutput() ElasticsearchStatusOutput {
	return i.ToElasticsearchStatusOutputWithContext(context.Background())
}

func (i ElasticsearchStatusArgs) ToElasticsearchStatusOutputWithContext(ctx context.Context) ElasticsearchStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusOutput)
}

func (i ElasticsearchStatusArgs) ToElasticsearchStatusPtrOutput() ElasticsearchStatusPtrOutput {
	return i.ToElasticsearchStatusPtrOutputWithContext(context.Background())
}

func (i ElasticsearchStatusArgs) ToElasticsearchStatusPtrOutputWithContext(ctx context.Context) ElasticsearchStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusOutput).ToElasticsearchStatusPtrOutputWithContext(ctx)
}

// ElasticsearchStatusPtrInput is an input type that accepts ElasticsearchStatusArgs, ElasticsearchStatusPtr and ElasticsearchStatusPtrOutput values.
// You can construct a concrete instance of `ElasticsearchStatusPtrInput` via:
//
//	        ElasticsearchStatusArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchStatusPtrInput interface {
	pulumi.Input

	ToElasticsearchStatusPtrOutput() ElasticsearchStatusPtrOutput
	ToElasticsearchStatusPtrOutputWithContext(context.Context) ElasticsearchStatusPtrOutput
}

type elasticsearchStatusPtrType ElasticsearchStatusArgs

func ElasticsearchStatusPtr(v *ElasticsearchStatusArgs) ElasticsearchStatusPtrInput {
	return (*elasticsearchStatusPtrType)(v)
}

func (*elasticsearchStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchStatus)(nil)).Elem()
}

func (i *elasticsearchStatusPtrType) ToElasticsearchStatusPtrOutput() ElasticsearchStatusPtrOutput {
	return i.ToElasticsearchStatusPtrOutputWithContext(context.Background())
}

func (i *elasticsearchStatusPtrType) ToElasticsearchStatusPtrOutputWithContext(ctx context.Context) ElasticsearchStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusPtrOutput)
}

// ElasticsearchStatus represents the observed state of Elasticsearch.
type ElasticsearchStatusOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatus)(nil)).Elem()
}

func (o ElasticsearchStatusOutput) ToElasticsearchStatusOutput() ElasticsearchStatusOutput {
	return o
}

func (o ElasticsearchStatusOutput) ToElasticsearchStatusOutputWithContext(ctx context.Context) ElasticsearchStatusOutput {
	return o
}

func (o ElasticsearchStatusOutput) ToElasticsearchStatusPtrOutput() ElasticsearchStatusPtrOutput {
	return o.ToElasticsearchStatusPtrOutputWithContext(context.Background())
}

func (o ElasticsearchStatusOutput) ToElasticsearchStatusPtrOutputWithContext(ctx context.Context) ElasticsearchStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchStatus) *ElasticsearchStatus {
		return &v
	}).(ElasticsearchStatusPtrOutput)
}

// AvailableNodes is the number of available instances.
func (o ElasticsearchStatusOutput) AvailableNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatus) *int { return v.AvailableNodes }).(pulumi.IntPtrOutput)
}

// Conditions holds the current service state of an Elasticsearch cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
func (o ElasticsearchStatusOutput) Conditions() ElasticsearchStatusConditionsArrayOutput {
	return o.ApplyT(func(v ElasticsearchStatus) []ElasticsearchStatusConditions { return v.Conditions }).(ElasticsearchStatusConditionsArrayOutput)
}

// ElasticsearchHealth is the health of the cluster as returned by the health API.
func (o ElasticsearchStatusOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatus) *string { return v.Health }).(pulumi.StringPtrOutput)
}

// InProgressOperations represents changes being applied by the operator to the Elasticsearch cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
func (o ElasticsearchStatusOutput) InProgressOperations() ElasticsearchStatusInProgressOperationsPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatus) *ElasticsearchStatusInProgressOperations { return v.InProgressOperations }).(ElasticsearchStatusInProgressOperationsPtrOutput)
}

// AssociationStatusMap is the map of association's namespaced name string to its AssociationStatus. For resources that
// have a single Association of a given type (for ex. single ES reference), this map contains a single entry.
func (o ElasticsearchStatusOutput) MonitoringAssociationStatus() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticsearchStatus) map[string]string { return v.MonitoringAssociationStatus }).(pulumi.StringMapOutput)
}

// ObservedGeneration is the most recent generation observed for this Elasticsearch cluster.
// It corresponds to the metadata generation, which is updated on mutation by the API Server.
// If the generation observed in status diverges from the generation in metadata, the Elasticsearch
// controller has not yet processed the changes contained in the Elasticsearch specification.
func (o ElasticsearchStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// ElasticsearchOrchestrationPhase is the phase Elasticsearch is in from the controller point of view.
func (o ElasticsearchStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// Version of the stack resource currently running. During version upgrades, multiple versions may run
// in parallel: this value specifies the lowest version currently running.
func (o ElasticsearchStatusOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatus) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ElasticsearchStatusPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchStatus)(nil)).Elem()
}

func (o ElasticsearchStatusPtrOutput) ToElasticsearchStatusPtrOutput() ElasticsearchStatusPtrOutput {
	return o
}

func (o ElasticsearchStatusPtrOutput) ToElasticsearchStatusPtrOutputWithContext(ctx context.Context) ElasticsearchStatusPtrOutput {
	return o
}

func (o ElasticsearchStatusPtrOutput) Elem() ElasticsearchStatusOutput {
	return o.ApplyT(func(v *ElasticsearchStatus) ElasticsearchStatus {
		if v != nil {
			return *v
		}
		var ret ElasticsearchStatus
		return ret
	}).(ElasticsearchStatusOutput)
}

// AvailableNodes is the number of available instances.
func (o ElasticsearchStatusPtrOutput) AvailableNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatus) *int {
		if v == nil {
			return nil
		}
		return v.AvailableNodes
	}).(pulumi.IntPtrOutput)
}

// Conditions holds the current service state of an Elasticsearch cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
func (o ElasticsearchStatusPtrOutput) Conditions() ElasticsearchStatusConditionsArrayOutput {
	return o.ApplyT(func(v *ElasticsearchStatus) []ElasticsearchStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(ElasticsearchStatusConditionsArrayOutput)
}

// ElasticsearchHealth is the health of the cluster as returned by the health API.
func (o ElasticsearchStatusPtrOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatus) *string {
		if v == nil {
			return nil
		}
		return v.Health
	}).(pulumi.StringPtrOutput)
}

// InProgressOperations represents changes being applied by the operator to the Elasticsearch cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
func (o ElasticsearchStatusPtrOutput) InProgressOperations() ElasticsearchStatusInProgressOperationsPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatus) *ElasticsearchStatusInProgressOperations {
		if v == nil {
			return nil
		}
		return v.InProgressOperations
	}).(ElasticsearchStatusInProgressOperationsPtrOutput)
}

// AssociationStatusMap is the map of association's namespaced name string to its AssociationStatus. For resources that
// have a single Association of a given type (for ex. single ES reference), this map contains a single entry.
func (o ElasticsearchStatusPtrOutput) MonitoringAssociationStatus() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticsearchStatus) map[string]string {
		if v == nil {
			return nil
		}
		return v.MonitoringAssociationStatus
	}).(pulumi.StringMapOutput)
}

// ObservedGeneration is the most recent generation observed for this Elasticsearch cluster.
// It corresponds to the metadata generation, which is updated on mutation by the API Server.
// If the generation observed in status diverges from the generation in metadata, the Elasticsearch
// controller has not yet processed the changes contained in the Elasticsearch specification.
func (o ElasticsearchStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// ElasticsearchOrchestrationPhase is the phase Elasticsearch is in from the controller point of view.
func (o ElasticsearchStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// Version of the stack resource currently running. During version upgrades, multiple versions may run
// in parallel: this value specifies the lowest version currently running.
func (o ElasticsearchStatusPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatus) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Condition represents Elasticsearch resource's condition.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusConditions struct {
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	Message            *string `pulumi:"message"`
	Status             string  `pulumi:"status"`
	// ConditionType defines the condition of an Elasticsearch resource.
	Type string `pulumi:"type"`
}

// ElasticsearchStatusConditionsInput is an input type that accepts ElasticsearchStatusConditionsArgs and ElasticsearchStatusConditionsOutput values.
// You can construct a concrete instance of `ElasticsearchStatusConditionsInput` via:
//
//	ElasticsearchStatusConditionsArgs{...}
type ElasticsearchStatusConditionsInput interface {
	pulumi.Input

	ToElasticsearchStatusConditionsOutput() ElasticsearchStatusConditionsOutput
	ToElasticsearchStatusConditionsOutputWithContext(context.Context) ElasticsearchStatusConditionsOutput
}

// Condition represents Elasticsearch resource's condition.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusConditionsArgs struct {
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	Message            pulumi.StringPtrInput `pulumi:"message"`
	Status             pulumi.StringInput    `pulumi:"status"`
	// ConditionType defines the condition of an Elasticsearch resource.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ElasticsearchStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusConditions)(nil)).Elem()
}

func (i ElasticsearchStatusConditionsArgs) ToElasticsearchStatusConditionsOutput() ElasticsearchStatusConditionsOutput {
	return i.ToElasticsearchStatusConditionsOutputWithContext(context.Background())
}

func (i ElasticsearchStatusConditionsArgs) ToElasticsearchStatusConditionsOutputWithContext(ctx context.Context) ElasticsearchStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusConditionsOutput)
}

// ElasticsearchStatusConditionsArrayInput is an input type that accepts ElasticsearchStatusConditionsArray and ElasticsearchStatusConditionsArrayOutput values.
// You can construct a concrete instance of `ElasticsearchStatusConditionsArrayInput` via:
//
//	ElasticsearchStatusConditionsArray{ ElasticsearchStatusConditionsArgs{...} }
type ElasticsearchStatusConditionsArrayInput interface {
	pulumi.Input

	ToElasticsearchStatusConditionsArrayOutput() ElasticsearchStatusConditionsArrayOutput
	ToElasticsearchStatusConditionsArrayOutputWithContext(context.Context) ElasticsearchStatusConditionsArrayOutput
}

type ElasticsearchStatusConditionsArray []ElasticsearchStatusConditionsInput

func (ElasticsearchStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchStatusConditions)(nil)).Elem()
}

func (i ElasticsearchStatusConditionsArray) ToElasticsearchStatusConditionsArrayOutput() ElasticsearchStatusConditionsArrayOutput {
	return i.ToElasticsearchStatusConditionsArrayOutputWithContext(context.Background())
}

func (i ElasticsearchStatusConditionsArray) ToElasticsearchStatusConditionsArrayOutputWithContext(ctx context.Context) ElasticsearchStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusConditionsArrayOutput)
}

// Condition represents Elasticsearch resource's condition.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusConditionsOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusConditions)(nil)).Elem()
}

func (o ElasticsearchStatusConditionsOutput) ToElasticsearchStatusConditionsOutput() ElasticsearchStatusConditionsOutput {
	return o
}

func (o ElasticsearchStatusConditionsOutput) ToElasticsearchStatusConditionsOutputWithContext(ctx context.Context) ElasticsearchStatusConditionsOutput {
	return o
}

func (o ElasticsearchStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o ElasticsearchStatusConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticsearchStatusConditions) string { return v.Status }).(pulumi.StringOutput)
}

// ConditionType defines the condition of an Elasticsearch resource.
func (o ElasticsearchStatusConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticsearchStatusConditions) string { return v.Type }).(pulumi.StringOutput)
}

type ElasticsearchStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchStatusConditions)(nil)).Elem()
}

func (o ElasticsearchStatusConditionsArrayOutput) ToElasticsearchStatusConditionsArrayOutput() ElasticsearchStatusConditionsArrayOutput {
	return o
}

func (o ElasticsearchStatusConditionsArrayOutput) ToElasticsearchStatusConditionsArrayOutputWithContext(ctx context.Context) ElasticsearchStatusConditionsArrayOutput {
	return o
}

func (o ElasticsearchStatusConditionsArrayOutput) Index(i pulumi.IntInput) ElasticsearchStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchStatusConditions {
		return vs[0].([]ElasticsearchStatusConditions)[vs[1].(int)]
	}).(ElasticsearchStatusConditionsOutput)
}

// InProgressOperations represents changes being applied by the operator to the Elasticsearch cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperations struct {
	// DownscaleOperation provides details about in progress downscale operations.
	// **This API is in technical preview and may be changed or removed in a future release.**
	Downscale ElasticsearchStatusInProgressOperationsDownscale `pulumi:"downscale"`
	// UpgradeOperation provides an overview of the pending or in progress changes applied by the operator to update the Elasticsearch nodes in the cluster.
	// **This API is in technical preview and may be changed or removed in a future release.**
	Upgrade ElasticsearchStatusInProgressOperationsUpgrade `pulumi:"upgrade"`
	// UpscaleOperation provides an overview of in progress changes applied by the operator to add Elasticsearch nodes to the cluster.
	// **This API is in technical preview and may be changed or removed in a future release.**
	Upscale ElasticsearchStatusInProgressOperationsUpscale `pulumi:"upscale"`
}

// ElasticsearchStatusInProgressOperationsInput is an input type that accepts ElasticsearchStatusInProgressOperationsArgs and ElasticsearchStatusInProgressOperationsOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsInput` via:
//
//	ElasticsearchStatusInProgressOperationsArgs{...}
type ElasticsearchStatusInProgressOperationsInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsOutput() ElasticsearchStatusInProgressOperationsOutput
	ToElasticsearchStatusInProgressOperationsOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsOutput
}

// InProgressOperations represents changes being applied by the operator to the Elasticsearch cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsArgs struct {
	// DownscaleOperation provides details about in progress downscale operations.
	// **This API is in technical preview and may be changed or removed in a future release.**
	Downscale ElasticsearchStatusInProgressOperationsDownscaleInput `pulumi:"downscale"`
	// UpgradeOperation provides an overview of the pending or in progress changes applied by the operator to update the Elasticsearch nodes in the cluster.
	// **This API is in technical preview and may be changed or removed in a future release.**
	Upgrade ElasticsearchStatusInProgressOperationsUpgradeInput `pulumi:"upgrade"`
	// UpscaleOperation provides an overview of in progress changes applied by the operator to add Elasticsearch nodes to the cluster.
	// **This API is in technical preview and may be changed or removed in a future release.**
	Upscale ElasticsearchStatusInProgressOperationsUpscaleInput `pulumi:"upscale"`
}

func (ElasticsearchStatusInProgressOperationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperations)(nil)).Elem()
}

func (i ElasticsearchStatusInProgressOperationsArgs) ToElasticsearchStatusInProgressOperationsOutput() ElasticsearchStatusInProgressOperationsOutput {
	return i.ToElasticsearchStatusInProgressOperationsOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsArgs) ToElasticsearchStatusInProgressOperationsOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsOutput)
}

func (i ElasticsearchStatusInProgressOperationsArgs) ToElasticsearchStatusInProgressOperationsPtrOutput() ElasticsearchStatusInProgressOperationsPtrOutput {
	return i.ToElasticsearchStatusInProgressOperationsPtrOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsArgs) ToElasticsearchStatusInProgressOperationsPtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsOutput).ToElasticsearchStatusInProgressOperationsPtrOutputWithContext(ctx)
}

// ElasticsearchStatusInProgressOperationsPtrInput is an input type that accepts ElasticsearchStatusInProgressOperationsArgs, ElasticsearchStatusInProgressOperationsPtr and ElasticsearchStatusInProgressOperationsPtrOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsPtrInput` via:
//
//	        ElasticsearchStatusInProgressOperationsArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchStatusInProgressOperationsPtrInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsPtrOutput() ElasticsearchStatusInProgressOperationsPtrOutput
	ToElasticsearchStatusInProgressOperationsPtrOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsPtrOutput
}

type elasticsearchStatusInProgressOperationsPtrType ElasticsearchStatusInProgressOperationsArgs

func ElasticsearchStatusInProgressOperationsPtr(v *ElasticsearchStatusInProgressOperationsArgs) ElasticsearchStatusInProgressOperationsPtrInput {
	return (*elasticsearchStatusInProgressOperationsPtrType)(v)
}

func (*elasticsearchStatusInProgressOperationsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchStatusInProgressOperations)(nil)).Elem()
}

func (i *elasticsearchStatusInProgressOperationsPtrType) ToElasticsearchStatusInProgressOperationsPtrOutput() ElasticsearchStatusInProgressOperationsPtrOutput {
	return i.ToElasticsearchStatusInProgressOperationsPtrOutputWithContext(context.Background())
}

func (i *elasticsearchStatusInProgressOperationsPtrType) ToElasticsearchStatusInProgressOperationsPtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsPtrOutput)
}

// InProgressOperations represents changes being applied by the operator to the Elasticsearch cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperations)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsOutput) ToElasticsearchStatusInProgressOperationsOutput() ElasticsearchStatusInProgressOperationsOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsOutput) ToElasticsearchStatusInProgressOperationsOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsOutput) ToElasticsearchStatusInProgressOperationsPtrOutput() ElasticsearchStatusInProgressOperationsPtrOutput {
	return o.ToElasticsearchStatusInProgressOperationsPtrOutputWithContext(context.Background())
}

func (o ElasticsearchStatusInProgressOperationsOutput) ToElasticsearchStatusInProgressOperationsPtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchStatusInProgressOperations) *ElasticsearchStatusInProgressOperations {
		return &v
	}).(ElasticsearchStatusInProgressOperationsPtrOutput)
}

// DownscaleOperation provides details about in progress downscale operations.
// **This API is in technical preview and may be changed or removed in a future release.**
func (o ElasticsearchStatusInProgressOperationsOutput) Downscale() ElasticsearchStatusInProgressOperationsDownscaleOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperations) ElasticsearchStatusInProgressOperationsDownscale {
		return v.Downscale
	}).(ElasticsearchStatusInProgressOperationsDownscaleOutput)
}

// UpgradeOperation provides an overview of the pending or in progress changes applied by the operator to update the Elasticsearch nodes in the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
func (o ElasticsearchStatusInProgressOperationsOutput) Upgrade() ElasticsearchStatusInProgressOperationsUpgradeOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperations) ElasticsearchStatusInProgressOperationsUpgrade {
		return v.Upgrade
	}).(ElasticsearchStatusInProgressOperationsUpgradeOutput)
}

// UpscaleOperation provides an overview of in progress changes applied by the operator to add Elasticsearch nodes to the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
func (o ElasticsearchStatusInProgressOperationsOutput) Upscale() ElasticsearchStatusInProgressOperationsUpscaleOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperations) ElasticsearchStatusInProgressOperationsUpscale {
		return v.Upscale
	}).(ElasticsearchStatusInProgressOperationsUpscaleOutput)
}

type ElasticsearchStatusInProgressOperationsPtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchStatusInProgressOperations)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsPtrOutput) ToElasticsearchStatusInProgressOperationsPtrOutput() ElasticsearchStatusInProgressOperationsPtrOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsPtrOutput) ToElasticsearchStatusInProgressOperationsPtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsPtrOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsPtrOutput) Elem() ElasticsearchStatusInProgressOperationsOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperations) ElasticsearchStatusInProgressOperations {
		if v != nil {
			return *v
		}
		var ret ElasticsearchStatusInProgressOperations
		return ret
	}).(ElasticsearchStatusInProgressOperationsOutput)
}

// DownscaleOperation provides details about in progress downscale operations.
// **This API is in technical preview and may be changed or removed in a future release.**
func (o ElasticsearchStatusInProgressOperationsPtrOutput) Downscale() ElasticsearchStatusInProgressOperationsDownscalePtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperations) *ElasticsearchStatusInProgressOperationsDownscale {
		if v == nil {
			return nil
		}
		return &v.Downscale
	}).(ElasticsearchStatusInProgressOperationsDownscalePtrOutput)
}

// UpgradeOperation provides an overview of the pending or in progress changes applied by the operator to update the Elasticsearch nodes in the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
func (o ElasticsearchStatusInProgressOperationsPtrOutput) Upgrade() ElasticsearchStatusInProgressOperationsUpgradePtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperations) *ElasticsearchStatusInProgressOperationsUpgrade {
		if v == nil {
			return nil
		}
		return &v.Upgrade
	}).(ElasticsearchStatusInProgressOperationsUpgradePtrOutput)
}

// UpscaleOperation provides an overview of in progress changes applied by the operator to add Elasticsearch nodes to the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
func (o ElasticsearchStatusInProgressOperationsPtrOutput) Upscale() ElasticsearchStatusInProgressOperationsUpscalePtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperations) *ElasticsearchStatusInProgressOperationsUpscale {
		if v == nil {
			return nil
		}
		return &v.Upscale
	}).(ElasticsearchStatusInProgressOperationsUpscalePtrOutput)
}

// DownscaleOperation provides details about in progress downscale operations.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsDownscale struct {
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// Nodes which are scheduled to be removed from the cluster.
	Nodes []ElasticsearchStatusInProgressOperationsDownscaleNodes `pulumi:"nodes"`
	// Stalled represents a state where no progress can be made.
	// It is only available for clusters managed with the Elasticsearch shutdown API.
	Stalled *bool `pulumi:"stalled"`
}

// ElasticsearchStatusInProgressOperationsDownscaleInput is an input type that accepts ElasticsearchStatusInProgressOperationsDownscaleArgs and ElasticsearchStatusInProgressOperationsDownscaleOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsDownscaleInput` via:
//
//	ElasticsearchStatusInProgressOperationsDownscaleArgs{...}
type ElasticsearchStatusInProgressOperationsDownscaleInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsDownscaleOutput() ElasticsearchStatusInProgressOperationsDownscaleOutput
	ToElasticsearchStatusInProgressOperationsDownscaleOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsDownscaleOutput
}

// DownscaleOperation provides details about in progress downscale operations.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsDownscaleArgs struct {
	LastUpdatedTime pulumi.StringPtrInput `pulumi:"lastUpdatedTime"`
	// Nodes which are scheduled to be removed from the cluster.
	Nodes ElasticsearchStatusInProgressOperationsDownscaleNodesArrayInput `pulumi:"nodes"`
	// Stalled represents a state where no progress can be made.
	// It is only available for clusters managed with the Elasticsearch shutdown API.
	Stalled pulumi.BoolPtrInput `pulumi:"stalled"`
}

func (ElasticsearchStatusInProgressOperationsDownscaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsDownscale)(nil)).Elem()
}

func (i ElasticsearchStatusInProgressOperationsDownscaleArgs) ToElasticsearchStatusInProgressOperationsDownscaleOutput() ElasticsearchStatusInProgressOperationsDownscaleOutput {
	return i.ToElasticsearchStatusInProgressOperationsDownscaleOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsDownscaleArgs) ToElasticsearchStatusInProgressOperationsDownscaleOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsDownscaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsDownscaleOutput)
}

func (i ElasticsearchStatusInProgressOperationsDownscaleArgs) ToElasticsearchStatusInProgressOperationsDownscalePtrOutput() ElasticsearchStatusInProgressOperationsDownscalePtrOutput {
	return i.ToElasticsearchStatusInProgressOperationsDownscalePtrOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsDownscaleArgs) ToElasticsearchStatusInProgressOperationsDownscalePtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsDownscalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsDownscaleOutput).ToElasticsearchStatusInProgressOperationsDownscalePtrOutputWithContext(ctx)
}

// ElasticsearchStatusInProgressOperationsDownscalePtrInput is an input type that accepts ElasticsearchStatusInProgressOperationsDownscaleArgs, ElasticsearchStatusInProgressOperationsDownscalePtr and ElasticsearchStatusInProgressOperationsDownscalePtrOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsDownscalePtrInput` via:
//
//	        ElasticsearchStatusInProgressOperationsDownscaleArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchStatusInProgressOperationsDownscalePtrInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsDownscalePtrOutput() ElasticsearchStatusInProgressOperationsDownscalePtrOutput
	ToElasticsearchStatusInProgressOperationsDownscalePtrOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsDownscalePtrOutput
}

type elasticsearchStatusInProgressOperationsDownscalePtrType ElasticsearchStatusInProgressOperationsDownscaleArgs

func ElasticsearchStatusInProgressOperationsDownscalePtr(v *ElasticsearchStatusInProgressOperationsDownscaleArgs) ElasticsearchStatusInProgressOperationsDownscalePtrInput {
	return (*elasticsearchStatusInProgressOperationsDownscalePtrType)(v)
}

func (*elasticsearchStatusInProgressOperationsDownscalePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchStatusInProgressOperationsDownscale)(nil)).Elem()
}

func (i *elasticsearchStatusInProgressOperationsDownscalePtrType) ToElasticsearchStatusInProgressOperationsDownscalePtrOutput() ElasticsearchStatusInProgressOperationsDownscalePtrOutput {
	return i.ToElasticsearchStatusInProgressOperationsDownscalePtrOutputWithContext(context.Background())
}

func (i *elasticsearchStatusInProgressOperationsDownscalePtrType) ToElasticsearchStatusInProgressOperationsDownscalePtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsDownscalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsDownscalePtrOutput)
}

// DownscaleOperation provides details about in progress downscale operations.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsDownscaleOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsDownscaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsDownscale)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsDownscaleOutput) ToElasticsearchStatusInProgressOperationsDownscaleOutput() ElasticsearchStatusInProgressOperationsDownscaleOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsDownscaleOutput) ToElasticsearchStatusInProgressOperationsDownscaleOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsDownscaleOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsDownscaleOutput) ToElasticsearchStatusInProgressOperationsDownscalePtrOutput() ElasticsearchStatusInProgressOperationsDownscalePtrOutput {
	return o.ToElasticsearchStatusInProgressOperationsDownscalePtrOutputWithContext(context.Background())
}

func (o ElasticsearchStatusInProgressOperationsDownscaleOutput) ToElasticsearchStatusInProgressOperationsDownscalePtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsDownscalePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchStatusInProgressOperationsDownscale) *ElasticsearchStatusInProgressOperationsDownscale {
		return &v
	}).(ElasticsearchStatusInProgressOperationsDownscalePtrOutput)
}

func (o ElasticsearchStatusInProgressOperationsDownscaleOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsDownscale) *string { return v.LastUpdatedTime }).(pulumi.StringPtrOutput)
}

// Nodes which are scheduled to be removed from the cluster.
func (o ElasticsearchStatusInProgressOperationsDownscaleOutput) Nodes() ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsDownscale) []ElasticsearchStatusInProgressOperationsDownscaleNodes {
		return v.Nodes
	}).(ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput)
}

// Stalled represents a state where no progress can be made.
// It is only available for clusters managed with the Elasticsearch shutdown API.
func (o ElasticsearchStatusInProgressOperationsDownscaleOutput) Stalled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsDownscale) *bool { return v.Stalled }).(pulumi.BoolPtrOutput)
}

type ElasticsearchStatusInProgressOperationsDownscalePtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsDownscalePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchStatusInProgressOperationsDownscale)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsDownscalePtrOutput) ToElasticsearchStatusInProgressOperationsDownscalePtrOutput() ElasticsearchStatusInProgressOperationsDownscalePtrOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsDownscalePtrOutput) ToElasticsearchStatusInProgressOperationsDownscalePtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsDownscalePtrOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsDownscalePtrOutput) Elem() ElasticsearchStatusInProgressOperationsDownscaleOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsDownscale) ElasticsearchStatusInProgressOperationsDownscale {
		if v != nil {
			return *v
		}
		var ret ElasticsearchStatusInProgressOperationsDownscale
		return ret
	}).(ElasticsearchStatusInProgressOperationsDownscaleOutput)
}

func (o ElasticsearchStatusInProgressOperationsDownscalePtrOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsDownscale) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdatedTime
	}).(pulumi.StringPtrOutput)
}

// Nodes which are scheduled to be removed from the cluster.
func (o ElasticsearchStatusInProgressOperationsDownscalePtrOutput) Nodes() ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsDownscale) []ElasticsearchStatusInProgressOperationsDownscaleNodes {
		if v == nil {
			return nil
		}
		return v.Nodes
	}).(ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput)
}

// Stalled represents a state where no progress can be made.
// It is only available for clusters managed with the Elasticsearch shutdown API.
func (o ElasticsearchStatusInProgressOperationsDownscalePtrOutput) Stalled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsDownscale) *bool {
		if v == nil {
			return nil
		}
		return v.Stalled
	}).(pulumi.BoolPtrOutput)
}

// DownscaledNode provides an overview of in progress changes applied by the operator to remove Elasticsearch nodes from the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsDownscaleNodes struct {
	// Explanation provides details about an in progress node shutdown. It is only available for clusters managed with the
	// Elasticsearch shutdown API.
	Explanation *string `pulumi:"explanation"`
	// Name of the Elasticsearch node that should be removed.
	Name string `pulumi:"name"`
	// Shutdown status as returned by the Elasticsearch shutdown API.
	// If the Elasticsearch shutdown API is not available, the shutdown status is then inferred from the remaining
	// shards on the nodes, as observed by the operator.
	ShutdownStatus string `pulumi:"shutdownStatus"`
}

// ElasticsearchStatusInProgressOperationsDownscaleNodesInput is an input type that accepts ElasticsearchStatusInProgressOperationsDownscaleNodesArgs and ElasticsearchStatusInProgressOperationsDownscaleNodesOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsDownscaleNodesInput` via:
//
//	ElasticsearchStatusInProgressOperationsDownscaleNodesArgs{...}
type ElasticsearchStatusInProgressOperationsDownscaleNodesInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsDownscaleNodesOutput() ElasticsearchStatusInProgressOperationsDownscaleNodesOutput
	ToElasticsearchStatusInProgressOperationsDownscaleNodesOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsDownscaleNodesOutput
}

// DownscaledNode provides an overview of in progress changes applied by the operator to remove Elasticsearch nodes from the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsDownscaleNodesArgs struct {
	// Explanation provides details about an in progress node shutdown. It is only available for clusters managed with the
	// Elasticsearch shutdown API.
	Explanation pulumi.StringPtrInput `pulumi:"explanation"`
	// Name of the Elasticsearch node that should be removed.
	Name pulumi.StringInput `pulumi:"name"`
	// Shutdown status as returned by the Elasticsearch shutdown API.
	// If the Elasticsearch shutdown API is not available, the shutdown status is then inferred from the remaining
	// shards on the nodes, as observed by the operator.
	ShutdownStatus pulumi.StringInput `pulumi:"shutdownStatus"`
}

func (ElasticsearchStatusInProgressOperationsDownscaleNodesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsDownscaleNodes)(nil)).Elem()
}

func (i ElasticsearchStatusInProgressOperationsDownscaleNodesArgs) ToElasticsearchStatusInProgressOperationsDownscaleNodesOutput() ElasticsearchStatusInProgressOperationsDownscaleNodesOutput {
	return i.ToElasticsearchStatusInProgressOperationsDownscaleNodesOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsDownscaleNodesArgs) ToElasticsearchStatusInProgressOperationsDownscaleNodesOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsDownscaleNodesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsDownscaleNodesOutput)
}

// ElasticsearchStatusInProgressOperationsDownscaleNodesArrayInput is an input type that accepts ElasticsearchStatusInProgressOperationsDownscaleNodesArray and ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsDownscaleNodesArrayInput` via:
//
//	ElasticsearchStatusInProgressOperationsDownscaleNodesArray{ ElasticsearchStatusInProgressOperationsDownscaleNodesArgs{...} }
type ElasticsearchStatusInProgressOperationsDownscaleNodesArrayInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput() ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput
	ToElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput
}

type ElasticsearchStatusInProgressOperationsDownscaleNodesArray []ElasticsearchStatusInProgressOperationsDownscaleNodesInput

func (ElasticsearchStatusInProgressOperationsDownscaleNodesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchStatusInProgressOperationsDownscaleNodes)(nil)).Elem()
}

func (i ElasticsearchStatusInProgressOperationsDownscaleNodesArray) ToElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput() ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput {
	return i.ToElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsDownscaleNodesArray) ToElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput)
}

// DownscaledNode provides an overview of in progress changes applied by the operator to remove Elasticsearch nodes from the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsDownscaleNodesOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsDownscaleNodesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsDownscaleNodes)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsDownscaleNodesOutput) ToElasticsearchStatusInProgressOperationsDownscaleNodesOutput() ElasticsearchStatusInProgressOperationsDownscaleNodesOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsDownscaleNodesOutput) ToElasticsearchStatusInProgressOperationsDownscaleNodesOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsDownscaleNodesOutput {
	return o
}

// Explanation provides details about an in progress node shutdown. It is only available for clusters managed with the
// Elasticsearch shutdown API.
func (o ElasticsearchStatusInProgressOperationsDownscaleNodesOutput) Explanation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsDownscaleNodes) *string { return v.Explanation }).(pulumi.StringPtrOutput)
}

// Name of the Elasticsearch node that should be removed.
func (o ElasticsearchStatusInProgressOperationsDownscaleNodesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsDownscaleNodes) string { return v.Name }).(pulumi.StringOutput)
}

// Shutdown status as returned by the Elasticsearch shutdown API.
// If the Elasticsearch shutdown API is not available, the shutdown status is then inferred from the remaining
// shards on the nodes, as observed by the operator.
func (o ElasticsearchStatusInProgressOperationsDownscaleNodesOutput) ShutdownStatus() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsDownscaleNodes) string { return v.ShutdownStatus }).(pulumi.StringOutput)
}

type ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchStatusInProgressOperationsDownscaleNodes)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput) ToElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput() ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput) ToElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput) Index(i pulumi.IntInput) ElasticsearchStatusInProgressOperationsDownscaleNodesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchStatusInProgressOperationsDownscaleNodes {
		return vs[0].([]ElasticsearchStatusInProgressOperationsDownscaleNodes)[vs[1].(int)]
	}).(ElasticsearchStatusInProgressOperationsDownscaleNodesOutput)
}

// UpgradeOperation provides an overview of the pending or in progress changes applied by the operator to update the Elasticsearch nodes in the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsUpgrade struct {
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// Nodes that must be restarted for upgrade.
	Nodes []ElasticsearchStatusInProgressOperationsUpgradeNodes `pulumi:"nodes"`
}

// ElasticsearchStatusInProgressOperationsUpgradeInput is an input type that accepts ElasticsearchStatusInProgressOperationsUpgradeArgs and ElasticsearchStatusInProgressOperationsUpgradeOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsUpgradeInput` via:
//
//	ElasticsearchStatusInProgressOperationsUpgradeArgs{...}
type ElasticsearchStatusInProgressOperationsUpgradeInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsUpgradeOutput() ElasticsearchStatusInProgressOperationsUpgradeOutput
	ToElasticsearchStatusInProgressOperationsUpgradeOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsUpgradeOutput
}

// UpgradeOperation provides an overview of the pending or in progress changes applied by the operator to update the Elasticsearch nodes in the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsUpgradeArgs struct {
	LastUpdatedTime pulumi.StringPtrInput `pulumi:"lastUpdatedTime"`
	// Nodes that must be restarted for upgrade.
	Nodes ElasticsearchStatusInProgressOperationsUpgradeNodesArrayInput `pulumi:"nodes"`
}

func (ElasticsearchStatusInProgressOperationsUpgradeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpgrade)(nil)).Elem()
}

func (i ElasticsearchStatusInProgressOperationsUpgradeArgs) ToElasticsearchStatusInProgressOperationsUpgradeOutput() ElasticsearchStatusInProgressOperationsUpgradeOutput {
	return i.ToElasticsearchStatusInProgressOperationsUpgradeOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsUpgradeArgs) ToElasticsearchStatusInProgressOperationsUpgradeOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpgradeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsUpgradeOutput)
}

func (i ElasticsearchStatusInProgressOperationsUpgradeArgs) ToElasticsearchStatusInProgressOperationsUpgradePtrOutput() ElasticsearchStatusInProgressOperationsUpgradePtrOutput {
	return i.ToElasticsearchStatusInProgressOperationsUpgradePtrOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsUpgradeArgs) ToElasticsearchStatusInProgressOperationsUpgradePtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpgradePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsUpgradeOutput).ToElasticsearchStatusInProgressOperationsUpgradePtrOutputWithContext(ctx)
}

// ElasticsearchStatusInProgressOperationsUpgradePtrInput is an input type that accepts ElasticsearchStatusInProgressOperationsUpgradeArgs, ElasticsearchStatusInProgressOperationsUpgradePtr and ElasticsearchStatusInProgressOperationsUpgradePtrOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsUpgradePtrInput` via:
//
//	        ElasticsearchStatusInProgressOperationsUpgradeArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchStatusInProgressOperationsUpgradePtrInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsUpgradePtrOutput() ElasticsearchStatusInProgressOperationsUpgradePtrOutput
	ToElasticsearchStatusInProgressOperationsUpgradePtrOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsUpgradePtrOutput
}

type elasticsearchStatusInProgressOperationsUpgradePtrType ElasticsearchStatusInProgressOperationsUpgradeArgs

func ElasticsearchStatusInProgressOperationsUpgradePtr(v *ElasticsearchStatusInProgressOperationsUpgradeArgs) ElasticsearchStatusInProgressOperationsUpgradePtrInput {
	return (*elasticsearchStatusInProgressOperationsUpgradePtrType)(v)
}

func (*elasticsearchStatusInProgressOperationsUpgradePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchStatusInProgressOperationsUpgrade)(nil)).Elem()
}

func (i *elasticsearchStatusInProgressOperationsUpgradePtrType) ToElasticsearchStatusInProgressOperationsUpgradePtrOutput() ElasticsearchStatusInProgressOperationsUpgradePtrOutput {
	return i.ToElasticsearchStatusInProgressOperationsUpgradePtrOutputWithContext(context.Background())
}

func (i *elasticsearchStatusInProgressOperationsUpgradePtrType) ToElasticsearchStatusInProgressOperationsUpgradePtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpgradePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsUpgradePtrOutput)
}

// UpgradeOperation provides an overview of the pending or in progress changes applied by the operator to update the Elasticsearch nodes in the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsUpgradeOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsUpgradeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpgrade)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsUpgradeOutput) ToElasticsearchStatusInProgressOperationsUpgradeOutput() ElasticsearchStatusInProgressOperationsUpgradeOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpgradeOutput) ToElasticsearchStatusInProgressOperationsUpgradeOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpgradeOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpgradeOutput) ToElasticsearchStatusInProgressOperationsUpgradePtrOutput() ElasticsearchStatusInProgressOperationsUpgradePtrOutput {
	return o.ToElasticsearchStatusInProgressOperationsUpgradePtrOutputWithContext(context.Background())
}

func (o ElasticsearchStatusInProgressOperationsUpgradeOutput) ToElasticsearchStatusInProgressOperationsUpgradePtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpgradePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchStatusInProgressOperationsUpgrade) *ElasticsearchStatusInProgressOperationsUpgrade {
		return &v
	}).(ElasticsearchStatusInProgressOperationsUpgradePtrOutput)
}

func (o ElasticsearchStatusInProgressOperationsUpgradeOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpgrade) *string { return v.LastUpdatedTime }).(pulumi.StringPtrOutput)
}

// Nodes that must be restarted for upgrade.
func (o ElasticsearchStatusInProgressOperationsUpgradeOutput) Nodes() ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpgrade) []ElasticsearchStatusInProgressOperationsUpgradeNodes {
		return v.Nodes
	}).(ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput)
}

type ElasticsearchStatusInProgressOperationsUpgradePtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsUpgradePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchStatusInProgressOperationsUpgrade)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsUpgradePtrOutput) ToElasticsearchStatusInProgressOperationsUpgradePtrOutput() ElasticsearchStatusInProgressOperationsUpgradePtrOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpgradePtrOutput) ToElasticsearchStatusInProgressOperationsUpgradePtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpgradePtrOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpgradePtrOutput) Elem() ElasticsearchStatusInProgressOperationsUpgradeOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsUpgrade) ElasticsearchStatusInProgressOperationsUpgrade {
		if v != nil {
			return *v
		}
		var ret ElasticsearchStatusInProgressOperationsUpgrade
		return ret
	}).(ElasticsearchStatusInProgressOperationsUpgradeOutput)
}

func (o ElasticsearchStatusInProgressOperationsUpgradePtrOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsUpgrade) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdatedTime
	}).(pulumi.StringPtrOutput)
}

// Nodes that must be restarted for upgrade.
func (o ElasticsearchStatusInProgressOperationsUpgradePtrOutput) Nodes() ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsUpgrade) []ElasticsearchStatusInProgressOperationsUpgradeNodes {
		if v == nil {
			return nil
		}
		return v.Nodes
	}).(ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput)
}

// UpgradedNode provides details about the status of nodes which are expected to be updated.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsUpgradeNodes struct {
	// Optional message to explain why a node may not be immediately restarted for upgrade.
	Message *string `pulumi:"message"`
	// Name of the Elasticsearch node that should be upgraded.
	Name string `pulumi:"name"`
	// Predicate is the name of the predicate currently preventing this node from being deleted for an upgrade.
	Predicate *string `pulumi:"predicate"`
	// Status states if the node is either in the process of being deleted for an upgrade,
	// or blocked by a predicate or another condition stated in the message field.
	Status string `pulumi:"status"`
}

// ElasticsearchStatusInProgressOperationsUpgradeNodesInput is an input type that accepts ElasticsearchStatusInProgressOperationsUpgradeNodesArgs and ElasticsearchStatusInProgressOperationsUpgradeNodesOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsUpgradeNodesInput` via:
//
//	ElasticsearchStatusInProgressOperationsUpgradeNodesArgs{...}
type ElasticsearchStatusInProgressOperationsUpgradeNodesInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsUpgradeNodesOutput() ElasticsearchStatusInProgressOperationsUpgradeNodesOutput
	ToElasticsearchStatusInProgressOperationsUpgradeNodesOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsUpgradeNodesOutput
}

// UpgradedNode provides details about the status of nodes which are expected to be updated.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsUpgradeNodesArgs struct {
	// Optional message to explain why a node may not be immediately restarted for upgrade.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Name of the Elasticsearch node that should be upgraded.
	Name pulumi.StringInput `pulumi:"name"`
	// Predicate is the name of the predicate currently preventing this node from being deleted for an upgrade.
	Predicate pulumi.StringPtrInput `pulumi:"predicate"`
	// Status states if the node is either in the process of being deleted for an upgrade,
	// or blocked by a predicate or another condition stated in the message field.
	Status pulumi.StringInput `pulumi:"status"`
}

func (ElasticsearchStatusInProgressOperationsUpgradeNodesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpgradeNodes)(nil)).Elem()
}

func (i ElasticsearchStatusInProgressOperationsUpgradeNodesArgs) ToElasticsearchStatusInProgressOperationsUpgradeNodesOutput() ElasticsearchStatusInProgressOperationsUpgradeNodesOutput {
	return i.ToElasticsearchStatusInProgressOperationsUpgradeNodesOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsUpgradeNodesArgs) ToElasticsearchStatusInProgressOperationsUpgradeNodesOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpgradeNodesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsUpgradeNodesOutput)
}

// ElasticsearchStatusInProgressOperationsUpgradeNodesArrayInput is an input type that accepts ElasticsearchStatusInProgressOperationsUpgradeNodesArray and ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsUpgradeNodesArrayInput` via:
//
//	ElasticsearchStatusInProgressOperationsUpgradeNodesArray{ ElasticsearchStatusInProgressOperationsUpgradeNodesArgs{...} }
type ElasticsearchStatusInProgressOperationsUpgradeNodesArrayInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput() ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput
	ToElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput
}

type ElasticsearchStatusInProgressOperationsUpgradeNodesArray []ElasticsearchStatusInProgressOperationsUpgradeNodesInput

func (ElasticsearchStatusInProgressOperationsUpgradeNodesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchStatusInProgressOperationsUpgradeNodes)(nil)).Elem()
}

func (i ElasticsearchStatusInProgressOperationsUpgradeNodesArray) ToElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput() ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput {
	return i.ToElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsUpgradeNodesArray) ToElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput)
}

// UpgradedNode provides details about the status of nodes which are expected to be updated.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsUpgradeNodesOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsUpgradeNodesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpgradeNodes)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsUpgradeNodesOutput) ToElasticsearchStatusInProgressOperationsUpgradeNodesOutput() ElasticsearchStatusInProgressOperationsUpgradeNodesOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpgradeNodesOutput) ToElasticsearchStatusInProgressOperationsUpgradeNodesOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpgradeNodesOutput {
	return o
}

// Optional message to explain why a node may not be immediately restarted for upgrade.
func (o ElasticsearchStatusInProgressOperationsUpgradeNodesOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpgradeNodes) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Name of the Elasticsearch node that should be upgraded.
func (o ElasticsearchStatusInProgressOperationsUpgradeNodesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpgradeNodes) string { return v.Name }).(pulumi.StringOutput)
}

// Predicate is the name of the predicate currently preventing this node from being deleted for an upgrade.
func (o ElasticsearchStatusInProgressOperationsUpgradeNodesOutput) Predicate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpgradeNodes) *string { return v.Predicate }).(pulumi.StringPtrOutput)
}

// Status states if the node is either in the process of being deleted for an upgrade,
// or blocked by a predicate or another condition stated in the message field.
func (o ElasticsearchStatusInProgressOperationsUpgradeNodesOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpgradeNodes) string { return v.Status }).(pulumi.StringOutput)
}

type ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchStatusInProgressOperationsUpgradeNodes)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput) ToElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput() ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput) ToElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput) Index(i pulumi.IntInput) ElasticsearchStatusInProgressOperationsUpgradeNodesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchStatusInProgressOperationsUpgradeNodes {
		return vs[0].([]ElasticsearchStatusInProgressOperationsUpgradeNodes)[vs[1].(int)]
	}).(ElasticsearchStatusInProgressOperationsUpgradeNodesOutput)
}

// UpscaleOperation provides an overview of in progress changes applied by the operator to add Elasticsearch nodes to the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsUpscale struct {
	LastUpdatedTime *string `pulumi:"lastUpdatedTime"`
	// Nodes expected to be added by the operator.
	Nodes []ElasticsearchStatusInProgressOperationsUpscaleNodes `pulumi:"nodes"`
}

// ElasticsearchStatusInProgressOperationsUpscaleInput is an input type that accepts ElasticsearchStatusInProgressOperationsUpscaleArgs and ElasticsearchStatusInProgressOperationsUpscaleOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsUpscaleInput` via:
//
//	ElasticsearchStatusInProgressOperationsUpscaleArgs{...}
type ElasticsearchStatusInProgressOperationsUpscaleInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsUpscaleOutput() ElasticsearchStatusInProgressOperationsUpscaleOutput
	ToElasticsearchStatusInProgressOperationsUpscaleOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsUpscaleOutput
}

// UpscaleOperation provides an overview of in progress changes applied by the operator to add Elasticsearch nodes to the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsUpscaleArgs struct {
	LastUpdatedTime pulumi.StringPtrInput `pulumi:"lastUpdatedTime"`
	// Nodes expected to be added by the operator.
	Nodes ElasticsearchStatusInProgressOperationsUpscaleNodesArrayInput `pulumi:"nodes"`
}

func (ElasticsearchStatusInProgressOperationsUpscaleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpscale)(nil)).Elem()
}

func (i ElasticsearchStatusInProgressOperationsUpscaleArgs) ToElasticsearchStatusInProgressOperationsUpscaleOutput() ElasticsearchStatusInProgressOperationsUpscaleOutput {
	return i.ToElasticsearchStatusInProgressOperationsUpscaleOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsUpscaleArgs) ToElasticsearchStatusInProgressOperationsUpscaleOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpscaleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsUpscaleOutput)
}

func (i ElasticsearchStatusInProgressOperationsUpscaleArgs) ToElasticsearchStatusInProgressOperationsUpscalePtrOutput() ElasticsearchStatusInProgressOperationsUpscalePtrOutput {
	return i.ToElasticsearchStatusInProgressOperationsUpscalePtrOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsUpscaleArgs) ToElasticsearchStatusInProgressOperationsUpscalePtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpscalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsUpscaleOutput).ToElasticsearchStatusInProgressOperationsUpscalePtrOutputWithContext(ctx)
}

// ElasticsearchStatusInProgressOperationsUpscalePtrInput is an input type that accepts ElasticsearchStatusInProgressOperationsUpscaleArgs, ElasticsearchStatusInProgressOperationsUpscalePtr and ElasticsearchStatusInProgressOperationsUpscalePtrOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsUpscalePtrInput` via:
//
//	        ElasticsearchStatusInProgressOperationsUpscaleArgs{...}
//
//	or:
//
//	        nil
type ElasticsearchStatusInProgressOperationsUpscalePtrInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsUpscalePtrOutput() ElasticsearchStatusInProgressOperationsUpscalePtrOutput
	ToElasticsearchStatusInProgressOperationsUpscalePtrOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsUpscalePtrOutput
}

type elasticsearchStatusInProgressOperationsUpscalePtrType ElasticsearchStatusInProgressOperationsUpscaleArgs

func ElasticsearchStatusInProgressOperationsUpscalePtr(v *ElasticsearchStatusInProgressOperationsUpscaleArgs) ElasticsearchStatusInProgressOperationsUpscalePtrInput {
	return (*elasticsearchStatusInProgressOperationsUpscalePtrType)(v)
}

func (*elasticsearchStatusInProgressOperationsUpscalePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchStatusInProgressOperationsUpscale)(nil)).Elem()
}

func (i *elasticsearchStatusInProgressOperationsUpscalePtrType) ToElasticsearchStatusInProgressOperationsUpscalePtrOutput() ElasticsearchStatusInProgressOperationsUpscalePtrOutput {
	return i.ToElasticsearchStatusInProgressOperationsUpscalePtrOutputWithContext(context.Background())
}

func (i *elasticsearchStatusInProgressOperationsUpscalePtrType) ToElasticsearchStatusInProgressOperationsUpscalePtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpscalePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsUpscalePtrOutput)
}

// UpscaleOperation provides an overview of in progress changes applied by the operator to add Elasticsearch nodes to the cluster.
// **This API is in technical preview and may be changed or removed in a future release.**
type ElasticsearchStatusInProgressOperationsUpscaleOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsUpscaleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpscale)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsUpscaleOutput) ToElasticsearchStatusInProgressOperationsUpscaleOutput() ElasticsearchStatusInProgressOperationsUpscaleOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpscaleOutput) ToElasticsearchStatusInProgressOperationsUpscaleOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpscaleOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpscaleOutput) ToElasticsearchStatusInProgressOperationsUpscalePtrOutput() ElasticsearchStatusInProgressOperationsUpscalePtrOutput {
	return o.ToElasticsearchStatusInProgressOperationsUpscalePtrOutputWithContext(context.Background())
}

func (o ElasticsearchStatusInProgressOperationsUpscaleOutput) ToElasticsearchStatusInProgressOperationsUpscalePtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpscalePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticsearchStatusInProgressOperationsUpscale) *ElasticsearchStatusInProgressOperationsUpscale {
		return &v
	}).(ElasticsearchStatusInProgressOperationsUpscalePtrOutput)
}

func (o ElasticsearchStatusInProgressOperationsUpscaleOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpscale) *string { return v.LastUpdatedTime }).(pulumi.StringPtrOutput)
}

// Nodes expected to be added by the operator.
func (o ElasticsearchStatusInProgressOperationsUpscaleOutput) Nodes() ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpscale) []ElasticsearchStatusInProgressOperationsUpscaleNodes {
		return v.Nodes
	}).(ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput)
}

type ElasticsearchStatusInProgressOperationsUpscalePtrOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsUpscalePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchStatusInProgressOperationsUpscale)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsUpscalePtrOutput) ToElasticsearchStatusInProgressOperationsUpscalePtrOutput() ElasticsearchStatusInProgressOperationsUpscalePtrOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpscalePtrOutput) ToElasticsearchStatusInProgressOperationsUpscalePtrOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpscalePtrOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpscalePtrOutput) Elem() ElasticsearchStatusInProgressOperationsUpscaleOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsUpscale) ElasticsearchStatusInProgressOperationsUpscale {
		if v != nil {
			return *v
		}
		var ret ElasticsearchStatusInProgressOperationsUpscale
		return ret
	}).(ElasticsearchStatusInProgressOperationsUpscaleOutput)
}

func (o ElasticsearchStatusInProgressOperationsUpscalePtrOutput) LastUpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsUpscale) *string {
		if v == nil {
			return nil
		}
		return v.LastUpdatedTime
	}).(pulumi.StringPtrOutput)
}

// Nodes expected to be added by the operator.
func (o ElasticsearchStatusInProgressOperationsUpscalePtrOutput) Nodes() ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput {
	return o.ApplyT(func(v *ElasticsearchStatusInProgressOperationsUpscale) []ElasticsearchStatusInProgressOperationsUpscaleNodes {
		if v == nil {
			return nil
		}
		return v.Nodes
	}).(ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput)
}

type ElasticsearchStatusInProgressOperationsUpscaleNodes struct {
	// Optional message to explain why a node may not be immediately added.
	Message *string `pulumi:"message"`
	// Name of the Elasticsearch node that should be added to the cluster.
	Name string `pulumi:"name"`
	// NewNodeStatus states if a new node is being created, or if the upscale is delayed.
	Status string `pulumi:"status"`
}

// ElasticsearchStatusInProgressOperationsUpscaleNodesInput is an input type that accepts ElasticsearchStatusInProgressOperationsUpscaleNodesArgs and ElasticsearchStatusInProgressOperationsUpscaleNodesOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsUpscaleNodesInput` via:
//
//	ElasticsearchStatusInProgressOperationsUpscaleNodesArgs{...}
type ElasticsearchStatusInProgressOperationsUpscaleNodesInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsUpscaleNodesOutput() ElasticsearchStatusInProgressOperationsUpscaleNodesOutput
	ToElasticsearchStatusInProgressOperationsUpscaleNodesOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsUpscaleNodesOutput
}

type ElasticsearchStatusInProgressOperationsUpscaleNodesArgs struct {
	// Optional message to explain why a node may not be immediately added.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Name of the Elasticsearch node that should be added to the cluster.
	Name pulumi.StringInput `pulumi:"name"`
	// NewNodeStatus states if a new node is being created, or if the upscale is delayed.
	Status pulumi.StringInput `pulumi:"status"`
}

func (ElasticsearchStatusInProgressOperationsUpscaleNodesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpscaleNodes)(nil)).Elem()
}

func (i ElasticsearchStatusInProgressOperationsUpscaleNodesArgs) ToElasticsearchStatusInProgressOperationsUpscaleNodesOutput() ElasticsearchStatusInProgressOperationsUpscaleNodesOutput {
	return i.ToElasticsearchStatusInProgressOperationsUpscaleNodesOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsUpscaleNodesArgs) ToElasticsearchStatusInProgressOperationsUpscaleNodesOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpscaleNodesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsUpscaleNodesOutput)
}

// ElasticsearchStatusInProgressOperationsUpscaleNodesArrayInput is an input type that accepts ElasticsearchStatusInProgressOperationsUpscaleNodesArray and ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput values.
// You can construct a concrete instance of `ElasticsearchStatusInProgressOperationsUpscaleNodesArrayInput` via:
//
//	ElasticsearchStatusInProgressOperationsUpscaleNodesArray{ ElasticsearchStatusInProgressOperationsUpscaleNodesArgs{...} }
type ElasticsearchStatusInProgressOperationsUpscaleNodesArrayInput interface {
	pulumi.Input

	ToElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput() ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput
	ToElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutputWithContext(context.Context) ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput
}

type ElasticsearchStatusInProgressOperationsUpscaleNodesArray []ElasticsearchStatusInProgressOperationsUpscaleNodesInput

func (ElasticsearchStatusInProgressOperationsUpscaleNodesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchStatusInProgressOperationsUpscaleNodes)(nil)).Elem()
}

func (i ElasticsearchStatusInProgressOperationsUpscaleNodesArray) ToElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput() ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput {
	return i.ToElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutputWithContext(context.Background())
}

func (i ElasticsearchStatusInProgressOperationsUpscaleNodesArray) ToElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput)
}

type ElasticsearchStatusInProgressOperationsUpscaleNodesOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsUpscaleNodesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpscaleNodes)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsUpscaleNodesOutput) ToElasticsearchStatusInProgressOperationsUpscaleNodesOutput() ElasticsearchStatusInProgressOperationsUpscaleNodesOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpscaleNodesOutput) ToElasticsearchStatusInProgressOperationsUpscaleNodesOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpscaleNodesOutput {
	return o
}

// Optional message to explain why a node may not be immediately added.
func (o ElasticsearchStatusInProgressOperationsUpscaleNodesOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpscaleNodes) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Name of the Elasticsearch node that should be added to the cluster.
func (o ElasticsearchStatusInProgressOperationsUpscaleNodesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpscaleNodes) string { return v.Name }).(pulumi.StringOutput)
}

// NewNodeStatus states if a new node is being created, or if the upscale is delayed.
func (o ElasticsearchStatusInProgressOperationsUpscaleNodesOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticsearchStatusInProgressOperationsUpscaleNodes) string { return v.Status }).(pulumi.StringOutput)
}

type ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticsearchStatusInProgressOperationsUpscaleNodes)(nil)).Elem()
}

func (o ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput) ToElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput() ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput) ToElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutputWithContext(ctx context.Context) ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput {
	return o
}

func (o ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput) Index(i pulumi.IntInput) ElasticsearchStatusInProgressOperationsUpscaleNodesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticsearchStatusInProgressOperationsUpscaleNodes {
		return vs[0].([]ElasticsearchStatusInProgressOperationsUpscaleNodes)[vs[1].(int)]
	}).(ElasticsearchStatusInProgressOperationsUpscaleNodesOutput)
}

// AssociationStatusMap is the map of association's namespaced name string to its AssociationStatus. For resources that
// have a single Association of a given type (for ex. single ES reference), this map contains a single entry.
type ElasticsearchStatusMonitoringAssociationStatus struct {
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecInput)(nil)).Elem(), ElasticsearchSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPtrInput)(nil)).Elem(), ElasticsearchSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecAuthInput)(nil)).Elem(), ElasticsearchSpecAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecAuthPtrInput)(nil)).Elem(), ElasticsearchSpecAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecAuthFileRealmInput)(nil)).Elem(), ElasticsearchSpecAuthFileRealmArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecAuthFileRealmArrayInput)(nil)).Elem(), ElasticsearchSpecAuthFileRealmArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecAuthRolesInput)(nil)).Elem(), ElasticsearchSpecAuthRolesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecAuthRolesArrayInput)(nil)).Elem(), ElasticsearchSpecAuthRolesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpInput)(nil)).Elem(), ElasticsearchSpecHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpPtrInput)(nil)).Elem(), ElasticsearchSpecHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceInput)(nil)).Elem(), ElasticsearchSpecHttpServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServicePtrInput)(nil)).Elem(), ElasticsearchSpecHttpServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceMetadataInput)(nil)).Elem(), ElasticsearchSpecHttpServiceMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceMetadataPtrInput)(nil)).Elem(), ElasticsearchSpecHttpServiceMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecInput)(nil)).Elem(), ElasticsearchSpecHttpServiceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecPtrInput)(nil)).Elem(), ElasticsearchSpecHttpServiceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecPortsInput)(nil)).Elem(), ElasticsearchSpecHttpServiceSpecPortsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecPortsArrayInput)(nil)).Elem(), ElasticsearchSpecHttpServiceSpecPortsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecSessionAffinityConfigInput)(nil)).Elem(), ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrInput)(nil)).Elem(), ElasticsearchSpecHttpServiceSpecSessionAffinityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpInput)(nil)).Elem(), ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrInput)(nil)).Elem(), ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpTlsInput)(nil)).Elem(), ElasticsearchSpecHttpTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpTlsPtrInput)(nil)).Elem(), ElasticsearchSpecHttpTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpTlsCertificateInput)(nil)).Elem(), ElasticsearchSpecHttpTlsCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpTlsCertificatePtrInput)(nil)).Elem(), ElasticsearchSpecHttpTlsCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpTlsSelfSignedCertificateInput)(nil)).Elem(), ElasticsearchSpecHttpTlsSelfSignedCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpTlsSelfSignedCertificatePtrInput)(nil)).Elem(), ElasticsearchSpecHttpTlsSelfSignedCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput)(nil)).Elem(), ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput)(nil)).Elem(), ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecMonitoringInput)(nil)).Elem(), ElasticsearchSpecMonitoringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecMonitoringPtrInput)(nil)).Elem(), ElasticsearchSpecMonitoringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecMonitoringLogsInput)(nil)).Elem(), ElasticsearchSpecMonitoringLogsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecMonitoringLogsPtrInput)(nil)).Elem(), ElasticsearchSpecMonitoringLogsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecMonitoringLogsElasticsearchRefsInput)(nil)).Elem(), ElasticsearchSpecMonitoringLogsElasticsearchRefsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayInput)(nil)).Elem(), ElasticsearchSpecMonitoringLogsElasticsearchRefsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecMonitoringMetricsInput)(nil)).Elem(), ElasticsearchSpecMonitoringMetricsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecMonitoringMetricsPtrInput)(nil)).Elem(), ElasticsearchSpecMonitoringMetricsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecMonitoringMetricsElasticsearchRefsInput)(nil)).Elem(), ElasticsearchSpecMonitoringMetricsElasticsearchRefsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayInput)(nil)).Elem(), ElasticsearchSpecMonitoringMetricsElasticsearchRefsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsInput)(nil)).Elem(), ElasticsearchSpecNodeSetsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsArrayInput)(nil)).Elem(), ElasticsearchSpecNodeSetsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayInput)(nil)).Elem(), ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetInput)(nil)).Elem(), ElasticsearchSpecPodDisruptionBudgetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetPtrInput)(nil)).Elem(), ElasticsearchSpecPodDisruptionBudgetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetMetadataInput)(nil)).Elem(), ElasticsearchSpecPodDisruptionBudgetMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetMetadataPtrInput)(nil)).Elem(), ElasticsearchSpecPodDisruptionBudgetMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecInput)(nil)).Elem(), ElasticsearchSpecPodDisruptionBudgetSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecPtrInput)(nil)).Elem(), ElasticsearchSpecPodDisruptionBudgetSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecSelectorInput)(nil)).Elem(), ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrInput)(nil)).Elem(), ElasticsearchSpecPodDisruptionBudgetSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsInput)(nil)).Elem(), ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayInput)(nil)).Elem(), ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecRemoteClustersInput)(nil)).Elem(), ElasticsearchSpecRemoteClustersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecRemoteClustersArrayInput)(nil)).Elem(), ElasticsearchSpecRemoteClustersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecRemoteClustersElasticsearchRefInput)(nil)).Elem(), ElasticsearchSpecRemoteClustersElasticsearchRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecRemoteClustersElasticsearchRefPtrInput)(nil)).Elem(), ElasticsearchSpecRemoteClustersElasticsearchRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecSecureSettingsInput)(nil)).Elem(), ElasticsearchSpecSecureSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecSecureSettingsArrayInput)(nil)).Elem(), ElasticsearchSpecSecureSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecSecureSettingsEntriesInput)(nil)).Elem(), ElasticsearchSpecSecureSettingsEntriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecSecureSettingsEntriesArrayInput)(nil)).Elem(), ElasticsearchSpecSecureSettingsEntriesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportInput)(nil)).Elem(), ElasticsearchSpecTransportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportPtrInput)(nil)).Elem(), ElasticsearchSpecTransportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceInput)(nil)).Elem(), ElasticsearchSpecTransportServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServicePtrInput)(nil)).Elem(), ElasticsearchSpecTransportServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceMetadataInput)(nil)).Elem(), ElasticsearchSpecTransportServiceMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceMetadataPtrInput)(nil)).Elem(), ElasticsearchSpecTransportServiceMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecInput)(nil)).Elem(), ElasticsearchSpecTransportServiceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecPtrInput)(nil)).Elem(), ElasticsearchSpecTransportServiceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecPortsInput)(nil)).Elem(), ElasticsearchSpecTransportServiceSpecPortsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecPortsArrayInput)(nil)).Elem(), ElasticsearchSpecTransportServiceSpecPortsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecSessionAffinityConfigInput)(nil)).Elem(), ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrInput)(nil)).Elem(), ElasticsearchSpecTransportServiceSpecSessionAffinityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpInput)(nil)).Elem(), ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrInput)(nil)).Elem(), ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportTlsInput)(nil)).Elem(), ElasticsearchSpecTransportTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportTlsPtrInput)(nil)).Elem(), ElasticsearchSpecTransportTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportTlsCertificateInput)(nil)).Elem(), ElasticsearchSpecTransportTlsCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportTlsCertificatePtrInput)(nil)).Elem(), ElasticsearchSpecTransportTlsCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportTlsCertificateAuthoritiesInput)(nil)).Elem(), ElasticsearchSpecTransportTlsCertificateAuthoritiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrInput)(nil)).Elem(), ElasticsearchSpecTransportTlsCertificateAuthoritiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportTlsSelfSignedCertificatesInput)(nil)).Elem(), ElasticsearchSpecTransportTlsSelfSignedCertificatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrInput)(nil)).Elem(), ElasticsearchSpecTransportTlsSelfSignedCertificatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportTlsSubjectAltNamesInput)(nil)).Elem(), ElasticsearchSpecTransportTlsSubjectAltNamesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecTransportTlsSubjectAltNamesArrayInput)(nil)).Elem(), ElasticsearchSpecTransportTlsSubjectAltNamesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecUpdateStrategyInput)(nil)).Elem(), ElasticsearchSpecUpdateStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecUpdateStrategyPtrInput)(nil)).Elem(), ElasticsearchSpecUpdateStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecUpdateStrategyChangeBudgetInput)(nil)).Elem(), ElasticsearchSpecUpdateStrategyChangeBudgetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSpecUpdateStrategyChangeBudgetPtrInput)(nil)).Elem(), ElasticsearchSpecUpdateStrategyChangeBudgetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInput)(nil)).Elem(), ElasticsearchStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusPtrInput)(nil)).Elem(), ElasticsearchStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusConditionsInput)(nil)).Elem(), ElasticsearchStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusConditionsArrayInput)(nil)).Elem(), ElasticsearchStatusConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsPtrInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsDownscaleInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsDownscaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsDownscalePtrInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsDownscaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsDownscaleNodesInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsDownscaleNodesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsDownscaleNodesArrayInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsDownscaleNodesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpgradeInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsUpgradeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpgradePtrInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsUpgradeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpgradeNodesInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsUpgradeNodesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpgradeNodesArrayInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsUpgradeNodesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpscaleInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsUpscaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpscalePtrInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsUpscaleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpscaleNodesInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsUpscaleNodesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchStatusInProgressOperationsUpscaleNodesArrayInput)(nil)).Elem(), ElasticsearchStatusInProgressOperationsUpscaleNodesArray{})
	pulumi.RegisterOutputType(ElasticsearchSpecOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecAuthOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecAuthPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecAuthFileRealmOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecAuthFileRealmArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecAuthRolesOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecAuthRolesArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServicePtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceMetadataOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceMetadataPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceSpecOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceSpecPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceSpecPortsOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceSpecPortsArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpTlsOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpTlsPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpTlsCertificateOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpTlsCertificatePtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpTlsSelfSignedCertificateOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpTlsSelfSignedCertificatePtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecMonitoringOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecMonitoringPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecMonitoringLogsOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecMonitoringLogsPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecMonitoringLogsElasticsearchRefsOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecMonitoringLogsElasticsearchRefsArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecMonitoringMetricsOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecMonitoringMetricsPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecMonitoringMetricsElasticsearchRefsOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecMonitoringMetricsElasticsearchRefsArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesMetadataPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourcePtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecDataSourceRefPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecResourcesPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecNodeSetsVolumeClaimTemplatesSpecSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPodDisruptionBudgetOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPodDisruptionBudgetPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPodDisruptionBudgetMetadataOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPodDisruptionBudgetMetadataPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPodDisruptionBudgetSpecOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPodDisruptionBudgetSpecPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPodDisruptionBudgetSpecSelectorOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPodDisruptionBudgetSpecSelectorPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecPodDisruptionBudgetSpecSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecRemoteClustersOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecRemoteClustersArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecRemoteClustersElasticsearchRefOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecRemoteClustersElasticsearchRefPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecSecureSettingsOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecSecureSettingsArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecSecureSettingsEntriesOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecSecureSettingsEntriesArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServicePtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceMetadataOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceMetadataPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceSpecOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceSpecPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceSpecPortsOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceSpecPortsArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportServiceSpecSessionAffinityConfigClientIpPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportTlsOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportTlsPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportTlsCertificateOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportTlsCertificatePtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportTlsCertificateAuthoritiesOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportTlsCertificateAuthoritiesPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportTlsSelfSignedCertificatesOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportTlsSelfSignedCertificatesPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportTlsSubjectAltNamesOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecTransportTlsSubjectAltNamesArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecUpdateStrategyOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecUpdateStrategyPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecUpdateStrategyChangeBudgetOutput{})
	pulumi.RegisterOutputType(ElasticsearchSpecUpdateStrategyChangeBudgetPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusConditionsOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsPtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsDownscaleOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsDownscalePtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsDownscaleNodesOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsDownscaleNodesArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsUpgradeOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsUpgradePtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsUpgradeNodesOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsUpgradeNodesArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsUpscaleOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsUpscalePtrOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsUpscaleNodesOutput{})
	pulumi.RegisterOutputType(ElasticsearchStatusInProgressOperationsUpscaleNodesArrayOutput{})
}
