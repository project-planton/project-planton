// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Elasticsearch struct {
	pulumi.CustomResourceState
}

// NewElasticsearch registers a new resource with the given unique name, arguments, and options.
func NewElasticsearch(ctx *pulumi.Context,
	name string, args *ElasticsearchArgs, opts ...pulumi.ResourceOption) (*Elasticsearch, error) {
	if args == nil {
		args = &ElasticsearchArgs{}
	}

	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Elasticsearch
	err := ctx.RegisterResource("kubernetes:elasticsearch.k8s.elastic.co/v1alpha1:Elasticsearch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticsearch gets an existing Elasticsearch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticsearch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticsearchState, opts ...pulumi.ResourceOption) (*Elasticsearch, error) {
	var resource Elasticsearch
	err := ctx.ReadResource("kubernetes:elasticsearch.k8s.elastic.co/v1alpha1:Elasticsearch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Elasticsearch resources.
type elasticsearchState struct {
}

type ElasticsearchState struct {
}

func (ElasticsearchState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchState)(nil)).Elem()
}

type elasticsearchArgs struct {
}

// The set of arguments for constructing a Elasticsearch resource.
type ElasticsearchArgs struct {
}

func (ElasticsearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchArgs)(nil)).Elem()
}

type ElasticsearchInput interface {
	pulumi.Input

	ToElasticsearchOutput() ElasticsearchOutput
	ToElasticsearchOutputWithContext(ctx context.Context) ElasticsearchOutput
}

func (*Elasticsearch) ElementType() reflect.Type {
	return reflect.TypeOf((**Elasticsearch)(nil)).Elem()
}

func (i *Elasticsearch) ToElasticsearchOutput() ElasticsearchOutput {
	return i.ToElasticsearchOutputWithContext(context.Background())
}

func (i *Elasticsearch) ToElasticsearchOutputWithContext(ctx context.Context) ElasticsearchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchOutput)
}

type ElasticsearchOutput struct{ *pulumi.OutputState }

func (ElasticsearchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Elasticsearch)(nil)).Elem()
}

func (o ElasticsearchOutput) ToElasticsearchOutput() ElasticsearchOutput {
	return o
}

func (o ElasticsearchOutput) ToElasticsearchOutputWithContext(ctx context.Context) ElasticsearchOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchInput)(nil)).Elem(), &Elasticsearch{})
	pulumi.RegisterOutputType(ElasticsearchOutput{})
}
