// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

type TelemetryType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Telemetry configuration for workloads. See more details at: https://istio.io/docs/reference/config/telemetry.html
	Spec   *TelemetrySpec         `pulumi:"spec"`
	Status map[string]interface{} `pulumi:"status"`
}

// Telemetry configuration for workloads. See more details at: https://istio.io/docs/reference/config/telemetry.html
type TelemetrySpec struct {
	// Optional.
	AccessLogging []TelemetrySpecAccessLogging `pulumi:"accessLogging"`
	// Optional.
	Metrics []TelemetrySpecMetrics `pulumi:"metrics"`
	// Optional.
	Selector  *TelemetrySpecSelector  `pulumi:"selector"`
	TargetRef *TelemetrySpecTargetRef `pulumi:"targetRef"`
	// Optional.
	TargetRefs []TelemetrySpecTargetRefs `pulumi:"targetRefs"`
	// Optional.
	Tracing []TelemetrySpecTracing `pulumi:"tracing"`
}

// TelemetrySpecInput is an input type that accepts TelemetrySpecArgs and TelemetrySpecOutput values.
// You can construct a concrete instance of `TelemetrySpecInput` via:
//
//	TelemetrySpecArgs{...}
type TelemetrySpecInput interface {
	pulumi.Input

	ToTelemetrySpecOutput() TelemetrySpecOutput
	ToTelemetrySpecOutputWithContext(context.Context) TelemetrySpecOutput
}

// Telemetry configuration for workloads. See more details at: https://istio.io/docs/reference/config/telemetry.html
type TelemetrySpecArgs struct {
	// Optional.
	AccessLogging TelemetrySpecAccessLoggingArrayInput `pulumi:"accessLogging"`
	// Optional.
	Metrics TelemetrySpecMetricsArrayInput `pulumi:"metrics"`
	// Optional.
	Selector  TelemetrySpecSelectorPtrInput  `pulumi:"selector"`
	TargetRef TelemetrySpecTargetRefPtrInput `pulumi:"targetRef"`
	// Optional.
	TargetRefs TelemetrySpecTargetRefsArrayInput `pulumi:"targetRefs"`
	// Optional.
	Tracing TelemetrySpecTracingArrayInput `pulumi:"tracing"`
}

func (TelemetrySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpec)(nil)).Elem()
}

func (i TelemetrySpecArgs) ToTelemetrySpecOutput() TelemetrySpecOutput {
	return i.ToTelemetrySpecOutputWithContext(context.Background())
}

func (i TelemetrySpecArgs) ToTelemetrySpecOutputWithContext(ctx context.Context) TelemetrySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecOutput)
}

func (i TelemetrySpecArgs) ToTelemetrySpecPtrOutput() TelemetrySpecPtrOutput {
	return i.ToTelemetrySpecPtrOutputWithContext(context.Background())
}

func (i TelemetrySpecArgs) ToTelemetrySpecPtrOutputWithContext(ctx context.Context) TelemetrySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecOutput).ToTelemetrySpecPtrOutputWithContext(ctx)
}

// TelemetrySpecPtrInput is an input type that accepts TelemetrySpecArgs, TelemetrySpecPtr and TelemetrySpecPtrOutput values.
// You can construct a concrete instance of `TelemetrySpecPtrInput` via:
//
//	        TelemetrySpecArgs{...}
//
//	or:
//
//	        nil
type TelemetrySpecPtrInput interface {
	pulumi.Input

	ToTelemetrySpecPtrOutput() TelemetrySpecPtrOutput
	ToTelemetrySpecPtrOutputWithContext(context.Context) TelemetrySpecPtrOutput
}

type telemetrySpecPtrType TelemetrySpecArgs

func TelemetrySpecPtr(v *TelemetrySpecArgs) TelemetrySpecPtrInput {
	return (*telemetrySpecPtrType)(v)
}

func (*telemetrySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpec)(nil)).Elem()
}

func (i *telemetrySpecPtrType) ToTelemetrySpecPtrOutput() TelemetrySpecPtrOutput {
	return i.ToTelemetrySpecPtrOutputWithContext(context.Background())
}

func (i *telemetrySpecPtrType) ToTelemetrySpecPtrOutputWithContext(ctx context.Context) TelemetrySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecPtrOutput)
}

// Telemetry configuration for workloads. See more details at: https://istio.io/docs/reference/config/telemetry.html
type TelemetrySpecOutput struct{ *pulumi.OutputState }

func (TelemetrySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpec)(nil)).Elem()
}

func (o TelemetrySpecOutput) ToTelemetrySpecOutput() TelemetrySpecOutput {
	return o
}

func (o TelemetrySpecOutput) ToTelemetrySpecOutputWithContext(ctx context.Context) TelemetrySpecOutput {
	return o
}

func (o TelemetrySpecOutput) ToTelemetrySpecPtrOutput() TelemetrySpecPtrOutput {
	return o.ToTelemetrySpecPtrOutputWithContext(context.Background())
}

func (o TelemetrySpecOutput) ToTelemetrySpecPtrOutputWithContext(ctx context.Context) TelemetrySpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TelemetrySpec) *TelemetrySpec {
		return &v
	}).(TelemetrySpecPtrOutput)
}

// Optional.
func (o TelemetrySpecOutput) AccessLogging() TelemetrySpecAccessLoggingArrayOutput {
	return o.ApplyT(func(v TelemetrySpec) []TelemetrySpecAccessLogging { return v.AccessLogging }).(TelemetrySpecAccessLoggingArrayOutput)
}

// Optional.
func (o TelemetrySpecOutput) Metrics() TelemetrySpecMetricsArrayOutput {
	return o.ApplyT(func(v TelemetrySpec) []TelemetrySpecMetrics { return v.Metrics }).(TelemetrySpecMetricsArrayOutput)
}

// Optional.
func (o TelemetrySpecOutput) Selector() TelemetrySpecSelectorPtrOutput {
	return o.ApplyT(func(v TelemetrySpec) *TelemetrySpecSelector { return v.Selector }).(TelemetrySpecSelectorPtrOutput)
}

func (o TelemetrySpecOutput) TargetRef() TelemetrySpecTargetRefPtrOutput {
	return o.ApplyT(func(v TelemetrySpec) *TelemetrySpecTargetRef { return v.TargetRef }).(TelemetrySpecTargetRefPtrOutput)
}

// Optional.
func (o TelemetrySpecOutput) TargetRefs() TelemetrySpecTargetRefsArrayOutput {
	return o.ApplyT(func(v TelemetrySpec) []TelemetrySpecTargetRefs { return v.TargetRefs }).(TelemetrySpecTargetRefsArrayOutput)
}

// Optional.
func (o TelemetrySpecOutput) Tracing() TelemetrySpecTracingArrayOutput {
	return o.ApplyT(func(v TelemetrySpec) []TelemetrySpecTracing { return v.Tracing }).(TelemetrySpecTracingArrayOutput)
}

type TelemetrySpecPtrOutput struct{ *pulumi.OutputState }

func (TelemetrySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpec)(nil)).Elem()
}

func (o TelemetrySpecPtrOutput) ToTelemetrySpecPtrOutput() TelemetrySpecPtrOutput {
	return o
}

func (o TelemetrySpecPtrOutput) ToTelemetrySpecPtrOutputWithContext(ctx context.Context) TelemetrySpecPtrOutput {
	return o
}

func (o TelemetrySpecPtrOutput) Elem() TelemetrySpecOutput {
	return o.ApplyT(func(v *TelemetrySpec) TelemetrySpec {
		if v != nil {
			return *v
		}
		var ret TelemetrySpec
		return ret
	}).(TelemetrySpecOutput)
}

// Optional.
func (o TelemetrySpecPtrOutput) AccessLogging() TelemetrySpecAccessLoggingArrayOutput {
	return o.ApplyT(func(v *TelemetrySpec) []TelemetrySpecAccessLogging {
		if v == nil {
			return nil
		}
		return v.AccessLogging
	}).(TelemetrySpecAccessLoggingArrayOutput)
}

// Optional.
func (o TelemetrySpecPtrOutput) Metrics() TelemetrySpecMetricsArrayOutput {
	return o.ApplyT(func(v *TelemetrySpec) []TelemetrySpecMetrics {
		if v == nil {
			return nil
		}
		return v.Metrics
	}).(TelemetrySpecMetricsArrayOutput)
}

// Optional.
func (o TelemetrySpecPtrOutput) Selector() TelemetrySpecSelectorPtrOutput {
	return o.ApplyT(func(v *TelemetrySpec) *TelemetrySpecSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(TelemetrySpecSelectorPtrOutput)
}

func (o TelemetrySpecPtrOutput) TargetRef() TelemetrySpecTargetRefPtrOutput {
	return o.ApplyT(func(v *TelemetrySpec) *TelemetrySpecTargetRef {
		if v == nil {
			return nil
		}
		return v.TargetRef
	}).(TelemetrySpecTargetRefPtrOutput)
}

// Optional.
func (o TelemetrySpecPtrOutput) TargetRefs() TelemetrySpecTargetRefsArrayOutput {
	return o.ApplyT(func(v *TelemetrySpec) []TelemetrySpecTargetRefs {
		if v == nil {
			return nil
		}
		return v.TargetRefs
	}).(TelemetrySpecTargetRefsArrayOutput)
}

// Optional.
func (o TelemetrySpecPtrOutput) Tracing() TelemetrySpecTracingArrayOutput {
	return o.ApplyT(func(v *TelemetrySpec) []TelemetrySpecTracing {
		if v == nil {
			return nil
		}
		return v.Tracing
	}).(TelemetrySpecTracingArrayOutput)
}

type TelemetrySpecAccessLogging struct {
	// Controls logging.
	Disabled *bool `pulumi:"disabled"`
	// Optional.
	Filter *TelemetrySpecAccessLoggingFilter `pulumi:"filter"`
	// Allows tailoring of logging behavior to specific conditions.
	Match *TelemetrySpecAccessLoggingMatch `pulumi:"match"`
	// Optional.
	Providers []TelemetrySpecAccessLoggingProviders `pulumi:"providers"`
}

// TelemetrySpecAccessLoggingInput is an input type that accepts TelemetrySpecAccessLoggingArgs and TelemetrySpecAccessLoggingOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessLoggingInput` via:
//
//	TelemetrySpecAccessLoggingArgs{...}
type TelemetrySpecAccessLoggingInput interface {
	pulumi.Input

	ToTelemetrySpecAccessLoggingOutput() TelemetrySpecAccessLoggingOutput
	ToTelemetrySpecAccessLoggingOutputWithContext(context.Context) TelemetrySpecAccessLoggingOutput
}

type TelemetrySpecAccessLoggingArgs struct {
	// Controls logging.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// Optional.
	Filter TelemetrySpecAccessLoggingFilterPtrInput `pulumi:"filter"`
	// Allows tailoring of logging behavior to specific conditions.
	Match TelemetrySpecAccessLoggingMatchPtrInput `pulumi:"match"`
	// Optional.
	Providers TelemetrySpecAccessLoggingProvidersArrayInput `pulumi:"providers"`
}

func (TelemetrySpecAccessLoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccessLogging)(nil)).Elem()
}

func (i TelemetrySpecAccessLoggingArgs) ToTelemetrySpecAccessLoggingOutput() TelemetrySpecAccessLoggingOutput {
	return i.ToTelemetrySpecAccessLoggingOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessLoggingArgs) ToTelemetrySpecAccessLoggingOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessLoggingOutput)
}

// TelemetrySpecAccessLoggingArrayInput is an input type that accepts TelemetrySpecAccessLoggingArray and TelemetrySpecAccessLoggingArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessLoggingArrayInput` via:
//
//	TelemetrySpecAccessLoggingArray{ TelemetrySpecAccessLoggingArgs{...} }
type TelemetrySpecAccessLoggingArrayInput interface {
	pulumi.Input

	ToTelemetrySpecAccessLoggingArrayOutput() TelemetrySpecAccessLoggingArrayOutput
	ToTelemetrySpecAccessLoggingArrayOutputWithContext(context.Context) TelemetrySpecAccessLoggingArrayOutput
}

type TelemetrySpecAccessLoggingArray []TelemetrySpecAccessLoggingInput

func (TelemetrySpecAccessLoggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecAccessLogging)(nil)).Elem()
}

func (i TelemetrySpecAccessLoggingArray) ToTelemetrySpecAccessLoggingArrayOutput() TelemetrySpecAccessLoggingArrayOutput {
	return i.ToTelemetrySpecAccessLoggingArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessLoggingArray) ToTelemetrySpecAccessLoggingArrayOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessLoggingArrayOutput)
}

type TelemetrySpecAccessLoggingOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessLoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccessLogging)(nil)).Elem()
}

func (o TelemetrySpecAccessLoggingOutput) ToTelemetrySpecAccessLoggingOutput() TelemetrySpecAccessLoggingOutput {
	return o
}

func (o TelemetrySpecAccessLoggingOutput) ToTelemetrySpecAccessLoggingOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingOutput {
	return o
}

// Controls logging.
func (o TelemetrySpecAccessLoggingOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TelemetrySpecAccessLogging) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Optional.
func (o TelemetrySpecAccessLoggingOutput) Filter() TelemetrySpecAccessLoggingFilterPtrOutput {
	return o.ApplyT(func(v TelemetrySpecAccessLogging) *TelemetrySpecAccessLoggingFilter { return v.Filter }).(TelemetrySpecAccessLoggingFilterPtrOutput)
}

// Allows tailoring of logging behavior to specific conditions.
func (o TelemetrySpecAccessLoggingOutput) Match() TelemetrySpecAccessLoggingMatchPtrOutput {
	return o.ApplyT(func(v TelemetrySpecAccessLogging) *TelemetrySpecAccessLoggingMatch { return v.Match }).(TelemetrySpecAccessLoggingMatchPtrOutput)
}

// Optional.
func (o TelemetrySpecAccessLoggingOutput) Providers() TelemetrySpecAccessLoggingProvidersArrayOutput {
	return o.ApplyT(func(v TelemetrySpecAccessLogging) []TelemetrySpecAccessLoggingProviders { return v.Providers }).(TelemetrySpecAccessLoggingProvidersArrayOutput)
}

type TelemetrySpecAccessLoggingArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessLoggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecAccessLogging)(nil)).Elem()
}

func (o TelemetrySpecAccessLoggingArrayOutput) ToTelemetrySpecAccessLoggingArrayOutput() TelemetrySpecAccessLoggingArrayOutput {
	return o
}

func (o TelemetrySpecAccessLoggingArrayOutput) ToTelemetrySpecAccessLoggingArrayOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingArrayOutput {
	return o
}

func (o TelemetrySpecAccessLoggingArrayOutput) Index(i pulumi.IntInput) TelemetrySpecAccessLoggingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecAccessLogging {
		return vs[0].([]TelemetrySpecAccessLogging)[vs[1].(int)]
	}).(TelemetrySpecAccessLoggingOutput)
}

// Optional.
type TelemetrySpecAccessLoggingFilter struct {
	// CEL expression for selecting when requests/connections should be logged.
	Expression *string `pulumi:"expression"`
}

// TelemetrySpecAccessLoggingFilterInput is an input type that accepts TelemetrySpecAccessLoggingFilterArgs and TelemetrySpecAccessLoggingFilterOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessLoggingFilterInput` via:
//
//	TelemetrySpecAccessLoggingFilterArgs{...}
type TelemetrySpecAccessLoggingFilterInput interface {
	pulumi.Input

	ToTelemetrySpecAccessLoggingFilterOutput() TelemetrySpecAccessLoggingFilterOutput
	ToTelemetrySpecAccessLoggingFilterOutputWithContext(context.Context) TelemetrySpecAccessLoggingFilterOutput
}

// Optional.
type TelemetrySpecAccessLoggingFilterArgs struct {
	// CEL expression for selecting when requests/connections should be logged.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
}

func (TelemetrySpecAccessLoggingFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccessLoggingFilter)(nil)).Elem()
}

func (i TelemetrySpecAccessLoggingFilterArgs) ToTelemetrySpecAccessLoggingFilterOutput() TelemetrySpecAccessLoggingFilterOutput {
	return i.ToTelemetrySpecAccessLoggingFilterOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessLoggingFilterArgs) ToTelemetrySpecAccessLoggingFilterOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessLoggingFilterOutput)
}

func (i TelemetrySpecAccessLoggingFilterArgs) ToTelemetrySpecAccessLoggingFilterPtrOutput() TelemetrySpecAccessLoggingFilterPtrOutput {
	return i.ToTelemetrySpecAccessLoggingFilterPtrOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessLoggingFilterArgs) ToTelemetrySpecAccessLoggingFilterPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessLoggingFilterOutput).ToTelemetrySpecAccessLoggingFilterPtrOutputWithContext(ctx)
}

// TelemetrySpecAccessLoggingFilterPtrInput is an input type that accepts TelemetrySpecAccessLoggingFilterArgs, TelemetrySpecAccessLoggingFilterPtr and TelemetrySpecAccessLoggingFilterPtrOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessLoggingFilterPtrInput` via:
//
//	        TelemetrySpecAccessLoggingFilterArgs{...}
//
//	or:
//
//	        nil
type TelemetrySpecAccessLoggingFilterPtrInput interface {
	pulumi.Input

	ToTelemetrySpecAccessLoggingFilterPtrOutput() TelemetrySpecAccessLoggingFilterPtrOutput
	ToTelemetrySpecAccessLoggingFilterPtrOutputWithContext(context.Context) TelemetrySpecAccessLoggingFilterPtrOutput
}

type telemetrySpecAccessLoggingFilterPtrType TelemetrySpecAccessLoggingFilterArgs

func TelemetrySpecAccessLoggingFilterPtr(v *TelemetrySpecAccessLoggingFilterArgs) TelemetrySpecAccessLoggingFilterPtrInput {
	return (*telemetrySpecAccessLoggingFilterPtrType)(v)
}

func (*telemetrySpecAccessLoggingFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecAccessLoggingFilter)(nil)).Elem()
}

func (i *telemetrySpecAccessLoggingFilterPtrType) ToTelemetrySpecAccessLoggingFilterPtrOutput() TelemetrySpecAccessLoggingFilterPtrOutput {
	return i.ToTelemetrySpecAccessLoggingFilterPtrOutputWithContext(context.Background())
}

func (i *telemetrySpecAccessLoggingFilterPtrType) ToTelemetrySpecAccessLoggingFilterPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessLoggingFilterPtrOutput)
}

// Optional.
type TelemetrySpecAccessLoggingFilterOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessLoggingFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccessLoggingFilter)(nil)).Elem()
}

func (o TelemetrySpecAccessLoggingFilterOutput) ToTelemetrySpecAccessLoggingFilterOutput() TelemetrySpecAccessLoggingFilterOutput {
	return o
}

func (o TelemetrySpecAccessLoggingFilterOutput) ToTelemetrySpecAccessLoggingFilterOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingFilterOutput {
	return o
}

func (o TelemetrySpecAccessLoggingFilterOutput) ToTelemetrySpecAccessLoggingFilterPtrOutput() TelemetrySpecAccessLoggingFilterPtrOutput {
	return o.ToTelemetrySpecAccessLoggingFilterPtrOutputWithContext(context.Background())
}

func (o TelemetrySpecAccessLoggingFilterOutput) ToTelemetrySpecAccessLoggingFilterPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TelemetrySpecAccessLoggingFilter) *TelemetrySpecAccessLoggingFilter {
		return &v
	}).(TelemetrySpecAccessLoggingFilterPtrOutput)
}

// CEL expression for selecting when requests/connections should be logged.
func (o TelemetrySpecAccessLoggingFilterOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecAccessLoggingFilter) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

type TelemetrySpecAccessLoggingFilterPtrOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessLoggingFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecAccessLoggingFilter)(nil)).Elem()
}

func (o TelemetrySpecAccessLoggingFilterPtrOutput) ToTelemetrySpecAccessLoggingFilterPtrOutput() TelemetrySpecAccessLoggingFilterPtrOutput {
	return o
}

func (o TelemetrySpecAccessLoggingFilterPtrOutput) ToTelemetrySpecAccessLoggingFilterPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingFilterPtrOutput {
	return o
}

func (o TelemetrySpecAccessLoggingFilterPtrOutput) Elem() TelemetrySpecAccessLoggingFilterOutput {
	return o.ApplyT(func(v *TelemetrySpecAccessLoggingFilter) TelemetrySpecAccessLoggingFilter {
		if v != nil {
			return *v
		}
		var ret TelemetrySpecAccessLoggingFilter
		return ret
	}).(TelemetrySpecAccessLoggingFilterOutput)
}

// CEL expression for selecting when requests/connections should be logged.
func (o TelemetrySpecAccessLoggingFilterPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecAccessLoggingFilter) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Allows tailoring of logging behavior to specific conditions.
type TelemetrySpecAccessLoggingMatch struct {
	// This determines whether or not to apply the access logging configuration based on the direction of traffic relative to the proxied workload.
	//
	// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
	Mode *string `pulumi:"mode"`
}

// TelemetrySpecAccessLoggingMatchInput is an input type that accepts TelemetrySpecAccessLoggingMatchArgs and TelemetrySpecAccessLoggingMatchOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessLoggingMatchInput` via:
//
//	TelemetrySpecAccessLoggingMatchArgs{...}
type TelemetrySpecAccessLoggingMatchInput interface {
	pulumi.Input

	ToTelemetrySpecAccessLoggingMatchOutput() TelemetrySpecAccessLoggingMatchOutput
	ToTelemetrySpecAccessLoggingMatchOutputWithContext(context.Context) TelemetrySpecAccessLoggingMatchOutput
}

// Allows tailoring of logging behavior to specific conditions.
type TelemetrySpecAccessLoggingMatchArgs struct {
	// This determines whether or not to apply the access logging configuration based on the direction of traffic relative to the proxied workload.
	//
	// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
	Mode pulumi.StringPtrInput `pulumi:"mode"`
}

func (TelemetrySpecAccessLoggingMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccessLoggingMatch)(nil)).Elem()
}

func (i TelemetrySpecAccessLoggingMatchArgs) ToTelemetrySpecAccessLoggingMatchOutput() TelemetrySpecAccessLoggingMatchOutput {
	return i.ToTelemetrySpecAccessLoggingMatchOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessLoggingMatchArgs) ToTelemetrySpecAccessLoggingMatchOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessLoggingMatchOutput)
}

func (i TelemetrySpecAccessLoggingMatchArgs) ToTelemetrySpecAccessLoggingMatchPtrOutput() TelemetrySpecAccessLoggingMatchPtrOutput {
	return i.ToTelemetrySpecAccessLoggingMatchPtrOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessLoggingMatchArgs) ToTelemetrySpecAccessLoggingMatchPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessLoggingMatchOutput).ToTelemetrySpecAccessLoggingMatchPtrOutputWithContext(ctx)
}

// TelemetrySpecAccessLoggingMatchPtrInput is an input type that accepts TelemetrySpecAccessLoggingMatchArgs, TelemetrySpecAccessLoggingMatchPtr and TelemetrySpecAccessLoggingMatchPtrOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessLoggingMatchPtrInput` via:
//
//	        TelemetrySpecAccessLoggingMatchArgs{...}
//
//	or:
//
//	        nil
type TelemetrySpecAccessLoggingMatchPtrInput interface {
	pulumi.Input

	ToTelemetrySpecAccessLoggingMatchPtrOutput() TelemetrySpecAccessLoggingMatchPtrOutput
	ToTelemetrySpecAccessLoggingMatchPtrOutputWithContext(context.Context) TelemetrySpecAccessLoggingMatchPtrOutput
}

type telemetrySpecAccessLoggingMatchPtrType TelemetrySpecAccessLoggingMatchArgs

func TelemetrySpecAccessLoggingMatchPtr(v *TelemetrySpecAccessLoggingMatchArgs) TelemetrySpecAccessLoggingMatchPtrInput {
	return (*telemetrySpecAccessLoggingMatchPtrType)(v)
}

func (*telemetrySpecAccessLoggingMatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecAccessLoggingMatch)(nil)).Elem()
}

func (i *telemetrySpecAccessLoggingMatchPtrType) ToTelemetrySpecAccessLoggingMatchPtrOutput() TelemetrySpecAccessLoggingMatchPtrOutput {
	return i.ToTelemetrySpecAccessLoggingMatchPtrOutputWithContext(context.Background())
}

func (i *telemetrySpecAccessLoggingMatchPtrType) ToTelemetrySpecAccessLoggingMatchPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessLoggingMatchPtrOutput)
}

// Allows tailoring of logging behavior to specific conditions.
type TelemetrySpecAccessLoggingMatchOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessLoggingMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccessLoggingMatch)(nil)).Elem()
}

func (o TelemetrySpecAccessLoggingMatchOutput) ToTelemetrySpecAccessLoggingMatchOutput() TelemetrySpecAccessLoggingMatchOutput {
	return o
}

func (o TelemetrySpecAccessLoggingMatchOutput) ToTelemetrySpecAccessLoggingMatchOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingMatchOutput {
	return o
}

func (o TelemetrySpecAccessLoggingMatchOutput) ToTelemetrySpecAccessLoggingMatchPtrOutput() TelemetrySpecAccessLoggingMatchPtrOutput {
	return o.ToTelemetrySpecAccessLoggingMatchPtrOutputWithContext(context.Background())
}

func (o TelemetrySpecAccessLoggingMatchOutput) ToTelemetrySpecAccessLoggingMatchPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingMatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TelemetrySpecAccessLoggingMatch) *TelemetrySpecAccessLoggingMatch {
		return &v
	}).(TelemetrySpecAccessLoggingMatchPtrOutput)
}

// This determines whether or not to apply the access logging configuration based on the direction of traffic relative to the proxied workload.
//
// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
func (o TelemetrySpecAccessLoggingMatchOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecAccessLoggingMatch) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type TelemetrySpecAccessLoggingMatchPtrOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessLoggingMatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecAccessLoggingMatch)(nil)).Elem()
}

func (o TelemetrySpecAccessLoggingMatchPtrOutput) ToTelemetrySpecAccessLoggingMatchPtrOutput() TelemetrySpecAccessLoggingMatchPtrOutput {
	return o
}

func (o TelemetrySpecAccessLoggingMatchPtrOutput) ToTelemetrySpecAccessLoggingMatchPtrOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingMatchPtrOutput {
	return o
}

func (o TelemetrySpecAccessLoggingMatchPtrOutput) Elem() TelemetrySpecAccessLoggingMatchOutput {
	return o.ApplyT(func(v *TelemetrySpecAccessLoggingMatch) TelemetrySpecAccessLoggingMatch {
		if v != nil {
			return *v
		}
		var ret TelemetrySpecAccessLoggingMatch
		return ret
	}).(TelemetrySpecAccessLoggingMatchOutput)
}

// This determines whether or not to apply the access logging configuration based on the direction of traffic relative to the proxied workload.
//
// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
func (o TelemetrySpecAccessLoggingMatchPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecAccessLoggingMatch) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

type TelemetrySpecAccessLoggingProviders struct {
	// Required.
	Name string `pulumi:"name"`
}

// TelemetrySpecAccessLoggingProvidersInput is an input type that accepts TelemetrySpecAccessLoggingProvidersArgs and TelemetrySpecAccessLoggingProvidersOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessLoggingProvidersInput` via:
//
//	TelemetrySpecAccessLoggingProvidersArgs{...}
type TelemetrySpecAccessLoggingProvidersInput interface {
	pulumi.Input

	ToTelemetrySpecAccessLoggingProvidersOutput() TelemetrySpecAccessLoggingProvidersOutput
	ToTelemetrySpecAccessLoggingProvidersOutputWithContext(context.Context) TelemetrySpecAccessLoggingProvidersOutput
}

type TelemetrySpecAccessLoggingProvidersArgs struct {
	// Required.
	Name pulumi.StringInput `pulumi:"name"`
}

func (TelemetrySpecAccessLoggingProvidersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccessLoggingProviders)(nil)).Elem()
}

func (i TelemetrySpecAccessLoggingProvidersArgs) ToTelemetrySpecAccessLoggingProvidersOutput() TelemetrySpecAccessLoggingProvidersOutput {
	return i.ToTelemetrySpecAccessLoggingProvidersOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessLoggingProvidersArgs) ToTelemetrySpecAccessLoggingProvidersOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingProvidersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessLoggingProvidersOutput)
}

// TelemetrySpecAccessLoggingProvidersArrayInput is an input type that accepts TelemetrySpecAccessLoggingProvidersArray and TelemetrySpecAccessLoggingProvidersArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecAccessLoggingProvidersArrayInput` via:
//
//	TelemetrySpecAccessLoggingProvidersArray{ TelemetrySpecAccessLoggingProvidersArgs{...} }
type TelemetrySpecAccessLoggingProvidersArrayInput interface {
	pulumi.Input

	ToTelemetrySpecAccessLoggingProvidersArrayOutput() TelemetrySpecAccessLoggingProvidersArrayOutput
	ToTelemetrySpecAccessLoggingProvidersArrayOutputWithContext(context.Context) TelemetrySpecAccessLoggingProvidersArrayOutput
}

type TelemetrySpecAccessLoggingProvidersArray []TelemetrySpecAccessLoggingProvidersInput

func (TelemetrySpecAccessLoggingProvidersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecAccessLoggingProviders)(nil)).Elem()
}

func (i TelemetrySpecAccessLoggingProvidersArray) ToTelemetrySpecAccessLoggingProvidersArrayOutput() TelemetrySpecAccessLoggingProvidersArrayOutput {
	return i.ToTelemetrySpecAccessLoggingProvidersArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecAccessLoggingProvidersArray) ToTelemetrySpecAccessLoggingProvidersArrayOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingProvidersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecAccessLoggingProvidersArrayOutput)
}

type TelemetrySpecAccessLoggingProvidersOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessLoggingProvidersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecAccessLoggingProviders)(nil)).Elem()
}

func (o TelemetrySpecAccessLoggingProvidersOutput) ToTelemetrySpecAccessLoggingProvidersOutput() TelemetrySpecAccessLoggingProvidersOutput {
	return o
}

func (o TelemetrySpecAccessLoggingProvidersOutput) ToTelemetrySpecAccessLoggingProvidersOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingProvidersOutput {
	return o
}

// Required.
func (o TelemetrySpecAccessLoggingProvidersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TelemetrySpecAccessLoggingProviders) string { return v.Name }).(pulumi.StringOutput)
}

type TelemetrySpecAccessLoggingProvidersArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecAccessLoggingProvidersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecAccessLoggingProviders)(nil)).Elem()
}

func (o TelemetrySpecAccessLoggingProvidersArrayOutput) ToTelemetrySpecAccessLoggingProvidersArrayOutput() TelemetrySpecAccessLoggingProvidersArrayOutput {
	return o
}

func (o TelemetrySpecAccessLoggingProvidersArrayOutput) ToTelemetrySpecAccessLoggingProvidersArrayOutputWithContext(ctx context.Context) TelemetrySpecAccessLoggingProvidersArrayOutput {
	return o
}

func (o TelemetrySpecAccessLoggingProvidersArrayOutput) Index(i pulumi.IntInput) TelemetrySpecAccessLoggingProvidersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecAccessLoggingProviders {
		return vs[0].([]TelemetrySpecAccessLoggingProviders)[vs[1].(int)]
	}).(TelemetrySpecAccessLoggingProvidersOutput)
}

type TelemetrySpecMetrics struct {
	// Optional.
	Overrides []TelemetrySpecMetricsOverrides `pulumi:"overrides"`
	// Optional.
	Providers []TelemetrySpecMetricsProviders `pulumi:"providers"`
	// Optional.
	ReportingInterval *string `pulumi:"reportingInterval"`
}

// TelemetrySpecMetricsInput is an input type that accepts TelemetrySpecMetricsArgs and TelemetrySpecMetricsOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsInput` via:
//
//	TelemetrySpecMetricsArgs{...}
type TelemetrySpecMetricsInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsOutput() TelemetrySpecMetricsOutput
	ToTelemetrySpecMetricsOutputWithContext(context.Context) TelemetrySpecMetricsOutput
}

type TelemetrySpecMetricsArgs struct {
	// Optional.
	Overrides TelemetrySpecMetricsOverridesArrayInput `pulumi:"overrides"`
	// Optional.
	Providers TelemetrySpecMetricsProvidersArrayInput `pulumi:"providers"`
	// Optional.
	ReportingInterval pulumi.StringPtrInput `pulumi:"reportingInterval"`
}

func (TelemetrySpecMetricsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetrics)(nil)).Elem()
}

func (i TelemetrySpecMetricsArgs) ToTelemetrySpecMetricsOutput() TelemetrySpecMetricsOutput {
	return i.ToTelemetrySpecMetricsOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsArgs) ToTelemetrySpecMetricsOutputWithContext(ctx context.Context) TelemetrySpecMetricsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsOutput)
}

// TelemetrySpecMetricsArrayInput is an input type that accepts TelemetrySpecMetricsArray and TelemetrySpecMetricsArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsArrayInput` via:
//
//	TelemetrySpecMetricsArray{ TelemetrySpecMetricsArgs{...} }
type TelemetrySpecMetricsArrayInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsArrayOutput() TelemetrySpecMetricsArrayOutput
	ToTelemetrySpecMetricsArrayOutputWithContext(context.Context) TelemetrySpecMetricsArrayOutput
}

type TelemetrySpecMetricsArray []TelemetrySpecMetricsInput

func (TelemetrySpecMetricsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecMetrics)(nil)).Elem()
}

func (i TelemetrySpecMetricsArray) ToTelemetrySpecMetricsArrayOutput() TelemetrySpecMetricsArrayOutput {
	return i.ToTelemetrySpecMetricsArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsArray) ToTelemetrySpecMetricsArrayOutputWithContext(ctx context.Context) TelemetrySpecMetricsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsArrayOutput)
}

type TelemetrySpecMetricsOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetrics)(nil)).Elem()
}

func (o TelemetrySpecMetricsOutput) ToTelemetrySpecMetricsOutput() TelemetrySpecMetricsOutput {
	return o
}

func (o TelemetrySpecMetricsOutput) ToTelemetrySpecMetricsOutputWithContext(ctx context.Context) TelemetrySpecMetricsOutput {
	return o
}

// Optional.
func (o TelemetrySpecMetricsOutput) Overrides() TelemetrySpecMetricsOverridesArrayOutput {
	return o.ApplyT(func(v TelemetrySpecMetrics) []TelemetrySpecMetricsOverrides { return v.Overrides }).(TelemetrySpecMetricsOverridesArrayOutput)
}

// Optional.
func (o TelemetrySpecMetricsOutput) Providers() TelemetrySpecMetricsProvidersArrayOutput {
	return o.ApplyT(func(v TelemetrySpecMetrics) []TelemetrySpecMetricsProviders { return v.Providers }).(TelemetrySpecMetricsProvidersArrayOutput)
}

// Optional.
func (o TelemetrySpecMetricsOutput) ReportingInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecMetrics) *string { return v.ReportingInterval }).(pulumi.StringPtrOutput)
}

type TelemetrySpecMetricsArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecMetrics)(nil)).Elem()
}

func (o TelemetrySpecMetricsArrayOutput) ToTelemetrySpecMetricsArrayOutput() TelemetrySpecMetricsArrayOutput {
	return o
}

func (o TelemetrySpecMetricsArrayOutput) ToTelemetrySpecMetricsArrayOutputWithContext(ctx context.Context) TelemetrySpecMetricsArrayOutput {
	return o
}

func (o TelemetrySpecMetricsArrayOutput) Index(i pulumi.IntInput) TelemetrySpecMetricsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecMetrics {
		return vs[0].([]TelemetrySpecMetrics)[vs[1].(int)]
	}).(TelemetrySpecMetricsOutput)
}

type TelemetrySpecMetricsOverrides struct {
	// Optional.
	Disabled *bool `pulumi:"disabled"`
	// Match allows providing the scope of the override.
	Match interface{} `pulumi:"match"`
	// Optional.
	TagOverrides map[string]TelemetrySpecMetricsOverridesTagOverrides `pulumi:"tagOverrides"`
}

// TelemetrySpecMetricsOverridesInput is an input type that accepts TelemetrySpecMetricsOverridesArgs and TelemetrySpecMetricsOverridesOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsOverridesInput` via:
//
//	TelemetrySpecMetricsOverridesArgs{...}
type TelemetrySpecMetricsOverridesInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsOverridesOutput() TelemetrySpecMetricsOverridesOutput
	ToTelemetrySpecMetricsOverridesOutputWithContext(context.Context) TelemetrySpecMetricsOverridesOutput
}

type TelemetrySpecMetricsOverridesArgs struct {
	// Optional.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// Match allows providing the scope of the override.
	Match pulumi.Input `pulumi:"match"`
	// Optional.
	TagOverrides TelemetrySpecMetricsOverridesTagOverridesMapInput `pulumi:"tagOverrides"`
}

func (TelemetrySpecMetricsOverridesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetricsOverrides)(nil)).Elem()
}

func (i TelemetrySpecMetricsOverridesArgs) ToTelemetrySpecMetricsOverridesOutput() TelemetrySpecMetricsOverridesOutput {
	return i.ToTelemetrySpecMetricsOverridesOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsOverridesArgs) ToTelemetrySpecMetricsOverridesOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsOverridesOutput)
}

// TelemetrySpecMetricsOverridesArrayInput is an input type that accepts TelemetrySpecMetricsOverridesArray and TelemetrySpecMetricsOverridesArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsOverridesArrayInput` via:
//
//	TelemetrySpecMetricsOverridesArray{ TelemetrySpecMetricsOverridesArgs{...} }
type TelemetrySpecMetricsOverridesArrayInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsOverridesArrayOutput() TelemetrySpecMetricsOverridesArrayOutput
	ToTelemetrySpecMetricsOverridesArrayOutputWithContext(context.Context) TelemetrySpecMetricsOverridesArrayOutput
}

type TelemetrySpecMetricsOverridesArray []TelemetrySpecMetricsOverridesInput

func (TelemetrySpecMetricsOverridesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecMetricsOverrides)(nil)).Elem()
}

func (i TelemetrySpecMetricsOverridesArray) ToTelemetrySpecMetricsOverridesArrayOutput() TelemetrySpecMetricsOverridesArrayOutput {
	return i.ToTelemetrySpecMetricsOverridesArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsOverridesArray) ToTelemetrySpecMetricsOverridesArrayOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsOverridesArrayOutput)
}

type TelemetrySpecMetricsOverridesOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsOverridesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetricsOverrides)(nil)).Elem()
}

func (o TelemetrySpecMetricsOverridesOutput) ToTelemetrySpecMetricsOverridesOutput() TelemetrySpecMetricsOverridesOutput {
	return o
}

func (o TelemetrySpecMetricsOverridesOutput) ToTelemetrySpecMetricsOverridesOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesOutput {
	return o
}

// Optional.
func (o TelemetrySpecMetricsOverridesOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TelemetrySpecMetricsOverrides) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Match allows providing the scope of the override.
func (o TelemetrySpecMetricsOverridesOutput) Match() pulumi.AnyOutput {
	return o.ApplyT(func(v TelemetrySpecMetricsOverrides) interface{} { return v.Match }).(pulumi.AnyOutput)
}

// Optional.
func (o TelemetrySpecMetricsOverridesOutput) TagOverrides() TelemetrySpecMetricsOverridesTagOverridesMapOutput {
	return o.ApplyT(func(v TelemetrySpecMetricsOverrides) map[string]TelemetrySpecMetricsOverridesTagOverrides {
		return v.TagOverrides
	}).(TelemetrySpecMetricsOverridesTagOverridesMapOutput)
}

type TelemetrySpecMetricsOverridesArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsOverridesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecMetricsOverrides)(nil)).Elem()
}

func (o TelemetrySpecMetricsOverridesArrayOutput) ToTelemetrySpecMetricsOverridesArrayOutput() TelemetrySpecMetricsOverridesArrayOutput {
	return o
}

func (o TelemetrySpecMetricsOverridesArrayOutput) ToTelemetrySpecMetricsOverridesArrayOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesArrayOutput {
	return o
}

func (o TelemetrySpecMetricsOverridesArrayOutput) Index(i pulumi.IntInput) TelemetrySpecMetricsOverridesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecMetricsOverrides {
		return vs[0].([]TelemetrySpecMetricsOverrides)[vs[1].(int)]
	}).(TelemetrySpecMetricsOverridesOutput)
}

type TelemetrySpecMetricsOverridesTagOverrides struct {
	// Operation controls whether or not to update/add a tag, or to remove it.
	//
	// Valid Options: UPSERT, REMOVE
	Operation *string `pulumi:"operation"`
	// Value is only considered if the operation is `UPSERT`.
	Value *string `pulumi:"value"`
}

// TelemetrySpecMetricsOverridesTagOverridesInput is an input type that accepts TelemetrySpecMetricsOverridesTagOverridesArgs and TelemetrySpecMetricsOverridesTagOverridesOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsOverridesTagOverridesInput` via:
//
//	TelemetrySpecMetricsOverridesTagOverridesArgs{...}
type TelemetrySpecMetricsOverridesTagOverridesInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsOverridesTagOverridesOutput() TelemetrySpecMetricsOverridesTagOverridesOutput
	ToTelemetrySpecMetricsOverridesTagOverridesOutputWithContext(context.Context) TelemetrySpecMetricsOverridesTagOverridesOutput
}

type TelemetrySpecMetricsOverridesTagOverridesArgs struct {
	// Operation controls whether or not to update/add a tag, or to remove it.
	//
	// Valid Options: UPSERT, REMOVE
	Operation pulumi.StringPtrInput `pulumi:"operation"`
	// Value is only considered if the operation is `UPSERT`.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TelemetrySpecMetricsOverridesTagOverridesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetricsOverridesTagOverrides)(nil)).Elem()
}

func (i TelemetrySpecMetricsOverridesTagOverridesArgs) ToTelemetrySpecMetricsOverridesTagOverridesOutput() TelemetrySpecMetricsOverridesTagOverridesOutput {
	return i.ToTelemetrySpecMetricsOverridesTagOverridesOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsOverridesTagOverridesArgs) ToTelemetrySpecMetricsOverridesTagOverridesOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesTagOverridesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsOverridesTagOverridesOutput)
}

// TelemetrySpecMetricsOverridesTagOverridesMapInput is an input type that accepts TelemetrySpecMetricsOverridesTagOverridesMap and TelemetrySpecMetricsOverridesTagOverridesMapOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsOverridesTagOverridesMapInput` via:
//
//	TelemetrySpecMetricsOverridesTagOverridesMap{ "key": TelemetrySpecMetricsOverridesTagOverridesArgs{...} }
type TelemetrySpecMetricsOverridesTagOverridesMapInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsOverridesTagOverridesMapOutput() TelemetrySpecMetricsOverridesTagOverridesMapOutput
	ToTelemetrySpecMetricsOverridesTagOverridesMapOutputWithContext(context.Context) TelemetrySpecMetricsOverridesTagOverridesMapOutput
}

type TelemetrySpecMetricsOverridesTagOverridesMap map[string]TelemetrySpecMetricsOverridesTagOverridesInput

func (TelemetrySpecMetricsOverridesTagOverridesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]TelemetrySpecMetricsOverridesTagOverrides)(nil)).Elem()
}

func (i TelemetrySpecMetricsOverridesTagOverridesMap) ToTelemetrySpecMetricsOverridesTagOverridesMapOutput() TelemetrySpecMetricsOverridesTagOverridesMapOutput {
	return i.ToTelemetrySpecMetricsOverridesTagOverridesMapOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsOverridesTagOverridesMap) ToTelemetrySpecMetricsOverridesTagOverridesMapOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesTagOverridesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsOverridesTagOverridesMapOutput)
}

type TelemetrySpecMetricsOverridesTagOverridesOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsOverridesTagOverridesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetricsOverridesTagOverrides)(nil)).Elem()
}

func (o TelemetrySpecMetricsOverridesTagOverridesOutput) ToTelemetrySpecMetricsOverridesTagOverridesOutput() TelemetrySpecMetricsOverridesTagOverridesOutput {
	return o
}

func (o TelemetrySpecMetricsOverridesTagOverridesOutput) ToTelemetrySpecMetricsOverridesTagOverridesOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesTagOverridesOutput {
	return o
}

// Operation controls whether or not to update/add a tag, or to remove it.
//
// Valid Options: UPSERT, REMOVE
func (o TelemetrySpecMetricsOverridesTagOverridesOutput) Operation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecMetricsOverridesTagOverrides) *string { return v.Operation }).(pulumi.StringPtrOutput)
}

// Value is only considered if the operation is `UPSERT`.
func (o TelemetrySpecMetricsOverridesTagOverridesOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecMetricsOverridesTagOverrides) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TelemetrySpecMetricsOverridesTagOverridesMapOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsOverridesTagOverridesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]TelemetrySpecMetricsOverridesTagOverrides)(nil)).Elem()
}

func (o TelemetrySpecMetricsOverridesTagOverridesMapOutput) ToTelemetrySpecMetricsOverridesTagOverridesMapOutput() TelemetrySpecMetricsOverridesTagOverridesMapOutput {
	return o
}

func (o TelemetrySpecMetricsOverridesTagOverridesMapOutput) ToTelemetrySpecMetricsOverridesTagOverridesMapOutputWithContext(ctx context.Context) TelemetrySpecMetricsOverridesTagOverridesMapOutput {
	return o
}

func (o TelemetrySpecMetricsOverridesTagOverridesMapOutput) MapIndex(k pulumi.StringInput) TelemetrySpecMetricsOverridesTagOverridesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) TelemetrySpecMetricsOverridesTagOverrides {
		return vs[0].(map[string]TelemetrySpecMetricsOverridesTagOverrides)[vs[1].(string)]
	}).(TelemetrySpecMetricsOverridesTagOverridesOutput)
}

type TelemetrySpecMetricsProviders struct {
	// Required.
	Name string `pulumi:"name"`
}

// TelemetrySpecMetricsProvidersInput is an input type that accepts TelemetrySpecMetricsProvidersArgs and TelemetrySpecMetricsProvidersOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsProvidersInput` via:
//
//	TelemetrySpecMetricsProvidersArgs{...}
type TelemetrySpecMetricsProvidersInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsProvidersOutput() TelemetrySpecMetricsProvidersOutput
	ToTelemetrySpecMetricsProvidersOutputWithContext(context.Context) TelemetrySpecMetricsProvidersOutput
}

type TelemetrySpecMetricsProvidersArgs struct {
	// Required.
	Name pulumi.StringInput `pulumi:"name"`
}

func (TelemetrySpecMetricsProvidersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetricsProviders)(nil)).Elem()
}

func (i TelemetrySpecMetricsProvidersArgs) ToTelemetrySpecMetricsProvidersOutput() TelemetrySpecMetricsProvidersOutput {
	return i.ToTelemetrySpecMetricsProvidersOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsProvidersArgs) ToTelemetrySpecMetricsProvidersOutputWithContext(ctx context.Context) TelemetrySpecMetricsProvidersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsProvidersOutput)
}

// TelemetrySpecMetricsProvidersArrayInput is an input type that accepts TelemetrySpecMetricsProvidersArray and TelemetrySpecMetricsProvidersArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecMetricsProvidersArrayInput` via:
//
//	TelemetrySpecMetricsProvidersArray{ TelemetrySpecMetricsProvidersArgs{...} }
type TelemetrySpecMetricsProvidersArrayInput interface {
	pulumi.Input

	ToTelemetrySpecMetricsProvidersArrayOutput() TelemetrySpecMetricsProvidersArrayOutput
	ToTelemetrySpecMetricsProvidersArrayOutputWithContext(context.Context) TelemetrySpecMetricsProvidersArrayOutput
}

type TelemetrySpecMetricsProvidersArray []TelemetrySpecMetricsProvidersInput

func (TelemetrySpecMetricsProvidersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecMetricsProviders)(nil)).Elem()
}

func (i TelemetrySpecMetricsProvidersArray) ToTelemetrySpecMetricsProvidersArrayOutput() TelemetrySpecMetricsProvidersArrayOutput {
	return i.ToTelemetrySpecMetricsProvidersArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecMetricsProvidersArray) ToTelemetrySpecMetricsProvidersArrayOutputWithContext(ctx context.Context) TelemetrySpecMetricsProvidersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecMetricsProvidersArrayOutput)
}

type TelemetrySpecMetricsProvidersOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsProvidersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecMetricsProviders)(nil)).Elem()
}

func (o TelemetrySpecMetricsProvidersOutput) ToTelemetrySpecMetricsProvidersOutput() TelemetrySpecMetricsProvidersOutput {
	return o
}

func (o TelemetrySpecMetricsProvidersOutput) ToTelemetrySpecMetricsProvidersOutputWithContext(ctx context.Context) TelemetrySpecMetricsProvidersOutput {
	return o
}

// Required.
func (o TelemetrySpecMetricsProvidersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TelemetrySpecMetricsProviders) string { return v.Name }).(pulumi.StringOutput)
}

type TelemetrySpecMetricsProvidersArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecMetricsProvidersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecMetricsProviders)(nil)).Elem()
}

func (o TelemetrySpecMetricsProvidersArrayOutput) ToTelemetrySpecMetricsProvidersArrayOutput() TelemetrySpecMetricsProvidersArrayOutput {
	return o
}

func (o TelemetrySpecMetricsProvidersArrayOutput) ToTelemetrySpecMetricsProvidersArrayOutputWithContext(ctx context.Context) TelemetrySpecMetricsProvidersArrayOutput {
	return o
}

func (o TelemetrySpecMetricsProvidersArrayOutput) Index(i pulumi.IntInput) TelemetrySpecMetricsProvidersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecMetricsProviders {
		return vs[0].([]TelemetrySpecMetricsProviders)[vs[1].(int)]
	}).(TelemetrySpecMetricsProvidersOutput)
}

// Optional.
type TelemetrySpecSelector struct {
	// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// TelemetrySpecSelectorInput is an input type that accepts TelemetrySpecSelectorArgs and TelemetrySpecSelectorOutput values.
// You can construct a concrete instance of `TelemetrySpecSelectorInput` via:
//
//	TelemetrySpecSelectorArgs{...}
type TelemetrySpecSelectorInput interface {
	pulumi.Input

	ToTelemetrySpecSelectorOutput() TelemetrySpecSelectorOutput
	ToTelemetrySpecSelectorOutputWithContext(context.Context) TelemetrySpecSelectorOutput
}

// Optional.
type TelemetrySpecSelectorArgs struct {
	// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (TelemetrySpecSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecSelector)(nil)).Elem()
}

func (i TelemetrySpecSelectorArgs) ToTelemetrySpecSelectorOutput() TelemetrySpecSelectorOutput {
	return i.ToTelemetrySpecSelectorOutputWithContext(context.Background())
}

func (i TelemetrySpecSelectorArgs) ToTelemetrySpecSelectorOutputWithContext(ctx context.Context) TelemetrySpecSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecSelectorOutput)
}

func (i TelemetrySpecSelectorArgs) ToTelemetrySpecSelectorPtrOutput() TelemetrySpecSelectorPtrOutput {
	return i.ToTelemetrySpecSelectorPtrOutputWithContext(context.Background())
}

func (i TelemetrySpecSelectorArgs) ToTelemetrySpecSelectorPtrOutputWithContext(ctx context.Context) TelemetrySpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecSelectorOutput).ToTelemetrySpecSelectorPtrOutputWithContext(ctx)
}

// TelemetrySpecSelectorPtrInput is an input type that accepts TelemetrySpecSelectorArgs, TelemetrySpecSelectorPtr and TelemetrySpecSelectorPtrOutput values.
// You can construct a concrete instance of `TelemetrySpecSelectorPtrInput` via:
//
//	        TelemetrySpecSelectorArgs{...}
//
//	or:
//
//	        nil
type TelemetrySpecSelectorPtrInput interface {
	pulumi.Input

	ToTelemetrySpecSelectorPtrOutput() TelemetrySpecSelectorPtrOutput
	ToTelemetrySpecSelectorPtrOutputWithContext(context.Context) TelemetrySpecSelectorPtrOutput
}

type telemetrySpecSelectorPtrType TelemetrySpecSelectorArgs

func TelemetrySpecSelectorPtr(v *TelemetrySpecSelectorArgs) TelemetrySpecSelectorPtrInput {
	return (*telemetrySpecSelectorPtrType)(v)
}

func (*telemetrySpecSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecSelector)(nil)).Elem()
}

func (i *telemetrySpecSelectorPtrType) ToTelemetrySpecSelectorPtrOutput() TelemetrySpecSelectorPtrOutput {
	return i.ToTelemetrySpecSelectorPtrOutputWithContext(context.Background())
}

func (i *telemetrySpecSelectorPtrType) ToTelemetrySpecSelectorPtrOutputWithContext(ctx context.Context) TelemetrySpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecSelectorPtrOutput)
}

// Optional.
type TelemetrySpecSelectorOutput struct{ *pulumi.OutputState }

func (TelemetrySpecSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecSelector)(nil)).Elem()
}

func (o TelemetrySpecSelectorOutput) ToTelemetrySpecSelectorOutput() TelemetrySpecSelectorOutput {
	return o
}

func (o TelemetrySpecSelectorOutput) ToTelemetrySpecSelectorOutputWithContext(ctx context.Context) TelemetrySpecSelectorOutput {
	return o
}

func (o TelemetrySpecSelectorOutput) ToTelemetrySpecSelectorPtrOutput() TelemetrySpecSelectorPtrOutput {
	return o.ToTelemetrySpecSelectorPtrOutputWithContext(context.Background())
}

func (o TelemetrySpecSelectorOutput) ToTelemetrySpecSelectorPtrOutputWithContext(ctx context.Context) TelemetrySpecSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TelemetrySpecSelector) *TelemetrySpecSelector {
		return &v
	}).(TelemetrySpecSelectorPtrOutput)
}

// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
func (o TelemetrySpecSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v TelemetrySpecSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type TelemetrySpecSelectorPtrOutput struct{ *pulumi.OutputState }

func (TelemetrySpecSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecSelector)(nil)).Elem()
}

func (o TelemetrySpecSelectorPtrOutput) ToTelemetrySpecSelectorPtrOutput() TelemetrySpecSelectorPtrOutput {
	return o
}

func (o TelemetrySpecSelectorPtrOutput) ToTelemetrySpecSelectorPtrOutputWithContext(ctx context.Context) TelemetrySpecSelectorPtrOutput {
	return o
}

func (o TelemetrySpecSelectorPtrOutput) Elem() TelemetrySpecSelectorOutput {
	return o.ApplyT(func(v *TelemetrySpecSelector) TelemetrySpecSelector {
		if v != nil {
			return *v
		}
		var ret TelemetrySpecSelector
		return ret
	}).(TelemetrySpecSelectorOutput)
}

// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
func (o TelemetrySpecSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TelemetrySpecSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// One or more labels that indicate a specific set of pods/VMs on which a policy should be applied.
type TelemetrySpecSelectorMatchLabels struct {
}

type TelemetrySpecTargetRef struct {
	// group is the group of the target resource.
	Group *string `pulumi:"group"`
	// kind is kind of the target resource.
	Kind *string `pulumi:"kind"`
	// name is the name of the target resource.
	Name *string `pulumi:"name"`
	// namespace is the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// TelemetrySpecTargetRefInput is an input type that accepts TelemetrySpecTargetRefArgs and TelemetrySpecTargetRefOutput values.
// You can construct a concrete instance of `TelemetrySpecTargetRefInput` via:
//
//	TelemetrySpecTargetRefArgs{...}
type TelemetrySpecTargetRefInput interface {
	pulumi.Input

	ToTelemetrySpecTargetRefOutput() TelemetrySpecTargetRefOutput
	ToTelemetrySpecTargetRefOutputWithContext(context.Context) TelemetrySpecTargetRefOutput
}

type TelemetrySpecTargetRefArgs struct {
	// group is the group of the target resource.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// kind is kind of the target resource.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// name is the name of the target resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// namespace is the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (TelemetrySpecTargetRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTargetRef)(nil)).Elem()
}

func (i TelemetrySpecTargetRefArgs) ToTelemetrySpecTargetRefOutput() TelemetrySpecTargetRefOutput {
	return i.ToTelemetrySpecTargetRefOutputWithContext(context.Background())
}

func (i TelemetrySpecTargetRefArgs) ToTelemetrySpecTargetRefOutputWithContext(ctx context.Context) TelemetrySpecTargetRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTargetRefOutput)
}

func (i TelemetrySpecTargetRefArgs) ToTelemetrySpecTargetRefPtrOutput() TelemetrySpecTargetRefPtrOutput {
	return i.ToTelemetrySpecTargetRefPtrOutputWithContext(context.Background())
}

func (i TelemetrySpecTargetRefArgs) ToTelemetrySpecTargetRefPtrOutputWithContext(ctx context.Context) TelemetrySpecTargetRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTargetRefOutput).ToTelemetrySpecTargetRefPtrOutputWithContext(ctx)
}

// TelemetrySpecTargetRefPtrInput is an input type that accepts TelemetrySpecTargetRefArgs, TelemetrySpecTargetRefPtr and TelemetrySpecTargetRefPtrOutput values.
// You can construct a concrete instance of `TelemetrySpecTargetRefPtrInput` via:
//
//	        TelemetrySpecTargetRefArgs{...}
//
//	or:
//
//	        nil
type TelemetrySpecTargetRefPtrInput interface {
	pulumi.Input

	ToTelemetrySpecTargetRefPtrOutput() TelemetrySpecTargetRefPtrOutput
	ToTelemetrySpecTargetRefPtrOutputWithContext(context.Context) TelemetrySpecTargetRefPtrOutput
}

type telemetrySpecTargetRefPtrType TelemetrySpecTargetRefArgs

func TelemetrySpecTargetRefPtr(v *TelemetrySpecTargetRefArgs) TelemetrySpecTargetRefPtrInput {
	return (*telemetrySpecTargetRefPtrType)(v)
}

func (*telemetrySpecTargetRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecTargetRef)(nil)).Elem()
}

func (i *telemetrySpecTargetRefPtrType) ToTelemetrySpecTargetRefPtrOutput() TelemetrySpecTargetRefPtrOutput {
	return i.ToTelemetrySpecTargetRefPtrOutputWithContext(context.Background())
}

func (i *telemetrySpecTargetRefPtrType) ToTelemetrySpecTargetRefPtrOutputWithContext(ctx context.Context) TelemetrySpecTargetRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTargetRefPtrOutput)
}

type TelemetrySpecTargetRefOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTargetRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTargetRef)(nil)).Elem()
}

func (o TelemetrySpecTargetRefOutput) ToTelemetrySpecTargetRefOutput() TelemetrySpecTargetRefOutput {
	return o
}

func (o TelemetrySpecTargetRefOutput) ToTelemetrySpecTargetRefOutputWithContext(ctx context.Context) TelemetrySpecTargetRefOutput {
	return o
}

func (o TelemetrySpecTargetRefOutput) ToTelemetrySpecTargetRefPtrOutput() TelemetrySpecTargetRefPtrOutput {
	return o.ToTelemetrySpecTargetRefPtrOutputWithContext(context.Background())
}

func (o TelemetrySpecTargetRefOutput) ToTelemetrySpecTargetRefPtrOutputWithContext(ctx context.Context) TelemetrySpecTargetRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TelemetrySpecTargetRef) *TelemetrySpecTargetRef {
		return &v
	}).(TelemetrySpecTargetRefPtrOutput)
}

// group is the group of the target resource.
func (o TelemetrySpecTargetRefOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTargetRef) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// kind is kind of the target resource.
func (o TelemetrySpecTargetRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTargetRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// name is the name of the target resource.
func (o TelemetrySpecTargetRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTargetRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// namespace is the namespace of the referent.
func (o TelemetrySpecTargetRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTargetRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type TelemetrySpecTargetRefPtrOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTargetRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecTargetRef)(nil)).Elem()
}

func (o TelemetrySpecTargetRefPtrOutput) ToTelemetrySpecTargetRefPtrOutput() TelemetrySpecTargetRefPtrOutput {
	return o
}

func (o TelemetrySpecTargetRefPtrOutput) ToTelemetrySpecTargetRefPtrOutputWithContext(ctx context.Context) TelemetrySpecTargetRefPtrOutput {
	return o
}

func (o TelemetrySpecTargetRefPtrOutput) Elem() TelemetrySpecTargetRefOutput {
	return o.ApplyT(func(v *TelemetrySpecTargetRef) TelemetrySpecTargetRef {
		if v != nil {
			return *v
		}
		var ret TelemetrySpecTargetRef
		return ret
	}).(TelemetrySpecTargetRefOutput)
}

// group is the group of the target resource.
func (o TelemetrySpecTargetRefPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecTargetRef) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// kind is kind of the target resource.
func (o TelemetrySpecTargetRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecTargetRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// name is the name of the target resource.
func (o TelemetrySpecTargetRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecTargetRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// namespace is the namespace of the referent.
func (o TelemetrySpecTargetRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecTargetRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type TelemetrySpecTargetRefs struct {
	// group is the group of the target resource.
	Group *string `pulumi:"group"`
	// kind is kind of the target resource.
	Kind *string `pulumi:"kind"`
	// name is the name of the target resource.
	Name *string `pulumi:"name"`
	// namespace is the namespace of the referent.
	Namespace *string `pulumi:"namespace"`
}

// TelemetrySpecTargetRefsInput is an input type that accepts TelemetrySpecTargetRefsArgs and TelemetrySpecTargetRefsOutput values.
// You can construct a concrete instance of `TelemetrySpecTargetRefsInput` via:
//
//	TelemetrySpecTargetRefsArgs{...}
type TelemetrySpecTargetRefsInput interface {
	pulumi.Input

	ToTelemetrySpecTargetRefsOutput() TelemetrySpecTargetRefsOutput
	ToTelemetrySpecTargetRefsOutputWithContext(context.Context) TelemetrySpecTargetRefsOutput
}

type TelemetrySpecTargetRefsArgs struct {
	// group is the group of the target resource.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// kind is kind of the target resource.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// name is the name of the target resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// namespace is the namespace of the referent.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (TelemetrySpecTargetRefsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTargetRefs)(nil)).Elem()
}

func (i TelemetrySpecTargetRefsArgs) ToTelemetrySpecTargetRefsOutput() TelemetrySpecTargetRefsOutput {
	return i.ToTelemetrySpecTargetRefsOutputWithContext(context.Background())
}

func (i TelemetrySpecTargetRefsArgs) ToTelemetrySpecTargetRefsOutputWithContext(ctx context.Context) TelemetrySpecTargetRefsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTargetRefsOutput)
}

// TelemetrySpecTargetRefsArrayInput is an input type that accepts TelemetrySpecTargetRefsArray and TelemetrySpecTargetRefsArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecTargetRefsArrayInput` via:
//
//	TelemetrySpecTargetRefsArray{ TelemetrySpecTargetRefsArgs{...} }
type TelemetrySpecTargetRefsArrayInput interface {
	pulumi.Input

	ToTelemetrySpecTargetRefsArrayOutput() TelemetrySpecTargetRefsArrayOutput
	ToTelemetrySpecTargetRefsArrayOutputWithContext(context.Context) TelemetrySpecTargetRefsArrayOutput
}

type TelemetrySpecTargetRefsArray []TelemetrySpecTargetRefsInput

func (TelemetrySpecTargetRefsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecTargetRefs)(nil)).Elem()
}

func (i TelemetrySpecTargetRefsArray) ToTelemetrySpecTargetRefsArrayOutput() TelemetrySpecTargetRefsArrayOutput {
	return i.ToTelemetrySpecTargetRefsArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecTargetRefsArray) ToTelemetrySpecTargetRefsArrayOutputWithContext(ctx context.Context) TelemetrySpecTargetRefsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTargetRefsArrayOutput)
}

type TelemetrySpecTargetRefsOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTargetRefsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTargetRefs)(nil)).Elem()
}

func (o TelemetrySpecTargetRefsOutput) ToTelemetrySpecTargetRefsOutput() TelemetrySpecTargetRefsOutput {
	return o
}

func (o TelemetrySpecTargetRefsOutput) ToTelemetrySpecTargetRefsOutputWithContext(ctx context.Context) TelemetrySpecTargetRefsOutput {
	return o
}

// group is the group of the target resource.
func (o TelemetrySpecTargetRefsOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTargetRefs) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// kind is kind of the target resource.
func (o TelemetrySpecTargetRefsOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTargetRefs) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// name is the name of the target resource.
func (o TelemetrySpecTargetRefsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTargetRefs) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// namespace is the namespace of the referent.
func (o TelemetrySpecTargetRefsOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTargetRefs) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type TelemetrySpecTargetRefsArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTargetRefsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecTargetRefs)(nil)).Elem()
}

func (o TelemetrySpecTargetRefsArrayOutput) ToTelemetrySpecTargetRefsArrayOutput() TelemetrySpecTargetRefsArrayOutput {
	return o
}

func (o TelemetrySpecTargetRefsArrayOutput) ToTelemetrySpecTargetRefsArrayOutputWithContext(ctx context.Context) TelemetrySpecTargetRefsArrayOutput {
	return o
}

func (o TelemetrySpecTargetRefsArrayOutput) Index(i pulumi.IntInput) TelemetrySpecTargetRefsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecTargetRefs {
		return vs[0].([]TelemetrySpecTargetRefs)[vs[1].(int)]
	}).(TelemetrySpecTargetRefsOutput)
}

type TelemetrySpecTracing struct {
	// Optional.
	CustomTags map[string]interface{} `pulumi:"customTags"`
	// Controls span reporting.
	DisableSpanReporting *bool `pulumi:"disableSpanReporting"`
	// Allows tailoring of behavior to specific conditions.
	Match *TelemetrySpecTracingMatch `pulumi:"match"`
	// Optional.
	Providers []TelemetrySpecTracingProviders `pulumi:"providers"`
	// Controls the rate at which traffic will be selected for tracing if no prior sampling decision has been made.
	RandomSamplingPercentage     *float64 `pulumi:"randomSamplingPercentage"`
	UseRequestIdForTraceSampling *bool    `pulumi:"useRequestIdForTraceSampling"`
}

// TelemetrySpecTracingInput is an input type that accepts TelemetrySpecTracingArgs and TelemetrySpecTracingOutput values.
// You can construct a concrete instance of `TelemetrySpecTracingInput` via:
//
//	TelemetrySpecTracingArgs{...}
type TelemetrySpecTracingInput interface {
	pulumi.Input

	ToTelemetrySpecTracingOutput() TelemetrySpecTracingOutput
	ToTelemetrySpecTracingOutputWithContext(context.Context) TelemetrySpecTracingOutput
}

type TelemetrySpecTracingArgs struct {
	// Optional.
	CustomTags pulumi.MapInput `pulumi:"customTags"`
	// Controls span reporting.
	DisableSpanReporting pulumi.BoolPtrInput `pulumi:"disableSpanReporting"`
	// Allows tailoring of behavior to specific conditions.
	Match TelemetrySpecTracingMatchPtrInput `pulumi:"match"`
	// Optional.
	Providers TelemetrySpecTracingProvidersArrayInput `pulumi:"providers"`
	// Controls the rate at which traffic will be selected for tracing if no prior sampling decision has been made.
	RandomSamplingPercentage     pulumi.Float64PtrInput `pulumi:"randomSamplingPercentage"`
	UseRequestIdForTraceSampling pulumi.BoolPtrInput    `pulumi:"useRequestIdForTraceSampling"`
}

func (TelemetrySpecTracingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTracing)(nil)).Elem()
}

func (i TelemetrySpecTracingArgs) ToTelemetrySpecTracingOutput() TelemetrySpecTracingOutput {
	return i.ToTelemetrySpecTracingOutputWithContext(context.Background())
}

func (i TelemetrySpecTracingArgs) ToTelemetrySpecTracingOutputWithContext(ctx context.Context) TelemetrySpecTracingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTracingOutput)
}

// TelemetrySpecTracingArrayInput is an input type that accepts TelemetrySpecTracingArray and TelemetrySpecTracingArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecTracingArrayInput` via:
//
//	TelemetrySpecTracingArray{ TelemetrySpecTracingArgs{...} }
type TelemetrySpecTracingArrayInput interface {
	pulumi.Input

	ToTelemetrySpecTracingArrayOutput() TelemetrySpecTracingArrayOutput
	ToTelemetrySpecTracingArrayOutputWithContext(context.Context) TelemetrySpecTracingArrayOutput
}

type TelemetrySpecTracingArray []TelemetrySpecTracingInput

func (TelemetrySpecTracingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecTracing)(nil)).Elem()
}

func (i TelemetrySpecTracingArray) ToTelemetrySpecTracingArrayOutput() TelemetrySpecTracingArrayOutput {
	return i.ToTelemetrySpecTracingArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecTracingArray) ToTelemetrySpecTracingArrayOutputWithContext(ctx context.Context) TelemetrySpecTracingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTracingArrayOutput)
}

type TelemetrySpecTracingOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTracingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTracing)(nil)).Elem()
}

func (o TelemetrySpecTracingOutput) ToTelemetrySpecTracingOutput() TelemetrySpecTracingOutput {
	return o
}

func (o TelemetrySpecTracingOutput) ToTelemetrySpecTracingOutputWithContext(ctx context.Context) TelemetrySpecTracingOutput {
	return o
}

// Optional.
func (o TelemetrySpecTracingOutput) CustomTags() pulumi.MapOutput {
	return o.ApplyT(func(v TelemetrySpecTracing) map[string]interface{} { return v.CustomTags }).(pulumi.MapOutput)
}

// Controls span reporting.
func (o TelemetrySpecTracingOutput) DisableSpanReporting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTracing) *bool { return v.DisableSpanReporting }).(pulumi.BoolPtrOutput)
}

// Allows tailoring of behavior to specific conditions.
func (o TelemetrySpecTracingOutput) Match() TelemetrySpecTracingMatchPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTracing) *TelemetrySpecTracingMatch { return v.Match }).(TelemetrySpecTracingMatchPtrOutput)
}

// Optional.
func (o TelemetrySpecTracingOutput) Providers() TelemetrySpecTracingProvidersArrayOutput {
	return o.ApplyT(func(v TelemetrySpecTracing) []TelemetrySpecTracingProviders { return v.Providers }).(TelemetrySpecTracingProvidersArrayOutput)
}

// Controls the rate at which traffic will be selected for tracing if no prior sampling decision has been made.
func (o TelemetrySpecTracingOutput) RandomSamplingPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TelemetrySpecTracing) *float64 { return v.RandomSamplingPercentage }).(pulumi.Float64PtrOutput)
}

func (o TelemetrySpecTracingOutput) UseRequestIdForTraceSampling() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTracing) *bool { return v.UseRequestIdForTraceSampling }).(pulumi.BoolPtrOutput)
}

type TelemetrySpecTracingArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTracingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecTracing)(nil)).Elem()
}

func (o TelemetrySpecTracingArrayOutput) ToTelemetrySpecTracingArrayOutput() TelemetrySpecTracingArrayOutput {
	return o
}

func (o TelemetrySpecTracingArrayOutput) ToTelemetrySpecTracingArrayOutputWithContext(ctx context.Context) TelemetrySpecTracingArrayOutput {
	return o
}

func (o TelemetrySpecTracingArrayOutput) Index(i pulumi.IntInput) TelemetrySpecTracingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecTracing {
		return vs[0].([]TelemetrySpecTracing)[vs[1].(int)]
	}).(TelemetrySpecTracingOutput)
}

// Optional.
type TelemetrySpecTracingCustomTags struct {
}

// Allows tailoring of behavior to specific conditions.
type TelemetrySpecTracingMatch struct {
	// This determines whether or not to apply the tracing configuration based on the direction of traffic relative to the proxied workload.
	//
	// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
	Mode *string `pulumi:"mode"`
}

// TelemetrySpecTracingMatchInput is an input type that accepts TelemetrySpecTracingMatchArgs and TelemetrySpecTracingMatchOutput values.
// You can construct a concrete instance of `TelemetrySpecTracingMatchInput` via:
//
//	TelemetrySpecTracingMatchArgs{...}
type TelemetrySpecTracingMatchInput interface {
	pulumi.Input

	ToTelemetrySpecTracingMatchOutput() TelemetrySpecTracingMatchOutput
	ToTelemetrySpecTracingMatchOutputWithContext(context.Context) TelemetrySpecTracingMatchOutput
}

// Allows tailoring of behavior to specific conditions.
type TelemetrySpecTracingMatchArgs struct {
	// This determines whether or not to apply the tracing configuration based on the direction of traffic relative to the proxied workload.
	//
	// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
	Mode pulumi.StringPtrInput `pulumi:"mode"`
}

func (TelemetrySpecTracingMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTracingMatch)(nil)).Elem()
}

func (i TelemetrySpecTracingMatchArgs) ToTelemetrySpecTracingMatchOutput() TelemetrySpecTracingMatchOutput {
	return i.ToTelemetrySpecTracingMatchOutputWithContext(context.Background())
}

func (i TelemetrySpecTracingMatchArgs) ToTelemetrySpecTracingMatchOutputWithContext(ctx context.Context) TelemetrySpecTracingMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTracingMatchOutput)
}

func (i TelemetrySpecTracingMatchArgs) ToTelemetrySpecTracingMatchPtrOutput() TelemetrySpecTracingMatchPtrOutput {
	return i.ToTelemetrySpecTracingMatchPtrOutputWithContext(context.Background())
}

func (i TelemetrySpecTracingMatchArgs) ToTelemetrySpecTracingMatchPtrOutputWithContext(ctx context.Context) TelemetrySpecTracingMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTracingMatchOutput).ToTelemetrySpecTracingMatchPtrOutputWithContext(ctx)
}

// TelemetrySpecTracingMatchPtrInput is an input type that accepts TelemetrySpecTracingMatchArgs, TelemetrySpecTracingMatchPtr and TelemetrySpecTracingMatchPtrOutput values.
// You can construct a concrete instance of `TelemetrySpecTracingMatchPtrInput` via:
//
//	        TelemetrySpecTracingMatchArgs{...}
//
//	or:
//
//	        nil
type TelemetrySpecTracingMatchPtrInput interface {
	pulumi.Input

	ToTelemetrySpecTracingMatchPtrOutput() TelemetrySpecTracingMatchPtrOutput
	ToTelemetrySpecTracingMatchPtrOutputWithContext(context.Context) TelemetrySpecTracingMatchPtrOutput
}

type telemetrySpecTracingMatchPtrType TelemetrySpecTracingMatchArgs

func TelemetrySpecTracingMatchPtr(v *TelemetrySpecTracingMatchArgs) TelemetrySpecTracingMatchPtrInput {
	return (*telemetrySpecTracingMatchPtrType)(v)
}

func (*telemetrySpecTracingMatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecTracingMatch)(nil)).Elem()
}

func (i *telemetrySpecTracingMatchPtrType) ToTelemetrySpecTracingMatchPtrOutput() TelemetrySpecTracingMatchPtrOutput {
	return i.ToTelemetrySpecTracingMatchPtrOutputWithContext(context.Background())
}

func (i *telemetrySpecTracingMatchPtrType) ToTelemetrySpecTracingMatchPtrOutputWithContext(ctx context.Context) TelemetrySpecTracingMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTracingMatchPtrOutput)
}

// Allows tailoring of behavior to specific conditions.
type TelemetrySpecTracingMatchOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTracingMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTracingMatch)(nil)).Elem()
}

func (o TelemetrySpecTracingMatchOutput) ToTelemetrySpecTracingMatchOutput() TelemetrySpecTracingMatchOutput {
	return o
}

func (o TelemetrySpecTracingMatchOutput) ToTelemetrySpecTracingMatchOutputWithContext(ctx context.Context) TelemetrySpecTracingMatchOutput {
	return o
}

func (o TelemetrySpecTracingMatchOutput) ToTelemetrySpecTracingMatchPtrOutput() TelemetrySpecTracingMatchPtrOutput {
	return o.ToTelemetrySpecTracingMatchPtrOutputWithContext(context.Background())
}

func (o TelemetrySpecTracingMatchOutput) ToTelemetrySpecTracingMatchPtrOutputWithContext(ctx context.Context) TelemetrySpecTracingMatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TelemetrySpecTracingMatch) *TelemetrySpecTracingMatch {
		return &v
	}).(TelemetrySpecTracingMatchPtrOutput)
}

// This determines whether or not to apply the tracing configuration based on the direction of traffic relative to the proxied workload.
//
// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
func (o TelemetrySpecTracingMatchOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TelemetrySpecTracingMatch) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type TelemetrySpecTracingMatchPtrOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTracingMatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TelemetrySpecTracingMatch)(nil)).Elem()
}

func (o TelemetrySpecTracingMatchPtrOutput) ToTelemetrySpecTracingMatchPtrOutput() TelemetrySpecTracingMatchPtrOutput {
	return o
}

func (o TelemetrySpecTracingMatchPtrOutput) ToTelemetrySpecTracingMatchPtrOutputWithContext(ctx context.Context) TelemetrySpecTracingMatchPtrOutput {
	return o
}

func (o TelemetrySpecTracingMatchPtrOutput) Elem() TelemetrySpecTracingMatchOutput {
	return o.ApplyT(func(v *TelemetrySpecTracingMatch) TelemetrySpecTracingMatch {
		if v != nil {
			return *v
		}
		var ret TelemetrySpecTracingMatch
		return ret
	}).(TelemetrySpecTracingMatchOutput)
}

// This determines whether or not to apply the tracing configuration based on the direction of traffic relative to the proxied workload.
//
// Valid Options: CLIENT_AND_SERVER, CLIENT, SERVER
func (o TelemetrySpecTracingMatchPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TelemetrySpecTracingMatch) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

type TelemetrySpecTracingProviders struct {
	// Required.
	Name string `pulumi:"name"`
}

// TelemetrySpecTracingProvidersInput is an input type that accepts TelemetrySpecTracingProvidersArgs and TelemetrySpecTracingProvidersOutput values.
// You can construct a concrete instance of `TelemetrySpecTracingProvidersInput` via:
//
//	TelemetrySpecTracingProvidersArgs{...}
type TelemetrySpecTracingProvidersInput interface {
	pulumi.Input

	ToTelemetrySpecTracingProvidersOutput() TelemetrySpecTracingProvidersOutput
	ToTelemetrySpecTracingProvidersOutputWithContext(context.Context) TelemetrySpecTracingProvidersOutput
}

type TelemetrySpecTracingProvidersArgs struct {
	// Required.
	Name pulumi.StringInput `pulumi:"name"`
}

func (TelemetrySpecTracingProvidersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTracingProviders)(nil)).Elem()
}

func (i TelemetrySpecTracingProvidersArgs) ToTelemetrySpecTracingProvidersOutput() TelemetrySpecTracingProvidersOutput {
	return i.ToTelemetrySpecTracingProvidersOutputWithContext(context.Background())
}

func (i TelemetrySpecTracingProvidersArgs) ToTelemetrySpecTracingProvidersOutputWithContext(ctx context.Context) TelemetrySpecTracingProvidersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTracingProvidersOutput)
}

// TelemetrySpecTracingProvidersArrayInput is an input type that accepts TelemetrySpecTracingProvidersArray and TelemetrySpecTracingProvidersArrayOutput values.
// You can construct a concrete instance of `TelemetrySpecTracingProvidersArrayInput` via:
//
//	TelemetrySpecTracingProvidersArray{ TelemetrySpecTracingProvidersArgs{...} }
type TelemetrySpecTracingProvidersArrayInput interface {
	pulumi.Input

	ToTelemetrySpecTracingProvidersArrayOutput() TelemetrySpecTracingProvidersArrayOutput
	ToTelemetrySpecTracingProvidersArrayOutputWithContext(context.Context) TelemetrySpecTracingProvidersArrayOutput
}

type TelemetrySpecTracingProvidersArray []TelemetrySpecTracingProvidersInput

func (TelemetrySpecTracingProvidersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecTracingProviders)(nil)).Elem()
}

func (i TelemetrySpecTracingProvidersArray) ToTelemetrySpecTracingProvidersArrayOutput() TelemetrySpecTracingProvidersArrayOutput {
	return i.ToTelemetrySpecTracingProvidersArrayOutputWithContext(context.Background())
}

func (i TelemetrySpecTracingProvidersArray) ToTelemetrySpecTracingProvidersArrayOutputWithContext(ctx context.Context) TelemetrySpecTracingProvidersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TelemetrySpecTracingProvidersArrayOutput)
}

type TelemetrySpecTracingProvidersOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTracingProvidersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TelemetrySpecTracingProviders)(nil)).Elem()
}

func (o TelemetrySpecTracingProvidersOutput) ToTelemetrySpecTracingProvidersOutput() TelemetrySpecTracingProvidersOutput {
	return o
}

func (o TelemetrySpecTracingProvidersOutput) ToTelemetrySpecTracingProvidersOutputWithContext(ctx context.Context) TelemetrySpecTracingProvidersOutput {
	return o
}

// Required.
func (o TelemetrySpecTracingProvidersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TelemetrySpecTracingProviders) string { return v.Name }).(pulumi.StringOutput)
}

type TelemetrySpecTracingProvidersArrayOutput struct{ *pulumi.OutputState }

func (TelemetrySpecTracingProvidersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TelemetrySpecTracingProviders)(nil)).Elem()
}

func (o TelemetrySpecTracingProvidersArrayOutput) ToTelemetrySpecTracingProvidersArrayOutput() TelemetrySpecTracingProvidersArrayOutput {
	return o
}

func (o TelemetrySpecTracingProvidersArrayOutput) ToTelemetrySpecTracingProvidersArrayOutputWithContext(ctx context.Context) TelemetrySpecTracingProvidersArrayOutput {
	return o
}

func (o TelemetrySpecTracingProvidersArrayOutput) Index(i pulumi.IntInput) TelemetrySpecTracingProvidersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TelemetrySpecTracingProviders {
		return vs[0].([]TelemetrySpecTracingProviders)[vs[1].(int)]
	}).(TelemetrySpecTracingProvidersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecInput)(nil)).Elem(), TelemetrySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecPtrInput)(nil)).Elem(), TelemetrySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessLoggingInput)(nil)).Elem(), TelemetrySpecAccessLoggingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessLoggingArrayInput)(nil)).Elem(), TelemetrySpecAccessLoggingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessLoggingFilterInput)(nil)).Elem(), TelemetrySpecAccessLoggingFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessLoggingFilterPtrInput)(nil)).Elem(), TelemetrySpecAccessLoggingFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessLoggingMatchInput)(nil)).Elem(), TelemetrySpecAccessLoggingMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessLoggingMatchPtrInput)(nil)).Elem(), TelemetrySpecAccessLoggingMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessLoggingProvidersInput)(nil)).Elem(), TelemetrySpecAccessLoggingProvidersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecAccessLoggingProvidersArrayInput)(nil)).Elem(), TelemetrySpecAccessLoggingProvidersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsInput)(nil)).Elem(), TelemetrySpecMetricsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsArrayInput)(nil)).Elem(), TelemetrySpecMetricsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsOverridesInput)(nil)).Elem(), TelemetrySpecMetricsOverridesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsOverridesArrayInput)(nil)).Elem(), TelemetrySpecMetricsOverridesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsOverridesTagOverridesInput)(nil)).Elem(), TelemetrySpecMetricsOverridesTagOverridesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsOverridesTagOverridesMapInput)(nil)).Elem(), TelemetrySpecMetricsOverridesTagOverridesMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsProvidersInput)(nil)).Elem(), TelemetrySpecMetricsProvidersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecMetricsProvidersArrayInput)(nil)).Elem(), TelemetrySpecMetricsProvidersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecSelectorInput)(nil)).Elem(), TelemetrySpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecSelectorPtrInput)(nil)).Elem(), TelemetrySpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTargetRefInput)(nil)).Elem(), TelemetrySpecTargetRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTargetRefPtrInput)(nil)).Elem(), TelemetrySpecTargetRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTargetRefsInput)(nil)).Elem(), TelemetrySpecTargetRefsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTargetRefsArrayInput)(nil)).Elem(), TelemetrySpecTargetRefsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTracingInput)(nil)).Elem(), TelemetrySpecTracingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTracingArrayInput)(nil)).Elem(), TelemetrySpecTracingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTracingMatchInput)(nil)).Elem(), TelemetrySpecTracingMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTracingMatchPtrInput)(nil)).Elem(), TelemetrySpecTracingMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTracingProvidersInput)(nil)).Elem(), TelemetrySpecTracingProvidersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TelemetrySpecTracingProvidersArrayInput)(nil)).Elem(), TelemetrySpecTracingProvidersArray{})
	pulumi.RegisterOutputType(TelemetrySpecOutput{})
	pulumi.RegisterOutputType(TelemetrySpecPtrOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessLoggingOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessLoggingArrayOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessLoggingFilterOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessLoggingFilterPtrOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessLoggingMatchOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessLoggingMatchPtrOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessLoggingProvidersOutput{})
	pulumi.RegisterOutputType(TelemetrySpecAccessLoggingProvidersArrayOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsArrayOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsOverridesOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsOverridesArrayOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsOverridesTagOverridesOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsOverridesTagOverridesMapOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsProvidersOutput{})
	pulumi.RegisterOutputType(TelemetrySpecMetricsProvidersArrayOutput{})
	pulumi.RegisterOutputType(TelemetrySpecSelectorOutput{})
	pulumi.RegisterOutputType(TelemetrySpecSelectorPtrOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTargetRefOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTargetRefPtrOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTargetRefsOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTargetRefsArrayOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTracingOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTracingArrayOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTracingMatchOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTracingMatchPtrOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTracingProvidersOutput{})
	pulumi.RegisterOutputType(TelemetrySpecTracingProvidersArrayOutput{})
}
