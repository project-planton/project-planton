// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type OperatorConfiguration struct {
	pulumi.CustomResourceState

	ApiVersion    pulumi.StringOutput                      `pulumi:"apiVersion"`
	Configuration OperatorConfigurationConfigurationOutput `pulumi:"configuration"`
	Kind          pulumi.StringOutput                      `pulumi:"kind"`
	Metadata      metav1.ObjectMetaPtrOutput               `pulumi:"metadata"`
	Status        pulumi.StringMapOutput                   `pulumi:"status"`
}

// NewOperatorConfiguration registers a new resource with the given unique name, arguments, and options.
func NewOperatorConfiguration(ctx *pulumi.Context,
	name string, args *OperatorConfigurationArgs, opts ...pulumi.ResourceOption) (*OperatorConfiguration, error) {
	if args == nil {
		args = &OperatorConfigurationArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("acid.zalan.do/v1")
	if args.Configuration != nil {
		args.Configuration = args.Configuration.ToOperatorConfigurationConfigurationPtrOutput().ApplyT(func(v *OperatorConfigurationConfiguration) *OperatorConfigurationConfiguration { return v.Defaults() }).(OperatorConfigurationConfigurationPtrOutput)
	}
	args.Kind = pulumi.StringPtr("OperatorConfiguration")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource OperatorConfiguration
	err := ctx.RegisterResource("kubernetes:acid.zalan.do/v1:OperatorConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOperatorConfiguration gets an existing OperatorConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOperatorConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OperatorConfigurationState, opts ...pulumi.ResourceOption) (*OperatorConfiguration, error) {
	var resource OperatorConfiguration
	err := ctx.ReadResource("kubernetes:acid.zalan.do/v1:OperatorConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OperatorConfiguration resources.
type operatorConfigurationState struct {
}

type OperatorConfigurationState struct {
}

func (OperatorConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*operatorConfigurationState)(nil)).Elem()
}

type operatorConfigurationArgs struct {
	ApiVersion    *string                             `pulumi:"apiVersion"`
	Configuration *OperatorConfigurationConfiguration `pulumi:"configuration"`
	Kind          *string                             `pulumi:"kind"`
	Metadata      *metav1.ObjectMeta                  `pulumi:"metadata"`
	Status        map[string]string                   `pulumi:"status"`
}

// The set of arguments for constructing a OperatorConfiguration resource.
type OperatorConfigurationArgs struct {
	ApiVersion    pulumi.StringPtrInput
	Configuration OperatorConfigurationConfigurationPtrInput
	Kind          pulumi.StringPtrInput
	Metadata      metav1.ObjectMetaPtrInput
	Status        pulumi.StringMapInput
}

func (OperatorConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*operatorConfigurationArgs)(nil)).Elem()
}

type OperatorConfigurationInput interface {
	pulumi.Input

	ToOperatorConfigurationOutput() OperatorConfigurationOutput
	ToOperatorConfigurationOutputWithContext(ctx context.Context) OperatorConfigurationOutput
}

func (*OperatorConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorConfiguration)(nil)).Elem()
}

func (i *OperatorConfiguration) ToOperatorConfigurationOutput() OperatorConfigurationOutput {
	return i.ToOperatorConfigurationOutputWithContext(context.Background())
}

func (i *OperatorConfiguration) ToOperatorConfigurationOutputWithContext(ctx context.Context) OperatorConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorConfigurationOutput)
}

type OperatorConfigurationOutput struct{ *pulumi.OutputState }

func (OperatorConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorConfiguration)(nil)).Elem()
}

func (o OperatorConfigurationOutput) ToOperatorConfigurationOutput() OperatorConfigurationOutput {
	return o
}

func (o OperatorConfigurationOutput) ToOperatorConfigurationOutputWithContext(ctx context.Context) OperatorConfigurationOutput {
	return o
}

func (o OperatorConfigurationOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *OperatorConfiguration) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

func (o OperatorConfigurationOutput) Configuration() OperatorConfigurationConfigurationOutput {
	return o.ApplyT(func(v *OperatorConfiguration) OperatorConfigurationConfigurationOutput { return v.Configuration }).(OperatorConfigurationConfigurationOutput)
}

func (o OperatorConfigurationOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *OperatorConfiguration) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

func (o OperatorConfigurationOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *OperatorConfiguration) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o OperatorConfigurationOutput) Status() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OperatorConfiguration) pulumi.StringMapOutput { return v.Status }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OperatorConfigurationInput)(nil)).Elem(), &OperatorConfiguration{})
	pulumi.RegisterOutputType(OperatorConfigurationOutput{})
}
