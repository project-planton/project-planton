// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PostgresTeam struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringOutput        `pulumi:"apiVersion"`
	Kind       pulumi.StringOutput        `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	Spec       PostgresTeamSpecOutput     `pulumi:"spec"`
}

// NewPostgresTeam registers a new resource with the given unique name, arguments, and options.
func NewPostgresTeam(ctx *pulumi.Context,
	name string, args *PostgresTeamArgs, opts ...pulumi.ResourceOption) (*PostgresTeam, error) {
	if args == nil {
		args = &PostgresTeamArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("acid.zalan.do/v1")
	args.Kind = pulumi.StringPtr("PostgresTeam")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PostgresTeam
	err := ctx.RegisterResource("kubernetes:acid.zalan.do/v1:PostgresTeam", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPostgresTeam gets an existing PostgresTeam resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPostgresTeam(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PostgresTeamState, opts ...pulumi.ResourceOption) (*PostgresTeam, error) {
	var resource PostgresTeam
	err := ctx.ReadResource("kubernetes:acid.zalan.do/v1:PostgresTeam", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PostgresTeam resources.
type postgresTeamState struct {
}

type PostgresTeamState struct {
}

func (PostgresTeamState) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresTeamState)(nil)).Elem()
}

type postgresTeamArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	Spec       *PostgresTeamSpec  `pulumi:"spec"`
}

// The set of arguments for constructing a PostgresTeam resource.
type PostgresTeamArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	Spec       PostgresTeamSpecPtrInput
}

func (PostgresTeamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresTeamArgs)(nil)).Elem()
}

type PostgresTeamInput interface {
	pulumi.Input

	ToPostgresTeamOutput() PostgresTeamOutput
	ToPostgresTeamOutputWithContext(ctx context.Context) PostgresTeamOutput
}

func (*PostgresTeam) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresTeam)(nil)).Elem()
}

func (i *PostgresTeam) ToPostgresTeamOutput() PostgresTeamOutput {
	return i.ToPostgresTeamOutputWithContext(context.Background())
}

func (i *PostgresTeam) ToPostgresTeamOutputWithContext(ctx context.Context) PostgresTeamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresTeamOutput)
}

type PostgresTeamOutput struct{ *pulumi.OutputState }

func (PostgresTeamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresTeam)(nil)).Elem()
}

func (o PostgresTeamOutput) ToPostgresTeamOutput() PostgresTeamOutput {
	return o
}

func (o PostgresTeamOutput) ToPostgresTeamOutputWithContext(ctx context.Context) PostgresTeamOutput {
	return o
}

func (o PostgresTeamOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresTeam) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

func (o PostgresTeamOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresTeam) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

func (o PostgresTeamOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *PostgresTeam) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o PostgresTeamOutput) Spec() PostgresTeamSpecOutput {
	return o.ApplyT(func(v *PostgresTeam) PostgresTeamSpecOutput { return v.Spec }).(PostgresTeamSpecOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresTeamInput)(nil)).Elem(), &PostgresTeam{})
	pulumi.RegisterOutputType(PostgresTeamOutput{})
}
