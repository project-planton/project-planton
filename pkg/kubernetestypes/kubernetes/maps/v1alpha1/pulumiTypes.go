// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// ElasticMapsServer represents an Elastic Map Server resource in a Kubernetes cluster.
type ElasticMapsServerType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// MapsSpec holds the specification of an Elastic Maps Server instance.
	Spec *ElasticMapsServerSpec `pulumi:"spec"`
	// MapsStatus defines the observed state of Elastic Maps Server
	Status *ElasticMapsServerStatus `pulumi:"status"`
}

type ElasticMapsServerMetadata struct {
}

// MapsSpec holds the specification of an Elastic Maps Server instance.
type ElasticMapsServerSpec struct {
	// Config holds the ElasticMapsServer configuration. See: https://www.elastic.co/guide/en/kibana/current/maps-connect-to-ems.html#elastic-maps-server-configuration
	Config map[string]interface{} `pulumi:"config"`
	// ConfigRef contains a reference to an existing Kubernetes Secret holding the Elastic Maps Server configuration.
	// Configuration settings are merged and have precedence over settings specified in `config`.
	ConfigRef *ElasticMapsServerSpecConfigRef `pulumi:"configRef"`
	// Count of Elastic Maps Server instances to deploy.
	Count *int `pulumi:"count"`
	// ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
	ElasticsearchRef *ElasticMapsServerSpecElasticsearchRef `pulumi:"elasticsearchRef"`
	// HTTP holds the HTTP layer configuration for Elastic Maps Server.
	Http *ElasticMapsServerSpecHttp `pulumi:"http"`
	// Image is the Elastic Maps Server Docker image to deploy.
	Image *string `pulumi:"image"`
	// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Elastic Maps Server pods
	PodTemplate map[string]interface{} `pulumi:"podTemplate"`
	// RevisionHistoryLimit is the number of revisions to retain to allow rollback in the underlying Deployment.
	RevisionHistoryLimit *int `pulumi:"revisionHistoryLimit"`
	// ServiceAccountName is used to check access from the current resource to a resource (for ex. Elasticsearch) in a different namespace.
	// Can only be used if ECK is enforcing RBAC on references.
	ServiceAccountName *string `pulumi:"serviceAccountName"`
	// Version of Elastic Maps Server.
	Version string `pulumi:"version"`
}

// ElasticMapsServerSpecInput is an input type that accepts ElasticMapsServerSpecArgs and ElasticMapsServerSpecOutput values.
// You can construct a concrete instance of `ElasticMapsServerSpecInput` via:
//
//	ElasticMapsServerSpecArgs{...}
type ElasticMapsServerSpecInput interface {
	pulumi.Input

	ToElasticMapsServerSpecOutput() ElasticMapsServerSpecOutput
	ToElasticMapsServerSpecOutputWithContext(context.Context) ElasticMapsServerSpecOutput
}

// MapsSpec holds the specification of an Elastic Maps Server instance.
type ElasticMapsServerSpecArgs struct {
	// Config holds the ElasticMapsServer configuration. See: https://www.elastic.co/guide/en/kibana/current/maps-connect-to-ems.html#elastic-maps-server-configuration
	Config pulumi.MapInput `pulumi:"config"`
	// ConfigRef contains a reference to an existing Kubernetes Secret holding the Elastic Maps Server configuration.
	// Configuration settings are merged and have precedence over settings specified in `config`.
	ConfigRef ElasticMapsServerSpecConfigRefPtrInput `pulumi:"configRef"`
	// Count of Elastic Maps Server instances to deploy.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
	ElasticsearchRef ElasticMapsServerSpecElasticsearchRefPtrInput `pulumi:"elasticsearchRef"`
	// HTTP holds the HTTP layer configuration for Elastic Maps Server.
	Http ElasticMapsServerSpecHttpPtrInput `pulumi:"http"`
	// Image is the Elastic Maps Server Docker image to deploy.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Elastic Maps Server pods
	PodTemplate pulumi.MapInput `pulumi:"podTemplate"`
	// RevisionHistoryLimit is the number of revisions to retain to allow rollback in the underlying Deployment.
	RevisionHistoryLimit pulumi.IntPtrInput `pulumi:"revisionHistoryLimit"`
	// ServiceAccountName is used to check access from the current resource to a resource (for ex. Elasticsearch) in a different namespace.
	// Can only be used if ECK is enforcing RBAC on references.
	ServiceAccountName pulumi.StringPtrInput `pulumi:"serviceAccountName"`
	// Version of Elastic Maps Server.
	Version pulumi.StringInput `pulumi:"version"`
}

func (ElasticMapsServerSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticMapsServerSpec)(nil)).Elem()
}

func (i ElasticMapsServerSpecArgs) ToElasticMapsServerSpecOutput() ElasticMapsServerSpecOutput {
	return i.ToElasticMapsServerSpecOutputWithContext(context.Background())
}

func (i ElasticMapsServerSpecArgs) ToElasticMapsServerSpecOutputWithContext(ctx context.Context) ElasticMapsServerSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecOutput)
}

func (i ElasticMapsServerSpecArgs) ToElasticMapsServerSpecPtrOutput() ElasticMapsServerSpecPtrOutput {
	return i.ToElasticMapsServerSpecPtrOutputWithContext(context.Background())
}

func (i ElasticMapsServerSpecArgs) ToElasticMapsServerSpecPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecOutput).ToElasticMapsServerSpecPtrOutputWithContext(ctx)
}

// ElasticMapsServerSpecPtrInput is an input type that accepts ElasticMapsServerSpecArgs, ElasticMapsServerSpecPtr and ElasticMapsServerSpecPtrOutput values.
// You can construct a concrete instance of `ElasticMapsServerSpecPtrInput` via:
//
//	        ElasticMapsServerSpecArgs{...}
//
//	or:
//
//	        nil
type ElasticMapsServerSpecPtrInput interface {
	pulumi.Input

	ToElasticMapsServerSpecPtrOutput() ElasticMapsServerSpecPtrOutput
	ToElasticMapsServerSpecPtrOutputWithContext(context.Context) ElasticMapsServerSpecPtrOutput
}

type elasticMapsServerSpecPtrType ElasticMapsServerSpecArgs

func ElasticMapsServerSpecPtr(v *ElasticMapsServerSpecArgs) ElasticMapsServerSpecPtrInput {
	return (*elasticMapsServerSpecPtrType)(v)
}

func (*elasticMapsServerSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticMapsServerSpec)(nil)).Elem()
}

func (i *elasticMapsServerSpecPtrType) ToElasticMapsServerSpecPtrOutput() ElasticMapsServerSpecPtrOutput {
	return i.ToElasticMapsServerSpecPtrOutputWithContext(context.Background())
}

func (i *elasticMapsServerSpecPtrType) ToElasticMapsServerSpecPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecPtrOutput)
}

// MapsSpec holds the specification of an Elastic Maps Server instance.
type ElasticMapsServerSpecOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticMapsServerSpec)(nil)).Elem()
}

func (o ElasticMapsServerSpecOutput) ToElasticMapsServerSpecOutput() ElasticMapsServerSpecOutput {
	return o
}

func (o ElasticMapsServerSpecOutput) ToElasticMapsServerSpecOutputWithContext(ctx context.Context) ElasticMapsServerSpecOutput {
	return o
}

func (o ElasticMapsServerSpecOutput) ToElasticMapsServerSpecPtrOutput() ElasticMapsServerSpecPtrOutput {
	return o.ToElasticMapsServerSpecPtrOutputWithContext(context.Background())
}

func (o ElasticMapsServerSpecOutput) ToElasticMapsServerSpecPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticMapsServerSpec) *ElasticMapsServerSpec {
		return &v
	}).(ElasticMapsServerSpecPtrOutput)
}

// Config holds the ElasticMapsServer configuration. See: https://www.elastic.co/guide/en/kibana/current/maps-connect-to-ems.html#elastic-maps-server-configuration
func (o ElasticMapsServerSpecOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v ElasticMapsServerSpec) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

// ConfigRef contains a reference to an existing Kubernetes Secret holding the Elastic Maps Server configuration.
// Configuration settings are merged and have precedence over settings specified in `config`.
func (o ElasticMapsServerSpecOutput) ConfigRef() ElasticMapsServerSpecConfigRefPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpec) *ElasticMapsServerSpecConfigRef { return v.ConfigRef }).(ElasticMapsServerSpecConfigRefPtrOutput)
}

// Count of Elastic Maps Server instances to deploy.
func (o ElasticMapsServerSpecOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpec) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
func (o ElasticMapsServerSpecOutput) ElasticsearchRef() ElasticMapsServerSpecElasticsearchRefPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpec) *ElasticMapsServerSpecElasticsearchRef { return v.ElasticsearchRef }).(ElasticMapsServerSpecElasticsearchRefPtrOutput)
}

// HTTP holds the HTTP layer configuration for Elastic Maps Server.
func (o ElasticMapsServerSpecOutput) Http() ElasticMapsServerSpecHttpPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpec) *ElasticMapsServerSpecHttp { return v.Http }).(ElasticMapsServerSpecHttpPtrOutput)
}

// Image is the Elastic Maps Server Docker image to deploy.
func (o ElasticMapsServerSpecOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpec) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Elastic Maps Server pods
func (o ElasticMapsServerSpecOutput) PodTemplate() pulumi.MapOutput {
	return o.ApplyT(func(v ElasticMapsServerSpec) map[string]interface{} { return v.PodTemplate }).(pulumi.MapOutput)
}

// RevisionHistoryLimit is the number of revisions to retain to allow rollback in the underlying Deployment.
func (o ElasticMapsServerSpecOutput) RevisionHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpec) *int { return v.RevisionHistoryLimit }).(pulumi.IntPtrOutput)
}

// ServiceAccountName is used to check access from the current resource to a resource (for ex. Elasticsearch) in a different namespace.
// Can only be used if ECK is enforcing RBAC on references.
func (o ElasticMapsServerSpecOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpec) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

// Version of Elastic Maps Server.
func (o ElasticMapsServerSpecOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticMapsServerSpec) string { return v.Version }).(pulumi.StringOutput)
}

type ElasticMapsServerSpecPtrOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticMapsServerSpec)(nil)).Elem()
}

func (o ElasticMapsServerSpecPtrOutput) ToElasticMapsServerSpecPtrOutput() ElasticMapsServerSpecPtrOutput {
	return o
}

func (o ElasticMapsServerSpecPtrOutput) ToElasticMapsServerSpecPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecPtrOutput {
	return o
}

func (o ElasticMapsServerSpecPtrOutput) Elem() ElasticMapsServerSpecOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpec) ElasticMapsServerSpec {
		if v != nil {
			return *v
		}
		var ret ElasticMapsServerSpec
		return ret
	}).(ElasticMapsServerSpecOutput)
}

// Config holds the ElasticMapsServer configuration. See: https://www.elastic.co/guide/en/kibana/current/maps-connect-to-ems.html#elastic-maps-server-configuration
func (o ElasticMapsServerSpecPtrOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.MapOutput)
}

// ConfigRef contains a reference to an existing Kubernetes Secret holding the Elastic Maps Server configuration.
// Configuration settings are merged and have precedence over settings specified in `config`.
func (o ElasticMapsServerSpecPtrOutput) ConfigRef() ElasticMapsServerSpecConfigRefPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpec) *ElasticMapsServerSpecConfigRef {
		if v == nil {
			return nil
		}
		return v.ConfigRef
	}).(ElasticMapsServerSpecConfigRefPtrOutput)
}

// Count of Elastic Maps Server instances to deploy.
func (o ElasticMapsServerSpecPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpec) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
func (o ElasticMapsServerSpecPtrOutput) ElasticsearchRef() ElasticMapsServerSpecElasticsearchRefPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpec) *ElasticMapsServerSpecElasticsearchRef {
		if v == nil {
			return nil
		}
		return v.ElasticsearchRef
	}).(ElasticMapsServerSpecElasticsearchRefPtrOutput)
}

// HTTP holds the HTTP layer configuration for Elastic Maps Server.
func (o ElasticMapsServerSpecPtrOutput) Http() ElasticMapsServerSpecHttpPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpec) *ElasticMapsServerSpecHttp {
		if v == nil {
			return nil
		}
		return v.Http
	}).(ElasticMapsServerSpecHttpPtrOutput)
}

// Image is the Elastic Maps Server Docker image to deploy.
func (o ElasticMapsServerSpecPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpec) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// PodTemplate provides customisation options (labels, annotations, affinity rules, resource requests, and so on) for the Elastic Maps Server pods
func (o ElasticMapsServerSpecPtrOutput) PodTemplate() pulumi.MapOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpec) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.PodTemplate
	}).(pulumi.MapOutput)
}

// RevisionHistoryLimit is the number of revisions to retain to allow rollback in the underlying Deployment.
func (o ElasticMapsServerSpecPtrOutput) RevisionHistoryLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpec) *int {
		if v == nil {
			return nil
		}
		return v.RevisionHistoryLimit
	}).(pulumi.IntPtrOutput)
}

// ServiceAccountName is used to check access from the current resource to a resource (for ex. Elasticsearch) in a different namespace.
// Can only be used if ECK is enforcing RBAC on references.
func (o ElasticMapsServerSpecPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpec) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

// Version of Elastic Maps Server.
func (o ElasticMapsServerSpecPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

// ConfigRef contains a reference to an existing Kubernetes Secret holding the Elastic Maps Server configuration.
// Configuration settings are merged and have precedence over settings specified in `config`.
type ElasticMapsServerSpecConfigRef struct {
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// ElasticMapsServerSpecConfigRefInput is an input type that accepts ElasticMapsServerSpecConfigRefArgs and ElasticMapsServerSpecConfigRefOutput values.
// You can construct a concrete instance of `ElasticMapsServerSpecConfigRefInput` via:
//
//	ElasticMapsServerSpecConfigRefArgs{...}
type ElasticMapsServerSpecConfigRefInput interface {
	pulumi.Input

	ToElasticMapsServerSpecConfigRefOutput() ElasticMapsServerSpecConfigRefOutput
	ToElasticMapsServerSpecConfigRefOutputWithContext(context.Context) ElasticMapsServerSpecConfigRefOutput
}

// ConfigRef contains a reference to an existing Kubernetes Secret holding the Elastic Maps Server configuration.
// Configuration settings are merged and have precedence over settings specified in `config`.
type ElasticMapsServerSpecConfigRefArgs struct {
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (ElasticMapsServerSpecConfigRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticMapsServerSpecConfigRef)(nil)).Elem()
}

func (i ElasticMapsServerSpecConfigRefArgs) ToElasticMapsServerSpecConfigRefOutput() ElasticMapsServerSpecConfigRefOutput {
	return i.ToElasticMapsServerSpecConfigRefOutputWithContext(context.Background())
}

func (i ElasticMapsServerSpecConfigRefArgs) ToElasticMapsServerSpecConfigRefOutputWithContext(ctx context.Context) ElasticMapsServerSpecConfigRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecConfigRefOutput)
}

func (i ElasticMapsServerSpecConfigRefArgs) ToElasticMapsServerSpecConfigRefPtrOutput() ElasticMapsServerSpecConfigRefPtrOutput {
	return i.ToElasticMapsServerSpecConfigRefPtrOutputWithContext(context.Background())
}

func (i ElasticMapsServerSpecConfigRefArgs) ToElasticMapsServerSpecConfigRefPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecConfigRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecConfigRefOutput).ToElasticMapsServerSpecConfigRefPtrOutputWithContext(ctx)
}

// ElasticMapsServerSpecConfigRefPtrInput is an input type that accepts ElasticMapsServerSpecConfigRefArgs, ElasticMapsServerSpecConfigRefPtr and ElasticMapsServerSpecConfigRefPtrOutput values.
// You can construct a concrete instance of `ElasticMapsServerSpecConfigRefPtrInput` via:
//
//	        ElasticMapsServerSpecConfigRefArgs{...}
//
//	or:
//
//	        nil
type ElasticMapsServerSpecConfigRefPtrInput interface {
	pulumi.Input

	ToElasticMapsServerSpecConfigRefPtrOutput() ElasticMapsServerSpecConfigRefPtrOutput
	ToElasticMapsServerSpecConfigRefPtrOutputWithContext(context.Context) ElasticMapsServerSpecConfigRefPtrOutput
}

type elasticMapsServerSpecConfigRefPtrType ElasticMapsServerSpecConfigRefArgs

func ElasticMapsServerSpecConfigRefPtr(v *ElasticMapsServerSpecConfigRefArgs) ElasticMapsServerSpecConfigRefPtrInput {
	return (*elasticMapsServerSpecConfigRefPtrType)(v)
}

func (*elasticMapsServerSpecConfigRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticMapsServerSpecConfigRef)(nil)).Elem()
}

func (i *elasticMapsServerSpecConfigRefPtrType) ToElasticMapsServerSpecConfigRefPtrOutput() ElasticMapsServerSpecConfigRefPtrOutput {
	return i.ToElasticMapsServerSpecConfigRefPtrOutputWithContext(context.Background())
}

func (i *elasticMapsServerSpecConfigRefPtrType) ToElasticMapsServerSpecConfigRefPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecConfigRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecConfigRefPtrOutput)
}

// ConfigRef contains a reference to an existing Kubernetes Secret holding the Elastic Maps Server configuration.
// Configuration settings are merged and have precedence over settings specified in `config`.
type ElasticMapsServerSpecConfigRefOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerSpecConfigRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticMapsServerSpecConfigRef)(nil)).Elem()
}

func (o ElasticMapsServerSpecConfigRefOutput) ToElasticMapsServerSpecConfigRefOutput() ElasticMapsServerSpecConfigRefOutput {
	return o
}

func (o ElasticMapsServerSpecConfigRefOutput) ToElasticMapsServerSpecConfigRefOutputWithContext(ctx context.Context) ElasticMapsServerSpecConfigRefOutput {
	return o
}

func (o ElasticMapsServerSpecConfigRefOutput) ToElasticMapsServerSpecConfigRefPtrOutput() ElasticMapsServerSpecConfigRefPtrOutput {
	return o.ToElasticMapsServerSpecConfigRefPtrOutputWithContext(context.Background())
}

func (o ElasticMapsServerSpecConfigRefOutput) ToElasticMapsServerSpecConfigRefPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecConfigRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticMapsServerSpecConfigRef) *ElasticMapsServerSpecConfigRef {
		return &v
	}).(ElasticMapsServerSpecConfigRefPtrOutput)
}

// SecretName is the name of the secret.
func (o ElasticMapsServerSpecConfigRefOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecConfigRef) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type ElasticMapsServerSpecConfigRefPtrOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerSpecConfigRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticMapsServerSpecConfigRef)(nil)).Elem()
}

func (o ElasticMapsServerSpecConfigRefPtrOutput) ToElasticMapsServerSpecConfigRefPtrOutput() ElasticMapsServerSpecConfigRefPtrOutput {
	return o
}

func (o ElasticMapsServerSpecConfigRefPtrOutput) ToElasticMapsServerSpecConfigRefPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecConfigRefPtrOutput {
	return o
}

func (o ElasticMapsServerSpecConfigRefPtrOutput) Elem() ElasticMapsServerSpecConfigRefOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecConfigRef) ElasticMapsServerSpecConfigRef {
		if v != nil {
			return *v
		}
		var ret ElasticMapsServerSpecConfigRef
		return ret
	}).(ElasticMapsServerSpecConfigRefOutput)
}

// SecretName is the name of the secret.
func (o ElasticMapsServerSpecConfigRefPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
type ElasticMapsServerSpecElasticsearchRef struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name *string `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace *string `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName *string `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName *string `pulumi:"serviceName"`
}

// ElasticMapsServerSpecElasticsearchRefInput is an input type that accepts ElasticMapsServerSpecElasticsearchRefArgs and ElasticMapsServerSpecElasticsearchRefOutput values.
// You can construct a concrete instance of `ElasticMapsServerSpecElasticsearchRefInput` via:
//
//	ElasticMapsServerSpecElasticsearchRefArgs{...}
type ElasticMapsServerSpecElasticsearchRefInput interface {
	pulumi.Input

	ToElasticMapsServerSpecElasticsearchRefOutput() ElasticMapsServerSpecElasticsearchRefOutput
	ToElasticMapsServerSpecElasticsearchRefOutputWithContext(context.Context) ElasticMapsServerSpecElasticsearchRefOutput
}

// ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
type ElasticMapsServerSpecElasticsearchRefArgs struct {
	// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
	// Elastic resource not managed by the operator. The referenced secret must contain the following:
	// - `url`: the URL to reach the Elastic resource
	// - `username`: the username of the user to be authenticated to the Elastic resource
	// - `password`: the password of the user to be authenticated to the Elastic resource
	// - `ca.crt`: the CA certificate in PEM format (optional)
	// - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
	//   This field cannot be used in combination with the other fields name, namespace or serviceName.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
	// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
	// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
	// the referenced resource is used.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
}

func (ElasticMapsServerSpecElasticsearchRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticMapsServerSpecElasticsearchRef)(nil)).Elem()
}

func (i ElasticMapsServerSpecElasticsearchRefArgs) ToElasticMapsServerSpecElasticsearchRefOutput() ElasticMapsServerSpecElasticsearchRefOutput {
	return i.ToElasticMapsServerSpecElasticsearchRefOutputWithContext(context.Background())
}

func (i ElasticMapsServerSpecElasticsearchRefArgs) ToElasticMapsServerSpecElasticsearchRefOutputWithContext(ctx context.Context) ElasticMapsServerSpecElasticsearchRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecElasticsearchRefOutput)
}

func (i ElasticMapsServerSpecElasticsearchRefArgs) ToElasticMapsServerSpecElasticsearchRefPtrOutput() ElasticMapsServerSpecElasticsearchRefPtrOutput {
	return i.ToElasticMapsServerSpecElasticsearchRefPtrOutputWithContext(context.Background())
}

func (i ElasticMapsServerSpecElasticsearchRefArgs) ToElasticMapsServerSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecElasticsearchRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecElasticsearchRefOutput).ToElasticMapsServerSpecElasticsearchRefPtrOutputWithContext(ctx)
}

// ElasticMapsServerSpecElasticsearchRefPtrInput is an input type that accepts ElasticMapsServerSpecElasticsearchRefArgs, ElasticMapsServerSpecElasticsearchRefPtr and ElasticMapsServerSpecElasticsearchRefPtrOutput values.
// You can construct a concrete instance of `ElasticMapsServerSpecElasticsearchRefPtrInput` via:
//
//	        ElasticMapsServerSpecElasticsearchRefArgs{...}
//
//	or:
//
//	        nil
type ElasticMapsServerSpecElasticsearchRefPtrInput interface {
	pulumi.Input

	ToElasticMapsServerSpecElasticsearchRefPtrOutput() ElasticMapsServerSpecElasticsearchRefPtrOutput
	ToElasticMapsServerSpecElasticsearchRefPtrOutputWithContext(context.Context) ElasticMapsServerSpecElasticsearchRefPtrOutput
}

type elasticMapsServerSpecElasticsearchRefPtrType ElasticMapsServerSpecElasticsearchRefArgs

func ElasticMapsServerSpecElasticsearchRefPtr(v *ElasticMapsServerSpecElasticsearchRefArgs) ElasticMapsServerSpecElasticsearchRefPtrInput {
	return (*elasticMapsServerSpecElasticsearchRefPtrType)(v)
}

func (*elasticMapsServerSpecElasticsearchRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticMapsServerSpecElasticsearchRef)(nil)).Elem()
}

func (i *elasticMapsServerSpecElasticsearchRefPtrType) ToElasticMapsServerSpecElasticsearchRefPtrOutput() ElasticMapsServerSpecElasticsearchRefPtrOutput {
	return i.ToElasticMapsServerSpecElasticsearchRefPtrOutputWithContext(context.Background())
}

func (i *elasticMapsServerSpecElasticsearchRefPtrType) ToElasticMapsServerSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecElasticsearchRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecElasticsearchRefPtrOutput)
}

// ElasticsearchRef is a reference to an Elasticsearch cluster running in the same Kubernetes cluster.
type ElasticMapsServerSpecElasticsearchRefOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerSpecElasticsearchRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticMapsServerSpecElasticsearchRef)(nil)).Elem()
}

func (o ElasticMapsServerSpecElasticsearchRefOutput) ToElasticMapsServerSpecElasticsearchRefOutput() ElasticMapsServerSpecElasticsearchRefOutput {
	return o
}

func (o ElasticMapsServerSpecElasticsearchRefOutput) ToElasticMapsServerSpecElasticsearchRefOutputWithContext(ctx context.Context) ElasticMapsServerSpecElasticsearchRefOutput {
	return o
}

func (o ElasticMapsServerSpecElasticsearchRefOutput) ToElasticMapsServerSpecElasticsearchRefPtrOutput() ElasticMapsServerSpecElasticsearchRefPtrOutput {
	return o.ToElasticMapsServerSpecElasticsearchRefPtrOutputWithContext(context.Background())
}

func (o ElasticMapsServerSpecElasticsearchRefOutput) ToElasticMapsServerSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecElasticsearchRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticMapsServerSpecElasticsearchRef) *ElasticMapsServerSpecElasticsearchRef {
		return &v
	}).(ElasticMapsServerSpecElasticsearchRefPtrOutput)
}

// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
func (o ElasticMapsServerSpecElasticsearchRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecElasticsearchRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o ElasticMapsServerSpecElasticsearchRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecElasticsearchRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
// Elastic resource not managed by the operator. The referenced secret must contain the following:
//   - `url`: the URL to reach the Elastic resource
//   - `username`: the username of the user to be authenticated to the Elastic resource
//   - `password`: the password of the user to be authenticated to the Elastic resource
//   - `ca.crt`: the CA certificate in PEM format (optional)
//   - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
//     This field cannot be used in combination with the other fields name, namespace or serviceName.
func (o ElasticMapsServerSpecElasticsearchRefOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecElasticsearchRef) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
// the referenced resource is used.
func (o ElasticMapsServerSpecElasticsearchRefOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecElasticsearchRef) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

type ElasticMapsServerSpecElasticsearchRefPtrOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerSpecElasticsearchRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticMapsServerSpecElasticsearchRef)(nil)).Elem()
}

func (o ElasticMapsServerSpecElasticsearchRefPtrOutput) ToElasticMapsServerSpecElasticsearchRefPtrOutput() ElasticMapsServerSpecElasticsearchRefPtrOutput {
	return o
}

func (o ElasticMapsServerSpecElasticsearchRefPtrOutput) ToElasticMapsServerSpecElasticsearchRefPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecElasticsearchRefPtrOutput {
	return o
}

func (o ElasticMapsServerSpecElasticsearchRefPtrOutput) Elem() ElasticMapsServerSpecElasticsearchRefOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecElasticsearchRef) ElasticMapsServerSpecElasticsearchRef {
		if v != nil {
			return *v
		}
		var ret ElasticMapsServerSpecElasticsearchRef
		return ret
	}).(ElasticMapsServerSpecElasticsearchRefOutput)
}

// Name of an existing Kubernetes object corresponding to an Elastic resource managed by ECK.
func (o ElasticMapsServerSpecElasticsearchRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the Kubernetes object. If empty, defaults to the current namespace.
func (o ElasticMapsServerSpecElasticsearchRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// SecretName is the name of an existing Kubernetes secret that contains connection information for associating an
// Elastic resource not managed by the operator. The referenced secret must contain the following:
//   - `url`: the URL to reach the Elastic resource
//   - `username`: the username of the user to be authenticated to the Elastic resource
//   - `password`: the password of the user to be authenticated to the Elastic resource
//   - `ca.crt`: the CA certificate in PEM format (optional)
//   - `api-key`: the key to authenticate against the Elastic resource instead of a username and password (supported only for `elasticsearchRefs` in AgentSpec and in BeatSpec)
//     This field cannot be used in combination with the other fields name, namespace or serviceName.
func (o ElasticMapsServerSpecElasticsearchRefPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// ServiceName is the name of an existing Kubernetes service which is used to make requests to the referenced
// object. It has to be in the same namespace as the referenced resource. If left empty, the default HTTP service of
// the referenced resource is used.
func (o ElasticMapsServerSpecElasticsearchRefPtrOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecElasticsearchRef) *string {
		if v == nil {
			return nil
		}
		return v.ServiceName
	}).(pulumi.StringPtrOutput)
}

// HTTP holds the HTTP layer configuration for Elastic Maps Server.
type ElasticMapsServerSpecHttp struct {
	// Service defines the template for the associated Kubernetes Service object.
	Service *ElasticMapsServerSpecHttpService `pulumi:"service"`
	// TLS defines options for configuring TLS for HTTP.
	Tls *ElasticMapsServerSpecHttpTls `pulumi:"tls"`
}

// ElasticMapsServerSpecHttpInput is an input type that accepts ElasticMapsServerSpecHttpArgs and ElasticMapsServerSpecHttpOutput values.
// You can construct a concrete instance of `ElasticMapsServerSpecHttpInput` via:
//
//	ElasticMapsServerSpecHttpArgs{...}
type ElasticMapsServerSpecHttpInput interface {
	pulumi.Input

	ToElasticMapsServerSpecHttpOutput() ElasticMapsServerSpecHttpOutput
	ToElasticMapsServerSpecHttpOutputWithContext(context.Context) ElasticMapsServerSpecHttpOutput
}

// HTTP holds the HTTP layer configuration for Elastic Maps Server.
type ElasticMapsServerSpecHttpArgs struct {
	// Service defines the template for the associated Kubernetes Service object.
	Service ElasticMapsServerSpecHttpServicePtrInput `pulumi:"service"`
	// TLS defines options for configuring TLS for HTTP.
	Tls ElasticMapsServerSpecHttpTlsPtrInput `pulumi:"tls"`
}

func (ElasticMapsServerSpecHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticMapsServerSpecHttp)(nil)).Elem()
}

func (i ElasticMapsServerSpecHttpArgs) ToElasticMapsServerSpecHttpOutput() ElasticMapsServerSpecHttpOutput {
	return i.ToElasticMapsServerSpecHttpOutputWithContext(context.Background())
}

func (i ElasticMapsServerSpecHttpArgs) ToElasticMapsServerSpecHttpOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpOutput)
}

func (i ElasticMapsServerSpecHttpArgs) ToElasticMapsServerSpecHttpPtrOutput() ElasticMapsServerSpecHttpPtrOutput {
	return i.ToElasticMapsServerSpecHttpPtrOutputWithContext(context.Background())
}

func (i ElasticMapsServerSpecHttpArgs) ToElasticMapsServerSpecHttpPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpOutput).ToElasticMapsServerSpecHttpPtrOutputWithContext(ctx)
}

// ElasticMapsServerSpecHttpPtrInput is an input type that accepts ElasticMapsServerSpecHttpArgs, ElasticMapsServerSpecHttpPtr and ElasticMapsServerSpecHttpPtrOutput values.
// You can construct a concrete instance of `ElasticMapsServerSpecHttpPtrInput` via:
//
//	        ElasticMapsServerSpecHttpArgs{...}
//
//	or:
//
//	        nil
type ElasticMapsServerSpecHttpPtrInput interface {
	pulumi.Input

	ToElasticMapsServerSpecHttpPtrOutput() ElasticMapsServerSpecHttpPtrOutput
	ToElasticMapsServerSpecHttpPtrOutputWithContext(context.Context) ElasticMapsServerSpecHttpPtrOutput
}

type elasticMapsServerSpecHttpPtrType ElasticMapsServerSpecHttpArgs

func ElasticMapsServerSpecHttpPtr(v *ElasticMapsServerSpecHttpArgs) ElasticMapsServerSpecHttpPtrInput {
	return (*elasticMapsServerSpecHttpPtrType)(v)
}

func (*elasticMapsServerSpecHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticMapsServerSpecHttp)(nil)).Elem()
}

func (i *elasticMapsServerSpecHttpPtrType) ToElasticMapsServerSpecHttpPtrOutput() ElasticMapsServerSpecHttpPtrOutput {
	return i.ToElasticMapsServerSpecHttpPtrOutputWithContext(context.Background())
}

func (i *elasticMapsServerSpecHttpPtrType) ToElasticMapsServerSpecHttpPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpPtrOutput)
}

// HTTP holds the HTTP layer configuration for Elastic Maps Server.
type ElasticMapsServerSpecHttpOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerSpecHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticMapsServerSpecHttp)(nil)).Elem()
}

func (o ElasticMapsServerSpecHttpOutput) ToElasticMapsServerSpecHttpOutput() ElasticMapsServerSpecHttpOutput {
	return o
}

func (o ElasticMapsServerSpecHttpOutput) ToElasticMapsServerSpecHttpOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpOutput {
	return o
}

func (o ElasticMapsServerSpecHttpOutput) ToElasticMapsServerSpecHttpPtrOutput() ElasticMapsServerSpecHttpPtrOutput {
	return o.ToElasticMapsServerSpecHttpPtrOutputWithContext(context.Background())
}

func (o ElasticMapsServerSpecHttpOutput) ToElasticMapsServerSpecHttpPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticMapsServerSpecHttp) *ElasticMapsServerSpecHttp {
		return &v
	}).(ElasticMapsServerSpecHttpPtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
func (o ElasticMapsServerSpecHttpOutput) Service() ElasticMapsServerSpecHttpServicePtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttp) *ElasticMapsServerSpecHttpService { return v.Service }).(ElasticMapsServerSpecHttpServicePtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
func (o ElasticMapsServerSpecHttpOutput) Tls() ElasticMapsServerSpecHttpTlsPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttp) *ElasticMapsServerSpecHttpTls { return v.Tls }).(ElasticMapsServerSpecHttpTlsPtrOutput)
}

type ElasticMapsServerSpecHttpPtrOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerSpecHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticMapsServerSpecHttp)(nil)).Elem()
}

func (o ElasticMapsServerSpecHttpPtrOutput) ToElasticMapsServerSpecHttpPtrOutput() ElasticMapsServerSpecHttpPtrOutput {
	return o
}

func (o ElasticMapsServerSpecHttpPtrOutput) ToElasticMapsServerSpecHttpPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpPtrOutput {
	return o
}

func (o ElasticMapsServerSpecHttpPtrOutput) Elem() ElasticMapsServerSpecHttpOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttp) ElasticMapsServerSpecHttp {
		if v != nil {
			return *v
		}
		var ret ElasticMapsServerSpecHttp
		return ret
	}).(ElasticMapsServerSpecHttpOutput)
}

// Service defines the template for the associated Kubernetes Service object.
func (o ElasticMapsServerSpecHttpPtrOutput) Service() ElasticMapsServerSpecHttpServicePtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttp) *ElasticMapsServerSpecHttpService {
		if v == nil {
			return nil
		}
		return v.Service
	}).(ElasticMapsServerSpecHttpServicePtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
func (o ElasticMapsServerSpecHttpPtrOutput) Tls() ElasticMapsServerSpecHttpTlsPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttp) *ElasticMapsServerSpecHttpTls {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(ElasticMapsServerSpecHttpTlsPtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
type ElasticMapsServerSpecHttpService struct {
	// ObjectMeta is the metadata of the service.
	// The name and namespace provided here are managed by ECK and will be ignored.
	Metadata *ElasticMapsServerSpecHttpServiceMetadata `pulumi:"metadata"`
	// Spec is the specification of the service.
	Spec *ElasticMapsServerSpecHttpServiceSpec `pulumi:"spec"`
}

// ElasticMapsServerSpecHttpServiceInput is an input type that accepts ElasticMapsServerSpecHttpServiceArgs and ElasticMapsServerSpecHttpServiceOutput values.
// You can construct a concrete instance of `ElasticMapsServerSpecHttpServiceInput` via:
//
//	ElasticMapsServerSpecHttpServiceArgs{...}
type ElasticMapsServerSpecHttpServiceInput interface {
	pulumi.Input

	ToElasticMapsServerSpecHttpServiceOutput() ElasticMapsServerSpecHttpServiceOutput
	ToElasticMapsServerSpecHttpServiceOutputWithContext(context.Context) ElasticMapsServerSpecHttpServiceOutput
}

// Service defines the template for the associated Kubernetes Service object.
type ElasticMapsServerSpecHttpServiceArgs struct {
	// ObjectMeta is the metadata of the service.
	// The name and namespace provided here are managed by ECK and will be ignored.
	Metadata ElasticMapsServerSpecHttpServiceMetadataPtrInput `pulumi:"metadata"`
	// Spec is the specification of the service.
	Spec ElasticMapsServerSpecHttpServiceSpecPtrInput `pulumi:"spec"`
}

func (ElasticMapsServerSpecHttpServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticMapsServerSpecHttpService)(nil)).Elem()
}

func (i ElasticMapsServerSpecHttpServiceArgs) ToElasticMapsServerSpecHttpServiceOutput() ElasticMapsServerSpecHttpServiceOutput {
	return i.ToElasticMapsServerSpecHttpServiceOutputWithContext(context.Background())
}

func (i ElasticMapsServerSpecHttpServiceArgs) ToElasticMapsServerSpecHttpServiceOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpServiceOutput)
}

func (i ElasticMapsServerSpecHttpServiceArgs) ToElasticMapsServerSpecHttpServicePtrOutput() ElasticMapsServerSpecHttpServicePtrOutput {
	return i.ToElasticMapsServerSpecHttpServicePtrOutputWithContext(context.Background())
}

func (i ElasticMapsServerSpecHttpServiceArgs) ToElasticMapsServerSpecHttpServicePtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpServiceOutput).ToElasticMapsServerSpecHttpServicePtrOutputWithContext(ctx)
}

// ElasticMapsServerSpecHttpServicePtrInput is an input type that accepts ElasticMapsServerSpecHttpServiceArgs, ElasticMapsServerSpecHttpServicePtr and ElasticMapsServerSpecHttpServicePtrOutput values.
// You can construct a concrete instance of `ElasticMapsServerSpecHttpServicePtrInput` via:
//
//	        ElasticMapsServerSpecHttpServiceArgs{...}
//
//	or:
//
//	        nil
type ElasticMapsServerSpecHttpServicePtrInput interface {
	pulumi.Input

	ToElasticMapsServerSpecHttpServicePtrOutput() ElasticMapsServerSpecHttpServicePtrOutput
	ToElasticMapsServerSpecHttpServicePtrOutputWithContext(context.Context) ElasticMapsServerSpecHttpServicePtrOutput
}

type elasticMapsServerSpecHttpServicePtrType ElasticMapsServerSpecHttpServiceArgs

func ElasticMapsServerSpecHttpServicePtr(v *ElasticMapsServerSpecHttpServiceArgs) ElasticMapsServerSpecHttpServicePtrInput {
	return (*elasticMapsServerSpecHttpServicePtrType)(v)
}

func (*elasticMapsServerSpecHttpServicePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticMapsServerSpecHttpService)(nil)).Elem()
}

func (i *elasticMapsServerSpecHttpServicePtrType) ToElasticMapsServerSpecHttpServicePtrOutput() ElasticMapsServerSpecHttpServicePtrOutput {
	return i.ToElasticMapsServerSpecHttpServicePtrOutputWithContext(context.Background())
}

func (i *elasticMapsServerSpecHttpServicePtrType) ToElasticMapsServerSpecHttpServicePtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServicePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpServicePtrOutput)
}

// Service defines the template for the associated Kubernetes Service object.
type ElasticMapsServerSpecHttpServiceOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerSpecHttpServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticMapsServerSpecHttpService)(nil)).Elem()
}

func (o ElasticMapsServerSpecHttpServiceOutput) ToElasticMapsServerSpecHttpServiceOutput() ElasticMapsServerSpecHttpServiceOutput {
	return o
}

func (o ElasticMapsServerSpecHttpServiceOutput) ToElasticMapsServerSpecHttpServiceOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServiceOutput {
	return o
}

func (o ElasticMapsServerSpecHttpServiceOutput) ToElasticMapsServerSpecHttpServicePtrOutput() ElasticMapsServerSpecHttpServicePtrOutput {
	return o.ToElasticMapsServerSpecHttpServicePtrOutputWithContext(context.Background())
}

func (o ElasticMapsServerSpecHttpServiceOutput) ToElasticMapsServerSpecHttpServicePtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServicePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticMapsServerSpecHttpService) *ElasticMapsServerSpecHttpService {
		return &v
	}).(ElasticMapsServerSpecHttpServicePtrOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
func (o ElasticMapsServerSpecHttpServiceOutput) Metadata() ElasticMapsServerSpecHttpServiceMetadataPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpService) *ElasticMapsServerSpecHttpServiceMetadata { return v.Metadata }).(ElasticMapsServerSpecHttpServiceMetadataPtrOutput)
}

// Spec is the specification of the service.
func (o ElasticMapsServerSpecHttpServiceOutput) Spec() ElasticMapsServerSpecHttpServiceSpecPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpService) *ElasticMapsServerSpecHttpServiceSpec { return v.Spec }).(ElasticMapsServerSpecHttpServiceSpecPtrOutput)
}

type ElasticMapsServerSpecHttpServicePtrOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerSpecHttpServicePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticMapsServerSpecHttpService)(nil)).Elem()
}

func (o ElasticMapsServerSpecHttpServicePtrOutput) ToElasticMapsServerSpecHttpServicePtrOutput() ElasticMapsServerSpecHttpServicePtrOutput {
	return o
}

func (o ElasticMapsServerSpecHttpServicePtrOutput) ToElasticMapsServerSpecHttpServicePtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServicePtrOutput {
	return o
}

func (o ElasticMapsServerSpecHttpServicePtrOutput) Elem() ElasticMapsServerSpecHttpServiceOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpService) ElasticMapsServerSpecHttpService {
		if v != nil {
			return *v
		}
		var ret ElasticMapsServerSpecHttpService
		return ret
	}).(ElasticMapsServerSpecHttpServiceOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
func (o ElasticMapsServerSpecHttpServicePtrOutput) Metadata() ElasticMapsServerSpecHttpServiceMetadataPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpService) *ElasticMapsServerSpecHttpServiceMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(ElasticMapsServerSpecHttpServiceMetadataPtrOutput)
}

// Spec is the specification of the service.
func (o ElasticMapsServerSpecHttpServicePtrOutput) Spec() ElasticMapsServerSpecHttpServiceSpecPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpService) *ElasticMapsServerSpecHttpServiceSpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(ElasticMapsServerSpecHttpServiceSpecPtrOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type ElasticMapsServerSpecHttpServiceMetadata struct {
	Annotations map[string]string `pulumi:"annotations"`
	Finalizers  []string          `pulumi:"finalizers"`
	Labels      map[string]string `pulumi:"labels"`
	Name        *string           `pulumi:"name"`
	Namespace   *string           `pulumi:"namespace"`
}

// ElasticMapsServerSpecHttpServiceMetadataInput is an input type that accepts ElasticMapsServerSpecHttpServiceMetadataArgs and ElasticMapsServerSpecHttpServiceMetadataOutput values.
// You can construct a concrete instance of `ElasticMapsServerSpecHttpServiceMetadataInput` via:
//
//	ElasticMapsServerSpecHttpServiceMetadataArgs{...}
type ElasticMapsServerSpecHttpServiceMetadataInput interface {
	pulumi.Input

	ToElasticMapsServerSpecHttpServiceMetadataOutput() ElasticMapsServerSpecHttpServiceMetadataOutput
	ToElasticMapsServerSpecHttpServiceMetadataOutputWithContext(context.Context) ElasticMapsServerSpecHttpServiceMetadataOutput
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type ElasticMapsServerSpecHttpServiceMetadataArgs struct {
	Annotations pulumi.StringMapInput   `pulumi:"annotations"`
	Finalizers  pulumi.StringArrayInput `pulumi:"finalizers"`
	Labels      pulumi.StringMapInput   `pulumi:"labels"`
	Name        pulumi.StringPtrInput   `pulumi:"name"`
	Namespace   pulumi.StringPtrInput   `pulumi:"namespace"`
}

func (ElasticMapsServerSpecHttpServiceMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticMapsServerSpecHttpServiceMetadata)(nil)).Elem()
}

func (i ElasticMapsServerSpecHttpServiceMetadataArgs) ToElasticMapsServerSpecHttpServiceMetadataOutput() ElasticMapsServerSpecHttpServiceMetadataOutput {
	return i.ToElasticMapsServerSpecHttpServiceMetadataOutputWithContext(context.Background())
}

func (i ElasticMapsServerSpecHttpServiceMetadataArgs) ToElasticMapsServerSpecHttpServiceMetadataOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServiceMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpServiceMetadataOutput)
}

func (i ElasticMapsServerSpecHttpServiceMetadataArgs) ToElasticMapsServerSpecHttpServiceMetadataPtrOutput() ElasticMapsServerSpecHttpServiceMetadataPtrOutput {
	return i.ToElasticMapsServerSpecHttpServiceMetadataPtrOutputWithContext(context.Background())
}

func (i ElasticMapsServerSpecHttpServiceMetadataArgs) ToElasticMapsServerSpecHttpServiceMetadataPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServiceMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpServiceMetadataOutput).ToElasticMapsServerSpecHttpServiceMetadataPtrOutputWithContext(ctx)
}

// ElasticMapsServerSpecHttpServiceMetadataPtrInput is an input type that accepts ElasticMapsServerSpecHttpServiceMetadataArgs, ElasticMapsServerSpecHttpServiceMetadataPtr and ElasticMapsServerSpecHttpServiceMetadataPtrOutput values.
// You can construct a concrete instance of `ElasticMapsServerSpecHttpServiceMetadataPtrInput` via:
//
//	        ElasticMapsServerSpecHttpServiceMetadataArgs{...}
//
//	or:
//
//	        nil
type ElasticMapsServerSpecHttpServiceMetadataPtrInput interface {
	pulumi.Input

	ToElasticMapsServerSpecHttpServiceMetadataPtrOutput() ElasticMapsServerSpecHttpServiceMetadataPtrOutput
	ToElasticMapsServerSpecHttpServiceMetadataPtrOutputWithContext(context.Context) ElasticMapsServerSpecHttpServiceMetadataPtrOutput
}

type elasticMapsServerSpecHttpServiceMetadataPtrType ElasticMapsServerSpecHttpServiceMetadataArgs

func ElasticMapsServerSpecHttpServiceMetadataPtr(v *ElasticMapsServerSpecHttpServiceMetadataArgs) ElasticMapsServerSpecHttpServiceMetadataPtrInput {
	return (*elasticMapsServerSpecHttpServiceMetadataPtrType)(v)
}

func (*elasticMapsServerSpecHttpServiceMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticMapsServerSpecHttpServiceMetadata)(nil)).Elem()
}

func (i *elasticMapsServerSpecHttpServiceMetadataPtrType) ToElasticMapsServerSpecHttpServiceMetadataPtrOutput() ElasticMapsServerSpecHttpServiceMetadataPtrOutput {
	return i.ToElasticMapsServerSpecHttpServiceMetadataPtrOutputWithContext(context.Background())
}

func (i *elasticMapsServerSpecHttpServiceMetadataPtrType) ToElasticMapsServerSpecHttpServiceMetadataPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServiceMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpServiceMetadataPtrOutput)
}

// ObjectMeta is the metadata of the service.
// The name and namespace provided here are managed by ECK and will be ignored.
type ElasticMapsServerSpecHttpServiceMetadataOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerSpecHttpServiceMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticMapsServerSpecHttpServiceMetadata)(nil)).Elem()
}

func (o ElasticMapsServerSpecHttpServiceMetadataOutput) ToElasticMapsServerSpecHttpServiceMetadataOutput() ElasticMapsServerSpecHttpServiceMetadataOutput {
	return o
}

func (o ElasticMapsServerSpecHttpServiceMetadataOutput) ToElasticMapsServerSpecHttpServiceMetadataOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServiceMetadataOutput {
	return o
}

func (o ElasticMapsServerSpecHttpServiceMetadataOutput) ToElasticMapsServerSpecHttpServiceMetadataPtrOutput() ElasticMapsServerSpecHttpServiceMetadataPtrOutput {
	return o.ToElasticMapsServerSpecHttpServiceMetadataPtrOutputWithContext(context.Background())
}

func (o ElasticMapsServerSpecHttpServiceMetadataOutput) ToElasticMapsServerSpecHttpServiceMetadataPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServiceMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticMapsServerSpecHttpServiceMetadata) *ElasticMapsServerSpecHttpServiceMetadata {
		return &v
	}).(ElasticMapsServerSpecHttpServiceMetadataPtrOutput)
}

func (o ElasticMapsServerSpecHttpServiceMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o ElasticMapsServerSpecHttpServiceMetadataOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceMetadata) []string { return v.Finalizers }).(pulumi.StringArrayOutput)
}

func (o ElasticMapsServerSpecHttpServiceMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o ElasticMapsServerSpecHttpServiceMetadataOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceMetadata) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ElasticMapsServerSpecHttpServiceMetadataOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceMetadata) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ElasticMapsServerSpecHttpServiceMetadataPtrOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerSpecHttpServiceMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticMapsServerSpecHttpServiceMetadata)(nil)).Elem()
}

func (o ElasticMapsServerSpecHttpServiceMetadataPtrOutput) ToElasticMapsServerSpecHttpServiceMetadataPtrOutput() ElasticMapsServerSpecHttpServiceMetadataPtrOutput {
	return o
}

func (o ElasticMapsServerSpecHttpServiceMetadataPtrOutput) ToElasticMapsServerSpecHttpServiceMetadataPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServiceMetadataPtrOutput {
	return o
}

func (o ElasticMapsServerSpecHttpServiceMetadataPtrOutput) Elem() ElasticMapsServerSpecHttpServiceMetadataOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceMetadata) ElasticMapsServerSpecHttpServiceMetadata {
		if v != nil {
			return *v
		}
		var ret ElasticMapsServerSpecHttpServiceMetadata
		return ret
	}).(ElasticMapsServerSpecHttpServiceMetadataOutput)
}

func (o ElasticMapsServerSpecHttpServiceMetadataPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

func (o ElasticMapsServerSpecHttpServiceMetadataPtrOutput) Finalizers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceMetadata) []string {
		if v == nil {
			return nil
		}
		return v.Finalizers
	}).(pulumi.StringArrayOutput)
}

func (o ElasticMapsServerSpecHttpServiceMetadataPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

func (o ElasticMapsServerSpecHttpServiceMetadataPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o ElasticMapsServerSpecHttpServiceMetadataPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type ElasticMapsServerSpecHttpServiceMetadataAnnotations struct {
}

type ElasticMapsServerSpecHttpServiceMetadataLabels struct {
}

// Spec is the specification of the service.
type ElasticMapsServerSpecHttpServiceSpec struct {
	// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
	// allocated for services with type LoadBalancer.  Default is "true". It
	// may be set to "false" if the cluster load-balancer does not rely on
	// NodePorts.  If the caller requests specific NodePorts (by specifying a
	// value), those requests will be respected, regardless of this field.
	// This field may only be set for services with type LoadBalancer and will
	// be cleared if the type is changed to any other type.
	AllocateLoadBalancerNodePorts *bool `pulumi:"allocateLoadBalancerNodePorts"`
	// clusterIP is the IP address of the service and is usually assigned
	// randomly. If an address is specified manually, is in-range (as per
	// system configuration), and is not in use, it will be allocated to the
	// service; otherwise creation of the service will fail. This field may not
	// be changed through updates unless the type field is also being changed
	// to ExternalName (which requires this field to be blank) or the type
	// field is being changed from ExternalName (in which case this field may
	// optionally be specified, as describe above).  Valid values are "None",
	// empty string (""), or a valid IP address. Setting this to "None" makes a
	// "headless service" (no virtual IP), which is useful when direct endpoint
	// connections are preferred and proxying is not required.  Only applies to
	// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
	// when creating a Service of type ExternalName, creation will fail. This
	// field will be wiped when updating a Service to type ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP *string `pulumi:"clusterIP"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are
	// usually assigned randomly.  If an address is specified manually, is
	// in-range (as per system configuration), and is not in use, it will be
	// allocated to the service; otherwise creation of the service will fail.
	// This field may not be changed through updates unless the type field is
	// also being changed to ExternalName (which requires this field to be
	// empty) or the type field is being changed from ExternalName (in which
	// case this field may optionally be specified, as describe above).  Valid
	// values are "None", empty string (""), or a valid IP address.  Setting
	// this to "None" makes a "headless service" (no virtual IP), which is
	// useful when direct endpoint connections are preferred and proxying is
	// not required.  Only applies to types ClusterIP, NodePort, and
	// LoadBalancer. If this field is specified when creating a Service of type
	// ExternalName, creation will fail. This field will be wiped when updating
	// a Service to type ExternalName.  If this field is not specified, it will
	// be initialized from the clusterIP field.  If this field is specified,
	// clients must ensure that clusterIPs[0] and clusterIP have the same
	// value.
	//
	// This field may hold a maximum of two entries (dual-stack IPs, in either order).
	// These IPs must correspond to the values of the ipFamilies field. Both
	// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIPs []string `pulumi:"clusterIPs"`
	// externalIPs is a list of IP addresses for which nodes in the cluster
	// will also accept traffic for this service.  These IPs are not managed by
	// Kubernetes.  The user is responsible for ensuring that traffic arrives
	// at a node with this IP.  A common example is external load-balancers
	// that are not part of the Kubernetes system.
	ExternalIPs []string `pulumi:"externalIPs"`
	// externalName is the external reference that discovery mechanisms will
	// return as an alias for this service (e.g. a DNS CNAME record). No
	// proxying will be involved.  Must be a lowercase RFC-1123 hostname
	// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName *string `pulumi:"externalName"`
	// externalTrafficPolicy describes how nodes distribute service traffic they
	// receive on one of the Service's "externally-facing" addresses (NodePorts,
	// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
	// the service in a way that assumes that external load balancers will take care
	// of balancing the service traffic between nodes, and so each node will deliver
	// traffic only to the node-local endpoints of the service, without masquerading
	// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
	// be dropped.) The default value, "Cluster", uses the standard behavior of
	// routing to all endpoints evenly (possibly modified by topology and other
	// features). Note that traffic sent to an External IP or LoadBalancer IP from
	// within the cluster will always get "Cluster" semantics, but clients sending to
	// a NodePort from within the cluster may need to take traffic policy into account
	// when picking a node.
	ExternalTrafficPolicy *string `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service.
	// This only applies when type is set to LoadBalancer and
	// externalTrafficPolicy is set to Local. If a value is specified, is
	// in-range, and is not in use, it will be used.  If not specified, a value
	// will be automatically allocated.  External systems (e.g. load-balancers)
	// can use this port to determine if a given node holds endpoints for this
	// service or not.  If this field is specified when creating a Service
	// which does not need it, creation will fail. This field will be wiped
	// when updating a Service to no longer need it (e.g. changing type).
	// This field cannot be updated once set.
	HealthCheckNodePort *int `pulumi:"healthCheckNodePort"`
	// InternalTrafficPolicy describes how nodes distribute service traffic they
	// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
	// only want to talk to endpoints of the service on the same node as the pod,
	// dropping the traffic if there are no local endpoints. The default value,
	// "Cluster", uses the standard behavior of routing to all endpoints evenly
	// (possibly modified by topology and other features).
	InternalTrafficPolicy *string `pulumi:"internalTrafficPolicy"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
	// service. This field is usually assigned automatically based on cluster
	// configuration and the ipFamilyPolicy field. If this field is specified
	// manually, the requested family is available in the cluster,
	// and ipFamilyPolicy allows it, it will be used; otherwise creation of
	// the service will fail. This field is conditionally mutable: it allows
	// for adding or removing a secondary IP family, but it does not allow
	// changing the primary IP family of the Service. Valid values are "IPv4"
	// and "IPv6".  This field only applies to Services of types ClusterIP,
	// NodePort, and LoadBalancer, and does apply to "headless" services.
	// This field will be wiped when updating a Service to type ExternalName.
	//
	// This field may hold a maximum of two entries (dual-stack families, in
	// either order).  These families must correspond to the values of the
	// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
	// governed by the ipFamilyPolicy field.
	IpFamilies []string `pulumi:"ipFamilies"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by
	// this Service. If there is no value provided, then this field will be set
	// to SingleStack. Services can be "SingleStack" (a single IP family),
	// "PreferDualStack" (two IP families on dual-stack configured clusters or
	// a single IP family on single-stack clusters), or "RequireDualStack"
	// (two IP families on dual-stack configured clusters, otherwise fail). The
	// ipFamilies and clusterIPs fields depend on the value of this field. This
	// field will be wiped when updating a service to type ExternalName.
	IpFamilyPolicy *string `pulumi:"ipFamilyPolicy"`
	// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
	// If specified, the value of this field must be a label-style identifier, with an optional prefix,
	// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
	// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
	// balancer implementation is used, today this is typically done through the cloud provider integration,
	// but should apply for any default implementation. If set, it is assumed that a load balancer
	// implementation is watching for Services with a matching class. Any default load balancer
	// implementation (e.g. cloud providers) should ignore Services that set this field.
	// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
	// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass *string `pulumi:"loadBalancerClass"`
	// Only applies to Service Type: LoadBalancer.
	// This feature depends on whether the underlying cloud-provider supports specifying
	// the loadBalancerIP when a load balancer is created.
	// This field will be ignored if the cloud-provider does not support the feature.
	// Deprecated: This field was under-specified and its meaning varies across implementations.
	// Using it is non-portable and it may not support dual-stack.
	// Users are encouraged to use implementation-specific annotations when available.
	LoadBalancerIP *string `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider
	// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
	// cloud-provider does not support the feature."
	// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
	LoadBalancerSourceRanges []string `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports []ElasticMapsServerSpecHttpServiceSpecPorts `pulumi:"ports"`
	// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
	// Service should disregard any indications of ready/not-ready.
	// The primary use case for setting this field is for a StatefulSet's Headless Service to
	// propagate SRV DNS records for its Pods for the purpose of peer discovery.
	// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
	// Services interpret this to mean that all endpoints are considered "ready" even if the
	// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
	// through the Endpoints or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses *bool `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this
	// selector. If empty or not present, the service is assumed to have an
	// external process managing its endpoints, which Kubernetes will not
	// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
	// Ignored if type is ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector map[string]string `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity.
	// Enable client IP based session affinity.
	// Must be ClientIP or None.
	// Defaults to None.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity *string `pulumi:"sessionAffinity"`
	// sessionAffinityConfig contains the configurations of session affinity.
	SessionAffinityConfig *ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfig `pulumi:"sessionAffinityConfig"`
	// TrafficDistribution offers a way to express preferences for how traffic is
	// distributed to Service endpoints. Implementations can use this field as a
	// hint, but are not required to guarantee strict adherence. If the field is
	// not set, the implementation will apply its default routing strategy. If set
	// to "PreferClose", implementations should prioritize endpoints that are
	// topologically close (e.g., same zone).
	// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
	TrafficDistribution *string `pulumi:"trafficDistribution"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid
	// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
	// "ClusterIP" allocates a cluster-internal IP address for load-balancing
	// to endpoints. Endpoints are determined by the selector or if that is not
	// specified, by manual construction of an Endpoints object or
	// EndpointSlice objects. If clusterIP is "None", no virtual IP is
	// allocated and the endpoints are published as a set of endpoints rather
	// than a virtual IP.
	// "NodePort" builds on ClusterIP and allocates a port on every node which
	// routes to the same endpoints as the clusterIP.
	// "LoadBalancer" builds on NodePort and creates an external load-balancer
	// (if supported in the current cloud) which routes to the same endpoints
	// as the clusterIP.
	// "ExternalName" aliases this service to the specified externalName.
	// Several other fields do not apply to ExternalName services.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type *string `pulumi:"type"`
}

// ElasticMapsServerSpecHttpServiceSpecInput is an input type that accepts ElasticMapsServerSpecHttpServiceSpecArgs and ElasticMapsServerSpecHttpServiceSpecOutput values.
// You can construct a concrete instance of `ElasticMapsServerSpecHttpServiceSpecInput` via:
//
//	ElasticMapsServerSpecHttpServiceSpecArgs{...}
type ElasticMapsServerSpecHttpServiceSpecInput interface {
	pulumi.Input

	ToElasticMapsServerSpecHttpServiceSpecOutput() ElasticMapsServerSpecHttpServiceSpecOutput
	ToElasticMapsServerSpecHttpServiceSpecOutputWithContext(context.Context) ElasticMapsServerSpecHttpServiceSpecOutput
}

// Spec is the specification of the service.
type ElasticMapsServerSpecHttpServiceSpecArgs struct {
	// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
	// allocated for services with type LoadBalancer.  Default is "true". It
	// may be set to "false" if the cluster load-balancer does not rely on
	// NodePorts.  If the caller requests specific NodePorts (by specifying a
	// value), those requests will be respected, regardless of this field.
	// This field may only be set for services with type LoadBalancer and will
	// be cleared if the type is changed to any other type.
	AllocateLoadBalancerNodePorts pulumi.BoolPtrInput `pulumi:"allocateLoadBalancerNodePorts"`
	// clusterIP is the IP address of the service and is usually assigned
	// randomly. If an address is specified manually, is in-range (as per
	// system configuration), and is not in use, it will be allocated to the
	// service; otherwise creation of the service will fail. This field may not
	// be changed through updates unless the type field is also being changed
	// to ExternalName (which requires this field to be blank) or the type
	// field is being changed from ExternalName (in which case this field may
	// optionally be specified, as describe above).  Valid values are "None",
	// empty string (""), or a valid IP address. Setting this to "None" makes a
	// "headless service" (no virtual IP), which is useful when direct endpoint
	// connections are preferred and proxying is not required.  Only applies to
	// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
	// when creating a Service of type ExternalName, creation will fail. This
	// field will be wiped when updating a Service to type ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP pulumi.StringPtrInput `pulumi:"clusterIP"`
	// ClusterIPs is a list of IP addresses assigned to this service, and are
	// usually assigned randomly.  If an address is specified manually, is
	// in-range (as per system configuration), and is not in use, it will be
	// allocated to the service; otherwise creation of the service will fail.
	// This field may not be changed through updates unless the type field is
	// also being changed to ExternalName (which requires this field to be
	// empty) or the type field is being changed from ExternalName (in which
	// case this field may optionally be specified, as describe above).  Valid
	// values are "None", empty string (""), or a valid IP address.  Setting
	// this to "None" makes a "headless service" (no virtual IP), which is
	// useful when direct endpoint connections are preferred and proxying is
	// not required.  Only applies to types ClusterIP, NodePort, and
	// LoadBalancer. If this field is specified when creating a Service of type
	// ExternalName, creation will fail. This field will be wiped when updating
	// a Service to type ExternalName.  If this field is not specified, it will
	// be initialized from the clusterIP field.  If this field is specified,
	// clients must ensure that clusterIPs[0] and clusterIP have the same
	// value.
	//
	// This field may hold a maximum of two entries (dual-stack IPs, in either order).
	// These IPs must correspond to the values of the ipFamilies field. Both
	// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIPs pulumi.StringArrayInput `pulumi:"clusterIPs"`
	// externalIPs is a list of IP addresses for which nodes in the cluster
	// will also accept traffic for this service.  These IPs are not managed by
	// Kubernetes.  The user is responsible for ensuring that traffic arrives
	// at a node with this IP.  A common example is external load-balancers
	// that are not part of the Kubernetes system.
	ExternalIPs pulumi.StringArrayInput `pulumi:"externalIPs"`
	// externalName is the external reference that discovery mechanisms will
	// return as an alias for this service (e.g. a DNS CNAME record). No
	// proxying will be involved.  Must be a lowercase RFC-1123 hostname
	// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
	ExternalName pulumi.StringPtrInput `pulumi:"externalName"`
	// externalTrafficPolicy describes how nodes distribute service traffic they
	// receive on one of the Service's "externally-facing" addresses (NodePorts,
	// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
	// the service in a way that assumes that external load balancers will take care
	// of balancing the service traffic between nodes, and so each node will deliver
	// traffic only to the node-local endpoints of the service, without masquerading
	// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
	// be dropped.) The default value, "Cluster", uses the standard behavior of
	// routing to all endpoints evenly (possibly modified by topology and other
	// features). Note that traffic sent to an External IP or LoadBalancer IP from
	// within the cluster will always get "Cluster" semantics, but clients sending to
	// a NodePort from within the cluster may need to take traffic policy into account
	// when picking a node.
	ExternalTrafficPolicy pulumi.StringPtrInput `pulumi:"externalTrafficPolicy"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service.
	// This only applies when type is set to LoadBalancer and
	// externalTrafficPolicy is set to Local. If a value is specified, is
	// in-range, and is not in use, it will be used.  If not specified, a value
	// will be automatically allocated.  External systems (e.g. load-balancers)
	// can use this port to determine if a given node holds endpoints for this
	// service or not.  If this field is specified when creating a Service
	// which does not need it, creation will fail. This field will be wiped
	// when updating a Service to no longer need it (e.g. changing type).
	// This field cannot be updated once set.
	HealthCheckNodePort pulumi.IntPtrInput `pulumi:"healthCheckNodePort"`
	// InternalTrafficPolicy describes how nodes distribute service traffic they
	// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
	// only want to talk to endpoints of the service on the same node as the pod,
	// dropping the traffic if there are no local endpoints. The default value,
	// "Cluster", uses the standard behavior of routing to all endpoints evenly
	// (possibly modified by topology and other features).
	InternalTrafficPolicy pulumi.StringPtrInput `pulumi:"internalTrafficPolicy"`
	// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
	// service. This field is usually assigned automatically based on cluster
	// configuration and the ipFamilyPolicy field. If this field is specified
	// manually, the requested family is available in the cluster,
	// and ipFamilyPolicy allows it, it will be used; otherwise creation of
	// the service will fail. This field is conditionally mutable: it allows
	// for adding or removing a secondary IP family, but it does not allow
	// changing the primary IP family of the Service. Valid values are "IPv4"
	// and "IPv6".  This field only applies to Services of types ClusterIP,
	// NodePort, and LoadBalancer, and does apply to "headless" services.
	// This field will be wiped when updating a Service to type ExternalName.
	//
	// This field may hold a maximum of two entries (dual-stack families, in
	// either order).  These families must correspond to the values of the
	// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
	// governed by the ipFamilyPolicy field.
	IpFamilies pulumi.StringArrayInput `pulumi:"ipFamilies"`
	// IPFamilyPolicy represents the dual-stack-ness requested or required by
	// this Service. If there is no value provided, then this field will be set
	// to SingleStack. Services can be "SingleStack" (a single IP family),
	// "PreferDualStack" (two IP families on dual-stack configured clusters or
	// a single IP family on single-stack clusters), or "RequireDualStack"
	// (two IP families on dual-stack configured clusters, otherwise fail). The
	// ipFamilies and clusterIPs fields depend on the value of this field. This
	// field will be wiped when updating a service to type ExternalName.
	IpFamilyPolicy pulumi.StringPtrInput `pulumi:"ipFamilyPolicy"`
	// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
	// If specified, the value of this field must be a label-style identifier, with an optional prefix,
	// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
	// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
	// balancer implementation is used, today this is typically done through the cloud provider integration,
	// but should apply for any default implementation. If set, it is assumed that a load balancer
	// implementation is watching for Services with a matching class. Any default load balancer
	// implementation (e.g. cloud providers) should ignore Services that set this field.
	// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
	// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
	LoadBalancerClass pulumi.StringPtrInput `pulumi:"loadBalancerClass"`
	// Only applies to Service Type: LoadBalancer.
	// This feature depends on whether the underlying cloud-provider supports specifying
	// the loadBalancerIP when a load balancer is created.
	// This field will be ignored if the cloud-provider does not support the feature.
	// Deprecated: This field was under-specified and its meaning varies across implementations.
	// Using it is non-portable and it may not support dual-stack.
	// Users are encouraged to use implementation-specific annotations when available.
	LoadBalancerIP pulumi.StringPtrInput `pulumi:"loadBalancerIP"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider
	// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
	// cloud-provider does not support the feature."
	// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
	LoadBalancerSourceRanges pulumi.StringArrayInput `pulumi:"loadBalancerSourceRanges"`
	// The list of ports that are exposed by this service.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports ElasticMapsServerSpecHttpServiceSpecPortsArrayInput `pulumi:"ports"`
	// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
	// Service should disregard any indications of ready/not-ready.
	// The primary use case for setting this field is for a StatefulSet's Headless Service to
	// propagate SRV DNS records for its Pods for the purpose of peer discovery.
	// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
	// Services interpret this to mean that all endpoints are considered "ready" even if the
	// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
	// through the Endpoints or EndpointSlice resources can safely assume this behavior.
	PublishNotReadyAddresses pulumi.BoolPtrInput `pulumi:"publishNotReadyAddresses"`
	// Route service traffic to pods with label keys and values matching this
	// selector. If empty or not present, the service is assumed to have an
	// external process managing its endpoints, which Kubernetes will not
	// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
	// Ignored if type is ExternalName.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector pulumi.StringMapInput `pulumi:"selector"`
	// Supports "ClientIP" and "None". Used to maintain session affinity.
	// Enable client IP based session affinity.
	// Must be ClientIP or None.
	// Defaults to None.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity pulumi.StringPtrInput `pulumi:"sessionAffinity"`
	// sessionAffinityConfig contains the configurations of session affinity.
	SessionAffinityConfig ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrInput `pulumi:"sessionAffinityConfig"`
	// TrafficDistribution offers a way to express preferences for how traffic is
	// distributed to Service endpoints. Implementations can use this field as a
	// hint, but are not required to guarantee strict adherence. If the field is
	// not set, the implementation will apply its default routing strategy. If set
	// to "PreferClose", implementations should prioritize endpoints that are
	// topologically close (e.g., same zone).
	// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
	TrafficDistribution pulumi.StringPtrInput `pulumi:"trafficDistribution"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid
	// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
	// "ClusterIP" allocates a cluster-internal IP address for load-balancing
	// to endpoints. Endpoints are determined by the selector or if that is not
	// specified, by manual construction of an Endpoints object or
	// EndpointSlice objects. If clusterIP is "None", no virtual IP is
	// allocated and the endpoints are published as a set of endpoints rather
	// than a virtual IP.
	// "NodePort" builds on ClusterIP and allocates a port on every node which
	// routes to the same endpoints as the clusterIP.
	// "LoadBalancer" builds on NodePort and creates an external load-balancer
	// (if supported in the current cloud) which routes to the same endpoints
	// as the clusterIP.
	// "ExternalName" aliases this service to the specified externalName.
	// Several other fields do not apply to ExternalName services.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ElasticMapsServerSpecHttpServiceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticMapsServerSpecHttpServiceSpec)(nil)).Elem()
}

func (i ElasticMapsServerSpecHttpServiceSpecArgs) ToElasticMapsServerSpecHttpServiceSpecOutput() ElasticMapsServerSpecHttpServiceSpecOutput {
	return i.ToElasticMapsServerSpecHttpServiceSpecOutputWithContext(context.Background())
}

func (i ElasticMapsServerSpecHttpServiceSpecArgs) ToElasticMapsServerSpecHttpServiceSpecOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServiceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpServiceSpecOutput)
}

func (i ElasticMapsServerSpecHttpServiceSpecArgs) ToElasticMapsServerSpecHttpServiceSpecPtrOutput() ElasticMapsServerSpecHttpServiceSpecPtrOutput {
	return i.ToElasticMapsServerSpecHttpServiceSpecPtrOutputWithContext(context.Background())
}

func (i ElasticMapsServerSpecHttpServiceSpecArgs) ToElasticMapsServerSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpServiceSpecOutput).ToElasticMapsServerSpecHttpServiceSpecPtrOutputWithContext(ctx)
}

// ElasticMapsServerSpecHttpServiceSpecPtrInput is an input type that accepts ElasticMapsServerSpecHttpServiceSpecArgs, ElasticMapsServerSpecHttpServiceSpecPtr and ElasticMapsServerSpecHttpServiceSpecPtrOutput values.
// You can construct a concrete instance of `ElasticMapsServerSpecHttpServiceSpecPtrInput` via:
//
//	        ElasticMapsServerSpecHttpServiceSpecArgs{...}
//
//	or:
//
//	        nil
type ElasticMapsServerSpecHttpServiceSpecPtrInput interface {
	pulumi.Input

	ToElasticMapsServerSpecHttpServiceSpecPtrOutput() ElasticMapsServerSpecHttpServiceSpecPtrOutput
	ToElasticMapsServerSpecHttpServiceSpecPtrOutputWithContext(context.Context) ElasticMapsServerSpecHttpServiceSpecPtrOutput
}

type elasticMapsServerSpecHttpServiceSpecPtrType ElasticMapsServerSpecHttpServiceSpecArgs

func ElasticMapsServerSpecHttpServiceSpecPtr(v *ElasticMapsServerSpecHttpServiceSpecArgs) ElasticMapsServerSpecHttpServiceSpecPtrInput {
	return (*elasticMapsServerSpecHttpServiceSpecPtrType)(v)
}

func (*elasticMapsServerSpecHttpServiceSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticMapsServerSpecHttpServiceSpec)(nil)).Elem()
}

func (i *elasticMapsServerSpecHttpServiceSpecPtrType) ToElasticMapsServerSpecHttpServiceSpecPtrOutput() ElasticMapsServerSpecHttpServiceSpecPtrOutput {
	return i.ToElasticMapsServerSpecHttpServiceSpecPtrOutputWithContext(context.Background())
}

func (i *elasticMapsServerSpecHttpServiceSpecPtrType) ToElasticMapsServerSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServiceSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpServiceSpecPtrOutput)
}

// Spec is the specification of the service.
type ElasticMapsServerSpecHttpServiceSpecOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerSpecHttpServiceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticMapsServerSpecHttpServiceSpec)(nil)).Elem()
}

func (o ElasticMapsServerSpecHttpServiceSpecOutput) ToElasticMapsServerSpecHttpServiceSpecOutput() ElasticMapsServerSpecHttpServiceSpecOutput {
	return o
}

func (o ElasticMapsServerSpecHttpServiceSpecOutput) ToElasticMapsServerSpecHttpServiceSpecOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServiceSpecOutput {
	return o
}

func (o ElasticMapsServerSpecHttpServiceSpecOutput) ToElasticMapsServerSpecHttpServiceSpecPtrOutput() ElasticMapsServerSpecHttpServiceSpecPtrOutput {
	return o.ToElasticMapsServerSpecHttpServiceSpecPtrOutputWithContext(context.Background())
}

func (o ElasticMapsServerSpecHttpServiceSpecOutput) ToElasticMapsServerSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServiceSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticMapsServerSpecHttpServiceSpec) *ElasticMapsServerSpecHttpServiceSpec {
		return &v
	}).(ElasticMapsServerSpecHttpServiceSpecPtrOutput)
}

// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
// allocated for services with type LoadBalancer.  Default is "true". It
// may be set to "false" if the cluster load-balancer does not rely on
// NodePorts.  If the caller requests specific NodePorts (by specifying a
// value), those requests will be respected, regardless of this field.
// This field may only be set for services with type LoadBalancer and will
// be cleared if the type is changed to any other type.
func (o ElasticMapsServerSpecHttpServiceSpecOutput) AllocateLoadBalancerNodePorts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceSpec) *bool { return v.AllocateLoadBalancerNodePorts }).(pulumi.BoolPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned
// randomly. If an address is specified manually, is in-range (as per
// system configuration), and is not in use, it will be allocated to the
// service; otherwise creation of the service will fail. This field may not
// be changed through updates unless the type field is also being changed
// to ExternalName (which requires this field to be blank) or the type
// field is being changed from ExternalName (in which case this field may
// optionally be specified, as describe above).  Valid values are "None",
// empty string (""), or a valid IP address. Setting this to "None" makes a
// "headless service" (no virtual IP), which is useful when direct endpoint
// connections are preferred and proxying is not required.  Only applies to
// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
// when creating a Service of type ExternalName, creation will fail. This
// field will be wiped when updating a Service to type ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticMapsServerSpecHttpServiceSpecOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceSpec) *string { return v.ClusterIP }).(pulumi.StringPtrOutput)
}

// ClusterIPs is a list of IP addresses assigned to this service, and are
// usually assigned randomly.  If an address is specified manually, is
// in-range (as per system configuration), and is not in use, it will be
// allocated to the service; otherwise creation of the service will fail.
// This field may not be changed through updates unless the type field is
// also being changed to ExternalName (which requires this field to be
// empty) or the type field is being changed from ExternalName (in which
// case this field may optionally be specified, as describe above).  Valid
// values are "None", empty string (""), or a valid IP address.  Setting
// this to "None" makes a "headless service" (no virtual IP), which is
// useful when direct endpoint connections are preferred and proxying is
// not required.  Only applies to types ClusterIP, NodePort, and
// LoadBalancer. If this field is specified when creating a Service of type
// ExternalName, creation will fail. This field will be wiped when updating
// a Service to type ExternalName.  If this field is not specified, it will
// be initialized from the clusterIP field.  If this field is specified,
// clients must ensure that clusterIPs[0] and clusterIP have the same
// value.
//
// This field may hold a maximum of two entries (dual-stack IPs, in either order).
// These IPs must correspond to the values of the ipFamilies field. Both
// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticMapsServerSpecHttpServiceSpecOutput) ClusterIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceSpec) []string { return v.ClusterIPs }).(pulumi.StringArrayOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster
// will also accept traffic for this service.  These IPs are not managed by
// Kubernetes.  The user is responsible for ensuring that traffic arrives
// at a node with this IP.  A common example is external load-balancers
// that are not part of the Kubernetes system.
func (o ElasticMapsServerSpecHttpServiceSpecOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceSpec) []string { return v.ExternalIPs }).(pulumi.StringArrayOutput)
}

// externalName is the external reference that discovery mechanisms will
// return as an alias for this service (e.g. a DNS CNAME record). No
// proxying will be involved.  Must be a lowercase RFC-1123 hostname
// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
func (o ElasticMapsServerSpecHttpServiceSpecOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceSpec) *string { return v.ExternalName }).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy describes how nodes distribute service traffic they
// receive on one of the Service's "externally-facing" addresses (NodePorts,
// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
// the service in a way that assumes that external load balancers will take care
// of balancing the service traffic between nodes, and so each node will deliver
// traffic only to the node-local endpoints of the service, without masquerading
// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
// be dropped.) The default value, "Cluster", uses the standard behavior of
// routing to all endpoints evenly (possibly modified by topology and other
// features). Note that traffic sent to an External IP or LoadBalancer IP from
// within the cluster will always get "Cluster" semantics, but clients sending to
// a NodePort from within the cluster may need to take traffic policy into account
// when picking a node.
func (o ElasticMapsServerSpecHttpServiceSpecOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceSpec) *string { return v.ExternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service.
// This only applies when type is set to LoadBalancer and
// externalTrafficPolicy is set to Local. If a value is specified, is
// in-range, and is not in use, it will be used.  If not specified, a value
// will be automatically allocated.  External systems (e.g. load-balancers)
// can use this port to determine if a given node holds endpoints for this
// service or not.  If this field is specified when creating a Service
// which does not need it, creation will fail. This field will be wiped
// when updating a Service to no longer need it (e.g. changing type).
// This field cannot be updated once set.
func (o ElasticMapsServerSpecHttpServiceSpecOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceSpec) *int { return v.HealthCheckNodePort }).(pulumi.IntPtrOutput)
}

// InternalTrafficPolicy describes how nodes distribute service traffic they
// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
// only want to talk to endpoints of the service on the same node as the pod,
// dropping the traffic if there are no local endpoints. The default value,
// "Cluster", uses the standard behavior of routing to all endpoints evenly
// (possibly modified by topology and other features).
func (o ElasticMapsServerSpecHttpServiceSpecOutput) InternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceSpec) *string { return v.InternalTrafficPolicy }).(pulumi.StringPtrOutput)
}

// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
// service. This field is usually assigned automatically based on cluster
// configuration and the ipFamilyPolicy field. If this field is specified
// manually, the requested family is available in the cluster,
// and ipFamilyPolicy allows it, it will be used; otherwise creation of
// the service will fail. This field is conditionally mutable: it allows
// for adding or removing a secondary IP family, but it does not allow
// changing the primary IP family of the Service. Valid values are "IPv4"
// and "IPv6".  This field only applies to Services of types ClusterIP,
// NodePort, and LoadBalancer, and does apply to "headless" services.
// This field will be wiped when updating a Service to type ExternalName.
//
// This field may hold a maximum of two entries (dual-stack families, in
// either order).  These families must correspond to the values of the
// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
// governed by the ipFamilyPolicy field.
func (o ElasticMapsServerSpecHttpServiceSpecOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceSpec) []string { return v.IpFamilies }).(pulumi.StringArrayOutput)
}

// IPFamilyPolicy represents the dual-stack-ness requested or required by
// this Service. If there is no value provided, then this field will be set
// to SingleStack. Services can be "SingleStack" (a single IP family),
// "PreferDualStack" (two IP families on dual-stack configured clusters or
// a single IP family on single-stack clusters), or "RequireDualStack"
// (two IP families on dual-stack configured clusters, otherwise fail). The
// ipFamilies and clusterIPs fields depend on the value of this field. This
// field will be wiped when updating a service to type ExternalName.
func (o ElasticMapsServerSpecHttpServiceSpecOutput) IpFamilyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceSpec) *string { return v.IpFamilyPolicy }).(pulumi.StringPtrOutput)
}

// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
// If specified, the value of this field must be a label-style identifier, with an optional prefix,
// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
// balancer implementation is used, today this is typically done through the cloud provider integration,
// but should apply for any default implementation. If set, it is assumed that a load balancer
// implementation is watching for Services with a matching class. Any default load balancer
// implementation (e.g. cloud providers) should ignore Services that set this field.
// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
func (o ElasticMapsServerSpecHttpServiceSpecOutput) LoadBalancerClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceSpec) *string { return v.LoadBalancerClass }).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer.
// This feature depends on whether the underlying cloud-provider supports specifying
// the loadBalancerIP when a load balancer is created.
// This field will be ignored if the cloud-provider does not support the feature.
// Deprecated: This field was under-specified and its meaning varies across implementations.
// Using it is non-portable and it may not support dual-stack.
// Users are encouraged to use implementation-specific annotations when available.
func (o ElasticMapsServerSpecHttpServiceSpecOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceSpec) *string { return v.LoadBalancerIP }).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider
// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
// cloud-provider does not support the feature."
// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
func (o ElasticMapsServerSpecHttpServiceSpecOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceSpec) []string { return v.LoadBalancerSourceRanges }).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticMapsServerSpecHttpServiceSpecOutput) Ports() ElasticMapsServerSpecHttpServiceSpecPortsArrayOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceSpec) []ElasticMapsServerSpecHttpServiceSpecPorts {
		return v.Ports
	}).(ElasticMapsServerSpecHttpServiceSpecPortsArrayOutput)
}

// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
// Service should disregard any indications of ready/not-ready.
// The primary use case for setting this field is for a StatefulSet's Headless Service to
// propagate SRV DNS records for its Pods for the purpose of peer discovery.
// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
// Services interpret this to mean that all endpoints are considered "ready" even if the
// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
// through the Endpoints or EndpointSlice resources can safely assume this behavior.
func (o ElasticMapsServerSpecHttpServiceSpecOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceSpec) *bool { return v.PublishNotReadyAddresses }).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this
// selector. If empty or not present, the service is assumed to have an
// external process managing its endpoints, which Kubernetes will not
// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
// Ignored if type is ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o ElasticMapsServerSpecHttpServiceSpecOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceSpec) map[string]string { return v.Selector }).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity.
// Enable client IP based session affinity.
// Must be ClientIP or None.
// Defaults to None.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticMapsServerSpecHttpServiceSpecOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceSpec) *string { return v.SessionAffinity }).(pulumi.StringPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
func (o ElasticMapsServerSpecHttpServiceSpecOutput) SessionAffinityConfig() ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceSpec) *ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfig {
		return v.SessionAffinityConfig
	}).(ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// TrafficDistribution offers a way to express preferences for how traffic is
// distributed to Service endpoints. Implementations can use this field as a
// hint, but are not required to guarantee strict adherence. If the field is
// not set, the implementation will apply its default routing strategy. If set
// to "PreferClose", implementations should prioritize endpoints that are
// topologically close (e.g., same zone).
// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
func (o ElasticMapsServerSpecHttpServiceSpecOutput) TrafficDistribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceSpec) *string { return v.TrafficDistribution }).(pulumi.StringPtrOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid
// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
// "ClusterIP" allocates a cluster-internal IP address for load-balancing
// to endpoints. Endpoints are determined by the selector or if that is not
// specified, by manual construction of an Endpoints object or
// EndpointSlice objects. If clusterIP is "None", no virtual IP is
// allocated and the endpoints are published as a set of endpoints rather
// than a virtual IP.
// "NodePort" builds on ClusterIP and allocates a port on every node which
// routes to the same endpoints as the clusterIP.
// "LoadBalancer" builds on NodePort and creates an external load-balancer
// (if supported in the current cloud) which routes to the same endpoints
// as the clusterIP.
// "ExternalName" aliases this service to the specified externalName.
// Several other fields do not apply to ExternalName services.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o ElasticMapsServerSpecHttpServiceSpecOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceSpec) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ElasticMapsServerSpecHttpServiceSpecPtrOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerSpecHttpServiceSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticMapsServerSpecHttpServiceSpec)(nil)).Elem()
}

func (o ElasticMapsServerSpecHttpServiceSpecPtrOutput) ToElasticMapsServerSpecHttpServiceSpecPtrOutput() ElasticMapsServerSpecHttpServiceSpecPtrOutput {
	return o
}

func (o ElasticMapsServerSpecHttpServiceSpecPtrOutput) ToElasticMapsServerSpecHttpServiceSpecPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServiceSpecPtrOutput {
	return o
}

func (o ElasticMapsServerSpecHttpServiceSpecPtrOutput) Elem() ElasticMapsServerSpecHttpServiceSpecOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceSpec) ElasticMapsServerSpecHttpServiceSpec {
		if v != nil {
			return *v
		}
		var ret ElasticMapsServerSpecHttpServiceSpec
		return ret
	}).(ElasticMapsServerSpecHttpServiceSpecOutput)
}

// allocateLoadBalancerNodePorts defines if NodePorts will be automatically
// allocated for services with type LoadBalancer.  Default is "true". It
// may be set to "false" if the cluster load-balancer does not rely on
// NodePorts.  If the caller requests specific NodePorts (by specifying a
// value), those requests will be respected, regardless of this field.
// This field may only be set for services with type LoadBalancer and will
// be cleared if the type is changed to any other type.
func (o ElasticMapsServerSpecHttpServiceSpecPtrOutput) AllocateLoadBalancerNodePorts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.AllocateLoadBalancerNodePorts
	}).(pulumi.BoolPtrOutput)
}

// clusterIP is the IP address of the service and is usually assigned
// randomly. If an address is specified manually, is in-range (as per
// system configuration), and is not in use, it will be allocated to the
// service; otherwise creation of the service will fail. This field may not
// be changed through updates unless the type field is also being changed
// to ExternalName (which requires this field to be blank) or the type
// field is being changed from ExternalName (in which case this field may
// optionally be specified, as describe above).  Valid values are "None",
// empty string (""), or a valid IP address. Setting this to "None" makes a
// "headless service" (no virtual IP), which is useful when direct endpoint
// connections are preferred and proxying is not required.  Only applies to
// types ClusterIP, NodePort, and LoadBalancer. If this field is specified
// when creating a Service of type ExternalName, creation will fail. This
// field will be wiped when updating a Service to type ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticMapsServerSpecHttpServiceSpecPtrOutput) ClusterIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ClusterIP
	}).(pulumi.StringPtrOutput)
}

// ClusterIPs is a list of IP addresses assigned to this service, and are
// usually assigned randomly.  If an address is specified manually, is
// in-range (as per system configuration), and is not in use, it will be
// allocated to the service; otherwise creation of the service will fail.
// This field may not be changed through updates unless the type field is
// also being changed to ExternalName (which requires this field to be
// empty) or the type field is being changed from ExternalName (in which
// case this field may optionally be specified, as describe above).  Valid
// values are "None", empty string (""), or a valid IP address.  Setting
// this to "None" makes a "headless service" (no virtual IP), which is
// useful when direct endpoint connections are preferred and proxying is
// not required.  Only applies to types ClusterIP, NodePort, and
// LoadBalancer. If this field is specified when creating a Service of type
// ExternalName, creation will fail. This field will be wiped when updating
// a Service to type ExternalName.  If this field is not specified, it will
// be initialized from the clusterIP field.  If this field is specified,
// clients must ensure that clusterIPs[0] and clusterIP have the same
// value.
//
// This field may hold a maximum of two entries (dual-stack IPs, in either order).
// These IPs must correspond to the values of the ipFamilies field. Both
// clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticMapsServerSpecHttpServiceSpecPtrOutput) ClusterIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.ClusterIPs
	}).(pulumi.StringArrayOutput)
}

// externalIPs is a list of IP addresses for which nodes in the cluster
// will also accept traffic for this service.  These IPs are not managed by
// Kubernetes.  The user is responsible for ensuring that traffic arrives
// at a node with this IP.  A common example is external load-balancers
// that are not part of the Kubernetes system.
func (o ElasticMapsServerSpecHttpServiceSpecPtrOutput) ExternalIPs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.ExternalIPs
	}).(pulumi.StringArrayOutput)
}

// externalName is the external reference that discovery mechanisms will
// return as an alias for this service (e.g. a DNS CNAME record). No
// proxying will be involved.  Must be a lowercase RFC-1123 hostname
// (https://tools.ietf.org/html/rfc1123) and requires `type` to be "ExternalName".
func (o ElasticMapsServerSpecHttpServiceSpecPtrOutput) ExternalName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ExternalName
	}).(pulumi.StringPtrOutput)
}

// externalTrafficPolicy describes how nodes distribute service traffic they
// receive on one of the Service's "externally-facing" addresses (NodePorts,
// ExternalIPs, and LoadBalancer IPs). If set to "Local", the proxy will configure
// the service in a way that assumes that external load balancers will take care
// of balancing the service traffic between nodes, and so each node will deliver
// traffic only to the node-local endpoints of the service, without masquerading
// the client source IP. (Traffic mistakenly sent to a node with no endpoints will
// be dropped.) The default value, "Cluster", uses the standard behavior of
// routing to all endpoints evenly (possibly modified by topology and other
// features). Note that traffic sent to an External IP or LoadBalancer IP from
// within the cluster will always get "Cluster" semantics, but clients sending to
// a NodePort from within the cluster may need to take traffic policy into account
// when picking a node.
func (o ElasticMapsServerSpecHttpServiceSpecPtrOutput) ExternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.ExternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// healthCheckNodePort specifies the healthcheck nodePort for the service.
// This only applies when type is set to LoadBalancer and
// externalTrafficPolicy is set to Local. If a value is specified, is
// in-range, and is not in use, it will be used.  If not specified, a value
// will be automatically allocated.  External systems (e.g. load-balancers)
// can use this port to determine if a given node holds endpoints for this
// service or not.  If this field is specified when creating a Service
// which does not need it, creation will fail. This field will be wiped
// when updating a Service to no longer need it (e.g. changing type).
// This field cannot be updated once set.
func (o ElasticMapsServerSpecHttpServiceSpecPtrOutput) HealthCheckNodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceSpec) *int {
		if v == nil {
			return nil
		}
		return v.HealthCheckNodePort
	}).(pulumi.IntPtrOutput)
}

// InternalTrafficPolicy describes how nodes distribute service traffic they
// receive on the ClusterIP. If set to "Local", the proxy will assume that pods
// only want to talk to endpoints of the service on the same node as the pod,
// dropping the traffic if there are no local endpoints. The default value,
// "Cluster", uses the standard behavior of routing to all endpoints evenly
// (possibly modified by topology and other features).
func (o ElasticMapsServerSpecHttpServiceSpecPtrOutput) InternalTrafficPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.InternalTrafficPolicy
	}).(pulumi.StringPtrOutput)
}

// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this
// service. This field is usually assigned automatically based on cluster
// configuration and the ipFamilyPolicy field. If this field is specified
// manually, the requested family is available in the cluster,
// and ipFamilyPolicy allows it, it will be used; otherwise creation of
// the service will fail. This field is conditionally mutable: it allows
// for adding or removing a secondary IP family, but it does not allow
// changing the primary IP family of the Service. Valid values are "IPv4"
// and "IPv6".  This field only applies to Services of types ClusterIP,
// NodePort, and LoadBalancer, and does apply to "headless" services.
// This field will be wiped when updating a Service to type ExternalName.
//
// This field may hold a maximum of two entries (dual-stack families, in
// either order).  These families must correspond to the values of the
// clusterIPs field, if specified. Both clusterIPs and ipFamilies are
// governed by the ipFamilyPolicy field.
func (o ElasticMapsServerSpecHttpServiceSpecPtrOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.IpFamilies
	}).(pulumi.StringArrayOutput)
}

// IPFamilyPolicy represents the dual-stack-ness requested or required by
// this Service. If there is no value provided, then this field will be set
// to SingleStack. Services can be "SingleStack" (a single IP family),
// "PreferDualStack" (two IP families on dual-stack configured clusters or
// a single IP family on single-stack clusters), or "RequireDualStack"
// (two IP families on dual-stack configured clusters, otherwise fail). The
// ipFamilies and clusterIPs fields depend on the value of this field. This
// field will be wiped when updating a service to type ExternalName.
func (o ElasticMapsServerSpecHttpServiceSpecPtrOutput) IpFamilyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.IpFamilyPolicy
	}).(pulumi.StringPtrOutput)
}

// loadBalancerClass is the class of the load balancer implementation this Service belongs to.
// If specified, the value of this field must be a label-style identifier, with an optional prefix,
// e.g. "internal-vip" or "example.com/internal-vip". Unprefixed names are reserved for end-users.
// This field can only be set when the Service type is 'LoadBalancer'. If not set, the default load
// balancer implementation is used, today this is typically done through the cloud provider integration,
// but should apply for any default implementation. If set, it is assumed that a load balancer
// implementation is watching for Services with a matching class. Any default load balancer
// implementation (e.g. cloud providers) should ignore Services that set this field.
// This field can only be set when creating or updating a Service to type 'LoadBalancer'.
// Once set, it can not be changed. This field will be wiped when a service is updated to a non 'LoadBalancer' type.
func (o ElasticMapsServerSpecHttpServiceSpecPtrOutput) LoadBalancerClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerClass
	}).(pulumi.StringPtrOutput)
}

// Only applies to Service Type: LoadBalancer.
// This feature depends on whether the underlying cloud-provider supports specifying
// the loadBalancerIP when a load balancer is created.
// This field will be ignored if the cloud-provider does not support the feature.
// Deprecated: This field was under-specified and its meaning varies across implementations.
// Using it is non-portable and it may not support dual-stack.
// Users are encouraged to use implementation-specific annotations when available.
func (o ElasticMapsServerSpecHttpServiceSpecPtrOutput) LoadBalancerIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerIP
	}).(pulumi.StringPtrOutput)
}

// If specified and supported by the platform, this will restrict traffic through the cloud-provider
// load-balancer will be restricted to the specified client IPs. This field will be ignored if the
// cloud-provider does not support the feature."
// More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/
func (o ElasticMapsServerSpecHttpServiceSpecPtrOutput) LoadBalancerSourceRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceSpec) []string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSourceRanges
	}).(pulumi.StringArrayOutput)
}

// The list of ports that are exposed by this service.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticMapsServerSpecHttpServiceSpecPtrOutput) Ports() ElasticMapsServerSpecHttpServiceSpecPortsArrayOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceSpec) []ElasticMapsServerSpecHttpServiceSpecPorts {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(ElasticMapsServerSpecHttpServiceSpecPortsArrayOutput)
}

// publishNotReadyAddresses indicates that any agent which deals with endpoints for this
// Service should disregard any indications of ready/not-ready.
// The primary use case for setting this field is for a StatefulSet's Headless Service to
// propagate SRV DNS records for its Pods for the purpose of peer discovery.
// The Kubernetes controllers that generate Endpoints and EndpointSlice resources for
// Services interpret this to mean that all endpoints are considered "ready" even if the
// Pods themselves are not. Agents which consume only Kubernetes generated endpoints
// through the Endpoints or EndpointSlice resources can safely assume this behavior.
func (o ElasticMapsServerSpecHttpServiceSpecPtrOutput) PublishNotReadyAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceSpec) *bool {
		if v == nil {
			return nil
		}
		return v.PublishNotReadyAddresses
	}).(pulumi.BoolPtrOutput)
}

// Route service traffic to pods with label keys and values matching this
// selector. If empty or not present, the service is assumed to have an
// external process managing its endpoints, which Kubernetes will not
// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
// Ignored if type is ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
func (o ElasticMapsServerSpecHttpServiceSpecPtrOutput) Selector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceSpec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringMapOutput)
}

// Supports "ClientIP" and "None". Used to maintain session affinity.
// Enable client IP based session affinity.
// Must be ClientIP or None.
// Defaults to None.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
func (o ElasticMapsServerSpecHttpServiceSpecPtrOutput) SessionAffinity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.SessionAffinity
	}).(pulumi.StringPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
func (o ElasticMapsServerSpecHttpServiceSpecPtrOutput) SessionAffinityConfig() ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceSpec) *ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfig {
		if v == nil {
			return nil
		}
		return v.SessionAffinityConfig
	}).(ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// TrafficDistribution offers a way to express preferences for how traffic is
// distributed to Service endpoints. Implementations can use this field as a
// hint, but are not required to guarantee strict adherence. If the field is
// not set, the implementation will apply its default routing strategy. If set
// to "PreferClose", implementations should prioritize endpoints that are
// topologically close (e.g., same zone).
// This is an alpha field and requires enabling ServiceTrafficDistribution feature.
func (o ElasticMapsServerSpecHttpServiceSpecPtrOutput) TrafficDistribution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.TrafficDistribution
	}).(pulumi.StringPtrOutput)
}

// type determines how the Service is exposed. Defaults to ClusterIP. Valid
// options are ExternalName, ClusterIP, NodePort, and LoadBalancer.
// "ClusterIP" allocates a cluster-internal IP address for load-balancing
// to endpoints. Endpoints are determined by the selector or if that is not
// specified, by manual construction of an Endpoints object or
// EndpointSlice objects. If clusterIP is "None", no virtual IP is
// allocated and the endpoints are published as a set of endpoints rather
// than a virtual IP.
// "NodePort" builds on ClusterIP and allocates a port on every node which
// routes to the same endpoints as the clusterIP.
// "LoadBalancer" builds on NodePort and creates an external load-balancer
// (if supported in the current cloud) which routes to the same endpoints
// as the clusterIP.
// "ExternalName" aliases this service to the specified externalName.
// Several other fields do not apply to ExternalName services.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
func (o ElasticMapsServerSpecHttpServiceSpecPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceSpec) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// ServicePort contains information on service's port.
type ElasticMapsServerSpecHttpServiceSpecPorts struct {
	// The application protocol for this port.
	// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
	// This field follows standard Kubernetes label syntax.
	// Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per
	// RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
	//   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
	//   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
	//
	// * Other protocols should use implementation-defined prefixed names such as
	// mycompany.com/my-custom-protocol.
	AppProtocol *string `pulumi:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL.
	// All ports within a ServiceSpec must have unique names. When considering
	// the endpoints for a Service, this must match the 'name' field in the
	// EndpointPort.
	// Optional if only one ServicePort is defined on this service.
	Name *string `pulumi:"name"`
	// The port on each node on which this service is exposed when type is
	// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
	// specified, in-range, and not in use it will be used, otherwise the
	// operation will fail.  If not specified, a port will be allocated if this
	// Service requires one.  If this field is specified when creating a
	// Service which does not need it, creation will fail. This field will be
	// wiped when updating a Service to no longer need it (e.g. changing type
	// from NodePort to ClusterIP).
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort *int `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port int `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
	// Default is TCP.
	Protocol *string `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service.
	// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	// If this is a string, it will be looked up as a named port in the
	// target Pod's container ports. If this is not specified, the value
	// of the 'port' field is used (an identity map).
	// This field is ignored for services with clusterIP=None, and should be
	// omitted or set equal to the 'port' field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort interface{} `pulumi:"targetPort"`
}

// Defaults sets the appropriate defaults for ElasticMapsServerSpecHttpServiceSpecPorts
func (val *ElasticMapsServerSpecHttpServiceSpecPorts) Defaults() *ElasticMapsServerSpecHttpServiceSpecPorts {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		protocol_ := "TCP"
		tmp.Protocol = &protocol_
	}
	return &tmp
}

// ElasticMapsServerSpecHttpServiceSpecPortsInput is an input type that accepts ElasticMapsServerSpecHttpServiceSpecPortsArgs and ElasticMapsServerSpecHttpServiceSpecPortsOutput values.
// You can construct a concrete instance of `ElasticMapsServerSpecHttpServiceSpecPortsInput` via:
//
//	ElasticMapsServerSpecHttpServiceSpecPortsArgs{...}
type ElasticMapsServerSpecHttpServiceSpecPortsInput interface {
	pulumi.Input

	ToElasticMapsServerSpecHttpServiceSpecPortsOutput() ElasticMapsServerSpecHttpServiceSpecPortsOutput
	ToElasticMapsServerSpecHttpServiceSpecPortsOutputWithContext(context.Context) ElasticMapsServerSpecHttpServiceSpecPortsOutput
}

// ServicePort contains information on service's port.
type ElasticMapsServerSpecHttpServiceSpecPortsArgs struct {
	// The application protocol for this port.
	// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
	// This field follows standard Kubernetes label syntax.
	// Valid values are either:
	//
	// * Un-prefixed protocol names - reserved for IANA standard service names (as per
	// RFC-6335 and https://www.iana.org/assignments/service-names).
	//
	// * Kubernetes-defined prefixed names:
	//   * 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
	//   * 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
	//   * 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
	//
	// * Other protocols should use implementation-defined prefixed names such as
	// mycompany.com/my-custom-protocol.
	AppProtocol pulumi.StringPtrInput `pulumi:"appProtocol"`
	// The name of this port within the service. This must be a DNS_LABEL.
	// All ports within a ServiceSpec must have unique names. When considering
	// the endpoints for a Service, this must match the 'name' field in the
	// EndpointPort.
	// Optional if only one ServicePort is defined on this service.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The port on each node on which this service is exposed when type is
	// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
	// specified, in-range, and not in use it will be used, otherwise the
	// operation will fail.  If not specified, a port will be allocated if this
	// Service requires one.  If this field is specified when creating a
	// Service which does not need it, creation will fail. This field will be
	// wiped when updating a Service to no longer need it (e.g. changing type
	// from NodePort to ClusterIP).
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort pulumi.IntPtrInput `pulumi:"nodePort"`
	// The port that will be exposed by this service.
	Port pulumi.IntInput `pulumi:"port"`
	// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
	// Default is TCP.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Number or name of the port to access on the pods targeted by the service.
	// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	// If this is a string, it will be looked up as a named port in the
	// target Pod's container ports. If this is not specified, the value
	// of the 'port' field is used (an identity map).
	// This field is ignored for services with clusterIP=None, and should be
	// omitted or set equal to the 'port' field.
	// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort pulumi.Input `pulumi:"targetPort"`
}

// Defaults sets the appropriate defaults for ElasticMapsServerSpecHttpServiceSpecPortsArgs
func (val *ElasticMapsServerSpecHttpServiceSpecPortsArgs) Defaults() *ElasticMapsServerSpecHttpServiceSpecPortsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		tmp.Protocol = pulumi.StringPtr("TCP")
	}
	return &tmp
}
func (ElasticMapsServerSpecHttpServiceSpecPortsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticMapsServerSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (i ElasticMapsServerSpecHttpServiceSpecPortsArgs) ToElasticMapsServerSpecHttpServiceSpecPortsOutput() ElasticMapsServerSpecHttpServiceSpecPortsOutput {
	return i.ToElasticMapsServerSpecHttpServiceSpecPortsOutputWithContext(context.Background())
}

func (i ElasticMapsServerSpecHttpServiceSpecPortsArgs) ToElasticMapsServerSpecHttpServiceSpecPortsOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServiceSpecPortsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpServiceSpecPortsOutput)
}

// ElasticMapsServerSpecHttpServiceSpecPortsArrayInput is an input type that accepts ElasticMapsServerSpecHttpServiceSpecPortsArray and ElasticMapsServerSpecHttpServiceSpecPortsArrayOutput values.
// You can construct a concrete instance of `ElasticMapsServerSpecHttpServiceSpecPortsArrayInput` via:
//
//	ElasticMapsServerSpecHttpServiceSpecPortsArray{ ElasticMapsServerSpecHttpServiceSpecPortsArgs{...} }
type ElasticMapsServerSpecHttpServiceSpecPortsArrayInput interface {
	pulumi.Input

	ToElasticMapsServerSpecHttpServiceSpecPortsArrayOutput() ElasticMapsServerSpecHttpServiceSpecPortsArrayOutput
	ToElasticMapsServerSpecHttpServiceSpecPortsArrayOutputWithContext(context.Context) ElasticMapsServerSpecHttpServiceSpecPortsArrayOutput
}

type ElasticMapsServerSpecHttpServiceSpecPortsArray []ElasticMapsServerSpecHttpServiceSpecPortsInput

func (ElasticMapsServerSpecHttpServiceSpecPortsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticMapsServerSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (i ElasticMapsServerSpecHttpServiceSpecPortsArray) ToElasticMapsServerSpecHttpServiceSpecPortsArrayOutput() ElasticMapsServerSpecHttpServiceSpecPortsArrayOutput {
	return i.ToElasticMapsServerSpecHttpServiceSpecPortsArrayOutputWithContext(context.Background())
}

func (i ElasticMapsServerSpecHttpServiceSpecPortsArray) ToElasticMapsServerSpecHttpServiceSpecPortsArrayOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServiceSpecPortsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpServiceSpecPortsArrayOutput)
}

// ServicePort contains information on service's port.
type ElasticMapsServerSpecHttpServiceSpecPortsOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerSpecHttpServiceSpecPortsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticMapsServerSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (o ElasticMapsServerSpecHttpServiceSpecPortsOutput) ToElasticMapsServerSpecHttpServiceSpecPortsOutput() ElasticMapsServerSpecHttpServiceSpecPortsOutput {
	return o
}

func (o ElasticMapsServerSpecHttpServiceSpecPortsOutput) ToElasticMapsServerSpecHttpServiceSpecPortsOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServiceSpecPortsOutput {
	return o
}

// The application protocol for this port.
// This is used as a hint for implementations to offer richer behavior for protocols that they understand.
// This field follows standard Kubernetes label syntax.
// Valid values are either:
//
// * Un-prefixed protocol names - reserved for IANA standard service names (as per
// RFC-6335 and https://www.iana.org/assignments/service-names).
//
// * Kubernetes-defined prefixed names:
//   - 'kubernetes.io/h2c' - HTTP/2 prior knowledge over cleartext as described in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
//   - 'kubernetes.io/ws'  - WebSocket over cleartext as described in https://www.rfc-editor.org/rfc/rfc6455
//   - 'kubernetes.io/wss' - WebSocket over TLS as described in https://www.rfc-editor.org/rfc/rfc6455
//
// * Other protocols should use implementation-defined prefixed names such as
// mycompany.com/my-custom-protocol.
func (o ElasticMapsServerSpecHttpServiceSpecPortsOutput) AppProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceSpecPorts) *string { return v.AppProtocol }).(pulumi.StringPtrOutput)
}

// The name of this port within the service. This must be a DNS_LABEL.
// All ports within a ServiceSpec must have unique names. When considering
// the endpoints for a Service, this must match the 'name' field in the
// EndpointPort.
// Optional if only one ServicePort is defined on this service.
func (o ElasticMapsServerSpecHttpServiceSpecPortsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceSpecPorts) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The port on each node on which this service is exposed when type is
// NodePort or LoadBalancer.  Usually assigned by the system. If a value is
// specified, in-range, and not in use it will be used, otherwise the
// operation will fail.  If not specified, a port will be allocated if this
// Service requires one.  If this field is specified when creating a
// Service which does not need it, creation will fail. This field will be
// wiped when updating a Service to no longer need it (e.g. changing type
// from NodePort to ClusterIP).
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
func (o ElasticMapsServerSpecHttpServiceSpecPortsOutput) NodePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceSpecPorts) *int { return v.NodePort }).(pulumi.IntPtrOutput)
}

// The port that will be exposed by this service.
func (o ElasticMapsServerSpecHttpServiceSpecPortsOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceSpecPorts) int { return v.Port }).(pulumi.IntOutput)
}

// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP".
// Default is TCP.
func (o ElasticMapsServerSpecHttpServiceSpecPortsOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceSpecPorts) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the pods targeted by the service.
// Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
// If this is a string, it will be looked up as a named port in the
// target Pod's container ports. If this is not specified, the value
// of the 'port' field is used (an identity map).
// This field is ignored for services with clusterIP=None, and should be
// omitted or set equal to the 'port' field.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
func (o ElasticMapsServerSpecHttpServiceSpecPortsOutput) TargetPort() pulumi.AnyOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceSpecPorts) interface{} { return v.TargetPort }).(pulumi.AnyOutput)
}

type ElasticMapsServerSpecHttpServiceSpecPortsArrayOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerSpecHttpServiceSpecPortsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticMapsServerSpecHttpServiceSpecPorts)(nil)).Elem()
}

func (o ElasticMapsServerSpecHttpServiceSpecPortsArrayOutput) ToElasticMapsServerSpecHttpServiceSpecPortsArrayOutput() ElasticMapsServerSpecHttpServiceSpecPortsArrayOutput {
	return o
}

func (o ElasticMapsServerSpecHttpServiceSpecPortsArrayOutput) ToElasticMapsServerSpecHttpServiceSpecPortsArrayOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServiceSpecPortsArrayOutput {
	return o
}

func (o ElasticMapsServerSpecHttpServiceSpecPortsArrayOutput) Index(i pulumi.IntInput) ElasticMapsServerSpecHttpServiceSpecPortsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticMapsServerSpecHttpServiceSpecPorts {
		return vs[0].([]ElasticMapsServerSpecHttpServiceSpecPorts)[vs[1].(int)]
	}).(ElasticMapsServerSpecHttpServiceSpecPortsOutput)
}

// Route service traffic to pods with label keys and values matching this
// selector. If empty or not present, the service is assumed to have an
// external process managing its endpoints, which Kubernetes will not
// modify. Only applies to types ClusterIP, NodePort, and LoadBalancer.
// Ignored if type is ExternalName.
// More info: https://kubernetes.io/docs/concepts/services-networking/service/
type ElasticMapsServerSpecHttpServiceSpecSelector struct {
}

// sessionAffinityConfig contains the configurations of session affinity.
type ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfig struct {
	// clientIP contains the configurations of Client IP based session affinity.
	ClientIP *ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIp `pulumi:"clientIP"`
}

// ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigInput is an input type that accepts ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigArgs and ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigOutput values.
// You can construct a concrete instance of `ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigInput` via:
//
//	ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigArgs{...}
type ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigInput interface {
	pulumi.Input

	ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigOutput() ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigOutput
	ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(context.Context) ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigOutput
}

// sessionAffinityConfig contains the configurations of session affinity.
type ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigArgs struct {
	// clientIP contains the configurations of Client IP based session affinity.
	ClientIP ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrInput `pulumi:"clientIP"`
}

func (ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (i ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigArgs) ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigOutput() ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigOutput {
	return i.ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(context.Background())
}

func (i ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigArgs) ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigOutput)
}

func (i ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigArgs) ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput() ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return i.ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (i ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigArgs) ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigOutput).ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx)
}

// ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrInput is an input type that accepts ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigArgs, ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtr and ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput values.
// You can construct a concrete instance of `ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrInput` via:
//
//	        ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigArgs{...}
//
//	or:
//
//	        nil
type ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrInput interface {
	pulumi.Input

	ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput() ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput
	ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Context) ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput
}

type elasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrType ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigArgs

func ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtr(v *ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigArgs) ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrInput {
	return (*elasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrType)(v)
}

func (*elasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (i *elasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrType) ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput() ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return i.ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (i *elasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrType) ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// sessionAffinityConfig contains the configurations of session affinity.
type ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (o ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigOutput) ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigOutput() ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigOutput {
	return o
}

func (o ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigOutput) ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigOutput {
	return o
}

func (o ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigOutput) ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput() ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(context.Background())
}

func (o ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigOutput) ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfig) *ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfig {
		return &v
	}).(ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
func (o ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigOutput) ClientIP() ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfig) *ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIp {
		return v.ClientIP
	}).(ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput)
}

type ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfig)(nil)).Elem()
}

func (o ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput() ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o
}

func (o ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput {
	return o
}

func (o ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput) Elem() ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfig) ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfig {
		if v != nil {
			return *v
		}
		var ret ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfig
		return ret
	}).(ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
func (o ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput) ClientIP() ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfig) *ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIp {
		if v == nil {
			return nil
		}
		return v.ClientIP
	}).(ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
type ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIp struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
	// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
	// Default value is 10800(for 3 hours).
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpInput is an input type that accepts ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpArgs and ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput values.
// You can construct a concrete instance of `ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpInput` via:
//
//	ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpArgs{...}
type ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpInput interface {
	pulumi.Input

	ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput() ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput
	ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutputWithContext(context.Context) ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput
}

// clientIP contains the configurations of Client IP based session affinity.
type ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpArgs struct {
	// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
	// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
	// Default value is 10800(for 3 hours).
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIp)(nil)).Elem()
}

func (i ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpArgs) ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput() ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput {
	return i.ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutputWithContext(context.Background())
}

func (i ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpArgs) ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput)
}

func (i ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpArgs) ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput() ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return i.ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(context.Background())
}

func (i ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpArgs) ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput).ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(ctx)
}

// ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrInput is an input type that accepts ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpArgs, ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtr and ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput values.
// You can construct a concrete instance of `ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrInput` via:
//
//	        ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpArgs{...}
//
//	or:
//
//	        nil
type ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrInput interface {
	pulumi.Input

	ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput() ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput
	ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(context.Context) ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput
}

type elasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrType ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpArgs

func ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtr(v *ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpArgs) ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrInput {
	return (*elasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrType)(v)
}

func (*elasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIp)(nil)).Elem()
}

func (i *elasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrType) ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput() ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return i.ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(context.Background())
}

func (i *elasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrType) ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput)
}

// clientIP contains the configurations of Client IP based session affinity.
type ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIp)(nil)).Elem()
}

func (o ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput) ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput() ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput {
	return o
}

func (o ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput) ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput {
	return o
}

func (o ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput) ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput() ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o.ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(context.Background())
}

func (o ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput) ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIp) *ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIp {
		return &v
	}).(ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
// Default value is 10800(for 3 hours).
func (o ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIp) *int {
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

type ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIp)(nil)).Elem()
}

func (o ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput) ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput() ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o
}

func (o ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput) ToElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput {
	return o
}

func (o ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput) Elem() ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIp) ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIp {
		if v != nil {
			return *v
		}
		var ret ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIp
		return ret
	}).(ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput)
}

// timeoutSeconds specifies the seconds of ClientIP type session sticky time.
// The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP".
// Default value is 10800(for 3 hours).
func (o ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIp) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
type ElasticMapsServerSpecHttpTls struct {
	// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
	// The referenced secret should contain the following:
	//
	// - `ca.crt`: The certificate authority (optional).
	// - `tls.crt`: The certificate (or a chain).
	// - `tls.key`: The private key to the first certificate in the certificate chain.
	Certificate *ElasticMapsServerSpecHttpTlsCertificate `pulumi:"certificate"`
	// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
	SelfSignedCertificate *ElasticMapsServerSpecHttpTlsSelfSignedCertificate `pulumi:"selfSignedCertificate"`
}

// ElasticMapsServerSpecHttpTlsInput is an input type that accepts ElasticMapsServerSpecHttpTlsArgs and ElasticMapsServerSpecHttpTlsOutput values.
// You can construct a concrete instance of `ElasticMapsServerSpecHttpTlsInput` via:
//
//	ElasticMapsServerSpecHttpTlsArgs{...}
type ElasticMapsServerSpecHttpTlsInput interface {
	pulumi.Input

	ToElasticMapsServerSpecHttpTlsOutput() ElasticMapsServerSpecHttpTlsOutput
	ToElasticMapsServerSpecHttpTlsOutputWithContext(context.Context) ElasticMapsServerSpecHttpTlsOutput
}

// TLS defines options for configuring TLS for HTTP.
type ElasticMapsServerSpecHttpTlsArgs struct {
	// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
	// The referenced secret should contain the following:
	//
	// - `ca.crt`: The certificate authority (optional).
	// - `tls.crt`: The certificate (or a chain).
	// - `tls.key`: The private key to the first certificate in the certificate chain.
	Certificate ElasticMapsServerSpecHttpTlsCertificatePtrInput `pulumi:"certificate"`
	// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
	SelfSignedCertificate ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrInput `pulumi:"selfSignedCertificate"`
}

func (ElasticMapsServerSpecHttpTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticMapsServerSpecHttpTls)(nil)).Elem()
}

func (i ElasticMapsServerSpecHttpTlsArgs) ToElasticMapsServerSpecHttpTlsOutput() ElasticMapsServerSpecHttpTlsOutput {
	return i.ToElasticMapsServerSpecHttpTlsOutputWithContext(context.Background())
}

func (i ElasticMapsServerSpecHttpTlsArgs) ToElasticMapsServerSpecHttpTlsOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpTlsOutput)
}

func (i ElasticMapsServerSpecHttpTlsArgs) ToElasticMapsServerSpecHttpTlsPtrOutput() ElasticMapsServerSpecHttpTlsPtrOutput {
	return i.ToElasticMapsServerSpecHttpTlsPtrOutputWithContext(context.Background())
}

func (i ElasticMapsServerSpecHttpTlsArgs) ToElasticMapsServerSpecHttpTlsPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpTlsOutput).ToElasticMapsServerSpecHttpTlsPtrOutputWithContext(ctx)
}

// ElasticMapsServerSpecHttpTlsPtrInput is an input type that accepts ElasticMapsServerSpecHttpTlsArgs, ElasticMapsServerSpecHttpTlsPtr and ElasticMapsServerSpecHttpTlsPtrOutput values.
// You can construct a concrete instance of `ElasticMapsServerSpecHttpTlsPtrInput` via:
//
//	        ElasticMapsServerSpecHttpTlsArgs{...}
//
//	or:
//
//	        nil
type ElasticMapsServerSpecHttpTlsPtrInput interface {
	pulumi.Input

	ToElasticMapsServerSpecHttpTlsPtrOutput() ElasticMapsServerSpecHttpTlsPtrOutput
	ToElasticMapsServerSpecHttpTlsPtrOutputWithContext(context.Context) ElasticMapsServerSpecHttpTlsPtrOutput
}

type elasticMapsServerSpecHttpTlsPtrType ElasticMapsServerSpecHttpTlsArgs

func ElasticMapsServerSpecHttpTlsPtr(v *ElasticMapsServerSpecHttpTlsArgs) ElasticMapsServerSpecHttpTlsPtrInput {
	return (*elasticMapsServerSpecHttpTlsPtrType)(v)
}

func (*elasticMapsServerSpecHttpTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticMapsServerSpecHttpTls)(nil)).Elem()
}

func (i *elasticMapsServerSpecHttpTlsPtrType) ToElasticMapsServerSpecHttpTlsPtrOutput() ElasticMapsServerSpecHttpTlsPtrOutput {
	return i.ToElasticMapsServerSpecHttpTlsPtrOutputWithContext(context.Background())
}

func (i *elasticMapsServerSpecHttpTlsPtrType) ToElasticMapsServerSpecHttpTlsPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpTlsPtrOutput)
}

// TLS defines options for configuring TLS for HTTP.
type ElasticMapsServerSpecHttpTlsOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerSpecHttpTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticMapsServerSpecHttpTls)(nil)).Elem()
}

func (o ElasticMapsServerSpecHttpTlsOutput) ToElasticMapsServerSpecHttpTlsOutput() ElasticMapsServerSpecHttpTlsOutput {
	return o
}

func (o ElasticMapsServerSpecHttpTlsOutput) ToElasticMapsServerSpecHttpTlsOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpTlsOutput {
	return o
}

func (o ElasticMapsServerSpecHttpTlsOutput) ToElasticMapsServerSpecHttpTlsPtrOutput() ElasticMapsServerSpecHttpTlsPtrOutput {
	return o.ToElasticMapsServerSpecHttpTlsPtrOutputWithContext(context.Background())
}

func (o ElasticMapsServerSpecHttpTlsOutput) ToElasticMapsServerSpecHttpTlsPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpTlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticMapsServerSpecHttpTls) *ElasticMapsServerSpecHttpTls {
		return &v
	}).(ElasticMapsServerSpecHttpTlsPtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
func (o ElasticMapsServerSpecHttpTlsOutput) Certificate() ElasticMapsServerSpecHttpTlsCertificatePtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpTls) *ElasticMapsServerSpecHttpTlsCertificate { return v.Certificate }).(ElasticMapsServerSpecHttpTlsCertificatePtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
func (o ElasticMapsServerSpecHttpTlsOutput) SelfSignedCertificate() ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpTls) *ElasticMapsServerSpecHttpTlsSelfSignedCertificate {
		return v.SelfSignedCertificate
	}).(ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutput)
}

type ElasticMapsServerSpecHttpTlsPtrOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerSpecHttpTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticMapsServerSpecHttpTls)(nil)).Elem()
}

func (o ElasticMapsServerSpecHttpTlsPtrOutput) ToElasticMapsServerSpecHttpTlsPtrOutput() ElasticMapsServerSpecHttpTlsPtrOutput {
	return o
}

func (o ElasticMapsServerSpecHttpTlsPtrOutput) ToElasticMapsServerSpecHttpTlsPtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpTlsPtrOutput {
	return o
}

func (o ElasticMapsServerSpecHttpTlsPtrOutput) Elem() ElasticMapsServerSpecHttpTlsOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpTls) ElasticMapsServerSpecHttpTls {
		if v != nil {
			return *v
		}
		var ret ElasticMapsServerSpecHttpTls
		return ret
	}).(ElasticMapsServerSpecHttpTlsOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
func (o ElasticMapsServerSpecHttpTlsPtrOutput) Certificate() ElasticMapsServerSpecHttpTlsCertificatePtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpTls) *ElasticMapsServerSpecHttpTlsCertificate {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(ElasticMapsServerSpecHttpTlsCertificatePtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
func (o ElasticMapsServerSpecHttpTlsPtrOutput) SelfSignedCertificate() ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpTls) *ElasticMapsServerSpecHttpTlsSelfSignedCertificate {
		if v == nil {
			return nil
		}
		return v.SelfSignedCertificate
	}).(ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
type ElasticMapsServerSpecHttpTlsCertificate struct {
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// ElasticMapsServerSpecHttpTlsCertificateInput is an input type that accepts ElasticMapsServerSpecHttpTlsCertificateArgs and ElasticMapsServerSpecHttpTlsCertificateOutput values.
// You can construct a concrete instance of `ElasticMapsServerSpecHttpTlsCertificateInput` via:
//
//	ElasticMapsServerSpecHttpTlsCertificateArgs{...}
type ElasticMapsServerSpecHttpTlsCertificateInput interface {
	pulumi.Input

	ToElasticMapsServerSpecHttpTlsCertificateOutput() ElasticMapsServerSpecHttpTlsCertificateOutput
	ToElasticMapsServerSpecHttpTlsCertificateOutputWithContext(context.Context) ElasticMapsServerSpecHttpTlsCertificateOutput
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
type ElasticMapsServerSpecHttpTlsCertificateArgs struct {
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (ElasticMapsServerSpecHttpTlsCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticMapsServerSpecHttpTlsCertificate)(nil)).Elem()
}

func (i ElasticMapsServerSpecHttpTlsCertificateArgs) ToElasticMapsServerSpecHttpTlsCertificateOutput() ElasticMapsServerSpecHttpTlsCertificateOutput {
	return i.ToElasticMapsServerSpecHttpTlsCertificateOutputWithContext(context.Background())
}

func (i ElasticMapsServerSpecHttpTlsCertificateArgs) ToElasticMapsServerSpecHttpTlsCertificateOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpTlsCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpTlsCertificateOutput)
}

func (i ElasticMapsServerSpecHttpTlsCertificateArgs) ToElasticMapsServerSpecHttpTlsCertificatePtrOutput() ElasticMapsServerSpecHttpTlsCertificatePtrOutput {
	return i.ToElasticMapsServerSpecHttpTlsCertificatePtrOutputWithContext(context.Background())
}

func (i ElasticMapsServerSpecHttpTlsCertificateArgs) ToElasticMapsServerSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpTlsCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpTlsCertificateOutput).ToElasticMapsServerSpecHttpTlsCertificatePtrOutputWithContext(ctx)
}

// ElasticMapsServerSpecHttpTlsCertificatePtrInput is an input type that accepts ElasticMapsServerSpecHttpTlsCertificateArgs, ElasticMapsServerSpecHttpTlsCertificatePtr and ElasticMapsServerSpecHttpTlsCertificatePtrOutput values.
// You can construct a concrete instance of `ElasticMapsServerSpecHttpTlsCertificatePtrInput` via:
//
//	        ElasticMapsServerSpecHttpTlsCertificateArgs{...}
//
//	or:
//
//	        nil
type ElasticMapsServerSpecHttpTlsCertificatePtrInput interface {
	pulumi.Input

	ToElasticMapsServerSpecHttpTlsCertificatePtrOutput() ElasticMapsServerSpecHttpTlsCertificatePtrOutput
	ToElasticMapsServerSpecHttpTlsCertificatePtrOutputWithContext(context.Context) ElasticMapsServerSpecHttpTlsCertificatePtrOutput
}

type elasticMapsServerSpecHttpTlsCertificatePtrType ElasticMapsServerSpecHttpTlsCertificateArgs

func ElasticMapsServerSpecHttpTlsCertificatePtr(v *ElasticMapsServerSpecHttpTlsCertificateArgs) ElasticMapsServerSpecHttpTlsCertificatePtrInput {
	return (*elasticMapsServerSpecHttpTlsCertificatePtrType)(v)
}

func (*elasticMapsServerSpecHttpTlsCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticMapsServerSpecHttpTlsCertificate)(nil)).Elem()
}

func (i *elasticMapsServerSpecHttpTlsCertificatePtrType) ToElasticMapsServerSpecHttpTlsCertificatePtrOutput() ElasticMapsServerSpecHttpTlsCertificatePtrOutput {
	return i.ToElasticMapsServerSpecHttpTlsCertificatePtrOutputWithContext(context.Background())
}

func (i *elasticMapsServerSpecHttpTlsCertificatePtrType) ToElasticMapsServerSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpTlsCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpTlsCertificatePtrOutput)
}

// Certificate is a reference to a Kubernetes secret that contains the certificate and private key for enabling TLS.
// The referenced secret should contain the following:
//
// - `ca.crt`: The certificate authority (optional).
// - `tls.crt`: The certificate (or a chain).
// - `tls.key`: The private key to the first certificate in the certificate chain.
type ElasticMapsServerSpecHttpTlsCertificateOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerSpecHttpTlsCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticMapsServerSpecHttpTlsCertificate)(nil)).Elem()
}

func (o ElasticMapsServerSpecHttpTlsCertificateOutput) ToElasticMapsServerSpecHttpTlsCertificateOutput() ElasticMapsServerSpecHttpTlsCertificateOutput {
	return o
}

func (o ElasticMapsServerSpecHttpTlsCertificateOutput) ToElasticMapsServerSpecHttpTlsCertificateOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpTlsCertificateOutput {
	return o
}

func (o ElasticMapsServerSpecHttpTlsCertificateOutput) ToElasticMapsServerSpecHttpTlsCertificatePtrOutput() ElasticMapsServerSpecHttpTlsCertificatePtrOutput {
	return o.ToElasticMapsServerSpecHttpTlsCertificatePtrOutputWithContext(context.Background())
}

func (o ElasticMapsServerSpecHttpTlsCertificateOutput) ToElasticMapsServerSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpTlsCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticMapsServerSpecHttpTlsCertificate) *ElasticMapsServerSpecHttpTlsCertificate {
		return &v
	}).(ElasticMapsServerSpecHttpTlsCertificatePtrOutput)
}

// SecretName is the name of the secret.
func (o ElasticMapsServerSpecHttpTlsCertificateOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpTlsCertificate) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type ElasticMapsServerSpecHttpTlsCertificatePtrOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerSpecHttpTlsCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticMapsServerSpecHttpTlsCertificate)(nil)).Elem()
}

func (o ElasticMapsServerSpecHttpTlsCertificatePtrOutput) ToElasticMapsServerSpecHttpTlsCertificatePtrOutput() ElasticMapsServerSpecHttpTlsCertificatePtrOutput {
	return o
}

func (o ElasticMapsServerSpecHttpTlsCertificatePtrOutput) ToElasticMapsServerSpecHttpTlsCertificatePtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpTlsCertificatePtrOutput {
	return o
}

func (o ElasticMapsServerSpecHttpTlsCertificatePtrOutput) Elem() ElasticMapsServerSpecHttpTlsCertificateOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpTlsCertificate) ElasticMapsServerSpecHttpTlsCertificate {
		if v != nil {
			return *v
		}
		var ret ElasticMapsServerSpecHttpTlsCertificate
		return ret
	}).(ElasticMapsServerSpecHttpTlsCertificateOutput)
}

// SecretName is the name of the secret.
func (o ElasticMapsServerSpecHttpTlsCertificatePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpTlsCertificate) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type ElasticMapsServerSpecHttpTlsSelfSignedCertificate struct {
	// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
	Disabled *bool `pulumi:"disabled"`
	// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
	SubjectAltNames []ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNames `pulumi:"subjectAltNames"`
}

// ElasticMapsServerSpecHttpTlsSelfSignedCertificateInput is an input type that accepts ElasticMapsServerSpecHttpTlsSelfSignedCertificateArgs and ElasticMapsServerSpecHttpTlsSelfSignedCertificateOutput values.
// You can construct a concrete instance of `ElasticMapsServerSpecHttpTlsSelfSignedCertificateInput` via:
//
//	ElasticMapsServerSpecHttpTlsSelfSignedCertificateArgs{...}
type ElasticMapsServerSpecHttpTlsSelfSignedCertificateInput interface {
	pulumi.Input

	ToElasticMapsServerSpecHttpTlsSelfSignedCertificateOutput() ElasticMapsServerSpecHttpTlsSelfSignedCertificateOutput
	ToElasticMapsServerSpecHttpTlsSelfSignedCertificateOutputWithContext(context.Context) ElasticMapsServerSpecHttpTlsSelfSignedCertificateOutput
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type ElasticMapsServerSpecHttpTlsSelfSignedCertificateArgs struct {
	// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
	SubjectAltNames ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput `pulumi:"subjectAltNames"`
}

func (ElasticMapsServerSpecHttpTlsSelfSignedCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticMapsServerSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (i ElasticMapsServerSpecHttpTlsSelfSignedCertificateArgs) ToElasticMapsServerSpecHttpTlsSelfSignedCertificateOutput() ElasticMapsServerSpecHttpTlsSelfSignedCertificateOutput {
	return i.ToElasticMapsServerSpecHttpTlsSelfSignedCertificateOutputWithContext(context.Background())
}

func (i ElasticMapsServerSpecHttpTlsSelfSignedCertificateArgs) ToElasticMapsServerSpecHttpTlsSelfSignedCertificateOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpTlsSelfSignedCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpTlsSelfSignedCertificateOutput)
}

func (i ElasticMapsServerSpecHttpTlsSelfSignedCertificateArgs) ToElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutput() ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutput {
	return i.ToElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Background())
}

func (i ElasticMapsServerSpecHttpTlsSelfSignedCertificateArgs) ToElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpTlsSelfSignedCertificateOutput).ToElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx)
}

// ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrInput is an input type that accepts ElasticMapsServerSpecHttpTlsSelfSignedCertificateArgs, ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtr and ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutput values.
// You can construct a concrete instance of `ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrInput` via:
//
//	        ElasticMapsServerSpecHttpTlsSelfSignedCertificateArgs{...}
//
//	or:
//
//	        nil
type ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrInput interface {
	pulumi.Input

	ToElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutput() ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutput
	ToElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Context) ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutput
}

type elasticMapsServerSpecHttpTlsSelfSignedCertificatePtrType ElasticMapsServerSpecHttpTlsSelfSignedCertificateArgs

func ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtr(v *ElasticMapsServerSpecHttpTlsSelfSignedCertificateArgs) ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrInput {
	return (*elasticMapsServerSpecHttpTlsSelfSignedCertificatePtrType)(v)
}

func (*elasticMapsServerSpecHttpTlsSelfSignedCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticMapsServerSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (i *elasticMapsServerSpecHttpTlsSelfSignedCertificatePtrType) ToElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutput() ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutput {
	return i.ToElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Background())
}

func (i *elasticMapsServerSpecHttpTlsSelfSignedCertificatePtrType) ToElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutput)
}

// SelfSignedCertificate allows configuring the self-signed certificate generated by the operator.
type ElasticMapsServerSpecHttpTlsSelfSignedCertificateOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerSpecHttpTlsSelfSignedCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticMapsServerSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (o ElasticMapsServerSpecHttpTlsSelfSignedCertificateOutput) ToElasticMapsServerSpecHttpTlsSelfSignedCertificateOutput() ElasticMapsServerSpecHttpTlsSelfSignedCertificateOutput {
	return o
}

func (o ElasticMapsServerSpecHttpTlsSelfSignedCertificateOutput) ToElasticMapsServerSpecHttpTlsSelfSignedCertificateOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpTlsSelfSignedCertificateOutput {
	return o
}

func (o ElasticMapsServerSpecHttpTlsSelfSignedCertificateOutput) ToElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutput() ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ToElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(context.Background())
}

func (o ElasticMapsServerSpecHttpTlsSelfSignedCertificateOutput) ToElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticMapsServerSpecHttpTlsSelfSignedCertificate) *ElasticMapsServerSpecHttpTlsSelfSignedCertificate {
		return &v
	}).(ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutput)
}

// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
func (o ElasticMapsServerSpecHttpTlsSelfSignedCertificateOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpTlsSelfSignedCertificate) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
func (o ElasticMapsServerSpecHttpTlsSelfSignedCertificateOutput) SubjectAltNames() ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpTlsSelfSignedCertificate) []ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNames {
		return v.SubjectAltNames
	}).(ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput)
}

type ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticMapsServerSpecHttpTlsSelfSignedCertificate)(nil)).Elem()
}

func (o ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutput) ToElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutput() ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o
}

func (o ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutput) ToElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutput {
	return o
}

func (o ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutput) Elem() ElasticMapsServerSpecHttpTlsSelfSignedCertificateOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpTlsSelfSignedCertificate) ElasticMapsServerSpecHttpTlsSelfSignedCertificate {
		if v != nil {
			return *v
		}
		var ret ElasticMapsServerSpecHttpTlsSelfSignedCertificate
		return ret
	}).(ElasticMapsServerSpecHttpTlsSelfSignedCertificateOutput)
}

// Disabled indicates that the provisioning of the self-signed certifcate should be disabled.
func (o ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpTlsSelfSignedCertificate) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// SubjectAlternativeNames is a list of SANs to include in the generated HTTP TLS certificate.
func (o ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutput) SubjectAltNames() ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o.ApplyT(func(v *ElasticMapsServerSpecHttpTlsSelfSignedCertificate) []ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNames {
		if v == nil {
			return nil
		}
		return v.SubjectAltNames
	}).(ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput)
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNames struct {
	// DNS is the DNS name of the subject.
	Dns *string `pulumi:"dns"`
	// IP is the IP address of the subject.
	Ip *string `pulumi:"ip"`
}

// ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput is an input type that accepts ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs and ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput values.
// You can construct a concrete instance of `ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput` via:
//
//	ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs{...}
type ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput interface {
	pulumi.Input

	ToElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput() ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput
	ToElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(context.Context) ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs struct {
	// DNS is the DNS name of the subject.
	Dns pulumi.StringPtrInput `pulumi:"dns"`
	// IP is the IP address of the subject.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
}

func (ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (i ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs) ToElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput() ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return i.ToElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(context.Background())
}

func (i ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs) ToElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput)
}

// ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput is an input type that accepts ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray and ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput values.
// You can construct a concrete instance of `ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput` via:
//
//	ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray{ ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs{...} }
type ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput interface {
	pulumi.Input

	ToElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput() ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput
	ToElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(context.Context) ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput
}

type ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray []ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput

func (ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (i ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray) ToElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput() ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return i.ToElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(context.Background())
}

func (i ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray) ToElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput)
}

// SubjectAlternativeName represents a SAN entry in a x509 certificate.
type ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (o ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) ToElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput() ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return o
}

func (o ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) ToElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return o
}

// DNS is the DNS name of the subject.
func (o ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) Dns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNames) *string { return v.Dns }).(pulumi.StringPtrOutput)
}

// IP is the IP address of the subject.
func (o ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNames) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

type ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNames)(nil)).Elem()
}

func (o ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) ToElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput() ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o
}

func (o ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) ToElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutputWithContext(ctx context.Context) ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput {
	return o
}

func (o ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput) Index(i pulumi.IntInput) ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNames {
		return vs[0].([]ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNames)[vs[1].(int)]
	}).(ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput)
}

// MapsStatus defines the observed state of Elastic Maps Server
type ElasticMapsServerStatus struct {
	// AssociationStatus is the status of an association resource.
	AssociationStatus *string `pulumi:"associationStatus"`
	// AvailableNodes is the number of available replicas in the deployment.
	AvailableNodes *int `pulumi:"availableNodes"`
	// Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
	Count *int `pulumi:"count"`
	// Health of the deployment.
	Health *string `pulumi:"health"`
	// ObservedGeneration is the most recent generation observed for this Elastic Maps Server.
	// It corresponds to the metadata generation, which is updated on mutation by the API Server.
	// If the generation observed in status diverges from the generation in metadata, the Elastic
	// Maps controller has not yet processed the changes contained in the Elastic Maps specification.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// Selector is the label selector used to find all pods.
	Selector *string `pulumi:"selector"`
	// Version of the stack resource currently running. During version upgrades, multiple versions may run
	// in parallel: this value specifies the lowest version currently running.
	Version *string `pulumi:"version"`
}

// ElasticMapsServerStatusInput is an input type that accepts ElasticMapsServerStatusArgs and ElasticMapsServerStatusOutput values.
// You can construct a concrete instance of `ElasticMapsServerStatusInput` via:
//
//	ElasticMapsServerStatusArgs{...}
type ElasticMapsServerStatusInput interface {
	pulumi.Input

	ToElasticMapsServerStatusOutput() ElasticMapsServerStatusOutput
	ToElasticMapsServerStatusOutputWithContext(context.Context) ElasticMapsServerStatusOutput
}

// MapsStatus defines the observed state of Elastic Maps Server
type ElasticMapsServerStatusArgs struct {
	// AssociationStatus is the status of an association resource.
	AssociationStatus pulumi.StringPtrInput `pulumi:"associationStatus"`
	// AvailableNodes is the number of available replicas in the deployment.
	AvailableNodes pulumi.IntPtrInput `pulumi:"availableNodes"`
	// Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// Health of the deployment.
	Health pulumi.StringPtrInput `pulumi:"health"`
	// ObservedGeneration is the most recent generation observed for this Elastic Maps Server.
	// It corresponds to the metadata generation, which is updated on mutation by the API Server.
	// If the generation observed in status diverges from the generation in metadata, the Elastic
	// Maps controller has not yet processed the changes contained in the Elastic Maps specification.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// Selector is the label selector used to find all pods.
	Selector pulumi.StringPtrInput `pulumi:"selector"`
	// Version of the stack resource currently running. During version upgrades, multiple versions may run
	// in parallel: this value specifies the lowest version currently running.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ElasticMapsServerStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticMapsServerStatus)(nil)).Elem()
}

func (i ElasticMapsServerStatusArgs) ToElasticMapsServerStatusOutput() ElasticMapsServerStatusOutput {
	return i.ToElasticMapsServerStatusOutputWithContext(context.Background())
}

func (i ElasticMapsServerStatusArgs) ToElasticMapsServerStatusOutputWithContext(ctx context.Context) ElasticMapsServerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerStatusOutput)
}

func (i ElasticMapsServerStatusArgs) ToElasticMapsServerStatusPtrOutput() ElasticMapsServerStatusPtrOutput {
	return i.ToElasticMapsServerStatusPtrOutputWithContext(context.Background())
}

func (i ElasticMapsServerStatusArgs) ToElasticMapsServerStatusPtrOutputWithContext(ctx context.Context) ElasticMapsServerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerStatusOutput).ToElasticMapsServerStatusPtrOutputWithContext(ctx)
}

// ElasticMapsServerStatusPtrInput is an input type that accepts ElasticMapsServerStatusArgs, ElasticMapsServerStatusPtr and ElasticMapsServerStatusPtrOutput values.
// You can construct a concrete instance of `ElasticMapsServerStatusPtrInput` via:
//
//	        ElasticMapsServerStatusArgs{...}
//
//	or:
//
//	        nil
type ElasticMapsServerStatusPtrInput interface {
	pulumi.Input

	ToElasticMapsServerStatusPtrOutput() ElasticMapsServerStatusPtrOutput
	ToElasticMapsServerStatusPtrOutputWithContext(context.Context) ElasticMapsServerStatusPtrOutput
}

type elasticMapsServerStatusPtrType ElasticMapsServerStatusArgs

func ElasticMapsServerStatusPtr(v *ElasticMapsServerStatusArgs) ElasticMapsServerStatusPtrInput {
	return (*elasticMapsServerStatusPtrType)(v)
}

func (*elasticMapsServerStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticMapsServerStatus)(nil)).Elem()
}

func (i *elasticMapsServerStatusPtrType) ToElasticMapsServerStatusPtrOutput() ElasticMapsServerStatusPtrOutput {
	return i.ToElasticMapsServerStatusPtrOutputWithContext(context.Background())
}

func (i *elasticMapsServerStatusPtrType) ToElasticMapsServerStatusPtrOutputWithContext(ctx context.Context) ElasticMapsServerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerStatusPtrOutput)
}

// MapsStatus defines the observed state of Elastic Maps Server
type ElasticMapsServerStatusOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticMapsServerStatus)(nil)).Elem()
}

func (o ElasticMapsServerStatusOutput) ToElasticMapsServerStatusOutput() ElasticMapsServerStatusOutput {
	return o
}

func (o ElasticMapsServerStatusOutput) ToElasticMapsServerStatusOutputWithContext(ctx context.Context) ElasticMapsServerStatusOutput {
	return o
}

func (o ElasticMapsServerStatusOutput) ToElasticMapsServerStatusPtrOutput() ElasticMapsServerStatusPtrOutput {
	return o.ToElasticMapsServerStatusPtrOutputWithContext(context.Background())
}

func (o ElasticMapsServerStatusOutput) ToElasticMapsServerStatusPtrOutputWithContext(ctx context.Context) ElasticMapsServerStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ElasticMapsServerStatus) *ElasticMapsServerStatus {
		return &v
	}).(ElasticMapsServerStatusPtrOutput)
}

// AssociationStatus is the status of an association resource.
func (o ElasticMapsServerStatusOutput) AssociationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerStatus) *string { return v.AssociationStatus }).(pulumi.StringPtrOutput)
}

// AvailableNodes is the number of available replicas in the deployment.
func (o ElasticMapsServerStatusOutput) AvailableNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerStatus) *int { return v.AvailableNodes }).(pulumi.IntPtrOutput)
}

// Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
func (o ElasticMapsServerStatusOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerStatus) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// Health of the deployment.
func (o ElasticMapsServerStatusOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerStatus) *string { return v.Health }).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the most recent generation observed for this Elastic Maps Server.
// It corresponds to the metadata generation, which is updated on mutation by the API Server.
// If the generation observed in status diverges from the generation in metadata, the Elastic
// Maps controller has not yet processed the changes contained in the Elastic Maps specification.
func (o ElasticMapsServerStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// Selector is the label selector used to find all pods.
func (o ElasticMapsServerStatusOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerStatus) *string { return v.Selector }).(pulumi.StringPtrOutput)
}

// Version of the stack resource currently running. During version upgrades, multiple versions may run
// in parallel: this value specifies the lowest version currently running.
func (o ElasticMapsServerStatusOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticMapsServerStatus) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ElasticMapsServerStatusPtrOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticMapsServerStatus)(nil)).Elem()
}

func (o ElasticMapsServerStatusPtrOutput) ToElasticMapsServerStatusPtrOutput() ElasticMapsServerStatusPtrOutput {
	return o
}

func (o ElasticMapsServerStatusPtrOutput) ToElasticMapsServerStatusPtrOutputWithContext(ctx context.Context) ElasticMapsServerStatusPtrOutput {
	return o
}

func (o ElasticMapsServerStatusPtrOutput) Elem() ElasticMapsServerStatusOutput {
	return o.ApplyT(func(v *ElasticMapsServerStatus) ElasticMapsServerStatus {
		if v != nil {
			return *v
		}
		var ret ElasticMapsServerStatus
		return ret
	}).(ElasticMapsServerStatusOutput)
}

// AssociationStatus is the status of an association resource.
func (o ElasticMapsServerStatusPtrOutput) AssociationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerStatus) *string {
		if v == nil {
			return nil
		}
		return v.AssociationStatus
	}).(pulumi.StringPtrOutput)
}

// AvailableNodes is the number of available replicas in the deployment.
func (o ElasticMapsServerStatusPtrOutput) AvailableNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerStatus) *int {
		if v == nil {
			return nil
		}
		return v.AvailableNodes
	}).(pulumi.IntPtrOutput)
}

// Count corresponds to Scale.Status.Replicas, which is the actual number of observed instances of the scaled object.
func (o ElasticMapsServerStatusPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerStatus) *int {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.IntPtrOutput)
}

// Health of the deployment.
func (o ElasticMapsServerStatusPtrOutput) Health() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerStatus) *string {
		if v == nil {
			return nil
		}
		return v.Health
	}).(pulumi.StringPtrOutput)
}

// ObservedGeneration is the most recent generation observed for this Elastic Maps Server.
// It corresponds to the metadata generation, which is updated on mutation by the API Server.
// If the generation observed in status diverges from the generation in metadata, the Elastic
// Maps controller has not yet processed the changes contained in the Elastic Maps specification.
func (o ElasticMapsServerStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// Selector is the label selector used to find all pods.
func (o ElasticMapsServerStatusPtrOutput) Selector() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerStatus) *string {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(pulumi.StringPtrOutput)
}

// Version of the stack resource currently running. During version upgrades, multiple versions may run
// in parallel: this value specifies the lowest version currently running.
func (o ElasticMapsServerStatusPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServerStatus) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerSpecInput)(nil)).Elem(), ElasticMapsServerSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerSpecPtrInput)(nil)).Elem(), ElasticMapsServerSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerSpecConfigRefInput)(nil)).Elem(), ElasticMapsServerSpecConfigRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerSpecConfigRefPtrInput)(nil)).Elem(), ElasticMapsServerSpecConfigRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerSpecElasticsearchRefInput)(nil)).Elem(), ElasticMapsServerSpecElasticsearchRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerSpecElasticsearchRefPtrInput)(nil)).Elem(), ElasticMapsServerSpecElasticsearchRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerSpecHttpInput)(nil)).Elem(), ElasticMapsServerSpecHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerSpecHttpPtrInput)(nil)).Elem(), ElasticMapsServerSpecHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerSpecHttpServiceInput)(nil)).Elem(), ElasticMapsServerSpecHttpServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerSpecHttpServicePtrInput)(nil)).Elem(), ElasticMapsServerSpecHttpServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerSpecHttpServiceMetadataInput)(nil)).Elem(), ElasticMapsServerSpecHttpServiceMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerSpecHttpServiceMetadataPtrInput)(nil)).Elem(), ElasticMapsServerSpecHttpServiceMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerSpecHttpServiceSpecInput)(nil)).Elem(), ElasticMapsServerSpecHttpServiceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerSpecHttpServiceSpecPtrInput)(nil)).Elem(), ElasticMapsServerSpecHttpServiceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerSpecHttpServiceSpecPortsInput)(nil)).Elem(), ElasticMapsServerSpecHttpServiceSpecPortsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerSpecHttpServiceSpecPortsArrayInput)(nil)).Elem(), ElasticMapsServerSpecHttpServiceSpecPortsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigInput)(nil)).Elem(), ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrInput)(nil)).Elem(), ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpInput)(nil)).Elem(), ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrInput)(nil)).Elem(), ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerSpecHttpTlsInput)(nil)).Elem(), ElasticMapsServerSpecHttpTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerSpecHttpTlsPtrInput)(nil)).Elem(), ElasticMapsServerSpecHttpTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerSpecHttpTlsCertificateInput)(nil)).Elem(), ElasticMapsServerSpecHttpTlsCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerSpecHttpTlsCertificatePtrInput)(nil)).Elem(), ElasticMapsServerSpecHttpTlsCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerSpecHttpTlsSelfSignedCertificateInput)(nil)).Elem(), ElasticMapsServerSpecHttpTlsSelfSignedCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrInput)(nil)).Elem(), ElasticMapsServerSpecHttpTlsSelfSignedCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesInput)(nil)).Elem(), ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayInput)(nil)).Elem(), ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerStatusInput)(nil)).Elem(), ElasticMapsServerStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerStatusPtrInput)(nil)).Elem(), ElasticMapsServerStatusArgs{})
	pulumi.RegisterOutputType(ElasticMapsServerSpecOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerSpecPtrOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerSpecConfigRefOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerSpecConfigRefPtrOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerSpecElasticsearchRefOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerSpecElasticsearchRefPtrOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerSpecHttpOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerSpecHttpPtrOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerSpecHttpServiceOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerSpecHttpServicePtrOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerSpecHttpServiceMetadataOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerSpecHttpServiceMetadataPtrOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerSpecHttpServiceSpecOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerSpecHttpServiceSpecPtrOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerSpecHttpServiceSpecPortsOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerSpecHttpServiceSpecPortsArrayOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigPtrOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerSpecHttpServiceSpecSessionAffinityConfigClientIpPtrOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerSpecHttpTlsOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerSpecHttpTlsPtrOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerSpecHttpTlsCertificateOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerSpecHttpTlsCertificatePtrOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerSpecHttpTlsSelfSignedCertificateOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerSpecHttpTlsSelfSignedCertificatePtrOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerSpecHttpTlsSelfSignedCertificateSubjectAltNamesArrayOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerStatusOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerStatusPtrOutput{})
}
