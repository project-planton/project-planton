// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ElasticMapsServer represents an Elastic Map Server resource in a Kubernetes cluster.
type ElasticMapsServer struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// MapsSpec holds the specification of an Elastic Maps Server instance.
	Spec ElasticMapsServerSpecPtrOutput `pulumi:"spec"`
	// MapsStatus defines the observed state of Elastic Maps Server
	Status ElasticMapsServerStatusPtrOutput `pulumi:"status"`
}

// NewElasticMapsServer registers a new resource with the given unique name, arguments, and options.
func NewElasticMapsServer(ctx *pulumi.Context,
	name string, args *ElasticMapsServerArgs, opts ...pulumi.ResourceOption) (*ElasticMapsServer, error) {
	if args == nil {
		args = &ElasticMapsServerArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("maps.k8s.elastic.co/v1alpha1")
	args.Kind = pulumi.StringPtr("ElasticMapsServer")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ElasticMapsServer
	err := ctx.RegisterResource("kubernetes:maps.k8s.elastic.co/v1alpha1:ElasticMapsServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticMapsServer gets an existing ElasticMapsServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticMapsServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticMapsServerState, opts ...pulumi.ResourceOption) (*ElasticMapsServer, error) {
	var resource ElasticMapsServer
	err := ctx.ReadResource("kubernetes:maps.k8s.elastic.co/v1alpha1:ElasticMapsServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElasticMapsServer resources.
type elasticMapsServerState struct {
}

type ElasticMapsServerState struct {
}

func (ElasticMapsServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticMapsServerState)(nil)).Elem()
}

type elasticMapsServerArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// MapsSpec holds the specification of an Elastic Maps Server instance.
	Spec *ElasticMapsServerSpec `pulumi:"spec"`
	// MapsStatus defines the observed state of Elastic Maps Server
	Status *ElasticMapsServerStatus `pulumi:"status"`
}

// The set of arguments for constructing a ElasticMapsServer resource.
type ElasticMapsServerArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// MapsSpec holds the specification of an Elastic Maps Server instance.
	Spec ElasticMapsServerSpecPtrInput
	// MapsStatus defines the observed state of Elastic Maps Server
	Status ElasticMapsServerStatusPtrInput
}

func (ElasticMapsServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticMapsServerArgs)(nil)).Elem()
}

type ElasticMapsServerInput interface {
	pulumi.Input

	ToElasticMapsServerOutput() ElasticMapsServerOutput
	ToElasticMapsServerOutputWithContext(ctx context.Context) ElasticMapsServerOutput
}

func (*ElasticMapsServer) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticMapsServer)(nil)).Elem()
}

func (i *ElasticMapsServer) ToElasticMapsServerOutput() ElasticMapsServerOutput {
	return i.ToElasticMapsServerOutputWithContext(context.Background())
}

func (i *ElasticMapsServer) ToElasticMapsServerOutputWithContext(ctx context.Context) ElasticMapsServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerOutput)
}

type ElasticMapsServerOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticMapsServer)(nil)).Elem()
}

func (o ElasticMapsServerOutput) ToElasticMapsServerOutput() ElasticMapsServerOutput {
	return o
}

func (o ElasticMapsServerOutput) ToElasticMapsServerOutputWithContext(ctx context.Context) ElasticMapsServerOutput {
	return o
}

func (o ElasticMapsServerOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServer) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o ElasticMapsServerOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServer) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ElasticMapsServerOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServer) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// MapsSpec holds the specification of an Elastic Maps Server instance.
func (o ElasticMapsServerOutput) Spec() ElasticMapsServerSpecPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServer) ElasticMapsServerSpecPtrOutput { return v.Spec }).(ElasticMapsServerSpecPtrOutput)
}

// MapsStatus defines the observed state of Elastic Maps Server
func (o ElasticMapsServerOutput) Status() ElasticMapsServerStatusPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServer) ElasticMapsServerStatusPtrOutput { return v.Status }).(ElasticMapsServerStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerInput)(nil)).Elem(), &ElasticMapsServer{})
	pulumi.RegisterOutputType(ElasticMapsServerOutput{})
}
