// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An Issuer represents a certificate issuing authority which can be
// referenced as part of `issuerRef` fields.
// It is scoped to a single namespace and can therefore only be referenced by
// resources within the same namespace.
type Issuer struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// Desired state of the Issuer resource.
	Spec IssuerSpecOutput `pulumi:"spec"`
	// Status of the Issuer. This is set and managed automatically.
	Status IssuerStatusPtrOutput `pulumi:"status"`
}

// NewIssuer registers a new resource with the given unique name, arguments, and options.
func NewIssuer(ctx *pulumi.Context,
	name string, args *IssuerArgs, opts ...pulumi.ResourceOption) (*Issuer, error) {
	if args == nil {
		args = &IssuerArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("cert-manager.io/v1")
	args.Kind = pulumi.StringPtr("Issuer")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Issuer
	err := ctx.RegisterResource("kubernetes:cert-manager.io/v1:Issuer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIssuer gets an existing Issuer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIssuer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IssuerState, opts ...pulumi.ResourceOption) (*Issuer, error) {
	var resource Issuer
	err := ctx.ReadResource("kubernetes:cert-manager.io/v1:Issuer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Issuer resources.
type issuerState struct {
}

type IssuerState struct {
}

func (IssuerState) ElementType() reflect.Type {
	return reflect.TypeOf((*issuerState)(nil)).Elem()
}

type issuerArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Desired state of the Issuer resource.
	Spec *IssuerSpec `pulumi:"spec"`
	// Status of the Issuer. This is set and managed automatically.
	Status *IssuerStatus `pulumi:"status"`
}

// The set of arguments for constructing a Issuer resource.
type IssuerArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// Desired state of the Issuer resource.
	Spec IssuerSpecPtrInput
	// Status of the Issuer. This is set and managed automatically.
	Status IssuerStatusPtrInput
}

func (IssuerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*issuerArgs)(nil)).Elem()
}

type IssuerInput interface {
	pulumi.Input

	ToIssuerOutput() IssuerOutput
	ToIssuerOutputWithContext(ctx context.Context) IssuerOutput
}

func (*Issuer) ElementType() reflect.Type {
	return reflect.TypeOf((**Issuer)(nil)).Elem()
}

func (i *Issuer) ToIssuerOutput() IssuerOutput {
	return i.ToIssuerOutputWithContext(context.Background())
}

func (i *Issuer) ToIssuerOutputWithContext(ctx context.Context) IssuerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssuerOutput)
}

type IssuerOutput struct{ *pulumi.OutputState }

func (IssuerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Issuer)(nil)).Elem()
}

func (o IssuerOutput) ToIssuerOutput() IssuerOutput {
	return o
}

func (o IssuerOutput) ToIssuerOutputWithContext(ctx context.Context) IssuerOutput {
	return o
}

func (o IssuerOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Issuer) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o IssuerOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Issuer) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o IssuerOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *Issuer) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Desired state of the Issuer resource.
func (o IssuerOutput) Spec() IssuerSpecOutput {
	return o.ApplyT(func(v *Issuer) IssuerSpecOutput { return v.Spec }).(IssuerSpecOutput)
}

// Status of the Issuer. This is set and managed automatically.
func (o IssuerOutput) Status() IssuerStatusPtrOutput {
	return o.ApplyT(func(v *Issuer) IssuerStatusPtrOutput { return v.Status }).(IssuerStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IssuerInput)(nil)).Elem(), &Issuer{})
	pulumi.RegisterOutputType(IssuerOutput{})
}
