// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AuthorizationPolicy struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// Configuration for access control on workloads. See more details at: https://istio.io/docs/reference/config/security/authorization-policy.html
	Spec   pulumi.AnyOutput `pulumi:"spec"`
	Status pulumi.MapOutput `pulumi:"status"`
}

// NewAuthorizationPolicy registers a new resource with the given unique name, arguments, and options.
func NewAuthorizationPolicy(ctx *pulumi.Context,
	name string, args *AuthorizationPolicyArgs, opts ...pulumi.ResourceOption) (*AuthorizationPolicy, error) {
	if args == nil {
		args = &AuthorizationPolicyArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("security.istio.io/v1")
	args.Kind = pulumi.StringPtr("AuthorizationPolicy")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource AuthorizationPolicy
	err := ctx.RegisterResource("kubernetes:security.istio.io/v1:AuthorizationPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthorizationPolicy gets an existing AuthorizationPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthorizationPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthorizationPolicyState, opts ...pulumi.ResourceOption) (*AuthorizationPolicy, error) {
	var resource AuthorizationPolicy
	err := ctx.ReadResource("kubernetes:security.istio.io/v1:AuthorizationPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthorizationPolicy resources.
type authorizationPolicyState struct {
}

type AuthorizationPolicyState struct {
}

func (AuthorizationPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizationPolicyState)(nil)).Elem()
}

type authorizationPolicyArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Configuration for access control on workloads. See more details at: https://istio.io/docs/reference/config/security/authorization-policy.html
	Spec   interface{}            `pulumi:"spec"`
	Status map[string]interface{} `pulumi:"status"`
}

// The set of arguments for constructing a AuthorizationPolicy resource.
type AuthorizationPolicyArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// Configuration for access control on workloads. See more details at: https://istio.io/docs/reference/config/security/authorization-policy.html
	Spec   pulumi.Input
	Status pulumi.MapInput
}

func (AuthorizationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizationPolicyArgs)(nil)).Elem()
}

type AuthorizationPolicyInput interface {
	pulumi.Input

	ToAuthorizationPolicyOutput() AuthorizationPolicyOutput
	ToAuthorizationPolicyOutputWithContext(ctx context.Context) AuthorizationPolicyOutput
}

func (*AuthorizationPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationPolicy)(nil)).Elem()
}

func (i *AuthorizationPolicy) ToAuthorizationPolicyOutput() AuthorizationPolicyOutput {
	return i.ToAuthorizationPolicyOutputWithContext(context.Background())
}

func (i *AuthorizationPolicy) ToAuthorizationPolicyOutputWithContext(ctx context.Context) AuthorizationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPolicyOutput)
}

type AuthorizationPolicyOutput struct{ *pulumi.OutputState }

func (AuthorizationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationPolicy)(nil)).Elem()
}

func (o AuthorizationPolicyOutput) ToAuthorizationPolicyOutput() AuthorizationPolicyOutput {
	return o
}

func (o AuthorizationPolicyOutput) ToAuthorizationPolicyOutputWithContext(ctx context.Context) AuthorizationPolicyOutput {
	return o
}

func (o AuthorizationPolicyOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationPolicy) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o AuthorizationPolicyOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthorizationPolicy) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o AuthorizationPolicyOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *AuthorizationPolicy) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Configuration for access control on workloads. See more details at: https://istio.io/docs/reference/config/security/authorization-policy.html
func (o AuthorizationPolicyOutput) Spec() pulumi.AnyOutput {
	return o.ApplyT(func(v *AuthorizationPolicy) pulumi.AnyOutput { return v.Spec }).(pulumi.AnyOutput)
}

func (o AuthorizationPolicyOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v *AuthorizationPolicy) pulumi.MapOutput { return v.Status }).(pulumi.MapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationPolicyInput)(nil)).Elem(), &AuthorizationPolicy{})
	pulumi.RegisterOutputType(AuthorizationPolicyOutput{})
}
