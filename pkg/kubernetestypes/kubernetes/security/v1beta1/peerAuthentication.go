// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PeerAuthentication struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// Peer authentication configuration for workloads. See more details at: https://istio.io/docs/reference/config/security/peer_authentication.html
	Spec   PeerAuthenticationSpecPtrOutput `pulumi:"spec"`
	Status pulumi.MapOutput                `pulumi:"status"`
}

// NewPeerAuthentication registers a new resource with the given unique name, arguments, and options.
func NewPeerAuthentication(ctx *pulumi.Context,
	name string, args *PeerAuthenticationArgs, opts ...pulumi.ResourceOption) (*PeerAuthentication, error) {
	if args == nil {
		args = &PeerAuthenticationArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("security.istio.io/v1beta1")
	args.Kind = pulumi.StringPtr("PeerAuthentication")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PeerAuthentication
	err := ctx.RegisterResource("kubernetes:security.istio.io/v1beta1:PeerAuthentication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPeerAuthentication gets an existing PeerAuthentication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPeerAuthentication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PeerAuthenticationState, opts ...pulumi.ResourceOption) (*PeerAuthentication, error) {
	var resource PeerAuthentication
	err := ctx.ReadResource("kubernetes:security.istio.io/v1beta1:PeerAuthentication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PeerAuthentication resources.
type peerAuthenticationState struct {
}

type PeerAuthenticationState struct {
}

func (PeerAuthenticationState) ElementType() reflect.Type {
	return reflect.TypeOf((*peerAuthenticationState)(nil)).Elem()
}

type peerAuthenticationArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Peer authentication configuration for workloads. See more details at: https://istio.io/docs/reference/config/security/peer_authentication.html
	Spec   *PeerAuthenticationSpec `pulumi:"spec"`
	Status map[string]interface{}  `pulumi:"status"`
}

// The set of arguments for constructing a PeerAuthentication resource.
type PeerAuthenticationArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// Peer authentication configuration for workloads. See more details at: https://istio.io/docs/reference/config/security/peer_authentication.html
	Spec   PeerAuthenticationSpecPtrInput
	Status pulumi.MapInput
}

func (PeerAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*peerAuthenticationArgs)(nil)).Elem()
}

type PeerAuthenticationInput interface {
	pulumi.Input

	ToPeerAuthenticationOutput() PeerAuthenticationOutput
	ToPeerAuthenticationOutputWithContext(ctx context.Context) PeerAuthenticationOutput
}

func (*PeerAuthentication) ElementType() reflect.Type {
	return reflect.TypeOf((**PeerAuthentication)(nil)).Elem()
}

func (i *PeerAuthentication) ToPeerAuthenticationOutput() PeerAuthenticationOutput {
	return i.ToPeerAuthenticationOutputWithContext(context.Background())
}

func (i *PeerAuthentication) ToPeerAuthenticationOutputWithContext(ctx context.Context) PeerAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeerAuthenticationOutput)
}

type PeerAuthenticationOutput struct{ *pulumi.OutputState }

func (PeerAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeerAuthentication)(nil)).Elem()
}

func (o PeerAuthenticationOutput) ToPeerAuthenticationOutput() PeerAuthenticationOutput {
	return o
}

func (o PeerAuthenticationOutput) ToPeerAuthenticationOutputWithContext(ctx context.Context) PeerAuthenticationOutput {
	return o
}

func (o PeerAuthenticationOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeerAuthentication) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o PeerAuthenticationOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeerAuthentication) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o PeerAuthenticationOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *PeerAuthentication) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Peer authentication configuration for workloads. See more details at: https://istio.io/docs/reference/config/security/peer_authentication.html
func (o PeerAuthenticationOutput) Spec() PeerAuthenticationSpecPtrOutput {
	return o.ApplyT(func(v *PeerAuthentication) PeerAuthenticationSpecPtrOutput { return v.Spec }).(PeerAuthenticationSpecPtrOutput)
}

func (o PeerAuthenticationOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v *PeerAuthentication) pulumi.MapOutput { return v.Status }).(pulumi.MapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PeerAuthenticationInput)(nil)).Elem(), &PeerAuthentication{})
	pulumi.RegisterOutputType(PeerAuthenticationOutput{})
}
