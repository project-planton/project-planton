// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha2

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// GRPCRoute provides a way to route gRPC requests. This includes the capability
// to match requests by hostname, gRPC service, gRPC method, or HTTP/2 header.
// Filters can be used to specify additional processing steps. Backends specify
// where matching requests will be routed.
//
// GRPCRoute falls under extended support within the Gateway API. Within the
// following specification, the word "MUST" indicates that an implementation
// supporting GRPCRoute must conform to the indicated requirement, but an
// implementation not supporting this route type need not follow the requirement
// unless explicitly indicated.
//
// Implementations supporting `GRPCRoute` with the `HTTPS` `ProtocolType` MUST
// accept HTTP/2 connections without an initial upgrade from HTTP/1.1, i.e. via
// ALPN. If the implementation does not support this, then it MUST set the
// "Accepted" condition to "False" for the affected listener with a reason of
// "UnsupportedProtocol".  Implementations MAY also accept HTTP/2 connections
// with an upgrade from HTTP/1.
//
// Implementations supporting `GRPCRoute` with the `HTTP` `ProtocolType` MUST
// support HTTP/2 over cleartext TCP (h2c,
// https://www.rfc-editor.org/rfc/rfc7540#section-3.1) without an initial
// upgrade from HTTP/1.1, i.e. with prior knowledge
// (https://www.rfc-editor.org/rfc/rfc7540#section-3.4). If the implementation
// does not support this, then it MUST set the "Accepted" condition to "False"
// for the affected listener with a reason of "UnsupportedProtocol".
// Implementations MAY also accept HTTP/2 connections with an upgrade from
// HTTP/1, i.e. without prior knowledge.
type GRPCRouteType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec defines the desired state of GRPCRoute.
	Spec *GRPCRouteSpec `pulumi:"spec"`
	// Status defines the current state of GRPCRoute.
	Status *GRPCRouteStatus `pulumi:"status"`
}

type GRPCRouteMetadata struct {
}

// Spec defines the desired state of GRPCRoute.
type GRPCRouteSpec struct {
	// Hostnames defines a set of hostnames to match against the GRPC
	// Host header to select a GRPCRoute to process the request. This matches
	// the RFC 1123 definition of a hostname with 2 notable exceptions:
	//
	// 1. IPs are not allowed.
	// 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
	//    label MUST appear by itself as the first label.
	//
	// If a hostname is specified by both the Listener and GRPCRoute, there
	// MUST be at least one intersecting hostname for the GRPCRoute to be
	// attached to the Listener. For example:
	//
	// * A Listener with `test.example.com` as the hostname matches GRPCRoutes
	//   that have either not specified any hostnames, or have specified at
	//   least one of `test.example.com` or `*.example.com`.
	// * A Listener with `*.example.com` as the hostname matches GRPCRoutes
	//   that have either not specified any hostnames or have specified at least
	//   one hostname that matches the Listener hostname. For example,
	//   `test.example.com` and `*.example.com` would both match. On the other
	//   hand, `example.com` and `test.example.net` would not match.
	//
	// Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
	// as a suffix match. That means that a match for `*.example.com` would match
	// both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
	//
	// If both the Listener and GRPCRoute have specified hostnames, any
	// GRPCRoute hostnames that do not match the Listener hostname MUST be
	// ignored. For example, if a Listener specified `*.example.com`, and the
	// GRPCRoute specified `test.example.com` and `test.example.net`,
	// `test.example.net` MUST NOT be considered for a match.
	//
	// If both the Listener and GRPCRoute have specified hostnames, and none
	// match with the criteria above, then the GRPCRoute MUST NOT be accepted by
	// the implementation. The implementation MUST raise an 'Accepted' Condition
	// with a status of `False` in the corresponding RouteParentStatus.
	//
	// If a Route (A) of type HTTPRoute or GRPCRoute is attached to a
	// Listener and that listener already has another Route (B) of the other
	// type attached and the intersection of the hostnames of A and B is
	// non-empty, then the implementation MUST accept exactly one of these two
	// routes, determined by the following criteria, in order:
	//
	// * The oldest Route based on creation timestamp.
	// * The Route appearing first in alphabetical order by
	//   "{namespace}/{name}".
	//
	// The rejected Route MUST raise an 'Accepted' condition with a status of
	// 'False' in the corresponding RouteParentStatus.
	//
	// Support: Core
	Hostnames []string `pulumi:"hostnames"`
	// ParentRefs references the resources (usually Gateways) that a Route wants
	// to be attached to. Note that the referenced parent resource needs to
	// allow this for the attachment to be complete. For Gateways, that means
	// the Gateway needs to allow attachment from Routes of this kind and
	// namespace. For Services, that means the Service must either be in the same
	// namespace for a "producer" route, or the mesh implementation must support
	// and allow "consumer" routes for the referenced Service. ReferenceGrant is
	// not applicable for governing ParentRefs to Services - it is not possible to
	// create a "producer" route for a Service in a different namespace from the
	// Route.
	//
	// There are two kinds of parent resources with "Core" support:
	//
	// * Gateway (Gateway conformance profile)
	// * Service (Mesh conformance profile, ClusterIP Services only)
	//
	// This API may be extended in the future to support additional kinds of parent
	// resources.
	//
	// ParentRefs must be _distinct_. This means either that:
	//
	// * They select different objects.  If this is the case, then parentRef
	//   entries are distinct. In terms of fields, this means that the
	//   multi-part key defined by `group`, `kind`, `namespace`, and `name` must
	//   be unique across all parentRef entries in the Route.
	// * They do not select different objects, but for each optional field used,
	//   each ParentRef that selects the same object must set the same set of
	//   optional fields to different values. If one ParentRef sets a
	//   combination of optional fields, all must set the same combination.
	//
	// Some examples:
	//
	// * If one ParentRef sets `sectionName`, all ParentRefs referencing the
	//   same object must also set `sectionName`.
	// * If one ParentRef sets `port`, all ParentRefs referencing the same
	//   object must also set `port`.
	// * If one ParentRef sets `sectionName` and `port`, all ParentRefs
	//   referencing the same object must also set `sectionName` and `port`.
	//
	// It is possible to separately reference multiple distinct objects that may
	// be collapsed by an implementation. For example, some implementations may
	// choose to merge compatible Gateway Listeners together. If that is the
	// case, the list of routes attached to those resources should also be
	// merged.
	//
	// Note that for ParentRefs that cross namespace boundaries, there are specific
	// rules. Cross-namespace references are only valid if they are explicitly
	// allowed by something in the namespace they are referring to. For example,
	// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
	// generic way to enable other kinds of cross-namespace reference.
	ParentRefs []GRPCRouteSpecParentRefs `pulumi:"parentRefs"`
	// Rules are a list of GRPC matchers, filters and actions.
	Rules []GRPCRouteSpecRules `pulumi:"rules"`
}

// GRPCRouteSpecInput is an input type that accepts GRPCRouteSpecArgs and GRPCRouteSpecOutput values.
// You can construct a concrete instance of `GRPCRouteSpecInput` via:
//
//	GRPCRouteSpecArgs{...}
type GRPCRouteSpecInput interface {
	pulumi.Input

	ToGRPCRouteSpecOutput() GRPCRouteSpecOutput
	ToGRPCRouteSpecOutputWithContext(context.Context) GRPCRouteSpecOutput
}

// Spec defines the desired state of GRPCRoute.
type GRPCRouteSpecArgs struct {
	// Hostnames defines a set of hostnames to match against the GRPC
	// Host header to select a GRPCRoute to process the request. This matches
	// the RFC 1123 definition of a hostname with 2 notable exceptions:
	//
	// 1. IPs are not allowed.
	// 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
	//    label MUST appear by itself as the first label.
	//
	// If a hostname is specified by both the Listener and GRPCRoute, there
	// MUST be at least one intersecting hostname for the GRPCRoute to be
	// attached to the Listener. For example:
	//
	// * A Listener with `test.example.com` as the hostname matches GRPCRoutes
	//   that have either not specified any hostnames, or have specified at
	//   least one of `test.example.com` or `*.example.com`.
	// * A Listener with `*.example.com` as the hostname matches GRPCRoutes
	//   that have either not specified any hostnames or have specified at least
	//   one hostname that matches the Listener hostname. For example,
	//   `test.example.com` and `*.example.com` would both match. On the other
	//   hand, `example.com` and `test.example.net` would not match.
	//
	// Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
	// as a suffix match. That means that a match for `*.example.com` would match
	// both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
	//
	// If both the Listener and GRPCRoute have specified hostnames, any
	// GRPCRoute hostnames that do not match the Listener hostname MUST be
	// ignored. For example, if a Listener specified `*.example.com`, and the
	// GRPCRoute specified `test.example.com` and `test.example.net`,
	// `test.example.net` MUST NOT be considered for a match.
	//
	// If both the Listener and GRPCRoute have specified hostnames, and none
	// match with the criteria above, then the GRPCRoute MUST NOT be accepted by
	// the implementation. The implementation MUST raise an 'Accepted' Condition
	// with a status of `False` in the corresponding RouteParentStatus.
	//
	// If a Route (A) of type HTTPRoute or GRPCRoute is attached to a
	// Listener and that listener already has another Route (B) of the other
	// type attached and the intersection of the hostnames of A and B is
	// non-empty, then the implementation MUST accept exactly one of these two
	// routes, determined by the following criteria, in order:
	//
	// * The oldest Route based on creation timestamp.
	// * The Route appearing first in alphabetical order by
	//   "{namespace}/{name}".
	//
	// The rejected Route MUST raise an 'Accepted' condition with a status of
	// 'False' in the corresponding RouteParentStatus.
	//
	// Support: Core
	Hostnames pulumi.StringArrayInput `pulumi:"hostnames"`
	// ParentRefs references the resources (usually Gateways) that a Route wants
	// to be attached to. Note that the referenced parent resource needs to
	// allow this for the attachment to be complete. For Gateways, that means
	// the Gateway needs to allow attachment from Routes of this kind and
	// namespace. For Services, that means the Service must either be in the same
	// namespace for a "producer" route, or the mesh implementation must support
	// and allow "consumer" routes for the referenced Service. ReferenceGrant is
	// not applicable for governing ParentRefs to Services - it is not possible to
	// create a "producer" route for a Service in a different namespace from the
	// Route.
	//
	// There are two kinds of parent resources with "Core" support:
	//
	// * Gateway (Gateway conformance profile)
	// * Service (Mesh conformance profile, ClusterIP Services only)
	//
	// This API may be extended in the future to support additional kinds of parent
	// resources.
	//
	// ParentRefs must be _distinct_. This means either that:
	//
	// * They select different objects.  If this is the case, then parentRef
	//   entries are distinct. In terms of fields, this means that the
	//   multi-part key defined by `group`, `kind`, `namespace`, and `name` must
	//   be unique across all parentRef entries in the Route.
	// * They do not select different objects, but for each optional field used,
	//   each ParentRef that selects the same object must set the same set of
	//   optional fields to different values. If one ParentRef sets a
	//   combination of optional fields, all must set the same combination.
	//
	// Some examples:
	//
	// * If one ParentRef sets `sectionName`, all ParentRefs referencing the
	//   same object must also set `sectionName`.
	// * If one ParentRef sets `port`, all ParentRefs referencing the same
	//   object must also set `port`.
	// * If one ParentRef sets `sectionName` and `port`, all ParentRefs
	//   referencing the same object must also set `sectionName` and `port`.
	//
	// It is possible to separately reference multiple distinct objects that may
	// be collapsed by an implementation. For example, some implementations may
	// choose to merge compatible Gateway Listeners together. If that is the
	// case, the list of routes attached to those resources should also be
	// merged.
	//
	// Note that for ParentRefs that cross namespace boundaries, there are specific
	// rules. Cross-namespace references are only valid if they are explicitly
	// allowed by something in the namespace they are referring to. For example,
	// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
	// generic way to enable other kinds of cross-namespace reference.
	ParentRefs GRPCRouteSpecParentRefsArrayInput `pulumi:"parentRefs"`
	// Rules are a list of GRPC matchers, filters and actions.
	Rules GRPCRouteSpecRulesArrayInput `pulumi:"rules"`
}

func (GRPCRouteSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpec)(nil)).Elem()
}

func (i GRPCRouteSpecArgs) ToGRPCRouteSpecOutput() GRPCRouteSpecOutput {
	return i.ToGRPCRouteSpecOutputWithContext(context.Background())
}

func (i GRPCRouteSpecArgs) ToGRPCRouteSpecOutputWithContext(ctx context.Context) GRPCRouteSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecOutput)
}

func (i GRPCRouteSpecArgs) ToGRPCRouteSpecPtrOutput() GRPCRouteSpecPtrOutput {
	return i.ToGRPCRouteSpecPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecArgs) ToGRPCRouteSpecPtrOutputWithContext(ctx context.Context) GRPCRouteSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecOutput).ToGRPCRouteSpecPtrOutputWithContext(ctx)
}

// GRPCRouteSpecPtrInput is an input type that accepts GRPCRouteSpecArgs, GRPCRouteSpecPtr and GRPCRouteSpecPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecPtrInput` via:
//
//	        GRPCRouteSpecArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecPtrOutput() GRPCRouteSpecPtrOutput
	ToGRPCRouteSpecPtrOutputWithContext(context.Context) GRPCRouteSpecPtrOutput
}

type grpcrouteSpecPtrType GRPCRouteSpecArgs

func GRPCRouteSpecPtr(v *GRPCRouteSpecArgs) GRPCRouteSpecPtrInput {
	return (*grpcrouteSpecPtrType)(v)
}

func (*grpcrouteSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpec)(nil)).Elem()
}

func (i *grpcrouteSpecPtrType) ToGRPCRouteSpecPtrOutput() GRPCRouteSpecPtrOutput {
	return i.ToGRPCRouteSpecPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecPtrType) ToGRPCRouteSpecPtrOutputWithContext(ctx context.Context) GRPCRouteSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecPtrOutput)
}

// Spec defines the desired state of GRPCRoute.
type GRPCRouteSpecOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpec)(nil)).Elem()
}

func (o GRPCRouteSpecOutput) ToGRPCRouteSpecOutput() GRPCRouteSpecOutput {
	return o
}

func (o GRPCRouteSpecOutput) ToGRPCRouteSpecOutputWithContext(ctx context.Context) GRPCRouteSpecOutput {
	return o
}

func (o GRPCRouteSpecOutput) ToGRPCRouteSpecPtrOutput() GRPCRouteSpecPtrOutput {
	return o.ToGRPCRouteSpecPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecOutput) ToGRPCRouteSpecPtrOutputWithContext(ctx context.Context) GRPCRouteSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpec) *GRPCRouteSpec {
		return &v
	}).(GRPCRouteSpecPtrOutput)
}

// Hostnames defines a set of hostnames to match against the GRPC
// Host header to select a GRPCRoute to process the request. This matches
// the RFC 1123 definition of a hostname with 2 notable exceptions:
//
//  1. IPs are not allowed.
//  2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
//     label MUST appear by itself as the first label.
//
// If a hostname is specified by both the Listener and GRPCRoute, there
// MUST be at least one intersecting hostname for the GRPCRoute to be
// attached to the Listener. For example:
//
//   - A Listener with `test.example.com` as the hostname matches GRPCRoutes
//     that have either not specified any hostnames, or have specified at
//     least one of `test.example.com` or `*.example.com`.
//   - A Listener with `*.example.com` as the hostname matches GRPCRoutes
//     that have either not specified any hostnames or have specified at least
//     one hostname that matches the Listener hostname. For example,
//     `test.example.com` and `*.example.com` would both match. On the other
//     hand, `example.com` and `test.example.net` would not match.
//
// Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
// as a suffix match. That means that a match for `*.example.com` would match
// both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
//
// If both the Listener and GRPCRoute have specified hostnames, any
// GRPCRoute hostnames that do not match the Listener hostname MUST be
// ignored. For example, if a Listener specified `*.example.com`, and the
// GRPCRoute specified `test.example.com` and `test.example.net`,
// `test.example.net` MUST NOT be considered for a match.
//
// If both the Listener and GRPCRoute have specified hostnames, and none
// match with the criteria above, then the GRPCRoute MUST NOT be accepted by
// the implementation. The implementation MUST raise an 'Accepted' Condition
// with a status of `False` in the corresponding RouteParentStatus.
//
// If a Route (A) of type HTTPRoute or GRPCRoute is attached to a
// Listener and that listener already has another Route (B) of the other
// type attached and the intersection of the hostnames of A and B is
// non-empty, then the implementation MUST accept exactly one of these two
// routes, determined by the following criteria, in order:
//
//   - The oldest Route based on creation timestamp.
//   - The Route appearing first in alphabetical order by
//     "{namespace}/{name}".
//
// The rejected Route MUST raise an 'Accepted' condition with a status of
// 'False' in the corresponding RouteParentStatus.
//
// Support: Core
func (o GRPCRouteSpecOutput) Hostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpec) []string { return v.Hostnames }).(pulumi.StringArrayOutput)
}

// ParentRefs references the resources (usually Gateways) that a Route wants
// to be attached to. Note that the referenced parent resource needs to
// allow this for the attachment to be complete. For Gateways, that means
// the Gateway needs to allow attachment from Routes of this kind and
// namespace. For Services, that means the Service must either be in the same
// namespace for a "producer" route, or the mesh implementation must support
// and allow "consumer" routes for the referenced Service. ReferenceGrant is
// not applicable for governing ParentRefs to Services - it is not possible to
// create a "producer" route for a Service in a different namespace from the
// Route.
//
// There are two kinds of parent resources with "Core" support:
//
// * Gateway (Gateway conformance profile)
// * Service (Mesh conformance profile, ClusterIP Services only)
//
// This API may be extended in the future to support additional kinds of parent
// resources.
//
// ParentRefs must be _distinct_. This means either that:
//
//   - They select different objects.  If this is the case, then parentRef
//     entries are distinct. In terms of fields, this means that the
//     multi-part key defined by `group`, `kind`, `namespace`, and `name` must
//     be unique across all parentRef entries in the Route.
//   - They do not select different objects, but for each optional field used,
//     each ParentRef that selects the same object must set the same set of
//     optional fields to different values. If one ParentRef sets a
//     combination of optional fields, all must set the same combination.
//
// Some examples:
//
//   - If one ParentRef sets `sectionName`, all ParentRefs referencing the
//     same object must also set `sectionName`.
//   - If one ParentRef sets `port`, all ParentRefs referencing the same
//     object must also set `port`.
//   - If one ParentRef sets `sectionName` and `port`, all ParentRefs
//     referencing the same object must also set `sectionName` and `port`.
//
// It is possible to separately reference multiple distinct objects that may
// be collapsed by an implementation. For example, some implementations may
// choose to merge compatible Gateway Listeners together. If that is the
// case, the list of routes attached to those resources should also be
// merged.
//
// Note that for ParentRefs that cross namespace boundaries, there are specific
// rules. Cross-namespace references are only valid if they are explicitly
// allowed by something in the namespace they are referring to. For example,
// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
// generic way to enable other kinds of cross-namespace reference.
func (o GRPCRouteSpecOutput) ParentRefs() GRPCRouteSpecParentRefsArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpec) []GRPCRouteSpecParentRefs { return v.ParentRefs }).(GRPCRouteSpecParentRefsArrayOutput)
}

// Rules are a list of GRPC matchers, filters and actions.
func (o GRPCRouteSpecOutput) Rules() GRPCRouteSpecRulesArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpec) []GRPCRouteSpecRules { return v.Rules }).(GRPCRouteSpecRulesArrayOutput)
}

type GRPCRouteSpecPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpec)(nil)).Elem()
}

func (o GRPCRouteSpecPtrOutput) ToGRPCRouteSpecPtrOutput() GRPCRouteSpecPtrOutput {
	return o
}

func (o GRPCRouteSpecPtrOutput) ToGRPCRouteSpecPtrOutputWithContext(ctx context.Context) GRPCRouteSpecPtrOutput {
	return o
}

func (o GRPCRouteSpecPtrOutput) Elem() GRPCRouteSpecOutput {
	return o.ApplyT(func(v *GRPCRouteSpec) GRPCRouteSpec {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpec
		return ret
	}).(GRPCRouteSpecOutput)
}

// Hostnames defines a set of hostnames to match against the GRPC
// Host header to select a GRPCRoute to process the request. This matches
// the RFC 1123 definition of a hostname with 2 notable exceptions:
//
//  1. IPs are not allowed.
//  2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard
//     label MUST appear by itself as the first label.
//
// If a hostname is specified by both the Listener and GRPCRoute, there
// MUST be at least one intersecting hostname for the GRPCRoute to be
// attached to the Listener. For example:
//
//   - A Listener with `test.example.com` as the hostname matches GRPCRoutes
//     that have either not specified any hostnames, or have specified at
//     least one of `test.example.com` or `*.example.com`.
//   - A Listener with `*.example.com` as the hostname matches GRPCRoutes
//     that have either not specified any hostnames or have specified at least
//     one hostname that matches the Listener hostname. For example,
//     `test.example.com` and `*.example.com` would both match. On the other
//     hand, `example.com` and `test.example.net` would not match.
//
// Hostnames that are prefixed with a wildcard label (`*.`) are interpreted
// as a suffix match. That means that a match for `*.example.com` would match
// both `test.example.com`, and `foo.test.example.com`, but not `example.com`.
//
// If both the Listener and GRPCRoute have specified hostnames, any
// GRPCRoute hostnames that do not match the Listener hostname MUST be
// ignored. For example, if a Listener specified `*.example.com`, and the
// GRPCRoute specified `test.example.com` and `test.example.net`,
// `test.example.net` MUST NOT be considered for a match.
//
// If both the Listener and GRPCRoute have specified hostnames, and none
// match with the criteria above, then the GRPCRoute MUST NOT be accepted by
// the implementation. The implementation MUST raise an 'Accepted' Condition
// with a status of `False` in the corresponding RouteParentStatus.
//
// If a Route (A) of type HTTPRoute or GRPCRoute is attached to a
// Listener and that listener already has another Route (B) of the other
// type attached and the intersection of the hostnames of A and B is
// non-empty, then the implementation MUST accept exactly one of these two
// routes, determined by the following criteria, in order:
//
//   - The oldest Route based on creation timestamp.
//   - The Route appearing first in alphabetical order by
//     "{namespace}/{name}".
//
// The rejected Route MUST raise an 'Accepted' condition with a status of
// 'False' in the corresponding RouteParentStatus.
//
// Support: Core
func (o GRPCRouteSpecPtrOutput) Hostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpec) []string {
		if v == nil {
			return nil
		}
		return v.Hostnames
	}).(pulumi.StringArrayOutput)
}

// ParentRefs references the resources (usually Gateways) that a Route wants
// to be attached to. Note that the referenced parent resource needs to
// allow this for the attachment to be complete. For Gateways, that means
// the Gateway needs to allow attachment from Routes of this kind and
// namespace. For Services, that means the Service must either be in the same
// namespace for a "producer" route, or the mesh implementation must support
// and allow "consumer" routes for the referenced Service. ReferenceGrant is
// not applicable for governing ParentRefs to Services - it is not possible to
// create a "producer" route for a Service in a different namespace from the
// Route.
//
// There are two kinds of parent resources with "Core" support:
//
// * Gateway (Gateway conformance profile)
// * Service (Mesh conformance profile, ClusterIP Services only)
//
// This API may be extended in the future to support additional kinds of parent
// resources.
//
// ParentRefs must be _distinct_. This means either that:
//
//   - They select different objects.  If this is the case, then parentRef
//     entries are distinct. In terms of fields, this means that the
//     multi-part key defined by `group`, `kind`, `namespace`, and `name` must
//     be unique across all parentRef entries in the Route.
//   - They do not select different objects, but for each optional field used,
//     each ParentRef that selects the same object must set the same set of
//     optional fields to different values. If one ParentRef sets a
//     combination of optional fields, all must set the same combination.
//
// Some examples:
//
//   - If one ParentRef sets `sectionName`, all ParentRefs referencing the
//     same object must also set `sectionName`.
//   - If one ParentRef sets `port`, all ParentRefs referencing the same
//     object must also set `port`.
//   - If one ParentRef sets `sectionName` and `port`, all ParentRefs
//     referencing the same object must also set `sectionName` and `port`.
//
// It is possible to separately reference multiple distinct objects that may
// be collapsed by an implementation. For example, some implementations may
// choose to merge compatible Gateway Listeners together. If that is the
// case, the list of routes attached to those resources should also be
// merged.
//
// Note that for ParentRefs that cross namespace boundaries, there are specific
// rules. Cross-namespace references are only valid if they are explicitly
// allowed by something in the namespace they are referring to. For example,
// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
// generic way to enable other kinds of cross-namespace reference.
func (o GRPCRouteSpecPtrOutput) ParentRefs() GRPCRouteSpecParentRefsArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpec) []GRPCRouteSpecParentRefs {
		if v == nil {
			return nil
		}
		return v.ParentRefs
	}).(GRPCRouteSpecParentRefsArrayOutput)
}

// Rules are a list of GRPC matchers, filters and actions.
func (o GRPCRouteSpecPtrOutput) Rules() GRPCRouteSpecRulesArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpec) []GRPCRouteSpecRules {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(GRPCRouteSpecRulesArrayOutput)
}

// ParentReference identifies an API object (usually a Gateway) that can be considered
// a parent of this resource (usually a route). There are two kinds of parent resources
// with "Core" support:
//
// * Gateway (Gateway conformance profile)
// * Service (Mesh conformance profile, ClusterIP Services only)
//
// This API may be extended in the future to support additional kinds of parent
// resources.
//
// The API object must be valid in the cluster; the Group and Kind must
// be registered in the cluster for this reference to be valid.
type GRPCRouteSpecParentRefs struct {
	// Group is the group of the referent.
	// When unspecified, "gateway.networking.k8s.io" is inferred.
	// To set the core API group (such as for a "Service" kind referent),
	// Group must be explicitly set to "" (empty string).
	//
	// Support: Core
	Group *string `pulumi:"group"`
	// Kind is kind of the referent.
	//
	// There are two kinds of parent resources with "Core" support:
	//
	// * Gateway (Gateway conformance profile)
	// * Service (Mesh conformance profile, ClusterIP Services only)
	//
	// Support for other resources is Implementation-Specific.
	Kind *string `pulumi:"kind"`
	// Name is the name of the referent.
	//
	// Support: Core
	Name string `pulumi:"name"`
	// Namespace is the namespace of the referent. When unspecified, this refers
	// to the local namespace of the Route.
	//
	// Note that there are specific rules for ParentRefs which cross namespace
	// boundaries. Cross-namespace references are only valid if they are explicitly
	// allowed by something in the namespace they are referring to. For example:
	// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
	// generic way to enable any other kind of cross-namespace reference.
	//
	// Support: Core
	Namespace *string `pulumi:"namespace"`
	// Port is the network port this Route targets. It can be interpreted
	// differently based on the type of parent resource.
	//
	// When the parent resource is a Gateway, this targets all listeners
	// listening on the specified port that also support this kind of Route(and
	// select this Route). It's not recommended to set `Port` unless the
	// networking behaviors specified in a Route must apply to a specific port
	// as opposed to a listener(s) whose port(s) may be changed. When both Port
	// and SectionName are specified, the name and port of the selected listener
	// must match both specified values.
	//
	// Implementations MAY choose to support other parent resources.
	// Implementations supporting other types of parent resources MUST clearly
	// document how/if Port is interpreted.
	//
	// For the purpose of status, an attachment is considered successful as
	// long as the parent resource accepts it partially. For example, Gateway
	// listeners can restrict which Routes can attach to them by Route kind,
	// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
	// from the referencing Route, the Route MUST be considered successfully
	// attached. If no Gateway listeners accept attachment from this Route,
	// the Route MUST be considered detached from the Gateway.
	//
	// Support: Extended
	Port *int `pulumi:"port"`
	// SectionName is the name of a section within the target resource. In the
	// following resources, SectionName is interpreted as the following:
	//
	// * Gateway: Listener name. When both Port (experimental) and SectionName
	//   are specified, the name and port of the selected listener must match
	//   both specified values.
	// * Service: Port name. When both Port (experimental) and SectionName
	//   are specified, the name and port of the selected listener must match
	//   both specified values.
	//
	// Implementations MAY choose to support attaching Routes to other resources.
	// If that is the case, they MUST clearly document how SectionName is
	// interpreted.
	//
	// When unspecified (empty string), this will reference the entire resource.
	// For the purpose of status, an attachment is considered successful if at
	// least one section in the parent resource accepts it. For example, Gateway
	// listeners can restrict which Routes can attach to them by Route kind,
	// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
	// the referencing Route, the Route MUST be considered successfully
	// attached. If no Gateway listeners accept attachment from this Route, the
	// Route MUST be considered detached from the Gateway.
	//
	// Support: Core
	SectionName *string `pulumi:"sectionName"`
}

// Defaults sets the appropriate defaults for GRPCRouteSpecParentRefs
func (val *GRPCRouteSpecParentRefs) Defaults() *GRPCRouteSpecParentRefs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Group == nil {
		group_ := "gateway.networking.k8s.io"
		tmp.Group = &group_
	}
	if tmp.Kind == nil {
		kind_ := "Gateway"
		tmp.Kind = &kind_
	}
	return &tmp
}

// GRPCRouteSpecParentRefsInput is an input type that accepts GRPCRouteSpecParentRefsArgs and GRPCRouteSpecParentRefsOutput values.
// You can construct a concrete instance of `GRPCRouteSpecParentRefsInput` via:
//
//	GRPCRouteSpecParentRefsArgs{...}
type GRPCRouteSpecParentRefsInput interface {
	pulumi.Input

	ToGRPCRouteSpecParentRefsOutput() GRPCRouteSpecParentRefsOutput
	ToGRPCRouteSpecParentRefsOutputWithContext(context.Context) GRPCRouteSpecParentRefsOutput
}

// ParentReference identifies an API object (usually a Gateway) that can be considered
// a parent of this resource (usually a route). There are two kinds of parent resources
// with "Core" support:
//
// * Gateway (Gateway conformance profile)
// * Service (Mesh conformance profile, ClusterIP Services only)
//
// This API may be extended in the future to support additional kinds of parent
// resources.
//
// The API object must be valid in the cluster; the Group and Kind must
// be registered in the cluster for this reference to be valid.
type GRPCRouteSpecParentRefsArgs struct {
	// Group is the group of the referent.
	// When unspecified, "gateway.networking.k8s.io" is inferred.
	// To set the core API group (such as for a "Service" kind referent),
	// Group must be explicitly set to "" (empty string).
	//
	// Support: Core
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind is kind of the referent.
	//
	// There are two kinds of parent resources with "Core" support:
	//
	// * Gateway (Gateway conformance profile)
	// * Service (Mesh conformance profile, ClusterIP Services only)
	//
	// Support for other resources is Implementation-Specific.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of the referent.
	//
	// Support: Core
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace is the namespace of the referent. When unspecified, this refers
	// to the local namespace of the Route.
	//
	// Note that there are specific rules for ParentRefs which cross namespace
	// boundaries. Cross-namespace references are only valid if they are explicitly
	// allowed by something in the namespace they are referring to. For example:
	// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
	// generic way to enable any other kind of cross-namespace reference.
	//
	// Support: Core
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Port is the network port this Route targets. It can be interpreted
	// differently based on the type of parent resource.
	//
	// When the parent resource is a Gateway, this targets all listeners
	// listening on the specified port that also support this kind of Route(and
	// select this Route). It's not recommended to set `Port` unless the
	// networking behaviors specified in a Route must apply to a specific port
	// as opposed to a listener(s) whose port(s) may be changed. When both Port
	// and SectionName are specified, the name and port of the selected listener
	// must match both specified values.
	//
	// Implementations MAY choose to support other parent resources.
	// Implementations supporting other types of parent resources MUST clearly
	// document how/if Port is interpreted.
	//
	// For the purpose of status, an attachment is considered successful as
	// long as the parent resource accepts it partially. For example, Gateway
	// listeners can restrict which Routes can attach to them by Route kind,
	// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
	// from the referencing Route, the Route MUST be considered successfully
	// attached. If no Gateway listeners accept attachment from this Route,
	// the Route MUST be considered detached from the Gateway.
	//
	// Support: Extended
	Port pulumi.IntPtrInput `pulumi:"port"`
	// SectionName is the name of a section within the target resource. In the
	// following resources, SectionName is interpreted as the following:
	//
	// * Gateway: Listener name. When both Port (experimental) and SectionName
	//   are specified, the name and port of the selected listener must match
	//   both specified values.
	// * Service: Port name. When both Port (experimental) and SectionName
	//   are specified, the name and port of the selected listener must match
	//   both specified values.
	//
	// Implementations MAY choose to support attaching Routes to other resources.
	// If that is the case, they MUST clearly document how SectionName is
	// interpreted.
	//
	// When unspecified (empty string), this will reference the entire resource.
	// For the purpose of status, an attachment is considered successful if at
	// least one section in the parent resource accepts it. For example, Gateway
	// listeners can restrict which Routes can attach to them by Route kind,
	// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
	// the referencing Route, the Route MUST be considered successfully
	// attached. If no Gateway listeners accept attachment from this Route, the
	// Route MUST be considered detached from the Gateway.
	//
	// Support: Core
	SectionName pulumi.StringPtrInput `pulumi:"sectionName"`
}

// Defaults sets the appropriate defaults for GRPCRouteSpecParentRefsArgs
func (val *GRPCRouteSpecParentRefsArgs) Defaults() *GRPCRouteSpecParentRefsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Group == nil {
		tmp.Group = pulumi.StringPtr("gateway.networking.k8s.io")
	}
	if tmp.Kind == nil {
		tmp.Kind = pulumi.StringPtr("Gateway")
	}
	return &tmp
}
func (GRPCRouteSpecParentRefsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecParentRefs)(nil)).Elem()
}

func (i GRPCRouteSpecParentRefsArgs) ToGRPCRouteSpecParentRefsOutput() GRPCRouteSpecParentRefsOutput {
	return i.ToGRPCRouteSpecParentRefsOutputWithContext(context.Background())
}

func (i GRPCRouteSpecParentRefsArgs) ToGRPCRouteSpecParentRefsOutputWithContext(ctx context.Context) GRPCRouteSpecParentRefsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecParentRefsOutput)
}

// GRPCRouteSpecParentRefsArrayInput is an input type that accepts GRPCRouteSpecParentRefsArray and GRPCRouteSpecParentRefsArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecParentRefsArrayInput` via:
//
//	GRPCRouteSpecParentRefsArray{ GRPCRouteSpecParentRefsArgs{...} }
type GRPCRouteSpecParentRefsArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecParentRefsArrayOutput() GRPCRouteSpecParentRefsArrayOutput
	ToGRPCRouteSpecParentRefsArrayOutputWithContext(context.Context) GRPCRouteSpecParentRefsArrayOutput
}

type GRPCRouteSpecParentRefsArray []GRPCRouteSpecParentRefsInput

func (GRPCRouteSpecParentRefsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecParentRefs)(nil)).Elem()
}

func (i GRPCRouteSpecParentRefsArray) ToGRPCRouteSpecParentRefsArrayOutput() GRPCRouteSpecParentRefsArrayOutput {
	return i.ToGRPCRouteSpecParentRefsArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecParentRefsArray) ToGRPCRouteSpecParentRefsArrayOutputWithContext(ctx context.Context) GRPCRouteSpecParentRefsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecParentRefsArrayOutput)
}

// ParentReference identifies an API object (usually a Gateway) that can be considered
// a parent of this resource (usually a route). There are two kinds of parent resources
// with "Core" support:
//
// * Gateway (Gateway conformance profile)
// * Service (Mesh conformance profile, ClusterIP Services only)
//
// This API may be extended in the future to support additional kinds of parent
// resources.
//
// The API object must be valid in the cluster; the Group and Kind must
// be registered in the cluster for this reference to be valid.
type GRPCRouteSpecParentRefsOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecParentRefsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecParentRefs)(nil)).Elem()
}

func (o GRPCRouteSpecParentRefsOutput) ToGRPCRouteSpecParentRefsOutput() GRPCRouteSpecParentRefsOutput {
	return o
}

func (o GRPCRouteSpecParentRefsOutput) ToGRPCRouteSpecParentRefsOutputWithContext(ctx context.Context) GRPCRouteSpecParentRefsOutput {
	return o
}

// Group is the group of the referent.
// When unspecified, "gateway.networking.k8s.io" is inferred.
// To set the core API group (such as for a "Service" kind referent),
// Group must be explicitly set to "" (empty string).
//
// Support: Core
func (o GRPCRouteSpecParentRefsOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecParentRefs) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind is kind of the referent.
//
// There are two kinds of parent resources with "Core" support:
//
// * Gateway (Gateway conformance profile)
// * Service (Mesh conformance profile, ClusterIP Services only)
//
// Support for other resources is Implementation-Specific.
func (o GRPCRouteSpecParentRefsOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecParentRefs) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
//
// Support: Core
func (o GRPCRouteSpecParentRefsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteSpecParentRefs) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace is the namespace of the referent. When unspecified, this refers
// to the local namespace of the Route.
//
// Note that there are specific rules for ParentRefs which cross namespace
// boundaries. Cross-namespace references are only valid if they are explicitly
// allowed by something in the namespace they are referring to. For example:
// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
// generic way to enable any other kind of cross-namespace reference.
//
// Support: Core
func (o GRPCRouteSpecParentRefsOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecParentRefs) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Port is the network port this Route targets. It can be interpreted
// differently based on the type of parent resource.
//
// When the parent resource is a Gateway, this targets all listeners
// listening on the specified port that also support this kind of Route(and
// select this Route). It's not recommended to set `Port` unless the
// networking behaviors specified in a Route must apply to a specific port
// as opposed to a listener(s) whose port(s) may be changed. When both Port
// and SectionName are specified, the name and port of the selected listener
// must match both specified values.
//
// Implementations MAY choose to support other parent resources.
// Implementations supporting other types of parent resources MUST clearly
// document how/if Port is interpreted.
//
// For the purpose of status, an attachment is considered successful as
// long as the parent resource accepts it partially. For example, Gateway
// listeners can restrict which Routes can attach to them by Route kind,
// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
// from the referencing Route, the Route MUST be considered successfully
// attached. If no Gateway listeners accept attachment from this Route,
// the Route MUST be considered detached from the Gateway.
//
// Support: Extended
func (o GRPCRouteSpecParentRefsOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecParentRefs) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// SectionName is the name of a section within the target resource. In the
// following resources, SectionName is interpreted as the following:
//
//   - Gateway: Listener name. When both Port (experimental) and SectionName
//     are specified, the name and port of the selected listener must match
//     both specified values.
//   - Service: Port name. When both Port (experimental) and SectionName
//     are specified, the name and port of the selected listener must match
//     both specified values.
//
// Implementations MAY choose to support attaching Routes to other resources.
// If that is the case, they MUST clearly document how SectionName is
// interpreted.
//
// When unspecified (empty string), this will reference the entire resource.
// For the purpose of status, an attachment is considered successful if at
// least one section in the parent resource accepts it. For example, Gateway
// listeners can restrict which Routes can attach to them by Route kind,
// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
// the referencing Route, the Route MUST be considered successfully
// attached. If no Gateway listeners accept attachment from this Route, the
// Route MUST be considered detached from the Gateway.
//
// Support: Core
func (o GRPCRouteSpecParentRefsOutput) SectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecParentRefs) *string { return v.SectionName }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecParentRefsArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecParentRefsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecParentRefs)(nil)).Elem()
}

func (o GRPCRouteSpecParentRefsArrayOutput) ToGRPCRouteSpecParentRefsArrayOutput() GRPCRouteSpecParentRefsArrayOutput {
	return o
}

func (o GRPCRouteSpecParentRefsArrayOutput) ToGRPCRouteSpecParentRefsArrayOutputWithContext(ctx context.Context) GRPCRouteSpecParentRefsArrayOutput {
	return o
}

func (o GRPCRouteSpecParentRefsArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecParentRefsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecParentRefs {
		return vs[0].([]GRPCRouteSpecParentRefs)[vs[1].(int)]
	}).(GRPCRouteSpecParentRefsOutput)
}

// GRPCRouteRule defines the semantics for matching a gRPC request based on
// conditions (matches), processing it (filters), and forwarding the request to
// an API object (backendRefs).
type GRPCRouteSpecRules struct {
	// BackendRefs defines the backend(s) where matching requests should be
	// sent.
	//
	// Failure behavior here depends on how many BackendRefs are specified and
	// how many are invalid.
	//
	// If *all* entries in BackendRefs are invalid, and there are also no filters
	// specified in this route rule, *all* traffic which matches this rule MUST
	// receive an `UNAVAILABLE` status.
	//
	// See the GRPCBackendRef definition for the rules about what makes a single
	// GRPCBackendRef invalid.
	//
	// When a GRPCBackendRef is invalid, `UNAVAILABLE` statuses MUST be returned for
	// requests that would have otherwise been routed to an invalid backend. If
	// multiple backends are specified, and some are invalid, the proportion of
	// requests that would otherwise have been routed to an invalid backend
	// MUST receive an `UNAVAILABLE` status.
	//
	// For example, if two backends are specified with equal weights, and one is
	// invalid, 50 percent of traffic MUST receive an `UNAVAILABLE` status.
	// Implementations may choose how that 50 percent is determined.
	//
	// Support: Core for Kubernetes Service
	//
	// Support: Implementation-specific for any other resource
	//
	// Support for weight: Core
	BackendRefs []GRPCRouteSpecRulesBackendRefs `pulumi:"backendRefs"`
	// Filters define the filters that are applied to requests that match
	// this rule.
	//
	// The effects of ordering of multiple behaviors are currently unspecified.
	// This can change in the future based on feedback during the alpha stage.
	//
	// Conformance-levels at this level are defined based on the type of filter:
	//
	// - ALL core filters MUST be supported by all implementations that support
	//   GRPCRoute.
	// - Implementers are encouraged to support extended filters.
	// - Implementation-specific custom filters have no API guarantees across
	//   implementations.
	//
	// Specifying the same filter multiple times is not supported unless explicitly
	// indicated in the filter.
	//
	// If an implementation can not support a combination of filters, it must clearly
	// document that limitation. In cases where incompatible or unsupported
	// filters are specified and cause the `Accepted` condition to be set to status
	// `False`, implementations may use the `IncompatibleFilters` reason to specify
	// this configuration error.
	//
	// Support: Core
	Filters []GRPCRouteSpecRulesFilters `pulumi:"filters"`
	// Matches define conditions used for matching the rule against incoming
	// gRPC requests. Each match is independent, i.e. this rule will be matched
	// if **any** one of the matches is satisfied.
	//
	// For example, take the following matches configuration:
	//
	// For a request to match against this rule, it MUST satisfy
	// EITHER of the two conditions:
	//
	// - service of foo.bar AND contains the header `version: 2`
	// - service of foo.bar.v2
	//
	// See the documentation for GRPCRouteMatch on how to specify multiple
	// match conditions to be ANDed together.
	//
	// If no matches are specified, the implementation MUST match every gRPC request.
	//
	// Proxy or Load Balancer routing configuration generated from GRPCRoutes
	// MUST prioritize rules based on the following criteria, continuing on
	// ties. Merging MUST not be done between GRPCRoutes and HTTPRoutes.
	// Precedence MUST be given to the rule with the largest number of:
	//
	// * Characters in a matching non-wildcard hostname.
	// * Characters in a matching hostname.
	// * Characters in a matching service.
	// * Characters in a matching method.
	// * Header matches.
	//
	// If ties still exist across multiple Routes, matching precedence MUST be
	// determined in order of the following criteria, continuing on ties:
	//
	// * The oldest Route based on creation timestamp.
	// * The Route appearing first in alphabetical order by
	//   "{namespace}/{name}".
	//
	// If ties still exist within the Route that has been given precedence,
	// matching precedence MUST be granted to the first matching rule meeting
	// the above criteria.
	Matches []GRPCRouteSpecRulesMatches `pulumi:"matches"`
}

// GRPCRouteSpecRulesInput is an input type that accepts GRPCRouteSpecRulesArgs and GRPCRouteSpecRulesOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesInput` via:
//
//	GRPCRouteSpecRulesArgs{...}
type GRPCRouteSpecRulesInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesOutput() GRPCRouteSpecRulesOutput
	ToGRPCRouteSpecRulesOutputWithContext(context.Context) GRPCRouteSpecRulesOutput
}

// GRPCRouteRule defines the semantics for matching a gRPC request based on
// conditions (matches), processing it (filters), and forwarding the request to
// an API object (backendRefs).
type GRPCRouteSpecRulesArgs struct {
	// BackendRefs defines the backend(s) where matching requests should be
	// sent.
	//
	// Failure behavior here depends on how many BackendRefs are specified and
	// how many are invalid.
	//
	// If *all* entries in BackendRefs are invalid, and there are also no filters
	// specified in this route rule, *all* traffic which matches this rule MUST
	// receive an `UNAVAILABLE` status.
	//
	// See the GRPCBackendRef definition for the rules about what makes a single
	// GRPCBackendRef invalid.
	//
	// When a GRPCBackendRef is invalid, `UNAVAILABLE` statuses MUST be returned for
	// requests that would have otherwise been routed to an invalid backend. If
	// multiple backends are specified, and some are invalid, the proportion of
	// requests that would otherwise have been routed to an invalid backend
	// MUST receive an `UNAVAILABLE` status.
	//
	// For example, if two backends are specified with equal weights, and one is
	// invalid, 50 percent of traffic MUST receive an `UNAVAILABLE` status.
	// Implementations may choose how that 50 percent is determined.
	//
	// Support: Core for Kubernetes Service
	//
	// Support: Implementation-specific for any other resource
	//
	// Support for weight: Core
	BackendRefs GRPCRouteSpecRulesBackendRefsArrayInput `pulumi:"backendRefs"`
	// Filters define the filters that are applied to requests that match
	// this rule.
	//
	// The effects of ordering of multiple behaviors are currently unspecified.
	// This can change in the future based on feedback during the alpha stage.
	//
	// Conformance-levels at this level are defined based on the type of filter:
	//
	// - ALL core filters MUST be supported by all implementations that support
	//   GRPCRoute.
	// - Implementers are encouraged to support extended filters.
	// - Implementation-specific custom filters have no API guarantees across
	//   implementations.
	//
	// Specifying the same filter multiple times is not supported unless explicitly
	// indicated in the filter.
	//
	// If an implementation can not support a combination of filters, it must clearly
	// document that limitation. In cases where incompatible or unsupported
	// filters are specified and cause the `Accepted` condition to be set to status
	// `False`, implementations may use the `IncompatibleFilters` reason to specify
	// this configuration error.
	//
	// Support: Core
	Filters GRPCRouteSpecRulesFiltersArrayInput `pulumi:"filters"`
	// Matches define conditions used for matching the rule against incoming
	// gRPC requests. Each match is independent, i.e. this rule will be matched
	// if **any** one of the matches is satisfied.
	//
	// For example, take the following matches configuration:
	//
	// For a request to match against this rule, it MUST satisfy
	// EITHER of the two conditions:
	//
	// - service of foo.bar AND contains the header `version: 2`
	// - service of foo.bar.v2
	//
	// See the documentation for GRPCRouteMatch on how to specify multiple
	// match conditions to be ANDed together.
	//
	// If no matches are specified, the implementation MUST match every gRPC request.
	//
	// Proxy or Load Balancer routing configuration generated from GRPCRoutes
	// MUST prioritize rules based on the following criteria, continuing on
	// ties. Merging MUST not be done between GRPCRoutes and HTTPRoutes.
	// Precedence MUST be given to the rule with the largest number of:
	//
	// * Characters in a matching non-wildcard hostname.
	// * Characters in a matching hostname.
	// * Characters in a matching service.
	// * Characters in a matching method.
	// * Header matches.
	//
	// If ties still exist across multiple Routes, matching precedence MUST be
	// determined in order of the following criteria, continuing on ties:
	//
	// * The oldest Route based on creation timestamp.
	// * The Route appearing first in alphabetical order by
	//   "{namespace}/{name}".
	//
	// If ties still exist within the Route that has been given precedence,
	// matching precedence MUST be granted to the first matching rule meeting
	// the above criteria.
	Matches GRPCRouteSpecRulesMatchesArrayInput `pulumi:"matches"`
}

func (GRPCRouteSpecRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRules)(nil)).Elem()
}

func (i GRPCRouteSpecRulesArgs) ToGRPCRouteSpecRulesOutput() GRPCRouteSpecRulesOutput {
	return i.ToGRPCRouteSpecRulesOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesArgs) ToGRPCRouteSpecRulesOutputWithContext(ctx context.Context) GRPCRouteSpecRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesOutput)
}

// GRPCRouteSpecRulesArrayInput is an input type that accepts GRPCRouteSpecRulesArray and GRPCRouteSpecRulesArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesArrayInput` via:
//
//	GRPCRouteSpecRulesArray{ GRPCRouteSpecRulesArgs{...} }
type GRPCRouteSpecRulesArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesArrayOutput() GRPCRouteSpecRulesArrayOutput
	ToGRPCRouteSpecRulesArrayOutputWithContext(context.Context) GRPCRouteSpecRulesArrayOutput
}

type GRPCRouteSpecRulesArray []GRPCRouteSpecRulesInput

func (GRPCRouteSpecRulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRules)(nil)).Elem()
}

func (i GRPCRouteSpecRulesArray) ToGRPCRouteSpecRulesArrayOutput() GRPCRouteSpecRulesArrayOutput {
	return i.ToGRPCRouteSpecRulesArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesArray) ToGRPCRouteSpecRulesArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesArrayOutput)
}

// GRPCRouteRule defines the semantics for matching a gRPC request based on
// conditions (matches), processing it (filters), and forwarding the request to
// an API object (backendRefs).
type GRPCRouteSpecRulesOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRules)(nil)).Elem()
}

func (o GRPCRouteSpecRulesOutput) ToGRPCRouteSpecRulesOutput() GRPCRouteSpecRulesOutput {
	return o
}

func (o GRPCRouteSpecRulesOutput) ToGRPCRouteSpecRulesOutputWithContext(ctx context.Context) GRPCRouteSpecRulesOutput {
	return o
}

// BackendRefs defines the backend(s) where matching requests should be
// sent.
//
// Failure behavior here depends on how many BackendRefs are specified and
// how many are invalid.
//
// If *all* entries in BackendRefs are invalid, and there are also no filters
// specified in this route rule, *all* traffic which matches this rule MUST
// receive an `UNAVAILABLE` status.
//
// See the GRPCBackendRef definition for the rules about what makes a single
// GRPCBackendRef invalid.
//
// When a GRPCBackendRef is invalid, `UNAVAILABLE` statuses MUST be returned for
// requests that would have otherwise been routed to an invalid backend. If
// multiple backends are specified, and some are invalid, the proportion of
// requests that would otherwise have been routed to an invalid backend
// MUST receive an `UNAVAILABLE` status.
//
// For example, if two backends are specified with equal weights, and one is
// invalid, 50 percent of traffic MUST receive an `UNAVAILABLE` status.
// Implementations may choose how that 50 percent is determined.
//
// Support: Core for Kubernetes Service
//
// Support: Implementation-specific for any other resource
//
// Support for weight: Core
func (o GRPCRouteSpecRulesOutput) BackendRefs() GRPCRouteSpecRulesBackendRefsArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRules) []GRPCRouteSpecRulesBackendRefs { return v.BackendRefs }).(GRPCRouteSpecRulesBackendRefsArrayOutput)
}

// Filters define the filters that are applied to requests that match
// this rule.
//
// The effects of ordering of multiple behaviors are currently unspecified.
// This can change in the future based on feedback during the alpha stage.
//
// Conformance-levels at this level are defined based on the type of filter:
//
//   - ALL core filters MUST be supported by all implementations that support
//     GRPCRoute.
//   - Implementers are encouraged to support extended filters.
//   - Implementation-specific custom filters have no API guarantees across
//     implementations.
//
// Specifying the same filter multiple times is not supported unless explicitly
// indicated in the filter.
//
// If an implementation can not support a combination of filters, it must clearly
// document that limitation. In cases where incompatible or unsupported
// filters are specified and cause the `Accepted` condition to be set to status
// `False`, implementations may use the `IncompatibleFilters` reason to specify
// this configuration error.
//
// Support: Core
func (o GRPCRouteSpecRulesOutput) Filters() GRPCRouteSpecRulesFiltersArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRules) []GRPCRouteSpecRulesFilters { return v.Filters }).(GRPCRouteSpecRulesFiltersArrayOutput)
}

// Matches define conditions used for matching the rule against incoming
// gRPC requests. Each match is independent, i.e. this rule will be matched
// if **any** one of the matches is satisfied.
//
// For example, take the following matches configuration:
//
// For a request to match against this rule, it MUST satisfy
// EITHER of the two conditions:
//
// - service of foo.bar AND contains the header `version: 2`
// - service of foo.bar.v2
//
// See the documentation for GRPCRouteMatch on how to specify multiple
// match conditions to be ANDed together.
//
// If no matches are specified, the implementation MUST match every gRPC request.
//
// Proxy or Load Balancer routing configuration generated from GRPCRoutes
// MUST prioritize rules based on the following criteria, continuing on
// ties. Merging MUST not be done between GRPCRoutes and HTTPRoutes.
// Precedence MUST be given to the rule with the largest number of:
//
// * Characters in a matching non-wildcard hostname.
// * Characters in a matching hostname.
// * Characters in a matching service.
// * Characters in a matching method.
// * Header matches.
//
// If ties still exist across multiple Routes, matching precedence MUST be
// determined in order of the following criteria, continuing on ties:
//
//   - The oldest Route based on creation timestamp.
//   - The Route appearing first in alphabetical order by
//     "{namespace}/{name}".
//
// If ties still exist within the Route that has been given precedence,
// matching precedence MUST be granted to the first matching rule meeting
// the above criteria.
func (o GRPCRouteSpecRulesOutput) Matches() GRPCRouteSpecRulesMatchesArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRules) []GRPCRouteSpecRulesMatches { return v.Matches }).(GRPCRouteSpecRulesMatchesArrayOutput)
}

type GRPCRouteSpecRulesArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRules)(nil)).Elem()
}

func (o GRPCRouteSpecRulesArrayOutput) ToGRPCRouteSpecRulesArrayOutput() GRPCRouteSpecRulesArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesArrayOutput) ToGRPCRouteSpecRulesArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRules {
		return vs[0].([]GRPCRouteSpecRules)[vs[1].(int)]
	}).(GRPCRouteSpecRulesOutput)
}

// GRPCBackendRef defines how a GRPCRoute forwards a gRPC request.
//
// Note that when a namespace different than the local namespace is specified, a
// ReferenceGrant object is required in the referent namespace to allow that
// namespace's owner to accept the reference. See the ReferenceGrant
// documentation for details.
//
// <gateway:experimental:description>
//
// When the BackendRef points to a Kubernetes Service, implementations SHOULD
// honor the appProtocol field if it is set for the target Service Port.
//
// Implementations supporting appProtocol SHOULD recognize the Kubernetes
// Standard Application Protocols defined in KEP-3726.
//
// If a Service appProtocol isn't specified, an implementation MAY infer the
// backend protocol through its own means. Implementations MAY infer the
// protocol from the Route type referring to the backend Service.
//
// If a Route is not able to send traffic to the backend using the specified
// protocol then the backend is considered invalid. Implementations MUST set the
// "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.
//
// </gateway:experimental:description>
type GRPCRouteSpecRulesBackendRefs struct {
	// Filters defined at this level MUST be executed if and only if the
	// request is being forwarded to the backend defined here.
	//
	// Support: Implementation-specific (For broader support of filters, use the
	// Filters field in GRPCRouteRule.)
	Filters []GRPCRouteSpecRulesBackendRefsFilters `pulumi:"filters"`
	// Group is the group of the referent. For example, "gateway.networking.k8s.io".
	// When unspecified or empty string, core API group is inferred.
	Group *string `pulumi:"group"`
	// Kind is the Kubernetes resource kind of the referent. For example
	// "Service".
	//
	// Defaults to "Service" when not specified.
	//
	// ExternalName services can refer to CNAME DNS records that may live
	// outside of the cluster and as such are difficult to reason about in
	// terms of conformance. They also may not be safe to forward to (see
	// CVE-2021-25740 for more information). Implementations SHOULD NOT
	// support ExternalName Services.
	//
	// Support: Core (Services with a type other than ExternalName)
	//
	// Support: Implementation-specific (Services with type ExternalName)
	Kind *string `pulumi:"kind"`
	// Name is the name of the referent.
	Name string `pulumi:"name"`
	// Namespace is the namespace of the backend. When unspecified, the local
	// namespace is inferred.
	//
	// Note that when a namespace different than the local namespace is specified,
	// a ReferenceGrant object is required in the referent namespace to allow that
	// namespace's owner to accept the reference. See the ReferenceGrant
	// documentation for details.
	//
	// Support: Core
	Namespace *string `pulumi:"namespace"`
	// Port specifies the destination port number to use for this resource.
	// Port is required when the referent is a Kubernetes Service. In this
	// case, the port number is the service port number, not the target port.
	// For other resources, destination port might be derived from the referent
	// resource or this field.
	Port *int `pulumi:"port"`
	// Weight specifies the proportion of requests forwarded to the referenced
	// backend. This is computed as weight/(sum of all weights in this
	// BackendRefs list). For non-zero values, there may be some epsilon from
	// the exact proportion defined here depending on the precision an
	// implementation supports. Weight is not a percentage and the sum of
	// weights does not need to equal 100.
	//
	// If only one backend is specified and it has a weight greater than 0, 100%
	// of the traffic is forwarded to that backend. If weight is set to 0, no
	// traffic should be forwarded for this entry. If unspecified, weight
	// defaults to 1.
	//
	// Support for this field varies based on the context where used.
	Weight *int `pulumi:"weight"`
}

// Defaults sets the appropriate defaults for GRPCRouteSpecRulesBackendRefs
func (val *GRPCRouteSpecRulesBackendRefs) Defaults() *GRPCRouteSpecRulesBackendRefs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Group == nil {
		group_ := ""
		tmp.Group = &group_
	}
	if tmp.Kind == nil {
		kind_ := "Service"
		tmp.Kind = &kind_
	}
	if tmp.Weight == nil {
		weight_ := 1
		tmp.Weight = &weight_
	}
	return &tmp
}

// GRPCRouteSpecRulesBackendRefsInput is an input type that accepts GRPCRouteSpecRulesBackendRefsArgs and GRPCRouteSpecRulesBackendRefsOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsInput` via:
//
//	GRPCRouteSpecRulesBackendRefsArgs{...}
type GRPCRouteSpecRulesBackendRefsInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsOutput() GRPCRouteSpecRulesBackendRefsOutput
	ToGRPCRouteSpecRulesBackendRefsOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsOutput
}

// GRPCBackendRef defines how a GRPCRoute forwards a gRPC request.
//
// Note that when a namespace different than the local namespace is specified, a
// ReferenceGrant object is required in the referent namespace to allow that
// namespace's owner to accept the reference. See the ReferenceGrant
// documentation for details.
//
// <gateway:experimental:description>
//
// When the BackendRef points to a Kubernetes Service, implementations SHOULD
// honor the appProtocol field if it is set for the target Service Port.
//
// Implementations supporting appProtocol SHOULD recognize the Kubernetes
// Standard Application Protocols defined in KEP-3726.
//
// If a Service appProtocol isn't specified, an implementation MAY infer the
// backend protocol through its own means. Implementations MAY infer the
// protocol from the Route type referring to the backend Service.
//
// If a Route is not able to send traffic to the backend using the specified
// protocol then the backend is considered invalid. Implementations MUST set the
// "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.
//
// </gateway:experimental:description>
type GRPCRouteSpecRulesBackendRefsArgs struct {
	// Filters defined at this level MUST be executed if and only if the
	// request is being forwarded to the backend defined here.
	//
	// Support: Implementation-specific (For broader support of filters, use the
	// Filters field in GRPCRouteRule.)
	Filters GRPCRouteSpecRulesBackendRefsFiltersArrayInput `pulumi:"filters"`
	// Group is the group of the referent. For example, "gateway.networking.k8s.io".
	// When unspecified or empty string, core API group is inferred.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind is the Kubernetes resource kind of the referent. For example
	// "Service".
	//
	// Defaults to "Service" when not specified.
	//
	// ExternalName services can refer to CNAME DNS records that may live
	// outside of the cluster and as such are difficult to reason about in
	// terms of conformance. They also may not be safe to forward to (see
	// CVE-2021-25740 for more information). Implementations SHOULD NOT
	// support ExternalName Services.
	//
	// Support: Core (Services with a type other than ExternalName)
	//
	// Support: Implementation-specific (Services with type ExternalName)
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of the referent.
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace is the namespace of the backend. When unspecified, the local
	// namespace is inferred.
	//
	// Note that when a namespace different than the local namespace is specified,
	// a ReferenceGrant object is required in the referent namespace to allow that
	// namespace's owner to accept the reference. See the ReferenceGrant
	// documentation for details.
	//
	// Support: Core
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Port specifies the destination port number to use for this resource.
	// Port is required when the referent is a Kubernetes Service. In this
	// case, the port number is the service port number, not the target port.
	// For other resources, destination port might be derived from the referent
	// resource or this field.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Weight specifies the proportion of requests forwarded to the referenced
	// backend. This is computed as weight/(sum of all weights in this
	// BackendRefs list). For non-zero values, there may be some epsilon from
	// the exact proportion defined here depending on the precision an
	// implementation supports. Weight is not a percentage and the sum of
	// weights does not need to equal 100.
	//
	// If only one backend is specified and it has a weight greater than 0, 100%
	// of the traffic is forwarded to that backend. If weight is set to 0, no
	// traffic should be forwarded for this entry. If unspecified, weight
	// defaults to 1.
	//
	// Support for this field varies based on the context where used.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

// Defaults sets the appropriate defaults for GRPCRouteSpecRulesBackendRefsArgs
func (val *GRPCRouteSpecRulesBackendRefsArgs) Defaults() *GRPCRouteSpecRulesBackendRefsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Group == nil {
		tmp.Group = pulumi.StringPtr("")
	}
	if tmp.Kind == nil {
		tmp.Kind = pulumi.StringPtr("Service")
	}
	if tmp.Weight == nil {
		tmp.Weight = pulumi.IntPtr(1)
	}
	return &tmp
}
func (GRPCRouteSpecRulesBackendRefsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefs)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsArgs) ToGRPCRouteSpecRulesBackendRefsOutput() GRPCRouteSpecRulesBackendRefsOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsArgs) ToGRPCRouteSpecRulesBackendRefsOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsOutput)
}

// GRPCRouteSpecRulesBackendRefsArrayInput is an input type that accepts GRPCRouteSpecRulesBackendRefsArray and GRPCRouteSpecRulesBackendRefsArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsArrayInput` via:
//
//	GRPCRouteSpecRulesBackendRefsArray{ GRPCRouteSpecRulesBackendRefsArgs{...} }
type GRPCRouteSpecRulesBackendRefsArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsArrayOutput() GRPCRouteSpecRulesBackendRefsArrayOutput
	ToGRPCRouteSpecRulesBackendRefsArrayOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsArrayOutput
}

type GRPCRouteSpecRulesBackendRefsArray []GRPCRouteSpecRulesBackendRefsInput

func (GRPCRouteSpecRulesBackendRefsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefs)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsArray) ToGRPCRouteSpecRulesBackendRefsArrayOutput() GRPCRouteSpecRulesBackendRefsArrayOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsArray) ToGRPCRouteSpecRulesBackendRefsArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsArrayOutput)
}

// GRPCBackendRef defines how a GRPCRoute forwards a gRPC request.
//
// Note that when a namespace different than the local namespace is specified, a
// ReferenceGrant object is required in the referent namespace to allow that
// namespace's owner to accept the reference. See the ReferenceGrant
// documentation for details.
//
// <gateway:experimental:description>
//
// When the BackendRef points to a Kubernetes Service, implementations SHOULD
// honor the appProtocol field if it is set for the target Service Port.
//
// Implementations supporting appProtocol SHOULD recognize the Kubernetes
// Standard Application Protocols defined in KEP-3726.
//
// If a Service appProtocol isn't specified, an implementation MAY infer the
// backend protocol through its own means. Implementations MAY infer the
// protocol from the Route type referring to the backend Service.
//
// If a Route is not able to send traffic to the backend using the specified
// protocol then the backend is considered invalid. Implementations MUST set the
// "ResolvedRefs" condition to "False" with the "UnsupportedProtocol" reason.
//
// </gateway:experimental:description>
type GRPCRouteSpecRulesBackendRefsOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefs)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsOutput) ToGRPCRouteSpecRulesBackendRefsOutput() GRPCRouteSpecRulesBackendRefsOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsOutput) ToGRPCRouteSpecRulesBackendRefsOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsOutput {
	return o
}

// Filters defined at this level MUST be executed if and only if the
// request is being forwarded to the backend defined here.
//
// Support: Implementation-specific (For broader support of filters, use the
// Filters field in GRPCRouteRule.)
func (o GRPCRouteSpecRulesBackendRefsOutput) Filters() GRPCRouteSpecRulesBackendRefsFiltersArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefs) []GRPCRouteSpecRulesBackendRefsFilters { return v.Filters }).(GRPCRouteSpecRulesBackendRefsFiltersArrayOutput)
}

// Group is the group of the referent. For example, "gateway.networking.k8s.io".
// When unspecified or empty string, core API group is inferred.
func (o GRPCRouteSpecRulesBackendRefsOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefs) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind is the Kubernetes resource kind of the referent. For example
// "Service".
//
// Defaults to "Service" when not specified.
//
// ExternalName services can refer to CNAME DNS records that may live
// outside of the cluster and as such are difficult to reason about in
// terms of conformance. They also may not be safe to forward to (see
// CVE-2021-25740 for more information). Implementations SHOULD NOT
// support ExternalName Services.
//
// Support: Core (Services with a type other than ExternalName)
//
// Support: Implementation-specific (Services with type ExternalName)
func (o GRPCRouteSpecRulesBackendRefsOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefs) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
func (o GRPCRouteSpecRulesBackendRefsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefs) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace is the namespace of the backend. When unspecified, the local
// namespace is inferred.
//
// Note that when a namespace different than the local namespace is specified,
// a ReferenceGrant object is required in the referent namespace to allow that
// namespace's owner to accept the reference. See the ReferenceGrant
// documentation for details.
//
// Support: Core
func (o GRPCRouteSpecRulesBackendRefsOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefs) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Port specifies the destination port number to use for this resource.
// Port is required when the referent is a Kubernetes Service. In this
// case, the port number is the service port number, not the target port.
// For other resources, destination port might be derived from the referent
// resource or this field.
func (o GRPCRouteSpecRulesBackendRefsOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefs) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Weight specifies the proportion of requests forwarded to the referenced
// backend. This is computed as weight/(sum of all weights in this
// BackendRefs list). For non-zero values, there may be some epsilon from
// the exact proportion defined here depending on the precision an
// implementation supports. Weight is not a percentage and the sum of
// weights does not need to equal 100.
//
// If only one backend is specified and it has a weight greater than 0, 100%
// of the traffic is forwarded to that backend. If weight is set to 0, no
// traffic should be forwarded for this entry. If unspecified, weight
// defaults to 1.
//
// Support for this field varies based on the context where used.
func (o GRPCRouteSpecRulesBackendRefsOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefs) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type GRPCRouteSpecRulesBackendRefsArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefs)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsArrayOutput) ToGRPCRouteSpecRulesBackendRefsArrayOutput() GRPCRouteSpecRulesBackendRefsArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsArrayOutput) ToGRPCRouteSpecRulesBackendRefsArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesBackendRefsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesBackendRefs {
		return vs[0].([]GRPCRouteSpecRulesBackendRefs)[vs[1].(int)]
	}).(GRPCRouteSpecRulesBackendRefsOutput)
}

// GRPCRouteFilter defines processing steps that must be completed during the
// request or response lifecycle. GRPCRouteFilters are meant as an extension
// point to express processing that may be done in Gateway implementations. Some
// examples include request or response modification, implementing
// authentication strategies, rate-limiting, and traffic shaping. API
// guarantee/conformance is defined based on the type of the filter.
type GRPCRouteSpecRulesBackendRefsFilters struct {
	// ExtensionRef is an optional, implementation-specific extension to the
	// "filter" behavior.  For example, resource "myroutefilter" in group
	// "networking.example.net"). ExtensionRef MUST NOT be used for core and
	// extended filters.
	//
	// Support: Implementation-specific
	//
	// This filter can be used multiple times within the same rule.
	ExtensionRef *GRPCRouteSpecRulesBackendRefsFiltersExtensionRef `pulumi:"extensionRef"`
	// RequestHeaderModifier defines a schema for a filter that modifies request
	// headers.
	//
	// Support: Core
	RequestHeaderModifier *GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier `pulumi:"requestHeaderModifier"`
	// RequestMirror defines a schema for a filter that mirrors requests.
	// Requests are sent to the specified destination, but responses from
	// that destination are ignored.
	//
	// This filter can be used multiple times within the same rule. Note that
	// not all implementations will be able to support mirroring to multiple
	// backends.
	//
	// Support: Extended
	RequestMirror *GRPCRouteSpecRulesBackendRefsFiltersRequestMirror `pulumi:"requestMirror"`
	// ResponseHeaderModifier defines a schema for a filter that modifies response
	// headers.
	//
	// Support: Extended
	ResponseHeaderModifier *GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier `pulumi:"responseHeaderModifier"`
	// Type identifies the type of filter to apply. As with other API fields,
	// types are classified into three conformance levels:
	//
	// - Core: Filter types and their corresponding configuration defined by
	// "Support: Core" in this package, e.g. "RequestHeaderModifier". All
	// implementations supporting GRPCRoute MUST support core filters.
	//
	// - Extended: Filter types and their corresponding configuration defined by
	// "Support: Extended" in this package, e.g. "RequestMirror". Implementers
	// are encouraged to support extended filters.
	//
	// - Implementation-specific: Filters that are defined and supported by specific vendors.
	// In the future, filters showing convergence in behavior across multiple
	// implementations will be considered for inclusion in extended or core
	// conformance levels. Filter-specific configuration for such filters
	// is specified using the ExtensionRef field. `Type` MUST be set to
	// "ExtensionRef" for custom filters.
	//
	// Implementers are encouraged to define custom implementation types to
	// extend the core API with implementation-specific behavior.
	//
	// If a reference to a custom filter type cannot be resolved, the filter
	// MUST NOT be skipped. Instead, requests that would have been processed by
	// that filter MUST receive a HTTP error response.
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for GRPCRouteSpecRulesBackendRefsFilters
func (val *GRPCRouteSpecRulesBackendRefsFilters) Defaults() *GRPCRouteSpecRulesBackendRefsFilters {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.RequestMirror = tmp.RequestMirror.Defaults()

	return &tmp
}

// GRPCRouteSpecRulesBackendRefsFiltersInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersArgs and GRPCRouteSpecRulesBackendRefsFiltersOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersArgs{...}
type GRPCRouteSpecRulesBackendRefsFiltersInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersOutput() GRPCRouteSpecRulesBackendRefsFiltersOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersOutput
}

// GRPCRouteFilter defines processing steps that must be completed during the
// request or response lifecycle. GRPCRouteFilters are meant as an extension
// point to express processing that may be done in Gateway implementations. Some
// examples include request or response modification, implementing
// authentication strategies, rate-limiting, and traffic shaping. API
// guarantee/conformance is defined based on the type of the filter.
type GRPCRouteSpecRulesBackendRefsFiltersArgs struct {
	// ExtensionRef is an optional, implementation-specific extension to the
	// "filter" behavior.  For example, resource "myroutefilter" in group
	// "networking.example.net"). ExtensionRef MUST NOT be used for core and
	// extended filters.
	//
	// Support: Implementation-specific
	//
	// This filter can be used multiple times within the same rule.
	ExtensionRef GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrInput `pulumi:"extensionRef"`
	// RequestHeaderModifier defines a schema for a filter that modifies request
	// headers.
	//
	// Support: Core
	RequestHeaderModifier GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrInput `pulumi:"requestHeaderModifier"`
	// RequestMirror defines a schema for a filter that mirrors requests.
	// Requests are sent to the specified destination, but responses from
	// that destination are ignored.
	//
	// This filter can be used multiple times within the same rule. Note that
	// not all implementations will be able to support mirroring to multiple
	// backends.
	//
	// Support: Extended
	RequestMirror GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrInput `pulumi:"requestMirror"`
	// ResponseHeaderModifier defines a schema for a filter that modifies response
	// headers.
	//
	// Support: Extended
	ResponseHeaderModifier GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrInput `pulumi:"responseHeaderModifier"`
	// Type identifies the type of filter to apply. As with other API fields,
	// types are classified into three conformance levels:
	//
	// - Core: Filter types and their corresponding configuration defined by
	// "Support: Core" in this package, e.g. "RequestHeaderModifier". All
	// implementations supporting GRPCRoute MUST support core filters.
	//
	// - Extended: Filter types and their corresponding configuration defined by
	// "Support: Extended" in this package, e.g. "RequestMirror". Implementers
	// are encouraged to support extended filters.
	//
	// - Implementation-specific: Filters that are defined and supported by specific vendors.
	// In the future, filters showing convergence in behavior across multiple
	// implementations will be considered for inclusion in extended or core
	// conformance levels. Filter-specific configuration for such filters
	// is specified using the ExtensionRef field. `Type` MUST be set to
	// "ExtensionRef" for custom filters.
	//
	// Implementers are encouraged to define custom implementation types to
	// extend the core API with implementation-specific behavior.
	//
	// If a reference to a custom filter type cannot be resolved, the filter
	// MUST NOT be skipped. Instead, requests that would have been processed by
	// that filter MUST receive a HTTP error response.
	Type pulumi.StringInput `pulumi:"type"`
}

// Defaults sets the appropriate defaults for GRPCRouteSpecRulesBackendRefsFiltersArgs
func (val *GRPCRouteSpecRulesBackendRefsFiltersArgs) Defaults() *GRPCRouteSpecRulesBackendRefsFiltersArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (GRPCRouteSpecRulesBackendRefsFiltersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFilters)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersArgs) ToGRPCRouteSpecRulesBackendRefsFiltersOutput() GRPCRouteSpecRulesBackendRefsFiltersOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersArgs) ToGRPCRouteSpecRulesBackendRefsFiltersOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersOutput)
}

// GRPCRouteSpecRulesBackendRefsFiltersArrayInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersArray and GRPCRouteSpecRulesBackendRefsFiltersArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersArrayInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersArray{ GRPCRouteSpecRulesBackendRefsFiltersArgs{...} }
type GRPCRouteSpecRulesBackendRefsFiltersArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersArrayOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersArrayOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersArrayOutput
}

type GRPCRouteSpecRulesBackendRefsFiltersArray []GRPCRouteSpecRulesBackendRefsFiltersInput

func (GRPCRouteSpecRulesBackendRefsFiltersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsFilters)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersArray) ToGRPCRouteSpecRulesBackendRefsFiltersArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersArrayOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersArray) ToGRPCRouteSpecRulesBackendRefsFiltersArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersArrayOutput)
}

// GRPCRouteFilter defines processing steps that must be completed during the
// request or response lifecycle. GRPCRouteFilters are meant as an extension
// point to express processing that may be done in Gateway implementations. Some
// examples include request or response modification, implementing
// authentication strategies, rate-limiting, and traffic shaping. API
// guarantee/conformance is defined based on the type of the filter.
type GRPCRouteSpecRulesBackendRefsFiltersOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFilters)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersOutput) ToGRPCRouteSpecRulesBackendRefsFiltersOutput() GRPCRouteSpecRulesBackendRefsFiltersOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersOutput) ToGRPCRouteSpecRulesBackendRefsFiltersOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersOutput {
	return o
}

// ExtensionRef is an optional, implementation-specific extension to the
// "filter" behavior.  For example, resource "myroutefilter" in group
// "networking.example.net"). ExtensionRef MUST NOT be used for core and
// extended filters.
//
// Support: Implementation-specific
//
// This filter can be used multiple times within the same rule.
func (o GRPCRouteSpecRulesBackendRefsFiltersOutput) ExtensionRef() GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFilters) *GRPCRouteSpecRulesBackendRefsFiltersExtensionRef {
		return v.ExtensionRef
	}).(GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput)
}

// RequestHeaderModifier defines a schema for a filter that modifies request
// headers.
//
// Support: Core
func (o GRPCRouteSpecRulesBackendRefsFiltersOutput) RequestHeaderModifier() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFilters) *GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier {
		return v.RequestHeaderModifier
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput)
}

// RequestMirror defines a schema for a filter that mirrors requests.
// Requests are sent to the specified destination, but responses from
// that destination are ignored.
//
// This filter can be used multiple times within the same rule. Note that
// not all implementations will be able to support mirroring to multiple
// backends.
//
// Support: Extended
func (o GRPCRouteSpecRulesBackendRefsFiltersOutput) RequestMirror() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFilters) *GRPCRouteSpecRulesBackendRefsFiltersRequestMirror {
		return v.RequestMirror
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput)
}

// ResponseHeaderModifier defines a schema for a filter that modifies response
// headers.
//
// Support: Extended
func (o GRPCRouteSpecRulesBackendRefsFiltersOutput) ResponseHeaderModifier() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFilters) *GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier {
		return v.ResponseHeaderModifier
	}).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput)
}

// Type identifies the type of filter to apply. As with other API fields,
// types are classified into three conformance levels:
//
// - Core: Filter types and their corresponding configuration defined by
// "Support: Core" in this package, e.g. "RequestHeaderModifier". All
// implementations supporting GRPCRoute MUST support core filters.
//
// - Extended: Filter types and their corresponding configuration defined by
// "Support: Extended" in this package, e.g. "RequestMirror". Implementers
// are encouraged to support extended filters.
//
// - Implementation-specific: Filters that are defined and supported by specific vendors.
// In the future, filters showing convergence in behavior across multiple
// implementations will be considered for inclusion in extended or core
// conformance levels. Filter-specific configuration for such filters
// is specified using the ExtensionRef field. `Type` MUST be set to
// "ExtensionRef" for custom filters.
//
// Implementers are encouraged to define custom implementation types to
// extend the core API with implementation-specific behavior.
//
// If a reference to a custom filter type cannot be resolved, the filter
// MUST NOT be skipped. Instead, requests that would have been processed by
// that filter MUST receive a HTTP error response.
func (o GRPCRouteSpecRulesBackendRefsFiltersOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFilters) string { return v.Type }).(pulumi.StringOutput)
}

type GRPCRouteSpecRulesBackendRefsFiltersArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsFilters)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersArrayOutput) ToGRPCRouteSpecRulesBackendRefsFiltersArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersArrayOutput) ToGRPCRouteSpecRulesBackendRefsFiltersArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesBackendRefsFiltersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesBackendRefsFilters {
		return vs[0].([]GRPCRouteSpecRulesBackendRefsFilters)[vs[1].(int)]
	}).(GRPCRouteSpecRulesBackendRefsFiltersOutput)
}

// ExtensionRef is an optional, implementation-specific extension to the
// "filter" behavior.  For example, resource "myroutefilter" in group
// "networking.example.net"). ExtensionRef MUST NOT be used for core and
// extended filters.
//
// Support: Implementation-specific
//
// This filter can be used multiple times within the same rule.
type GRPCRouteSpecRulesBackendRefsFiltersExtensionRef struct {
	// Group is the group of the referent. For example, "gateway.networking.k8s.io".
	// When unspecified or empty string, core API group is inferred.
	Group string `pulumi:"group"`
	// Kind is kind of the referent. For example "HTTPRoute" or "Service".
	Kind string `pulumi:"kind"`
	// Name is the name of the referent.
	Name string `pulumi:"name"`
}

// GRPCRouteSpecRulesBackendRefsFiltersExtensionRefInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs and GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersExtensionRefInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs{...}
type GRPCRouteSpecRulesBackendRefsFiltersExtensionRefInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput() GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput
}

// ExtensionRef is an optional, implementation-specific extension to the
// "filter" behavior.  For example, resource "myroutefilter" in group
// "networking.example.net"). ExtensionRef MUST NOT be used for core and
// extended filters.
//
// Support: Implementation-specific
//
// This filter can be used multiple times within the same rule.
type GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs struct {
	// Group is the group of the referent. For example, "gateway.networking.k8s.io".
	// When unspecified or empty string, core API group is inferred.
	Group pulumi.StringInput `pulumi:"group"`
	// Kind is kind of the referent. For example "HTTPRoute" or "Service".
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name is the name of the referent.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersExtensionRef)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput() GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput)
}

func (i GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput).ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs, GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtr and GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrInput` via:
//
//	        GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput
}

type grpcrouteSpecRulesBackendRefsFiltersExtensionRefPtrType GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs

func GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtr(v *GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs) GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrInput {
	return (*grpcrouteSpecRulesBackendRefsFiltersExtensionRefPtrType)(v)
}

func (*grpcrouteSpecRulesBackendRefsFiltersExtensionRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesBackendRefsFiltersExtensionRef)(nil)).Elem()
}

func (i *grpcrouteSpecRulesBackendRefsFiltersExtensionRefPtrType) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesBackendRefsFiltersExtensionRefPtrType) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput)
}

// ExtensionRef is an optional, implementation-specific extension to the
// "filter" behavior.  For example, resource "myroutefilter" in group
// "networking.example.net"). ExtensionRef MUST NOT be used for core and
// extended filters.
//
// Support: Implementation-specific
//
// This filter can be used multiple times within the same rule.
type GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersExtensionRef)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput() GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput {
	return o.ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesBackendRefsFiltersExtensionRef) *GRPCRouteSpecRulesBackendRefsFiltersExtensionRef {
		return &v
	}).(GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput)
}

// Group is the group of the referent. For example, "gateway.networking.k8s.io".
// When unspecified or empty string, core API group is inferred.
func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersExtensionRef) string { return v.Group }).(pulumi.StringOutput)
}

// Kind is kind of the referent. For example "HTTPRoute" or "Service".
func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersExtensionRef) string { return v.Kind }).(pulumi.StringOutput)
}

// Name is the name of the referent.
func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersExtensionRef) string { return v.Name }).(pulumi.StringOutput)
}

type GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesBackendRefsFiltersExtensionRef)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput) ToGRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput) Elem() GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersExtensionRef) GRPCRouteSpecRulesBackendRefsFiltersExtensionRef {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesBackendRefsFiltersExtensionRef
		return ret
	}).(GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput)
}

// Group is the group of the referent. For example, "gateway.networking.k8s.io".
// When unspecified or empty string, core API group is inferred.
func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersExtensionRef) *string {
		if v == nil {
			return nil
		}
		return &v.Group
	}).(pulumi.StringPtrOutput)
}

// Kind is kind of the referent. For example "HTTPRoute" or "Service".
func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersExtensionRef) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
func (o GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersExtensionRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// RequestHeaderModifier defines a schema for a filter that modifies request
// headers.
//
// Support: Core
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier struct {
	// Add adds the given header(s) (name, value) to the request
	// before the action. It appends to any existing values associated
	// with the header name.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   add:
	//   - name: "my-header"
	//     value: "bar,baz"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: foo,bar,baz
	Add []GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd `pulumi:"add"`
	// Remove the given header(s) from the HTTP request before the action. The
	// value of Remove is a list of HTTP header names. Note that the header
	// names are case-insensitive (see
	// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header1: foo
	//   my-header2: bar
	//   my-header3: baz
	//
	// Config:
	//   remove: ["my-header1", "my-header3"]
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header2: bar
	Remove []string `pulumi:"remove"`
	// Set overwrites the request with the given header (name, value)
	// before the action.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   set:
	//   - name: "my-header"
	//     value: "bar"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: bar
	Set []GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet `pulumi:"set"`
}

// GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs and GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs{...}
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput
}

// RequestHeaderModifier defines a schema for a filter that modifies request
// headers.
//
// Support: Core
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs struct {
	// Add adds the given header(s) (name, value) to the request
	// before the action. It appends to any existing values associated
	// with the header name.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   add:
	//   - name: "my-header"
	//     value: "bar,baz"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: foo,bar,baz
	Add GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayInput `pulumi:"add"`
	// Remove the given header(s) from the HTTP request before the action. The
	// value of Remove is a list of HTTP header names. Note that the header
	// names are case-insensitive (see
	// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header1: foo
	//   my-header2: bar
	//   my-header3: baz
	//
	// Config:
	//   remove: ["my-header1", "my-header3"]
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header2: bar
	Remove pulumi.StringArrayInput `pulumi:"remove"`
	// Set overwrites the request with the given header (name, value)
	// before the action.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   set:
	//   - name: "my-header"
	//     value: "bar"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: bar
	Set GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayInput `pulumi:"set"`
}

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput)
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput).ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs, GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtr and GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrInput` via:
//
//	        GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput
}

type grpcrouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrType GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs

func GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtr(v *GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrInput {
	return (*grpcrouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrType)(v)
}

func (*grpcrouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier)(nil)).Elem()
}

func (i *grpcrouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrType) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrType) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput)
}

// RequestHeaderModifier defines a schema for a filter that modifies request
// headers.
//
// Support: Core
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput {
	return o.ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier) *GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier {
		return &v
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput)
}

// Add adds the given header(s) (name, value) to the request
// before the action. It appends to any existing values associated
// with the header name.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	add:
//	- name: "my-header"
//	  value: "bar,baz"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: foo,bar,baz
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput) Add() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier) []GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd {
		return v.Add
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput)
}

// Remove the given header(s) from the HTTP request before the action. The
// value of Remove is a list of HTTP header names. Note that the header
// names are case-insensitive (see
// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header1: foo
//	my-header2: bar
//	my-header3: baz
//
// Config:
//
//	remove: ["my-header1", "my-header3"]
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header2: bar
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier) []string { return v.Remove }).(pulumi.StringArrayOutput)
}

// Set overwrites the request with the given header (name, value)
// before the action.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	set:
//	- name: "my-header"
//	  value: "bar"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: bar
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput) Set() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier) []GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet {
		return v.Set
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput)
}

type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput) Elem() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier
		return ret
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput)
}

// Add adds the given header(s) (name, value) to the request
// before the action. It appends to any existing values associated
// with the header name.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	add:
//	- name: "my-header"
//	  value: "bar,baz"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: foo,bar,baz
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput) Add() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier) []GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd {
		if v == nil {
			return nil
		}
		return v.Add
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput)
}

// Remove the given header(s) from the HTTP request before the action. The
// value of Remove is a list of HTTP header names. Note that the header
// names are case-insensitive (see
// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header1: foo
//	my-header2: bar
//	my-header3: baz
//
// Config:
//
//	remove: ["my-header1", "my-header3"]
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header2: bar
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier) []string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringArrayOutput)
}

// Set overwrites the request with the given header (name, value)
// before the action.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	set:
//	- name: "my-header"
//	  value: "bar"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: bar
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput) Set() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifier) []GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet {
		if v == nil {
			return nil
		}
		return v.Set
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name string `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value string `pulumi:"value"`
}

// GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArgs and GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArgs{...}
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArgs struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name pulumi.StringInput `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput)
}

// GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArray and GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArray{ GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArgs{...} }
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput
}

type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArray []GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddInput

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArray) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArray) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput {
	return o
}

// Name is the name of the HTTP Header to be matched. Name matching MUST be
// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
//
// If multiple entries specify equivalent header names, the first entry with
// an equivalent name MUST be considered for a match. Subsequent entries
// with an equivalent header name MUST be ignored. Due to the
// case-insensitivity of header names, "foo" and "Foo" are considered
// equivalent.
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd) string { return v.Name }).(pulumi.StringOutput)
}

// Value is the value of HTTP Header to be matched.
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd) string { return v.Value }).(pulumi.StringOutput)
}

type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd {
		return vs[0].([]GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAdd)[vs[1].(int)]
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name string `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value string `pulumi:"value"`
}

// GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArgs and GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArgs{...}
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArgs struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name pulumi.StringInput `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput)
}

// GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArray and GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArray{ GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArgs{...} }
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput
}

type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArray []GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetInput

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArray) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArray) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput {
	return o
}

// Name is the name of the HTTP Header to be matched. Name matching MUST be
// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
//
// If multiple entries specify equivalent header names, the first entry with
// an equivalent name MUST be considered for a match. Subsequent entries
// with an equivalent header name MUST be ignored. Due to the
// case-insensitivity of header names, "foo" and "Foo" are considered
// equivalent.
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet) string { return v.Name }).(pulumi.StringOutput)
}

// Value is the value of HTTP Header to be matched.
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet) string { return v.Value }).(pulumi.StringOutput)
}

type GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet {
		return vs[0].([]GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSet)[vs[1].(int)]
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput)
}

// RequestMirror defines a schema for a filter that mirrors requests.
// Requests are sent to the specified destination, but responses from
// that destination are ignored.
//
// This filter can be used multiple times within the same rule. Note that
// not all implementations will be able to support mirroring to multiple
// backends.
//
// Support: Extended
type GRPCRouteSpecRulesBackendRefsFiltersRequestMirror struct {
	// BackendRef references a resource where mirrored requests are sent.
	//
	// Mirrored requests must be sent only to a single destination endpoint
	// within this BackendRef, irrespective of how many endpoints are present
	// within this BackendRef.
	//
	// If the referent cannot be found, this BackendRef is invalid and must be
	// dropped from the Gateway. The controller must ensure the "ResolvedRefs"
	// condition on the Route status is set to `status: False` and not configure
	// this backend in the underlying implementation.
	//
	// If there is a cross-namespace reference to an *existing* object
	// that is not allowed by a ReferenceGrant, the controller must ensure the
	// "ResolvedRefs"  condition on the Route is set to `status: False`,
	// with the "RefNotPermitted" reason and not configure this backend in the
	// underlying implementation.
	//
	// In either error case, the Message of the `ResolvedRefs` Condition
	// should be used to provide more detail about the problem.
	//
	// Support: Extended for Kubernetes Service
	//
	// Support: Implementation-specific for any other resource
	BackendRef GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef `pulumi:"backendRef"`
}

// Defaults sets the appropriate defaults for GRPCRouteSpecRulesBackendRefsFiltersRequestMirror
func (val *GRPCRouteSpecRulesBackendRefsFiltersRequestMirror) Defaults() *GRPCRouteSpecRulesBackendRefsFiltersRequestMirror {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.BackendRef = *tmp.BackendRef.Defaults()

	return &tmp
}

// GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs and GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs{...}
type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput
}

// RequestMirror defines a schema for a filter that mirrors requests.
// Requests are sent to the specified destination, but responses from
// that destination are ignored.
//
// This filter can be used multiple times within the same rule. Note that
// not all implementations will be able to support mirroring to multiple
// backends.
//
// Support: Extended
type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs struct {
	// BackendRef references a resource where mirrored requests are sent.
	//
	// Mirrored requests must be sent only to a single destination endpoint
	// within this BackendRef, irrespective of how many endpoints are present
	// within this BackendRef.
	//
	// If the referent cannot be found, this BackendRef is invalid and must be
	// dropped from the Gateway. The controller must ensure the "ResolvedRefs"
	// condition on the Route status is set to `status: False` and not configure
	// this backend in the underlying implementation.
	//
	// If there is a cross-namespace reference to an *existing* object
	// that is not allowed by a ReferenceGrant, the controller must ensure the
	// "ResolvedRefs"  condition on the Route is set to `status: False`,
	// with the "RefNotPermitted" reason and not configure this backend in the
	// underlying implementation.
	//
	// In either error case, the Message of the `ResolvedRefs` Condition
	// should be used to provide more detail about the problem.
	//
	// Support: Extended for Kubernetes Service
	//
	// Support: Implementation-specific for any other resource
	BackendRef GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefInput `pulumi:"backendRef"`
}

// Defaults sets the appropriate defaults for GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs
func (val *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs) Defaults() *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestMirror)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput)
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput).ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs, GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtr and GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrInput` via:
//
//	        GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput
}

type grpcrouteSpecRulesBackendRefsFiltersRequestMirrorPtrType GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs

func GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtr(v *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrInput {
	return (*grpcrouteSpecRulesBackendRefsFiltersRequestMirrorPtrType)(v)
}

func (*grpcrouteSpecRulesBackendRefsFiltersRequestMirrorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesBackendRefsFiltersRequestMirror)(nil)).Elem()
}

func (i *grpcrouteSpecRulesBackendRefsFiltersRequestMirrorPtrType) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesBackendRefsFiltersRequestMirrorPtrType) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput)
}

// RequestMirror defines a schema for a filter that mirrors requests.
// Requests are sent to the specified destination, but responses from
// that destination are ignored.
//
// This filter can be used multiple times within the same rule. Note that
// not all implementations will be able to support mirroring to multiple
// backends.
//
// Support: Extended
type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestMirror)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput {
	return o.ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesBackendRefsFiltersRequestMirror) *GRPCRouteSpecRulesBackendRefsFiltersRequestMirror {
		return &v
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput)
}

// BackendRef references a resource where mirrored requests are sent.
//
// Mirrored requests must be sent only to a single destination endpoint
// within this BackendRef, irrespective of how many endpoints are present
// within this BackendRef.
//
// If the referent cannot be found, this BackendRef is invalid and must be
// dropped from the Gateway. The controller must ensure the "ResolvedRefs"
// condition on the Route status is set to `status: False` and not configure
// this backend in the underlying implementation.
//
// If there is a cross-namespace reference to an *existing* object
// that is not allowed by a ReferenceGrant, the controller must ensure the
// "ResolvedRefs"  condition on the Route is set to `status: False`,
// with the "RefNotPermitted" reason and not configure this backend in the
// underlying implementation.
//
// In either error case, the Message of the `ResolvedRefs` Condition
// should be used to provide more detail about the problem.
//
// Support: Extended for Kubernetes Service
//
// Support: Implementation-specific for any other resource
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput) BackendRef() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestMirror) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef {
		return v.BackendRef
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput)
}

type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesBackendRefsFiltersRequestMirror)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput) Elem() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestMirror) GRPCRouteSpecRulesBackendRefsFiltersRequestMirror {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesBackendRefsFiltersRequestMirror
		return ret
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput)
}

// BackendRef references a resource where mirrored requests are sent.
//
// Mirrored requests must be sent only to a single destination endpoint
// within this BackendRef, irrespective of how many endpoints are present
// within this BackendRef.
//
// If the referent cannot be found, this BackendRef is invalid and must be
// dropped from the Gateway. The controller must ensure the "ResolvedRefs"
// condition on the Route status is set to `status: False` and not configure
// this backend in the underlying implementation.
//
// If there is a cross-namespace reference to an *existing* object
// that is not allowed by a ReferenceGrant, the controller must ensure the
// "ResolvedRefs"  condition on the Route is set to `status: False`,
// with the "RefNotPermitted" reason and not configure this backend in the
// underlying implementation.
//
// In either error case, the Message of the `ResolvedRefs` Condition
// should be used to provide more detail about the problem.
//
// Support: Extended for Kubernetes Service
//
// Support: Implementation-specific for any other resource
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput) BackendRef() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestMirror) *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef {
		if v == nil {
			return nil
		}
		return &v.BackendRef
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput)
}

// BackendRef references a resource where mirrored requests are sent.
//
// Mirrored requests must be sent only to a single destination endpoint
// within this BackendRef, irrespective of how many endpoints are present
// within this BackendRef.
//
// If the referent cannot be found, this BackendRef is invalid and must be
// dropped from the Gateway. The controller must ensure the "ResolvedRefs"
// condition on the Route status is set to `status: False` and not configure
// this backend in the underlying implementation.
//
// If there is a cross-namespace reference to an *existing* object
// that is not allowed by a ReferenceGrant, the controller must ensure the
// "ResolvedRefs"  condition on the Route is set to `status: False`,
// with the "RefNotPermitted" reason and not configure this backend in the
// underlying implementation.
//
// In either error case, the Message of the `ResolvedRefs` Condition
// should be used to provide more detail about the problem.
//
// Support: Extended for Kubernetes Service
//
// Support: Implementation-specific for any other resource
type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef struct {
	// Group is the group of the referent. For example, "gateway.networking.k8s.io".
	// When unspecified or empty string, core API group is inferred.
	Group *string `pulumi:"group"`
	// Kind is the Kubernetes resource kind of the referent. For example
	// "Service".
	//
	// Defaults to "Service" when not specified.
	//
	// ExternalName services can refer to CNAME DNS records that may live
	// outside of the cluster and as such are difficult to reason about in
	// terms of conformance. They also may not be safe to forward to (see
	// CVE-2021-25740 for more information). Implementations SHOULD NOT
	// support ExternalName Services.
	//
	// Support: Core (Services with a type other than ExternalName)
	//
	// Support: Implementation-specific (Services with type ExternalName)
	Kind *string `pulumi:"kind"`
	// Name is the name of the referent.
	Name string `pulumi:"name"`
	// Namespace is the namespace of the backend. When unspecified, the local
	// namespace is inferred.
	//
	// Note that when a namespace different than the local namespace is specified,
	// a ReferenceGrant object is required in the referent namespace to allow that
	// namespace's owner to accept the reference. See the ReferenceGrant
	// documentation for details.
	//
	// Support: Core
	Namespace *string `pulumi:"namespace"`
	// Port specifies the destination port number to use for this resource.
	// Port is required when the referent is a Kubernetes Service. In this
	// case, the port number is the service port number, not the target port.
	// For other resources, destination port might be derived from the referent
	// resource or this field.
	Port *int `pulumi:"port"`
}

// Defaults sets the appropriate defaults for GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef
func (val *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef) Defaults() *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Group == nil {
		group_ := ""
		tmp.Group = &group_
	}
	if tmp.Kind == nil {
		kind_ := "Service"
		tmp.Kind = &kind_
	}
	return &tmp
}

// GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs and GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs{...}
type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput
}

// BackendRef references a resource where mirrored requests are sent.
//
// Mirrored requests must be sent only to a single destination endpoint
// within this BackendRef, irrespective of how many endpoints are present
// within this BackendRef.
//
// If the referent cannot be found, this BackendRef is invalid and must be
// dropped from the Gateway. The controller must ensure the "ResolvedRefs"
// condition on the Route status is set to `status: False` and not configure
// this backend in the underlying implementation.
//
// If there is a cross-namespace reference to an *existing* object
// that is not allowed by a ReferenceGrant, the controller must ensure the
// "ResolvedRefs"  condition on the Route is set to `status: False`,
// with the "RefNotPermitted" reason and not configure this backend in the
// underlying implementation.
//
// In either error case, the Message of the `ResolvedRefs` Condition
// should be used to provide more detail about the problem.
//
// Support: Extended for Kubernetes Service
//
// Support: Implementation-specific for any other resource
type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs struct {
	// Group is the group of the referent. For example, "gateway.networking.k8s.io".
	// When unspecified or empty string, core API group is inferred.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind is the Kubernetes resource kind of the referent. For example
	// "Service".
	//
	// Defaults to "Service" when not specified.
	//
	// ExternalName services can refer to CNAME DNS records that may live
	// outside of the cluster and as such are difficult to reason about in
	// terms of conformance. They also may not be safe to forward to (see
	// CVE-2021-25740 for more information). Implementations SHOULD NOT
	// support ExternalName Services.
	//
	// Support: Core (Services with a type other than ExternalName)
	//
	// Support: Implementation-specific (Services with type ExternalName)
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of the referent.
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace is the namespace of the backend. When unspecified, the local
	// namespace is inferred.
	//
	// Note that when a namespace different than the local namespace is specified,
	// a ReferenceGrant object is required in the referent namespace to allow that
	// namespace's owner to accept the reference. See the ReferenceGrant
	// documentation for details.
	//
	// Support: Core
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Port specifies the destination port number to use for this resource.
	// Port is required when the referent is a Kubernetes Service. In this
	// case, the port number is the service port number, not the target port.
	// For other resources, destination port might be derived from the referent
	// resource or this field.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

// Defaults sets the appropriate defaults for GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs
func (val *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs) Defaults() *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Group == nil {
		tmp.Group = pulumi.StringPtr("")
	}
	if tmp.Kind == nil {
		tmp.Kind = pulumi.StringPtr("Service")
	}
	return &tmp
}
func (GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput)
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput).ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs, GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtr and GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrInput` via:
//
//	        GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput
}

type grpcrouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrType GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs

func GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtr(v *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrInput {
	return (*grpcrouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrType)(v)
}

func (*grpcrouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef)(nil)).Elem()
}

func (i *grpcrouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrType) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrType) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput)
}

// BackendRef references a resource where mirrored requests are sent.
//
// Mirrored requests must be sent only to a single destination endpoint
// within this BackendRef, irrespective of how many endpoints are present
// within this BackendRef.
//
// If the referent cannot be found, this BackendRef is invalid and must be
// dropped from the Gateway. The controller must ensure the "ResolvedRefs"
// condition on the Route status is set to `status: False` and not configure
// this backend in the underlying implementation.
//
// If there is a cross-namespace reference to an *existing* object
// that is not allowed by a ReferenceGrant, the controller must ensure the
// "ResolvedRefs"  condition on the Route is set to `status: False`,
// with the "RefNotPermitted" reason and not configure this backend in the
// underlying implementation.
//
// In either error case, the Message of the `ResolvedRefs` Condition
// should be used to provide more detail about the problem.
//
// Support: Extended for Kubernetes Service
//
// Support: Implementation-specific for any other resource
type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput {
	return o.ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef) *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef {
		return &v
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput)
}

// Group is the group of the referent. For example, "gateway.networking.k8s.io".
// When unspecified or empty string, core API group is inferred.
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind is the Kubernetes resource kind of the referent. For example
// "Service".
//
// Defaults to "Service" when not specified.
//
// ExternalName services can refer to CNAME DNS records that may live
// outside of the cluster and as such are difficult to reason about in
// terms of conformance. They also may not be safe to forward to (see
// CVE-2021-25740 for more information). Implementations SHOULD NOT
// support ExternalName Services.
//
// Support: Core (Services with a type other than ExternalName)
//
// Support: Implementation-specific (Services with type ExternalName)
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace is the namespace of the backend. When unspecified, the local
// namespace is inferred.
//
// Note that when a namespace different than the local namespace is specified,
// a ReferenceGrant object is required in the referent namespace to allow that
// namespace's owner to accept the reference. See the ReferenceGrant
// documentation for details.
//
// Support: Core
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Port specifies the destination port number to use for this resource.
// Port is required when the referent is a Kubernetes Service. In this
// case, the port number is the service port number, not the target port.
// For other resources, destination port might be derived from the referent
// resource or this field.
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput) ToGRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput) Elem() GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef) GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef
		return ret
	}).(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput)
}

// Group is the group of the referent. For example, "gateway.networking.k8s.io".
// When unspecified or empty string, core API group is inferred.
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Kind is the Kubernetes resource kind of the referent. For example
// "Service".
//
// Defaults to "Service" when not specified.
//
// ExternalName services can refer to CNAME DNS records that may live
// outside of the cluster and as such are difficult to reason about in
// terms of conformance. They also may not be safe to forward to (see
// CVE-2021-25740 for more information). Implementations SHOULD NOT
// support ExternalName Services.
//
// Support: Core (Services with a type other than ExternalName)
//
// Support: Implementation-specific (Services with type ExternalName)
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the backend. When unspecified, the local
// namespace is inferred.
//
// Note that when a namespace different than the local namespace is specified,
// a ReferenceGrant object is required in the referent namespace to allow that
// namespace's owner to accept the reference. See the ReferenceGrant
// documentation for details.
//
// Support: Core
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Port specifies the destination port number to use for this resource.
// Port is required when the referent is a Kubernetes Service. In this
// case, the port number is the service port number, not the target port.
// For other resources, destination port might be derived from the referent
// resource or this field.
func (o GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRef) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// ResponseHeaderModifier defines a schema for a filter that modifies response
// headers.
//
// Support: Extended
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier struct {
	// Add adds the given header(s) (name, value) to the request
	// before the action. It appends to any existing values associated
	// with the header name.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   add:
	//   - name: "my-header"
	//     value: "bar,baz"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: foo,bar,baz
	Add []GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd `pulumi:"add"`
	// Remove the given header(s) from the HTTP request before the action. The
	// value of Remove is a list of HTTP header names. Note that the header
	// names are case-insensitive (see
	// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header1: foo
	//   my-header2: bar
	//   my-header3: baz
	//
	// Config:
	//   remove: ["my-header1", "my-header3"]
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header2: bar
	Remove []string `pulumi:"remove"`
	// Set overwrites the request with the given header (name, value)
	// before the action.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   set:
	//   - name: "my-header"
	//     value: "bar"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: bar
	Set []GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet `pulumi:"set"`
}

// GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs and GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs{...}
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput
}

// ResponseHeaderModifier defines a schema for a filter that modifies response
// headers.
//
// Support: Extended
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs struct {
	// Add adds the given header(s) (name, value) to the request
	// before the action. It appends to any existing values associated
	// with the header name.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   add:
	//   - name: "my-header"
	//     value: "bar,baz"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: foo,bar,baz
	Add GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayInput `pulumi:"add"`
	// Remove the given header(s) from the HTTP request before the action. The
	// value of Remove is a list of HTTP header names. Note that the header
	// names are case-insensitive (see
	// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header1: foo
	//   my-header2: bar
	//   my-header3: baz
	//
	// Config:
	//   remove: ["my-header1", "my-header3"]
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header2: bar
	Remove pulumi.StringArrayInput `pulumi:"remove"`
	// Set overwrites the request with the given header (name, value)
	// before the action.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   set:
	//   - name: "my-header"
	//     value: "bar"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: bar
	Set GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayInput `pulumi:"set"`
}

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput)
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput).ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs, GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtr and GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrInput` via:
//
//	        GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput
}

type grpcrouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrType GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs

func GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtr(v *GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrInput {
	return (*grpcrouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrType)(v)
}

func (*grpcrouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier)(nil)).Elem()
}

func (i *grpcrouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrType) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrType) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput)
}

// ResponseHeaderModifier defines a schema for a filter that modifies response
// headers.
//
// Support: Extended
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput {
	return o.ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier) *GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier {
		return &v
	}).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput)
}

// Add adds the given header(s) (name, value) to the request
// before the action. It appends to any existing values associated
// with the header name.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	add:
//	- name: "my-header"
//	  value: "bar,baz"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: foo,bar,baz
func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput) Add() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier) []GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd {
		return v.Add
	}).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput)
}

// Remove the given header(s) from the HTTP request before the action. The
// value of Remove is a list of HTTP header names. Note that the header
// names are case-insensitive (see
// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header1: foo
//	my-header2: bar
//	my-header3: baz
//
// Config:
//
//	remove: ["my-header1", "my-header3"]
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header2: bar
func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier) []string { return v.Remove }).(pulumi.StringArrayOutput)
}

// Set overwrites the request with the given header (name, value)
// before the action.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	set:
//	- name: "my-header"
//	  value: "bar"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: bar
func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput) Set() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier) []GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet {
		return v.Set
	}).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput)
}

type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput) Elem() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier
		return ret
	}).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput)
}

// Add adds the given header(s) (name, value) to the request
// before the action. It appends to any existing values associated
// with the header name.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	add:
//	- name: "my-header"
//	  value: "bar,baz"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: foo,bar,baz
func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput) Add() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier) []GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd {
		if v == nil {
			return nil
		}
		return v.Add
	}).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput)
}

// Remove the given header(s) from the HTTP request before the action. The
// value of Remove is a list of HTTP header names. Note that the header
// names are case-insensitive (see
// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header1: foo
//	my-header2: bar
//	my-header3: baz
//
// Config:
//
//	remove: ["my-header1", "my-header3"]
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header2: bar
func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier) []string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringArrayOutput)
}

// Set overwrites the request with the given header (name, value)
// before the action.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	set:
//	- name: "my-header"
//	  value: "bar"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: bar
func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput) Set() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifier) []GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet {
		if v == nil {
			return nil
		}
		return v.Set
	}).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name string `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value string `pulumi:"value"`
}

// GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArgs and GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArgs{...}
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArgs struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name pulumi.StringInput `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArgs) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArgs) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput)
}

// GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArray and GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArray{ GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArgs{...} }
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput
}

type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArray []GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddInput

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArray) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArray) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput {
	return o
}

// Name is the name of the HTTP Header to be matched. Name matching MUST be
// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
//
// If multiple entries specify equivalent header names, the first entry with
// an equivalent name MUST be considered for a match. Subsequent entries
// with an equivalent header name MUST be ignored. Due to the
// case-insensitivity of header names, "foo" and "Foo" are considered
// equivalent.
func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd) string { return v.Name }).(pulumi.StringOutput)
}

// Value is the value of HTTP Header to be matched.
func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd) string { return v.Value }).(pulumi.StringOutput)
}

type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd {
		return vs[0].([]GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAdd)[vs[1].(int)]
	}).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name string `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value string `pulumi:"value"`
}

// GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArgs and GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArgs{...}
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArgs struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name pulumi.StringInput `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArgs) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArgs) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput)
}

// GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayInput is an input type that accepts GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArray and GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayInput` via:
//
//	GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArray{ GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArgs{...} }
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput
	ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutputWithContext(context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput
}

type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArray []GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetInput

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet)(nil)).Elem()
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArray) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput {
	return i.ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArray) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput {
	return o
}

// Name is the name of the HTTP Header to be matched. Name matching MUST be
// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
//
// If multiple entries specify equivalent header names, the first entry with
// an equivalent name MUST be considered for a match. Subsequent entries
// with an equivalent header name MUST be ignored. Due to the
// case-insensitivity of header names, "foo" and "Foo" are considered
// equivalent.
func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet) string { return v.Name }).(pulumi.StringOutput)
}

// Value is the value of HTTP Header to be matched.
func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet) string { return v.Value }).(pulumi.StringOutput)
}

type GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet)(nil)).Elem()
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput() GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput) ToGRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet {
		return vs[0].([]GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSet)[vs[1].(int)]
	}).(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput)
}

// GRPCRouteFilter defines processing steps that must be completed during the
// request or response lifecycle. GRPCRouteFilters are meant as an extension
// point to express processing that may be done in Gateway implementations. Some
// examples include request or response modification, implementing
// authentication strategies, rate-limiting, and traffic shaping. API
// guarantee/conformance is defined based on the type of the filter.
type GRPCRouteSpecRulesFilters struct {
	// ExtensionRef is an optional, implementation-specific extension to the
	// "filter" behavior.  For example, resource "myroutefilter" in group
	// "networking.example.net"). ExtensionRef MUST NOT be used for core and
	// extended filters.
	//
	// Support: Implementation-specific
	//
	// This filter can be used multiple times within the same rule.
	ExtensionRef *GRPCRouteSpecRulesFiltersExtensionRef `pulumi:"extensionRef"`
	// RequestHeaderModifier defines a schema for a filter that modifies request
	// headers.
	//
	// Support: Core
	RequestHeaderModifier *GRPCRouteSpecRulesFiltersRequestHeaderModifier `pulumi:"requestHeaderModifier"`
	// RequestMirror defines a schema for a filter that mirrors requests.
	// Requests are sent to the specified destination, but responses from
	// that destination are ignored.
	//
	// This filter can be used multiple times within the same rule. Note that
	// not all implementations will be able to support mirroring to multiple
	// backends.
	//
	// Support: Extended
	RequestMirror *GRPCRouteSpecRulesFiltersRequestMirror `pulumi:"requestMirror"`
	// ResponseHeaderModifier defines a schema for a filter that modifies response
	// headers.
	//
	// Support: Extended
	ResponseHeaderModifier *GRPCRouteSpecRulesFiltersResponseHeaderModifier `pulumi:"responseHeaderModifier"`
	// Type identifies the type of filter to apply. As with other API fields,
	// types are classified into three conformance levels:
	//
	// - Core: Filter types and their corresponding configuration defined by
	// "Support: Core" in this package, e.g. "RequestHeaderModifier". All
	// implementations supporting GRPCRoute MUST support core filters.
	//
	// - Extended: Filter types and their corresponding configuration defined by
	// "Support: Extended" in this package, e.g. "RequestMirror". Implementers
	// are encouraged to support extended filters.
	//
	// - Implementation-specific: Filters that are defined and supported by specific vendors.
	// In the future, filters showing convergence in behavior across multiple
	// implementations will be considered for inclusion in extended or core
	// conformance levels. Filter-specific configuration for such filters
	// is specified using the ExtensionRef field. `Type` MUST be set to
	// "ExtensionRef" for custom filters.
	//
	// Implementers are encouraged to define custom implementation types to
	// extend the core API with implementation-specific behavior.
	//
	// If a reference to a custom filter type cannot be resolved, the filter
	// MUST NOT be skipped. Instead, requests that would have been processed by
	// that filter MUST receive a HTTP error response.
	Type string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for GRPCRouteSpecRulesFilters
func (val *GRPCRouteSpecRulesFilters) Defaults() *GRPCRouteSpecRulesFilters {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.RequestMirror = tmp.RequestMirror.Defaults()

	return &tmp
}

// GRPCRouteSpecRulesFiltersInput is an input type that accepts GRPCRouteSpecRulesFiltersArgs and GRPCRouteSpecRulesFiltersOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersInput` via:
//
//	GRPCRouteSpecRulesFiltersArgs{...}
type GRPCRouteSpecRulesFiltersInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersOutput() GRPCRouteSpecRulesFiltersOutput
	ToGRPCRouteSpecRulesFiltersOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersOutput
}

// GRPCRouteFilter defines processing steps that must be completed during the
// request or response lifecycle. GRPCRouteFilters are meant as an extension
// point to express processing that may be done in Gateway implementations. Some
// examples include request or response modification, implementing
// authentication strategies, rate-limiting, and traffic shaping. API
// guarantee/conformance is defined based on the type of the filter.
type GRPCRouteSpecRulesFiltersArgs struct {
	// ExtensionRef is an optional, implementation-specific extension to the
	// "filter" behavior.  For example, resource "myroutefilter" in group
	// "networking.example.net"). ExtensionRef MUST NOT be used for core and
	// extended filters.
	//
	// Support: Implementation-specific
	//
	// This filter can be used multiple times within the same rule.
	ExtensionRef GRPCRouteSpecRulesFiltersExtensionRefPtrInput `pulumi:"extensionRef"`
	// RequestHeaderModifier defines a schema for a filter that modifies request
	// headers.
	//
	// Support: Core
	RequestHeaderModifier GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrInput `pulumi:"requestHeaderModifier"`
	// RequestMirror defines a schema for a filter that mirrors requests.
	// Requests are sent to the specified destination, but responses from
	// that destination are ignored.
	//
	// This filter can be used multiple times within the same rule. Note that
	// not all implementations will be able to support mirroring to multiple
	// backends.
	//
	// Support: Extended
	RequestMirror GRPCRouteSpecRulesFiltersRequestMirrorPtrInput `pulumi:"requestMirror"`
	// ResponseHeaderModifier defines a schema for a filter that modifies response
	// headers.
	//
	// Support: Extended
	ResponseHeaderModifier GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrInput `pulumi:"responseHeaderModifier"`
	// Type identifies the type of filter to apply. As with other API fields,
	// types are classified into three conformance levels:
	//
	// - Core: Filter types and their corresponding configuration defined by
	// "Support: Core" in this package, e.g. "RequestHeaderModifier". All
	// implementations supporting GRPCRoute MUST support core filters.
	//
	// - Extended: Filter types and their corresponding configuration defined by
	// "Support: Extended" in this package, e.g. "RequestMirror". Implementers
	// are encouraged to support extended filters.
	//
	// - Implementation-specific: Filters that are defined and supported by specific vendors.
	// In the future, filters showing convergence in behavior across multiple
	// implementations will be considered for inclusion in extended or core
	// conformance levels. Filter-specific configuration for such filters
	// is specified using the ExtensionRef field. `Type` MUST be set to
	// "ExtensionRef" for custom filters.
	//
	// Implementers are encouraged to define custom implementation types to
	// extend the core API with implementation-specific behavior.
	//
	// If a reference to a custom filter type cannot be resolved, the filter
	// MUST NOT be skipped. Instead, requests that would have been processed by
	// that filter MUST receive a HTTP error response.
	Type pulumi.StringInput `pulumi:"type"`
}

// Defaults sets the appropriate defaults for GRPCRouteSpecRulesFiltersArgs
func (val *GRPCRouteSpecRulesFiltersArgs) Defaults() *GRPCRouteSpecRulesFiltersArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (GRPCRouteSpecRulesFiltersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFilters)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersArgs) ToGRPCRouteSpecRulesFiltersOutput() GRPCRouteSpecRulesFiltersOutput {
	return i.ToGRPCRouteSpecRulesFiltersOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersArgs) ToGRPCRouteSpecRulesFiltersOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersOutput)
}

// GRPCRouteSpecRulesFiltersArrayInput is an input type that accepts GRPCRouteSpecRulesFiltersArray and GRPCRouteSpecRulesFiltersArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersArrayInput` via:
//
//	GRPCRouteSpecRulesFiltersArray{ GRPCRouteSpecRulesFiltersArgs{...} }
type GRPCRouteSpecRulesFiltersArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersArrayOutput() GRPCRouteSpecRulesFiltersArrayOutput
	ToGRPCRouteSpecRulesFiltersArrayOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersArrayOutput
}

type GRPCRouteSpecRulesFiltersArray []GRPCRouteSpecRulesFiltersInput

func (GRPCRouteSpecRulesFiltersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesFilters)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersArray) ToGRPCRouteSpecRulesFiltersArrayOutput() GRPCRouteSpecRulesFiltersArrayOutput {
	return i.ToGRPCRouteSpecRulesFiltersArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersArray) ToGRPCRouteSpecRulesFiltersArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersArrayOutput)
}

// GRPCRouteFilter defines processing steps that must be completed during the
// request or response lifecycle. GRPCRouteFilters are meant as an extension
// point to express processing that may be done in Gateway implementations. Some
// examples include request or response modification, implementing
// authentication strategies, rate-limiting, and traffic shaping. API
// guarantee/conformance is defined based on the type of the filter.
type GRPCRouteSpecRulesFiltersOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFilters)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersOutput) ToGRPCRouteSpecRulesFiltersOutput() GRPCRouteSpecRulesFiltersOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersOutput) ToGRPCRouteSpecRulesFiltersOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersOutput {
	return o
}

// ExtensionRef is an optional, implementation-specific extension to the
// "filter" behavior.  For example, resource "myroutefilter" in group
// "networking.example.net"). ExtensionRef MUST NOT be used for core and
// extended filters.
//
// Support: Implementation-specific
//
// This filter can be used multiple times within the same rule.
func (o GRPCRouteSpecRulesFiltersOutput) ExtensionRef() GRPCRouteSpecRulesFiltersExtensionRefPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFilters) *GRPCRouteSpecRulesFiltersExtensionRef { return v.ExtensionRef }).(GRPCRouteSpecRulesFiltersExtensionRefPtrOutput)
}

// RequestHeaderModifier defines a schema for a filter that modifies request
// headers.
//
// Support: Core
func (o GRPCRouteSpecRulesFiltersOutput) RequestHeaderModifier() GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFilters) *GRPCRouteSpecRulesFiltersRequestHeaderModifier {
		return v.RequestHeaderModifier
	}).(GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput)
}

// RequestMirror defines a schema for a filter that mirrors requests.
// Requests are sent to the specified destination, but responses from
// that destination are ignored.
//
// This filter can be used multiple times within the same rule. Note that
// not all implementations will be able to support mirroring to multiple
// backends.
//
// Support: Extended
func (o GRPCRouteSpecRulesFiltersOutput) RequestMirror() GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFilters) *GRPCRouteSpecRulesFiltersRequestMirror { return v.RequestMirror }).(GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput)
}

// ResponseHeaderModifier defines a schema for a filter that modifies response
// headers.
//
// Support: Extended
func (o GRPCRouteSpecRulesFiltersOutput) ResponseHeaderModifier() GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFilters) *GRPCRouteSpecRulesFiltersResponseHeaderModifier {
		return v.ResponseHeaderModifier
	}).(GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput)
}

// Type identifies the type of filter to apply. As with other API fields,
// types are classified into three conformance levels:
//
// - Core: Filter types and their corresponding configuration defined by
// "Support: Core" in this package, e.g. "RequestHeaderModifier". All
// implementations supporting GRPCRoute MUST support core filters.
//
// - Extended: Filter types and their corresponding configuration defined by
// "Support: Extended" in this package, e.g. "RequestMirror". Implementers
// are encouraged to support extended filters.
//
// - Implementation-specific: Filters that are defined and supported by specific vendors.
// In the future, filters showing convergence in behavior across multiple
// implementations will be considered for inclusion in extended or core
// conformance levels. Filter-specific configuration for such filters
// is specified using the ExtensionRef field. `Type` MUST be set to
// "ExtensionRef" for custom filters.
//
// Implementers are encouraged to define custom implementation types to
// extend the core API with implementation-specific behavior.
//
// If a reference to a custom filter type cannot be resolved, the filter
// MUST NOT be skipped. Instead, requests that would have been processed by
// that filter MUST receive a HTTP error response.
func (o GRPCRouteSpecRulesFiltersOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFilters) string { return v.Type }).(pulumi.StringOutput)
}

type GRPCRouteSpecRulesFiltersArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesFilters)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersArrayOutput) ToGRPCRouteSpecRulesFiltersArrayOutput() GRPCRouteSpecRulesFiltersArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersArrayOutput) ToGRPCRouteSpecRulesFiltersArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesFiltersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesFilters {
		return vs[0].([]GRPCRouteSpecRulesFilters)[vs[1].(int)]
	}).(GRPCRouteSpecRulesFiltersOutput)
}

// ExtensionRef is an optional, implementation-specific extension to the
// "filter" behavior.  For example, resource "myroutefilter" in group
// "networking.example.net"). ExtensionRef MUST NOT be used for core and
// extended filters.
//
// Support: Implementation-specific
//
// This filter can be used multiple times within the same rule.
type GRPCRouteSpecRulesFiltersExtensionRef struct {
	// Group is the group of the referent. For example, "gateway.networking.k8s.io".
	// When unspecified or empty string, core API group is inferred.
	Group string `pulumi:"group"`
	// Kind is kind of the referent. For example "HTTPRoute" or "Service".
	Kind string `pulumi:"kind"`
	// Name is the name of the referent.
	Name string `pulumi:"name"`
}

// GRPCRouteSpecRulesFiltersExtensionRefInput is an input type that accepts GRPCRouteSpecRulesFiltersExtensionRefArgs and GRPCRouteSpecRulesFiltersExtensionRefOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersExtensionRefInput` via:
//
//	GRPCRouteSpecRulesFiltersExtensionRefArgs{...}
type GRPCRouteSpecRulesFiltersExtensionRefInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersExtensionRefOutput() GRPCRouteSpecRulesFiltersExtensionRefOutput
	ToGRPCRouteSpecRulesFiltersExtensionRefOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersExtensionRefOutput
}

// ExtensionRef is an optional, implementation-specific extension to the
// "filter" behavior.  For example, resource "myroutefilter" in group
// "networking.example.net"). ExtensionRef MUST NOT be used for core and
// extended filters.
//
// Support: Implementation-specific
//
// This filter can be used multiple times within the same rule.
type GRPCRouteSpecRulesFiltersExtensionRefArgs struct {
	// Group is the group of the referent. For example, "gateway.networking.k8s.io".
	// When unspecified or empty string, core API group is inferred.
	Group pulumi.StringInput `pulumi:"group"`
	// Kind is kind of the referent. For example "HTTPRoute" or "Service".
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name is the name of the referent.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GRPCRouteSpecRulesFiltersExtensionRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersExtensionRef)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersExtensionRefArgs) ToGRPCRouteSpecRulesFiltersExtensionRefOutput() GRPCRouteSpecRulesFiltersExtensionRefOutput {
	return i.ToGRPCRouteSpecRulesFiltersExtensionRefOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersExtensionRefArgs) ToGRPCRouteSpecRulesFiltersExtensionRefOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersExtensionRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersExtensionRefOutput)
}

func (i GRPCRouteSpecRulesFiltersExtensionRefArgs) ToGRPCRouteSpecRulesFiltersExtensionRefPtrOutput() GRPCRouteSpecRulesFiltersExtensionRefPtrOutput {
	return i.ToGRPCRouteSpecRulesFiltersExtensionRefPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersExtensionRefArgs) ToGRPCRouteSpecRulesFiltersExtensionRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersExtensionRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersExtensionRefOutput).ToGRPCRouteSpecRulesFiltersExtensionRefPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesFiltersExtensionRefPtrInput is an input type that accepts GRPCRouteSpecRulesFiltersExtensionRefArgs, GRPCRouteSpecRulesFiltersExtensionRefPtr and GRPCRouteSpecRulesFiltersExtensionRefPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersExtensionRefPtrInput` via:
//
//	        GRPCRouteSpecRulesFiltersExtensionRefArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesFiltersExtensionRefPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersExtensionRefPtrOutput() GRPCRouteSpecRulesFiltersExtensionRefPtrOutput
	ToGRPCRouteSpecRulesFiltersExtensionRefPtrOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersExtensionRefPtrOutput
}

type grpcrouteSpecRulesFiltersExtensionRefPtrType GRPCRouteSpecRulesFiltersExtensionRefArgs

func GRPCRouteSpecRulesFiltersExtensionRefPtr(v *GRPCRouteSpecRulesFiltersExtensionRefArgs) GRPCRouteSpecRulesFiltersExtensionRefPtrInput {
	return (*grpcrouteSpecRulesFiltersExtensionRefPtrType)(v)
}

func (*grpcrouteSpecRulesFiltersExtensionRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesFiltersExtensionRef)(nil)).Elem()
}

func (i *grpcrouteSpecRulesFiltersExtensionRefPtrType) ToGRPCRouteSpecRulesFiltersExtensionRefPtrOutput() GRPCRouteSpecRulesFiltersExtensionRefPtrOutput {
	return i.ToGRPCRouteSpecRulesFiltersExtensionRefPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesFiltersExtensionRefPtrType) ToGRPCRouteSpecRulesFiltersExtensionRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersExtensionRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersExtensionRefPtrOutput)
}

// ExtensionRef is an optional, implementation-specific extension to the
// "filter" behavior.  For example, resource "myroutefilter" in group
// "networking.example.net"). ExtensionRef MUST NOT be used for core and
// extended filters.
//
// Support: Implementation-specific
//
// This filter can be used multiple times within the same rule.
type GRPCRouteSpecRulesFiltersExtensionRefOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersExtensionRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersExtensionRef)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersExtensionRefOutput) ToGRPCRouteSpecRulesFiltersExtensionRefOutput() GRPCRouteSpecRulesFiltersExtensionRefOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersExtensionRefOutput) ToGRPCRouteSpecRulesFiltersExtensionRefOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersExtensionRefOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersExtensionRefOutput) ToGRPCRouteSpecRulesFiltersExtensionRefPtrOutput() GRPCRouteSpecRulesFiltersExtensionRefPtrOutput {
	return o.ToGRPCRouteSpecRulesFiltersExtensionRefPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesFiltersExtensionRefOutput) ToGRPCRouteSpecRulesFiltersExtensionRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersExtensionRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesFiltersExtensionRef) *GRPCRouteSpecRulesFiltersExtensionRef {
		return &v
	}).(GRPCRouteSpecRulesFiltersExtensionRefPtrOutput)
}

// Group is the group of the referent. For example, "gateway.networking.k8s.io".
// When unspecified or empty string, core API group is inferred.
func (o GRPCRouteSpecRulesFiltersExtensionRefOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersExtensionRef) string { return v.Group }).(pulumi.StringOutput)
}

// Kind is kind of the referent. For example "HTTPRoute" or "Service".
func (o GRPCRouteSpecRulesFiltersExtensionRefOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersExtensionRef) string { return v.Kind }).(pulumi.StringOutput)
}

// Name is the name of the referent.
func (o GRPCRouteSpecRulesFiltersExtensionRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersExtensionRef) string { return v.Name }).(pulumi.StringOutput)
}

type GRPCRouteSpecRulesFiltersExtensionRefPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersExtensionRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesFiltersExtensionRef)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersExtensionRefPtrOutput) ToGRPCRouteSpecRulesFiltersExtensionRefPtrOutput() GRPCRouteSpecRulesFiltersExtensionRefPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersExtensionRefPtrOutput) ToGRPCRouteSpecRulesFiltersExtensionRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersExtensionRefPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersExtensionRefPtrOutput) Elem() GRPCRouteSpecRulesFiltersExtensionRefOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersExtensionRef) GRPCRouteSpecRulesFiltersExtensionRef {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesFiltersExtensionRef
		return ret
	}).(GRPCRouteSpecRulesFiltersExtensionRefOutput)
}

// Group is the group of the referent. For example, "gateway.networking.k8s.io".
// When unspecified or empty string, core API group is inferred.
func (o GRPCRouteSpecRulesFiltersExtensionRefPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersExtensionRef) *string {
		if v == nil {
			return nil
		}
		return &v.Group
	}).(pulumi.StringPtrOutput)
}

// Kind is kind of the referent. For example "HTTPRoute" or "Service".
func (o GRPCRouteSpecRulesFiltersExtensionRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersExtensionRef) *string {
		if v == nil {
			return nil
		}
		return &v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
func (o GRPCRouteSpecRulesFiltersExtensionRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersExtensionRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// RequestHeaderModifier defines a schema for a filter that modifies request
// headers.
//
// Support: Core
type GRPCRouteSpecRulesFiltersRequestHeaderModifier struct {
	// Add adds the given header(s) (name, value) to the request
	// before the action. It appends to any existing values associated
	// with the header name.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   add:
	//   - name: "my-header"
	//     value: "bar,baz"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: foo,bar,baz
	Add []GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd `pulumi:"add"`
	// Remove the given header(s) from the HTTP request before the action. The
	// value of Remove is a list of HTTP header names. Note that the header
	// names are case-insensitive (see
	// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header1: foo
	//   my-header2: bar
	//   my-header3: baz
	//
	// Config:
	//   remove: ["my-header1", "my-header3"]
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header2: bar
	Remove []string `pulumi:"remove"`
	// Set overwrites the request with the given header (name, value)
	// before the action.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   set:
	//   - name: "my-header"
	//     value: "bar"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: bar
	Set []GRPCRouteSpecRulesFiltersRequestHeaderModifierSet `pulumi:"set"`
}

// GRPCRouteSpecRulesFiltersRequestHeaderModifierInput is an input type that accepts GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs and GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersRequestHeaderModifierInput` via:
//
//	GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs{...}
type GRPCRouteSpecRulesFiltersRequestHeaderModifierInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput
	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput
}

// RequestHeaderModifier defines a schema for a filter that modifies request
// headers.
//
// Support: Core
type GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs struct {
	// Add adds the given header(s) (name, value) to the request
	// before the action. It appends to any existing values associated
	// with the header name.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   add:
	//   - name: "my-header"
	//     value: "bar,baz"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: foo,bar,baz
	Add GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayInput `pulumi:"add"`
	// Remove the given header(s) from the HTTP request before the action. The
	// value of Remove is a list of HTTP header names. Note that the header
	// names are case-insensitive (see
	// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header1: foo
	//   my-header2: bar
	//   my-header3: baz
	//
	// Config:
	//   remove: ["my-header1", "my-header3"]
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header2: bar
	Remove pulumi.StringArrayInput `pulumi:"remove"`
	// Set overwrites the request with the given header (name, value)
	// before the action.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   set:
	//   - name: "my-header"
	//     value: "bar"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: bar
	Set GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayInput `pulumi:"set"`
}

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifier)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestHeaderModifierOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput)
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput).ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrInput is an input type that accepts GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs, GRPCRouteSpecRulesFiltersRequestHeaderModifierPtr and GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrInput` via:
//
//	        GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput
	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput
}

type grpcrouteSpecRulesFiltersRequestHeaderModifierPtrType GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs

func GRPCRouteSpecRulesFiltersRequestHeaderModifierPtr(v *GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs) GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrInput {
	return (*grpcrouteSpecRulesFiltersRequestHeaderModifierPtrType)(v)
}

func (*grpcrouteSpecRulesFiltersRequestHeaderModifierPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesFiltersRequestHeaderModifier)(nil)).Elem()
}

func (i *grpcrouteSpecRulesFiltersRequestHeaderModifierPtrType) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesFiltersRequestHeaderModifierPtrType) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput)
}

// RequestHeaderModifier defines a schema for a filter that modifies request
// headers.
//
// Support: Core
type GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifier)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput {
	return o.ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesFiltersRequestHeaderModifier) *GRPCRouteSpecRulesFiltersRequestHeaderModifier {
		return &v
	}).(GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput)
}

// Add adds the given header(s) (name, value) to the request
// before the action. It appends to any existing values associated
// with the header name.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	add:
//	- name: "my-header"
//	  value: "bar,baz"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: foo,bar,baz
func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput) Add() GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestHeaderModifier) []GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd {
		return v.Add
	}).(GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput)
}

// Remove the given header(s) from the HTTP request before the action. The
// value of Remove is a list of HTTP header names. Note that the header
// names are case-insensitive (see
// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header1: foo
//	my-header2: bar
//	my-header3: baz
//
// Config:
//
//	remove: ["my-header1", "my-header3"]
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header2: bar
func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestHeaderModifier) []string { return v.Remove }).(pulumi.StringArrayOutput)
}

// Set overwrites the request with the given header (name, value)
// before the action.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	set:
//	- name: "my-header"
//	  value: "bar"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: bar
func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput) Set() GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestHeaderModifier) []GRPCRouteSpecRulesFiltersRequestHeaderModifierSet {
		return v.Set
	}).(GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput)
}

type GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesFiltersRequestHeaderModifier)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput) Elem() GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestHeaderModifier) GRPCRouteSpecRulesFiltersRequestHeaderModifier {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesFiltersRequestHeaderModifier
		return ret
	}).(GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput)
}

// Add adds the given header(s) (name, value) to the request
// before the action. It appends to any existing values associated
// with the header name.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	add:
//	- name: "my-header"
//	  value: "bar,baz"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: foo,bar,baz
func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput) Add() GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestHeaderModifier) []GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd {
		if v == nil {
			return nil
		}
		return v.Add
	}).(GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput)
}

// Remove the given header(s) from the HTTP request before the action. The
// value of Remove is a list of HTTP header names. Note that the header
// names are case-insensitive (see
// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header1: foo
//	my-header2: bar
//	my-header3: baz
//
// Config:
//
//	remove: ["my-header1", "my-header3"]
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header2: bar
func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestHeaderModifier) []string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringArrayOutput)
}

// Set overwrites the request with the given header (name, value)
// before the action.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	set:
//	- name: "my-header"
//	  value: "bar"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: bar
func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput) Set() GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestHeaderModifier) []GRPCRouteSpecRulesFiltersRequestHeaderModifierSet {
		if v == nil {
			return nil
		}
		return v.Set
	}).(GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name string `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value string `pulumi:"value"`
}

// GRPCRouteSpecRulesFiltersRequestHeaderModifierAddInput is an input type that accepts GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArgs and GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersRequestHeaderModifierAddInput` via:
//
//	GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArgs{...}
type GRPCRouteSpecRulesFiltersRequestHeaderModifierAddInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput
	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArgs struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name pulumi.StringInput `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArgs) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArgs) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput)
}

// GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayInput is an input type that accepts GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArray and GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayInput` via:
//
//	GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArray{ GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArgs{...} }
type GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput
	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput
}

type GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArray []GRPCRouteSpecRulesFiltersRequestHeaderModifierAddInput

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArray) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArray) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput {
	return o
}

// Name is the name of the HTTP Header to be matched. Name matching MUST be
// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
//
// If multiple entries specify equivalent header names, the first entry with
// an equivalent name MUST be considered for a match. Subsequent entries
// with an equivalent header name MUST be ignored. Due to the
// case-insensitivity of header names, "foo" and "Foo" are considered
// equivalent.
func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd) string { return v.Name }).(pulumi.StringOutput)
}

// Value is the value of HTTP Header to be matched.
func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd) string { return v.Value }).(pulumi.StringOutput)
}

type GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd {
		return vs[0].([]GRPCRouteSpecRulesFiltersRequestHeaderModifierAdd)[vs[1].(int)]
	}).(GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersRequestHeaderModifierSet struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name string `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value string `pulumi:"value"`
}

// GRPCRouteSpecRulesFiltersRequestHeaderModifierSetInput is an input type that accepts GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArgs and GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersRequestHeaderModifierSetInput` via:
//
//	GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArgs{...}
type GRPCRouteSpecRulesFiltersRequestHeaderModifierSetInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput
	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArgs struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name pulumi.StringInput `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierSet)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArgs) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArgs) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput)
}

// GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayInput is an input type that accepts GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArray and GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayInput` via:
//
//	GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArray{ GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArgs{...} }
type GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput
	ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput
}

type GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArray []GRPCRouteSpecRulesFiltersRequestHeaderModifierSetInput

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesFiltersRequestHeaderModifierSet)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArray) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArray) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierSet)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput {
	return o
}

// Name is the name of the HTTP Header to be matched. Name matching MUST be
// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
//
// If multiple entries specify equivalent header names, the first entry with
// an equivalent name MUST be considered for a match. Subsequent entries
// with an equivalent header name MUST be ignored. Due to the
// case-insensitivity of header names, "foo" and "Foo" are considered
// equivalent.
func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestHeaderModifierSet) string { return v.Name }).(pulumi.StringOutput)
}

// Value is the value of HTTP Header to be matched.
func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestHeaderModifierSet) string { return v.Value }).(pulumi.StringOutput)
}

type GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesFiltersRequestHeaderModifierSet)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput() GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput) ToGRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesFiltersRequestHeaderModifierSet {
		return vs[0].([]GRPCRouteSpecRulesFiltersRequestHeaderModifierSet)[vs[1].(int)]
	}).(GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput)
}

// RequestMirror defines a schema for a filter that mirrors requests.
// Requests are sent to the specified destination, but responses from
// that destination are ignored.
//
// This filter can be used multiple times within the same rule. Note that
// not all implementations will be able to support mirroring to multiple
// backends.
//
// Support: Extended
type GRPCRouteSpecRulesFiltersRequestMirror struct {
	// BackendRef references a resource where mirrored requests are sent.
	//
	// Mirrored requests must be sent only to a single destination endpoint
	// within this BackendRef, irrespective of how many endpoints are present
	// within this BackendRef.
	//
	// If the referent cannot be found, this BackendRef is invalid and must be
	// dropped from the Gateway. The controller must ensure the "ResolvedRefs"
	// condition on the Route status is set to `status: False` and not configure
	// this backend in the underlying implementation.
	//
	// If there is a cross-namespace reference to an *existing* object
	// that is not allowed by a ReferenceGrant, the controller must ensure the
	// "ResolvedRefs"  condition on the Route is set to `status: False`,
	// with the "RefNotPermitted" reason and not configure this backend in the
	// underlying implementation.
	//
	// In either error case, the Message of the `ResolvedRefs` Condition
	// should be used to provide more detail about the problem.
	//
	// Support: Extended for Kubernetes Service
	//
	// Support: Implementation-specific for any other resource
	BackendRef GRPCRouteSpecRulesFiltersRequestMirrorBackendRef `pulumi:"backendRef"`
}

// Defaults sets the appropriate defaults for GRPCRouteSpecRulesFiltersRequestMirror
func (val *GRPCRouteSpecRulesFiltersRequestMirror) Defaults() *GRPCRouteSpecRulesFiltersRequestMirror {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.BackendRef = *tmp.BackendRef.Defaults()

	return &tmp
}

// GRPCRouteSpecRulesFiltersRequestMirrorInput is an input type that accepts GRPCRouteSpecRulesFiltersRequestMirrorArgs and GRPCRouteSpecRulesFiltersRequestMirrorOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersRequestMirrorInput` via:
//
//	GRPCRouteSpecRulesFiltersRequestMirrorArgs{...}
type GRPCRouteSpecRulesFiltersRequestMirrorInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersRequestMirrorOutput() GRPCRouteSpecRulesFiltersRequestMirrorOutput
	ToGRPCRouteSpecRulesFiltersRequestMirrorOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersRequestMirrorOutput
}

// RequestMirror defines a schema for a filter that mirrors requests.
// Requests are sent to the specified destination, but responses from
// that destination are ignored.
//
// This filter can be used multiple times within the same rule. Note that
// not all implementations will be able to support mirroring to multiple
// backends.
//
// Support: Extended
type GRPCRouteSpecRulesFiltersRequestMirrorArgs struct {
	// BackendRef references a resource where mirrored requests are sent.
	//
	// Mirrored requests must be sent only to a single destination endpoint
	// within this BackendRef, irrespective of how many endpoints are present
	// within this BackendRef.
	//
	// If the referent cannot be found, this BackendRef is invalid and must be
	// dropped from the Gateway. The controller must ensure the "ResolvedRefs"
	// condition on the Route status is set to `status: False` and not configure
	// this backend in the underlying implementation.
	//
	// If there is a cross-namespace reference to an *existing* object
	// that is not allowed by a ReferenceGrant, the controller must ensure the
	// "ResolvedRefs"  condition on the Route is set to `status: False`,
	// with the "RefNotPermitted" reason and not configure this backend in the
	// underlying implementation.
	//
	// In either error case, the Message of the `ResolvedRefs` Condition
	// should be used to provide more detail about the problem.
	//
	// Support: Extended for Kubernetes Service
	//
	// Support: Implementation-specific for any other resource
	BackendRef GRPCRouteSpecRulesFiltersRequestMirrorBackendRefInput `pulumi:"backendRef"`
}

// Defaults sets the appropriate defaults for GRPCRouteSpecRulesFiltersRequestMirrorArgs
func (val *GRPCRouteSpecRulesFiltersRequestMirrorArgs) Defaults() *GRPCRouteSpecRulesFiltersRequestMirrorArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (GRPCRouteSpecRulesFiltersRequestMirrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestMirror)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersRequestMirrorArgs) ToGRPCRouteSpecRulesFiltersRequestMirrorOutput() GRPCRouteSpecRulesFiltersRequestMirrorOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestMirrorOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersRequestMirrorArgs) ToGRPCRouteSpecRulesFiltersRequestMirrorOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestMirrorOutput)
}

func (i GRPCRouteSpecRulesFiltersRequestMirrorArgs) ToGRPCRouteSpecRulesFiltersRequestMirrorPtrOutput() GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestMirrorPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersRequestMirrorArgs) ToGRPCRouteSpecRulesFiltersRequestMirrorPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestMirrorOutput).ToGRPCRouteSpecRulesFiltersRequestMirrorPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesFiltersRequestMirrorPtrInput is an input type that accepts GRPCRouteSpecRulesFiltersRequestMirrorArgs, GRPCRouteSpecRulesFiltersRequestMirrorPtr and GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersRequestMirrorPtrInput` via:
//
//	        GRPCRouteSpecRulesFiltersRequestMirrorArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesFiltersRequestMirrorPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersRequestMirrorPtrOutput() GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput
	ToGRPCRouteSpecRulesFiltersRequestMirrorPtrOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput
}

type grpcrouteSpecRulesFiltersRequestMirrorPtrType GRPCRouteSpecRulesFiltersRequestMirrorArgs

func GRPCRouteSpecRulesFiltersRequestMirrorPtr(v *GRPCRouteSpecRulesFiltersRequestMirrorArgs) GRPCRouteSpecRulesFiltersRequestMirrorPtrInput {
	return (*grpcrouteSpecRulesFiltersRequestMirrorPtrType)(v)
}

func (*grpcrouteSpecRulesFiltersRequestMirrorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesFiltersRequestMirror)(nil)).Elem()
}

func (i *grpcrouteSpecRulesFiltersRequestMirrorPtrType) ToGRPCRouteSpecRulesFiltersRequestMirrorPtrOutput() GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestMirrorPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesFiltersRequestMirrorPtrType) ToGRPCRouteSpecRulesFiltersRequestMirrorPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput)
}

// RequestMirror defines a schema for a filter that mirrors requests.
// Requests are sent to the specified destination, but responses from
// that destination are ignored.
//
// This filter can be used multiple times within the same rule. Note that
// not all implementations will be able to support mirroring to multiple
// backends.
//
// Support: Extended
type GRPCRouteSpecRulesFiltersRequestMirrorOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersRequestMirrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestMirror)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorOutput() GRPCRouteSpecRulesFiltersRequestMirrorOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorPtrOutput() GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput {
	return o.ToGRPCRouteSpecRulesFiltersRequestMirrorPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesFiltersRequestMirror) *GRPCRouteSpecRulesFiltersRequestMirror {
		return &v
	}).(GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput)
}

// BackendRef references a resource where mirrored requests are sent.
//
// Mirrored requests must be sent only to a single destination endpoint
// within this BackendRef, irrespective of how many endpoints are present
// within this BackendRef.
//
// If the referent cannot be found, this BackendRef is invalid and must be
// dropped from the Gateway. The controller must ensure the "ResolvedRefs"
// condition on the Route status is set to `status: False` and not configure
// this backend in the underlying implementation.
//
// If there is a cross-namespace reference to an *existing* object
// that is not allowed by a ReferenceGrant, the controller must ensure the
// "ResolvedRefs"  condition on the Route is set to `status: False`,
// with the "RefNotPermitted" reason and not configure this backend in the
// underlying implementation.
//
// In either error case, the Message of the `ResolvedRefs` Condition
// should be used to provide more detail about the problem.
//
// Support: Extended for Kubernetes Service
//
// Support: Implementation-specific for any other resource
func (o GRPCRouteSpecRulesFiltersRequestMirrorOutput) BackendRef() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestMirror) GRPCRouteSpecRulesFiltersRequestMirrorBackendRef {
		return v.BackendRef
	}).(GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput)
}

type GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesFiltersRequestMirror)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorPtrOutput() GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput) Elem() GRPCRouteSpecRulesFiltersRequestMirrorOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestMirror) GRPCRouteSpecRulesFiltersRequestMirror {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesFiltersRequestMirror
		return ret
	}).(GRPCRouteSpecRulesFiltersRequestMirrorOutput)
}

// BackendRef references a resource where mirrored requests are sent.
//
// Mirrored requests must be sent only to a single destination endpoint
// within this BackendRef, irrespective of how many endpoints are present
// within this BackendRef.
//
// If the referent cannot be found, this BackendRef is invalid and must be
// dropped from the Gateway. The controller must ensure the "ResolvedRefs"
// condition on the Route status is set to `status: False` and not configure
// this backend in the underlying implementation.
//
// If there is a cross-namespace reference to an *existing* object
// that is not allowed by a ReferenceGrant, the controller must ensure the
// "ResolvedRefs"  condition on the Route is set to `status: False`,
// with the "RefNotPermitted" reason and not configure this backend in the
// underlying implementation.
//
// In either error case, the Message of the `ResolvedRefs` Condition
// should be used to provide more detail about the problem.
//
// Support: Extended for Kubernetes Service
//
// Support: Implementation-specific for any other resource
func (o GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput) BackendRef() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestMirror) *GRPCRouteSpecRulesFiltersRequestMirrorBackendRef {
		if v == nil {
			return nil
		}
		return &v.BackendRef
	}).(GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput)
}

// BackendRef references a resource where mirrored requests are sent.
//
// Mirrored requests must be sent only to a single destination endpoint
// within this BackendRef, irrespective of how many endpoints are present
// within this BackendRef.
//
// If the referent cannot be found, this BackendRef is invalid and must be
// dropped from the Gateway. The controller must ensure the "ResolvedRefs"
// condition on the Route status is set to `status: False` and not configure
// this backend in the underlying implementation.
//
// If there is a cross-namespace reference to an *existing* object
// that is not allowed by a ReferenceGrant, the controller must ensure the
// "ResolvedRefs"  condition on the Route is set to `status: False`,
// with the "RefNotPermitted" reason and not configure this backend in the
// underlying implementation.
//
// In either error case, the Message of the `ResolvedRefs` Condition
// should be used to provide more detail about the problem.
//
// Support: Extended for Kubernetes Service
//
// Support: Implementation-specific for any other resource
type GRPCRouteSpecRulesFiltersRequestMirrorBackendRef struct {
	// Group is the group of the referent. For example, "gateway.networking.k8s.io".
	// When unspecified or empty string, core API group is inferred.
	Group *string `pulumi:"group"`
	// Kind is the Kubernetes resource kind of the referent. For example
	// "Service".
	//
	// Defaults to "Service" when not specified.
	//
	// ExternalName services can refer to CNAME DNS records that may live
	// outside of the cluster and as such are difficult to reason about in
	// terms of conformance. They also may not be safe to forward to (see
	// CVE-2021-25740 for more information). Implementations SHOULD NOT
	// support ExternalName Services.
	//
	// Support: Core (Services with a type other than ExternalName)
	//
	// Support: Implementation-specific (Services with type ExternalName)
	Kind *string `pulumi:"kind"`
	// Name is the name of the referent.
	Name string `pulumi:"name"`
	// Namespace is the namespace of the backend. When unspecified, the local
	// namespace is inferred.
	//
	// Note that when a namespace different than the local namespace is specified,
	// a ReferenceGrant object is required in the referent namespace to allow that
	// namespace's owner to accept the reference. See the ReferenceGrant
	// documentation for details.
	//
	// Support: Core
	Namespace *string `pulumi:"namespace"`
	// Port specifies the destination port number to use for this resource.
	// Port is required when the referent is a Kubernetes Service. In this
	// case, the port number is the service port number, not the target port.
	// For other resources, destination port might be derived from the referent
	// resource or this field.
	Port *int `pulumi:"port"`
}

// Defaults sets the appropriate defaults for GRPCRouteSpecRulesFiltersRequestMirrorBackendRef
func (val *GRPCRouteSpecRulesFiltersRequestMirrorBackendRef) Defaults() *GRPCRouteSpecRulesFiltersRequestMirrorBackendRef {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Group == nil {
		group_ := ""
		tmp.Group = &group_
	}
	if tmp.Kind == nil {
		kind_ := "Service"
		tmp.Kind = &kind_
	}
	return &tmp
}

// GRPCRouteSpecRulesFiltersRequestMirrorBackendRefInput is an input type that accepts GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs and GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersRequestMirrorBackendRefInput` via:
//
//	GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs{...}
type GRPCRouteSpecRulesFiltersRequestMirrorBackendRefInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput
	ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput
}

// BackendRef references a resource where mirrored requests are sent.
//
// Mirrored requests must be sent only to a single destination endpoint
// within this BackendRef, irrespective of how many endpoints are present
// within this BackendRef.
//
// If the referent cannot be found, this BackendRef is invalid and must be
// dropped from the Gateway. The controller must ensure the "ResolvedRefs"
// condition on the Route status is set to `status: False` and not configure
// this backend in the underlying implementation.
//
// If there is a cross-namespace reference to an *existing* object
// that is not allowed by a ReferenceGrant, the controller must ensure the
// "ResolvedRefs"  condition on the Route is set to `status: False`,
// with the "RefNotPermitted" reason and not configure this backend in the
// underlying implementation.
//
// In either error case, the Message of the `ResolvedRefs` Condition
// should be used to provide more detail about the problem.
//
// Support: Extended for Kubernetes Service
//
// Support: Implementation-specific for any other resource
type GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs struct {
	// Group is the group of the referent. For example, "gateway.networking.k8s.io".
	// When unspecified or empty string, core API group is inferred.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind is the Kubernetes resource kind of the referent. For example
	// "Service".
	//
	// Defaults to "Service" when not specified.
	//
	// ExternalName services can refer to CNAME DNS records that may live
	// outside of the cluster and as such are difficult to reason about in
	// terms of conformance. They also may not be safe to forward to (see
	// CVE-2021-25740 for more information). Implementations SHOULD NOT
	// support ExternalName Services.
	//
	// Support: Core (Services with a type other than ExternalName)
	//
	// Support: Implementation-specific (Services with type ExternalName)
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of the referent.
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace is the namespace of the backend. When unspecified, the local
	// namespace is inferred.
	//
	// Note that when a namespace different than the local namespace is specified,
	// a ReferenceGrant object is required in the referent namespace to allow that
	// namespace's owner to accept the reference. See the ReferenceGrant
	// documentation for details.
	//
	// Support: Core
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Port specifies the destination port number to use for this resource.
	// Port is required when the referent is a Kubernetes Service. In this
	// case, the port number is the service port number, not the target port.
	// For other resources, destination port might be derived from the referent
	// resource or this field.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

// Defaults sets the appropriate defaults for GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs
func (val *GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs) Defaults() *GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Group == nil {
		tmp.Group = pulumi.StringPtr("")
	}
	if tmp.Kind == nil {
		tmp.Kind = pulumi.StringPtr("Service")
	}
	return &tmp
}
func (GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestMirrorBackendRef)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput)
}

func (i GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput).ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrInput is an input type that accepts GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs, GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtr and GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrInput` via:
//
//	        GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput
	ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput
}

type grpcrouteSpecRulesFiltersRequestMirrorBackendRefPtrType GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs

func GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtr(v *GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs) GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrInput {
	return (*grpcrouteSpecRulesFiltersRequestMirrorBackendRefPtrType)(v)
}

func (*grpcrouteSpecRulesFiltersRequestMirrorBackendRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesFiltersRequestMirrorBackendRef)(nil)).Elem()
}

func (i *grpcrouteSpecRulesFiltersRequestMirrorBackendRefPtrType) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput {
	return i.ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesFiltersRequestMirrorBackendRefPtrType) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput)
}

// BackendRef references a resource where mirrored requests are sent.
//
// Mirrored requests must be sent only to a single destination endpoint
// within this BackendRef, irrespective of how many endpoints are present
// within this BackendRef.
//
// If the referent cannot be found, this BackendRef is invalid and must be
// dropped from the Gateway. The controller must ensure the "ResolvedRefs"
// condition on the Route status is set to `status: False` and not configure
// this backend in the underlying implementation.
//
// If there is a cross-namespace reference to an *existing* object
// that is not allowed by a ReferenceGrant, the controller must ensure the
// "ResolvedRefs"  condition on the Route is set to `status: False`,
// with the "RefNotPermitted" reason and not configure this backend in the
// underlying implementation.
//
// In either error case, the Message of the `ResolvedRefs` Condition
// should be used to provide more detail about the problem.
//
// Support: Extended for Kubernetes Service
//
// Support: Implementation-specific for any other resource
type GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestMirrorBackendRef)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput {
	return o.ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesFiltersRequestMirrorBackendRef) *GRPCRouteSpecRulesFiltersRequestMirrorBackendRef {
		return &v
	}).(GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput)
}

// Group is the group of the referent. For example, "gateway.networking.k8s.io".
// When unspecified or empty string, core API group is inferred.
func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestMirrorBackendRef) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind is the Kubernetes resource kind of the referent. For example
// "Service".
//
// Defaults to "Service" when not specified.
//
// ExternalName services can refer to CNAME DNS records that may live
// outside of the cluster and as such are difficult to reason about in
// terms of conformance. They also may not be safe to forward to (see
// CVE-2021-25740 for more information). Implementations SHOULD NOT
// support ExternalName Services.
//
// Support: Core (Services with a type other than ExternalName)
//
// Support: Implementation-specific (Services with type ExternalName)
func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestMirrorBackendRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestMirrorBackendRef) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace is the namespace of the backend. When unspecified, the local
// namespace is inferred.
//
// Note that when a namespace different than the local namespace is specified,
// a ReferenceGrant object is required in the referent namespace to allow that
// namespace's owner to accept the reference. See the ReferenceGrant
// documentation for details.
//
// Support: Core
func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestMirrorBackendRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Port specifies the destination port number to use for this resource.
// Port is required when the referent is a Kubernetes Service. In this
// case, the port number is the service port number, not the target port.
// For other resources, destination port might be derived from the referent
// resource or this field.
func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersRequestMirrorBackendRef) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesFiltersRequestMirrorBackendRef)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput) ToGRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput) Elem() GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestMirrorBackendRef) GRPCRouteSpecRulesFiltersRequestMirrorBackendRef {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesFiltersRequestMirrorBackendRef
		return ret
	}).(GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput)
}

// Group is the group of the referent. For example, "gateway.networking.k8s.io".
// When unspecified or empty string, core API group is inferred.
func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestMirrorBackendRef) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// Kind is the Kubernetes resource kind of the referent. For example
// "Service".
//
// Defaults to "Service" when not specified.
//
// ExternalName services can refer to CNAME DNS records that may live
// outside of the cluster and as such are difficult to reason about in
// terms of conformance. They also may not be safe to forward to (see
// CVE-2021-25740 for more information). Implementations SHOULD NOT
// support ExternalName Services.
//
// Support: Core (Services with a type other than ExternalName)
//
// Support: Implementation-specific (Services with type ExternalName)
func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestMirrorBackendRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestMirrorBackendRef) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of the backend. When unspecified, the local
// namespace is inferred.
//
// Note that when a namespace different than the local namespace is specified,
// a ReferenceGrant object is required in the referent namespace to allow that
// namespace's owner to accept the reference. See the ReferenceGrant
// documentation for details.
//
// Support: Core
func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestMirrorBackendRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Port specifies the destination port number to use for this resource.
// Port is required when the referent is a Kubernetes Service. In this
// case, the port number is the service port number, not the target port.
// For other resources, destination port might be derived from the referent
// resource or this field.
func (o GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersRequestMirrorBackendRef) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// ResponseHeaderModifier defines a schema for a filter that modifies response
// headers.
//
// Support: Extended
type GRPCRouteSpecRulesFiltersResponseHeaderModifier struct {
	// Add adds the given header(s) (name, value) to the request
	// before the action. It appends to any existing values associated
	// with the header name.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   add:
	//   - name: "my-header"
	//     value: "bar,baz"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: foo,bar,baz
	Add []GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd `pulumi:"add"`
	// Remove the given header(s) from the HTTP request before the action. The
	// value of Remove is a list of HTTP header names. Note that the header
	// names are case-insensitive (see
	// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header1: foo
	//   my-header2: bar
	//   my-header3: baz
	//
	// Config:
	//   remove: ["my-header1", "my-header3"]
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header2: bar
	Remove []string `pulumi:"remove"`
	// Set overwrites the request with the given header (name, value)
	// before the action.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   set:
	//   - name: "my-header"
	//     value: "bar"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: bar
	Set []GRPCRouteSpecRulesFiltersResponseHeaderModifierSet `pulumi:"set"`
}

// GRPCRouteSpecRulesFiltersResponseHeaderModifierInput is an input type that accepts GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs and GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersResponseHeaderModifierInput` via:
//
//	GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs{...}
type GRPCRouteSpecRulesFiltersResponseHeaderModifierInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput
	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput
}

// ResponseHeaderModifier defines a schema for a filter that modifies response
// headers.
//
// Support: Extended
type GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs struct {
	// Add adds the given header(s) (name, value) to the request
	// before the action. It appends to any existing values associated
	// with the header name.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   add:
	//   - name: "my-header"
	//     value: "bar,baz"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: foo,bar,baz
	Add GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayInput `pulumi:"add"`
	// Remove the given header(s) from the HTTP request before the action. The
	// value of Remove is a list of HTTP header names. Note that the header
	// names are case-insensitive (see
	// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header1: foo
	//   my-header2: bar
	//   my-header3: baz
	//
	// Config:
	//   remove: ["my-header1", "my-header3"]
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header2: bar
	Remove pulumi.StringArrayInput `pulumi:"remove"`
	// Set overwrites the request with the given header (name, value)
	// before the action.
	//
	// Input:
	//   GET /foo HTTP/1.1
	//   my-header: foo
	//
	// Config:
	//   set:
	//   - name: "my-header"
	//     value: "bar"
	//
	// Output:
	//   GET /foo HTTP/1.1
	//   my-header: bar
	Set GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayInput `pulumi:"set"`
}

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifier)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput {
	return i.ToGRPCRouteSpecRulesFiltersResponseHeaderModifierOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput)
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput {
	return i.ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput).ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrInput is an input type that accepts GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs, GRPCRouteSpecRulesFiltersResponseHeaderModifierPtr and GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrInput` via:
//
//	        GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput
	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput
}

type grpcrouteSpecRulesFiltersResponseHeaderModifierPtrType GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs

func GRPCRouteSpecRulesFiltersResponseHeaderModifierPtr(v *GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs) GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrInput {
	return (*grpcrouteSpecRulesFiltersResponseHeaderModifierPtrType)(v)
}

func (*grpcrouteSpecRulesFiltersResponseHeaderModifierPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesFiltersResponseHeaderModifier)(nil)).Elem()
}

func (i *grpcrouteSpecRulesFiltersResponseHeaderModifierPtrType) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput {
	return i.ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesFiltersResponseHeaderModifierPtrType) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput)
}

// ResponseHeaderModifier defines a schema for a filter that modifies response
// headers.
//
// Support: Extended
type GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifier)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput {
	return o.ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesFiltersResponseHeaderModifier) *GRPCRouteSpecRulesFiltersResponseHeaderModifier {
		return &v
	}).(GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput)
}

// Add adds the given header(s) (name, value) to the request
// before the action. It appends to any existing values associated
// with the header name.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	add:
//	- name: "my-header"
//	  value: "bar,baz"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: foo,bar,baz
func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput) Add() GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersResponseHeaderModifier) []GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd {
		return v.Add
	}).(GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput)
}

// Remove the given header(s) from the HTTP request before the action. The
// value of Remove is a list of HTTP header names. Note that the header
// names are case-insensitive (see
// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header1: foo
//	my-header2: bar
//	my-header3: baz
//
// Config:
//
//	remove: ["my-header1", "my-header3"]
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header2: bar
func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersResponseHeaderModifier) []string { return v.Remove }).(pulumi.StringArrayOutput)
}

// Set overwrites the request with the given header (name, value)
// before the action.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	set:
//	- name: "my-header"
//	  value: "bar"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: bar
func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput) Set() GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersResponseHeaderModifier) []GRPCRouteSpecRulesFiltersResponseHeaderModifierSet {
		return v.Set
	}).(GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput)
}

type GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesFiltersResponseHeaderModifier)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput) Elem() GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersResponseHeaderModifier) GRPCRouteSpecRulesFiltersResponseHeaderModifier {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesFiltersResponseHeaderModifier
		return ret
	}).(GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput)
}

// Add adds the given header(s) (name, value) to the request
// before the action. It appends to any existing values associated
// with the header name.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	add:
//	- name: "my-header"
//	  value: "bar,baz"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: foo,bar,baz
func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput) Add() GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersResponseHeaderModifier) []GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd {
		if v == nil {
			return nil
		}
		return v.Add
	}).(GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput)
}

// Remove the given header(s) from the HTTP request before the action. The
// value of Remove is a list of HTTP header names. Note that the header
// names are case-insensitive (see
// https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header1: foo
//	my-header2: bar
//	my-header3: baz
//
// Config:
//
//	remove: ["my-header1", "my-header3"]
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header2: bar
func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersResponseHeaderModifier) []string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringArrayOutput)
}

// Set overwrites the request with the given header (name, value)
// before the action.
//
// Input:
//
//	GET /foo HTTP/1.1
//	my-header: foo
//
// Config:
//
//	set:
//	- name: "my-header"
//	  value: "bar"
//
// Output:
//
//	GET /foo HTTP/1.1
//	my-header: bar
func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput) Set() GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesFiltersResponseHeaderModifier) []GRPCRouteSpecRulesFiltersResponseHeaderModifierSet {
		if v == nil {
			return nil
		}
		return v.Set
	}).(GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name string `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value string `pulumi:"value"`
}

// GRPCRouteSpecRulesFiltersResponseHeaderModifierAddInput is an input type that accepts GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArgs and GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersResponseHeaderModifierAddInput` via:
//
//	GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArgs{...}
type GRPCRouteSpecRulesFiltersResponseHeaderModifierAddInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput
	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArgs struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name pulumi.StringInput `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArgs) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput {
	return i.ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArgs) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput)
}

// GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayInput is an input type that accepts GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArray and GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayInput` via:
//
//	GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArray{ GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArgs{...} }
type GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput
	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput
}

type GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArray []GRPCRouteSpecRulesFiltersResponseHeaderModifierAddInput

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArray) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput {
	return i.ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArray) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput {
	return o
}

// Name is the name of the HTTP Header to be matched. Name matching MUST be
// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
//
// If multiple entries specify equivalent header names, the first entry with
// an equivalent name MUST be considered for a match. Subsequent entries
// with an equivalent header name MUST be ignored. Due to the
// case-insensitivity of header names, "foo" and "Foo" are considered
// equivalent.
func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd) string { return v.Name }).(pulumi.StringOutput)
}

// Value is the value of HTTP Header to be matched.
func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd) string { return v.Value }).(pulumi.StringOutput)
}

type GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd {
		return vs[0].([]GRPCRouteSpecRulesFiltersResponseHeaderModifierAdd)[vs[1].(int)]
	}).(GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersResponseHeaderModifierSet struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name string `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value string `pulumi:"value"`
}

// GRPCRouteSpecRulesFiltersResponseHeaderModifierSetInput is an input type that accepts GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArgs and GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersResponseHeaderModifierSetInput` via:
//
//	GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArgs{...}
type GRPCRouteSpecRulesFiltersResponseHeaderModifierSetInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput
	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArgs struct {
	// Name is the name of the HTTP Header to be matched. Name matching MUST be
	// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
	//
	// If multiple entries specify equivalent header names, the first entry with
	// an equivalent name MUST be considered for a match. Subsequent entries
	// with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name pulumi.StringInput `pulumi:"name"`
	// Value is the value of HTTP Header to be matched.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierSet)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArgs) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput {
	return i.ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArgs) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput)
}

// GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayInput is an input type that accepts GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArray and GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayInput` via:
//
//	GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArray{ GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArgs{...} }
type GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput
	ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutputWithContext(context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput
}

type GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArray []GRPCRouteSpecRulesFiltersResponseHeaderModifierSetInput

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesFiltersResponseHeaderModifierSet)(nil)).Elem()
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArray) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput {
	return i.ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArray) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput)
}

// HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.
type GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierSet)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput {
	return o
}

// Name is the name of the HTTP Header to be matched. Name matching MUST be
// case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).
//
// If multiple entries specify equivalent header names, the first entry with
// an equivalent name MUST be considered for a match. Subsequent entries
// with an equivalent header name MUST be ignored. Due to the
// case-insensitivity of header names, "foo" and "Foo" are considered
// equivalent.
func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersResponseHeaderModifierSet) string { return v.Name }).(pulumi.StringOutput)
}

// Value is the value of HTTP Header to be matched.
func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesFiltersResponseHeaderModifierSet) string { return v.Value }).(pulumi.StringOutput)
}

type GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesFiltersResponseHeaderModifierSet)(nil)).Elem()
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput() GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput) ToGRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesFiltersResponseHeaderModifierSet {
		return vs[0].([]GRPCRouteSpecRulesFiltersResponseHeaderModifierSet)[vs[1].(int)]
	}).(GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput)
}

// GRPCRouteMatch defines the predicate used to match requests to a given
// action. Multiple match types are ANDed together, i.e. the match will
// evaluate to true only if all conditions are satisfied.
//
// For example, the match below will match a gRPC request only if its service
// is `foo` AND it contains the `version: v1` header:
type GRPCRouteSpecRulesMatches struct {
	// Headers specifies gRPC request header matchers. Multiple match values are
	// ANDed together, meaning, a request MUST match all the specified headers
	// to select the route.
	Headers []GRPCRouteSpecRulesMatchesHeaders `pulumi:"headers"`
	// Method specifies a gRPC request service/method matcher. If this field is
	// not specified, all services and methods will match.
	Method *GRPCRouteSpecRulesMatchesMethod `pulumi:"method"`
}

// Defaults sets the appropriate defaults for GRPCRouteSpecRulesMatches
func (val *GRPCRouteSpecRulesMatches) Defaults() *GRPCRouteSpecRulesMatches {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Method = tmp.Method.Defaults()

	return &tmp
}

// GRPCRouteSpecRulesMatchesInput is an input type that accepts GRPCRouteSpecRulesMatchesArgs and GRPCRouteSpecRulesMatchesOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesMatchesInput` via:
//
//	GRPCRouteSpecRulesMatchesArgs{...}
type GRPCRouteSpecRulesMatchesInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesMatchesOutput() GRPCRouteSpecRulesMatchesOutput
	ToGRPCRouteSpecRulesMatchesOutputWithContext(context.Context) GRPCRouteSpecRulesMatchesOutput
}

// GRPCRouteMatch defines the predicate used to match requests to a given
// action. Multiple match types are ANDed together, i.e. the match will
// evaluate to true only if all conditions are satisfied.
//
// For example, the match below will match a gRPC request only if its service
// is `foo` AND it contains the `version: v1` header:
type GRPCRouteSpecRulesMatchesArgs struct {
	// Headers specifies gRPC request header matchers. Multiple match values are
	// ANDed together, meaning, a request MUST match all the specified headers
	// to select the route.
	Headers GRPCRouteSpecRulesMatchesHeadersArrayInput `pulumi:"headers"`
	// Method specifies a gRPC request service/method matcher. If this field is
	// not specified, all services and methods will match.
	Method GRPCRouteSpecRulesMatchesMethodPtrInput `pulumi:"method"`
}

// Defaults sets the appropriate defaults for GRPCRouteSpecRulesMatchesArgs
func (val *GRPCRouteSpecRulesMatchesArgs) Defaults() *GRPCRouteSpecRulesMatchesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (GRPCRouteSpecRulesMatchesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesMatches)(nil)).Elem()
}

func (i GRPCRouteSpecRulesMatchesArgs) ToGRPCRouteSpecRulesMatchesOutput() GRPCRouteSpecRulesMatchesOutput {
	return i.ToGRPCRouteSpecRulesMatchesOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesMatchesArgs) ToGRPCRouteSpecRulesMatchesOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesMatchesOutput)
}

// GRPCRouteSpecRulesMatchesArrayInput is an input type that accepts GRPCRouteSpecRulesMatchesArray and GRPCRouteSpecRulesMatchesArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesMatchesArrayInput` via:
//
//	GRPCRouteSpecRulesMatchesArray{ GRPCRouteSpecRulesMatchesArgs{...} }
type GRPCRouteSpecRulesMatchesArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesMatchesArrayOutput() GRPCRouteSpecRulesMatchesArrayOutput
	ToGRPCRouteSpecRulesMatchesArrayOutputWithContext(context.Context) GRPCRouteSpecRulesMatchesArrayOutput
}

type GRPCRouteSpecRulesMatchesArray []GRPCRouteSpecRulesMatchesInput

func (GRPCRouteSpecRulesMatchesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesMatches)(nil)).Elem()
}

func (i GRPCRouteSpecRulesMatchesArray) ToGRPCRouteSpecRulesMatchesArrayOutput() GRPCRouteSpecRulesMatchesArrayOutput {
	return i.ToGRPCRouteSpecRulesMatchesArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesMatchesArray) ToGRPCRouteSpecRulesMatchesArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesMatchesArrayOutput)
}

// GRPCRouteMatch defines the predicate used to match requests to a given
// action. Multiple match types are ANDed together, i.e. the match will
// evaluate to true only if all conditions are satisfied.
//
// For example, the match below will match a gRPC request only if its service
// is `foo` AND it contains the `version: v1` header:
type GRPCRouteSpecRulesMatchesOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesMatchesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesMatches)(nil)).Elem()
}

func (o GRPCRouteSpecRulesMatchesOutput) ToGRPCRouteSpecRulesMatchesOutput() GRPCRouteSpecRulesMatchesOutput {
	return o
}

func (o GRPCRouteSpecRulesMatchesOutput) ToGRPCRouteSpecRulesMatchesOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesOutput {
	return o
}

// Headers specifies gRPC request header matchers. Multiple match values are
// ANDed together, meaning, a request MUST match all the specified headers
// to select the route.
func (o GRPCRouteSpecRulesMatchesOutput) Headers() GRPCRouteSpecRulesMatchesHeadersArrayOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesMatches) []GRPCRouteSpecRulesMatchesHeaders { return v.Headers }).(GRPCRouteSpecRulesMatchesHeadersArrayOutput)
}

// Method specifies a gRPC request service/method matcher. If this field is
// not specified, all services and methods will match.
func (o GRPCRouteSpecRulesMatchesOutput) Method() GRPCRouteSpecRulesMatchesMethodPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesMatches) *GRPCRouteSpecRulesMatchesMethod { return v.Method }).(GRPCRouteSpecRulesMatchesMethodPtrOutput)
}

type GRPCRouteSpecRulesMatchesArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesMatchesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesMatches)(nil)).Elem()
}

func (o GRPCRouteSpecRulesMatchesArrayOutput) ToGRPCRouteSpecRulesMatchesArrayOutput() GRPCRouteSpecRulesMatchesArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesMatchesArrayOutput) ToGRPCRouteSpecRulesMatchesArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesMatchesArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesMatchesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesMatches {
		return vs[0].([]GRPCRouteSpecRulesMatches)[vs[1].(int)]
	}).(GRPCRouteSpecRulesMatchesOutput)
}

// GRPCHeaderMatch describes how to select a gRPC route by matching gRPC request
// headers.
type GRPCRouteSpecRulesMatchesHeaders struct {
	// Name is the name of the gRPC Header to be matched.
	//
	// If multiple entries specify equivalent header names, only the first
	// entry with an equivalent name MUST be considered for a match. Subsequent
	// entries with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name string `pulumi:"name"`
	// Type specifies how to match against the value of the header.
	Type *string `pulumi:"type"`
	// Value is the value of the gRPC Header to be matched.
	Value string `pulumi:"value"`
}

// Defaults sets the appropriate defaults for GRPCRouteSpecRulesMatchesHeaders
func (val *GRPCRouteSpecRulesMatchesHeaders) Defaults() *GRPCRouteSpecRulesMatchesHeaders {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Type == nil {
		type_ := "Exact"
		tmp.Type = &type_
	}
	return &tmp
}

// GRPCRouteSpecRulesMatchesHeadersInput is an input type that accepts GRPCRouteSpecRulesMatchesHeadersArgs and GRPCRouteSpecRulesMatchesHeadersOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesMatchesHeadersInput` via:
//
//	GRPCRouteSpecRulesMatchesHeadersArgs{...}
type GRPCRouteSpecRulesMatchesHeadersInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesMatchesHeadersOutput() GRPCRouteSpecRulesMatchesHeadersOutput
	ToGRPCRouteSpecRulesMatchesHeadersOutputWithContext(context.Context) GRPCRouteSpecRulesMatchesHeadersOutput
}

// GRPCHeaderMatch describes how to select a gRPC route by matching gRPC request
// headers.
type GRPCRouteSpecRulesMatchesHeadersArgs struct {
	// Name is the name of the gRPC Header to be matched.
	//
	// If multiple entries specify equivalent header names, only the first
	// entry with an equivalent name MUST be considered for a match. Subsequent
	// entries with an equivalent header name MUST be ignored. Due to the
	// case-insensitivity of header names, "foo" and "Foo" are considered
	// equivalent.
	Name pulumi.StringInput `pulumi:"name"`
	// Type specifies how to match against the value of the header.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Value is the value of the gRPC Header to be matched.
	Value pulumi.StringInput `pulumi:"value"`
}

// Defaults sets the appropriate defaults for GRPCRouteSpecRulesMatchesHeadersArgs
func (val *GRPCRouteSpecRulesMatchesHeadersArgs) Defaults() *GRPCRouteSpecRulesMatchesHeadersArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Type == nil {
		tmp.Type = pulumi.StringPtr("Exact")
	}
	return &tmp
}
func (GRPCRouteSpecRulesMatchesHeadersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesMatchesHeaders)(nil)).Elem()
}

func (i GRPCRouteSpecRulesMatchesHeadersArgs) ToGRPCRouteSpecRulesMatchesHeadersOutput() GRPCRouteSpecRulesMatchesHeadersOutput {
	return i.ToGRPCRouteSpecRulesMatchesHeadersOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesMatchesHeadersArgs) ToGRPCRouteSpecRulesMatchesHeadersOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesHeadersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesMatchesHeadersOutput)
}

// GRPCRouteSpecRulesMatchesHeadersArrayInput is an input type that accepts GRPCRouteSpecRulesMatchesHeadersArray and GRPCRouteSpecRulesMatchesHeadersArrayOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesMatchesHeadersArrayInput` via:
//
//	GRPCRouteSpecRulesMatchesHeadersArray{ GRPCRouteSpecRulesMatchesHeadersArgs{...} }
type GRPCRouteSpecRulesMatchesHeadersArrayInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesMatchesHeadersArrayOutput() GRPCRouteSpecRulesMatchesHeadersArrayOutput
	ToGRPCRouteSpecRulesMatchesHeadersArrayOutputWithContext(context.Context) GRPCRouteSpecRulesMatchesHeadersArrayOutput
}

type GRPCRouteSpecRulesMatchesHeadersArray []GRPCRouteSpecRulesMatchesHeadersInput

func (GRPCRouteSpecRulesMatchesHeadersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesMatchesHeaders)(nil)).Elem()
}

func (i GRPCRouteSpecRulesMatchesHeadersArray) ToGRPCRouteSpecRulesMatchesHeadersArrayOutput() GRPCRouteSpecRulesMatchesHeadersArrayOutput {
	return i.ToGRPCRouteSpecRulesMatchesHeadersArrayOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesMatchesHeadersArray) ToGRPCRouteSpecRulesMatchesHeadersArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesHeadersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesMatchesHeadersArrayOutput)
}

// GRPCHeaderMatch describes how to select a gRPC route by matching gRPC request
// headers.
type GRPCRouteSpecRulesMatchesHeadersOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesMatchesHeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesMatchesHeaders)(nil)).Elem()
}

func (o GRPCRouteSpecRulesMatchesHeadersOutput) ToGRPCRouteSpecRulesMatchesHeadersOutput() GRPCRouteSpecRulesMatchesHeadersOutput {
	return o
}

func (o GRPCRouteSpecRulesMatchesHeadersOutput) ToGRPCRouteSpecRulesMatchesHeadersOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesHeadersOutput {
	return o
}

// Name is the name of the gRPC Header to be matched.
//
// If multiple entries specify equivalent header names, only the first
// entry with an equivalent name MUST be considered for a match. Subsequent
// entries with an equivalent header name MUST be ignored. Due to the
// case-insensitivity of header names, "foo" and "Foo" are considered
// equivalent.
func (o GRPCRouteSpecRulesMatchesHeadersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesMatchesHeaders) string { return v.Name }).(pulumi.StringOutput)
}

// Type specifies how to match against the value of the header.
func (o GRPCRouteSpecRulesMatchesHeadersOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesMatchesHeaders) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Value is the value of the gRPC Header to be matched.
func (o GRPCRouteSpecRulesMatchesHeadersOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesMatchesHeaders) string { return v.Value }).(pulumi.StringOutput)
}

type GRPCRouteSpecRulesMatchesHeadersArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesMatchesHeadersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteSpecRulesMatchesHeaders)(nil)).Elem()
}

func (o GRPCRouteSpecRulesMatchesHeadersArrayOutput) ToGRPCRouteSpecRulesMatchesHeadersArrayOutput() GRPCRouteSpecRulesMatchesHeadersArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesMatchesHeadersArrayOutput) ToGRPCRouteSpecRulesMatchesHeadersArrayOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesHeadersArrayOutput {
	return o
}

func (o GRPCRouteSpecRulesMatchesHeadersArrayOutput) Index(i pulumi.IntInput) GRPCRouteSpecRulesMatchesHeadersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteSpecRulesMatchesHeaders {
		return vs[0].([]GRPCRouteSpecRulesMatchesHeaders)[vs[1].(int)]
	}).(GRPCRouteSpecRulesMatchesHeadersOutput)
}

// Method specifies a gRPC request service/method matcher. If this field is
// not specified, all services and methods will match.
type GRPCRouteSpecRulesMatchesMethod struct {
	// Value of the method to match against. If left empty or omitted, will
	// match all services.
	//
	// At least one of Service and Method MUST be a non-empty string.
	Method *string `pulumi:"method"`
	// Value of the service to match against. If left empty or omitted, will
	// match any service.
	//
	// At least one of Service and Method MUST be a non-empty string.
	Service *string `pulumi:"service"`
	// Type specifies how to match against the service and/or method.
	// Support: Core (Exact with service and method specified)
	//
	// Support: Implementation-specific (Exact with method specified but no service specified)
	//
	// Support: Implementation-specific (RegularExpression)
	Type *string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for GRPCRouteSpecRulesMatchesMethod
func (val *GRPCRouteSpecRulesMatchesMethod) Defaults() *GRPCRouteSpecRulesMatchesMethod {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Type == nil {
		type_ := "Exact"
		tmp.Type = &type_
	}
	return &tmp
}

// GRPCRouteSpecRulesMatchesMethodInput is an input type that accepts GRPCRouteSpecRulesMatchesMethodArgs and GRPCRouteSpecRulesMatchesMethodOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesMatchesMethodInput` via:
//
//	GRPCRouteSpecRulesMatchesMethodArgs{...}
type GRPCRouteSpecRulesMatchesMethodInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesMatchesMethodOutput() GRPCRouteSpecRulesMatchesMethodOutput
	ToGRPCRouteSpecRulesMatchesMethodOutputWithContext(context.Context) GRPCRouteSpecRulesMatchesMethodOutput
}

// Method specifies a gRPC request service/method matcher. If this field is
// not specified, all services and methods will match.
type GRPCRouteSpecRulesMatchesMethodArgs struct {
	// Value of the method to match against. If left empty or omitted, will
	// match all services.
	//
	// At least one of Service and Method MUST be a non-empty string.
	Method pulumi.StringPtrInput `pulumi:"method"`
	// Value of the service to match against. If left empty or omitted, will
	// match any service.
	//
	// At least one of Service and Method MUST be a non-empty string.
	Service pulumi.StringPtrInput `pulumi:"service"`
	// Type specifies how to match against the service and/or method.
	// Support: Core (Exact with service and method specified)
	//
	// Support: Implementation-specific (Exact with method specified but no service specified)
	//
	// Support: Implementation-specific (RegularExpression)
	Type pulumi.StringPtrInput `pulumi:"type"`
}

// Defaults sets the appropriate defaults for GRPCRouteSpecRulesMatchesMethodArgs
func (val *GRPCRouteSpecRulesMatchesMethodArgs) Defaults() *GRPCRouteSpecRulesMatchesMethodArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Type == nil {
		tmp.Type = pulumi.StringPtr("Exact")
	}
	return &tmp
}
func (GRPCRouteSpecRulesMatchesMethodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesMatchesMethod)(nil)).Elem()
}

func (i GRPCRouteSpecRulesMatchesMethodArgs) ToGRPCRouteSpecRulesMatchesMethodOutput() GRPCRouteSpecRulesMatchesMethodOutput {
	return i.ToGRPCRouteSpecRulesMatchesMethodOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesMatchesMethodArgs) ToGRPCRouteSpecRulesMatchesMethodOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesMethodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesMatchesMethodOutput)
}

func (i GRPCRouteSpecRulesMatchesMethodArgs) ToGRPCRouteSpecRulesMatchesMethodPtrOutput() GRPCRouteSpecRulesMatchesMethodPtrOutput {
	return i.ToGRPCRouteSpecRulesMatchesMethodPtrOutputWithContext(context.Background())
}

func (i GRPCRouteSpecRulesMatchesMethodArgs) ToGRPCRouteSpecRulesMatchesMethodPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesMatchesMethodOutput).ToGRPCRouteSpecRulesMatchesMethodPtrOutputWithContext(ctx)
}

// GRPCRouteSpecRulesMatchesMethodPtrInput is an input type that accepts GRPCRouteSpecRulesMatchesMethodArgs, GRPCRouteSpecRulesMatchesMethodPtr and GRPCRouteSpecRulesMatchesMethodPtrOutput values.
// You can construct a concrete instance of `GRPCRouteSpecRulesMatchesMethodPtrInput` via:
//
//	        GRPCRouteSpecRulesMatchesMethodArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteSpecRulesMatchesMethodPtrInput interface {
	pulumi.Input

	ToGRPCRouteSpecRulesMatchesMethodPtrOutput() GRPCRouteSpecRulesMatchesMethodPtrOutput
	ToGRPCRouteSpecRulesMatchesMethodPtrOutputWithContext(context.Context) GRPCRouteSpecRulesMatchesMethodPtrOutput
}

type grpcrouteSpecRulesMatchesMethodPtrType GRPCRouteSpecRulesMatchesMethodArgs

func GRPCRouteSpecRulesMatchesMethodPtr(v *GRPCRouteSpecRulesMatchesMethodArgs) GRPCRouteSpecRulesMatchesMethodPtrInput {
	return (*grpcrouteSpecRulesMatchesMethodPtrType)(v)
}

func (*grpcrouteSpecRulesMatchesMethodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesMatchesMethod)(nil)).Elem()
}

func (i *grpcrouteSpecRulesMatchesMethodPtrType) ToGRPCRouteSpecRulesMatchesMethodPtrOutput() GRPCRouteSpecRulesMatchesMethodPtrOutput {
	return i.ToGRPCRouteSpecRulesMatchesMethodPtrOutputWithContext(context.Background())
}

func (i *grpcrouteSpecRulesMatchesMethodPtrType) ToGRPCRouteSpecRulesMatchesMethodPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesMethodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteSpecRulesMatchesMethodPtrOutput)
}

// Method specifies a gRPC request service/method matcher. If this field is
// not specified, all services and methods will match.
type GRPCRouteSpecRulesMatchesMethodOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesMatchesMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteSpecRulesMatchesMethod)(nil)).Elem()
}

func (o GRPCRouteSpecRulesMatchesMethodOutput) ToGRPCRouteSpecRulesMatchesMethodOutput() GRPCRouteSpecRulesMatchesMethodOutput {
	return o
}

func (o GRPCRouteSpecRulesMatchesMethodOutput) ToGRPCRouteSpecRulesMatchesMethodOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesMethodOutput {
	return o
}

func (o GRPCRouteSpecRulesMatchesMethodOutput) ToGRPCRouteSpecRulesMatchesMethodPtrOutput() GRPCRouteSpecRulesMatchesMethodPtrOutput {
	return o.ToGRPCRouteSpecRulesMatchesMethodPtrOutputWithContext(context.Background())
}

func (o GRPCRouteSpecRulesMatchesMethodOutput) ToGRPCRouteSpecRulesMatchesMethodPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesMethodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteSpecRulesMatchesMethod) *GRPCRouteSpecRulesMatchesMethod {
		return &v
	}).(GRPCRouteSpecRulesMatchesMethodPtrOutput)
}

// Value of the method to match against. If left empty or omitted, will
// match all services.
//
// At least one of Service and Method MUST be a non-empty string.
func (o GRPCRouteSpecRulesMatchesMethodOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesMatchesMethod) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// Value of the service to match against. If left empty or omitted, will
// match any service.
//
// At least one of Service and Method MUST be a non-empty string.
func (o GRPCRouteSpecRulesMatchesMethodOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesMatchesMethod) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// Type specifies how to match against the service and/or method.
// Support: Core (Exact with service and method specified)
//
// Support: Implementation-specific (Exact with method specified but no service specified)
//
// Support: Implementation-specific (RegularExpression)
func (o GRPCRouteSpecRulesMatchesMethodOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteSpecRulesMatchesMethod) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GRPCRouteSpecRulesMatchesMethodPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteSpecRulesMatchesMethodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteSpecRulesMatchesMethod)(nil)).Elem()
}

func (o GRPCRouteSpecRulesMatchesMethodPtrOutput) ToGRPCRouteSpecRulesMatchesMethodPtrOutput() GRPCRouteSpecRulesMatchesMethodPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesMatchesMethodPtrOutput) ToGRPCRouteSpecRulesMatchesMethodPtrOutputWithContext(ctx context.Context) GRPCRouteSpecRulesMatchesMethodPtrOutput {
	return o
}

func (o GRPCRouteSpecRulesMatchesMethodPtrOutput) Elem() GRPCRouteSpecRulesMatchesMethodOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesMatchesMethod) GRPCRouteSpecRulesMatchesMethod {
		if v != nil {
			return *v
		}
		var ret GRPCRouteSpecRulesMatchesMethod
		return ret
	}).(GRPCRouteSpecRulesMatchesMethodOutput)
}

// Value of the method to match against. If left empty or omitted, will
// match all services.
//
// At least one of Service and Method MUST be a non-empty string.
func (o GRPCRouteSpecRulesMatchesMethodPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesMatchesMethod) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// Value of the service to match against. If left empty or omitted, will
// match any service.
//
// At least one of Service and Method MUST be a non-empty string.
func (o GRPCRouteSpecRulesMatchesMethodPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesMatchesMethod) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Type specifies how to match against the service and/or method.
// Support: Core (Exact with service and method specified)
//
// Support: Implementation-specific (Exact with method specified but no service specified)
//
// Support: Implementation-specific (RegularExpression)
func (o GRPCRouteSpecRulesMatchesMethodPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GRPCRouteSpecRulesMatchesMethod) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Status defines the current state of GRPCRoute.
type GRPCRouteStatus struct {
	// Parents is a list of parent resources (usually Gateways) that are
	// associated with the route, and the status of the route with respect to
	// each parent. When this route attaches to a parent, the controller that
	// manages the parent must add an entry to this list when the controller
	// first sees the route and should update the entry as appropriate when the
	// route or gateway is modified.
	//
	// Note that parent references that cannot be resolved by an implementation
	// of this API will not be added to this list. Implementations of this API
	// can only populate Route status for the Gateways/parent resources they are
	// responsible for.
	//
	// A maximum of 32 Gateways will be represented in this list. An empty list
	// means the route has not been attached to any Gateway.
	Parents []GRPCRouteStatusParents `pulumi:"parents"`
}

// GRPCRouteStatusInput is an input type that accepts GRPCRouteStatusArgs and GRPCRouteStatusOutput values.
// You can construct a concrete instance of `GRPCRouteStatusInput` via:
//
//	GRPCRouteStatusArgs{...}
type GRPCRouteStatusInput interface {
	pulumi.Input

	ToGRPCRouteStatusOutput() GRPCRouteStatusOutput
	ToGRPCRouteStatusOutputWithContext(context.Context) GRPCRouteStatusOutput
}

// Status defines the current state of GRPCRoute.
type GRPCRouteStatusArgs struct {
	// Parents is a list of parent resources (usually Gateways) that are
	// associated with the route, and the status of the route with respect to
	// each parent. When this route attaches to a parent, the controller that
	// manages the parent must add an entry to this list when the controller
	// first sees the route and should update the entry as appropriate when the
	// route or gateway is modified.
	//
	// Note that parent references that cannot be resolved by an implementation
	// of this API will not be added to this list. Implementations of this API
	// can only populate Route status for the Gateways/parent resources they are
	// responsible for.
	//
	// A maximum of 32 Gateways will be represented in this list. An empty list
	// means the route has not been attached to any Gateway.
	Parents GRPCRouteStatusParentsArrayInput `pulumi:"parents"`
}

func (GRPCRouteStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteStatus)(nil)).Elem()
}

func (i GRPCRouteStatusArgs) ToGRPCRouteStatusOutput() GRPCRouteStatusOutput {
	return i.ToGRPCRouteStatusOutputWithContext(context.Background())
}

func (i GRPCRouteStatusArgs) ToGRPCRouteStatusOutputWithContext(ctx context.Context) GRPCRouteStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteStatusOutput)
}

func (i GRPCRouteStatusArgs) ToGRPCRouteStatusPtrOutput() GRPCRouteStatusPtrOutput {
	return i.ToGRPCRouteStatusPtrOutputWithContext(context.Background())
}

func (i GRPCRouteStatusArgs) ToGRPCRouteStatusPtrOutputWithContext(ctx context.Context) GRPCRouteStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteStatusOutput).ToGRPCRouteStatusPtrOutputWithContext(ctx)
}

// GRPCRouteStatusPtrInput is an input type that accepts GRPCRouteStatusArgs, GRPCRouteStatusPtr and GRPCRouteStatusPtrOutput values.
// You can construct a concrete instance of `GRPCRouteStatusPtrInput` via:
//
//	        GRPCRouteStatusArgs{...}
//
//	or:
//
//	        nil
type GRPCRouteStatusPtrInput interface {
	pulumi.Input

	ToGRPCRouteStatusPtrOutput() GRPCRouteStatusPtrOutput
	ToGRPCRouteStatusPtrOutputWithContext(context.Context) GRPCRouteStatusPtrOutput
}

type grpcrouteStatusPtrType GRPCRouteStatusArgs

func GRPCRouteStatusPtr(v *GRPCRouteStatusArgs) GRPCRouteStatusPtrInput {
	return (*grpcrouteStatusPtrType)(v)
}

func (*grpcrouteStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteStatus)(nil)).Elem()
}

func (i *grpcrouteStatusPtrType) ToGRPCRouteStatusPtrOutput() GRPCRouteStatusPtrOutput {
	return i.ToGRPCRouteStatusPtrOutputWithContext(context.Background())
}

func (i *grpcrouteStatusPtrType) ToGRPCRouteStatusPtrOutputWithContext(ctx context.Context) GRPCRouteStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteStatusPtrOutput)
}

// Status defines the current state of GRPCRoute.
type GRPCRouteStatusOutput struct{ *pulumi.OutputState }

func (GRPCRouteStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteStatus)(nil)).Elem()
}

func (o GRPCRouteStatusOutput) ToGRPCRouteStatusOutput() GRPCRouteStatusOutput {
	return o
}

func (o GRPCRouteStatusOutput) ToGRPCRouteStatusOutputWithContext(ctx context.Context) GRPCRouteStatusOutput {
	return o
}

func (o GRPCRouteStatusOutput) ToGRPCRouteStatusPtrOutput() GRPCRouteStatusPtrOutput {
	return o.ToGRPCRouteStatusPtrOutputWithContext(context.Background())
}

func (o GRPCRouteStatusOutput) ToGRPCRouteStatusPtrOutputWithContext(ctx context.Context) GRPCRouteStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GRPCRouteStatus) *GRPCRouteStatus {
		return &v
	}).(GRPCRouteStatusPtrOutput)
}

// Parents is a list of parent resources (usually Gateways) that are
// associated with the route, and the status of the route with respect to
// each parent. When this route attaches to a parent, the controller that
// manages the parent must add an entry to this list when the controller
// first sees the route and should update the entry as appropriate when the
// route or gateway is modified.
//
// Note that parent references that cannot be resolved by an implementation
// of this API will not be added to this list. Implementations of this API
// can only populate Route status for the Gateways/parent resources they are
// responsible for.
//
// A maximum of 32 Gateways will be represented in this list. An empty list
// means the route has not been attached to any Gateway.
func (o GRPCRouteStatusOutput) Parents() GRPCRouteStatusParentsArrayOutput {
	return o.ApplyT(func(v GRPCRouteStatus) []GRPCRouteStatusParents { return v.Parents }).(GRPCRouteStatusParentsArrayOutput)
}

type GRPCRouteStatusPtrOutput struct{ *pulumi.OutputState }

func (GRPCRouteStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GRPCRouteStatus)(nil)).Elem()
}

func (o GRPCRouteStatusPtrOutput) ToGRPCRouteStatusPtrOutput() GRPCRouteStatusPtrOutput {
	return o
}

func (o GRPCRouteStatusPtrOutput) ToGRPCRouteStatusPtrOutputWithContext(ctx context.Context) GRPCRouteStatusPtrOutput {
	return o
}

func (o GRPCRouteStatusPtrOutput) Elem() GRPCRouteStatusOutput {
	return o.ApplyT(func(v *GRPCRouteStatus) GRPCRouteStatus {
		if v != nil {
			return *v
		}
		var ret GRPCRouteStatus
		return ret
	}).(GRPCRouteStatusOutput)
}

// Parents is a list of parent resources (usually Gateways) that are
// associated with the route, and the status of the route with respect to
// each parent. When this route attaches to a parent, the controller that
// manages the parent must add an entry to this list when the controller
// first sees the route and should update the entry as appropriate when the
// route or gateway is modified.
//
// Note that parent references that cannot be resolved by an implementation
// of this API will not be added to this list. Implementations of this API
// can only populate Route status for the Gateways/parent resources they are
// responsible for.
//
// A maximum of 32 Gateways will be represented in this list. An empty list
// means the route has not been attached to any Gateway.
func (o GRPCRouteStatusPtrOutput) Parents() GRPCRouteStatusParentsArrayOutput {
	return o.ApplyT(func(v *GRPCRouteStatus) []GRPCRouteStatusParents {
		if v == nil {
			return nil
		}
		return v.Parents
	}).(GRPCRouteStatusParentsArrayOutput)
}

// RouteParentStatus describes the status of a route with respect to an
// associated Parent.
type GRPCRouteStatusParents struct {
	// Conditions describes the status of the route with respect to the Gateway.
	// Note that the route's availability is also subject to the Gateway's own
	// status conditions and listener status.
	//
	// If the Route's ParentRef specifies an existing Gateway that supports
	// Routes of this kind AND that Gateway's controller has sufficient access,
	// then that Gateway's controller MUST set the "Accepted" condition on the
	// Route, to indicate whether the route has been accepted or rejected by the
	// Gateway, and why.
	//
	// A Route MUST be considered "Accepted" if at least one of the Route's
	// rules is implemented by the Gateway.
	//
	// There are a number of cases where the "Accepted" condition may not be set
	// due to lack of controller visibility, that includes when:
	//
	// * The Route refers to a non-existent parent.
	// * The Route is of a type that the controller does not support.
	// * The Route is in a namespace the controller does not have access to.
	Conditions []GRPCRouteStatusParentsConditions `pulumi:"conditions"`
	// ControllerName is a domain/path string that indicates the name of the
	// controller that wrote this status. This corresponds with the
	// controllerName field on GatewayClass.
	//
	// Example: "example.net/gateway-controller".
	//
	// The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
	// valid Kubernetes names
	// (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	//
	// Controllers MUST populate this field when writing status. Controllers should ensure that
	// entries to status populated with their ControllerName are cleaned up when they are no
	// longer necessary.
	ControllerName string `pulumi:"controllerName"`
	// ParentRef corresponds with a ParentRef in the spec that this
	// RouteParentStatus struct describes the status of.
	ParentRef GRPCRouteStatusParentsParentRef `pulumi:"parentRef"`
}

// Defaults sets the appropriate defaults for GRPCRouteStatusParents
func (val *GRPCRouteStatusParents) Defaults() *GRPCRouteStatusParents {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.ParentRef = *tmp.ParentRef.Defaults()

	return &tmp
}

// GRPCRouteStatusParentsInput is an input type that accepts GRPCRouteStatusParentsArgs and GRPCRouteStatusParentsOutput values.
// You can construct a concrete instance of `GRPCRouteStatusParentsInput` via:
//
//	GRPCRouteStatusParentsArgs{...}
type GRPCRouteStatusParentsInput interface {
	pulumi.Input

	ToGRPCRouteStatusParentsOutput() GRPCRouteStatusParentsOutput
	ToGRPCRouteStatusParentsOutputWithContext(context.Context) GRPCRouteStatusParentsOutput
}

// RouteParentStatus describes the status of a route with respect to an
// associated Parent.
type GRPCRouteStatusParentsArgs struct {
	// Conditions describes the status of the route with respect to the Gateway.
	// Note that the route's availability is also subject to the Gateway's own
	// status conditions and listener status.
	//
	// If the Route's ParentRef specifies an existing Gateway that supports
	// Routes of this kind AND that Gateway's controller has sufficient access,
	// then that Gateway's controller MUST set the "Accepted" condition on the
	// Route, to indicate whether the route has been accepted or rejected by the
	// Gateway, and why.
	//
	// A Route MUST be considered "Accepted" if at least one of the Route's
	// rules is implemented by the Gateway.
	//
	// There are a number of cases where the "Accepted" condition may not be set
	// due to lack of controller visibility, that includes when:
	//
	// * The Route refers to a non-existent parent.
	// * The Route is of a type that the controller does not support.
	// * The Route is in a namespace the controller does not have access to.
	Conditions GRPCRouteStatusParentsConditionsArrayInput `pulumi:"conditions"`
	// ControllerName is a domain/path string that indicates the name of the
	// controller that wrote this status. This corresponds with the
	// controllerName field on GatewayClass.
	//
	// Example: "example.net/gateway-controller".
	//
	// The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
	// valid Kubernetes names
	// (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
	//
	// Controllers MUST populate this field when writing status. Controllers should ensure that
	// entries to status populated with their ControllerName are cleaned up when they are no
	// longer necessary.
	ControllerName pulumi.StringInput `pulumi:"controllerName"`
	// ParentRef corresponds with a ParentRef in the spec that this
	// RouteParentStatus struct describes the status of.
	ParentRef GRPCRouteStatusParentsParentRefInput `pulumi:"parentRef"`
}

// Defaults sets the appropriate defaults for GRPCRouteStatusParentsArgs
func (val *GRPCRouteStatusParentsArgs) Defaults() *GRPCRouteStatusParentsArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (GRPCRouteStatusParentsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteStatusParents)(nil)).Elem()
}

func (i GRPCRouteStatusParentsArgs) ToGRPCRouteStatusParentsOutput() GRPCRouteStatusParentsOutput {
	return i.ToGRPCRouteStatusParentsOutputWithContext(context.Background())
}

func (i GRPCRouteStatusParentsArgs) ToGRPCRouteStatusParentsOutputWithContext(ctx context.Context) GRPCRouteStatusParentsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteStatusParentsOutput)
}

// GRPCRouteStatusParentsArrayInput is an input type that accepts GRPCRouteStatusParentsArray and GRPCRouteStatusParentsArrayOutput values.
// You can construct a concrete instance of `GRPCRouteStatusParentsArrayInput` via:
//
//	GRPCRouteStatusParentsArray{ GRPCRouteStatusParentsArgs{...} }
type GRPCRouteStatusParentsArrayInput interface {
	pulumi.Input

	ToGRPCRouteStatusParentsArrayOutput() GRPCRouteStatusParentsArrayOutput
	ToGRPCRouteStatusParentsArrayOutputWithContext(context.Context) GRPCRouteStatusParentsArrayOutput
}

type GRPCRouteStatusParentsArray []GRPCRouteStatusParentsInput

func (GRPCRouteStatusParentsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteStatusParents)(nil)).Elem()
}

func (i GRPCRouteStatusParentsArray) ToGRPCRouteStatusParentsArrayOutput() GRPCRouteStatusParentsArrayOutput {
	return i.ToGRPCRouteStatusParentsArrayOutputWithContext(context.Background())
}

func (i GRPCRouteStatusParentsArray) ToGRPCRouteStatusParentsArrayOutputWithContext(ctx context.Context) GRPCRouteStatusParentsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteStatusParentsArrayOutput)
}

// RouteParentStatus describes the status of a route with respect to an
// associated Parent.
type GRPCRouteStatusParentsOutput struct{ *pulumi.OutputState }

func (GRPCRouteStatusParentsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteStatusParents)(nil)).Elem()
}

func (o GRPCRouteStatusParentsOutput) ToGRPCRouteStatusParentsOutput() GRPCRouteStatusParentsOutput {
	return o
}

func (o GRPCRouteStatusParentsOutput) ToGRPCRouteStatusParentsOutputWithContext(ctx context.Context) GRPCRouteStatusParentsOutput {
	return o
}

// Conditions describes the status of the route with respect to the Gateway.
// Note that the route's availability is also subject to the Gateway's own
// status conditions and listener status.
//
// If the Route's ParentRef specifies an existing Gateway that supports
// Routes of this kind AND that Gateway's controller has sufficient access,
// then that Gateway's controller MUST set the "Accepted" condition on the
// Route, to indicate whether the route has been accepted or rejected by the
// Gateway, and why.
//
// A Route MUST be considered "Accepted" if at least one of the Route's
// rules is implemented by the Gateway.
//
// There are a number of cases where the "Accepted" condition may not be set
// due to lack of controller visibility, that includes when:
//
// * The Route refers to a non-existent parent.
// * The Route is of a type that the controller does not support.
// * The Route is in a namespace the controller does not have access to.
func (o GRPCRouteStatusParentsOutput) Conditions() GRPCRouteStatusParentsConditionsArrayOutput {
	return o.ApplyT(func(v GRPCRouteStatusParents) []GRPCRouteStatusParentsConditions { return v.Conditions }).(GRPCRouteStatusParentsConditionsArrayOutput)
}

// ControllerName is a domain/path string that indicates the name of the
// controller that wrote this status. This corresponds with the
// controllerName field on GatewayClass.
//
// Example: "example.net/gateway-controller".
//
// The format of this field is DOMAIN "/" PATH, where DOMAIN and PATH are
// valid Kubernetes names
// (https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names).
//
// Controllers MUST populate this field when writing status. Controllers should ensure that
// entries to status populated with their ControllerName are cleaned up when they are no
// longer necessary.
func (o GRPCRouteStatusParentsOutput) ControllerName() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteStatusParents) string { return v.ControllerName }).(pulumi.StringOutput)
}

// ParentRef corresponds with a ParentRef in the spec that this
// RouteParentStatus struct describes the status of.
func (o GRPCRouteStatusParentsOutput) ParentRef() GRPCRouteStatusParentsParentRefOutput {
	return o.ApplyT(func(v GRPCRouteStatusParents) GRPCRouteStatusParentsParentRef { return v.ParentRef }).(GRPCRouteStatusParentsParentRefOutput)
}

type GRPCRouteStatusParentsArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteStatusParentsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteStatusParents)(nil)).Elem()
}

func (o GRPCRouteStatusParentsArrayOutput) ToGRPCRouteStatusParentsArrayOutput() GRPCRouteStatusParentsArrayOutput {
	return o
}

func (o GRPCRouteStatusParentsArrayOutput) ToGRPCRouteStatusParentsArrayOutputWithContext(ctx context.Context) GRPCRouteStatusParentsArrayOutput {
	return o
}

func (o GRPCRouteStatusParentsArrayOutput) Index(i pulumi.IntInput) GRPCRouteStatusParentsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteStatusParents {
		return vs[0].([]GRPCRouteStatusParents)[vs[1].(int)]
	}).(GRPCRouteStatusParentsOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
// ---
// This struct is intended for direct use as an array at the field path .status.conditions.  For example,
//
//	type FooStatus struct{
//	    // Represents the observations of a foo's current state.
//	    // Known .status.conditions.type are: "Available", "Progressing", and "Degraded"
//	    // +patchMergeKey=type
//	    // +patchStrategy=merge
//	    // +listType=map
//	    // +listMapKey=type
//	    Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`
//
//
//	    // other fields
//	}
type GRPCRouteStatusParentsConditions struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime string `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message string `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason string `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	// ---
	// Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
	// useful (see .node.status.conditions), the ability to deconflict is important.
	// The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
	Type string `pulumi:"type"`
}

// GRPCRouteStatusParentsConditionsInput is an input type that accepts GRPCRouteStatusParentsConditionsArgs and GRPCRouteStatusParentsConditionsOutput values.
// You can construct a concrete instance of `GRPCRouteStatusParentsConditionsInput` via:
//
//	GRPCRouteStatusParentsConditionsArgs{...}
type GRPCRouteStatusParentsConditionsInput interface {
	pulumi.Input

	ToGRPCRouteStatusParentsConditionsOutput() GRPCRouteStatusParentsConditionsOutput
	ToGRPCRouteStatusParentsConditionsOutputWithContext(context.Context) GRPCRouteStatusParentsConditionsOutput
}

// Condition contains details for one aspect of the current state of this API Resource.
// ---
// This struct is intended for direct use as an array at the field path .status.conditions.  For example,
//
//	type FooStatus struct{
//	    // Represents the observations of a foo's current state.
//	    // Known .status.conditions.type are: "Available", "Progressing", and "Degraded"
//	    // +patchMergeKey=type
//	    // +patchStrategy=merge
//	    // +listType=map
//	    // +listMapKey=type
//	    Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`
//
//
//	    // other fields
//	}
type GRPCRouteStatusParentsConditionsArgs struct {
	// lastTransitionTime is the last time the condition transitioned from one status to another.
	// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
	LastTransitionTime pulumi.StringInput `pulumi:"lastTransitionTime"`
	// message is a human readable message indicating details about the transition.
	// This may be an empty string.
	Message pulumi.StringInput `pulumi:"message"`
	// observedGeneration represents the .metadata.generation that the condition was set based upon.
	// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
	// with respect to the current state of the instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// reason contains a programmatic identifier indicating the reason for the condition's last transition.
	// Producers of specific condition types may define expected values and meanings for this field,
	// and whether the values are considered a guaranteed API.
	// The value should be a CamelCase string.
	// This field may not be empty.
	Reason pulumi.StringInput `pulumi:"reason"`
	// status of the condition, one of True, False, Unknown.
	Status pulumi.StringInput `pulumi:"status"`
	// type of condition in CamelCase or in foo.example.com/CamelCase.
	// ---
	// Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
	// useful (see .node.status.conditions), the ability to deconflict is important.
	// The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
	Type pulumi.StringInput `pulumi:"type"`
}

func (GRPCRouteStatusParentsConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteStatusParentsConditions)(nil)).Elem()
}

func (i GRPCRouteStatusParentsConditionsArgs) ToGRPCRouteStatusParentsConditionsOutput() GRPCRouteStatusParentsConditionsOutput {
	return i.ToGRPCRouteStatusParentsConditionsOutputWithContext(context.Background())
}

func (i GRPCRouteStatusParentsConditionsArgs) ToGRPCRouteStatusParentsConditionsOutputWithContext(ctx context.Context) GRPCRouteStatusParentsConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteStatusParentsConditionsOutput)
}

// GRPCRouteStatusParentsConditionsArrayInput is an input type that accepts GRPCRouteStatusParentsConditionsArray and GRPCRouteStatusParentsConditionsArrayOutput values.
// You can construct a concrete instance of `GRPCRouteStatusParentsConditionsArrayInput` via:
//
//	GRPCRouteStatusParentsConditionsArray{ GRPCRouteStatusParentsConditionsArgs{...} }
type GRPCRouteStatusParentsConditionsArrayInput interface {
	pulumi.Input

	ToGRPCRouteStatusParentsConditionsArrayOutput() GRPCRouteStatusParentsConditionsArrayOutput
	ToGRPCRouteStatusParentsConditionsArrayOutputWithContext(context.Context) GRPCRouteStatusParentsConditionsArrayOutput
}

type GRPCRouteStatusParentsConditionsArray []GRPCRouteStatusParentsConditionsInput

func (GRPCRouteStatusParentsConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteStatusParentsConditions)(nil)).Elem()
}

func (i GRPCRouteStatusParentsConditionsArray) ToGRPCRouteStatusParentsConditionsArrayOutput() GRPCRouteStatusParentsConditionsArrayOutput {
	return i.ToGRPCRouteStatusParentsConditionsArrayOutputWithContext(context.Background())
}

func (i GRPCRouteStatusParentsConditionsArray) ToGRPCRouteStatusParentsConditionsArrayOutputWithContext(ctx context.Context) GRPCRouteStatusParentsConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteStatusParentsConditionsArrayOutput)
}

// Condition contains details for one aspect of the current state of this API Resource.
// ---
// This struct is intended for direct use as an array at the field path .status.conditions.  For example,
//
//	type FooStatus struct{
//	    // Represents the observations of a foo's current state.
//	    // Known .status.conditions.type are: "Available", "Progressing", and "Degraded"
//	    // +patchMergeKey=type
//	    // +patchStrategy=merge
//	    // +listType=map
//	    // +listMapKey=type
//	    Conditions []metav1.Condition `json:"conditions,omitempty" patchStrategy:"merge" patchMergeKey:"type" protobuf:"bytes,1,rep,name=conditions"`
//
//
//	    // other fields
//	}
type GRPCRouteStatusParentsConditionsOutput struct{ *pulumi.OutputState }

func (GRPCRouteStatusParentsConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteStatusParentsConditions)(nil)).Elem()
}

func (o GRPCRouteStatusParentsConditionsOutput) ToGRPCRouteStatusParentsConditionsOutput() GRPCRouteStatusParentsConditionsOutput {
	return o
}

func (o GRPCRouteStatusParentsConditionsOutput) ToGRPCRouteStatusParentsConditionsOutputWithContext(ctx context.Context) GRPCRouteStatusParentsConditionsOutput {
	return o
}

// lastTransitionTime is the last time the condition transitioned from one status to another.
// This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
func (o GRPCRouteStatusParentsConditionsOutput) LastTransitionTime() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsConditions) string { return v.LastTransitionTime }).(pulumi.StringOutput)
}

// message is a human readable message indicating details about the transition.
// This may be an empty string.
func (o GRPCRouteStatusParentsConditionsOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsConditions) string { return v.Message }).(pulumi.StringOutput)
}

// observedGeneration represents the .metadata.generation that the condition was set based upon.
// For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
// with respect to the current state of the instance.
func (o GRPCRouteStatusParentsConditionsOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsConditions) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// reason contains a programmatic identifier indicating the reason for the condition's last transition.
// Producers of specific condition types may define expected values and meanings for this field,
// and whether the values are considered a guaranteed API.
// The value should be a CamelCase string.
// This field may not be empty.
func (o GRPCRouteStatusParentsConditionsOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsConditions) string { return v.Reason }).(pulumi.StringOutput)
}

// status of the condition, one of True, False, Unknown.
func (o GRPCRouteStatusParentsConditionsOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsConditions) string { return v.Status }).(pulumi.StringOutput)
}

// type of condition in CamelCase or in foo.example.com/CamelCase.
// ---
// Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
// useful (see .node.status.conditions), the ability to deconflict is important.
// The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
func (o GRPCRouteStatusParentsConditionsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsConditions) string { return v.Type }).(pulumi.StringOutput)
}

type GRPCRouteStatusParentsConditionsArrayOutput struct{ *pulumi.OutputState }

func (GRPCRouteStatusParentsConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GRPCRouteStatusParentsConditions)(nil)).Elem()
}

func (o GRPCRouteStatusParentsConditionsArrayOutput) ToGRPCRouteStatusParentsConditionsArrayOutput() GRPCRouteStatusParentsConditionsArrayOutput {
	return o
}

func (o GRPCRouteStatusParentsConditionsArrayOutput) ToGRPCRouteStatusParentsConditionsArrayOutputWithContext(ctx context.Context) GRPCRouteStatusParentsConditionsArrayOutput {
	return o
}

func (o GRPCRouteStatusParentsConditionsArrayOutput) Index(i pulumi.IntInput) GRPCRouteStatusParentsConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GRPCRouteStatusParentsConditions {
		return vs[0].([]GRPCRouteStatusParentsConditions)[vs[1].(int)]
	}).(GRPCRouteStatusParentsConditionsOutput)
}

// ParentRef corresponds with a ParentRef in the spec that this
// RouteParentStatus struct describes the status of.
type GRPCRouteStatusParentsParentRef struct {
	// Group is the group of the referent.
	// When unspecified, "gateway.networking.k8s.io" is inferred.
	// To set the core API group (such as for a "Service" kind referent),
	// Group must be explicitly set to "" (empty string).
	//
	// Support: Core
	Group *string `pulumi:"group"`
	// Kind is kind of the referent.
	//
	// There are two kinds of parent resources with "Core" support:
	//
	// * Gateway (Gateway conformance profile)
	// * Service (Mesh conformance profile, ClusterIP Services only)
	//
	// Support for other resources is Implementation-Specific.
	Kind *string `pulumi:"kind"`
	// Name is the name of the referent.
	//
	// Support: Core
	Name string `pulumi:"name"`
	// Namespace is the namespace of the referent. When unspecified, this refers
	// to the local namespace of the Route.
	//
	// Note that there are specific rules for ParentRefs which cross namespace
	// boundaries. Cross-namespace references are only valid if they are explicitly
	// allowed by something in the namespace they are referring to. For example:
	// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
	// generic way to enable any other kind of cross-namespace reference.
	//
	// Support: Core
	Namespace *string `pulumi:"namespace"`
	// Port is the network port this Route targets. It can be interpreted
	// differently based on the type of parent resource.
	//
	// When the parent resource is a Gateway, this targets all listeners
	// listening on the specified port that also support this kind of Route(and
	// select this Route). It's not recommended to set `Port` unless the
	// networking behaviors specified in a Route must apply to a specific port
	// as opposed to a listener(s) whose port(s) may be changed. When both Port
	// and SectionName are specified, the name and port of the selected listener
	// must match both specified values.
	//
	// Implementations MAY choose to support other parent resources.
	// Implementations supporting other types of parent resources MUST clearly
	// document how/if Port is interpreted.
	//
	// For the purpose of status, an attachment is considered successful as
	// long as the parent resource accepts it partially. For example, Gateway
	// listeners can restrict which Routes can attach to them by Route kind,
	// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
	// from the referencing Route, the Route MUST be considered successfully
	// attached. If no Gateway listeners accept attachment from this Route,
	// the Route MUST be considered detached from the Gateway.
	//
	// Support: Extended
	Port *int `pulumi:"port"`
	// SectionName is the name of a section within the target resource. In the
	// following resources, SectionName is interpreted as the following:
	//
	// * Gateway: Listener name. When both Port (experimental) and SectionName
	//   are specified, the name and port of the selected listener must match
	//   both specified values.
	// * Service: Port name. When both Port (experimental) and SectionName
	//   are specified, the name and port of the selected listener must match
	//   both specified values.
	//
	// Implementations MAY choose to support attaching Routes to other resources.
	// If that is the case, they MUST clearly document how SectionName is
	// interpreted.
	//
	// When unspecified (empty string), this will reference the entire resource.
	// For the purpose of status, an attachment is considered successful if at
	// least one section in the parent resource accepts it. For example, Gateway
	// listeners can restrict which Routes can attach to them by Route kind,
	// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
	// the referencing Route, the Route MUST be considered successfully
	// attached. If no Gateway listeners accept attachment from this Route, the
	// Route MUST be considered detached from the Gateway.
	//
	// Support: Core
	SectionName *string `pulumi:"sectionName"`
}

// Defaults sets the appropriate defaults for GRPCRouteStatusParentsParentRef
func (val *GRPCRouteStatusParentsParentRef) Defaults() *GRPCRouteStatusParentsParentRef {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Group == nil {
		group_ := "gateway.networking.k8s.io"
		tmp.Group = &group_
	}
	if tmp.Kind == nil {
		kind_ := "Gateway"
		tmp.Kind = &kind_
	}
	return &tmp
}

// GRPCRouteStatusParentsParentRefInput is an input type that accepts GRPCRouteStatusParentsParentRefArgs and GRPCRouteStatusParentsParentRefOutput values.
// You can construct a concrete instance of `GRPCRouteStatusParentsParentRefInput` via:
//
//	GRPCRouteStatusParentsParentRefArgs{...}
type GRPCRouteStatusParentsParentRefInput interface {
	pulumi.Input

	ToGRPCRouteStatusParentsParentRefOutput() GRPCRouteStatusParentsParentRefOutput
	ToGRPCRouteStatusParentsParentRefOutputWithContext(context.Context) GRPCRouteStatusParentsParentRefOutput
}

// ParentRef corresponds with a ParentRef in the spec that this
// RouteParentStatus struct describes the status of.
type GRPCRouteStatusParentsParentRefArgs struct {
	// Group is the group of the referent.
	// When unspecified, "gateway.networking.k8s.io" is inferred.
	// To set the core API group (such as for a "Service" kind referent),
	// Group must be explicitly set to "" (empty string).
	//
	// Support: Core
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Kind is kind of the referent.
	//
	// There are two kinds of parent resources with "Core" support:
	//
	// * Gateway (Gateway conformance profile)
	// * Service (Mesh conformance profile, ClusterIP Services only)
	//
	// Support for other resources is Implementation-Specific.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of the referent.
	//
	// Support: Core
	Name pulumi.StringInput `pulumi:"name"`
	// Namespace is the namespace of the referent. When unspecified, this refers
	// to the local namespace of the Route.
	//
	// Note that there are specific rules for ParentRefs which cross namespace
	// boundaries. Cross-namespace references are only valid if they are explicitly
	// allowed by something in the namespace they are referring to. For example:
	// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
	// generic way to enable any other kind of cross-namespace reference.
	//
	// Support: Core
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Port is the network port this Route targets. It can be interpreted
	// differently based on the type of parent resource.
	//
	// When the parent resource is a Gateway, this targets all listeners
	// listening on the specified port that also support this kind of Route(and
	// select this Route). It's not recommended to set `Port` unless the
	// networking behaviors specified in a Route must apply to a specific port
	// as opposed to a listener(s) whose port(s) may be changed. When both Port
	// and SectionName are specified, the name and port of the selected listener
	// must match both specified values.
	//
	// Implementations MAY choose to support other parent resources.
	// Implementations supporting other types of parent resources MUST clearly
	// document how/if Port is interpreted.
	//
	// For the purpose of status, an attachment is considered successful as
	// long as the parent resource accepts it partially. For example, Gateway
	// listeners can restrict which Routes can attach to them by Route kind,
	// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
	// from the referencing Route, the Route MUST be considered successfully
	// attached. If no Gateway listeners accept attachment from this Route,
	// the Route MUST be considered detached from the Gateway.
	//
	// Support: Extended
	Port pulumi.IntPtrInput `pulumi:"port"`
	// SectionName is the name of a section within the target resource. In the
	// following resources, SectionName is interpreted as the following:
	//
	// * Gateway: Listener name. When both Port (experimental) and SectionName
	//   are specified, the name and port of the selected listener must match
	//   both specified values.
	// * Service: Port name. When both Port (experimental) and SectionName
	//   are specified, the name and port of the selected listener must match
	//   both specified values.
	//
	// Implementations MAY choose to support attaching Routes to other resources.
	// If that is the case, they MUST clearly document how SectionName is
	// interpreted.
	//
	// When unspecified (empty string), this will reference the entire resource.
	// For the purpose of status, an attachment is considered successful if at
	// least one section in the parent resource accepts it. For example, Gateway
	// listeners can restrict which Routes can attach to them by Route kind,
	// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
	// the referencing Route, the Route MUST be considered successfully
	// attached. If no Gateway listeners accept attachment from this Route, the
	// Route MUST be considered detached from the Gateway.
	//
	// Support: Core
	SectionName pulumi.StringPtrInput `pulumi:"sectionName"`
}

// Defaults sets the appropriate defaults for GRPCRouteStatusParentsParentRefArgs
func (val *GRPCRouteStatusParentsParentRefArgs) Defaults() *GRPCRouteStatusParentsParentRefArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Group == nil {
		tmp.Group = pulumi.StringPtr("gateway.networking.k8s.io")
	}
	if tmp.Kind == nil {
		tmp.Kind = pulumi.StringPtr("Gateway")
	}
	return &tmp
}
func (GRPCRouteStatusParentsParentRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteStatusParentsParentRef)(nil)).Elem()
}

func (i GRPCRouteStatusParentsParentRefArgs) ToGRPCRouteStatusParentsParentRefOutput() GRPCRouteStatusParentsParentRefOutput {
	return i.ToGRPCRouteStatusParentsParentRefOutputWithContext(context.Background())
}

func (i GRPCRouteStatusParentsParentRefArgs) ToGRPCRouteStatusParentsParentRefOutputWithContext(ctx context.Context) GRPCRouteStatusParentsParentRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GRPCRouteStatusParentsParentRefOutput)
}

// ParentRef corresponds with a ParentRef in the spec that this
// RouteParentStatus struct describes the status of.
type GRPCRouteStatusParentsParentRefOutput struct{ *pulumi.OutputState }

func (GRPCRouteStatusParentsParentRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GRPCRouteStatusParentsParentRef)(nil)).Elem()
}

func (o GRPCRouteStatusParentsParentRefOutput) ToGRPCRouteStatusParentsParentRefOutput() GRPCRouteStatusParentsParentRefOutput {
	return o
}

func (o GRPCRouteStatusParentsParentRefOutput) ToGRPCRouteStatusParentsParentRefOutputWithContext(ctx context.Context) GRPCRouteStatusParentsParentRefOutput {
	return o
}

// Group is the group of the referent.
// When unspecified, "gateway.networking.k8s.io" is inferred.
// To set the core API group (such as for a "Service" kind referent),
// Group must be explicitly set to "" (empty string).
//
// Support: Core
func (o GRPCRouteStatusParentsParentRefOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsParentRef) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Kind is kind of the referent.
//
// There are two kinds of parent resources with "Core" support:
//
// * Gateway (Gateway conformance profile)
// * Service (Mesh conformance profile, ClusterIP Services only)
//
// Support for other resources is Implementation-Specific.
func (o GRPCRouteStatusParentsParentRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsParentRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of the referent.
//
// Support: Core
func (o GRPCRouteStatusParentsParentRefOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsParentRef) string { return v.Name }).(pulumi.StringOutput)
}

// Namespace is the namespace of the referent. When unspecified, this refers
// to the local namespace of the Route.
//
// Note that there are specific rules for ParentRefs which cross namespace
// boundaries. Cross-namespace references are only valid if they are explicitly
// allowed by something in the namespace they are referring to. For example:
// Gateway has the AllowedRoutes field, and ReferenceGrant provides a
// generic way to enable any other kind of cross-namespace reference.
//
// Support: Core
func (o GRPCRouteStatusParentsParentRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsParentRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Port is the network port this Route targets. It can be interpreted
// differently based on the type of parent resource.
//
// When the parent resource is a Gateway, this targets all listeners
// listening on the specified port that also support this kind of Route(and
// select this Route). It's not recommended to set `Port` unless the
// networking behaviors specified in a Route must apply to a specific port
// as opposed to a listener(s) whose port(s) may be changed. When both Port
// and SectionName are specified, the name and port of the selected listener
// must match both specified values.
//
// Implementations MAY choose to support other parent resources.
// Implementations supporting other types of parent resources MUST clearly
// document how/if Port is interpreted.
//
// For the purpose of status, an attachment is considered successful as
// long as the parent resource accepts it partially. For example, Gateway
// listeners can restrict which Routes can attach to them by Route kind,
// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment
// from the referencing Route, the Route MUST be considered successfully
// attached. If no Gateway listeners accept attachment from this Route,
// the Route MUST be considered detached from the Gateway.
//
// Support: Extended
func (o GRPCRouteStatusParentsParentRefOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsParentRef) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// SectionName is the name of a section within the target resource. In the
// following resources, SectionName is interpreted as the following:
//
//   - Gateway: Listener name. When both Port (experimental) and SectionName
//     are specified, the name and port of the selected listener must match
//     both specified values.
//   - Service: Port name. When both Port (experimental) and SectionName
//     are specified, the name and port of the selected listener must match
//     both specified values.
//
// Implementations MAY choose to support attaching Routes to other resources.
// If that is the case, they MUST clearly document how SectionName is
// interpreted.
//
// When unspecified (empty string), this will reference the entire resource.
// For the purpose of status, an attachment is considered successful if at
// least one section in the parent resource accepts it. For example, Gateway
// listeners can restrict which Routes can attach to them by Route kind,
// namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from
// the referencing Route, the Route MUST be considered successfully
// attached. If no Gateway listeners accept attachment from this Route, the
// Route MUST be considered detached from the Gateway.
//
// Support: Core
func (o GRPCRouteStatusParentsParentRefOutput) SectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GRPCRouteStatusParentsParentRef) *string { return v.SectionName }).(pulumi.StringPtrOutput)
}

// ReferenceGrant identifies kinds of resources in other namespaces that are
// trusted to reference the specified kinds of resources in the same namespace
// as the policy.
//
// Each ReferenceGrant can be used to represent a unique trust relationship.
// Additional Reference Grants can be used to add to the set of trusted
// sources of inbound references for the namespace they are defined within.
//
// A ReferenceGrant is required for all cross-namespace references in Gateway API
// (with the exception of cross-namespace Route-Gateway attachment, which is
// governed by the AllowedRoutes configuration on the Gateway, and cross-namespace
// Service ParentRefs on a "consumer" mesh Route, which defines routing rules
// applicable only to workloads in the Route namespace). ReferenceGrants allowing
// a reference from a Route to a Service are only applicable to BackendRefs.
//
// ReferenceGrant is a form of runtime verification allowing users to assert
// which cross-namespace object references are permitted. Implementations that
// support ReferenceGrant MUST NOT permit cross-namespace references which have
// no grant, and MUST respond to the removal of a grant by revoking the access
// that the grant allowed.
type ReferenceGrantType struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec defines the desired state of ReferenceGrant.
	Spec *ReferenceGrantSpec `pulumi:"spec"`
}

type ReferenceGrantMetadata struct {
}

// Spec defines the desired state of ReferenceGrant.
type ReferenceGrantSpec struct {
	// From describes the trusted namespaces and kinds that can reference the
	// resources described in "To". Each entry in this list MUST be considered
	// to be an additional place that references can be valid from, or to put
	// this another way, entries MUST be combined using OR.
	//
	// Support: Core
	From []ReferenceGrantSpecFrom `pulumi:"from"`
	// To describes the resources that may be referenced by the resources
	// described in "From". Each entry in this list MUST be considered to be an
	// additional place that references can be valid to, or to put this another
	// way, entries MUST be combined using OR.
	//
	// Support: Core
	To []ReferenceGrantSpecTo `pulumi:"to"`
}

// ReferenceGrantSpecInput is an input type that accepts ReferenceGrantSpecArgs and ReferenceGrantSpecOutput values.
// You can construct a concrete instance of `ReferenceGrantSpecInput` via:
//
//	ReferenceGrantSpecArgs{...}
type ReferenceGrantSpecInput interface {
	pulumi.Input

	ToReferenceGrantSpecOutput() ReferenceGrantSpecOutput
	ToReferenceGrantSpecOutputWithContext(context.Context) ReferenceGrantSpecOutput
}

// Spec defines the desired state of ReferenceGrant.
type ReferenceGrantSpecArgs struct {
	// From describes the trusted namespaces and kinds that can reference the
	// resources described in "To". Each entry in this list MUST be considered
	// to be an additional place that references can be valid from, or to put
	// this another way, entries MUST be combined using OR.
	//
	// Support: Core
	From ReferenceGrantSpecFromArrayInput `pulumi:"from"`
	// To describes the resources that may be referenced by the resources
	// described in "From". Each entry in this list MUST be considered to be an
	// additional place that references can be valid to, or to put this another
	// way, entries MUST be combined using OR.
	//
	// Support: Core
	To ReferenceGrantSpecToArrayInput `pulumi:"to"`
}

func (ReferenceGrantSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceGrantSpec)(nil)).Elem()
}

func (i ReferenceGrantSpecArgs) ToReferenceGrantSpecOutput() ReferenceGrantSpecOutput {
	return i.ToReferenceGrantSpecOutputWithContext(context.Background())
}

func (i ReferenceGrantSpecArgs) ToReferenceGrantSpecOutputWithContext(ctx context.Context) ReferenceGrantSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantSpecOutput)
}

func (i ReferenceGrantSpecArgs) ToReferenceGrantSpecPtrOutput() ReferenceGrantSpecPtrOutput {
	return i.ToReferenceGrantSpecPtrOutputWithContext(context.Background())
}

func (i ReferenceGrantSpecArgs) ToReferenceGrantSpecPtrOutputWithContext(ctx context.Context) ReferenceGrantSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantSpecOutput).ToReferenceGrantSpecPtrOutputWithContext(ctx)
}

// ReferenceGrantSpecPtrInput is an input type that accepts ReferenceGrantSpecArgs, ReferenceGrantSpecPtr and ReferenceGrantSpecPtrOutput values.
// You can construct a concrete instance of `ReferenceGrantSpecPtrInput` via:
//
//	        ReferenceGrantSpecArgs{...}
//
//	or:
//
//	        nil
type ReferenceGrantSpecPtrInput interface {
	pulumi.Input

	ToReferenceGrantSpecPtrOutput() ReferenceGrantSpecPtrOutput
	ToReferenceGrantSpecPtrOutputWithContext(context.Context) ReferenceGrantSpecPtrOutput
}

type referenceGrantSpecPtrType ReferenceGrantSpecArgs

func ReferenceGrantSpecPtr(v *ReferenceGrantSpecArgs) ReferenceGrantSpecPtrInput {
	return (*referenceGrantSpecPtrType)(v)
}

func (*referenceGrantSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceGrantSpec)(nil)).Elem()
}

func (i *referenceGrantSpecPtrType) ToReferenceGrantSpecPtrOutput() ReferenceGrantSpecPtrOutput {
	return i.ToReferenceGrantSpecPtrOutputWithContext(context.Background())
}

func (i *referenceGrantSpecPtrType) ToReferenceGrantSpecPtrOutputWithContext(ctx context.Context) ReferenceGrantSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantSpecPtrOutput)
}

// Spec defines the desired state of ReferenceGrant.
type ReferenceGrantSpecOutput struct{ *pulumi.OutputState }

func (ReferenceGrantSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceGrantSpec)(nil)).Elem()
}

func (o ReferenceGrantSpecOutput) ToReferenceGrantSpecOutput() ReferenceGrantSpecOutput {
	return o
}

func (o ReferenceGrantSpecOutput) ToReferenceGrantSpecOutputWithContext(ctx context.Context) ReferenceGrantSpecOutput {
	return o
}

func (o ReferenceGrantSpecOutput) ToReferenceGrantSpecPtrOutput() ReferenceGrantSpecPtrOutput {
	return o.ToReferenceGrantSpecPtrOutputWithContext(context.Background())
}

func (o ReferenceGrantSpecOutput) ToReferenceGrantSpecPtrOutputWithContext(ctx context.Context) ReferenceGrantSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReferenceGrantSpec) *ReferenceGrantSpec {
		return &v
	}).(ReferenceGrantSpecPtrOutput)
}

// From describes the trusted namespaces and kinds that can reference the
// resources described in "To". Each entry in this list MUST be considered
// to be an additional place that references can be valid from, or to put
// this another way, entries MUST be combined using OR.
//
// Support: Core
func (o ReferenceGrantSpecOutput) From() ReferenceGrantSpecFromArrayOutput {
	return o.ApplyT(func(v ReferenceGrantSpec) []ReferenceGrantSpecFrom { return v.From }).(ReferenceGrantSpecFromArrayOutput)
}

// To describes the resources that may be referenced by the resources
// described in "From". Each entry in this list MUST be considered to be an
// additional place that references can be valid to, or to put this another
// way, entries MUST be combined using OR.
//
// Support: Core
func (o ReferenceGrantSpecOutput) To() ReferenceGrantSpecToArrayOutput {
	return o.ApplyT(func(v ReferenceGrantSpec) []ReferenceGrantSpecTo { return v.To }).(ReferenceGrantSpecToArrayOutput)
}

type ReferenceGrantSpecPtrOutput struct{ *pulumi.OutputState }

func (ReferenceGrantSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReferenceGrantSpec)(nil)).Elem()
}

func (o ReferenceGrantSpecPtrOutput) ToReferenceGrantSpecPtrOutput() ReferenceGrantSpecPtrOutput {
	return o
}

func (o ReferenceGrantSpecPtrOutput) ToReferenceGrantSpecPtrOutputWithContext(ctx context.Context) ReferenceGrantSpecPtrOutput {
	return o
}

func (o ReferenceGrantSpecPtrOutput) Elem() ReferenceGrantSpecOutput {
	return o.ApplyT(func(v *ReferenceGrantSpec) ReferenceGrantSpec {
		if v != nil {
			return *v
		}
		var ret ReferenceGrantSpec
		return ret
	}).(ReferenceGrantSpecOutput)
}

// From describes the trusted namespaces and kinds that can reference the
// resources described in "To". Each entry in this list MUST be considered
// to be an additional place that references can be valid from, or to put
// this another way, entries MUST be combined using OR.
//
// Support: Core
func (o ReferenceGrantSpecPtrOutput) From() ReferenceGrantSpecFromArrayOutput {
	return o.ApplyT(func(v *ReferenceGrantSpec) []ReferenceGrantSpecFrom {
		if v == nil {
			return nil
		}
		return v.From
	}).(ReferenceGrantSpecFromArrayOutput)
}

// To describes the resources that may be referenced by the resources
// described in "From". Each entry in this list MUST be considered to be an
// additional place that references can be valid to, or to put this another
// way, entries MUST be combined using OR.
//
// Support: Core
func (o ReferenceGrantSpecPtrOutput) To() ReferenceGrantSpecToArrayOutput {
	return o.ApplyT(func(v *ReferenceGrantSpec) []ReferenceGrantSpecTo {
		if v == nil {
			return nil
		}
		return v.To
	}).(ReferenceGrantSpecToArrayOutput)
}

// ReferenceGrantFrom describes trusted namespaces and kinds.
type ReferenceGrantSpecFrom struct {
	// Group is the group of the referent.
	// When empty, the Kubernetes core API group is inferred.
	//
	// Support: Core
	Group string `pulumi:"group"`
	// Kind is the kind of the referent. Although implementations may support
	// additional resources, the following types are part of the "Core"
	// support level for this field.
	//
	// When used to permit a SecretObjectReference:
	//
	// * Gateway
	//
	// When used to permit a BackendObjectReference:
	//
	// * GRPCRoute
	// * HTTPRoute
	// * TCPRoute
	// * TLSRoute
	// * UDPRoute
	Kind string `pulumi:"kind"`
	// Namespace is the namespace of the referent.
	//
	// Support: Core
	Namespace string `pulumi:"namespace"`
}

// ReferenceGrantSpecFromInput is an input type that accepts ReferenceGrantSpecFromArgs and ReferenceGrantSpecFromOutput values.
// You can construct a concrete instance of `ReferenceGrantSpecFromInput` via:
//
//	ReferenceGrantSpecFromArgs{...}
type ReferenceGrantSpecFromInput interface {
	pulumi.Input

	ToReferenceGrantSpecFromOutput() ReferenceGrantSpecFromOutput
	ToReferenceGrantSpecFromOutputWithContext(context.Context) ReferenceGrantSpecFromOutput
}

// ReferenceGrantFrom describes trusted namespaces and kinds.
type ReferenceGrantSpecFromArgs struct {
	// Group is the group of the referent.
	// When empty, the Kubernetes core API group is inferred.
	//
	// Support: Core
	Group pulumi.StringInput `pulumi:"group"`
	// Kind is the kind of the referent. Although implementations may support
	// additional resources, the following types are part of the "Core"
	// support level for this field.
	//
	// When used to permit a SecretObjectReference:
	//
	// * Gateway
	//
	// When used to permit a BackendObjectReference:
	//
	// * GRPCRoute
	// * HTTPRoute
	// * TCPRoute
	// * TLSRoute
	// * UDPRoute
	Kind pulumi.StringInput `pulumi:"kind"`
	// Namespace is the namespace of the referent.
	//
	// Support: Core
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (ReferenceGrantSpecFromArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceGrantSpecFrom)(nil)).Elem()
}

func (i ReferenceGrantSpecFromArgs) ToReferenceGrantSpecFromOutput() ReferenceGrantSpecFromOutput {
	return i.ToReferenceGrantSpecFromOutputWithContext(context.Background())
}

func (i ReferenceGrantSpecFromArgs) ToReferenceGrantSpecFromOutputWithContext(ctx context.Context) ReferenceGrantSpecFromOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantSpecFromOutput)
}

// ReferenceGrantSpecFromArrayInput is an input type that accepts ReferenceGrantSpecFromArray and ReferenceGrantSpecFromArrayOutput values.
// You can construct a concrete instance of `ReferenceGrantSpecFromArrayInput` via:
//
//	ReferenceGrantSpecFromArray{ ReferenceGrantSpecFromArgs{...} }
type ReferenceGrantSpecFromArrayInput interface {
	pulumi.Input

	ToReferenceGrantSpecFromArrayOutput() ReferenceGrantSpecFromArrayOutput
	ToReferenceGrantSpecFromArrayOutputWithContext(context.Context) ReferenceGrantSpecFromArrayOutput
}

type ReferenceGrantSpecFromArray []ReferenceGrantSpecFromInput

func (ReferenceGrantSpecFromArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReferenceGrantSpecFrom)(nil)).Elem()
}

func (i ReferenceGrantSpecFromArray) ToReferenceGrantSpecFromArrayOutput() ReferenceGrantSpecFromArrayOutput {
	return i.ToReferenceGrantSpecFromArrayOutputWithContext(context.Background())
}

func (i ReferenceGrantSpecFromArray) ToReferenceGrantSpecFromArrayOutputWithContext(ctx context.Context) ReferenceGrantSpecFromArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantSpecFromArrayOutput)
}

// ReferenceGrantFrom describes trusted namespaces and kinds.
type ReferenceGrantSpecFromOutput struct{ *pulumi.OutputState }

func (ReferenceGrantSpecFromOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceGrantSpecFrom)(nil)).Elem()
}

func (o ReferenceGrantSpecFromOutput) ToReferenceGrantSpecFromOutput() ReferenceGrantSpecFromOutput {
	return o
}

func (o ReferenceGrantSpecFromOutput) ToReferenceGrantSpecFromOutputWithContext(ctx context.Context) ReferenceGrantSpecFromOutput {
	return o
}

// Group is the group of the referent.
// When empty, the Kubernetes core API group is inferred.
//
// Support: Core
func (o ReferenceGrantSpecFromOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v ReferenceGrantSpecFrom) string { return v.Group }).(pulumi.StringOutput)
}

// Kind is the kind of the referent. Although implementations may support
// additional resources, the following types are part of the "Core"
// support level for this field.
//
// When used to permit a SecretObjectReference:
//
// * Gateway
//
// When used to permit a BackendObjectReference:
//
// * GRPCRoute
// * HTTPRoute
// * TCPRoute
// * TLSRoute
// * UDPRoute
func (o ReferenceGrantSpecFromOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ReferenceGrantSpecFrom) string { return v.Kind }).(pulumi.StringOutput)
}

// Namespace is the namespace of the referent.
//
// Support: Core
func (o ReferenceGrantSpecFromOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v ReferenceGrantSpecFrom) string { return v.Namespace }).(pulumi.StringOutput)
}

type ReferenceGrantSpecFromArrayOutput struct{ *pulumi.OutputState }

func (ReferenceGrantSpecFromArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReferenceGrantSpecFrom)(nil)).Elem()
}

func (o ReferenceGrantSpecFromArrayOutput) ToReferenceGrantSpecFromArrayOutput() ReferenceGrantSpecFromArrayOutput {
	return o
}

func (o ReferenceGrantSpecFromArrayOutput) ToReferenceGrantSpecFromArrayOutputWithContext(ctx context.Context) ReferenceGrantSpecFromArrayOutput {
	return o
}

func (o ReferenceGrantSpecFromArrayOutput) Index(i pulumi.IntInput) ReferenceGrantSpecFromOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReferenceGrantSpecFrom {
		return vs[0].([]ReferenceGrantSpecFrom)[vs[1].(int)]
	}).(ReferenceGrantSpecFromOutput)
}

// ReferenceGrantTo describes what Kinds are allowed as targets of the
// references.
type ReferenceGrantSpecTo struct {
	// Group is the group of the referent.
	// When empty, the Kubernetes core API group is inferred.
	//
	// Support: Core
	Group string `pulumi:"group"`
	// Kind is the kind of the referent. Although implementations may support
	// additional resources, the following types are part of the "Core"
	// support level for this field:
	//
	// * Secret when used to permit a SecretObjectReference
	// * Service when used to permit a BackendObjectReference
	Kind string `pulumi:"kind"`
	// Name is the name of the referent. When unspecified, this policy
	// refers to all resources of the specified Group and Kind in the local
	// namespace.
	Name *string `pulumi:"name"`
}

// ReferenceGrantSpecToInput is an input type that accepts ReferenceGrantSpecToArgs and ReferenceGrantSpecToOutput values.
// You can construct a concrete instance of `ReferenceGrantSpecToInput` via:
//
//	ReferenceGrantSpecToArgs{...}
type ReferenceGrantSpecToInput interface {
	pulumi.Input

	ToReferenceGrantSpecToOutput() ReferenceGrantSpecToOutput
	ToReferenceGrantSpecToOutputWithContext(context.Context) ReferenceGrantSpecToOutput
}

// ReferenceGrantTo describes what Kinds are allowed as targets of the
// references.
type ReferenceGrantSpecToArgs struct {
	// Group is the group of the referent.
	// When empty, the Kubernetes core API group is inferred.
	//
	// Support: Core
	Group pulumi.StringInput `pulumi:"group"`
	// Kind is the kind of the referent. Although implementations may support
	// additional resources, the following types are part of the "Core"
	// support level for this field:
	//
	// * Secret when used to permit a SecretObjectReference
	// * Service when used to permit a BackendObjectReference
	Kind pulumi.StringInput `pulumi:"kind"`
	// Name is the name of the referent. When unspecified, this policy
	// refers to all resources of the specified Group and Kind in the local
	// namespace.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ReferenceGrantSpecToArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceGrantSpecTo)(nil)).Elem()
}

func (i ReferenceGrantSpecToArgs) ToReferenceGrantSpecToOutput() ReferenceGrantSpecToOutput {
	return i.ToReferenceGrantSpecToOutputWithContext(context.Background())
}

func (i ReferenceGrantSpecToArgs) ToReferenceGrantSpecToOutputWithContext(ctx context.Context) ReferenceGrantSpecToOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantSpecToOutput)
}

// ReferenceGrantSpecToArrayInput is an input type that accepts ReferenceGrantSpecToArray and ReferenceGrantSpecToArrayOutput values.
// You can construct a concrete instance of `ReferenceGrantSpecToArrayInput` via:
//
//	ReferenceGrantSpecToArray{ ReferenceGrantSpecToArgs{...} }
type ReferenceGrantSpecToArrayInput interface {
	pulumi.Input

	ToReferenceGrantSpecToArrayOutput() ReferenceGrantSpecToArrayOutput
	ToReferenceGrantSpecToArrayOutputWithContext(context.Context) ReferenceGrantSpecToArrayOutput
}

type ReferenceGrantSpecToArray []ReferenceGrantSpecToInput

func (ReferenceGrantSpecToArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReferenceGrantSpecTo)(nil)).Elem()
}

func (i ReferenceGrantSpecToArray) ToReferenceGrantSpecToArrayOutput() ReferenceGrantSpecToArrayOutput {
	return i.ToReferenceGrantSpecToArrayOutputWithContext(context.Background())
}

func (i ReferenceGrantSpecToArray) ToReferenceGrantSpecToArrayOutputWithContext(ctx context.Context) ReferenceGrantSpecToArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReferenceGrantSpecToArrayOutput)
}

// ReferenceGrantTo describes what Kinds are allowed as targets of the
// references.
type ReferenceGrantSpecToOutput struct{ *pulumi.OutputState }

func (ReferenceGrantSpecToOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReferenceGrantSpecTo)(nil)).Elem()
}

func (o ReferenceGrantSpecToOutput) ToReferenceGrantSpecToOutput() ReferenceGrantSpecToOutput {
	return o
}

func (o ReferenceGrantSpecToOutput) ToReferenceGrantSpecToOutputWithContext(ctx context.Context) ReferenceGrantSpecToOutput {
	return o
}

// Group is the group of the referent.
// When empty, the Kubernetes core API group is inferred.
//
// Support: Core
func (o ReferenceGrantSpecToOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v ReferenceGrantSpecTo) string { return v.Group }).(pulumi.StringOutput)
}

// Kind is the kind of the referent. Although implementations may support
// additional resources, the following types are part of the "Core"
// support level for this field:
//
// * Secret when used to permit a SecretObjectReference
// * Service when used to permit a BackendObjectReference
func (o ReferenceGrantSpecToOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ReferenceGrantSpecTo) string { return v.Kind }).(pulumi.StringOutput)
}

// Name is the name of the referent. When unspecified, this policy
// refers to all resources of the specified Group and Kind in the local
// namespace.
func (o ReferenceGrantSpecToOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReferenceGrantSpecTo) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ReferenceGrantSpecToArrayOutput struct{ *pulumi.OutputState }

func (ReferenceGrantSpecToArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReferenceGrantSpecTo)(nil)).Elem()
}

func (o ReferenceGrantSpecToArrayOutput) ToReferenceGrantSpecToArrayOutput() ReferenceGrantSpecToArrayOutput {
	return o
}

func (o ReferenceGrantSpecToArrayOutput) ToReferenceGrantSpecToArrayOutputWithContext(ctx context.Context) ReferenceGrantSpecToArrayOutput {
	return o
}

func (o ReferenceGrantSpecToArrayOutput) Index(i pulumi.IntInput) ReferenceGrantSpecToOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReferenceGrantSpecTo {
		return vs[0].([]ReferenceGrantSpecTo)[vs[1].(int)]
	}).(ReferenceGrantSpecToOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecInput)(nil)).Elem(), GRPCRouteSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecPtrInput)(nil)).Elem(), GRPCRouteSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecParentRefsInput)(nil)).Elem(), GRPCRouteSpecParentRefsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecParentRefsArrayInput)(nil)).Elem(), GRPCRouteSpecParentRefsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesInput)(nil)).Elem(), GRPCRouteSpecRulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesArrayInput)(nil)).Elem(), GRPCRouteSpecRulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsArrayInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersArrayInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersExtensionRefInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersExtensionRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayInput)(nil)).Elem(), GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersArrayInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersExtensionRefInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersExtensionRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersExtensionRefPtrInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersExtensionRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersRequestHeaderModifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierAddInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierSetInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestMirrorInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersRequestMirrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestMirrorPtrInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersRequestMirrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestMirrorBackendRefInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersRequestMirrorBackendRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersResponseHeaderModifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierAddInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierSetInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayInput)(nil)).Elem(), GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesMatchesInput)(nil)).Elem(), GRPCRouteSpecRulesMatchesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesMatchesArrayInput)(nil)).Elem(), GRPCRouteSpecRulesMatchesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesMatchesHeadersInput)(nil)).Elem(), GRPCRouteSpecRulesMatchesHeadersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesMatchesHeadersArrayInput)(nil)).Elem(), GRPCRouteSpecRulesMatchesHeadersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesMatchesMethodInput)(nil)).Elem(), GRPCRouteSpecRulesMatchesMethodArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteSpecRulesMatchesMethodPtrInput)(nil)).Elem(), GRPCRouteSpecRulesMatchesMethodArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteStatusInput)(nil)).Elem(), GRPCRouteStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteStatusPtrInput)(nil)).Elem(), GRPCRouteStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteStatusParentsInput)(nil)).Elem(), GRPCRouteStatusParentsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteStatusParentsArrayInput)(nil)).Elem(), GRPCRouteStatusParentsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteStatusParentsConditionsInput)(nil)).Elem(), GRPCRouteStatusParentsConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteStatusParentsConditionsArrayInput)(nil)).Elem(), GRPCRouteStatusParentsConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GRPCRouteStatusParentsParentRefInput)(nil)).Elem(), GRPCRouteStatusParentsParentRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantSpecInput)(nil)).Elem(), ReferenceGrantSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantSpecPtrInput)(nil)).Elem(), ReferenceGrantSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantSpecFromInput)(nil)).Elem(), ReferenceGrantSpecFromArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantSpecFromArrayInput)(nil)).Elem(), ReferenceGrantSpecFromArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantSpecToInput)(nil)).Elem(), ReferenceGrantSpecToArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReferenceGrantSpecToArrayInput)(nil)).Elem(), ReferenceGrantSpecToArray{})
	pulumi.RegisterOutputType(GRPCRouteSpecOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecParentRefsOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecParentRefsArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersExtensionRefOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersExtensionRefPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierAddArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersRequestHeaderModifierSetArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersRequestMirrorBackendRefPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierAddArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesBackendRefsFiltersResponseHeaderModifierSetArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersExtensionRefOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersExtensionRefPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersRequestHeaderModifierOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersRequestHeaderModifierPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersRequestHeaderModifierAddOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersRequestHeaderModifierAddArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersRequestHeaderModifierSetOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersRequestHeaderModifierSetArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersRequestMirrorOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersRequestMirrorPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersRequestMirrorBackendRefOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersRequestMirrorBackendRefPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersResponseHeaderModifierOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersResponseHeaderModifierPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersResponseHeaderModifierAddOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersResponseHeaderModifierAddArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersResponseHeaderModifierSetOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesFiltersResponseHeaderModifierSetArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesMatchesOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesMatchesArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesMatchesHeadersOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesMatchesHeadersArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesMatchesMethodOutput{})
	pulumi.RegisterOutputType(GRPCRouteSpecRulesMatchesMethodPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteStatusOutput{})
	pulumi.RegisterOutputType(GRPCRouteStatusPtrOutput{})
	pulumi.RegisterOutputType(GRPCRouteStatusParentsOutput{})
	pulumi.RegisterOutputType(GRPCRouteStatusParentsArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteStatusParentsConditionsOutput{})
	pulumi.RegisterOutputType(GRPCRouteStatusParentsConditionsArrayOutput{})
	pulumi.RegisterOutputType(GRPCRouteStatusParentsParentRefOutput{})
	pulumi.RegisterOutputType(ReferenceGrantSpecOutput{})
	pulumi.RegisterOutputType(ReferenceGrantSpecPtrOutput{})
	pulumi.RegisterOutputType(ReferenceGrantSpecFromOutput{})
	pulumi.RegisterOutputType(ReferenceGrantSpecFromArrayOutput{})
	pulumi.RegisterOutputType(ReferenceGrantSpecToOutput{})
	pulumi.RegisterOutputType(ReferenceGrantSpecToArrayOutput{})
}
