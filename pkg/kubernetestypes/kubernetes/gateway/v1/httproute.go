// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// HTTPRoute provides a way to route HTTP requests. This includes the capability
// to match requests by hostname, path, header, or query param. Filters can be
// used to specify additional processing steps. Backends specify where matching
// requests should be routed.
type HTTPRoute struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// Spec defines the desired state of HTTPRoute.
	Spec HTTPRouteSpecOutput `pulumi:"spec"`
	// Status defines the current state of HTTPRoute.
	Status HTTPRouteStatusPtrOutput `pulumi:"status"`
}

// NewHTTPRoute registers a new resource with the given unique name, arguments, and options.
func NewHTTPRoute(ctx *pulumi.Context,
	name string, args *HTTPRouteArgs, opts ...pulumi.ResourceOption) (*HTTPRoute, error) {
	if args == nil {
		args = &HTTPRouteArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("gateway.networking.k8s.io/v1")
	args.Kind = pulumi.StringPtr("HTTPRoute")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource HTTPRoute
	err := ctx.RegisterResource("kubernetes:gateway.networking.k8s.io/v1:HTTPRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHTTPRoute gets an existing HTTPRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHTTPRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HTTPRouteState, opts ...pulumi.ResourceOption) (*HTTPRoute, error) {
	var resource HTTPRoute
	err := ctx.ReadResource("kubernetes:gateway.networking.k8s.io/v1:HTTPRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HTTPRoute resources.
type httprouteState struct {
}

type HTTPRouteState struct {
}

func (HTTPRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*httprouteState)(nil)).Elem()
}

type httprouteArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec defines the desired state of HTTPRoute.
	Spec *HTTPRouteSpec `pulumi:"spec"`
	// Status defines the current state of HTTPRoute.
	Status *HTTPRouteStatus `pulumi:"status"`
}

// The set of arguments for constructing a HTTPRoute resource.
type HTTPRouteArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// Spec defines the desired state of HTTPRoute.
	Spec HTTPRouteSpecPtrInput
	// Status defines the current state of HTTPRoute.
	Status HTTPRouteStatusPtrInput
}

func (HTTPRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*httprouteArgs)(nil)).Elem()
}

type HTTPRouteInput interface {
	pulumi.Input

	ToHTTPRouteOutput() HTTPRouteOutput
	ToHTTPRouteOutputWithContext(ctx context.Context) HTTPRouteOutput
}

func (*HTTPRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTPRoute)(nil)).Elem()
}

func (i *HTTPRoute) ToHTTPRouteOutput() HTTPRouteOutput {
	return i.ToHTTPRouteOutputWithContext(context.Background())
}

func (i *HTTPRoute) ToHTTPRouteOutputWithContext(ctx context.Context) HTTPRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HTTPRouteOutput)
}

type HTTPRouteOutput struct{ *pulumi.OutputState }

func (HTTPRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HTTPRoute)(nil)).Elem()
}

func (o HTTPRouteOutput) ToHTTPRouteOutput() HTTPRouteOutput {
	return o
}

func (o HTTPRouteOutput) ToHTTPRouteOutputWithContext(ctx context.Context) HTTPRouteOutput {
	return o
}

func (o HTTPRouteOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPRoute) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o HTTPRouteOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HTTPRoute) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o HTTPRouteOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *HTTPRoute) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec defines the desired state of HTTPRoute.
func (o HTTPRouteOutput) Spec() HTTPRouteSpecOutput {
	return o.ApplyT(func(v *HTTPRoute) HTTPRouteSpecOutput { return v.Spec }).(HTTPRouteSpecOutput)
}

// Status defines the current state of HTTPRoute.
func (o HTTPRouteOutput) Status() HTTPRouteStatusPtrOutput {
	return o.ApplyT(func(v *HTTPRoute) HTTPRouteStatusPtrOutput { return v.Status }).(HTTPRouteStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HTTPRouteInput)(nil)).Elem(), &HTTPRoute{})
	pulumi.RegisterOutputType(HTTPRouteOutput{})
}
