// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GatewayClass describes a class of Gateways available to the user for creating
// Gateway resources.
//
// It is recommended that this resource be used as a template for Gateways. This
// means that a Gateway is based on the state of the GatewayClass at the time it
// was created and changes to the GatewayClass or associated parameters are not
// propagated down to existing Gateways. This recommendation is intended to
// limit the blast radius of changes to GatewayClass or associated parameters.
// If implementations choose to propagate GatewayClass changes to existing
// Gateways, that MUST be clearly documented by the implementation.
//
// Whenever one or more Gateways are using a GatewayClass, implementations SHOULD
// add the `gateway-exists-finalizer.gateway.networking.k8s.io` finalizer on the
// associated GatewayClass. This ensures that a GatewayClass associated with a
// Gateway is not deleted while in use.
//
// GatewayClass is a Cluster level resource.
type GatewayClass struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// Spec defines the desired state of GatewayClass.
	Spec GatewayClassSpecOutput `pulumi:"spec"`
	// Status defines the current state of GatewayClass.
	//
	// Implementations MUST populate status on all GatewayClass resources which
	// specify their controller name.
	Status GatewayClassStatusPtrOutput `pulumi:"status"`
}

// NewGatewayClass registers a new resource with the given unique name, arguments, and options.
func NewGatewayClass(ctx *pulumi.Context,
	name string, args *GatewayClassArgs, opts ...pulumi.ResourceOption) (*GatewayClass, error) {
	if args == nil {
		args = &GatewayClassArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("gateway.networking.k8s.io/v1beta1")
	args.Kind = pulumi.StringPtr("GatewayClass")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource GatewayClass
	err := ctx.RegisterResource("kubernetes:gateway.networking.k8s.io/v1beta1:GatewayClass", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayClass gets an existing GatewayClass resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayClass(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayClassState, opts ...pulumi.ResourceOption) (*GatewayClass, error) {
	var resource GatewayClass
	err := ctx.ReadResource("kubernetes:gateway.networking.k8s.io/v1beta1:GatewayClass", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayClass resources.
type gatewayClassState struct {
}

type GatewayClassState struct {
}

func (GatewayClassState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayClassState)(nil)).Elem()
}

type gatewayClassArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Spec defines the desired state of GatewayClass.
	Spec *GatewayClassSpec `pulumi:"spec"`
	// Status defines the current state of GatewayClass.
	//
	// Implementations MUST populate status on all GatewayClass resources which
	// specify their controller name.
	Status *GatewayClassStatus `pulumi:"status"`
}

// The set of arguments for constructing a GatewayClass resource.
type GatewayClassArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// Spec defines the desired state of GatewayClass.
	Spec GatewayClassSpecPtrInput
	// Status defines the current state of GatewayClass.
	//
	// Implementations MUST populate status on all GatewayClass resources which
	// specify their controller name.
	Status GatewayClassStatusPtrInput
}

func (GatewayClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayClassArgs)(nil)).Elem()
}

type GatewayClassInput interface {
	pulumi.Input

	ToGatewayClassOutput() GatewayClassOutput
	ToGatewayClassOutputWithContext(ctx context.Context) GatewayClassOutput
}

func (*GatewayClass) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayClass)(nil)).Elem()
}

func (i *GatewayClass) ToGatewayClassOutput() GatewayClassOutput {
	return i.ToGatewayClassOutputWithContext(context.Background())
}

func (i *GatewayClass) ToGatewayClassOutputWithContext(ctx context.Context) GatewayClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayClassOutput)
}

type GatewayClassOutput struct{ *pulumi.OutputState }

func (GatewayClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayClass)(nil)).Elem()
}

func (o GatewayClassOutput) ToGatewayClassOutput() GatewayClassOutput {
	return o
}

func (o GatewayClassOutput) ToGatewayClassOutputWithContext(ctx context.Context) GatewayClassOutput {
	return o
}

func (o GatewayClassOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayClass) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o GatewayClassOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewayClass) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o GatewayClassOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *GatewayClass) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

// Spec defines the desired state of GatewayClass.
func (o GatewayClassOutput) Spec() GatewayClassSpecOutput {
	return o.ApplyT(func(v *GatewayClass) GatewayClassSpecOutput { return v.Spec }).(GatewayClassSpecOutput)
}

// Status defines the current state of GatewayClass.
//
// Implementations MUST populate status on all GatewayClass resources which
// specify their controller name.
func (o GatewayClassOutput) Status() GatewayClassStatusPtrOutput {
	return o.ApplyT(func(v *GatewayClass) GatewayClassStatusPtrOutput { return v.Status }).(GatewayClassStatusPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayClassInput)(nil)).Elem(), &GatewayClass{})
	pulumi.RegisterOutputType(GatewayClassOutput{})
}
