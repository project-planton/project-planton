// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ElasticMapsServer represents an Elastic Map Server resource in a Kubernetes cluster.
type ElasticMapsServer struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput          `pulumi:"metadata"`
	Spec     ElasticMapsServerSpecOutput      `pulumi:"spec"`
	Status   ElasticMapsServerStatusPtrOutput `pulumi:"status"`
}

// NewElasticMapsServer registers a new resource with the given unique name, arguments, and options.
func NewElasticMapsServer(ctx *pulumi.Context,
	name string, args *ElasticMapsServerArgs, opts ...pulumi.ResourceOption) (*ElasticMapsServer, error) {
	if args == nil {
		args = &ElasticMapsServerArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("maps.k8s.elastic.co/v1alpha1")
	args.Kind = pulumi.StringPtr("ElasticMapsServer")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ElasticMapsServer
	err := ctx.RegisterResource("kubernetes:maps.k8s.elastic.co/v1alpha1:ElasticMapsServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticMapsServer gets an existing ElasticMapsServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticMapsServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticMapsServerState, opts ...pulumi.ResourceOption) (*ElasticMapsServer, error) {
	var resource ElasticMapsServer
	err := ctx.ReadResource("kubernetes:maps.k8s.elastic.co/v1alpha1:ElasticMapsServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElasticMapsServer resources.
type elasticMapsServerState struct {
}

type ElasticMapsServerState struct {
}

func (ElasticMapsServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticMapsServerState)(nil)).Elem()
}

type elasticMapsServerArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta     `pulumi:"metadata"`
	Spec     *ElasticMapsServerSpec `pulumi:"spec"`
}

// The set of arguments for constructing a ElasticMapsServer resource.
type ElasticMapsServerArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     ElasticMapsServerSpecPtrInput
}

func (ElasticMapsServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticMapsServerArgs)(nil)).Elem()
}

type ElasticMapsServerInput interface {
	pulumi.Input

	ToElasticMapsServerOutput() ElasticMapsServerOutput
	ToElasticMapsServerOutputWithContext(ctx context.Context) ElasticMapsServerOutput
}

func (*ElasticMapsServer) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticMapsServer)(nil)).Elem()
}

func (i *ElasticMapsServer) ToElasticMapsServerOutput() ElasticMapsServerOutput {
	return i.ToElasticMapsServerOutputWithContext(context.Background())
}

func (i *ElasticMapsServer) ToElasticMapsServerOutputWithContext(ctx context.Context) ElasticMapsServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerOutput)
}

// ElasticMapsServerArrayInput is an input type that accepts ElasticMapsServerArray and ElasticMapsServerArrayOutput values.
// You can construct a concrete instance of `ElasticMapsServerArrayInput` via:
//
//	ElasticMapsServerArray{ ElasticMapsServerArgs{...} }
type ElasticMapsServerArrayInput interface {
	pulumi.Input

	ToElasticMapsServerArrayOutput() ElasticMapsServerArrayOutput
	ToElasticMapsServerArrayOutputWithContext(context.Context) ElasticMapsServerArrayOutput
}

type ElasticMapsServerArray []ElasticMapsServerInput

func (ElasticMapsServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticMapsServer)(nil)).Elem()
}

func (i ElasticMapsServerArray) ToElasticMapsServerArrayOutput() ElasticMapsServerArrayOutput {
	return i.ToElasticMapsServerArrayOutputWithContext(context.Background())
}

func (i ElasticMapsServerArray) ToElasticMapsServerArrayOutputWithContext(ctx context.Context) ElasticMapsServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerArrayOutput)
}

// ElasticMapsServerMapInput is an input type that accepts ElasticMapsServerMap and ElasticMapsServerMapOutput values.
// You can construct a concrete instance of `ElasticMapsServerMapInput` via:
//
//	ElasticMapsServerMap{ "key": ElasticMapsServerArgs{...} }
type ElasticMapsServerMapInput interface {
	pulumi.Input

	ToElasticMapsServerMapOutput() ElasticMapsServerMapOutput
	ToElasticMapsServerMapOutputWithContext(context.Context) ElasticMapsServerMapOutput
}

type ElasticMapsServerMap map[string]ElasticMapsServerInput

func (ElasticMapsServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticMapsServer)(nil)).Elem()
}

func (i ElasticMapsServerMap) ToElasticMapsServerMapOutput() ElasticMapsServerMapOutput {
	return i.ToElasticMapsServerMapOutputWithContext(context.Background())
}

func (i ElasticMapsServerMap) ToElasticMapsServerMapOutputWithContext(ctx context.Context) ElasticMapsServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticMapsServerMapOutput)
}

type ElasticMapsServerOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticMapsServer)(nil)).Elem()
}

func (o ElasticMapsServerOutput) ToElasticMapsServerOutput() ElasticMapsServerOutput {
	return o
}

func (o ElasticMapsServerOutput) ToElasticMapsServerOutputWithContext(ctx context.Context) ElasticMapsServerOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ElasticMapsServerOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ElasticMapsServer) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ElasticMapsServerOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ElasticMapsServer) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ElasticMapsServerOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *ElasticMapsServer) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o ElasticMapsServerOutput) Spec() ElasticMapsServerSpecOutput {
	return o.ApplyT(func(v *ElasticMapsServer) ElasticMapsServerSpecOutput { return v.Spec }).(ElasticMapsServerSpecOutput)
}

func (o ElasticMapsServerOutput) Status() ElasticMapsServerStatusPtrOutput {
	return o.ApplyT(func(v *ElasticMapsServer) ElasticMapsServerStatusPtrOutput { return v.Status }).(ElasticMapsServerStatusPtrOutput)
}

type ElasticMapsServerArrayOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticMapsServer)(nil)).Elem()
}

func (o ElasticMapsServerArrayOutput) ToElasticMapsServerArrayOutput() ElasticMapsServerArrayOutput {
	return o
}

func (o ElasticMapsServerArrayOutput) ToElasticMapsServerArrayOutputWithContext(ctx context.Context) ElasticMapsServerArrayOutput {
	return o
}

func (o ElasticMapsServerArrayOutput) Index(i pulumi.IntInput) ElasticMapsServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElasticMapsServer {
		return vs[0].([]*ElasticMapsServer)[vs[1].(int)]
	}).(ElasticMapsServerOutput)
}

type ElasticMapsServerMapOutput struct{ *pulumi.OutputState }

func (ElasticMapsServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticMapsServer)(nil)).Elem()
}

func (o ElasticMapsServerMapOutput) ToElasticMapsServerMapOutput() ElasticMapsServerMapOutput {
	return o
}

func (o ElasticMapsServerMapOutput) ToElasticMapsServerMapOutputWithContext(ctx context.Context) ElasticMapsServerMapOutput {
	return o
}

func (o ElasticMapsServerMapOutput) MapIndex(k pulumi.StringInput) ElasticMapsServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElasticMapsServer {
		return vs[0].(map[string]*ElasticMapsServer)[vs[1].(string)]
	}).(ElasticMapsServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerInput)(nil)).Elem(), &ElasticMapsServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerArrayInput)(nil)).Elem(), ElasticMapsServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticMapsServerMapInput)(nil)).Elem(), ElasticMapsServerMap{})
	pulumi.RegisterOutputType(ElasticMapsServerOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerArrayOutput{})
	pulumi.RegisterOutputType(ElasticMapsServerMapOutput{})
}
