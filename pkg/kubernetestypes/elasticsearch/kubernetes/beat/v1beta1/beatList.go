// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// BeatList is a list of Beat
type BeatList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of beats. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items BeatTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewBeatList registers a new resource with the given unique name, arguments, and options.
func NewBeatList(ctx *pulumi.Context,
	name string, args *BeatListArgs, opts ...pulumi.ResourceOption) (*BeatList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("beat.k8s.elastic.co/v1beta1")
	args.Kind = pulumi.StringPtr("BeatList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource BeatList
	err := ctx.RegisterResource("kubernetes:beat.k8s.elastic.co/v1beta1:BeatList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBeatList gets an existing BeatList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBeatList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BeatListState, opts ...pulumi.ResourceOption) (*BeatList, error) {
	var resource BeatList
	err := ctx.ReadResource("kubernetes:beat.k8s.elastic.co/v1beta1:BeatList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BeatList resources.
type beatListState struct {
}

type BeatListState struct {
}

func (BeatListState) ElementType() reflect.Type {
	return reflect.TypeOf((*beatListState)(nil)).Elem()
}

type beatListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of beats. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []BeatType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a BeatList resource.
type BeatListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of beats. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items BeatTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (BeatListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*beatListArgs)(nil)).Elem()
}

type BeatListInput interface {
	pulumi.Input

	ToBeatListOutput() BeatListOutput
	ToBeatListOutputWithContext(ctx context.Context) BeatListOutput
}

func (*BeatList) ElementType() reflect.Type {
	return reflect.TypeOf((**BeatList)(nil)).Elem()
}

func (i *BeatList) ToBeatListOutput() BeatListOutput {
	return i.ToBeatListOutputWithContext(context.Background())
}

func (i *BeatList) ToBeatListOutputWithContext(ctx context.Context) BeatListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatListOutput)
}

// BeatListArrayInput is an input type that accepts BeatListArray and BeatListArrayOutput values.
// You can construct a concrete instance of `BeatListArrayInput` via:
//
//	BeatListArray{ BeatListArgs{...} }
type BeatListArrayInput interface {
	pulumi.Input

	ToBeatListArrayOutput() BeatListArrayOutput
	ToBeatListArrayOutputWithContext(context.Context) BeatListArrayOutput
}

type BeatListArray []BeatListInput

func (BeatListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BeatList)(nil)).Elem()
}

func (i BeatListArray) ToBeatListArrayOutput() BeatListArrayOutput {
	return i.ToBeatListArrayOutputWithContext(context.Background())
}

func (i BeatListArray) ToBeatListArrayOutputWithContext(ctx context.Context) BeatListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatListArrayOutput)
}

// BeatListMapInput is an input type that accepts BeatListMap and BeatListMapOutput values.
// You can construct a concrete instance of `BeatListMapInput` via:
//
//	BeatListMap{ "key": BeatListArgs{...} }
type BeatListMapInput interface {
	pulumi.Input

	ToBeatListMapOutput() BeatListMapOutput
	ToBeatListMapOutputWithContext(context.Context) BeatListMapOutput
}

type BeatListMap map[string]BeatListInput

func (BeatListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BeatList)(nil)).Elem()
}

func (i BeatListMap) ToBeatListMapOutput() BeatListMapOutput {
	return i.ToBeatListMapOutputWithContext(context.Background())
}

func (i BeatListMap) ToBeatListMapOutputWithContext(ctx context.Context) BeatListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatListMapOutput)
}

type BeatListOutput struct{ *pulumi.OutputState }

func (BeatListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BeatList)(nil)).Elem()
}

func (o BeatListOutput) ToBeatListOutput() BeatListOutput {
	return o
}

func (o BeatListOutput) ToBeatListOutputWithContext(ctx context.Context) BeatListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o BeatListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *BeatList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of beats. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o BeatListOutput) Items() BeatTypeArrayOutput {
	return o.ApplyT(func(v *BeatList) BeatTypeArrayOutput { return v.Items }).(BeatTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o BeatListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *BeatList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o BeatListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *BeatList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type BeatListArrayOutput struct{ *pulumi.OutputState }

func (BeatListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BeatList)(nil)).Elem()
}

func (o BeatListArrayOutput) ToBeatListArrayOutput() BeatListArrayOutput {
	return o
}

func (o BeatListArrayOutput) ToBeatListArrayOutputWithContext(ctx context.Context) BeatListArrayOutput {
	return o
}

func (o BeatListArrayOutput) Index(i pulumi.IntInput) BeatListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BeatList {
		return vs[0].([]*BeatList)[vs[1].(int)]
	}).(BeatListOutput)
}

type BeatListMapOutput struct{ *pulumi.OutputState }

func (BeatListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BeatList)(nil)).Elem()
}

func (o BeatListMapOutput) ToBeatListMapOutput() BeatListMapOutput {
	return o
}

func (o BeatListMapOutput) ToBeatListMapOutputWithContext(ctx context.Context) BeatListMapOutput {
	return o
}

func (o BeatListMapOutput) MapIndex(k pulumi.StringInput) BeatListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BeatList {
		return vs[0].(map[string]*BeatList)[vs[1].(string)]
	}).(BeatListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BeatListInput)(nil)).Elem(), &BeatList{})
	pulumi.RegisterInputType(reflect.TypeOf((*BeatListArrayInput)(nil)).Elem(), BeatListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BeatListMapInput)(nil)).Elem(), BeatListMap{})
	pulumi.RegisterOutputType(BeatListOutput{})
	pulumi.RegisterOutputType(BeatListArrayOutput{})
	pulumi.RegisterOutputType(BeatListMapOutput{})
}
