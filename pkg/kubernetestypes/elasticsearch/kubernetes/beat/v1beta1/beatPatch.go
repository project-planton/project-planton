// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// Beat is the Schema for the Beats API.
type BeatPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     BeatSpecPatchPtrOutput          `pulumi:"spec"`
	Status   BeatStatusPatchPtrOutput        `pulumi:"status"`
}

// NewBeatPatch registers a new resource with the given unique name, arguments, and options.
func NewBeatPatch(ctx *pulumi.Context,
	name string, args *BeatPatchArgs, opts ...pulumi.ResourceOption) (*BeatPatch, error) {
	if args == nil {
		args = &BeatPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("beat.k8s.elastic.co/v1beta1")
	args.Kind = pulumi.StringPtr("Beat")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource BeatPatch
	err := ctx.RegisterResource("kubernetes:beat.k8s.elastic.co/v1beta1:BeatPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBeatPatch gets an existing BeatPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBeatPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BeatPatchState, opts ...pulumi.ResourceOption) (*BeatPatch, error) {
	var resource BeatPatch
	err := ctx.ReadResource("kubernetes:beat.k8s.elastic.co/v1beta1:BeatPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BeatPatch resources.
type beatPatchState struct {
}

type BeatPatchState struct {
}

func (BeatPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*beatPatchState)(nil)).Elem()
}

type beatPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *BeatSpecPatch          `pulumi:"spec"`
}

// The set of arguments for constructing a BeatPatch resource.
type BeatPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     BeatSpecPatchPtrInput
}

func (BeatPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*beatPatchArgs)(nil)).Elem()
}

type BeatPatchInput interface {
	pulumi.Input

	ToBeatPatchOutput() BeatPatchOutput
	ToBeatPatchOutputWithContext(ctx context.Context) BeatPatchOutput
}

func (*BeatPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**BeatPatch)(nil)).Elem()
}

func (i *BeatPatch) ToBeatPatchOutput() BeatPatchOutput {
	return i.ToBeatPatchOutputWithContext(context.Background())
}

func (i *BeatPatch) ToBeatPatchOutputWithContext(ctx context.Context) BeatPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatPatchOutput)
}

// BeatPatchArrayInput is an input type that accepts BeatPatchArray and BeatPatchArrayOutput values.
// You can construct a concrete instance of `BeatPatchArrayInput` via:
//
//	BeatPatchArray{ BeatPatchArgs{...} }
type BeatPatchArrayInput interface {
	pulumi.Input

	ToBeatPatchArrayOutput() BeatPatchArrayOutput
	ToBeatPatchArrayOutputWithContext(context.Context) BeatPatchArrayOutput
}

type BeatPatchArray []BeatPatchInput

func (BeatPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BeatPatch)(nil)).Elem()
}

func (i BeatPatchArray) ToBeatPatchArrayOutput() BeatPatchArrayOutput {
	return i.ToBeatPatchArrayOutputWithContext(context.Background())
}

func (i BeatPatchArray) ToBeatPatchArrayOutputWithContext(ctx context.Context) BeatPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatPatchArrayOutput)
}

// BeatPatchMapInput is an input type that accepts BeatPatchMap and BeatPatchMapOutput values.
// You can construct a concrete instance of `BeatPatchMapInput` via:
//
//	BeatPatchMap{ "key": BeatPatchArgs{...} }
type BeatPatchMapInput interface {
	pulumi.Input

	ToBeatPatchMapOutput() BeatPatchMapOutput
	ToBeatPatchMapOutputWithContext(context.Context) BeatPatchMapOutput
}

type BeatPatchMap map[string]BeatPatchInput

func (BeatPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BeatPatch)(nil)).Elem()
}

func (i BeatPatchMap) ToBeatPatchMapOutput() BeatPatchMapOutput {
	return i.ToBeatPatchMapOutputWithContext(context.Background())
}

func (i BeatPatchMap) ToBeatPatchMapOutputWithContext(ctx context.Context) BeatPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BeatPatchMapOutput)
}

type BeatPatchOutput struct{ *pulumi.OutputState }

func (BeatPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BeatPatch)(nil)).Elem()
}

func (o BeatPatchOutput) ToBeatPatchOutput() BeatPatchOutput {
	return o
}

func (o BeatPatchOutput) ToBeatPatchOutputWithContext(ctx context.Context) BeatPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o BeatPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BeatPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o BeatPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BeatPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o BeatPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *BeatPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o BeatPatchOutput) Spec() BeatSpecPatchPtrOutput {
	return o.ApplyT(func(v *BeatPatch) BeatSpecPatchPtrOutput { return v.Spec }).(BeatSpecPatchPtrOutput)
}

func (o BeatPatchOutput) Status() BeatStatusPatchPtrOutput {
	return o.ApplyT(func(v *BeatPatch) BeatStatusPatchPtrOutput { return v.Status }).(BeatStatusPatchPtrOutput)
}

type BeatPatchArrayOutput struct{ *pulumi.OutputState }

func (BeatPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BeatPatch)(nil)).Elem()
}

func (o BeatPatchArrayOutput) ToBeatPatchArrayOutput() BeatPatchArrayOutput {
	return o
}

func (o BeatPatchArrayOutput) ToBeatPatchArrayOutputWithContext(ctx context.Context) BeatPatchArrayOutput {
	return o
}

func (o BeatPatchArrayOutput) Index(i pulumi.IntInput) BeatPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BeatPatch {
		return vs[0].([]*BeatPatch)[vs[1].(int)]
	}).(BeatPatchOutput)
}

type BeatPatchMapOutput struct{ *pulumi.OutputState }

func (BeatPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BeatPatch)(nil)).Elem()
}

func (o BeatPatchMapOutput) ToBeatPatchMapOutput() BeatPatchMapOutput {
	return o
}

func (o BeatPatchMapOutput) ToBeatPatchMapOutputWithContext(ctx context.Context) BeatPatchMapOutput {
	return o
}

func (o BeatPatchMapOutput) MapIndex(k pulumi.StringInput) BeatPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BeatPatch {
		return vs[0].(map[string]*BeatPatch)[vs[1].(string)]
	}).(BeatPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BeatPatchInput)(nil)).Elem(), &BeatPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*BeatPatchArrayInput)(nil)).Elem(), BeatPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BeatPatchMapInput)(nil)).Elem(), BeatPatchMap{})
	pulumi.RegisterOutputType(BeatPatchOutput{})
	pulumi.RegisterOutputType(BeatPatchArrayOutput{})
	pulumi.RegisterOutputType(BeatPatchMapOutput{})
}
