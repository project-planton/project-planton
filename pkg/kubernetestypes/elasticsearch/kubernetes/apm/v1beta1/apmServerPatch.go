// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// ApmServer represents an APM Server resource in a Kubernetes cluster.
type ApmServerPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     ApmServerSpecPatchPtrOutput     `pulumi:"spec"`
	Status   ApmServerStatusPatchPtrOutput   `pulumi:"status"`
}

// NewApmServerPatch registers a new resource with the given unique name, arguments, and options.
func NewApmServerPatch(ctx *pulumi.Context,
	name string, args *ApmServerPatchArgs, opts ...pulumi.ResourceOption) (*ApmServerPatch, error) {
	if args == nil {
		args = &ApmServerPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("apm.k8s.elastic.co/v1beta1")
	args.Kind = pulumi.StringPtr("ApmServer")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:apm.k8s.elastic.co/v1:ApmServerPatch"),
		},
		{
			Type: pulumi.String("kubernetes:apm.k8s.elastic.co/v1alpha1:ApmServerPatch"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ApmServerPatch
	err := ctx.RegisterResource("kubernetes:apm.k8s.elastic.co/v1beta1:ApmServerPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApmServerPatch gets an existing ApmServerPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApmServerPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApmServerPatchState, opts ...pulumi.ResourceOption) (*ApmServerPatch, error) {
	var resource ApmServerPatch
	err := ctx.ReadResource("kubernetes:apm.k8s.elastic.co/v1beta1:ApmServerPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApmServerPatch resources.
type apmServerPatchState struct {
}

type ApmServerPatchState struct {
}

func (ApmServerPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*apmServerPatchState)(nil)).Elem()
}

type apmServerPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *ApmServerSpecPatch     `pulumi:"spec"`
}

// The set of arguments for constructing a ApmServerPatch resource.
type ApmServerPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     ApmServerSpecPatchPtrInput
}

func (ApmServerPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apmServerPatchArgs)(nil)).Elem()
}

type ApmServerPatchInput interface {
	pulumi.Input

	ToApmServerPatchOutput() ApmServerPatchOutput
	ToApmServerPatchOutputWithContext(ctx context.Context) ApmServerPatchOutput
}

func (*ApmServerPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerPatch)(nil)).Elem()
}

func (i *ApmServerPatch) ToApmServerPatchOutput() ApmServerPatchOutput {
	return i.ToApmServerPatchOutputWithContext(context.Background())
}

func (i *ApmServerPatch) ToApmServerPatchOutputWithContext(ctx context.Context) ApmServerPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerPatchOutput)
}

// ApmServerPatchArrayInput is an input type that accepts ApmServerPatchArray and ApmServerPatchArrayOutput values.
// You can construct a concrete instance of `ApmServerPatchArrayInput` via:
//
//	ApmServerPatchArray{ ApmServerPatchArgs{...} }
type ApmServerPatchArrayInput interface {
	pulumi.Input

	ToApmServerPatchArrayOutput() ApmServerPatchArrayOutput
	ToApmServerPatchArrayOutputWithContext(context.Context) ApmServerPatchArrayOutput
}

type ApmServerPatchArray []ApmServerPatchInput

func (ApmServerPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApmServerPatch)(nil)).Elem()
}

func (i ApmServerPatchArray) ToApmServerPatchArrayOutput() ApmServerPatchArrayOutput {
	return i.ToApmServerPatchArrayOutputWithContext(context.Background())
}

func (i ApmServerPatchArray) ToApmServerPatchArrayOutputWithContext(ctx context.Context) ApmServerPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerPatchArrayOutput)
}

// ApmServerPatchMapInput is an input type that accepts ApmServerPatchMap and ApmServerPatchMapOutput values.
// You can construct a concrete instance of `ApmServerPatchMapInput` via:
//
//	ApmServerPatchMap{ "key": ApmServerPatchArgs{...} }
type ApmServerPatchMapInput interface {
	pulumi.Input

	ToApmServerPatchMapOutput() ApmServerPatchMapOutput
	ToApmServerPatchMapOutputWithContext(context.Context) ApmServerPatchMapOutput
}

type ApmServerPatchMap map[string]ApmServerPatchInput

func (ApmServerPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApmServerPatch)(nil)).Elem()
}

func (i ApmServerPatchMap) ToApmServerPatchMapOutput() ApmServerPatchMapOutput {
	return i.ToApmServerPatchMapOutputWithContext(context.Background())
}

func (i ApmServerPatchMap) ToApmServerPatchMapOutputWithContext(ctx context.Context) ApmServerPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmServerPatchMapOutput)
}

type ApmServerPatchOutput struct{ *pulumi.OutputState }

func (ApmServerPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmServerPatch)(nil)).Elem()
}

func (o ApmServerPatchOutput) ToApmServerPatchOutput() ApmServerPatchOutput {
	return o
}

func (o ApmServerPatchOutput) ToApmServerPatchOutputWithContext(ctx context.Context) ApmServerPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ApmServerPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ApmServerPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApmServerPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ApmServerPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *ApmServerPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ApmServerPatchOutput) Spec() ApmServerSpecPatchPtrOutput {
	return o.ApplyT(func(v *ApmServerPatch) ApmServerSpecPatchPtrOutput { return v.Spec }).(ApmServerSpecPatchPtrOutput)
}

func (o ApmServerPatchOutput) Status() ApmServerStatusPatchPtrOutput {
	return o.ApplyT(func(v *ApmServerPatch) ApmServerStatusPatchPtrOutput { return v.Status }).(ApmServerStatusPatchPtrOutput)
}

type ApmServerPatchArrayOutput struct{ *pulumi.OutputState }

func (ApmServerPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApmServerPatch)(nil)).Elem()
}

func (o ApmServerPatchArrayOutput) ToApmServerPatchArrayOutput() ApmServerPatchArrayOutput {
	return o
}

func (o ApmServerPatchArrayOutput) ToApmServerPatchArrayOutputWithContext(ctx context.Context) ApmServerPatchArrayOutput {
	return o
}

func (o ApmServerPatchArrayOutput) Index(i pulumi.IntInput) ApmServerPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApmServerPatch {
		return vs[0].([]*ApmServerPatch)[vs[1].(int)]
	}).(ApmServerPatchOutput)
}

type ApmServerPatchMapOutput struct{ *pulumi.OutputState }

func (ApmServerPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApmServerPatch)(nil)).Elem()
}

func (o ApmServerPatchMapOutput) ToApmServerPatchMapOutput() ApmServerPatchMapOutput {
	return o
}

func (o ApmServerPatchMapOutput) ToApmServerPatchMapOutputWithContext(ctx context.Context) ApmServerPatchMapOutput {
	return o
}

func (o ApmServerPatchMapOutput) MapIndex(k pulumi.StringInput) ApmServerPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApmServerPatch {
		return vs[0].(map[string]*ApmServerPatch)[vs[1].(string)]
	}).(ApmServerPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerPatchInput)(nil)).Elem(), &ApmServerPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerPatchArrayInput)(nil)).Elem(), ApmServerPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApmServerPatchMapInput)(nil)).Elem(), ApmServerPatchMap{})
	pulumi.RegisterOutputType(ApmServerPatchOutput{})
	pulumi.RegisterOutputType(ApmServerPatchArrayOutput{})
	pulumi.RegisterOutputType(ApmServerPatchMapOutput{})
}
