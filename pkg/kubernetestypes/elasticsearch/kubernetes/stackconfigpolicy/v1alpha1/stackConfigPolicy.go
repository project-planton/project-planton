// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// StackConfigPolicy represents a StackConfigPolicy resource in a Kubernetes cluster.
type StackConfigPolicy struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput          `pulumi:"metadata"`
	Spec     StackConfigPolicySpecOutput      `pulumi:"spec"`
	Status   StackConfigPolicyStatusPtrOutput `pulumi:"status"`
}

// NewStackConfigPolicy registers a new resource with the given unique name, arguments, and options.
func NewStackConfigPolicy(ctx *pulumi.Context,
	name string, args *StackConfigPolicyArgs, opts ...pulumi.ResourceOption) (*StackConfigPolicy, error) {
	if args == nil {
		args = &StackConfigPolicyArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("stackconfigpolicy.k8s.elastic.co/v1alpha1")
	args.Kind = pulumi.StringPtr("StackConfigPolicy")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource StackConfigPolicy
	err := ctx.RegisterResource("kubernetes:stackconfigpolicy.k8s.elastic.co/v1alpha1:StackConfigPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStackConfigPolicy gets an existing StackConfigPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStackConfigPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StackConfigPolicyState, opts ...pulumi.ResourceOption) (*StackConfigPolicy, error) {
	var resource StackConfigPolicy
	err := ctx.ReadResource("kubernetes:stackconfigpolicy.k8s.elastic.co/v1alpha1:StackConfigPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StackConfigPolicy resources.
type stackConfigPolicyState struct {
}

type StackConfigPolicyState struct {
}

func (StackConfigPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*stackConfigPolicyState)(nil)).Elem()
}

type stackConfigPolicyArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta     `pulumi:"metadata"`
	Spec     *StackConfigPolicySpec `pulumi:"spec"`
}

// The set of arguments for constructing a StackConfigPolicy resource.
type StackConfigPolicyArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     StackConfigPolicySpecPtrInput
}

func (StackConfigPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stackConfigPolicyArgs)(nil)).Elem()
}

type StackConfigPolicyInput interface {
	pulumi.Input

	ToStackConfigPolicyOutput() StackConfigPolicyOutput
	ToStackConfigPolicyOutputWithContext(ctx context.Context) StackConfigPolicyOutput
}

func (*StackConfigPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicy)(nil)).Elem()
}

func (i *StackConfigPolicy) ToStackConfigPolicyOutput() StackConfigPolicyOutput {
	return i.ToStackConfigPolicyOutputWithContext(context.Background())
}

func (i *StackConfigPolicy) ToStackConfigPolicyOutputWithContext(ctx context.Context) StackConfigPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyOutput)
}

// StackConfigPolicyArrayInput is an input type that accepts StackConfigPolicyArray and StackConfigPolicyArrayOutput values.
// You can construct a concrete instance of `StackConfigPolicyArrayInput` via:
//
//	StackConfigPolicyArray{ StackConfigPolicyArgs{...} }
type StackConfigPolicyArrayInput interface {
	pulumi.Input

	ToStackConfigPolicyArrayOutput() StackConfigPolicyArrayOutput
	ToStackConfigPolicyArrayOutputWithContext(context.Context) StackConfigPolicyArrayOutput
}

type StackConfigPolicyArray []StackConfigPolicyInput

func (StackConfigPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StackConfigPolicy)(nil)).Elem()
}

func (i StackConfigPolicyArray) ToStackConfigPolicyArrayOutput() StackConfigPolicyArrayOutput {
	return i.ToStackConfigPolicyArrayOutputWithContext(context.Background())
}

func (i StackConfigPolicyArray) ToStackConfigPolicyArrayOutputWithContext(ctx context.Context) StackConfigPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyArrayOutput)
}

// StackConfigPolicyMapInput is an input type that accepts StackConfigPolicyMap and StackConfigPolicyMapOutput values.
// You can construct a concrete instance of `StackConfigPolicyMapInput` via:
//
//	StackConfigPolicyMap{ "key": StackConfigPolicyArgs{...} }
type StackConfigPolicyMapInput interface {
	pulumi.Input

	ToStackConfigPolicyMapOutput() StackConfigPolicyMapOutput
	ToStackConfigPolicyMapOutputWithContext(context.Context) StackConfigPolicyMapOutput
}

type StackConfigPolicyMap map[string]StackConfigPolicyInput

func (StackConfigPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StackConfigPolicy)(nil)).Elem()
}

func (i StackConfigPolicyMap) ToStackConfigPolicyMapOutput() StackConfigPolicyMapOutput {
	return i.ToStackConfigPolicyMapOutputWithContext(context.Background())
}

func (i StackConfigPolicyMap) ToStackConfigPolicyMapOutputWithContext(ctx context.Context) StackConfigPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyMapOutput)
}

type StackConfigPolicyOutput struct{ *pulumi.OutputState }

func (StackConfigPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicy)(nil)).Elem()
}

func (o StackConfigPolicyOutput) ToStackConfigPolicyOutput() StackConfigPolicyOutput {
	return o
}

func (o StackConfigPolicyOutput) ToStackConfigPolicyOutputWithContext(ctx context.Context) StackConfigPolicyOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o StackConfigPolicyOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *StackConfigPolicy) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StackConfigPolicyOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *StackConfigPolicy) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o StackConfigPolicyOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *StackConfigPolicy) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o StackConfigPolicyOutput) Spec() StackConfigPolicySpecOutput {
	return o.ApplyT(func(v *StackConfigPolicy) StackConfigPolicySpecOutput { return v.Spec }).(StackConfigPolicySpecOutput)
}

func (o StackConfigPolicyOutput) Status() StackConfigPolicyStatusPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicy) StackConfigPolicyStatusPtrOutput { return v.Status }).(StackConfigPolicyStatusPtrOutput)
}

type StackConfigPolicyArrayOutput struct{ *pulumi.OutputState }

func (StackConfigPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StackConfigPolicy)(nil)).Elem()
}

func (o StackConfigPolicyArrayOutput) ToStackConfigPolicyArrayOutput() StackConfigPolicyArrayOutput {
	return o
}

func (o StackConfigPolicyArrayOutput) ToStackConfigPolicyArrayOutputWithContext(ctx context.Context) StackConfigPolicyArrayOutput {
	return o
}

func (o StackConfigPolicyArrayOutput) Index(i pulumi.IntInput) StackConfigPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StackConfigPolicy {
		return vs[0].([]*StackConfigPolicy)[vs[1].(int)]
	}).(StackConfigPolicyOutput)
}

type StackConfigPolicyMapOutput struct{ *pulumi.OutputState }

func (StackConfigPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StackConfigPolicy)(nil)).Elem()
}

func (o StackConfigPolicyMapOutput) ToStackConfigPolicyMapOutput() StackConfigPolicyMapOutput {
	return o
}

func (o StackConfigPolicyMapOutput) ToStackConfigPolicyMapOutputWithContext(ctx context.Context) StackConfigPolicyMapOutput {
	return o
}

func (o StackConfigPolicyMapOutput) MapIndex(k pulumi.StringInput) StackConfigPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StackConfigPolicy {
		return vs[0].(map[string]*StackConfigPolicy)[vs[1].(string)]
	}).(StackConfigPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicyInput)(nil)).Elem(), &StackConfigPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicyArrayInput)(nil)).Elem(), StackConfigPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicyMapInput)(nil)).Elem(), StackConfigPolicyMap{})
	pulumi.RegisterOutputType(StackConfigPolicyOutput{})
	pulumi.RegisterOutputType(StackConfigPolicyArrayOutput{})
	pulumi.RegisterOutputType(StackConfigPolicyMapOutput{})
}
