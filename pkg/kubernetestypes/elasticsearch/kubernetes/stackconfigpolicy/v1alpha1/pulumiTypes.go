// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// StackConfigPolicy represents a StackConfigPolicy resource in a Kubernetes cluster.
type StackConfigPolicyType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta       `pulumi:"metadata"`
	Spec     *StackConfigPolicySpec   `pulumi:"spec"`
	Status   *StackConfigPolicyStatus `pulumi:"status"`
}

// StackConfigPolicyTypeInput is an input type that accepts StackConfigPolicyTypeArgs and StackConfigPolicyTypeOutput values.
// You can construct a concrete instance of `StackConfigPolicyTypeInput` via:
//
//	StackConfigPolicyTypeArgs{...}
type StackConfigPolicyTypeInput interface {
	pulumi.Input

	ToStackConfigPolicyTypeOutput() StackConfigPolicyTypeOutput
	ToStackConfigPolicyTypeOutputWithContext(context.Context) StackConfigPolicyTypeOutput
}

// StackConfigPolicy represents a StackConfigPolicy resource in a Kubernetes cluster.
type StackConfigPolicyTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput       `pulumi:"metadata"`
	Spec     StackConfigPolicySpecPtrInput   `pulumi:"spec"`
	Status   StackConfigPolicyStatusPtrInput `pulumi:"status"`
}

func (StackConfigPolicyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicyType)(nil)).Elem()
}

func (i StackConfigPolicyTypeArgs) ToStackConfigPolicyTypeOutput() StackConfigPolicyTypeOutput {
	return i.ToStackConfigPolicyTypeOutputWithContext(context.Background())
}

func (i StackConfigPolicyTypeArgs) ToStackConfigPolicyTypeOutputWithContext(ctx context.Context) StackConfigPolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyTypeOutput)
}

// StackConfigPolicyTypeArrayInput is an input type that accepts StackConfigPolicyTypeArray and StackConfigPolicyTypeArrayOutput values.
// You can construct a concrete instance of `StackConfigPolicyTypeArrayInput` via:
//
//	StackConfigPolicyTypeArray{ StackConfigPolicyTypeArgs{...} }
type StackConfigPolicyTypeArrayInput interface {
	pulumi.Input

	ToStackConfigPolicyTypeArrayOutput() StackConfigPolicyTypeArrayOutput
	ToStackConfigPolicyTypeArrayOutputWithContext(context.Context) StackConfigPolicyTypeArrayOutput
}

type StackConfigPolicyTypeArray []StackConfigPolicyTypeInput

func (StackConfigPolicyTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackConfigPolicyType)(nil)).Elem()
}

func (i StackConfigPolicyTypeArray) ToStackConfigPolicyTypeArrayOutput() StackConfigPolicyTypeArrayOutput {
	return i.ToStackConfigPolicyTypeArrayOutputWithContext(context.Background())
}

func (i StackConfigPolicyTypeArray) ToStackConfigPolicyTypeArrayOutputWithContext(ctx context.Context) StackConfigPolicyTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyTypeArrayOutput)
}

// StackConfigPolicy represents a StackConfigPolicy resource in a Kubernetes cluster.
type StackConfigPolicyTypeOutput struct{ *pulumi.OutputState }

func (StackConfigPolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicyType)(nil)).Elem()
}

func (o StackConfigPolicyTypeOutput) ToStackConfigPolicyTypeOutput() StackConfigPolicyTypeOutput {
	return o
}

func (o StackConfigPolicyTypeOutput) ToStackConfigPolicyTypeOutputWithContext(ctx context.Context) StackConfigPolicyTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o StackConfigPolicyTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StackConfigPolicyTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o StackConfigPolicyTypeOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyType) *metav1.ObjectMeta { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o StackConfigPolicyTypeOutput) Spec() StackConfigPolicySpecPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyType) *StackConfigPolicySpec { return v.Spec }).(StackConfigPolicySpecPtrOutput)
}

func (o StackConfigPolicyTypeOutput) Status() StackConfigPolicyStatusPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyType) *StackConfigPolicyStatus { return v.Status }).(StackConfigPolicyStatusPtrOutput)
}

type StackConfigPolicyTypeArrayOutput struct{ *pulumi.OutputState }

func (StackConfigPolicyTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackConfigPolicyType)(nil)).Elem()
}

func (o StackConfigPolicyTypeArrayOutput) ToStackConfigPolicyTypeArrayOutput() StackConfigPolicyTypeArrayOutput {
	return o
}

func (o StackConfigPolicyTypeArrayOutput) ToStackConfigPolicyTypeArrayOutputWithContext(ctx context.Context) StackConfigPolicyTypeArrayOutput {
	return o
}

func (o StackConfigPolicyTypeArrayOutput) Index(i pulumi.IntInput) StackConfigPolicyTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StackConfigPolicyType {
		return vs[0].([]StackConfigPolicyType)[vs[1].(int)]
	}).(StackConfigPolicyTypeOutput)
}

// StackConfigPolicyList is a list of StackConfigPolicy
type StackConfigPolicyListType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of stackconfigpolicies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []StackConfigPolicyType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// StackConfigPolicyListTypeInput is an input type that accepts StackConfigPolicyListTypeArgs and StackConfigPolicyListTypeOutput values.
// You can construct a concrete instance of `StackConfigPolicyListTypeInput` via:
//
//	StackConfigPolicyListTypeArgs{...}
type StackConfigPolicyListTypeInput interface {
	pulumi.Input

	ToStackConfigPolicyListTypeOutput() StackConfigPolicyListTypeOutput
	ToStackConfigPolicyListTypeOutputWithContext(context.Context) StackConfigPolicyListTypeOutput
}

// StackConfigPolicyList is a list of StackConfigPolicy
type StackConfigPolicyListTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// List of stackconfigpolicies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items StackConfigPolicyTypeArrayInput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput `pulumi:"metadata"`
}

func (StackConfigPolicyListTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicyListType)(nil)).Elem()
}

func (i StackConfigPolicyListTypeArgs) ToStackConfigPolicyListTypeOutput() StackConfigPolicyListTypeOutput {
	return i.ToStackConfigPolicyListTypeOutputWithContext(context.Background())
}

func (i StackConfigPolicyListTypeArgs) ToStackConfigPolicyListTypeOutputWithContext(ctx context.Context) StackConfigPolicyListTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyListTypeOutput)
}

// StackConfigPolicyList is a list of StackConfigPolicy
type StackConfigPolicyListTypeOutput struct{ *pulumi.OutputState }

func (StackConfigPolicyListTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicyListType)(nil)).Elem()
}

func (o StackConfigPolicyListTypeOutput) ToStackConfigPolicyListTypeOutput() StackConfigPolicyListTypeOutput {
	return o
}

func (o StackConfigPolicyListTypeOutput) ToStackConfigPolicyListTypeOutputWithContext(ctx context.Context) StackConfigPolicyListTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o StackConfigPolicyListTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyListType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// List of stackconfigpolicies. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o StackConfigPolicyListTypeOutput) Items() StackConfigPolicyTypeArrayOutput {
	return o.ApplyT(func(v StackConfigPolicyListType) []StackConfigPolicyType { return v.Items }).(StackConfigPolicyTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StackConfigPolicyListTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyListType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StackConfigPolicyListTypeOutput) Metadata() metav1.ListMetaPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyListType) *metav1.ListMeta { return v.Metadata }).(metav1.ListMetaPtrOutput)
}

// StackConfigPolicy represents a StackConfigPolicy resource in a Kubernetes cluster.
type StackConfigPolicyPatchType struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch       `pulumi:"metadata"`
	Spec     *StackConfigPolicySpecPatch   `pulumi:"spec"`
	Status   *StackConfigPolicyStatusPatch `pulumi:"status"`
}

// StackConfigPolicyPatchTypeInput is an input type that accepts StackConfigPolicyPatchTypeArgs and StackConfigPolicyPatchTypeOutput values.
// You can construct a concrete instance of `StackConfigPolicyPatchTypeInput` via:
//
//	StackConfigPolicyPatchTypeArgs{...}
type StackConfigPolicyPatchTypeInput interface {
	pulumi.Input

	ToStackConfigPolicyPatchTypeOutput() StackConfigPolicyPatchTypeOutput
	ToStackConfigPolicyPatchTypeOutputWithContext(context.Context) StackConfigPolicyPatchTypeOutput
}

// StackConfigPolicy represents a StackConfigPolicy resource in a Kubernetes cluster.
type StackConfigPolicyPatchTypeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput       `pulumi:"metadata"`
	Spec     StackConfigPolicySpecPatchPtrInput   `pulumi:"spec"`
	Status   StackConfigPolicyStatusPatchPtrInput `pulumi:"status"`
}

func (StackConfigPolicyPatchTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicyPatchType)(nil)).Elem()
}

func (i StackConfigPolicyPatchTypeArgs) ToStackConfigPolicyPatchTypeOutput() StackConfigPolicyPatchTypeOutput {
	return i.ToStackConfigPolicyPatchTypeOutputWithContext(context.Background())
}

func (i StackConfigPolicyPatchTypeArgs) ToStackConfigPolicyPatchTypeOutputWithContext(ctx context.Context) StackConfigPolicyPatchTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyPatchTypeOutput)
}

// StackConfigPolicy represents a StackConfigPolicy resource in a Kubernetes cluster.
type StackConfigPolicyPatchTypeOutput struct{ *pulumi.OutputState }

func (StackConfigPolicyPatchTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicyPatchType)(nil)).Elem()
}

func (o StackConfigPolicyPatchTypeOutput) ToStackConfigPolicyPatchTypeOutput() StackConfigPolicyPatchTypeOutput {
	return o
}

func (o StackConfigPolicyPatchTypeOutput) ToStackConfigPolicyPatchTypeOutputWithContext(ctx context.Context) StackConfigPolicyPatchTypeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o StackConfigPolicyPatchTypeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyPatchType) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o StackConfigPolicyPatchTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyPatchType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o StackConfigPolicyPatchTypeOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyPatchType) *metav1.ObjectMetaPatch { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o StackConfigPolicyPatchTypeOutput) Spec() StackConfigPolicySpecPatchPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyPatchType) *StackConfigPolicySpecPatch { return v.Spec }).(StackConfigPolicySpecPatchPtrOutput)
}

func (o StackConfigPolicyPatchTypeOutput) Status() StackConfigPolicyStatusPatchPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyPatchType) *StackConfigPolicyStatusPatch { return v.Status }).(StackConfigPolicyStatusPatchPtrOutput)
}

type StackConfigPolicySpec struct {
	Elasticsearch    *StackConfigPolicySpecElasticsearch    `pulumi:"elasticsearch"`
	Kibana           *StackConfigPolicySpecKibana           `pulumi:"kibana"`
	ResourceSelector *StackConfigPolicySpecResourceSelector `pulumi:"resourceSelector"`
	// Deprecated: SecureSettings only applies to Elasticsearch and is deprecated. It must be set per application instead.
	SecureSettings []StackConfigPolicySpecSecureSettings `pulumi:"secureSettings"`
}

// StackConfigPolicySpecInput is an input type that accepts StackConfigPolicySpecArgs and StackConfigPolicySpecOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecInput` via:
//
//	StackConfigPolicySpecArgs{...}
type StackConfigPolicySpecInput interface {
	pulumi.Input

	ToStackConfigPolicySpecOutput() StackConfigPolicySpecOutput
	ToStackConfigPolicySpecOutputWithContext(context.Context) StackConfigPolicySpecOutput
}

type StackConfigPolicySpecArgs struct {
	Elasticsearch    StackConfigPolicySpecElasticsearchPtrInput    `pulumi:"elasticsearch"`
	Kibana           StackConfigPolicySpecKibanaPtrInput           `pulumi:"kibana"`
	ResourceSelector StackConfigPolicySpecResourceSelectorPtrInput `pulumi:"resourceSelector"`
	// Deprecated: SecureSettings only applies to Elasticsearch and is deprecated. It must be set per application instead.
	SecureSettings StackConfigPolicySpecSecureSettingsArrayInput `pulumi:"secureSettings"`
}

func (StackConfigPolicySpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpec)(nil)).Elem()
}

func (i StackConfigPolicySpecArgs) ToStackConfigPolicySpecOutput() StackConfigPolicySpecOutput {
	return i.ToStackConfigPolicySpecOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecArgs) ToStackConfigPolicySpecOutputWithContext(ctx context.Context) StackConfigPolicySpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecOutput)
}

func (i StackConfigPolicySpecArgs) ToStackConfigPolicySpecPtrOutput() StackConfigPolicySpecPtrOutput {
	return i.ToStackConfigPolicySpecPtrOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecArgs) ToStackConfigPolicySpecPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecOutput).ToStackConfigPolicySpecPtrOutputWithContext(ctx)
}

// StackConfigPolicySpecPtrInput is an input type that accepts StackConfigPolicySpecArgs, StackConfigPolicySpecPtr and StackConfigPolicySpecPtrOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecPtrInput` via:
//
//	        StackConfigPolicySpecArgs{...}
//
//	or:
//
//	        nil
type StackConfigPolicySpecPtrInput interface {
	pulumi.Input

	ToStackConfigPolicySpecPtrOutput() StackConfigPolicySpecPtrOutput
	ToStackConfigPolicySpecPtrOutputWithContext(context.Context) StackConfigPolicySpecPtrOutput
}

type stackConfigPolicySpecPtrType StackConfigPolicySpecArgs

func StackConfigPolicySpecPtr(v *StackConfigPolicySpecArgs) StackConfigPolicySpecPtrInput {
	return (*stackConfigPolicySpecPtrType)(v)
}

func (*stackConfigPolicySpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicySpec)(nil)).Elem()
}

func (i *stackConfigPolicySpecPtrType) ToStackConfigPolicySpecPtrOutput() StackConfigPolicySpecPtrOutput {
	return i.ToStackConfigPolicySpecPtrOutputWithContext(context.Background())
}

func (i *stackConfigPolicySpecPtrType) ToStackConfigPolicySpecPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecPtrOutput)
}

type StackConfigPolicySpecOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpec)(nil)).Elem()
}

func (o StackConfigPolicySpecOutput) ToStackConfigPolicySpecOutput() StackConfigPolicySpecOutput {
	return o
}

func (o StackConfigPolicySpecOutput) ToStackConfigPolicySpecOutputWithContext(ctx context.Context) StackConfigPolicySpecOutput {
	return o
}

func (o StackConfigPolicySpecOutput) ToStackConfigPolicySpecPtrOutput() StackConfigPolicySpecPtrOutput {
	return o.ToStackConfigPolicySpecPtrOutputWithContext(context.Background())
}

func (o StackConfigPolicySpecOutput) ToStackConfigPolicySpecPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackConfigPolicySpec) *StackConfigPolicySpec {
		return &v
	}).(StackConfigPolicySpecPtrOutput)
}

func (o StackConfigPolicySpecOutput) Elasticsearch() StackConfigPolicySpecElasticsearchPtrOutput {
	return o.ApplyT(func(v StackConfigPolicySpec) *StackConfigPolicySpecElasticsearch { return v.Elasticsearch }).(StackConfigPolicySpecElasticsearchPtrOutput)
}

func (o StackConfigPolicySpecOutput) Kibana() StackConfigPolicySpecKibanaPtrOutput {
	return o.ApplyT(func(v StackConfigPolicySpec) *StackConfigPolicySpecKibana { return v.Kibana }).(StackConfigPolicySpecKibanaPtrOutput)
}

func (o StackConfigPolicySpecOutput) ResourceSelector() StackConfigPolicySpecResourceSelectorPtrOutput {
	return o.ApplyT(func(v StackConfigPolicySpec) *StackConfigPolicySpecResourceSelector { return v.ResourceSelector }).(StackConfigPolicySpecResourceSelectorPtrOutput)
}

// Deprecated: SecureSettings only applies to Elasticsearch and is deprecated. It must be set per application instead.
func (o StackConfigPolicySpecOutput) SecureSettings() StackConfigPolicySpecSecureSettingsArrayOutput {
	return o.ApplyT(func(v StackConfigPolicySpec) []StackConfigPolicySpecSecureSettings { return v.SecureSettings }).(StackConfigPolicySpecSecureSettingsArrayOutput)
}

type StackConfigPolicySpecPtrOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicySpec)(nil)).Elem()
}

func (o StackConfigPolicySpecPtrOutput) ToStackConfigPolicySpecPtrOutput() StackConfigPolicySpecPtrOutput {
	return o
}

func (o StackConfigPolicySpecPtrOutput) ToStackConfigPolicySpecPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecPtrOutput {
	return o
}

func (o StackConfigPolicySpecPtrOutput) Elem() StackConfigPolicySpecOutput {
	return o.ApplyT(func(v *StackConfigPolicySpec) StackConfigPolicySpec {
		if v != nil {
			return *v
		}
		var ret StackConfigPolicySpec
		return ret
	}).(StackConfigPolicySpecOutput)
}

func (o StackConfigPolicySpecPtrOutput) Elasticsearch() StackConfigPolicySpecElasticsearchPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicySpec) *StackConfigPolicySpecElasticsearch {
		if v == nil {
			return nil
		}
		return v.Elasticsearch
	}).(StackConfigPolicySpecElasticsearchPtrOutput)
}

func (o StackConfigPolicySpecPtrOutput) Kibana() StackConfigPolicySpecKibanaPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicySpec) *StackConfigPolicySpecKibana {
		if v == nil {
			return nil
		}
		return v.Kibana
	}).(StackConfigPolicySpecKibanaPtrOutput)
}

func (o StackConfigPolicySpecPtrOutput) ResourceSelector() StackConfigPolicySpecResourceSelectorPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicySpec) *StackConfigPolicySpecResourceSelector {
		if v == nil {
			return nil
		}
		return v.ResourceSelector
	}).(StackConfigPolicySpecResourceSelectorPtrOutput)
}

// Deprecated: SecureSettings only applies to Elasticsearch and is deprecated. It must be set per application instead.
func (o StackConfigPolicySpecPtrOutput) SecureSettings() StackConfigPolicySpecSecureSettingsArrayOutput {
	return o.ApplyT(func(v *StackConfigPolicySpec) []StackConfigPolicySpecSecureSettings {
		if v == nil {
			return nil
		}
		return v.SecureSettings
	}).(StackConfigPolicySpecSecureSettingsArrayOutput)
}

type StackConfigPolicySpecElasticsearch struct {
	// ClusterSettings holds the Elasticsearch cluster settings (/_cluster/settings)
	ClusterSettings map[string]interface{} `pulumi:"clusterSettings"`
	// Config holds the settings that go into elasticsearch.yml.
	Config map[string]interface{} `pulumi:"config"`
	// IndexLifecyclePolicies holds the Index Lifecycle policies settings (/_ilm/policy)
	IndexLifecyclePolicies map[string]interface{} `pulumi:"indexLifecyclePolicies"`
	// IndexTemplates holds the Index and Component Templates settings
	IndexTemplates map[string]interface{} `pulumi:"indexTemplates"`
	// IngestPipelines holds the Ingest Pipelines settings (/_ingest/pipeline)
	IngestPipelines map[string]interface{} `pulumi:"ingestPipelines"`
	// SecretMounts are additional Secrets that need to be mounted into the Elasticsearch pods.
	SecretMounts map[string]interface{} `pulumi:"secretMounts"`
	// SecureSettings are additional Secrets that contain data to be configured to Elasticsearch's keystore.
	SecureSettings map[string]interface{} `pulumi:"secureSettings"`
	// SecurityRoleMappings holds the Role Mappings settings (/_security/role_mapping)
	SecurityRoleMappings map[string]interface{} `pulumi:"securityRoleMappings"`
	// SnapshotLifecyclePolicies holds the Snapshot Lifecycle Policies settings (/_slm/policy)
	SnapshotLifecyclePolicies map[string]interface{} `pulumi:"snapshotLifecyclePolicies"`
	// SnapshotRepositories holds the Snapshot Repositories settings (/_snapshot)
	SnapshotRepositories map[string]interface{} `pulumi:"snapshotRepositories"`
}

// StackConfigPolicySpecElasticsearchInput is an input type that accepts StackConfigPolicySpecElasticsearchArgs and StackConfigPolicySpecElasticsearchOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecElasticsearchInput` via:
//
//	StackConfigPolicySpecElasticsearchArgs{...}
type StackConfigPolicySpecElasticsearchInput interface {
	pulumi.Input

	ToStackConfigPolicySpecElasticsearchOutput() StackConfigPolicySpecElasticsearchOutput
	ToStackConfigPolicySpecElasticsearchOutputWithContext(context.Context) StackConfigPolicySpecElasticsearchOutput
}

type StackConfigPolicySpecElasticsearchArgs struct {
	// ClusterSettings holds the Elasticsearch cluster settings (/_cluster/settings)
	ClusterSettings pulumi.MapInput `pulumi:"clusterSettings"`
	// Config holds the settings that go into elasticsearch.yml.
	Config pulumi.MapInput `pulumi:"config"`
	// IndexLifecyclePolicies holds the Index Lifecycle policies settings (/_ilm/policy)
	IndexLifecyclePolicies pulumi.MapInput `pulumi:"indexLifecyclePolicies"`
	// IndexTemplates holds the Index and Component Templates settings
	IndexTemplates pulumi.MapInput `pulumi:"indexTemplates"`
	// IngestPipelines holds the Ingest Pipelines settings (/_ingest/pipeline)
	IngestPipelines pulumi.MapInput `pulumi:"ingestPipelines"`
	// SecretMounts are additional Secrets that need to be mounted into the Elasticsearch pods.
	SecretMounts pulumi.MapInput `pulumi:"secretMounts"`
	// SecureSettings are additional Secrets that contain data to be configured to Elasticsearch's keystore.
	SecureSettings pulumi.MapInput `pulumi:"secureSettings"`
	// SecurityRoleMappings holds the Role Mappings settings (/_security/role_mapping)
	SecurityRoleMappings pulumi.MapInput `pulumi:"securityRoleMappings"`
	// SnapshotLifecyclePolicies holds the Snapshot Lifecycle Policies settings (/_slm/policy)
	SnapshotLifecyclePolicies pulumi.MapInput `pulumi:"snapshotLifecyclePolicies"`
	// SnapshotRepositories holds the Snapshot Repositories settings (/_snapshot)
	SnapshotRepositories pulumi.MapInput `pulumi:"snapshotRepositories"`
}

func (StackConfigPolicySpecElasticsearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecElasticsearch)(nil)).Elem()
}

func (i StackConfigPolicySpecElasticsearchArgs) ToStackConfigPolicySpecElasticsearchOutput() StackConfigPolicySpecElasticsearchOutput {
	return i.ToStackConfigPolicySpecElasticsearchOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecElasticsearchArgs) ToStackConfigPolicySpecElasticsearchOutputWithContext(ctx context.Context) StackConfigPolicySpecElasticsearchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecElasticsearchOutput)
}

func (i StackConfigPolicySpecElasticsearchArgs) ToStackConfigPolicySpecElasticsearchPtrOutput() StackConfigPolicySpecElasticsearchPtrOutput {
	return i.ToStackConfigPolicySpecElasticsearchPtrOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecElasticsearchArgs) ToStackConfigPolicySpecElasticsearchPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecElasticsearchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecElasticsearchOutput).ToStackConfigPolicySpecElasticsearchPtrOutputWithContext(ctx)
}

// StackConfigPolicySpecElasticsearchPtrInput is an input type that accepts StackConfigPolicySpecElasticsearchArgs, StackConfigPolicySpecElasticsearchPtr and StackConfigPolicySpecElasticsearchPtrOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecElasticsearchPtrInput` via:
//
//	        StackConfigPolicySpecElasticsearchArgs{...}
//
//	or:
//
//	        nil
type StackConfigPolicySpecElasticsearchPtrInput interface {
	pulumi.Input

	ToStackConfigPolicySpecElasticsearchPtrOutput() StackConfigPolicySpecElasticsearchPtrOutput
	ToStackConfigPolicySpecElasticsearchPtrOutputWithContext(context.Context) StackConfigPolicySpecElasticsearchPtrOutput
}

type stackConfigPolicySpecElasticsearchPtrType StackConfigPolicySpecElasticsearchArgs

func StackConfigPolicySpecElasticsearchPtr(v *StackConfigPolicySpecElasticsearchArgs) StackConfigPolicySpecElasticsearchPtrInput {
	return (*stackConfigPolicySpecElasticsearchPtrType)(v)
}

func (*stackConfigPolicySpecElasticsearchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicySpecElasticsearch)(nil)).Elem()
}

func (i *stackConfigPolicySpecElasticsearchPtrType) ToStackConfigPolicySpecElasticsearchPtrOutput() StackConfigPolicySpecElasticsearchPtrOutput {
	return i.ToStackConfigPolicySpecElasticsearchPtrOutputWithContext(context.Background())
}

func (i *stackConfigPolicySpecElasticsearchPtrType) ToStackConfigPolicySpecElasticsearchPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecElasticsearchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecElasticsearchPtrOutput)
}

type StackConfigPolicySpecElasticsearchOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecElasticsearchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecElasticsearch)(nil)).Elem()
}

func (o StackConfigPolicySpecElasticsearchOutput) ToStackConfigPolicySpecElasticsearchOutput() StackConfigPolicySpecElasticsearchOutput {
	return o
}

func (o StackConfigPolicySpecElasticsearchOutput) ToStackConfigPolicySpecElasticsearchOutputWithContext(ctx context.Context) StackConfigPolicySpecElasticsearchOutput {
	return o
}

func (o StackConfigPolicySpecElasticsearchOutput) ToStackConfigPolicySpecElasticsearchPtrOutput() StackConfigPolicySpecElasticsearchPtrOutput {
	return o.ToStackConfigPolicySpecElasticsearchPtrOutputWithContext(context.Background())
}

func (o StackConfigPolicySpecElasticsearchOutput) ToStackConfigPolicySpecElasticsearchPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecElasticsearchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackConfigPolicySpecElasticsearch) *StackConfigPolicySpecElasticsearch {
		return &v
	}).(StackConfigPolicySpecElasticsearchPtrOutput)
}

// ClusterSettings holds the Elasticsearch cluster settings (/_cluster/settings)
func (o StackConfigPolicySpecElasticsearchOutput) ClusterSettings() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecElasticsearch) map[string]interface{} { return v.ClusterSettings }).(pulumi.MapOutput)
}

// Config holds the settings that go into elasticsearch.yml.
func (o StackConfigPolicySpecElasticsearchOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecElasticsearch) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

// IndexLifecyclePolicies holds the Index Lifecycle policies settings (/_ilm/policy)
func (o StackConfigPolicySpecElasticsearchOutput) IndexLifecyclePolicies() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecElasticsearch) map[string]interface{} { return v.IndexLifecyclePolicies }).(pulumi.MapOutput)
}

// IndexTemplates holds the Index and Component Templates settings
func (o StackConfigPolicySpecElasticsearchOutput) IndexTemplates() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecElasticsearch) map[string]interface{} { return v.IndexTemplates }).(pulumi.MapOutput)
}

// IngestPipelines holds the Ingest Pipelines settings (/_ingest/pipeline)
func (o StackConfigPolicySpecElasticsearchOutput) IngestPipelines() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecElasticsearch) map[string]interface{} { return v.IngestPipelines }).(pulumi.MapOutput)
}

// SecretMounts are additional Secrets that need to be mounted into the Elasticsearch pods.
func (o StackConfigPolicySpecElasticsearchOutput) SecretMounts() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecElasticsearch) map[string]interface{} { return v.SecretMounts }).(pulumi.MapOutput)
}

// SecureSettings are additional Secrets that contain data to be configured to Elasticsearch's keystore.
func (o StackConfigPolicySpecElasticsearchOutput) SecureSettings() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecElasticsearch) map[string]interface{} { return v.SecureSettings }).(pulumi.MapOutput)
}

// SecurityRoleMappings holds the Role Mappings settings (/_security/role_mapping)
func (o StackConfigPolicySpecElasticsearchOutput) SecurityRoleMappings() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecElasticsearch) map[string]interface{} { return v.SecurityRoleMappings }).(pulumi.MapOutput)
}

// SnapshotLifecyclePolicies holds the Snapshot Lifecycle Policies settings (/_slm/policy)
func (o StackConfigPolicySpecElasticsearchOutput) SnapshotLifecyclePolicies() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecElasticsearch) map[string]interface{} { return v.SnapshotLifecyclePolicies }).(pulumi.MapOutput)
}

// SnapshotRepositories holds the Snapshot Repositories settings (/_snapshot)
func (o StackConfigPolicySpecElasticsearchOutput) SnapshotRepositories() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecElasticsearch) map[string]interface{} { return v.SnapshotRepositories }).(pulumi.MapOutput)
}

type StackConfigPolicySpecElasticsearchPtrOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecElasticsearchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicySpecElasticsearch)(nil)).Elem()
}

func (o StackConfigPolicySpecElasticsearchPtrOutput) ToStackConfigPolicySpecElasticsearchPtrOutput() StackConfigPolicySpecElasticsearchPtrOutput {
	return o
}

func (o StackConfigPolicySpecElasticsearchPtrOutput) ToStackConfigPolicySpecElasticsearchPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecElasticsearchPtrOutput {
	return o
}

func (o StackConfigPolicySpecElasticsearchPtrOutput) Elem() StackConfigPolicySpecElasticsearchOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearch) StackConfigPolicySpecElasticsearch {
		if v != nil {
			return *v
		}
		var ret StackConfigPolicySpecElasticsearch
		return ret
	}).(StackConfigPolicySpecElasticsearchOutput)
}

// ClusterSettings holds the Elasticsearch cluster settings (/_cluster/settings)
func (o StackConfigPolicySpecElasticsearchPtrOutput) ClusterSettings() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.ClusterSettings
	}).(pulumi.MapOutput)
}

// Config holds the settings that go into elasticsearch.yml.
func (o StackConfigPolicySpecElasticsearchPtrOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.MapOutput)
}

// IndexLifecyclePolicies holds the Index Lifecycle policies settings (/_ilm/policy)
func (o StackConfigPolicySpecElasticsearchPtrOutput) IndexLifecyclePolicies() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.IndexLifecyclePolicies
	}).(pulumi.MapOutput)
}

// IndexTemplates holds the Index and Component Templates settings
func (o StackConfigPolicySpecElasticsearchPtrOutput) IndexTemplates() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.IndexTemplates
	}).(pulumi.MapOutput)
}

// IngestPipelines holds the Ingest Pipelines settings (/_ingest/pipeline)
func (o StackConfigPolicySpecElasticsearchPtrOutput) IngestPipelines() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.IngestPipelines
	}).(pulumi.MapOutput)
}

// SecretMounts are additional Secrets that need to be mounted into the Elasticsearch pods.
func (o StackConfigPolicySpecElasticsearchPtrOutput) SecretMounts() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.SecretMounts
	}).(pulumi.MapOutput)
}

// SecureSettings are additional Secrets that contain data to be configured to Elasticsearch's keystore.
func (o StackConfigPolicySpecElasticsearchPtrOutput) SecureSettings() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.SecureSettings
	}).(pulumi.MapOutput)
}

// SecurityRoleMappings holds the Role Mappings settings (/_security/role_mapping)
func (o StackConfigPolicySpecElasticsearchPtrOutput) SecurityRoleMappings() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.SecurityRoleMappings
	}).(pulumi.MapOutput)
}

// SnapshotLifecyclePolicies holds the Snapshot Lifecycle Policies settings (/_slm/policy)
func (o StackConfigPolicySpecElasticsearchPtrOutput) SnapshotLifecyclePolicies() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.SnapshotLifecyclePolicies
	}).(pulumi.MapOutput)
}

// SnapshotRepositories holds the Snapshot Repositories settings (/_snapshot)
func (o StackConfigPolicySpecElasticsearchPtrOutput) SnapshotRepositories() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.SnapshotRepositories
	}).(pulumi.MapOutput)
}

type StackConfigPolicySpecElasticsearchPatch struct {
	// ClusterSettings holds the Elasticsearch cluster settings (/_cluster/settings)
	ClusterSettings map[string]interface{} `pulumi:"clusterSettings"`
	// Config holds the settings that go into elasticsearch.yml.
	Config map[string]interface{} `pulumi:"config"`
	// IndexLifecyclePolicies holds the Index Lifecycle policies settings (/_ilm/policy)
	IndexLifecyclePolicies map[string]interface{} `pulumi:"indexLifecyclePolicies"`
	// IndexTemplates holds the Index and Component Templates settings
	IndexTemplates map[string]interface{} `pulumi:"indexTemplates"`
	// IngestPipelines holds the Ingest Pipelines settings (/_ingest/pipeline)
	IngestPipelines map[string]interface{} `pulumi:"ingestPipelines"`
	// SecretMounts are additional Secrets that need to be mounted into the Elasticsearch pods.
	SecretMounts map[string]interface{} `pulumi:"secretMounts"`
	// SecureSettings are additional Secrets that contain data to be configured to Elasticsearch's keystore.
	SecureSettings map[string]interface{} `pulumi:"secureSettings"`
	// SecurityRoleMappings holds the Role Mappings settings (/_security/role_mapping)
	SecurityRoleMappings map[string]interface{} `pulumi:"securityRoleMappings"`
	// SnapshotLifecyclePolicies holds the Snapshot Lifecycle Policies settings (/_slm/policy)
	SnapshotLifecyclePolicies map[string]interface{} `pulumi:"snapshotLifecyclePolicies"`
	// SnapshotRepositories holds the Snapshot Repositories settings (/_snapshot)
	SnapshotRepositories map[string]interface{} `pulumi:"snapshotRepositories"`
}

// StackConfigPolicySpecElasticsearchPatchInput is an input type that accepts StackConfigPolicySpecElasticsearchPatchArgs and StackConfigPolicySpecElasticsearchPatchOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecElasticsearchPatchInput` via:
//
//	StackConfigPolicySpecElasticsearchPatchArgs{...}
type StackConfigPolicySpecElasticsearchPatchInput interface {
	pulumi.Input

	ToStackConfigPolicySpecElasticsearchPatchOutput() StackConfigPolicySpecElasticsearchPatchOutput
	ToStackConfigPolicySpecElasticsearchPatchOutputWithContext(context.Context) StackConfigPolicySpecElasticsearchPatchOutput
}

type StackConfigPolicySpecElasticsearchPatchArgs struct {
	// ClusterSettings holds the Elasticsearch cluster settings (/_cluster/settings)
	ClusterSettings pulumi.MapInput `pulumi:"clusterSettings"`
	// Config holds the settings that go into elasticsearch.yml.
	Config pulumi.MapInput `pulumi:"config"`
	// IndexLifecyclePolicies holds the Index Lifecycle policies settings (/_ilm/policy)
	IndexLifecyclePolicies pulumi.MapInput `pulumi:"indexLifecyclePolicies"`
	// IndexTemplates holds the Index and Component Templates settings
	IndexTemplates pulumi.MapInput `pulumi:"indexTemplates"`
	// IngestPipelines holds the Ingest Pipelines settings (/_ingest/pipeline)
	IngestPipelines pulumi.MapInput `pulumi:"ingestPipelines"`
	// SecretMounts are additional Secrets that need to be mounted into the Elasticsearch pods.
	SecretMounts pulumi.MapInput `pulumi:"secretMounts"`
	// SecureSettings are additional Secrets that contain data to be configured to Elasticsearch's keystore.
	SecureSettings pulumi.MapInput `pulumi:"secureSettings"`
	// SecurityRoleMappings holds the Role Mappings settings (/_security/role_mapping)
	SecurityRoleMappings pulumi.MapInput `pulumi:"securityRoleMappings"`
	// SnapshotLifecyclePolicies holds the Snapshot Lifecycle Policies settings (/_slm/policy)
	SnapshotLifecyclePolicies pulumi.MapInput `pulumi:"snapshotLifecyclePolicies"`
	// SnapshotRepositories holds the Snapshot Repositories settings (/_snapshot)
	SnapshotRepositories pulumi.MapInput `pulumi:"snapshotRepositories"`
}

func (StackConfigPolicySpecElasticsearchPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecElasticsearchPatch)(nil)).Elem()
}

func (i StackConfigPolicySpecElasticsearchPatchArgs) ToStackConfigPolicySpecElasticsearchPatchOutput() StackConfigPolicySpecElasticsearchPatchOutput {
	return i.ToStackConfigPolicySpecElasticsearchPatchOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecElasticsearchPatchArgs) ToStackConfigPolicySpecElasticsearchPatchOutputWithContext(ctx context.Context) StackConfigPolicySpecElasticsearchPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecElasticsearchPatchOutput)
}

func (i StackConfigPolicySpecElasticsearchPatchArgs) ToStackConfigPolicySpecElasticsearchPatchPtrOutput() StackConfigPolicySpecElasticsearchPatchPtrOutput {
	return i.ToStackConfigPolicySpecElasticsearchPatchPtrOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecElasticsearchPatchArgs) ToStackConfigPolicySpecElasticsearchPatchPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecElasticsearchPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecElasticsearchPatchOutput).ToStackConfigPolicySpecElasticsearchPatchPtrOutputWithContext(ctx)
}

// StackConfigPolicySpecElasticsearchPatchPtrInput is an input type that accepts StackConfigPolicySpecElasticsearchPatchArgs, StackConfigPolicySpecElasticsearchPatchPtr and StackConfigPolicySpecElasticsearchPatchPtrOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecElasticsearchPatchPtrInput` via:
//
//	        StackConfigPolicySpecElasticsearchPatchArgs{...}
//
//	or:
//
//	        nil
type StackConfigPolicySpecElasticsearchPatchPtrInput interface {
	pulumi.Input

	ToStackConfigPolicySpecElasticsearchPatchPtrOutput() StackConfigPolicySpecElasticsearchPatchPtrOutput
	ToStackConfigPolicySpecElasticsearchPatchPtrOutputWithContext(context.Context) StackConfigPolicySpecElasticsearchPatchPtrOutput
}

type stackConfigPolicySpecElasticsearchPatchPtrType StackConfigPolicySpecElasticsearchPatchArgs

func StackConfigPolicySpecElasticsearchPatchPtr(v *StackConfigPolicySpecElasticsearchPatchArgs) StackConfigPolicySpecElasticsearchPatchPtrInput {
	return (*stackConfigPolicySpecElasticsearchPatchPtrType)(v)
}

func (*stackConfigPolicySpecElasticsearchPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicySpecElasticsearchPatch)(nil)).Elem()
}

func (i *stackConfigPolicySpecElasticsearchPatchPtrType) ToStackConfigPolicySpecElasticsearchPatchPtrOutput() StackConfigPolicySpecElasticsearchPatchPtrOutput {
	return i.ToStackConfigPolicySpecElasticsearchPatchPtrOutputWithContext(context.Background())
}

func (i *stackConfigPolicySpecElasticsearchPatchPtrType) ToStackConfigPolicySpecElasticsearchPatchPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecElasticsearchPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecElasticsearchPatchPtrOutput)
}

type StackConfigPolicySpecElasticsearchPatchOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecElasticsearchPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecElasticsearchPatch)(nil)).Elem()
}

func (o StackConfigPolicySpecElasticsearchPatchOutput) ToStackConfigPolicySpecElasticsearchPatchOutput() StackConfigPolicySpecElasticsearchPatchOutput {
	return o
}

func (o StackConfigPolicySpecElasticsearchPatchOutput) ToStackConfigPolicySpecElasticsearchPatchOutputWithContext(ctx context.Context) StackConfigPolicySpecElasticsearchPatchOutput {
	return o
}

func (o StackConfigPolicySpecElasticsearchPatchOutput) ToStackConfigPolicySpecElasticsearchPatchPtrOutput() StackConfigPolicySpecElasticsearchPatchPtrOutput {
	return o.ToStackConfigPolicySpecElasticsearchPatchPtrOutputWithContext(context.Background())
}

func (o StackConfigPolicySpecElasticsearchPatchOutput) ToStackConfigPolicySpecElasticsearchPatchPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecElasticsearchPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackConfigPolicySpecElasticsearchPatch) *StackConfigPolicySpecElasticsearchPatch {
		return &v
	}).(StackConfigPolicySpecElasticsearchPatchPtrOutput)
}

// ClusterSettings holds the Elasticsearch cluster settings (/_cluster/settings)
func (o StackConfigPolicySpecElasticsearchPatchOutput) ClusterSettings() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecElasticsearchPatch) map[string]interface{} { return v.ClusterSettings }).(pulumi.MapOutput)
}

// Config holds the settings that go into elasticsearch.yml.
func (o StackConfigPolicySpecElasticsearchPatchOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecElasticsearchPatch) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

// IndexLifecyclePolicies holds the Index Lifecycle policies settings (/_ilm/policy)
func (o StackConfigPolicySpecElasticsearchPatchOutput) IndexLifecyclePolicies() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecElasticsearchPatch) map[string]interface{} {
		return v.IndexLifecyclePolicies
	}).(pulumi.MapOutput)
}

// IndexTemplates holds the Index and Component Templates settings
func (o StackConfigPolicySpecElasticsearchPatchOutput) IndexTemplates() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecElasticsearchPatch) map[string]interface{} { return v.IndexTemplates }).(pulumi.MapOutput)
}

// IngestPipelines holds the Ingest Pipelines settings (/_ingest/pipeline)
func (o StackConfigPolicySpecElasticsearchPatchOutput) IngestPipelines() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecElasticsearchPatch) map[string]interface{} { return v.IngestPipelines }).(pulumi.MapOutput)
}

// SecretMounts are additional Secrets that need to be mounted into the Elasticsearch pods.
func (o StackConfigPolicySpecElasticsearchPatchOutput) SecretMounts() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecElasticsearchPatch) map[string]interface{} { return v.SecretMounts }).(pulumi.MapOutput)
}

// SecureSettings are additional Secrets that contain data to be configured to Elasticsearch's keystore.
func (o StackConfigPolicySpecElasticsearchPatchOutput) SecureSettings() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecElasticsearchPatch) map[string]interface{} { return v.SecureSettings }).(pulumi.MapOutput)
}

// SecurityRoleMappings holds the Role Mappings settings (/_security/role_mapping)
func (o StackConfigPolicySpecElasticsearchPatchOutput) SecurityRoleMappings() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecElasticsearchPatch) map[string]interface{} { return v.SecurityRoleMappings }).(pulumi.MapOutput)
}

// SnapshotLifecyclePolicies holds the Snapshot Lifecycle Policies settings (/_slm/policy)
func (o StackConfigPolicySpecElasticsearchPatchOutput) SnapshotLifecyclePolicies() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecElasticsearchPatch) map[string]interface{} {
		return v.SnapshotLifecyclePolicies
	}).(pulumi.MapOutput)
}

// SnapshotRepositories holds the Snapshot Repositories settings (/_snapshot)
func (o StackConfigPolicySpecElasticsearchPatchOutput) SnapshotRepositories() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecElasticsearchPatch) map[string]interface{} { return v.SnapshotRepositories }).(pulumi.MapOutput)
}

type StackConfigPolicySpecElasticsearchPatchPtrOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecElasticsearchPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicySpecElasticsearchPatch)(nil)).Elem()
}

func (o StackConfigPolicySpecElasticsearchPatchPtrOutput) ToStackConfigPolicySpecElasticsearchPatchPtrOutput() StackConfigPolicySpecElasticsearchPatchPtrOutput {
	return o
}

func (o StackConfigPolicySpecElasticsearchPatchPtrOutput) ToStackConfigPolicySpecElasticsearchPatchPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecElasticsearchPatchPtrOutput {
	return o
}

func (o StackConfigPolicySpecElasticsearchPatchPtrOutput) Elem() StackConfigPolicySpecElasticsearchPatchOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearchPatch) StackConfigPolicySpecElasticsearchPatch {
		if v != nil {
			return *v
		}
		var ret StackConfigPolicySpecElasticsearchPatch
		return ret
	}).(StackConfigPolicySpecElasticsearchPatchOutput)
}

// ClusterSettings holds the Elasticsearch cluster settings (/_cluster/settings)
func (o StackConfigPolicySpecElasticsearchPatchPtrOutput) ClusterSettings() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearchPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.ClusterSettings
	}).(pulumi.MapOutput)
}

// Config holds the settings that go into elasticsearch.yml.
func (o StackConfigPolicySpecElasticsearchPatchPtrOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearchPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.MapOutput)
}

// IndexLifecyclePolicies holds the Index Lifecycle policies settings (/_ilm/policy)
func (o StackConfigPolicySpecElasticsearchPatchPtrOutput) IndexLifecyclePolicies() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearchPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.IndexLifecyclePolicies
	}).(pulumi.MapOutput)
}

// IndexTemplates holds the Index and Component Templates settings
func (o StackConfigPolicySpecElasticsearchPatchPtrOutput) IndexTemplates() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearchPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.IndexTemplates
	}).(pulumi.MapOutput)
}

// IngestPipelines holds the Ingest Pipelines settings (/_ingest/pipeline)
func (o StackConfigPolicySpecElasticsearchPatchPtrOutput) IngestPipelines() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearchPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.IngestPipelines
	}).(pulumi.MapOutput)
}

// SecretMounts are additional Secrets that need to be mounted into the Elasticsearch pods.
func (o StackConfigPolicySpecElasticsearchPatchPtrOutput) SecretMounts() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearchPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.SecretMounts
	}).(pulumi.MapOutput)
}

// SecureSettings are additional Secrets that contain data to be configured to Elasticsearch's keystore.
func (o StackConfigPolicySpecElasticsearchPatchPtrOutput) SecureSettings() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearchPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.SecureSettings
	}).(pulumi.MapOutput)
}

// SecurityRoleMappings holds the Role Mappings settings (/_security/role_mapping)
func (o StackConfigPolicySpecElasticsearchPatchPtrOutput) SecurityRoleMappings() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearchPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.SecurityRoleMappings
	}).(pulumi.MapOutput)
}

// SnapshotLifecyclePolicies holds the Snapshot Lifecycle Policies settings (/_slm/policy)
func (o StackConfigPolicySpecElasticsearchPatchPtrOutput) SnapshotLifecyclePolicies() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearchPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.SnapshotLifecyclePolicies
	}).(pulumi.MapOutput)
}

// SnapshotRepositories holds the Snapshot Repositories settings (/_snapshot)
func (o StackConfigPolicySpecElasticsearchPatchPtrOutput) SnapshotRepositories() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecElasticsearchPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.SnapshotRepositories
	}).(pulumi.MapOutput)
}

type StackConfigPolicySpecKibana struct {
	// Config holds the settings that go into kibana.yml.
	Config map[string]interface{} `pulumi:"config"`
	// SecureSettings are additional Secrets that contain data to be configured to Kibana's keystore.
	SecureSettings map[string]interface{} `pulumi:"secureSettings"`
}

// StackConfigPolicySpecKibanaInput is an input type that accepts StackConfigPolicySpecKibanaArgs and StackConfigPolicySpecKibanaOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecKibanaInput` via:
//
//	StackConfigPolicySpecKibanaArgs{...}
type StackConfigPolicySpecKibanaInput interface {
	pulumi.Input

	ToStackConfigPolicySpecKibanaOutput() StackConfigPolicySpecKibanaOutput
	ToStackConfigPolicySpecKibanaOutputWithContext(context.Context) StackConfigPolicySpecKibanaOutput
}

type StackConfigPolicySpecKibanaArgs struct {
	// Config holds the settings that go into kibana.yml.
	Config pulumi.MapInput `pulumi:"config"`
	// SecureSettings are additional Secrets that contain data to be configured to Kibana's keystore.
	SecureSettings pulumi.MapInput `pulumi:"secureSettings"`
}

func (StackConfigPolicySpecKibanaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecKibana)(nil)).Elem()
}

func (i StackConfigPolicySpecKibanaArgs) ToStackConfigPolicySpecKibanaOutput() StackConfigPolicySpecKibanaOutput {
	return i.ToStackConfigPolicySpecKibanaOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecKibanaArgs) ToStackConfigPolicySpecKibanaOutputWithContext(ctx context.Context) StackConfigPolicySpecKibanaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecKibanaOutput)
}

func (i StackConfigPolicySpecKibanaArgs) ToStackConfigPolicySpecKibanaPtrOutput() StackConfigPolicySpecKibanaPtrOutput {
	return i.ToStackConfigPolicySpecKibanaPtrOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecKibanaArgs) ToStackConfigPolicySpecKibanaPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecKibanaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecKibanaOutput).ToStackConfigPolicySpecKibanaPtrOutputWithContext(ctx)
}

// StackConfigPolicySpecKibanaPtrInput is an input type that accepts StackConfigPolicySpecKibanaArgs, StackConfigPolicySpecKibanaPtr and StackConfigPolicySpecKibanaPtrOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecKibanaPtrInput` via:
//
//	        StackConfigPolicySpecKibanaArgs{...}
//
//	or:
//
//	        nil
type StackConfigPolicySpecKibanaPtrInput interface {
	pulumi.Input

	ToStackConfigPolicySpecKibanaPtrOutput() StackConfigPolicySpecKibanaPtrOutput
	ToStackConfigPolicySpecKibanaPtrOutputWithContext(context.Context) StackConfigPolicySpecKibanaPtrOutput
}

type stackConfigPolicySpecKibanaPtrType StackConfigPolicySpecKibanaArgs

func StackConfigPolicySpecKibanaPtr(v *StackConfigPolicySpecKibanaArgs) StackConfigPolicySpecKibanaPtrInput {
	return (*stackConfigPolicySpecKibanaPtrType)(v)
}

func (*stackConfigPolicySpecKibanaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicySpecKibana)(nil)).Elem()
}

func (i *stackConfigPolicySpecKibanaPtrType) ToStackConfigPolicySpecKibanaPtrOutput() StackConfigPolicySpecKibanaPtrOutput {
	return i.ToStackConfigPolicySpecKibanaPtrOutputWithContext(context.Background())
}

func (i *stackConfigPolicySpecKibanaPtrType) ToStackConfigPolicySpecKibanaPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecKibanaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecKibanaPtrOutput)
}

type StackConfigPolicySpecKibanaOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecKibanaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecKibana)(nil)).Elem()
}

func (o StackConfigPolicySpecKibanaOutput) ToStackConfigPolicySpecKibanaOutput() StackConfigPolicySpecKibanaOutput {
	return o
}

func (o StackConfigPolicySpecKibanaOutput) ToStackConfigPolicySpecKibanaOutputWithContext(ctx context.Context) StackConfigPolicySpecKibanaOutput {
	return o
}

func (o StackConfigPolicySpecKibanaOutput) ToStackConfigPolicySpecKibanaPtrOutput() StackConfigPolicySpecKibanaPtrOutput {
	return o.ToStackConfigPolicySpecKibanaPtrOutputWithContext(context.Background())
}

func (o StackConfigPolicySpecKibanaOutput) ToStackConfigPolicySpecKibanaPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecKibanaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackConfigPolicySpecKibana) *StackConfigPolicySpecKibana {
		return &v
	}).(StackConfigPolicySpecKibanaPtrOutput)
}

// Config holds the settings that go into kibana.yml.
func (o StackConfigPolicySpecKibanaOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecKibana) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

// SecureSettings are additional Secrets that contain data to be configured to Kibana's keystore.
func (o StackConfigPolicySpecKibanaOutput) SecureSettings() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecKibana) map[string]interface{} { return v.SecureSettings }).(pulumi.MapOutput)
}

type StackConfigPolicySpecKibanaPtrOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecKibanaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicySpecKibana)(nil)).Elem()
}

func (o StackConfigPolicySpecKibanaPtrOutput) ToStackConfigPolicySpecKibanaPtrOutput() StackConfigPolicySpecKibanaPtrOutput {
	return o
}

func (o StackConfigPolicySpecKibanaPtrOutput) ToStackConfigPolicySpecKibanaPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecKibanaPtrOutput {
	return o
}

func (o StackConfigPolicySpecKibanaPtrOutput) Elem() StackConfigPolicySpecKibanaOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecKibana) StackConfigPolicySpecKibana {
		if v != nil {
			return *v
		}
		var ret StackConfigPolicySpecKibana
		return ret
	}).(StackConfigPolicySpecKibanaOutput)
}

// Config holds the settings that go into kibana.yml.
func (o StackConfigPolicySpecKibanaPtrOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecKibana) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.MapOutput)
}

// SecureSettings are additional Secrets that contain data to be configured to Kibana's keystore.
func (o StackConfigPolicySpecKibanaPtrOutput) SecureSettings() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecKibana) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.SecureSettings
	}).(pulumi.MapOutput)
}

type StackConfigPolicySpecKibanaPatch struct {
	// Config holds the settings that go into kibana.yml.
	Config map[string]interface{} `pulumi:"config"`
	// SecureSettings are additional Secrets that contain data to be configured to Kibana's keystore.
	SecureSettings map[string]interface{} `pulumi:"secureSettings"`
}

// StackConfigPolicySpecKibanaPatchInput is an input type that accepts StackConfigPolicySpecKibanaPatchArgs and StackConfigPolicySpecKibanaPatchOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecKibanaPatchInput` via:
//
//	StackConfigPolicySpecKibanaPatchArgs{...}
type StackConfigPolicySpecKibanaPatchInput interface {
	pulumi.Input

	ToStackConfigPolicySpecKibanaPatchOutput() StackConfigPolicySpecKibanaPatchOutput
	ToStackConfigPolicySpecKibanaPatchOutputWithContext(context.Context) StackConfigPolicySpecKibanaPatchOutput
}

type StackConfigPolicySpecKibanaPatchArgs struct {
	// Config holds the settings that go into kibana.yml.
	Config pulumi.MapInput `pulumi:"config"`
	// SecureSettings are additional Secrets that contain data to be configured to Kibana's keystore.
	SecureSettings pulumi.MapInput `pulumi:"secureSettings"`
}

func (StackConfigPolicySpecKibanaPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecKibanaPatch)(nil)).Elem()
}

func (i StackConfigPolicySpecKibanaPatchArgs) ToStackConfigPolicySpecKibanaPatchOutput() StackConfigPolicySpecKibanaPatchOutput {
	return i.ToStackConfigPolicySpecKibanaPatchOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecKibanaPatchArgs) ToStackConfigPolicySpecKibanaPatchOutputWithContext(ctx context.Context) StackConfigPolicySpecKibanaPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecKibanaPatchOutput)
}

func (i StackConfigPolicySpecKibanaPatchArgs) ToStackConfigPolicySpecKibanaPatchPtrOutput() StackConfigPolicySpecKibanaPatchPtrOutput {
	return i.ToStackConfigPolicySpecKibanaPatchPtrOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecKibanaPatchArgs) ToStackConfigPolicySpecKibanaPatchPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecKibanaPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecKibanaPatchOutput).ToStackConfigPolicySpecKibanaPatchPtrOutputWithContext(ctx)
}

// StackConfigPolicySpecKibanaPatchPtrInput is an input type that accepts StackConfigPolicySpecKibanaPatchArgs, StackConfigPolicySpecKibanaPatchPtr and StackConfigPolicySpecKibanaPatchPtrOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecKibanaPatchPtrInput` via:
//
//	        StackConfigPolicySpecKibanaPatchArgs{...}
//
//	or:
//
//	        nil
type StackConfigPolicySpecKibanaPatchPtrInput interface {
	pulumi.Input

	ToStackConfigPolicySpecKibanaPatchPtrOutput() StackConfigPolicySpecKibanaPatchPtrOutput
	ToStackConfigPolicySpecKibanaPatchPtrOutputWithContext(context.Context) StackConfigPolicySpecKibanaPatchPtrOutput
}

type stackConfigPolicySpecKibanaPatchPtrType StackConfigPolicySpecKibanaPatchArgs

func StackConfigPolicySpecKibanaPatchPtr(v *StackConfigPolicySpecKibanaPatchArgs) StackConfigPolicySpecKibanaPatchPtrInput {
	return (*stackConfigPolicySpecKibanaPatchPtrType)(v)
}

func (*stackConfigPolicySpecKibanaPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicySpecKibanaPatch)(nil)).Elem()
}

func (i *stackConfigPolicySpecKibanaPatchPtrType) ToStackConfigPolicySpecKibanaPatchPtrOutput() StackConfigPolicySpecKibanaPatchPtrOutput {
	return i.ToStackConfigPolicySpecKibanaPatchPtrOutputWithContext(context.Background())
}

func (i *stackConfigPolicySpecKibanaPatchPtrType) ToStackConfigPolicySpecKibanaPatchPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecKibanaPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecKibanaPatchPtrOutput)
}

type StackConfigPolicySpecKibanaPatchOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecKibanaPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecKibanaPatch)(nil)).Elem()
}

func (o StackConfigPolicySpecKibanaPatchOutput) ToStackConfigPolicySpecKibanaPatchOutput() StackConfigPolicySpecKibanaPatchOutput {
	return o
}

func (o StackConfigPolicySpecKibanaPatchOutput) ToStackConfigPolicySpecKibanaPatchOutputWithContext(ctx context.Context) StackConfigPolicySpecKibanaPatchOutput {
	return o
}

func (o StackConfigPolicySpecKibanaPatchOutput) ToStackConfigPolicySpecKibanaPatchPtrOutput() StackConfigPolicySpecKibanaPatchPtrOutput {
	return o.ToStackConfigPolicySpecKibanaPatchPtrOutputWithContext(context.Background())
}

func (o StackConfigPolicySpecKibanaPatchOutput) ToStackConfigPolicySpecKibanaPatchPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecKibanaPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackConfigPolicySpecKibanaPatch) *StackConfigPolicySpecKibanaPatch {
		return &v
	}).(StackConfigPolicySpecKibanaPatchPtrOutput)
}

// Config holds the settings that go into kibana.yml.
func (o StackConfigPolicySpecKibanaPatchOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecKibanaPatch) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

// SecureSettings are additional Secrets that contain data to be configured to Kibana's keystore.
func (o StackConfigPolicySpecKibanaPatchOutput) SecureSettings() pulumi.MapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecKibanaPatch) map[string]interface{} { return v.SecureSettings }).(pulumi.MapOutput)
}

type StackConfigPolicySpecKibanaPatchPtrOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecKibanaPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicySpecKibanaPatch)(nil)).Elem()
}

func (o StackConfigPolicySpecKibanaPatchPtrOutput) ToStackConfigPolicySpecKibanaPatchPtrOutput() StackConfigPolicySpecKibanaPatchPtrOutput {
	return o
}

func (o StackConfigPolicySpecKibanaPatchPtrOutput) ToStackConfigPolicySpecKibanaPatchPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecKibanaPatchPtrOutput {
	return o
}

func (o StackConfigPolicySpecKibanaPatchPtrOutput) Elem() StackConfigPolicySpecKibanaPatchOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecKibanaPatch) StackConfigPolicySpecKibanaPatch {
		if v != nil {
			return *v
		}
		var ret StackConfigPolicySpecKibanaPatch
		return ret
	}).(StackConfigPolicySpecKibanaPatchOutput)
}

// Config holds the settings that go into kibana.yml.
func (o StackConfigPolicySpecKibanaPatchPtrOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecKibanaPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.MapOutput)
}

// SecureSettings are additional Secrets that contain data to be configured to Kibana's keystore.
func (o StackConfigPolicySpecKibanaPatchPtrOutput) SecureSettings() pulumi.MapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecKibanaPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.SecureSettings
	}).(pulumi.MapOutput)
}

type StackConfigPolicySpecPatch struct {
	Elasticsearch    *StackConfigPolicySpecElasticsearchPatch    `pulumi:"elasticsearch"`
	Kibana           *StackConfigPolicySpecKibanaPatch           `pulumi:"kibana"`
	ResourceSelector *StackConfigPolicySpecResourceSelectorPatch `pulumi:"resourceSelector"`
	// Deprecated: SecureSettings only applies to Elasticsearch and is deprecated. It must be set per application instead.
	SecureSettings []StackConfigPolicySpecSecureSettingsPatch `pulumi:"secureSettings"`
}

// StackConfigPolicySpecPatchInput is an input type that accepts StackConfigPolicySpecPatchArgs and StackConfigPolicySpecPatchOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecPatchInput` via:
//
//	StackConfigPolicySpecPatchArgs{...}
type StackConfigPolicySpecPatchInput interface {
	pulumi.Input

	ToStackConfigPolicySpecPatchOutput() StackConfigPolicySpecPatchOutput
	ToStackConfigPolicySpecPatchOutputWithContext(context.Context) StackConfigPolicySpecPatchOutput
}

type StackConfigPolicySpecPatchArgs struct {
	Elasticsearch    StackConfigPolicySpecElasticsearchPatchPtrInput    `pulumi:"elasticsearch"`
	Kibana           StackConfigPolicySpecKibanaPatchPtrInput           `pulumi:"kibana"`
	ResourceSelector StackConfigPolicySpecResourceSelectorPatchPtrInput `pulumi:"resourceSelector"`
	// Deprecated: SecureSettings only applies to Elasticsearch and is deprecated. It must be set per application instead.
	SecureSettings StackConfigPolicySpecSecureSettingsPatchArrayInput `pulumi:"secureSettings"`
}

func (StackConfigPolicySpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecPatch)(nil)).Elem()
}

func (i StackConfigPolicySpecPatchArgs) ToStackConfigPolicySpecPatchOutput() StackConfigPolicySpecPatchOutput {
	return i.ToStackConfigPolicySpecPatchOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecPatchArgs) ToStackConfigPolicySpecPatchOutputWithContext(ctx context.Context) StackConfigPolicySpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecPatchOutput)
}

func (i StackConfigPolicySpecPatchArgs) ToStackConfigPolicySpecPatchPtrOutput() StackConfigPolicySpecPatchPtrOutput {
	return i.ToStackConfigPolicySpecPatchPtrOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecPatchArgs) ToStackConfigPolicySpecPatchPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecPatchOutput).ToStackConfigPolicySpecPatchPtrOutputWithContext(ctx)
}

// StackConfigPolicySpecPatchPtrInput is an input type that accepts StackConfigPolicySpecPatchArgs, StackConfigPolicySpecPatchPtr and StackConfigPolicySpecPatchPtrOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecPatchPtrInput` via:
//
//	        StackConfigPolicySpecPatchArgs{...}
//
//	or:
//
//	        nil
type StackConfigPolicySpecPatchPtrInput interface {
	pulumi.Input

	ToStackConfigPolicySpecPatchPtrOutput() StackConfigPolicySpecPatchPtrOutput
	ToStackConfigPolicySpecPatchPtrOutputWithContext(context.Context) StackConfigPolicySpecPatchPtrOutput
}

type stackConfigPolicySpecPatchPtrType StackConfigPolicySpecPatchArgs

func StackConfigPolicySpecPatchPtr(v *StackConfigPolicySpecPatchArgs) StackConfigPolicySpecPatchPtrInput {
	return (*stackConfigPolicySpecPatchPtrType)(v)
}

func (*stackConfigPolicySpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicySpecPatch)(nil)).Elem()
}

func (i *stackConfigPolicySpecPatchPtrType) ToStackConfigPolicySpecPatchPtrOutput() StackConfigPolicySpecPatchPtrOutput {
	return i.ToStackConfigPolicySpecPatchPtrOutputWithContext(context.Background())
}

func (i *stackConfigPolicySpecPatchPtrType) ToStackConfigPolicySpecPatchPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecPatchPtrOutput)
}

type StackConfigPolicySpecPatchOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecPatch)(nil)).Elem()
}

func (o StackConfigPolicySpecPatchOutput) ToStackConfigPolicySpecPatchOutput() StackConfigPolicySpecPatchOutput {
	return o
}

func (o StackConfigPolicySpecPatchOutput) ToStackConfigPolicySpecPatchOutputWithContext(ctx context.Context) StackConfigPolicySpecPatchOutput {
	return o
}

func (o StackConfigPolicySpecPatchOutput) ToStackConfigPolicySpecPatchPtrOutput() StackConfigPolicySpecPatchPtrOutput {
	return o.ToStackConfigPolicySpecPatchPtrOutputWithContext(context.Background())
}

func (o StackConfigPolicySpecPatchOutput) ToStackConfigPolicySpecPatchPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackConfigPolicySpecPatch) *StackConfigPolicySpecPatch {
		return &v
	}).(StackConfigPolicySpecPatchPtrOutput)
}

func (o StackConfigPolicySpecPatchOutput) Elasticsearch() StackConfigPolicySpecElasticsearchPatchPtrOutput {
	return o.ApplyT(func(v StackConfigPolicySpecPatch) *StackConfigPolicySpecElasticsearchPatch { return v.Elasticsearch }).(StackConfigPolicySpecElasticsearchPatchPtrOutput)
}

func (o StackConfigPolicySpecPatchOutput) Kibana() StackConfigPolicySpecKibanaPatchPtrOutput {
	return o.ApplyT(func(v StackConfigPolicySpecPatch) *StackConfigPolicySpecKibanaPatch { return v.Kibana }).(StackConfigPolicySpecKibanaPatchPtrOutput)
}

func (o StackConfigPolicySpecPatchOutput) ResourceSelector() StackConfigPolicySpecResourceSelectorPatchPtrOutput {
	return o.ApplyT(func(v StackConfigPolicySpecPatch) *StackConfigPolicySpecResourceSelectorPatch {
		return v.ResourceSelector
	}).(StackConfigPolicySpecResourceSelectorPatchPtrOutput)
}

// Deprecated: SecureSettings only applies to Elasticsearch and is deprecated. It must be set per application instead.
func (o StackConfigPolicySpecPatchOutput) SecureSettings() StackConfigPolicySpecSecureSettingsPatchArrayOutput {
	return o.ApplyT(func(v StackConfigPolicySpecPatch) []StackConfigPolicySpecSecureSettingsPatch { return v.SecureSettings }).(StackConfigPolicySpecSecureSettingsPatchArrayOutput)
}

type StackConfigPolicySpecPatchPtrOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicySpecPatch)(nil)).Elem()
}

func (o StackConfigPolicySpecPatchPtrOutput) ToStackConfigPolicySpecPatchPtrOutput() StackConfigPolicySpecPatchPtrOutput {
	return o
}

func (o StackConfigPolicySpecPatchPtrOutput) ToStackConfigPolicySpecPatchPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecPatchPtrOutput {
	return o
}

func (o StackConfigPolicySpecPatchPtrOutput) Elem() StackConfigPolicySpecPatchOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecPatch) StackConfigPolicySpecPatch {
		if v != nil {
			return *v
		}
		var ret StackConfigPolicySpecPatch
		return ret
	}).(StackConfigPolicySpecPatchOutput)
}

func (o StackConfigPolicySpecPatchPtrOutput) Elasticsearch() StackConfigPolicySpecElasticsearchPatchPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecPatch) *StackConfigPolicySpecElasticsearchPatch {
		if v == nil {
			return nil
		}
		return v.Elasticsearch
	}).(StackConfigPolicySpecElasticsearchPatchPtrOutput)
}

func (o StackConfigPolicySpecPatchPtrOutput) Kibana() StackConfigPolicySpecKibanaPatchPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecPatch) *StackConfigPolicySpecKibanaPatch {
		if v == nil {
			return nil
		}
		return v.Kibana
	}).(StackConfigPolicySpecKibanaPatchPtrOutput)
}

func (o StackConfigPolicySpecPatchPtrOutput) ResourceSelector() StackConfigPolicySpecResourceSelectorPatchPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecPatch) *StackConfigPolicySpecResourceSelectorPatch {
		if v == nil {
			return nil
		}
		return v.ResourceSelector
	}).(StackConfigPolicySpecResourceSelectorPatchPtrOutput)
}

// Deprecated: SecureSettings only applies to Elasticsearch and is deprecated. It must be set per application instead.
func (o StackConfigPolicySpecPatchPtrOutput) SecureSettings() StackConfigPolicySpecSecureSettingsPatchArrayOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecPatch) []StackConfigPolicySpecSecureSettingsPatch {
		if v == nil {
			return nil
		}
		return v.SecureSettings
	}).(StackConfigPolicySpecSecureSettingsPatchArrayOutput)
}

// A label selector is a label query over a set of resources. The result of matchLabels and
// matchExpressions are ANDed. An empty label selector matches all objects. A null
// label selector matches no objects.
type StackConfigPolicySpecResourceSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []StackConfigPolicySpecResourceSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// StackConfigPolicySpecResourceSelectorInput is an input type that accepts StackConfigPolicySpecResourceSelectorArgs and StackConfigPolicySpecResourceSelectorOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecResourceSelectorInput` via:
//
//	StackConfigPolicySpecResourceSelectorArgs{...}
type StackConfigPolicySpecResourceSelectorInput interface {
	pulumi.Input

	ToStackConfigPolicySpecResourceSelectorOutput() StackConfigPolicySpecResourceSelectorOutput
	ToStackConfigPolicySpecResourceSelectorOutputWithContext(context.Context) StackConfigPolicySpecResourceSelectorOutput
}

// A label selector is a label query over a set of resources. The result of matchLabels and
// matchExpressions are ANDed. An empty label selector matches all objects. A null
// label selector matches no objects.
type StackConfigPolicySpecResourceSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions StackConfigPolicySpecResourceSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (StackConfigPolicySpecResourceSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecResourceSelector)(nil)).Elem()
}

func (i StackConfigPolicySpecResourceSelectorArgs) ToStackConfigPolicySpecResourceSelectorOutput() StackConfigPolicySpecResourceSelectorOutput {
	return i.ToStackConfigPolicySpecResourceSelectorOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecResourceSelectorArgs) ToStackConfigPolicySpecResourceSelectorOutputWithContext(ctx context.Context) StackConfigPolicySpecResourceSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecResourceSelectorOutput)
}

func (i StackConfigPolicySpecResourceSelectorArgs) ToStackConfigPolicySpecResourceSelectorPtrOutput() StackConfigPolicySpecResourceSelectorPtrOutput {
	return i.ToStackConfigPolicySpecResourceSelectorPtrOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecResourceSelectorArgs) ToStackConfigPolicySpecResourceSelectorPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecResourceSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecResourceSelectorOutput).ToStackConfigPolicySpecResourceSelectorPtrOutputWithContext(ctx)
}

// StackConfigPolicySpecResourceSelectorPtrInput is an input type that accepts StackConfigPolicySpecResourceSelectorArgs, StackConfigPolicySpecResourceSelectorPtr and StackConfigPolicySpecResourceSelectorPtrOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecResourceSelectorPtrInput` via:
//
//	        StackConfigPolicySpecResourceSelectorArgs{...}
//
//	or:
//
//	        nil
type StackConfigPolicySpecResourceSelectorPtrInput interface {
	pulumi.Input

	ToStackConfigPolicySpecResourceSelectorPtrOutput() StackConfigPolicySpecResourceSelectorPtrOutput
	ToStackConfigPolicySpecResourceSelectorPtrOutputWithContext(context.Context) StackConfigPolicySpecResourceSelectorPtrOutput
}

type stackConfigPolicySpecResourceSelectorPtrType StackConfigPolicySpecResourceSelectorArgs

func StackConfigPolicySpecResourceSelectorPtr(v *StackConfigPolicySpecResourceSelectorArgs) StackConfigPolicySpecResourceSelectorPtrInput {
	return (*stackConfigPolicySpecResourceSelectorPtrType)(v)
}

func (*stackConfigPolicySpecResourceSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicySpecResourceSelector)(nil)).Elem()
}

func (i *stackConfigPolicySpecResourceSelectorPtrType) ToStackConfigPolicySpecResourceSelectorPtrOutput() StackConfigPolicySpecResourceSelectorPtrOutput {
	return i.ToStackConfigPolicySpecResourceSelectorPtrOutputWithContext(context.Background())
}

func (i *stackConfigPolicySpecResourceSelectorPtrType) ToStackConfigPolicySpecResourceSelectorPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecResourceSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecResourceSelectorPtrOutput)
}

// A label selector is a label query over a set of resources. The result of matchLabels and
// matchExpressions are ANDed. An empty label selector matches all objects. A null
// label selector matches no objects.
type StackConfigPolicySpecResourceSelectorOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecResourceSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecResourceSelector)(nil)).Elem()
}

func (o StackConfigPolicySpecResourceSelectorOutput) ToStackConfigPolicySpecResourceSelectorOutput() StackConfigPolicySpecResourceSelectorOutput {
	return o
}

func (o StackConfigPolicySpecResourceSelectorOutput) ToStackConfigPolicySpecResourceSelectorOutputWithContext(ctx context.Context) StackConfigPolicySpecResourceSelectorOutput {
	return o
}

func (o StackConfigPolicySpecResourceSelectorOutput) ToStackConfigPolicySpecResourceSelectorPtrOutput() StackConfigPolicySpecResourceSelectorPtrOutput {
	return o.ToStackConfigPolicySpecResourceSelectorPtrOutputWithContext(context.Background())
}

func (o StackConfigPolicySpecResourceSelectorOutput) ToStackConfigPolicySpecResourceSelectorPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecResourceSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackConfigPolicySpecResourceSelector) *StackConfigPolicySpecResourceSelector {
		return &v
	}).(StackConfigPolicySpecResourceSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o StackConfigPolicySpecResourceSelectorOutput) MatchExpressions() StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v StackConfigPolicySpecResourceSelector) []StackConfigPolicySpecResourceSelectorMatchExpressions {
		return v.MatchExpressions
	}).(StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o StackConfigPolicySpecResourceSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecResourceSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type StackConfigPolicySpecResourceSelectorPtrOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecResourceSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicySpecResourceSelector)(nil)).Elem()
}

func (o StackConfigPolicySpecResourceSelectorPtrOutput) ToStackConfigPolicySpecResourceSelectorPtrOutput() StackConfigPolicySpecResourceSelectorPtrOutput {
	return o
}

func (o StackConfigPolicySpecResourceSelectorPtrOutput) ToStackConfigPolicySpecResourceSelectorPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecResourceSelectorPtrOutput {
	return o
}

func (o StackConfigPolicySpecResourceSelectorPtrOutput) Elem() StackConfigPolicySpecResourceSelectorOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecResourceSelector) StackConfigPolicySpecResourceSelector {
		if v != nil {
			return *v
		}
		var ret StackConfigPolicySpecResourceSelector
		return ret
	}).(StackConfigPolicySpecResourceSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o StackConfigPolicySpecResourceSelectorPtrOutput) MatchExpressions() StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecResourceSelector) []StackConfigPolicySpecResourceSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o StackConfigPolicySpecResourceSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecResourceSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type StackConfigPolicySpecResourceSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values []string `pulumi:"values"`
}

// StackConfigPolicySpecResourceSelectorMatchExpressionsInput is an input type that accepts StackConfigPolicySpecResourceSelectorMatchExpressionsArgs and StackConfigPolicySpecResourceSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecResourceSelectorMatchExpressionsInput` via:
//
//	StackConfigPolicySpecResourceSelectorMatchExpressionsArgs{...}
type StackConfigPolicySpecResourceSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToStackConfigPolicySpecResourceSelectorMatchExpressionsOutput() StackConfigPolicySpecResourceSelectorMatchExpressionsOutput
	ToStackConfigPolicySpecResourceSelectorMatchExpressionsOutputWithContext(context.Context) StackConfigPolicySpecResourceSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type StackConfigPolicySpecResourceSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (StackConfigPolicySpecResourceSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecResourceSelectorMatchExpressions)(nil)).Elem()
}

func (i StackConfigPolicySpecResourceSelectorMatchExpressionsArgs) ToStackConfigPolicySpecResourceSelectorMatchExpressionsOutput() StackConfigPolicySpecResourceSelectorMatchExpressionsOutput {
	return i.ToStackConfigPolicySpecResourceSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecResourceSelectorMatchExpressionsArgs) ToStackConfigPolicySpecResourceSelectorMatchExpressionsOutputWithContext(ctx context.Context) StackConfigPolicySpecResourceSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecResourceSelectorMatchExpressionsOutput)
}

// StackConfigPolicySpecResourceSelectorMatchExpressionsArrayInput is an input type that accepts StackConfigPolicySpecResourceSelectorMatchExpressionsArray and StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecResourceSelectorMatchExpressionsArrayInput` via:
//
//	StackConfigPolicySpecResourceSelectorMatchExpressionsArray{ StackConfigPolicySpecResourceSelectorMatchExpressionsArgs{...} }
type StackConfigPolicySpecResourceSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToStackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput() StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput
	ToStackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutputWithContext(context.Context) StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput
}

type StackConfigPolicySpecResourceSelectorMatchExpressionsArray []StackConfigPolicySpecResourceSelectorMatchExpressionsInput

func (StackConfigPolicySpecResourceSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackConfigPolicySpecResourceSelectorMatchExpressions)(nil)).Elem()
}

func (i StackConfigPolicySpecResourceSelectorMatchExpressionsArray) ToStackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput() StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput {
	return i.ToStackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecResourceSelectorMatchExpressionsArray) ToStackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type StackConfigPolicySpecResourceSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecResourceSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecResourceSelectorMatchExpressions)(nil)).Elem()
}

func (o StackConfigPolicySpecResourceSelectorMatchExpressionsOutput) ToStackConfigPolicySpecResourceSelectorMatchExpressionsOutput() StackConfigPolicySpecResourceSelectorMatchExpressionsOutput {
	return o
}

func (o StackConfigPolicySpecResourceSelectorMatchExpressionsOutput) ToStackConfigPolicySpecResourceSelectorMatchExpressionsOutputWithContext(ctx context.Context) StackConfigPolicySpecResourceSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o StackConfigPolicySpecResourceSelectorMatchExpressionsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackConfigPolicySpecResourceSelectorMatchExpressions) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values.
// Valid operators are In, NotIn, Exists and DoesNotExist.
func (o StackConfigPolicySpecResourceSelectorMatchExpressionsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackConfigPolicySpecResourceSelectorMatchExpressions) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn,
// the values array must be non-empty. If the operator is Exists or DoesNotExist,
// the values array must be empty. This array is replaced during a strategic
// merge patch.
func (o StackConfigPolicySpecResourceSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StackConfigPolicySpecResourceSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackConfigPolicySpecResourceSelectorMatchExpressions)(nil)).Elem()
}

func (o StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput) ToStackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput() StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput {
	return o
}

func (o StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput) ToStackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput {
	return o
}

func (o StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) StackConfigPolicySpecResourceSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StackConfigPolicySpecResourceSelectorMatchExpressions {
		return vs[0].([]StackConfigPolicySpecResourceSelectorMatchExpressions)[vs[1].(int)]
	}).(StackConfigPolicySpecResourceSelectorMatchExpressionsOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type StackConfigPolicySpecResourceSelectorMatchExpressionsPatch struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values []string `pulumi:"values"`
}

// StackConfigPolicySpecResourceSelectorMatchExpressionsPatchInput is an input type that accepts StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArgs and StackConfigPolicySpecResourceSelectorMatchExpressionsPatchOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecResourceSelectorMatchExpressionsPatchInput` via:
//
//	StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArgs{...}
type StackConfigPolicySpecResourceSelectorMatchExpressionsPatchInput interface {
	pulumi.Input

	ToStackConfigPolicySpecResourceSelectorMatchExpressionsPatchOutput() StackConfigPolicySpecResourceSelectorMatchExpressionsPatchOutput
	ToStackConfigPolicySpecResourceSelectorMatchExpressionsPatchOutputWithContext(context.Context) StackConfigPolicySpecResourceSelectorMatchExpressionsPatchOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecResourceSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArgs) ToStackConfigPolicySpecResourceSelectorMatchExpressionsPatchOutput() StackConfigPolicySpecResourceSelectorMatchExpressionsPatchOutput {
	return i.ToStackConfigPolicySpecResourceSelectorMatchExpressionsPatchOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArgs) ToStackConfigPolicySpecResourceSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) StackConfigPolicySpecResourceSelectorMatchExpressionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecResourceSelectorMatchExpressionsPatchOutput)
}

// StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArrayInput is an input type that accepts StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArray and StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArrayOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArrayInput` via:
//
//	StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArray{ StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArgs{...} }
type StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArrayInput interface {
	pulumi.Input

	ToStackConfigPolicySpecResourceSelectorMatchExpressionsPatchArrayOutput() StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArrayOutput
	ToStackConfigPolicySpecResourceSelectorMatchExpressionsPatchArrayOutputWithContext(context.Context) StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArrayOutput
}

type StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArray []StackConfigPolicySpecResourceSelectorMatchExpressionsPatchInput

func (StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackConfigPolicySpecResourceSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArray) ToStackConfigPolicySpecResourceSelectorMatchExpressionsPatchArrayOutput() StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArrayOutput {
	return i.ToStackConfigPolicySpecResourceSelectorMatchExpressionsPatchArrayOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArray) ToStackConfigPolicySpecResourceSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type StackConfigPolicySpecResourceSelectorMatchExpressionsPatchOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecResourceSelectorMatchExpressionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecResourceSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o StackConfigPolicySpecResourceSelectorMatchExpressionsPatchOutput) ToStackConfigPolicySpecResourceSelectorMatchExpressionsPatchOutput() StackConfigPolicySpecResourceSelectorMatchExpressionsPatchOutput {
	return o
}

func (o StackConfigPolicySpecResourceSelectorMatchExpressionsPatchOutput) ToStackConfigPolicySpecResourceSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) StackConfigPolicySpecResourceSelectorMatchExpressionsPatchOutput {
	return o
}

// key is the label key that the selector applies to.
func (o StackConfigPolicySpecResourceSelectorMatchExpressionsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackConfigPolicySpecResourceSelectorMatchExpressionsPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values.
// Valid operators are In, NotIn, Exists and DoesNotExist.
func (o StackConfigPolicySpecResourceSelectorMatchExpressionsPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackConfigPolicySpecResourceSelectorMatchExpressionsPatch) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn,
// the values array must be non-empty. If the operator is Exists or DoesNotExist,
// the values array must be empty. This array is replaced during a strategic
// merge patch.
func (o StackConfigPolicySpecResourceSelectorMatchExpressionsPatchOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StackConfigPolicySpecResourceSelectorMatchExpressionsPatch) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArrayOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackConfigPolicySpecResourceSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArrayOutput) ToStackConfigPolicySpecResourceSelectorMatchExpressionsPatchArrayOutput() StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArrayOutput) ToStackConfigPolicySpecResourceSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArrayOutput) Index(i pulumi.IntInput) StackConfigPolicySpecResourceSelectorMatchExpressionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StackConfigPolicySpecResourceSelectorMatchExpressionsPatch {
		return vs[0].([]StackConfigPolicySpecResourceSelectorMatchExpressionsPatch)[vs[1].(int)]
	}).(StackConfigPolicySpecResourceSelectorMatchExpressionsPatchOutput)
}

// A label selector is a label query over a set of resources. The result of matchLabels and
// matchExpressions are ANDed. An empty label selector matches all objects. A null
// label selector matches no objects.
type StackConfigPolicySpecResourceSelectorPatch struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []StackConfigPolicySpecResourceSelectorMatchExpressionsPatch `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// StackConfigPolicySpecResourceSelectorPatchInput is an input type that accepts StackConfigPolicySpecResourceSelectorPatchArgs and StackConfigPolicySpecResourceSelectorPatchOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecResourceSelectorPatchInput` via:
//
//	StackConfigPolicySpecResourceSelectorPatchArgs{...}
type StackConfigPolicySpecResourceSelectorPatchInput interface {
	pulumi.Input

	ToStackConfigPolicySpecResourceSelectorPatchOutput() StackConfigPolicySpecResourceSelectorPatchOutput
	ToStackConfigPolicySpecResourceSelectorPatchOutputWithContext(context.Context) StackConfigPolicySpecResourceSelectorPatchOutput
}

// A label selector is a label query over a set of resources. The result of matchLabels and
// matchExpressions are ANDed. An empty label selector matches all objects. A null
// label selector matches no objects.
type StackConfigPolicySpecResourceSelectorPatchArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (StackConfigPolicySpecResourceSelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecResourceSelectorPatch)(nil)).Elem()
}

func (i StackConfigPolicySpecResourceSelectorPatchArgs) ToStackConfigPolicySpecResourceSelectorPatchOutput() StackConfigPolicySpecResourceSelectorPatchOutput {
	return i.ToStackConfigPolicySpecResourceSelectorPatchOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecResourceSelectorPatchArgs) ToStackConfigPolicySpecResourceSelectorPatchOutputWithContext(ctx context.Context) StackConfigPolicySpecResourceSelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecResourceSelectorPatchOutput)
}

func (i StackConfigPolicySpecResourceSelectorPatchArgs) ToStackConfigPolicySpecResourceSelectorPatchPtrOutput() StackConfigPolicySpecResourceSelectorPatchPtrOutput {
	return i.ToStackConfigPolicySpecResourceSelectorPatchPtrOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecResourceSelectorPatchArgs) ToStackConfigPolicySpecResourceSelectorPatchPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecResourceSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecResourceSelectorPatchOutput).ToStackConfigPolicySpecResourceSelectorPatchPtrOutputWithContext(ctx)
}

// StackConfigPolicySpecResourceSelectorPatchPtrInput is an input type that accepts StackConfigPolicySpecResourceSelectorPatchArgs, StackConfigPolicySpecResourceSelectorPatchPtr and StackConfigPolicySpecResourceSelectorPatchPtrOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecResourceSelectorPatchPtrInput` via:
//
//	        StackConfigPolicySpecResourceSelectorPatchArgs{...}
//
//	or:
//
//	        nil
type StackConfigPolicySpecResourceSelectorPatchPtrInput interface {
	pulumi.Input

	ToStackConfigPolicySpecResourceSelectorPatchPtrOutput() StackConfigPolicySpecResourceSelectorPatchPtrOutput
	ToStackConfigPolicySpecResourceSelectorPatchPtrOutputWithContext(context.Context) StackConfigPolicySpecResourceSelectorPatchPtrOutput
}

type stackConfigPolicySpecResourceSelectorPatchPtrType StackConfigPolicySpecResourceSelectorPatchArgs

func StackConfigPolicySpecResourceSelectorPatchPtr(v *StackConfigPolicySpecResourceSelectorPatchArgs) StackConfigPolicySpecResourceSelectorPatchPtrInput {
	return (*stackConfigPolicySpecResourceSelectorPatchPtrType)(v)
}

func (*stackConfigPolicySpecResourceSelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicySpecResourceSelectorPatch)(nil)).Elem()
}

func (i *stackConfigPolicySpecResourceSelectorPatchPtrType) ToStackConfigPolicySpecResourceSelectorPatchPtrOutput() StackConfigPolicySpecResourceSelectorPatchPtrOutput {
	return i.ToStackConfigPolicySpecResourceSelectorPatchPtrOutputWithContext(context.Background())
}

func (i *stackConfigPolicySpecResourceSelectorPatchPtrType) ToStackConfigPolicySpecResourceSelectorPatchPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecResourceSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecResourceSelectorPatchPtrOutput)
}

// A label selector is a label query over a set of resources. The result of matchLabels and
// matchExpressions are ANDed. An empty label selector matches all objects. A null
// label selector matches no objects.
type StackConfigPolicySpecResourceSelectorPatchOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecResourceSelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecResourceSelectorPatch)(nil)).Elem()
}

func (o StackConfigPolicySpecResourceSelectorPatchOutput) ToStackConfigPolicySpecResourceSelectorPatchOutput() StackConfigPolicySpecResourceSelectorPatchOutput {
	return o
}

func (o StackConfigPolicySpecResourceSelectorPatchOutput) ToStackConfigPolicySpecResourceSelectorPatchOutputWithContext(ctx context.Context) StackConfigPolicySpecResourceSelectorPatchOutput {
	return o
}

func (o StackConfigPolicySpecResourceSelectorPatchOutput) ToStackConfigPolicySpecResourceSelectorPatchPtrOutput() StackConfigPolicySpecResourceSelectorPatchPtrOutput {
	return o.ToStackConfigPolicySpecResourceSelectorPatchPtrOutputWithContext(context.Background())
}

func (o StackConfigPolicySpecResourceSelectorPatchOutput) ToStackConfigPolicySpecResourceSelectorPatchPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecResourceSelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackConfigPolicySpecResourceSelectorPatch) *StackConfigPolicySpecResourceSelectorPatch {
		return &v
	}).(StackConfigPolicySpecResourceSelectorPatchPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o StackConfigPolicySpecResourceSelectorPatchOutput) MatchExpressions() StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v StackConfigPolicySpecResourceSelectorPatch) []StackConfigPolicySpecResourceSelectorMatchExpressionsPatch {
		return v.MatchExpressions
	}).(StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o StackConfigPolicySpecResourceSelectorPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v StackConfigPolicySpecResourceSelectorPatch) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type StackConfigPolicySpecResourceSelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecResourceSelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicySpecResourceSelectorPatch)(nil)).Elem()
}

func (o StackConfigPolicySpecResourceSelectorPatchPtrOutput) ToStackConfigPolicySpecResourceSelectorPatchPtrOutput() StackConfigPolicySpecResourceSelectorPatchPtrOutput {
	return o
}

func (o StackConfigPolicySpecResourceSelectorPatchPtrOutput) ToStackConfigPolicySpecResourceSelectorPatchPtrOutputWithContext(ctx context.Context) StackConfigPolicySpecResourceSelectorPatchPtrOutput {
	return o
}

func (o StackConfigPolicySpecResourceSelectorPatchPtrOutput) Elem() StackConfigPolicySpecResourceSelectorPatchOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecResourceSelectorPatch) StackConfigPolicySpecResourceSelectorPatch {
		if v != nil {
			return *v
		}
		var ret StackConfigPolicySpecResourceSelectorPatch
		return ret
	}).(StackConfigPolicySpecResourceSelectorPatchOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o StackConfigPolicySpecResourceSelectorPatchPtrOutput) MatchExpressions() StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecResourceSelectorPatch) []StackConfigPolicySpecResourceSelectorMatchExpressionsPatch {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o StackConfigPolicySpecResourceSelectorPatchPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StackConfigPolicySpecResourceSelectorPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// SecretSource defines a data source based on a Kubernetes Secret.
type StackConfigPolicySpecSecureSettings struct {
	// Entries define how to project each key-value pair in the secret to filesystem paths.
	// If not defined, all keys will be projected to similarly named paths in the filesystem.
	// If defined, only the specified keys will be projected to the corresponding paths.
	Entries []StackConfigPolicySpecSecureSettingsEntries `pulumi:"entries"`
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// StackConfigPolicySpecSecureSettingsInput is an input type that accepts StackConfigPolicySpecSecureSettingsArgs and StackConfigPolicySpecSecureSettingsOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecSecureSettingsInput` via:
//
//	StackConfigPolicySpecSecureSettingsArgs{...}
type StackConfigPolicySpecSecureSettingsInput interface {
	pulumi.Input

	ToStackConfigPolicySpecSecureSettingsOutput() StackConfigPolicySpecSecureSettingsOutput
	ToStackConfigPolicySpecSecureSettingsOutputWithContext(context.Context) StackConfigPolicySpecSecureSettingsOutput
}

// SecretSource defines a data source based on a Kubernetes Secret.
type StackConfigPolicySpecSecureSettingsArgs struct {
	// Entries define how to project each key-value pair in the secret to filesystem paths.
	// If not defined, all keys will be projected to similarly named paths in the filesystem.
	// If defined, only the specified keys will be projected to the corresponding paths.
	Entries StackConfigPolicySpecSecureSettingsEntriesArrayInput `pulumi:"entries"`
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (StackConfigPolicySpecSecureSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecSecureSettings)(nil)).Elem()
}

func (i StackConfigPolicySpecSecureSettingsArgs) ToStackConfigPolicySpecSecureSettingsOutput() StackConfigPolicySpecSecureSettingsOutput {
	return i.ToStackConfigPolicySpecSecureSettingsOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecSecureSettingsArgs) ToStackConfigPolicySpecSecureSettingsOutputWithContext(ctx context.Context) StackConfigPolicySpecSecureSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecSecureSettingsOutput)
}

// StackConfigPolicySpecSecureSettingsArrayInput is an input type that accepts StackConfigPolicySpecSecureSettingsArray and StackConfigPolicySpecSecureSettingsArrayOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecSecureSettingsArrayInput` via:
//
//	StackConfigPolicySpecSecureSettingsArray{ StackConfigPolicySpecSecureSettingsArgs{...} }
type StackConfigPolicySpecSecureSettingsArrayInput interface {
	pulumi.Input

	ToStackConfigPolicySpecSecureSettingsArrayOutput() StackConfigPolicySpecSecureSettingsArrayOutput
	ToStackConfigPolicySpecSecureSettingsArrayOutputWithContext(context.Context) StackConfigPolicySpecSecureSettingsArrayOutput
}

type StackConfigPolicySpecSecureSettingsArray []StackConfigPolicySpecSecureSettingsInput

func (StackConfigPolicySpecSecureSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackConfigPolicySpecSecureSettings)(nil)).Elem()
}

func (i StackConfigPolicySpecSecureSettingsArray) ToStackConfigPolicySpecSecureSettingsArrayOutput() StackConfigPolicySpecSecureSettingsArrayOutput {
	return i.ToStackConfigPolicySpecSecureSettingsArrayOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecSecureSettingsArray) ToStackConfigPolicySpecSecureSettingsArrayOutputWithContext(ctx context.Context) StackConfigPolicySpecSecureSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecSecureSettingsArrayOutput)
}

// SecretSource defines a data source based on a Kubernetes Secret.
type StackConfigPolicySpecSecureSettingsOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecSecureSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecSecureSettings)(nil)).Elem()
}

func (o StackConfigPolicySpecSecureSettingsOutput) ToStackConfigPolicySpecSecureSettingsOutput() StackConfigPolicySpecSecureSettingsOutput {
	return o
}

func (o StackConfigPolicySpecSecureSettingsOutput) ToStackConfigPolicySpecSecureSettingsOutputWithContext(ctx context.Context) StackConfigPolicySpecSecureSettingsOutput {
	return o
}

// Entries define how to project each key-value pair in the secret to filesystem paths.
// If not defined, all keys will be projected to similarly named paths in the filesystem.
// If defined, only the specified keys will be projected to the corresponding paths.
func (o StackConfigPolicySpecSecureSettingsOutput) Entries() StackConfigPolicySpecSecureSettingsEntriesArrayOutput {
	return o.ApplyT(func(v StackConfigPolicySpecSecureSettings) []StackConfigPolicySpecSecureSettingsEntries {
		return v.Entries
	}).(StackConfigPolicySpecSecureSettingsEntriesArrayOutput)
}

// SecretName is the name of the secret.
func (o StackConfigPolicySpecSecureSettingsOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackConfigPolicySpecSecureSettings) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type StackConfigPolicySpecSecureSettingsArrayOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecSecureSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackConfigPolicySpecSecureSettings)(nil)).Elem()
}

func (o StackConfigPolicySpecSecureSettingsArrayOutput) ToStackConfigPolicySpecSecureSettingsArrayOutput() StackConfigPolicySpecSecureSettingsArrayOutput {
	return o
}

func (o StackConfigPolicySpecSecureSettingsArrayOutput) ToStackConfigPolicySpecSecureSettingsArrayOutputWithContext(ctx context.Context) StackConfigPolicySpecSecureSettingsArrayOutput {
	return o
}

func (o StackConfigPolicySpecSecureSettingsArrayOutput) Index(i pulumi.IntInput) StackConfigPolicySpecSecureSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StackConfigPolicySpecSecureSettings {
		return vs[0].([]StackConfigPolicySpecSecureSettings)[vs[1].(int)]
	}).(StackConfigPolicySpecSecureSettingsOutput)
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type StackConfigPolicySpecSecureSettingsEntries struct {
	// Key is the key contained in the secret.
	Key *string `pulumi:"key"`
	// Path is the relative file path to map the key to.
	// Path must not be an absolute file path and must not contain any ".." components.
	Path *string `pulumi:"path"`
}

// StackConfigPolicySpecSecureSettingsEntriesInput is an input type that accepts StackConfigPolicySpecSecureSettingsEntriesArgs and StackConfigPolicySpecSecureSettingsEntriesOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecSecureSettingsEntriesInput` via:
//
//	StackConfigPolicySpecSecureSettingsEntriesArgs{...}
type StackConfigPolicySpecSecureSettingsEntriesInput interface {
	pulumi.Input

	ToStackConfigPolicySpecSecureSettingsEntriesOutput() StackConfigPolicySpecSecureSettingsEntriesOutput
	ToStackConfigPolicySpecSecureSettingsEntriesOutputWithContext(context.Context) StackConfigPolicySpecSecureSettingsEntriesOutput
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type StackConfigPolicySpecSecureSettingsEntriesArgs struct {
	// Key is the key contained in the secret.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Path is the relative file path to map the key to.
	// Path must not be an absolute file path and must not contain any ".." components.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (StackConfigPolicySpecSecureSettingsEntriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecSecureSettingsEntries)(nil)).Elem()
}

func (i StackConfigPolicySpecSecureSettingsEntriesArgs) ToStackConfigPolicySpecSecureSettingsEntriesOutput() StackConfigPolicySpecSecureSettingsEntriesOutput {
	return i.ToStackConfigPolicySpecSecureSettingsEntriesOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecSecureSettingsEntriesArgs) ToStackConfigPolicySpecSecureSettingsEntriesOutputWithContext(ctx context.Context) StackConfigPolicySpecSecureSettingsEntriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecSecureSettingsEntriesOutput)
}

// StackConfigPolicySpecSecureSettingsEntriesArrayInput is an input type that accepts StackConfigPolicySpecSecureSettingsEntriesArray and StackConfigPolicySpecSecureSettingsEntriesArrayOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecSecureSettingsEntriesArrayInput` via:
//
//	StackConfigPolicySpecSecureSettingsEntriesArray{ StackConfigPolicySpecSecureSettingsEntriesArgs{...} }
type StackConfigPolicySpecSecureSettingsEntriesArrayInput interface {
	pulumi.Input

	ToStackConfigPolicySpecSecureSettingsEntriesArrayOutput() StackConfigPolicySpecSecureSettingsEntriesArrayOutput
	ToStackConfigPolicySpecSecureSettingsEntriesArrayOutputWithContext(context.Context) StackConfigPolicySpecSecureSettingsEntriesArrayOutput
}

type StackConfigPolicySpecSecureSettingsEntriesArray []StackConfigPolicySpecSecureSettingsEntriesInput

func (StackConfigPolicySpecSecureSettingsEntriesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackConfigPolicySpecSecureSettingsEntries)(nil)).Elem()
}

func (i StackConfigPolicySpecSecureSettingsEntriesArray) ToStackConfigPolicySpecSecureSettingsEntriesArrayOutput() StackConfigPolicySpecSecureSettingsEntriesArrayOutput {
	return i.ToStackConfigPolicySpecSecureSettingsEntriesArrayOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecSecureSettingsEntriesArray) ToStackConfigPolicySpecSecureSettingsEntriesArrayOutputWithContext(ctx context.Context) StackConfigPolicySpecSecureSettingsEntriesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecSecureSettingsEntriesArrayOutput)
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type StackConfigPolicySpecSecureSettingsEntriesOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecSecureSettingsEntriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecSecureSettingsEntries)(nil)).Elem()
}

func (o StackConfigPolicySpecSecureSettingsEntriesOutput) ToStackConfigPolicySpecSecureSettingsEntriesOutput() StackConfigPolicySpecSecureSettingsEntriesOutput {
	return o
}

func (o StackConfigPolicySpecSecureSettingsEntriesOutput) ToStackConfigPolicySpecSecureSettingsEntriesOutputWithContext(ctx context.Context) StackConfigPolicySpecSecureSettingsEntriesOutput {
	return o
}

// Key is the key contained in the secret.
func (o StackConfigPolicySpecSecureSettingsEntriesOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackConfigPolicySpecSecureSettingsEntries) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Path is the relative file path to map the key to.
// Path must not be an absolute file path and must not contain any ".." components.
func (o StackConfigPolicySpecSecureSettingsEntriesOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackConfigPolicySpecSecureSettingsEntries) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type StackConfigPolicySpecSecureSettingsEntriesArrayOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecSecureSettingsEntriesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackConfigPolicySpecSecureSettingsEntries)(nil)).Elem()
}

func (o StackConfigPolicySpecSecureSettingsEntriesArrayOutput) ToStackConfigPolicySpecSecureSettingsEntriesArrayOutput() StackConfigPolicySpecSecureSettingsEntriesArrayOutput {
	return o
}

func (o StackConfigPolicySpecSecureSettingsEntriesArrayOutput) ToStackConfigPolicySpecSecureSettingsEntriesArrayOutputWithContext(ctx context.Context) StackConfigPolicySpecSecureSettingsEntriesArrayOutput {
	return o
}

func (o StackConfigPolicySpecSecureSettingsEntriesArrayOutput) Index(i pulumi.IntInput) StackConfigPolicySpecSecureSettingsEntriesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StackConfigPolicySpecSecureSettingsEntries {
		return vs[0].([]StackConfigPolicySpecSecureSettingsEntries)[vs[1].(int)]
	}).(StackConfigPolicySpecSecureSettingsEntriesOutput)
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type StackConfigPolicySpecSecureSettingsEntriesPatch struct {
	// Key is the key contained in the secret.
	Key *string `pulumi:"key"`
	// Path is the relative file path to map the key to.
	// Path must not be an absolute file path and must not contain any ".." components.
	Path *string `pulumi:"path"`
}

// StackConfigPolicySpecSecureSettingsEntriesPatchInput is an input type that accepts StackConfigPolicySpecSecureSettingsEntriesPatchArgs and StackConfigPolicySpecSecureSettingsEntriesPatchOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecSecureSettingsEntriesPatchInput` via:
//
//	StackConfigPolicySpecSecureSettingsEntriesPatchArgs{...}
type StackConfigPolicySpecSecureSettingsEntriesPatchInput interface {
	pulumi.Input

	ToStackConfigPolicySpecSecureSettingsEntriesPatchOutput() StackConfigPolicySpecSecureSettingsEntriesPatchOutput
	ToStackConfigPolicySpecSecureSettingsEntriesPatchOutputWithContext(context.Context) StackConfigPolicySpecSecureSettingsEntriesPatchOutput
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type StackConfigPolicySpecSecureSettingsEntriesPatchArgs struct {
	// Key is the key contained in the secret.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Path is the relative file path to map the key to.
	// Path must not be an absolute file path and must not contain any ".." components.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (StackConfigPolicySpecSecureSettingsEntriesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecSecureSettingsEntriesPatch)(nil)).Elem()
}

func (i StackConfigPolicySpecSecureSettingsEntriesPatchArgs) ToStackConfigPolicySpecSecureSettingsEntriesPatchOutput() StackConfigPolicySpecSecureSettingsEntriesPatchOutput {
	return i.ToStackConfigPolicySpecSecureSettingsEntriesPatchOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecSecureSettingsEntriesPatchArgs) ToStackConfigPolicySpecSecureSettingsEntriesPatchOutputWithContext(ctx context.Context) StackConfigPolicySpecSecureSettingsEntriesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecSecureSettingsEntriesPatchOutput)
}

// StackConfigPolicySpecSecureSettingsEntriesPatchArrayInput is an input type that accepts StackConfigPolicySpecSecureSettingsEntriesPatchArray and StackConfigPolicySpecSecureSettingsEntriesPatchArrayOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecSecureSettingsEntriesPatchArrayInput` via:
//
//	StackConfigPolicySpecSecureSettingsEntriesPatchArray{ StackConfigPolicySpecSecureSettingsEntriesPatchArgs{...} }
type StackConfigPolicySpecSecureSettingsEntriesPatchArrayInput interface {
	pulumi.Input

	ToStackConfigPolicySpecSecureSettingsEntriesPatchArrayOutput() StackConfigPolicySpecSecureSettingsEntriesPatchArrayOutput
	ToStackConfigPolicySpecSecureSettingsEntriesPatchArrayOutputWithContext(context.Context) StackConfigPolicySpecSecureSettingsEntriesPatchArrayOutput
}

type StackConfigPolicySpecSecureSettingsEntriesPatchArray []StackConfigPolicySpecSecureSettingsEntriesPatchInput

func (StackConfigPolicySpecSecureSettingsEntriesPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackConfigPolicySpecSecureSettingsEntriesPatch)(nil)).Elem()
}

func (i StackConfigPolicySpecSecureSettingsEntriesPatchArray) ToStackConfigPolicySpecSecureSettingsEntriesPatchArrayOutput() StackConfigPolicySpecSecureSettingsEntriesPatchArrayOutput {
	return i.ToStackConfigPolicySpecSecureSettingsEntriesPatchArrayOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecSecureSettingsEntriesPatchArray) ToStackConfigPolicySpecSecureSettingsEntriesPatchArrayOutputWithContext(ctx context.Context) StackConfigPolicySpecSecureSettingsEntriesPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecSecureSettingsEntriesPatchArrayOutput)
}

// KeyToPath defines how to map a key in a Secret object to a filesystem path.
type StackConfigPolicySpecSecureSettingsEntriesPatchOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecSecureSettingsEntriesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecSecureSettingsEntriesPatch)(nil)).Elem()
}

func (o StackConfigPolicySpecSecureSettingsEntriesPatchOutput) ToStackConfigPolicySpecSecureSettingsEntriesPatchOutput() StackConfigPolicySpecSecureSettingsEntriesPatchOutput {
	return o
}

func (o StackConfigPolicySpecSecureSettingsEntriesPatchOutput) ToStackConfigPolicySpecSecureSettingsEntriesPatchOutputWithContext(ctx context.Context) StackConfigPolicySpecSecureSettingsEntriesPatchOutput {
	return o
}

// Key is the key contained in the secret.
func (o StackConfigPolicySpecSecureSettingsEntriesPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackConfigPolicySpecSecureSettingsEntriesPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Path is the relative file path to map the key to.
// Path must not be an absolute file path and must not contain any ".." components.
func (o StackConfigPolicySpecSecureSettingsEntriesPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackConfigPolicySpecSecureSettingsEntriesPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type StackConfigPolicySpecSecureSettingsEntriesPatchArrayOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecSecureSettingsEntriesPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackConfigPolicySpecSecureSettingsEntriesPatch)(nil)).Elem()
}

func (o StackConfigPolicySpecSecureSettingsEntriesPatchArrayOutput) ToStackConfigPolicySpecSecureSettingsEntriesPatchArrayOutput() StackConfigPolicySpecSecureSettingsEntriesPatchArrayOutput {
	return o
}

func (o StackConfigPolicySpecSecureSettingsEntriesPatchArrayOutput) ToStackConfigPolicySpecSecureSettingsEntriesPatchArrayOutputWithContext(ctx context.Context) StackConfigPolicySpecSecureSettingsEntriesPatchArrayOutput {
	return o
}

func (o StackConfigPolicySpecSecureSettingsEntriesPatchArrayOutput) Index(i pulumi.IntInput) StackConfigPolicySpecSecureSettingsEntriesPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StackConfigPolicySpecSecureSettingsEntriesPatch {
		return vs[0].([]StackConfigPolicySpecSecureSettingsEntriesPatch)[vs[1].(int)]
	}).(StackConfigPolicySpecSecureSettingsEntriesPatchOutput)
}

// SecretSource defines a data source based on a Kubernetes Secret.
type StackConfigPolicySpecSecureSettingsPatch struct {
	// Entries define how to project each key-value pair in the secret to filesystem paths.
	// If not defined, all keys will be projected to similarly named paths in the filesystem.
	// If defined, only the specified keys will be projected to the corresponding paths.
	Entries []StackConfigPolicySpecSecureSettingsEntriesPatch `pulumi:"entries"`
	// SecretName is the name of the secret.
	SecretName *string `pulumi:"secretName"`
}

// StackConfigPolicySpecSecureSettingsPatchInput is an input type that accepts StackConfigPolicySpecSecureSettingsPatchArgs and StackConfigPolicySpecSecureSettingsPatchOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecSecureSettingsPatchInput` via:
//
//	StackConfigPolicySpecSecureSettingsPatchArgs{...}
type StackConfigPolicySpecSecureSettingsPatchInput interface {
	pulumi.Input

	ToStackConfigPolicySpecSecureSettingsPatchOutput() StackConfigPolicySpecSecureSettingsPatchOutput
	ToStackConfigPolicySpecSecureSettingsPatchOutputWithContext(context.Context) StackConfigPolicySpecSecureSettingsPatchOutput
}

// SecretSource defines a data source based on a Kubernetes Secret.
type StackConfigPolicySpecSecureSettingsPatchArgs struct {
	// Entries define how to project each key-value pair in the secret to filesystem paths.
	// If not defined, all keys will be projected to similarly named paths in the filesystem.
	// If defined, only the specified keys will be projected to the corresponding paths.
	Entries StackConfigPolicySpecSecureSettingsEntriesPatchArrayInput `pulumi:"entries"`
	// SecretName is the name of the secret.
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (StackConfigPolicySpecSecureSettingsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecSecureSettingsPatch)(nil)).Elem()
}

func (i StackConfigPolicySpecSecureSettingsPatchArgs) ToStackConfigPolicySpecSecureSettingsPatchOutput() StackConfigPolicySpecSecureSettingsPatchOutput {
	return i.ToStackConfigPolicySpecSecureSettingsPatchOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecSecureSettingsPatchArgs) ToStackConfigPolicySpecSecureSettingsPatchOutputWithContext(ctx context.Context) StackConfigPolicySpecSecureSettingsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecSecureSettingsPatchOutput)
}

// StackConfigPolicySpecSecureSettingsPatchArrayInput is an input type that accepts StackConfigPolicySpecSecureSettingsPatchArray and StackConfigPolicySpecSecureSettingsPatchArrayOutput values.
// You can construct a concrete instance of `StackConfigPolicySpecSecureSettingsPatchArrayInput` via:
//
//	StackConfigPolicySpecSecureSettingsPatchArray{ StackConfigPolicySpecSecureSettingsPatchArgs{...} }
type StackConfigPolicySpecSecureSettingsPatchArrayInput interface {
	pulumi.Input

	ToStackConfigPolicySpecSecureSettingsPatchArrayOutput() StackConfigPolicySpecSecureSettingsPatchArrayOutput
	ToStackConfigPolicySpecSecureSettingsPatchArrayOutputWithContext(context.Context) StackConfigPolicySpecSecureSettingsPatchArrayOutput
}

type StackConfigPolicySpecSecureSettingsPatchArray []StackConfigPolicySpecSecureSettingsPatchInput

func (StackConfigPolicySpecSecureSettingsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackConfigPolicySpecSecureSettingsPatch)(nil)).Elem()
}

func (i StackConfigPolicySpecSecureSettingsPatchArray) ToStackConfigPolicySpecSecureSettingsPatchArrayOutput() StackConfigPolicySpecSecureSettingsPatchArrayOutput {
	return i.ToStackConfigPolicySpecSecureSettingsPatchArrayOutputWithContext(context.Background())
}

func (i StackConfigPolicySpecSecureSettingsPatchArray) ToStackConfigPolicySpecSecureSettingsPatchArrayOutputWithContext(ctx context.Context) StackConfigPolicySpecSecureSettingsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicySpecSecureSettingsPatchArrayOutput)
}

// SecretSource defines a data source based on a Kubernetes Secret.
type StackConfigPolicySpecSecureSettingsPatchOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecSecureSettingsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicySpecSecureSettingsPatch)(nil)).Elem()
}

func (o StackConfigPolicySpecSecureSettingsPatchOutput) ToStackConfigPolicySpecSecureSettingsPatchOutput() StackConfigPolicySpecSecureSettingsPatchOutput {
	return o
}

func (o StackConfigPolicySpecSecureSettingsPatchOutput) ToStackConfigPolicySpecSecureSettingsPatchOutputWithContext(ctx context.Context) StackConfigPolicySpecSecureSettingsPatchOutput {
	return o
}

// Entries define how to project each key-value pair in the secret to filesystem paths.
// If not defined, all keys will be projected to similarly named paths in the filesystem.
// If defined, only the specified keys will be projected to the corresponding paths.
func (o StackConfigPolicySpecSecureSettingsPatchOutput) Entries() StackConfigPolicySpecSecureSettingsEntriesPatchArrayOutput {
	return o.ApplyT(func(v StackConfigPolicySpecSecureSettingsPatch) []StackConfigPolicySpecSecureSettingsEntriesPatch {
		return v.Entries
	}).(StackConfigPolicySpecSecureSettingsEntriesPatchArrayOutput)
}

// SecretName is the name of the secret.
func (o StackConfigPolicySpecSecureSettingsPatchOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackConfigPolicySpecSecureSettingsPatch) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type StackConfigPolicySpecSecureSettingsPatchArrayOutput struct{ *pulumi.OutputState }

func (StackConfigPolicySpecSecureSettingsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StackConfigPolicySpecSecureSettingsPatch)(nil)).Elem()
}

func (o StackConfigPolicySpecSecureSettingsPatchArrayOutput) ToStackConfigPolicySpecSecureSettingsPatchArrayOutput() StackConfigPolicySpecSecureSettingsPatchArrayOutput {
	return o
}

func (o StackConfigPolicySpecSecureSettingsPatchArrayOutput) ToStackConfigPolicySpecSecureSettingsPatchArrayOutputWithContext(ctx context.Context) StackConfigPolicySpecSecureSettingsPatchArrayOutput {
	return o
}

func (o StackConfigPolicySpecSecureSettingsPatchArrayOutput) Index(i pulumi.IntInput) StackConfigPolicySpecSecureSettingsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StackConfigPolicySpecSecureSettingsPatch {
		return vs[0].([]StackConfigPolicySpecSecureSettingsPatch)[vs[1].(int)]
	}).(StackConfigPolicySpecSecureSettingsPatchOutput)
}

type StackConfigPolicyStatus struct {
	// Details holds the status details for each resource to be configured.
	Details map[string]map[string]map[string]string `pulumi:"details"`
	// Errors is the number of resources which have an incorrect configuration
	Errors *int `pulumi:"errors"`
	// ObservedGeneration is the most recent generation observed for this StackConfigPolicy.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// Phase is the phase of the StackConfigPolicy.
	Phase *string `pulumi:"phase"`
	// Ready is the number of resources successfully configured.
	Ready *int `pulumi:"ready"`
	// ReadyCount is a human representation of the number of resources successfully configured.
	ReadyCount *string `pulumi:"readyCount"`
	// Resources is the number of resources to be configured.
	Resources *int `pulumi:"resources"`
	// ResourcesStatuses holds the status for each resource to be configured.
	// Deprecated: Details is used to store the status of resources from ECK 2.11
	ResourcesStatuses map[string]map[string]string `pulumi:"resourcesStatuses"`
}

// StackConfigPolicyStatusInput is an input type that accepts StackConfigPolicyStatusArgs and StackConfigPolicyStatusOutput values.
// You can construct a concrete instance of `StackConfigPolicyStatusInput` via:
//
//	StackConfigPolicyStatusArgs{...}
type StackConfigPolicyStatusInput interface {
	pulumi.Input

	ToStackConfigPolicyStatusOutput() StackConfigPolicyStatusOutput
	ToStackConfigPolicyStatusOutputWithContext(context.Context) StackConfigPolicyStatusOutput
}

type StackConfigPolicyStatusArgs struct {
	// Details holds the status details for each resource to be configured.
	Details pulumi.StringMapMapMapInput `pulumi:"details"`
	// Errors is the number of resources which have an incorrect configuration
	Errors pulumi.IntPtrInput `pulumi:"errors"`
	// ObservedGeneration is the most recent generation observed for this StackConfigPolicy.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// Phase is the phase of the StackConfigPolicy.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// Ready is the number of resources successfully configured.
	Ready pulumi.IntPtrInput `pulumi:"ready"`
	// ReadyCount is a human representation of the number of resources successfully configured.
	ReadyCount pulumi.StringPtrInput `pulumi:"readyCount"`
	// Resources is the number of resources to be configured.
	Resources pulumi.IntPtrInput `pulumi:"resources"`
	// ResourcesStatuses holds the status for each resource to be configured.
	// Deprecated: Details is used to store the status of resources from ECK 2.11
	ResourcesStatuses pulumi.StringMapMapInput `pulumi:"resourcesStatuses"`
}

func (StackConfigPolicyStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicyStatus)(nil)).Elem()
}

func (i StackConfigPolicyStatusArgs) ToStackConfigPolicyStatusOutput() StackConfigPolicyStatusOutput {
	return i.ToStackConfigPolicyStatusOutputWithContext(context.Background())
}

func (i StackConfigPolicyStatusArgs) ToStackConfigPolicyStatusOutputWithContext(ctx context.Context) StackConfigPolicyStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyStatusOutput)
}

func (i StackConfigPolicyStatusArgs) ToStackConfigPolicyStatusPtrOutput() StackConfigPolicyStatusPtrOutput {
	return i.ToStackConfigPolicyStatusPtrOutputWithContext(context.Background())
}

func (i StackConfigPolicyStatusArgs) ToStackConfigPolicyStatusPtrOutputWithContext(ctx context.Context) StackConfigPolicyStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyStatusOutput).ToStackConfigPolicyStatusPtrOutputWithContext(ctx)
}

// StackConfigPolicyStatusPtrInput is an input type that accepts StackConfigPolicyStatusArgs, StackConfigPolicyStatusPtr and StackConfigPolicyStatusPtrOutput values.
// You can construct a concrete instance of `StackConfigPolicyStatusPtrInput` via:
//
//	        StackConfigPolicyStatusArgs{...}
//
//	or:
//
//	        nil
type StackConfigPolicyStatusPtrInput interface {
	pulumi.Input

	ToStackConfigPolicyStatusPtrOutput() StackConfigPolicyStatusPtrOutput
	ToStackConfigPolicyStatusPtrOutputWithContext(context.Context) StackConfigPolicyStatusPtrOutput
}

type stackConfigPolicyStatusPtrType StackConfigPolicyStatusArgs

func StackConfigPolicyStatusPtr(v *StackConfigPolicyStatusArgs) StackConfigPolicyStatusPtrInput {
	return (*stackConfigPolicyStatusPtrType)(v)
}

func (*stackConfigPolicyStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicyStatus)(nil)).Elem()
}

func (i *stackConfigPolicyStatusPtrType) ToStackConfigPolicyStatusPtrOutput() StackConfigPolicyStatusPtrOutput {
	return i.ToStackConfigPolicyStatusPtrOutputWithContext(context.Background())
}

func (i *stackConfigPolicyStatusPtrType) ToStackConfigPolicyStatusPtrOutputWithContext(ctx context.Context) StackConfigPolicyStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyStatusPtrOutput)
}

type StackConfigPolicyStatusOutput struct{ *pulumi.OutputState }

func (StackConfigPolicyStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicyStatus)(nil)).Elem()
}

func (o StackConfigPolicyStatusOutput) ToStackConfigPolicyStatusOutput() StackConfigPolicyStatusOutput {
	return o
}

func (o StackConfigPolicyStatusOutput) ToStackConfigPolicyStatusOutputWithContext(ctx context.Context) StackConfigPolicyStatusOutput {
	return o
}

func (o StackConfigPolicyStatusOutput) ToStackConfigPolicyStatusPtrOutput() StackConfigPolicyStatusPtrOutput {
	return o.ToStackConfigPolicyStatusPtrOutputWithContext(context.Background())
}

func (o StackConfigPolicyStatusOutput) ToStackConfigPolicyStatusPtrOutputWithContext(ctx context.Context) StackConfigPolicyStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackConfigPolicyStatus) *StackConfigPolicyStatus {
		return &v
	}).(StackConfigPolicyStatusPtrOutput)
}

// Details holds the status details for each resource to be configured.
func (o StackConfigPolicyStatusOutput) Details() pulumi.StringMapMapMapOutput {
	return o.ApplyT(func(v StackConfigPolicyStatus) map[string]map[string]map[string]string { return v.Details }).(pulumi.StringMapMapMapOutput)
}

// Errors is the number of resources which have an incorrect configuration
func (o StackConfigPolicyStatusOutput) Errors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyStatus) *int { return v.Errors }).(pulumi.IntPtrOutput)
}

// ObservedGeneration is the most recent generation observed for this StackConfigPolicy.
func (o StackConfigPolicyStatusOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyStatus) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// Phase is the phase of the StackConfigPolicy.
func (o StackConfigPolicyStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// Ready is the number of resources successfully configured.
func (o StackConfigPolicyStatusOutput) Ready() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyStatus) *int { return v.Ready }).(pulumi.IntPtrOutput)
}

// ReadyCount is a human representation of the number of resources successfully configured.
func (o StackConfigPolicyStatusOutput) ReadyCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyStatus) *string { return v.ReadyCount }).(pulumi.StringPtrOutput)
}

// Resources is the number of resources to be configured.
func (o StackConfigPolicyStatusOutput) Resources() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyStatus) *int { return v.Resources }).(pulumi.IntPtrOutput)
}

// ResourcesStatuses holds the status for each resource to be configured.
// Deprecated: Details is used to store the status of resources from ECK 2.11
func (o StackConfigPolicyStatusOutput) ResourcesStatuses() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v StackConfigPolicyStatus) map[string]map[string]string { return v.ResourcesStatuses }).(pulumi.StringMapMapOutput)
}

type StackConfigPolicyStatusPtrOutput struct{ *pulumi.OutputState }

func (StackConfigPolicyStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicyStatus)(nil)).Elem()
}

func (o StackConfigPolicyStatusPtrOutput) ToStackConfigPolicyStatusPtrOutput() StackConfigPolicyStatusPtrOutput {
	return o
}

func (o StackConfigPolicyStatusPtrOutput) ToStackConfigPolicyStatusPtrOutputWithContext(ctx context.Context) StackConfigPolicyStatusPtrOutput {
	return o
}

func (o StackConfigPolicyStatusPtrOutput) Elem() StackConfigPolicyStatusOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatus) StackConfigPolicyStatus {
		if v != nil {
			return *v
		}
		var ret StackConfigPolicyStatus
		return ret
	}).(StackConfigPolicyStatusOutput)
}

// Details holds the status details for each resource to be configured.
func (o StackConfigPolicyStatusPtrOutput) Details() pulumi.StringMapMapMapOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatus) map[string]map[string]map[string]string {
		if v == nil {
			return nil
		}
		return v.Details
	}).(pulumi.StringMapMapMapOutput)
}

// Errors is the number of resources which have an incorrect configuration
func (o StackConfigPolicyStatusPtrOutput) Errors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatus) *int {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(pulumi.IntPtrOutput)
}

// ObservedGeneration is the most recent generation observed for this StackConfigPolicy.
func (o StackConfigPolicyStatusPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatus) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// Phase is the phase of the StackConfigPolicy.
func (o StackConfigPolicyStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// Ready is the number of resources successfully configured.
func (o StackConfigPolicyStatusPtrOutput) Ready() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatus) *int {
		if v == nil {
			return nil
		}
		return v.Ready
	}).(pulumi.IntPtrOutput)
}

// ReadyCount is a human representation of the number of resources successfully configured.
func (o StackConfigPolicyStatusPtrOutput) ReadyCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatus) *string {
		if v == nil {
			return nil
		}
		return v.ReadyCount
	}).(pulumi.StringPtrOutput)
}

// Resources is the number of resources to be configured.
func (o StackConfigPolicyStatusPtrOutput) Resources() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatus) *int {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(pulumi.IntPtrOutput)
}

// ResourcesStatuses holds the status for each resource to be configured.
// Deprecated: Details is used to store the status of resources from ECK 2.11
func (o StackConfigPolicyStatusPtrOutput) ResourcesStatuses() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatus) map[string]map[string]string {
		if v == nil {
			return nil
		}
		return v.ResourcesStatuses
	}).(pulumi.StringMapMapOutput)
}

type StackConfigPolicyStatusPatch struct {
	// Details holds the status details for each resource to be configured.
	Details map[string]map[string]map[string]string `pulumi:"details"`
	// Errors is the number of resources which have an incorrect configuration
	Errors *int `pulumi:"errors"`
	// ObservedGeneration is the most recent generation observed for this StackConfigPolicy.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// Phase is the phase of the StackConfigPolicy.
	Phase *string `pulumi:"phase"`
	// Ready is the number of resources successfully configured.
	Ready *int `pulumi:"ready"`
	// ReadyCount is a human representation of the number of resources successfully configured.
	ReadyCount *string `pulumi:"readyCount"`
	// Resources is the number of resources to be configured.
	Resources *int `pulumi:"resources"`
	// ResourcesStatuses holds the status for each resource to be configured.
	// Deprecated: Details is used to store the status of resources from ECK 2.11
	ResourcesStatuses map[string]map[string]string `pulumi:"resourcesStatuses"`
}

// StackConfigPolicyStatusPatchInput is an input type that accepts StackConfigPolicyStatusPatchArgs and StackConfigPolicyStatusPatchOutput values.
// You can construct a concrete instance of `StackConfigPolicyStatusPatchInput` via:
//
//	StackConfigPolicyStatusPatchArgs{...}
type StackConfigPolicyStatusPatchInput interface {
	pulumi.Input

	ToStackConfigPolicyStatusPatchOutput() StackConfigPolicyStatusPatchOutput
	ToStackConfigPolicyStatusPatchOutputWithContext(context.Context) StackConfigPolicyStatusPatchOutput
}

type StackConfigPolicyStatusPatchArgs struct {
	// Details holds the status details for each resource to be configured.
	Details pulumi.StringMapMapMapInput `pulumi:"details"`
	// Errors is the number of resources which have an incorrect configuration
	Errors pulumi.IntPtrInput `pulumi:"errors"`
	// ObservedGeneration is the most recent generation observed for this StackConfigPolicy.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// Phase is the phase of the StackConfigPolicy.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
	// Ready is the number of resources successfully configured.
	Ready pulumi.IntPtrInput `pulumi:"ready"`
	// ReadyCount is a human representation of the number of resources successfully configured.
	ReadyCount pulumi.StringPtrInput `pulumi:"readyCount"`
	// Resources is the number of resources to be configured.
	Resources pulumi.IntPtrInput `pulumi:"resources"`
	// ResourcesStatuses holds the status for each resource to be configured.
	// Deprecated: Details is used to store the status of resources from ECK 2.11
	ResourcesStatuses pulumi.StringMapMapInput `pulumi:"resourcesStatuses"`
}

func (StackConfigPolicyStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicyStatusPatch)(nil)).Elem()
}

func (i StackConfigPolicyStatusPatchArgs) ToStackConfigPolicyStatusPatchOutput() StackConfigPolicyStatusPatchOutput {
	return i.ToStackConfigPolicyStatusPatchOutputWithContext(context.Background())
}

func (i StackConfigPolicyStatusPatchArgs) ToStackConfigPolicyStatusPatchOutputWithContext(ctx context.Context) StackConfigPolicyStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyStatusPatchOutput)
}

func (i StackConfigPolicyStatusPatchArgs) ToStackConfigPolicyStatusPatchPtrOutput() StackConfigPolicyStatusPatchPtrOutput {
	return i.ToStackConfigPolicyStatusPatchPtrOutputWithContext(context.Background())
}

func (i StackConfigPolicyStatusPatchArgs) ToStackConfigPolicyStatusPatchPtrOutputWithContext(ctx context.Context) StackConfigPolicyStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyStatusPatchOutput).ToStackConfigPolicyStatusPatchPtrOutputWithContext(ctx)
}

// StackConfigPolicyStatusPatchPtrInput is an input type that accepts StackConfigPolicyStatusPatchArgs, StackConfigPolicyStatusPatchPtr and StackConfigPolicyStatusPatchPtrOutput values.
// You can construct a concrete instance of `StackConfigPolicyStatusPatchPtrInput` via:
//
//	        StackConfigPolicyStatusPatchArgs{...}
//
//	or:
//
//	        nil
type StackConfigPolicyStatusPatchPtrInput interface {
	pulumi.Input

	ToStackConfigPolicyStatusPatchPtrOutput() StackConfigPolicyStatusPatchPtrOutput
	ToStackConfigPolicyStatusPatchPtrOutputWithContext(context.Context) StackConfigPolicyStatusPatchPtrOutput
}

type stackConfigPolicyStatusPatchPtrType StackConfigPolicyStatusPatchArgs

func StackConfigPolicyStatusPatchPtr(v *StackConfigPolicyStatusPatchArgs) StackConfigPolicyStatusPatchPtrInput {
	return (*stackConfigPolicyStatusPatchPtrType)(v)
}

func (*stackConfigPolicyStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicyStatusPatch)(nil)).Elem()
}

func (i *stackConfigPolicyStatusPatchPtrType) ToStackConfigPolicyStatusPatchPtrOutput() StackConfigPolicyStatusPatchPtrOutput {
	return i.ToStackConfigPolicyStatusPatchPtrOutputWithContext(context.Background())
}

func (i *stackConfigPolicyStatusPatchPtrType) ToStackConfigPolicyStatusPatchPtrOutputWithContext(ctx context.Context) StackConfigPolicyStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackConfigPolicyStatusPatchPtrOutput)
}

type StackConfigPolicyStatusPatchOutput struct{ *pulumi.OutputState }

func (StackConfigPolicyStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackConfigPolicyStatusPatch)(nil)).Elem()
}

func (o StackConfigPolicyStatusPatchOutput) ToStackConfigPolicyStatusPatchOutput() StackConfigPolicyStatusPatchOutput {
	return o
}

func (o StackConfigPolicyStatusPatchOutput) ToStackConfigPolicyStatusPatchOutputWithContext(ctx context.Context) StackConfigPolicyStatusPatchOutput {
	return o
}

func (o StackConfigPolicyStatusPatchOutput) ToStackConfigPolicyStatusPatchPtrOutput() StackConfigPolicyStatusPatchPtrOutput {
	return o.ToStackConfigPolicyStatusPatchPtrOutputWithContext(context.Background())
}

func (o StackConfigPolicyStatusPatchOutput) ToStackConfigPolicyStatusPatchPtrOutputWithContext(ctx context.Context) StackConfigPolicyStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackConfigPolicyStatusPatch) *StackConfigPolicyStatusPatch {
		return &v
	}).(StackConfigPolicyStatusPatchPtrOutput)
}

// Details holds the status details for each resource to be configured.
func (o StackConfigPolicyStatusPatchOutput) Details() pulumi.StringMapMapMapOutput {
	return o.ApplyT(func(v StackConfigPolicyStatusPatch) map[string]map[string]map[string]string { return v.Details }).(pulumi.StringMapMapMapOutput)
}

// Errors is the number of resources which have an incorrect configuration
func (o StackConfigPolicyStatusPatchOutput) Errors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyStatusPatch) *int { return v.Errors }).(pulumi.IntPtrOutput)
}

// ObservedGeneration is the most recent generation observed for this StackConfigPolicy.
func (o StackConfigPolicyStatusPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyStatusPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// Phase is the phase of the StackConfigPolicy.
func (o StackConfigPolicyStatusPatchOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyStatusPatch) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

// Ready is the number of resources successfully configured.
func (o StackConfigPolicyStatusPatchOutput) Ready() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyStatusPatch) *int { return v.Ready }).(pulumi.IntPtrOutput)
}

// ReadyCount is a human representation of the number of resources successfully configured.
func (o StackConfigPolicyStatusPatchOutput) ReadyCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyStatusPatch) *string { return v.ReadyCount }).(pulumi.StringPtrOutput)
}

// Resources is the number of resources to be configured.
func (o StackConfigPolicyStatusPatchOutput) Resources() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StackConfigPolicyStatusPatch) *int { return v.Resources }).(pulumi.IntPtrOutput)
}

// ResourcesStatuses holds the status for each resource to be configured.
// Deprecated: Details is used to store the status of resources from ECK 2.11
func (o StackConfigPolicyStatusPatchOutput) ResourcesStatuses() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v StackConfigPolicyStatusPatch) map[string]map[string]string { return v.ResourcesStatuses }).(pulumi.StringMapMapOutput)
}

type StackConfigPolicyStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (StackConfigPolicyStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackConfigPolicyStatusPatch)(nil)).Elem()
}

func (o StackConfigPolicyStatusPatchPtrOutput) ToStackConfigPolicyStatusPatchPtrOutput() StackConfigPolicyStatusPatchPtrOutput {
	return o
}

func (o StackConfigPolicyStatusPatchPtrOutput) ToStackConfigPolicyStatusPatchPtrOutputWithContext(ctx context.Context) StackConfigPolicyStatusPatchPtrOutput {
	return o
}

func (o StackConfigPolicyStatusPatchPtrOutput) Elem() StackConfigPolicyStatusPatchOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatusPatch) StackConfigPolicyStatusPatch {
		if v != nil {
			return *v
		}
		var ret StackConfigPolicyStatusPatch
		return ret
	}).(StackConfigPolicyStatusPatchOutput)
}

// Details holds the status details for each resource to be configured.
func (o StackConfigPolicyStatusPatchPtrOutput) Details() pulumi.StringMapMapMapOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatusPatch) map[string]map[string]map[string]string {
		if v == nil {
			return nil
		}
		return v.Details
	}).(pulumi.StringMapMapMapOutput)
}

// Errors is the number of resources which have an incorrect configuration
func (o StackConfigPolicyStatusPatchPtrOutput) Errors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(pulumi.IntPtrOutput)
}

// ObservedGeneration is the most recent generation observed for this StackConfigPolicy.
func (o StackConfigPolicyStatusPatchPtrOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.ObservedGeneration
	}).(pulumi.IntPtrOutput)
}

// Phase is the phase of the StackConfigPolicy.
func (o StackConfigPolicyStatusPatchPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// Ready is the number of resources successfully configured.
func (o StackConfigPolicyStatusPatchPtrOutput) Ready() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.Ready
	}).(pulumi.IntPtrOutput)
}

// ReadyCount is a human representation of the number of resources successfully configured.
func (o StackConfigPolicyStatusPatchPtrOutput) ReadyCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.ReadyCount
	}).(pulumi.StringPtrOutput)
}

// Resources is the number of resources to be configured.
func (o StackConfigPolicyStatusPatchPtrOutput) Resources() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(pulumi.IntPtrOutput)
}

// ResourcesStatuses holds the status for each resource to be configured.
// Deprecated: Details is used to store the status of resources from ECK 2.11
func (o StackConfigPolicyStatusPatchPtrOutput) ResourcesStatuses() pulumi.StringMapMapOutput {
	return o.ApplyT(func(v *StackConfigPolicyStatusPatch) map[string]map[string]string {
		if v == nil {
			return nil
		}
		return v.ResourcesStatuses
	}).(pulumi.StringMapMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicyTypeInput)(nil)).Elem(), StackConfigPolicyTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicyTypeArrayInput)(nil)).Elem(), StackConfigPolicyTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicyListTypeInput)(nil)).Elem(), StackConfigPolicyListTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicyPatchTypeInput)(nil)).Elem(), StackConfigPolicyPatchTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecInput)(nil)).Elem(), StackConfigPolicySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecPtrInput)(nil)).Elem(), StackConfigPolicySpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecElasticsearchInput)(nil)).Elem(), StackConfigPolicySpecElasticsearchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecElasticsearchPtrInput)(nil)).Elem(), StackConfigPolicySpecElasticsearchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecElasticsearchPatchInput)(nil)).Elem(), StackConfigPolicySpecElasticsearchPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecElasticsearchPatchPtrInput)(nil)).Elem(), StackConfigPolicySpecElasticsearchPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecKibanaInput)(nil)).Elem(), StackConfigPolicySpecKibanaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecKibanaPtrInput)(nil)).Elem(), StackConfigPolicySpecKibanaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecKibanaPatchInput)(nil)).Elem(), StackConfigPolicySpecKibanaPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecKibanaPatchPtrInput)(nil)).Elem(), StackConfigPolicySpecKibanaPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecPatchInput)(nil)).Elem(), StackConfigPolicySpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecPatchPtrInput)(nil)).Elem(), StackConfigPolicySpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecResourceSelectorInput)(nil)).Elem(), StackConfigPolicySpecResourceSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecResourceSelectorPtrInput)(nil)).Elem(), StackConfigPolicySpecResourceSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecResourceSelectorMatchExpressionsInput)(nil)).Elem(), StackConfigPolicySpecResourceSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecResourceSelectorMatchExpressionsArrayInput)(nil)).Elem(), StackConfigPolicySpecResourceSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecResourceSelectorMatchExpressionsPatchInput)(nil)).Elem(), StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArrayInput)(nil)).Elem(), StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecResourceSelectorPatchInput)(nil)).Elem(), StackConfigPolicySpecResourceSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecResourceSelectorPatchPtrInput)(nil)).Elem(), StackConfigPolicySpecResourceSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecSecureSettingsInput)(nil)).Elem(), StackConfigPolicySpecSecureSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecSecureSettingsArrayInput)(nil)).Elem(), StackConfigPolicySpecSecureSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecSecureSettingsEntriesInput)(nil)).Elem(), StackConfigPolicySpecSecureSettingsEntriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecSecureSettingsEntriesArrayInput)(nil)).Elem(), StackConfigPolicySpecSecureSettingsEntriesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecSecureSettingsEntriesPatchInput)(nil)).Elem(), StackConfigPolicySpecSecureSettingsEntriesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecSecureSettingsEntriesPatchArrayInput)(nil)).Elem(), StackConfigPolicySpecSecureSettingsEntriesPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecSecureSettingsPatchInput)(nil)).Elem(), StackConfigPolicySpecSecureSettingsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicySpecSecureSettingsPatchArrayInput)(nil)).Elem(), StackConfigPolicySpecSecureSettingsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicyStatusInput)(nil)).Elem(), StackConfigPolicyStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicyStatusPtrInput)(nil)).Elem(), StackConfigPolicyStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicyStatusPatchInput)(nil)).Elem(), StackConfigPolicyStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StackConfigPolicyStatusPatchPtrInput)(nil)).Elem(), StackConfigPolicyStatusPatchArgs{})
	pulumi.RegisterOutputType(StackConfigPolicyTypeOutput{})
	pulumi.RegisterOutputType(StackConfigPolicyTypeArrayOutput{})
	pulumi.RegisterOutputType(StackConfigPolicyListTypeOutput{})
	pulumi.RegisterOutputType(StackConfigPolicyPatchTypeOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecPtrOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecElasticsearchOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecElasticsearchPtrOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecElasticsearchPatchOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecElasticsearchPatchPtrOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecKibanaOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecKibanaPtrOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecKibanaPatchOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecKibanaPatchPtrOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecPatchOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecPatchPtrOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecResourceSelectorOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecResourceSelectorPtrOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecResourceSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecResourceSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecResourceSelectorMatchExpressionsPatchOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecResourceSelectorMatchExpressionsPatchArrayOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecResourceSelectorPatchOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecResourceSelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecSecureSettingsOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecSecureSettingsArrayOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecSecureSettingsEntriesOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecSecureSettingsEntriesArrayOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecSecureSettingsEntriesPatchOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecSecureSettingsEntriesPatchArrayOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecSecureSettingsPatchOutput{})
	pulumi.RegisterOutputType(StackConfigPolicySpecSecureSettingsPatchArrayOutput{})
	pulumi.RegisterOutputType(StackConfigPolicyStatusOutput{})
	pulumi.RegisterOutputType(StackConfigPolicyStatusPtrOutput{})
	pulumi.RegisterOutputType(StackConfigPolicyStatusPatchOutput{})
	pulumi.RegisterOutputType(StackConfigPolicyStatusPatchPtrOutput{})
}
