// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// to not break compatibility when upgrading from previous versions of the CRD
type ElasticsearchPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
}

// NewElasticsearchPatch registers a new resource with the given unique name, arguments, and options.
func NewElasticsearchPatch(ctx *pulumi.Context,
	name string, args *ElasticsearchPatchArgs, opts ...pulumi.ResourceOption) (*ElasticsearchPatch, error) {
	if args == nil {
		args = &ElasticsearchPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("elasticsearch.k8s.elastic.co/v1alpha1")
	args.Kind = pulumi.StringPtr("Elasticsearch")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:elasticsearch.k8s.elastic.co/v1:ElasticsearchPatch"),
		},
		{
			Type: pulumi.String("kubernetes:elasticsearch.k8s.elastic.co/v1beta1:ElasticsearchPatch"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ElasticsearchPatch
	err := ctx.RegisterResource("kubernetes:elasticsearch.k8s.elastic.co/v1alpha1:ElasticsearchPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticsearchPatch gets an existing ElasticsearchPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticsearchPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticsearchPatchState, opts ...pulumi.ResourceOption) (*ElasticsearchPatch, error) {
	var resource ElasticsearchPatch
	err := ctx.ReadResource("kubernetes:elasticsearch.k8s.elastic.co/v1alpha1:ElasticsearchPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElasticsearchPatch resources.
type elasticsearchPatchState struct {
}

type ElasticsearchPatchState struct {
}

func (ElasticsearchPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchPatchState)(nil)).Elem()
}

type elasticsearchPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
}

// The set of arguments for constructing a ElasticsearchPatch resource.
type ElasticsearchPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
}

func (ElasticsearchPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchPatchArgs)(nil)).Elem()
}

type ElasticsearchPatchInput interface {
	pulumi.Input

	ToElasticsearchPatchOutput() ElasticsearchPatchOutput
	ToElasticsearchPatchOutputWithContext(ctx context.Context) ElasticsearchPatchOutput
}

func (*ElasticsearchPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchPatch)(nil)).Elem()
}

func (i *ElasticsearchPatch) ToElasticsearchPatchOutput() ElasticsearchPatchOutput {
	return i.ToElasticsearchPatchOutputWithContext(context.Background())
}

func (i *ElasticsearchPatch) ToElasticsearchPatchOutputWithContext(ctx context.Context) ElasticsearchPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchPatchOutput)
}

// ElasticsearchPatchArrayInput is an input type that accepts ElasticsearchPatchArray and ElasticsearchPatchArrayOutput values.
// You can construct a concrete instance of `ElasticsearchPatchArrayInput` via:
//
//	ElasticsearchPatchArray{ ElasticsearchPatchArgs{...} }
type ElasticsearchPatchArrayInput interface {
	pulumi.Input

	ToElasticsearchPatchArrayOutput() ElasticsearchPatchArrayOutput
	ToElasticsearchPatchArrayOutputWithContext(context.Context) ElasticsearchPatchArrayOutput
}

type ElasticsearchPatchArray []ElasticsearchPatchInput

func (ElasticsearchPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticsearchPatch)(nil)).Elem()
}

func (i ElasticsearchPatchArray) ToElasticsearchPatchArrayOutput() ElasticsearchPatchArrayOutput {
	return i.ToElasticsearchPatchArrayOutputWithContext(context.Background())
}

func (i ElasticsearchPatchArray) ToElasticsearchPatchArrayOutputWithContext(ctx context.Context) ElasticsearchPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchPatchArrayOutput)
}

// ElasticsearchPatchMapInput is an input type that accepts ElasticsearchPatchMap and ElasticsearchPatchMapOutput values.
// You can construct a concrete instance of `ElasticsearchPatchMapInput` via:
//
//	ElasticsearchPatchMap{ "key": ElasticsearchPatchArgs{...} }
type ElasticsearchPatchMapInput interface {
	pulumi.Input

	ToElasticsearchPatchMapOutput() ElasticsearchPatchMapOutput
	ToElasticsearchPatchMapOutputWithContext(context.Context) ElasticsearchPatchMapOutput
}

type ElasticsearchPatchMap map[string]ElasticsearchPatchInput

func (ElasticsearchPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticsearchPatch)(nil)).Elem()
}

func (i ElasticsearchPatchMap) ToElasticsearchPatchMapOutput() ElasticsearchPatchMapOutput {
	return i.ToElasticsearchPatchMapOutputWithContext(context.Background())
}

func (i ElasticsearchPatchMap) ToElasticsearchPatchMapOutputWithContext(ctx context.Context) ElasticsearchPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchPatchMapOutput)
}

type ElasticsearchPatchOutput struct{ *pulumi.OutputState }

func (ElasticsearchPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchPatch)(nil)).Elem()
}

func (o ElasticsearchPatchOutput) ToElasticsearchPatchOutput() ElasticsearchPatchOutput {
	return o
}

func (o ElasticsearchPatchOutput) ToElasticsearchPatchOutputWithContext(ctx context.Context) ElasticsearchPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ElasticsearchPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ElasticsearchPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElasticsearchPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ElasticsearchPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *ElasticsearchPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

type ElasticsearchPatchArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticsearchPatch)(nil)).Elem()
}

func (o ElasticsearchPatchArrayOutput) ToElasticsearchPatchArrayOutput() ElasticsearchPatchArrayOutput {
	return o
}

func (o ElasticsearchPatchArrayOutput) ToElasticsearchPatchArrayOutputWithContext(ctx context.Context) ElasticsearchPatchArrayOutput {
	return o
}

func (o ElasticsearchPatchArrayOutput) Index(i pulumi.IntInput) ElasticsearchPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElasticsearchPatch {
		return vs[0].([]*ElasticsearchPatch)[vs[1].(int)]
	}).(ElasticsearchPatchOutput)
}

type ElasticsearchPatchMapOutput struct{ *pulumi.OutputState }

func (ElasticsearchPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticsearchPatch)(nil)).Elem()
}

func (o ElasticsearchPatchMapOutput) ToElasticsearchPatchMapOutput() ElasticsearchPatchMapOutput {
	return o
}

func (o ElasticsearchPatchMapOutput) ToElasticsearchPatchMapOutputWithContext(ctx context.Context) ElasticsearchPatchMapOutput {
	return o
}

func (o ElasticsearchPatchMapOutput) MapIndex(k pulumi.StringInput) ElasticsearchPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElasticsearchPatch {
		return vs[0].(map[string]*ElasticsearchPatch)[vs[1].(string)]
	}).(ElasticsearchPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchPatchInput)(nil)).Elem(), &ElasticsearchPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchPatchArrayInput)(nil)).Elem(), ElasticsearchPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchPatchMapInput)(nil)).Elem(), ElasticsearchPatchMap{})
	pulumi.RegisterOutputType(ElasticsearchPatchOutput{})
	pulumi.RegisterOutputType(ElasticsearchPatchArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchPatchMapOutput{})
}
