// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// to not break compatibility when upgrading from previous versions of the CRD
type Elasticsearch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
}

// NewElasticsearch registers a new resource with the given unique name, arguments, and options.
func NewElasticsearch(ctx *pulumi.Context,
	name string, args *ElasticsearchArgs, opts ...pulumi.ResourceOption) (*Elasticsearch, error) {
	if args == nil {
		args = &ElasticsearchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("elasticsearch.k8s.elastic.co/v1alpha1")
	args.Kind = pulumi.StringPtr("Elasticsearch")
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("kubernetes:elasticsearch.k8s.elastic.co/v1:Elasticsearch"),
		},
		{
			Type: pulumi.String("kubernetes:elasticsearch.k8s.elastic.co/v1beta1:Elasticsearch"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Elasticsearch
	err := ctx.RegisterResource("kubernetes:elasticsearch.k8s.elastic.co/v1alpha1:Elasticsearch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticsearch gets an existing Elasticsearch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticsearch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticsearchState, opts ...pulumi.ResourceOption) (*Elasticsearch, error) {
	var resource Elasticsearch
	err := ctx.ReadResource("kubernetes:elasticsearch.k8s.elastic.co/v1alpha1:Elasticsearch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Elasticsearch resources.
type elasticsearchState struct {
}

type ElasticsearchState struct {
}

func (ElasticsearchState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchState)(nil)).Elem()
}

type elasticsearchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a Elasticsearch resource.
type ElasticsearchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
}

func (ElasticsearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchArgs)(nil)).Elem()
}

type ElasticsearchInput interface {
	pulumi.Input

	ToElasticsearchOutput() ElasticsearchOutput
	ToElasticsearchOutputWithContext(ctx context.Context) ElasticsearchOutput
}

func (*Elasticsearch) ElementType() reflect.Type {
	return reflect.TypeOf((**Elasticsearch)(nil)).Elem()
}

func (i *Elasticsearch) ToElasticsearchOutput() ElasticsearchOutput {
	return i.ToElasticsearchOutputWithContext(context.Background())
}

func (i *Elasticsearch) ToElasticsearchOutputWithContext(ctx context.Context) ElasticsearchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchOutput)
}

// ElasticsearchArrayInput is an input type that accepts ElasticsearchArray and ElasticsearchArrayOutput values.
// You can construct a concrete instance of `ElasticsearchArrayInput` via:
//
//	ElasticsearchArray{ ElasticsearchArgs{...} }
type ElasticsearchArrayInput interface {
	pulumi.Input

	ToElasticsearchArrayOutput() ElasticsearchArrayOutput
	ToElasticsearchArrayOutputWithContext(context.Context) ElasticsearchArrayOutput
}

type ElasticsearchArray []ElasticsearchInput

func (ElasticsearchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Elasticsearch)(nil)).Elem()
}

func (i ElasticsearchArray) ToElasticsearchArrayOutput() ElasticsearchArrayOutput {
	return i.ToElasticsearchArrayOutputWithContext(context.Background())
}

func (i ElasticsearchArray) ToElasticsearchArrayOutputWithContext(ctx context.Context) ElasticsearchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchArrayOutput)
}

// ElasticsearchMapInput is an input type that accepts ElasticsearchMap and ElasticsearchMapOutput values.
// You can construct a concrete instance of `ElasticsearchMapInput` via:
//
//	ElasticsearchMap{ "key": ElasticsearchArgs{...} }
type ElasticsearchMapInput interface {
	pulumi.Input

	ToElasticsearchMapOutput() ElasticsearchMapOutput
	ToElasticsearchMapOutputWithContext(context.Context) ElasticsearchMapOutput
}

type ElasticsearchMap map[string]ElasticsearchInput

func (ElasticsearchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Elasticsearch)(nil)).Elem()
}

func (i ElasticsearchMap) ToElasticsearchMapOutput() ElasticsearchMapOutput {
	return i.ToElasticsearchMapOutputWithContext(context.Background())
}

func (i ElasticsearchMap) ToElasticsearchMapOutputWithContext(ctx context.Context) ElasticsearchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchMapOutput)
}

type ElasticsearchOutput struct{ *pulumi.OutputState }

func (ElasticsearchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Elasticsearch)(nil)).Elem()
}

func (o ElasticsearchOutput) ToElasticsearchOutput() ElasticsearchOutput {
	return o
}

func (o ElasticsearchOutput) ToElasticsearchOutputWithContext(ctx context.Context) ElasticsearchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ElasticsearchOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Elasticsearch) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ElasticsearchOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Elasticsearch) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ElasticsearchOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *Elasticsearch) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

type ElasticsearchArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Elasticsearch)(nil)).Elem()
}

func (o ElasticsearchArrayOutput) ToElasticsearchArrayOutput() ElasticsearchArrayOutput {
	return o
}

func (o ElasticsearchArrayOutput) ToElasticsearchArrayOutputWithContext(ctx context.Context) ElasticsearchArrayOutput {
	return o
}

func (o ElasticsearchArrayOutput) Index(i pulumi.IntInput) ElasticsearchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Elasticsearch {
		return vs[0].([]*Elasticsearch)[vs[1].(int)]
	}).(ElasticsearchOutput)
}

type ElasticsearchMapOutput struct{ *pulumi.OutputState }

func (ElasticsearchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Elasticsearch)(nil)).Elem()
}

func (o ElasticsearchMapOutput) ToElasticsearchMapOutput() ElasticsearchMapOutput {
	return o
}

func (o ElasticsearchMapOutput) ToElasticsearchMapOutputWithContext(ctx context.Context) ElasticsearchMapOutput {
	return o
}

func (o ElasticsearchMapOutput) MapIndex(k pulumi.StringInput) ElasticsearchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Elasticsearch {
		return vs[0].(map[string]*Elasticsearch)[vs[1].(string)]
	}).(ElasticsearchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchInput)(nil)).Elem(), &Elasticsearch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchArrayInput)(nil)).Elem(), ElasticsearchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchMapInput)(nil)).Elem(), ElasticsearchMap{})
	pulumi.RegisterOutputType(ElasticsearchOutput{})
	pulumi.RegisterOutputType(ElasticsearchArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchMapOutput{})
}
