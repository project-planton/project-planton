// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ElasticsearchList is a list of Elasticsearch
type ElasticsearchList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of elasticsearches. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ElasticsearchTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewElasticsearchList registers a new resource with the given unique name, arguments, and options.
func NewElasticsearchList(ctx *pulumi.Context,
	name string, args *ElasticsearchListArgs, opts ...pulumi.ResourceOption) (*ElasticsearchList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("elasticsearch.k8s.elastic.co/v1")
	args.Kind = pulumi.StringPtr("ElasticsearchList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ElasticsearchList
	err := ctx.RegisterResource("kubernetes:elasticsearch.k8s.elastic.co/v1:ElasticsearchList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticsearchList gets an existing ElasticsearchList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticsearchList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticsearchListState, opts ...pulumi.ResourceOption) (*ElasticsearchList, error) {
	var resource ElasticsearchList
	err := ctx.ReadResource("kubernetes:elasticsearch.k8s.elastic.co/v1:ElasticsearchList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElasticsearchList resources.
type elasticsearchListState struct {
}

type ElasticsearchListState struct {
}

func (ElasticsearchListState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchListState)(nil)).Elem()
}

type elasticsearchListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of elasticsearches. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []ElasticsearchType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a ElasticsearchList resource.
type ElasticsearchListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of elasticsearches. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ElasticsearchTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (ElasticsearchListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchListArgs)(nil)).Elem()
}

type ElasticsearchListInput interface {
	pulumi.Input

	ToElasticsearchListOutput() ElasticsearchListOutput
	ToElasticsearchListOutputWithContext(ctx context.Context) ElasticsearchListOutput
}

func (*ElasticsearchList) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchList)(nil)).Elem()
}

func (i *ElasticsearchList) ToElasticsearchListOutput() ElasticsearchListOutput {
	return i.ToElasticsearchListOutputWithContext(context.Background())
}

func (i *ElasticsearchList) ToElasticsearchListOutputWithContext(ctx context.Context) ElasticsearchListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchListOutput)
}

// ElasticsearchListArrayInput is an input type that accepts ElasticsearchListArray and ElasticsearchListArrayOutput values.
// You can construct a concrete instance of `ElasticsearchListArrayInput` via:
//
//	ElasticsearchListArray{ ElasticsearchListArgs{...} }
type ElasticsearchListArrayInput interface {
	pulumi.Input

	ToElasticsearchListArrayOutput() ElasticsearchListArrayOutput
	ToElasticsearchListArrayOutputWithContext(context.Context) ElasticsearchListArrayOutput
}

type ElasticsearchListArray []ElasticsearchListInput

func (ElasticsearchListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticsearchList)(nil)).Elem()
}

func (i ElasticsearchListArray) ToElasticsearchListArrayOutput() ElasticsearchListArrayOutput {
	return i.ToElasticsearchListArrayOutputWithContext(context.Background())
}

func (i ElasticsearchListArray) ToElasticsearchListArrayOutputWithContext(ctx context.Context) ElasticsearchListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchListArrayOutput)
}

// ElasticsearchListMapInput is an input type that accepts ElasticsearchListMap and ElasticsearchListMapOutput values.
// You can construct a concrete instance of `ElasticsearchListMapInput` via:
//
//	ElasticsearchListMap{ "key": ElasticsearchListArgs{...} }
type ElasticsearchListMapInput interface {
	pulumi.Input

	ToElasticsearchListMapOutput() ElasticsearchListMapOutput
	ToElasticsearchListMapOutputWithContext(context.Context) ElasticsearchListMapOutput
}

type ElasticsearchListMap map[string]ElasticsearchListInput

func (ElasticsearchListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticsearchList)(nil)).Elem()
}

func (i ElasticsearchListMap) ToElasticsearchListMapOutput() ElasticsearchListMapOutput {
	return i.ToElasticsearchListMapOutputWithContext(context.Background())
}

func (i ElasticsearchListMap) ToElasticsearchListMapOutputWithContext(ctx context.Context) ElasticsearchListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchListMapOutput)
}

type ElasticsearchListOutput struct{ *pulumi.OutputState }

func (ElasticsearchListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchList)(nil)).Elem()
}

func (o ElasticsearchListOutput) ToElasticsearchListOutput() ElasticsearchListOutput {
	return o
}

func (o ElasticsearchListOutput) ToElasticsearchListOutputWithContext(ctx context.Context) ElasticsearchListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ElasticsearchListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ElasticsearchList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of elasticsearches. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o ElasticsearchListOutput) Items() ElasticsearchTypeArrayOutput {
	return o.ApplyT(func(v *ElasticsearchList) ElasticsearchTypeArrayOutput { return v.Items }).(ElasticsearchTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ElasticsearchListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ElasticsearchList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ElasticsearchListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *ElasticsearchList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type ElasticsearchListArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticsearchList)(nil)).Elem()
}

func (o ElasticsearchListArrayOutput) ToElasticsearchListArrayOutput() ElasticsearchListArrayOutput {
	return o
}

func (o ElasticsearchListArrayOutput) ToElasticsearchListArrayOutputWithContext(ctx context.Context) ElasticsearchListArrayOutput {
	return o
}

func (o ElasticsearchListArrayOutput) Index(i pulumi.IntInput) ElasticsearchListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElasticsearchList {
		return vs[0].([]*ElasticsearchList)[vs[1].(int)]
	}).(ElasticsearchListOutput)
}

type ElasticsearchListMapOutput struct{ *pulumi.OutputState }

func (ElasticsearchListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticsearchList)(nil)).Elem()
}

func (o ElasticsearchListMapOutput) ToElasticsearchListMapOutput() ElasticsearchListMapOutput {
	return o
}

func (o ElasticsearchListMapOutput) ToElasticsearchListMapOutputWithContext(ctx context.Context) ElasticsearchListMapOutput {
	return o
}

func (o ElasticsearchListMapOutput) MapIndex(k pulumi.StringInput) ElasticsearchListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElasticsearchList {
		return vs[0].(map[string]*ElasticsearchList)[vs[1].(string)]
	}).(ElasticsearchListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchListInput)(nil)).Elem(), &ElasticsearchList{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchListArrayInput)(nil)).Elem(), ElasticsearchListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchListMapInput)(nil)).Elem(), ElasticsearchListMap{})
	pulumi.RegisterOutputType(ElasticsearchListOutput{})
	pulumi.RegisterOutputType(ElasticsearchListArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchListMapOutput{})
}
